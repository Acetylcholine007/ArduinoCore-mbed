From d627a5eda9c31465a83343d6b22f58c2193d922b Mon Sep 17 00:00:00 2001
From: giulcioffi <g.cioffi@arduino.cc>
Date: Wed, 15 Sep 2021 10:03:13 +0200
Subject: [PATCH 113/122] Update COMPONENT_WHD

---
 .../COMPONENT_WHD/CMakeLists.txt              |    34 +
 .../COMPONENT_WHD/inc/whd.h                   |    82 -
 .../COMPONENT_WHD/inc/whd_events.h            |   226 -
 .../COMPONENT_WHD/inc/whd_network_types.h     |   230 -
 .../COMPONENT_WHD/inc/whd_resource_api.h      |   128 -
 .../COMPONENT_WHD/inc/whd_types.h             |  1054 -
 .../COMPONENT_WHD/inc/whd_wifi_api.h          |  1179 -
 .../interface/cy_network_buffer.c             |   114 -
 .../interface/cy_network_buffer.h             |   185 -
 .../COMPONENT_WHD/interface/cy_result.h       |   239 +-
 .../COMPONENT_WHD/interface/cyabs_rtos.h      |   285 +-
 .../COMPONENT_WHD/interface/cyabs_rtos_impl.h |     8 +-
 .../interface/cyabs_rtos_rtxv5.c              |    75 +-
 .../COMPONENT_WHD/interface/cyhal_gpio.cpp    |    83 -
 .../COMPONENT_WHD/interface/cyhal_gpio.h      |   245 +-
 .../COMPONENT_WHD/interface/cyhal_modules.h   |    86 -
 .../COMPONENT_WHD/interface/cyhal_sdio.c      |   799 -
 .../COMPONENT_WHD/interface/cyhal_sdio.h      |   366 +-
 .../COMPONENT_WHD/interface/cyhal_spi.h       |   273 +-
 .../COMPONENT_WHD/mbed_lib.json               |     6 -
 .../COMPONENT_WHD/port/cy_hal.c               |    85 +-
 .../COMPONENT_WHD/port/cy_utils.h             |     2 +
 .../COMPONENT_WHD/port/cybsp.h                |    50 +
 .../COMPONENT_WHD/port/cybsp_wifi.c           |   219 -
 .../COMPONENT_WHD/port/cybsp_wifi.h           |   109 -
 .../{inc/whd_version.h => port/cycfg.h}       |     8 +-
 .../COMPONENT_WHD/port/cyhal.h                |    52 +
 .../COMPONENT_WHD/port/cyhal_gpio.cpp         |   104 +
 .../{interface => port}/cyhal_hw_types.h      |    35 +-
 .../COMPONENT_WHD/port/cyhal_sdio.c           |   483 +
 .../COMPONENT_WHD/port/cyhal_spi.c            |    29 +
 .../COMPONENT_WHD/port/cyhal_system.h         |    20 +
 .../include/whd_clm.h => port/wiced_bd.h}     |    42 +-
 .../COMPONENT_WHD/port/wiced_filesystem.cpp   |   220 +
 .../COMPONENT_WHD/port/wiced_filesystem.h     |   139 +
 .../COMPONENT_4343W/4343WA1-mfgtest.bin       |   Bin 391693 -> 0 bytes
 .../COMPONENT_4343W/4343WA1-mfgtest.clm_blob  |   Bin 7222 -> 0 bytes
 .../COMPONENT_4343W/4343WA1-mfgtest_bin.c     | 23672 ----------------
 .../4343WA1-mfgtest_clm_blob.c                |   400 -
 .../firmware/COMPONENT_4343W/4343WA1.bin      |   Bin 421098 -> 0 bytes
 .../firmware/COMPONENT_4343W/4343WA1.clm_blob |   Bin 7222 -> 0 bytes
 .../4343WA1_bin.c                             |     4 +-
 .../4343WA1_clm_blob.c                        |     0
 .../resources.h                               |     7 +-
 .../wifi_nvram_image.h                        |     0
 .../resources/resource_imp/whd_resources.c    |   292 -
 .../resources/resource_imp/wiced_resource.h   |   228 -
 .../COMPONENT_WHD/src/bus_protocols/whd_bus.c |   145 -
 .../COMPONENT_WHD/src/bus_protocols/whd_bus.h |   123 -
 .../src/bus_protocols/whd_bus_common.c        |   517 -
 .../src/bus_protocols/whd_bus_common.h        |    65 -
 .../whd_bus_protocol_interface.h              |   128 -
 .../src/bus_protocols/whd_bus_sdio_protocol.c |  1469 -
 .../src/bus_protocols/whd_bus_sdio_protocol.h |   229 -
 .../src/bus_protocols/whd_bus_spi_protocol.c  |  1038 -
 .../src/bus_protocols/whd_bus_spi_protocol.h  |   101 -
 .../src/bus_protocols/whd_chip_reg.h          |   114 -
 .../src/bus_protocols/whd_sdio.h              |   234 -
 .../COMPONENT_WHD/src/bus_protocols/whd_spi.h |   122 -
 .../COMPONENT_WHD/src/include/whd_ap.h        |   102 -
 .../src/include/whd_buffer_api.h              |   151 -
 .../COMPONENT_WHD/src/include/whd_cdc_bdc.h   |   158 -
 .../COMPONENT_WHD/src/include/whd_chip.h      |   393 -
 .../src/include/whd_chip_constants.h          |    84 -
 .../COMPONENT_WHD/src/include/whd_debug.h     |   140 -
 .../COMPONENT_WHD/src/include/whd_endian.h    |    69 -
 .../src/include/whd_events_int.h              |   464 -
 .../COMPONENT_WHD/src/include/whd_int.h       |   113 -
 .../src/include/whd_network_if.h              |    76 -
 .../COMPONENT_WHD/src/include/whd_poll.h      |    93 -
 .../src/include/whd_resource_if.h             |    55 -
 .../COMPONENT_WHD/src/include/whd_sdpcm.h     |   124 -
 .../COMPONENT_WHD/src/include/whd_thread.h    |    92 -
 .../src/include/whd_thread_internal.h         |    55 -
 .../COMPONENT_WHD/src/include/whd_types_int.h |   407 -
 .../COMPONENT_WHD/src/include/whd_utils.h     |   182 -
 .../COMPONENT_WHD/src/include/whd_wifi_p2p.h  |    49 -
 .../COMPONENT_WHD/src/include/whd_wlioctl.h   |  3763 ---
 .../COMPONENT_WHD/src/whd_ap.c                |   772 -
 .../COMPONENT_WHD/src/whd_buffer_api.c        |   220 -
 .../COMPONENT_WHD/src/whd_cdc_bdc.c           |   723 -
 .../COMPONENT_WHD/src/whd_chip.c              |  1456 -
 .../COMPONENT_WHD/src/whd_chip_constants.c    |   362 -
 .../COMPONENT_WHD/src/whd_clm.c               |   172 -
 .../COMPONENT_WHD/src/whd_debug.c             |    62 -
 .../COMPONENT_WHD/src/whd_events.c            |   475 -
 .../COMPONENT_WHD/src/whd_logging.c           |   112 -
 .../COMPONENT_WHD/src/whd_management.c        |   478 -
 .../COMPONENT_WHD/src/whd_network_if.c        |    85 -
 .../COMPONENT_WHD/src/whd_resource_if.c       |   103 -
 .../COMPONENT_WHD/src/whd_sdpcm.c             |   618 -
 .../COMPONENT_WHD/src/whd_thread.c            |   346 -
 .../COMPONENT_WHD/src/whd_utils.c             |   877 -
 .../COMPONENT_WHD/src/whd_wifi.c              |   111 -
 .../COMPONENT_WHD/src/whd_wifi_api.c          |  4375 ---
 .../COMPONENT_WHD/src/whd_wifi_p2p.c          |    45 -
 .../COMPONENT_WHD/version.txt                 |     1 -
 .../COMPONENT_WHD/whd_config.h                |    47 +-
 98 files changed, 2205 insertions(+), 51987 deletions(-)
 create mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/CMakeLists.txt
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_events.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_network_types.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_resource_api.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_types.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_wifi_api.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cy_network_buffer.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cy_network_buffer.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_gpio.cpp
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_modules.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_sdio.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/mbed_lib.json
 create mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cybsp.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cybsp_wifi.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cybsp_wifi.h
 rename targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/{inc/whd_version.h => port/cycfg.h} (79%)
 create mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal.h
 create mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_gpio.cpp
 rename targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/{interface => port}/cyhal_hw_types.h (78%)
 create mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_sdio.c
 create mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_spi.c
 create mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_system.h
 rename targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/{src/include/whd_clm.h => port/wiced_bd.h} (52%)
 create mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/wiced_filesystem.cpp
 create mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/wiced_filesystem.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1-mfgtest.bin
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1-mfgtest.clm_blob
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1-mfgtest_bin.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1-mfgtest_clm_blob.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1.bin
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1.clm_blob
 rename targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/{COMPONENT_4343W => COMPONENT_4343W_FS}/4343WA1_bin.c (99%)
 rename targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/{COMPONENT_4343W => COMPONENT_4343W_FS}/4343WA1_clm_blob.c (100%)
 rename targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/{COMPONENT_4343W => COMPONENT_4343W_FS}/resources.h (81%)
 rename targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/nvram/{TARGET_STM32H747xI => }/wifi_nvram_image.h (100%)
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/resource_imp/whd_resources.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/resource_imp/wiced_resource.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_common.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_common.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_protocol_interface.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_sdio_protocol.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_sdio_protocol.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_spi_protocol.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_spi_protocol.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_chip_reg.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_sdio.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_spi.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_ap.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_buffer_api.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_cdc_bdc.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_chip.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_chip_constants.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_debug.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_endian.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_events_int.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_int.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_network_if.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_poll.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_resource_if.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_sdpcm.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_thread.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_thread_internal.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_types_int.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_utils.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_wifi_p2p.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_wlioctl.h
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_ap.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_buffer_api.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_cdc_bdc.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_chip.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_chip_constants.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_clm.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_debug.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_events.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_logging.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_management.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_network_if.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_resource_if.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_sdpcm.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_thread.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_utils.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_wifi.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_wifi_api.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_wifi_p2p.c
 delete mode 100644 targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/version.txt

diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/CMakeLists.txt b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/CMakeLists.txt
new file mode 100644
index 0000000000..55b7e63ecf
--- /dev/null
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/CMakeLists.txt
@@ -0,0 +1,34 @@
+# Copyright (c) 2020-2021 ARM Limited. All rights reserved.
+# SPDX-License-Identifier: Apache-2.0
+
+add_library(mbed-portenta-whd-4343w-fw INTERFACE)
+target_include_directories(mbed-portenta-whd-4343w-fw
+    INTERFACE
+        resources/firmware/COMPONENT_4343W_FS
+)
+target_sources(mbed-portenta-whd-4343w-fw 
+    INTERFACE
+        resources/firmware/COMPONENT_4343W_FS/4343WA1_bin.c
+        resources/firmware/COMPONENT_4343W_FS/4343WA1_clm_blob.c
+)
+
+add_library(mbed-portenta-whd-4343w-nvram INTERFACE)
+target_include_directories(mbed-portenta-whd-4343w-nvram INTERFACE resources/nvram)
+
+add_library(mbed-portenta-whd INTERFACE)
+target_include_directories(mbed-portenta-whd
+    INTERFACE
+        .
+        port
+        interface
+)
+
+target_sources(mbed-portenta-whd
+    INTERFACE
+        port/cyhal.c
+        port/cyhalgpio.cpp
+        port/cyhalsdio.c
+        port/wiced_filesystem.cpp 
+        interface/cyabs_rtos_rtxv5.c
+)
+
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd.h
deleted file mode 100644
index 3eaff251e2..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd.h
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file whd.h
- *  Provides abstract pointer type to act as instance for: driver, interface, buffer funcs, network funcs, resource funcs and bus funcs.
- */
-
-#include "whd_types.h"
-
-#ifndef INCLUDED_WHD_H
-#define INCLUDED_WHD_H
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/**
- * Abstract pointer type that acts as a handle to an instance of the driver
- */
-typedef struct whd_driver *whd_driver_t;
-
-/**
- * Abstract pointer type to handle instance of whd interface
- */
-typedef struct whd_interface *whd_interface_t;
-
-/**
- * Abstract type that acts as a handle to an instance of a buffer function
- */
-typedef struct whd_buffer_funcs whd_buffer_funcs_t;
-
-/**
- * Abstract type that acts as a handle to an instance of a network interface function
- */
-typedef struct whd_netif_funcs whd_netif_funcs_t;
-
-/**
- * Abstract type that acts as a handle to an instance of a resource function
- */
-typedef struct whd_resource_source whd_resource_source_t;
-
-/**
- * Abstract type that acts as a handle to an instance of a bus function used for SDIO specific functionality
- */
-typedef struct whd_bus_funcs whd_sdio_funcs_t;
-
-/**
- * Abstract type that acts as a handle to an instance of a bus function used for SPI specific functionality
- */
-typedef struct whd_bus_funcs whd_spi_funcs_t;
-
-/**
- * Structure for storing WHD init configurations
- */
-typedef struct whd_init_config
-{
-    void *thread_stack_start;   /**< Pointer to the WHD thread stack  */
-    uint32_t thread_stack_size; /**< Size of the WHD thread stack  */
-    uint32_t thread_priority;   /**< Priority to be set to WHD Thread */
-    whd_country_code_t country; /**< Variable to strore country code information */
-} whd_init_config_t;
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-#endif /* INCLUDED_WHD_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_events.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_events.h
deleted file mode 100644
index d85bed7054..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_events.h
+++ /dev/null
@@ -1,226 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file whd_events.h
- *  Header for Event detection
- *
- *  Provides constants and prototypes for functions that allow
- *  user applications to receive event callbacks and set event handlers
- */
-#ifndef INCLUDED_WHD_EVENTS_API_H
-#define INCLUDED_WHD_EVENTS_API_H
-
-#include "whd.h"
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/* List of events */
-#define WLC_E_NONE                         (0x7FFFFFFE) /**< Indicates the end of the event array list */
-
-#define WLC_E_SET_SSID                     0 /**< Indicates status of set SSID. This event occurs when STA tries to join the AP*/
-#define WLC_E_AUTH                         3 /**< 802.11 AUTH request event occurs when STA tries to get authenticated with the AP  */
-#define WLC_E_DEAUTH                       5 /**< 802.11 DEAUTH request event occurs when the the SOFTAP is stopped to deuthenticate the connected stations*/
-#define WLC_E_DEAUTH_IND                   6 /**< 802.11 DEAUTH indication event occurs when the STA gets deauthenticated by the AP */
-#define WLC_E_ASSOC                        7 /**< 802.11 ASSOC request event occurs when STA joins the AP */
-#define WLC_E_ASSOC_IND                    8 /**< 802.11 ASSOC indication occurs when a station joins the SOFTAP that is started */
-#define WLC_E_REASSOC                      9 /**< 802.11 REASSOC request event when the STA again gets associated with the AP */
-#define WLC_E_REASSOC_IND                 10 /**< 802.11 REASSOC indication occurs when a station again reassociates with the SOFTAP*/
-#define WLC_E_DISASSOC                    11 /**< 802.11 DISASSOC request occurs when the STA the tries to leave the AP*/
-#define WLC_E_DISASSOC_IND                12 /**< 802.11 DISASSOC indication occurs when the connected station gets disassociates from SOFTAP,
-                                                  also when STA gets diassociated by the AP*/
-#define WLC_E_LINK                        16 /**< generic link indication */
-#define WLC_E_PROBREQ_MSG                 44 /**< Indicates probe request received for the SOFTAP started*/
-#define WLC_E_PSK_SUP                     46 /**< WPA Handshake fail during association*/
-#define WLC_E_ACTION_FRAME                59 /**< Indicates Action frame Rx */
-#define WLC_E_ACTION_FRAME_COMPLETE       60 /**< Indicates Action frame Tx complete */
-#define WLC_E_ESCAN_RESULT                69 /**< escan result event occurs when we scan for the networks */
-
-/* List of status codes - Applicable for any event type */
-#define WLC_E_STATUS_SUCCESS        0   /**< operation was successful */
-#define WLC_E_STATUS_FAIL           1   /**< operation failed */
-#define WLC_E_STATUS_TIMEOUT        2   /**< operation timed out */
-#define WLC_E_STATUS_NO_NETWORKS    3   /**< failed due to no matching network found */
-#define WLC_E_STATUS_ABORT          4   /**< operation was aborted */
-#define WLC_E_STATUS_NO_ACK         5   /**< protocol failure: packet not ack'd */
-#define WLC_E_STATUS_UNSOLICITED    6   /**< AUTH or ASSOC packet was unsolicited */
-#define WLC_E_STATUS_ATTEMPT        7   /**< attempt to assoc to an auto auth configuration */
-#define WLC_E_STATUS_PARTIAL        8   /**< scan results are incomplete */
-#define WLC_E_STATUS_NEWSCAN        9   /**< scan aborted by another scan */
-#define WLC_E_STATUS_NEWASSOC       10  /**< scan aborted due to assoc in progress */
-#define WLC_E_STATUS_11HQUIET       11  /**< 802.11h quiet period started */
-#define WLC_E_STATUS_SUPPRESS       12  /**< user disabled scanning (WLC_SET_SCANSUPPRESS) */
-#define WLC_E_STATUS_NOCHANS        13  /**< no allowable channels to scan */
-#define WLC_E_STATUS_CCXFASTRM      14  /**< scan aborted due to CCX fast roam */
-#define WLC_E_STATUS_CS_ABORT       15  /**< abort channel select */
-#define WLC_E_STATUS_ERROR          16  /**< request failed due to error */
-#define WLC_E_STATUS_INVALID        0xff /**< Invalid status code to init variables. */
-
-#define WLC_SUP_STATUS_OFFSET      (256) /**< Status offset added to the status codes to match the values from firmware. */
-
-/**
- * @brief Status code for event WLC_E_PSK_SUP
- *
- * -Basic supplicant authentication states
- *
- + WLC_SUP_DISCONNECTED
- *     + WLC_SUP_CONNECTING
- *     + WLC_SUP_IDREQUIRED
- *     + WLC_SUP_AUTHENTICATING
- *     + WLC_SUP_AUTHENTICATED
- *     + WLC_SUP_KEYXCHANGE
- *     + WLC_SUP_KEYED
- *     + WLC_SUP_TIMEOUT
- *     + WLC_SUP_LAST_BASIC_STATE
- *  -Extended supplicant authentication states
- *     + WLC_SUP_KEYXCHANGE_WAIT_M1
- *     + WLC_SUP_KEYXCHANGE_PREP_M2
- *     + WLC_SUP_KEYXCHANGE_WAIT_M3
- *     + WLC_SUP_KEYXCHANGE_PREP_M4
- *     + WLC_SUP_KEYXCHANGE_WAIT_G1
- *     + WLC_SUP_KEYXCHANGE_PREP_G2
- */
-typedef enum sup_auth_status
-{
-    WLC_SUP_DISCONNECTED = 0 + WLC_SUP_STATUS_OFFSET,        /**< Disconnected */
-    WLC_SUP_CONNECTING = 1 + WLC_SUP_STATUS_OFFSET,          /**< Connecting */
-    WLC_SUP_IDREQUIRED = 2 + WLC_SUP_STATUS_OFFSET,          /**< ID Required */
-    WLC_SUP_AUTHENTICATING = 3 + WLC_SUP_STATUS_OFFSET,      /**< Authenticating */
-    WLC_SUP_AUTHENTICATED = 4 + WLC_SUP_STATUS_OFFSET,       /**< Authenticated */
-    WLC_SUP_KEYXCHANGE = 5 + WLC_SUP_STATUS_OFFSET,          /**< Key Exchange */
-    WLC_SUP_KEYED = 6 + WLC_SUP_STATUS_OFFSET,               /**< Key Exchanged */
-    WLC_SUP_TIMEOUT = 7 + WLC_SUP_STATUS_OFFSET,             /**< Timeout */
-    WLC_SUP_LAST_BASIC_STATE = 8 + WLC_SUP_STATUS_OFFSET,    /**< Last Basic State */
-    WLC_SUP_KEYXCHANGE_WAIT_M1 = WLC_SUP_AUTHENTICATED,      /**< Waiting to receive handshake msg M1 */
-    WLC_SUP_KEYXCHANGE_PREP_M2 = WLC_SUP_KEYXCHANGE,         /**< Preparing to send handshake msg M2 */
-    WLC_SUP_KEYXCHANGE_WAIT_M3 = WLC_SUP_LAST_BASIC_STATE,   /**< Waiting to receive handshake msg M3 */
-    WLC_SUP_KEYXCHANGE_PREP_M4 = 9 + WLC_SUP_STATUS_OFFSET,  /**< Preparing to send handshake msg M4 */
-    WLC_SUP_KEYXCHANGE_WAIT_G1 = 10 + WLC_SUP_STATUS_OFFSET, /**< Waiting to receive handshake msg G1 */
-    WLC_SUP_KEYXCHANGE_PREP_G2  = 11 + WLC_SUP_STATUS_OFFSET /**< Preparing to send handshake msg G2 */
-} sup_auth_status_t;
-
-#define WHD_MSG_IFNAME_MAX 16 /**< Max length of Interface name */
-
-#pragma pack(1)
-
-/**
- * Structure to store ethernet header fields in event packets
- */
-typedef struct whd_event_eth_hdr
-{
-    uint16_t subtype;      /**< Vendor specific..32769 */
-    uint16_t length;       /**< Length of ethernet header*/
-    uint8_t version;       /**< Version is 0 */
-    uint8_t oui[3];        /**< Organizationally Unique Identifier */
-    uint16_t usr_subtype;  /**< User specific data */
-} whd_event_eth_hdr_t;
-
-/**
- * Structure to store ethernet destination, source and ethertype in event packets
- */
-typedef struct whd_event_ether_header
-{
-    whd_mac_t destination_address; /**< Ethernet destination address */
-    whd_mac_t source_address;      /**< Ethernet source address */
-    uint16_t ethertype;            /**< Ethertype for identifying event packets */
-} whd_event_ether_header_t;
-
-/**
- *  Structure to store fields after ethernet header in event message
- */
-struct whd_event_msg
-{
-    uint16_t version;               /**< Version */
-    uint16_t flags;                 /**< see flags below */
-    uint32_t event_type;            /**< Event type indicating a response from firmware for IOCTLs/IOVARs sent */
-    uint32_t status;                /**< Status code corresponding to any event type */
-    uint32_t reason;                /**< Reason code associated with the event occurred */
-    uint32_t auth_type;             /**< WLC_E_AUTH: 802.11 AUTH request */
-    uint32_t datalen;               /**< Length of data in event message */
-    whd_mac_t addr;                 /**< Station address (if applicable) */
-    char ifname[WHD_MSG_IFNAME_MAX];               /**< name of the incoming packet interface */
-    uint8_t ifidx;                                 /**< destination OS i/f index */
-    uint8_t bsscfgidx;                             /**< source bsscfg index */
-};
-
-/**
- * Event structure used by driver msgs
- */
-typedef struct whd_event
-{
-    whd_event_ether_header_t eth;    /**< Variable to store ethernet destination, source and ethertype in event packets */
-    whd_event_eth_hdr_t eth_evt_hdr; /**< Variable to store ethernet header fields in event message */
-    whd_event_header_t whd_event;    /**< Variable to store rest of the event packet fields after ethernet header */
-    /* data portion follows */
-} whd_event_t;
-
-#pragma pack()
-
-/** @addtogroup event WHD Event handling API
- *  Functions that allow user applications to receive event callbacks and set event handlers
- *  @{
- */
-/** Event handler prototype definition
- *
- *  @param  ifp                  Pointer to handle instance of whd interface
- *  @param  event_header         whd event header
- *  @param  event_data           event data
- *  @param  handler_user_data    semaphore data
- */
-typedef void *(*whd_event_handler_t)(whd_interface_t ifp, const whd_event_header_t *event_header,
-                                     const uint8_t *event_data, void *handler_user_data);
-
-/** Registers a handler to receive event callbacks.
- *
- *  This function registers a callback handler to be notified when
- *  a particular event is received.
- *
- *
- *  @note   Currently each event may only be registered to one handler and there is a limit to the number of simultaneously
- *          registered events. Maximum of 5 event handlers can registered simultaneously, this also includes the internal
- *          event handler registration which happens during scan, join and starting an AP.
- *
- *  @param  ifp                Pointer to handle instance of whd interface
- *  @param  event_type         Pointer to the event list array
- *  @param  handler_func       A function pointer to the handler callback
- *  @param  handler_user_data  A pointer value which will be passed to the event handler function
- *                             at the time an event is triggered (NULL is allowed)
- *  @param  event_index        Entry where the event handler is registered in the list
- *
- *  @return WHD_SUCCESS or Error code
- */
-uint32_t whd_wifi_set_event_handler(whd_interface_t ifp, const uint32_t *event_type, whd_event_handler_t handler_func,
-                                    void *handler_user_data, uint16_t *event_index);
-/*  @} */
-
-/** Delete/Deregister the event entry where callback is registered
- *
- *  @param  ifp                Pointer to handle instance of whd interface
- *  @param  event_index        Event index obtained during registration by whd_wifi_set_event_handler
- *
- *  @return WHD_SUCCESS or Error code
- */
-
-uint32_t whd_wifi_deregister_event_handler(whd_interface_t ifp, uint16_t event_index);
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-#endif /* ifndef  */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_network_types.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_network_types.h
deleted file mode 100644
index b8b197b554..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_network_types.h
+++ /dev/null
@@ -1,230 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file whd_network_types.h
- *  Prototypes of functions corresponding to Buffer and Network Interface
- *
- *  This file provides prototypes for functions which allows different functionalities related to:
- *      - Buffer Interface: Allocate and release a packet buffer, Retrieve the current pointer and size of a packet buffer, etc.
- *      - Network Interface: Called by WHD to pass received data to the network stack, to send an ethernet frame to WHD, etc.
- */
-#include "whd.h"
-
-#ifndef INC_WHD_NETWORK_TYPES_H_
-#define INC_WHD_NETWORK_TYPES_H_
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-*                  Constants
-******************************************************/
-/** @addtogroup buffif WHD Buffer Interface API
- * Allows WHD to perform buffer related operations like, allocating, releasing, retrieving the current pointer of and size of a packet buffer.
- *  @{
- */
-
-/**
- * Indicates transmit/receive direction that the packet buffer has
- * been used for. This is needed if tx/rx pools are separate.
- */
-typedef enum
-{
-    WHD_NETWORK_TX, /**< Transmit direction */
-    WHD_NETWORK_RX  /**< Recieve direction */
-} whd_buffer_dir_t;
-
-/**
- * Allows WHD to perform buffer related operations like, allocating, releasing, retrieving the current pointer of and size of a packet buffer.
- */
-struct whd_buffer_funcs
-{
-    /** Allocates a packet buffer
-     *
-     *  Implemented in the port layer interface which is specific to the
-     *  buffering scheme in use.
-     *  Attempts to allocate a packet buffer of the size requested. It can do this
-     *  by allocating a pre-existing packet from a pool, using a static buffer,
-     *  or by dynamically allocating memory. The method of allocation does not
-     *  concern WHD, however it must match the way the network stack expects packet
-     *  buffers to be allocated. Usually WHD requires packet of size of WHD_LINK_MTU
-     *  which includes the MTU, other other various header. Refer to whd_types.h
-     *  to find the size of WHD_LINK_MTU
-     *
-     *  @param buffer     A pointer which receives the allocated packet buffer handle
-     *  @param direction  Indicates transmit/receive direction that the packet buffer is
-     *                    used for. This may be needed if tx/rx pools are separate.
-     *  @param size       The number of bytes to allocate.
-     *  @param wait       Whether to wait for a packet buffer to be available
-     *
-     *  @return           WHD_SUCCESS or error code
-     *
-     */
-    whd_result_t (*whd_host_buffer_get)(whd_buffer_t *buffer, whd_buffer_dir_t direction, unsigned short size,
-                                        unsigned long wait);
-
-    /** Releases a packet buffer
-     *
-     *  Implemented in the port layer interface, which will be specific to the
-     *  buffering scheme in use.
-     *  This function is used by WHD to indicate that it no longer requires
-     *  a packet buffer. The buffer can then be released back into a pool for
-     *  reuse, or the dynamically allocated memory can be freed, according to
-     *  how the packet was allocated.
-     *  Returns void since WHD cannot do anything about failures
-     *
-     *  @param buffer     The handle of the packet buffer to be released
-     *  @param direction  Indicates transmit/receive direction that the packet buffer has
-     *                     been used for. This might be needed if tx/rx pools are separate.
-     *
-     */
-    void (*whd_buffer_release)(whd_buffer_t buffer, whd_buffer_dir_t direction);
-
-    /** Retrieves the current pointer of a packet buffer
-     *
-     *  Implemented in the port layer interface which is specific to the
-     *  buffering scheme in use.
-     *  Since packet buffers usually need to be created with space at the
-     *  front for additional headers, this function allows WHD to get
-     *  the current 'front' location pointer.
-     *
-     *  @param buffer  The handle of the packet buffer whose pointer is to be retrieved
-     *
-     *  @return        The packet buffer's current pointer.
-     */
-    uint8_t *(*whd_buffer_get_current_piece_data_pointer)(whd_buffer_t buffer);
-
-    /** Retrieves the size of a packet buffer
-     *
-     *  Implemented in the port layer interface which is specific to the
-     *  buffering scheme in use.
-     *  Since packet buffers usually need to be created with space at the
-     *  front for additional headers, the memory block use to contain a packet buffer
-     *  will often be larger than the current size of the packet buffer data.
-     *  This function allows WHD to retrieve the current size of a packet buffer's data.
-     *
-     *  @param buffer   The handle of the packet buffer whose size is to be retrieved
-     *
-     *  @return         The size of the packet buffer.
-     */
-    uint16_t (*whd_buffer_get_current_piece_size)(whd_buffer_t buffer);
-
-    /** Sets the current size of a WHD packet
-     *
-     *  Implemented in the port layer interface which is specific to the
-     *  buffering scheme in use.
-     *  This function sets the current length of a WHD packet buffer
-     *
-     *  @param buffer  The packet to be modified
-     *  @param size    The new size of the packet buffer
-     *
-     *  @return        WHD_SUCCESS or error code
-     */
-    whd_result_t (*whd_buffer_set_size)(whd_buffer_t buffer, unsigned short size);
-
-    /** Moves the current pointer of a packet buffer
-     *
-     *  Implemented in the port layer interface which is specific to the buffering scheme in use.
-     *
-     *  Since packet buffers usually need to be created with space at the front for additional headers,
-     *  this function allows WHD to move  the current 'front' location pointer so that it has space to
-     *  add headers to transmit packets, and so that the network stack does not see the internal WHD
-     *  headers on received packets.
-     *
-     *  @param buffer             A pointer to the handle of the current packet buffer for which the
-     *                            current pointer will be moved. On return this may contain a pointer
-     *                            to a newly allocated packet buffer which has been daisy chained to
-     *                            the front of the given packet buffer. This would be the case if the given packet
-     *                            buffer  didn't have enough space at the front.
-     *  @param add_remove_amount  This is the number of bytes to move the current pointer of the packet
-     *                            buffer - a negative value increases the space for headers at the front
-     *                            of the packet, a positive value decreases the space.
-     *
-     *  @return                   WHD_SUCCESS or error code
-     */
-    whd_result_t (*whd_buffer_add_remove_at_front)(whd_buffer_t *buffer, int32_t add_remove_amount);
-};
-/*  @} */
-
-/** @addtogroup netif WHD Network Interface API
- *  Allows WHD to pass received data to the network stack, to send an ethernet frame to WHD, etc.
- *  @{
- */
-
-/**
- * Contains functions which allows WHD to pass received data to the network stack, to send an ethernet frame to WHD, etc
- */
-struct whd_netif_funcs
-{
-    /** Called by WHD to pass received data to the network stack
-     *
-     *
-     *  Packets received from the Wi-Fi network by WHD are forwarded to by calling function ptr which
-     *  must be implemented in the network interface. Ethernet headers
-     *  are present at the start of these packet buffers.
-     *
-     *  This function is called asynchronously in the context of the
-     *  WHD thread whenever new data has arrived.
-     *  Packet buffers are allocated within WHD, and ownership is transferred
-     *  to the network stack. The network stack or application is thus
-     *  responsible for releasing the packet buffers.
-     *  Most packet buffering systems have a pointer to the 'current point' within
-     *  the packet buffer. When this function is called, the pointer points
-     *  to the start of the Ethernet header. There is other inconsequential data
-     *  before the Ethernet header.
-     *
-     *  It is preferable that the (whd_network_process_ethernet_data)() function simply puts
-     *  the received packet on a queue for processing by another thread. This avoids the
-     *  WHD thread being unnecessarily tied up which would delay other packets
-     *  being transmitted or received.
-     *
-     *  @param interface  The interface on which the packet was received.
-     *  @param buffer     Handle of the packet which has just been received. Responsibility for
-     *                    releasing this buffer is transferred from WHD at this point.
-     *
-     */
-    void (*whd_network_process_ethernet_data)(whd_interface_t ifp, whd_buffer_t buffer);
-};
-
-/** To send an ethernet frame to WHD (called by the Network Stack)
- *
- *  This function takes ethernet data from the network stack and queues it for transmission over the wireless network.
- *  The function can be called from any thread context as it is thread safe, however
- *  it must not be called from interrupt context since it might get blocked while waiting
- *  for a lock on the transmit queue.
- *
- *  This function returns immediately after the packet has been queued for transmit,
- *  NOT after it has been transmitted.  Packet buffers passed to the WHD
- *  are released inside the WHD once they have been transmitted.
- *
- *  @param ifp           Pointer to handle instance of whd interface
- *  @param buffer        Handle of the packet buffer to be sent.
- *
- *  @return WHD_SUCCESS or Error code
- *
- */
-extern void whd_network_send_ethernet_data(whd_interface_t ifp, whd_buffer_t buffer);
-/*  @} */
-
-
-#ifdef __cplusplus
-} /*extern "C" */
-#endif
-#endif /* INC_WHD_NETWORK_TYPES_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_resource_api.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_resource_api.h
deleted file mode 100644
index eb1071c71b..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_resource_api.h
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file whd_resource_api.h
- *  Prototypes of functions for providing external resources to the radio driver
- *
- *  This file provides prototypes for functions which allow
- *  WHD to download firmware, NVRAM and CLM BLOB on a particular hardware platform.
- *
- */
-#include "whd.h"
-
-#ifndef INCLUDED_WHD_RESOURCE_API_H_
-#define INCLUDED_WHD_RESOURCE_API_H_
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-#define BLOCK_SIZE 1024 /**< Size of the block */
-/**
- * Type of resources
- */
-typedef enum
-{
-    WHD_RESOURCE_WLAN_FIRMWARE, /**< Resource type: WLAN Firmware */
-    WHD_RESOURCE_WLAN_NVRAM,    /**< Resource type: NVRAM file */
-    WHD_RESOURCE_WLAN_CLM,      /**< Resource type: CLM_BLOB file */
-} whd_resource_type_t;
-
-/******************************************************
-*                 Global Variables
-******************************************************/
-
-/** @addtogroup res WHD Resource API
- *  @brief Functions that enable WHD to download WLAN firmware, NVRAM and CLM BLOB on a particular hardware platform.
- *  @{
- */
-
-/**
- * Interface to a data source that provides external resources to the radio driver
- */
-
-/** This data structure defines a source for data generally intended to be downloaded to the radio device.
- *
- * The data is assumed to be available as a set of blocks that are all the same size with the exception
- * of the last block. The whd_get_resource_block_size function returns this block size. The whd_get_resource_block call
- * returns a pointer to a block of data. The actual storage for the data block is owned by the data source, so only a pointer
- * to the block is returned. There are two predominate use cases. If the data is stored in the internal
- * flash memory, then whd_get_resource_no_of_blocks will return 1 and a call to whd_get_resource_block will return a pointer to
- * the data image with the size being the size of the data image. If the data is stored in an external flash of some
- * type, each block of data can be read from the external flash one at a time.  whd_get_resource_no_of_blocks will return
- * the physical number of blocks in the data and each call to whd_get_resource_block will read data from the external memory
- * and make it available via an internal buffer.
- */
-struct whd_resource_source
-{
-    /** Gets the size of the resource for respective resource type
-     *
-     *
-     *  @param whd_drv     Pointer to handle instance of the driver
-     *  @param resource    Type of resource - WHD_RESOURCE_WLAN_FIRMWARE, WHD_RESOURCE_WLAN_NVRAM, WHD_RESOURCE_WLAN_CLM
-     *  @param size_out    Size of the resource
-     *
-     *  @return            WHD_SUCCESS or error code
-     *
-     */
-    uint32_t (*whd_resource_size)(whd_driver_t whd_drv, whd_resource_type_t resource, uint32_t *size_out);
-
-    /** Gets the resource block for specified resource type
-     *
-     *  @param whd_drv     Pointer to handle instance of the driver
-     *  @param type        Type of resource - WHD_RESOURCE_WLAN_FIRMWARE, WHD_RESOURCE_WLAN_NVRAM, WHD_RESOURCE_WLAN_CLM
-     *  @param blockno     The number of block
-     *  @param data        Pointer to a block of data
-     *  @param size_out    Size of the resource
-     *
-     *  @return            WHD_SUCCESS or error code
-     *
-     */
-    uint32_t (*whd_get_resource_block)(whd_driver_t whd_drv, whd_resource_type_t type,
-                                       uint32_t blockno, const uint8_t **data, uint32_t *size_out);
-
-    /** Gets block count for the specified resource_type
-     *
-     *  @param whd_drv      Pointer to handle instance of the driver
-     *  @param type         Type of resource - WHD_RESOURCE_WLAN_FIRMWARE, WHD_RESOURCE_WLAN_NVRAM, WHD_RESOURCE_WLAN_CLM
-     *  @param block_count  Pointer to store block count for the resource
-     *
-     *  @return             WHD_SUCCESS or error code
-     *
-     */
-    uint32_t (*whd_get_resource_no_of_blocks)(whd_driver_t whd_drv, whd_resource_type_t type, uint32_t *block_count);
-
-    /** Gets block size for the specified resource_type
-     *
-     *  @param whd_drv      Pointer to handle instance of the driver
-     *  @param type         Type of resources - WHD_RESOURCE_WLAN_FIRMWARE, WHD_RESOURCE_WLAN_NVRAM, WHD_RESOURCE_WLAN_CLM
-     *  @param size_out     Pointer to store size of the block
-     *
-     *  @return             WHD_SUCCESS or error code
-     *
-     */
-    uint32_t (*whd_get_resource_block_size)(whd_driver_t whd_drv, whd_resource_type_t type, uint32_t *size_out);
-};
-
-/** @} */
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-#endif /* ifndef INCLUDED_WHD_RESOURCE_API_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_types.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_types.h
deleted file mode 100644
index e470bb9574..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_types.h
+++ /dev/null
@@ -1,1054 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file whd_types.h
- *  Defines common data types used with WHD
- *
- */
-
-#include <stdint.h>
-#include "cy_result.h"
-#include "cyhal_hw_types.h"
-
-#ifndef INCLUDED_WHD_TYPES_H_
-#define INCLUDED_WHD_TYPES_H_
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-*                      Macros
-******************************************************/
-#define SSID_NAME_SIZE           (32)  /**< SSID Length */
-
-#define WEP_ENABLED            0x0001  /**< Flag to enable WEP Security        */
-#define TKIP_ENABLED           0x0002  /**< Flag to enable TKIP Encryption     */
-#define AES_ENABLED            0x0004  /**< Flag to enable AES Encryption      */
-#define SHARED_ENABLED     0x00008000  /**< Flag to enable Shared key Security */
-#define WPA_SECURITY       0x00200000  /**< Flag to enable WPA Security        */
-#define WPA2_SECURITY      0x00400000  /**< Flag to enable WPA2 Security       */
-#define WPA3_SECURITY      0x01000000  /**< Flag to enable WPA3 PSK Security   */
-#define SECURITY_MASK      (WEP_ENABLED | TKIP_ENABLED | AES_ENABLED) /**< Flag to Security mask */
-
-#define ENTERPRISE_ENABLED 0x02000000  /**< Flag to enable Enterprise Security */
-#define WPS_ENABLED        0x10000000  /**< Flag to enable WPS Security        */
-#define IBSS_ENABLED       0x20000000  /**< Flag to enable IBSS mode           */
-#define FBT_ENABLED        0x40000000  /**< Flag to enable FBT                 */
-
-#define PM1_POWERSAVE_MODE          (1) /**< Powersave mode on specified interface without regard for throughput reduction */
-#define PM2_POWERSAVE_MODE          (2) /**< Powersave mode on specified interface with High throughput */
-#define NO_POWERSAVE_MODE           (0) /**< No Powersave mode */
-
-/**
- * Suppress unused parameter warning
- */
-#define UNUSED_PARAMETER(x) ( (void)(x) )
-
-/**
- * Suppress unused variable warning
- */
-#define UNUSED_VARIABLE(x) ( (void)(x) )
-
-/**
- * Suppress unused variable warning occurring due to an assert which is disabled in release mode
- */
-#define REFERENCE_DEBUG_ONLY_VARIABLE(x) ( (void)(x) )
-
-/******************************************************
-*@cond               Type Definitions
-******************************************************/
-typedef void *whd_buffer_t;
-typedef struct wl_bss_info_struct whd_bss_info_t;
-typedef struct edcf_acparam whd_edcf_ac_param_t;
-typedef struct wl_af_params whd_af_params_t;
-typedef struct whd_arp_stats_s whd_arp_stats_t;
-typedef struct wl_pkt_filter_stats whd_pkt_filter_stats_t;
-typedef struct whd_tko_retry whd_tko_retry_t;
-typedef struct whd_tko_connect whd_tko_connect_t;
-typedef struct whd_tko_status whd_tko_status_t;
-/** @endcond */
-/******************************************************
-*                    Constants
-******************************************************/
-
-#define WIFI_IE_OUI_LENGTH    (3)    /**< OUI length for Information Element */
-
-/* Below constants are used to allocate the buffer pool by the application */
-
-#define BDC_HEADER_WITH_PAD 6  /**< BDC Header with padding 4 + 2 */
-
-/** From bdc header, Ethernet data starts after an offset of (bdc_header->data_offset<<2).
- * It is variable, but usually 4.
- */
-#define BDC_HEADER_OFFSET_TO_DATA 4
-
-#define SDPCM_HEADER (8 + 4)  /**< SDPCM SW header + Frame tag */
-
-#define MAX_BUS_HEADER_SIZE 4 /**< Max bus header size for all bus types (sdio/spi) */
-
-#define BUFFER_OVERHEAD 4 /**< Buffer overhead, sizeof(void *) */
-
-/**
- * The maximum space in bytes required for headers in front of the Ethernet header.
- * 6 + (8 + 4) + 4 + 4 + 4 = 30 bytes
- */
-#define WHD_LINK_HEADER (BDC_HEADER_WITH_PAD + BDC_HEADER_OFFSET_TO_DATA + \
-                         SDPCM_HEADER + MAX_BUS_HEADER_SIZE + BUFFER_OVERHEAD)
-
-/**
- * The size of an Ethernet header
- */
-#define WHD_ETHERNET_SIZE         (14)
-
-/**
- * The size in bytes of the Link layer header i.e. the whd specific headers and the Ethernet header
- */
-#define WHD_PHYSICAL_HEADER       (WHD_LINK_HEADER + WHD_ETHERNET_SIZE)
-
-/**
- * The maximum size in bytes of the data part of an Ethernet frame
- */
-#ifndef WHD_PAYLOAD_MTU
-#define WHD_PAYLOAD_MTU           (1500)
-#endif
-
-/**
- * The maximum size in bytes of a packet used within whd.
- * Pool should be atleast of this size.
- * Usually buffer pools needs implementation specific headers like pbuf header etc, that should be
- * taken into account along with this during buffer pool creation. Also buffer pools needs alignment with
- * cache size of the platform for better performance
- */
-#define WHD_LINK_MTU            (WHD_PAYLOAD_MTU + WHD_PHYSICAL_HEADER)
-
-/** @cond */
-#ifdef __x86_64__
-typedef uint64_t whd_thread_arg_t;
-#else
-typedef uint32_t whd_thread_arg_t;
-#endif
-/** @endcond */
-/******************************************************
-*               Structures and  Enumerations
-******************************************************/
-/**
- * Enumeration of Dot11 Reason Codes
- */
-typedef enum
-{
-    WHD_DOT11_RC_RESERVED = 0,   /**< Reserved     */
-    WHD_DOT11_RC_UNSPECIFIED = 1 /**< Unspecified  */
-} whd_dot11_reason_code_t;
-
-/**
- * Boolean values
- */
-typedef enum
-{
-    WHD_FALSE = 0, /**< Boolean True */
-    WHD_TRUE = 1   /**< Boolean False */
-} whd_bool_t;
-
-
-/**
- * Transfer direction for the WHD platform bus interface
- */
-typedef enum
-{
-    /* If updating this enum, the bus_direction_mapping variable will also need to be updated */
-    BUS_READ, /**< Specifies bus type and read direction */
-    BUS_WRITE /**< Specifies bus type and write direction */
-} whd_bus_transfer_direction_t;
-
-/**
- * Enumeration of Wi-Fi security modes
- */
-typedef enum
-{
-    WHD_SECURITY_OPEN             = 0,                                                                 /**< Open security                                         */
-    WHD_SECURITY_WEP_PSK          = WEP_ENABLED,                                                       /**< WEP PSK Security with open authentication             */
-    WHD_SECURITY_WEP_SHARED       = (WEP_ENABLED | SHARED_ENABLED),                                    /**< WEP PSK Security with shared authentication           */
-    WHD_SECURITY_WPA_TKIP_PSK     = (WPA_SECURITY | TKIP_ENABLED),                                     /**< WPA PSK Security with TKIP                            */
-    WHD_SECURITY_WPA_AES_PSK      = (WPA_SECURITY | AES_ENABLED),                                      /**< WPA PSK Security with AES                             */
-    WHD_SECURITY_WPA_MIXED_PSK    = (WPA_SECURITY | AES_ENABLED | TKIP_ENABLED),                       /**< WPA PSK Security with AES & TKIP                      */
-    WHD_SECURITY_WPA2_AES_PSK     = (WPA2_SECURITY | AES_ENABLED),                                     /**< WPA2 PSK Security with AES                            */
-    WHD_SECURITY_WPA2_TKIP_PSK    = (WPA2_SECURITY | TKIP_ENABLED),                                    /**< WPA2 PSK Security with TKIP                           */
-    WHD_SECURITY_WPA2_MIXED_PSK   = (WPA2_SECURITY | AES_ENABLED | TKIP_ENABLED),                      /**< WPA2 PSK Security with AES & TKIP                     */
-    WHD_SECURITY_WPA2_FBT_PSK     = (WPA2_SECURITY | AES_ENABLED | FBT_ENABLED),                       /**< WPA2 FBT PSK Security with AES & TKIP */
-    WHD_SECURITY_WPA3_SAE         = (WPA3_SECURITY | AES_ENABLED),                                     /**< WPA3 Security with AES */
-    WHD_SECURITY_WPA2_WPA_AES_PSK  = (WPA2_SECURITY | WPA_SECURITY | AES_ENABLED),                     /**< WPA2 WPA PSK Security with AES                        */
-    WHD_SECURITY_WPA2_WPA_MIXED_PSK = (WPA2_SECURITY | WPA_SECURITY | AES_ENABLED | TKIP_ENABLED),      /**< WPA2 WPA PSK Security with AES & TKIP                 */
-
-    WHD_SECURITY_WPA3_WPA2_PSK    = (WPA3_SECURITY | WPA2_SECURITY | AES_ENABLED),                     /**< WPA3 WPA2 PSK Security with AES */
-
-    WHD_SECURITY_WPA_TKIP_ENT     = (ENTERPRISE_ENABLED | WPA_SECURITY | TKIP_ENABLED),                /**< WPA Enterprise Security with TKIP                     */
-    WHD_SECURITY_WPA_AES_ENT      = (ENTERPRISE_ENABLED | WPA_SECURITY | AES_ENABLED),                 /**< WPA Enterprise Security with AES                      */
-    WHD_SECURITY_WPA_MIXED_ENT    = (ENTERPRISE_ENABLED | WPA_SECURITY | AES_ENABLED | TKIP_ENABLED),  /**< WPA Enterprise Security with AES & TKIP               */
-    WHD_SECURITY_WPA2_TKIP_ENT    = (ENTERPRISE_ENABLED | WPA2_SECURITY | TKIP_ENABLED),               /**< WPA2 Enterprise Security with TKIP                    */
-    WHD_SECURITY_WPA2_AES_ENT     = (ENTERPRISE_ENABLED | WPA2_SECURITY | AES_ENABLED),                /**< WPA2 Enterprise Security with AES                     */
-    WHD_SECURITY_WPA2_MIXED_ENT   = (ENTERPRISE_ENABLED | WPA2_SECURITY | AES_ENABLED | TKIP_ENABLED), /**< WPA2 Enterprise Security with AES & TKIP              */
-    WHD_SECURITY_WPA2_FBT_ENT     = (ENTERPRISE_ENABLED | WPA2_SECURITY | AES_ENABLED | FBT_ENABLED),  /**< WPA2 Enterprise Security with AES & FBT               */
-
-    WHD_SECURITY_IBSS_OPEN        = (IBSS_ENABLED),                                                    /**< Open security on IBSS ad-hoc network                  */
-    WHD_SECURITY_WPS_SECURE       = AES_ENABLED,                                                       /**< WPS with AES security                                 */
-
-    WHD_SECURITY_UNKNOWN          = -1,                                                                /**< May be returned by scan function if security is unknown. Do not pass this to the join function! */
-
-    WHD_SECURITY_FORCE_32_BIT     = 0x7fffffff                                                         /**< Exists only to force whd_security_t type to 32 bits */
-} whd_security_t;
-
-/**
- * Enumeration of methods of scanning
- */
-typedef enum
-{
-    WHD_SCAN_TYPE_ACTIVE              = 0x00, /**< Actively scan a network by sending 802.11 probe(s)                              */
-    WHD_SCAN_TYPE_PASSIVE             = 0x01, /**< Passively scan a network by listening for beacons from APs                      */
-    WHD_SCAN_TYPE_PNO                 = 0x02, /**< Use preferred network offload to detect an AP                                   */
-    WHD_SCAN_TYPE_PROHIBITED_CHANNELS = 0x04, /**< Permit (passively) scanning a channel that isn't valid for the current country  */
-    WHD_SCAN_TYPE_NO_BSSID_FILTER     = 0x08  /**< Return a scan record for each beacon or probe response RX'ed                    */
-} whd_scan_type_t;
-
-/**
- * Enumeration of network types
- */
-typedef enum
-{
-    WHD_BSS_TYPE_INFRASTRUCTURE = 0, /**< Denotes infrastructure network                  */
-    WHD_BSS_TYPE_ADHOC          = 1, /**< Denotes an 802.11 ad-hoc IBSS network           */
-    WHD_BSS_TYPE_ANY            = 2, /**< Denotes either infrastructure or ad-hoc network */
-    WHD_BSS_TYPE_MESH           = 3, /**< Denotes 802.11 mesh network                     */
-
-    WHD_BSS_TYPE_UNKNOWN = -1 /**< May be returned by scan function if BSS type is unknown. Do not pass this to the Join function */
-} whd_bss_type_t;
-
-/**
- * Enumeration of 802.11 radio bands
- */
-typedef enum
-{
-    WHD_802_11_BAND_5GHZ   = 0, /**< Denotes 5GHz radio band   */
-    WHD_802_11_BAND_2_4GHZ = 1  /**< Denotes 2.4GHz radio band */
-} whd_802_11_band_t;
-
-/**
- * Enumeration of custom IE(Information Element) management actions
- */
-typedef enum
-{
-    WHD_ADD_CUSTOM_IE,   /**< Add a custom IE(Information Element)    */
-    WHD_REMOVE_CUSTOM_IE /**< Remove a custom IE(Information Element) */
-} whd_custom_ie_action_t;
-
-
-/**
- * Enumeration of listen interval time unit types
- */
-typedef enum
-{
-    WHD_LISTEN_INTERVAL_TIME_UNIT_BEACON, /**< Time units specified in beacon periods */
-    WHD_LISTEN_INTERVAL_TIME_UNIT_DTIM    /**< Time units specified in DTIM periods   */
-} whd_listen_interval_time_unit_t;
-
-/**
- * Structure for storing scan status
- */
-typedef enum
-{
-    WHD_SCAN_INCOMPLETE,                /**< Denotes that scan is not finished */
-    WHD_SCAN_COMPLETED_SUCCESSFULLY,    /**< Successful completion of scan */
-    WHD_SCAN_ABORTED,                   /**< Scan is aborted */
-} whd_scan_status_t;
-
-/**
- * Structure for storing radio band list information
- */
-typedef struct
-{
-    int32_t number_of_bands; /**< Number of bands supported, currently 1 or 2      */
-    int32_t current_band;    /**< Current band type: WLC_BAND_2G or WLC_BAND_5G   */
-    int32_t other_band;      /**< If value of number_of_bands parameter is 2, then this member specifies the 2nd band */
-} whd_band_list_t;
-
-/**
- * Enumeration of scan result flags
- */
-typedef enum
-{
-    WHD_SCAN_RESULT_FLAG_RSSI_OFF_CHANNEL = 0x01, /**< RSSI came from an off channel DSSS (1 or 1 Mb) Rx */
-    WHD_SCAN_RESULT_FLAG_BEACON = 0x02            /**< Beacon (vs probe response)                        */
-} whd_scan_result_flag_t;
-
-/**
- * Protected Management Frame Capability
- */
-enum
-{
-    WL_MFP_NONE = 0,  /**< Disables the client support for MFP. */
-    WL_MFP_CAPABLE,   /**< Allows both MFP-capable and clients that do not support MFP to join the network. */
-    WL_MFP_REQUIRED   /**< Clients are allowed to associate only if MFP is negotiated. */
-};
-
-
-/**
- * Enumeration of ioctl get
- */
-typedef enum
-{
-    WHD_IOCTL_GET_RATE = 12,
-    WHD_IOCTL_GET_COUNTRY = 83,
-    WHD_IOCTL_GET_CLK = 160,
-    WHD_IOCTL_GET_WSEC = 133,
-    WHD_IOCTL_GET_AUTH = 21,
-    WHD_IOCTL_GET_WPA_AUTH = 164,
-    WHD_IOCTL_GET_PM = 85,
-    WHD_IOCTL_GET_BSSID = 23,
-    WHD_IOCTL_GET_ASSOCLIST = 159,
-    WHD_IOCTL_GET_BSS_INFO = 136,
-    WHD_IOCTL_GET_CHANNEL = 29
-
-} whd_usr_ioctl_get_list_t;
-
-/**
- * Enumeration of ioctl set
- */
-typedef enum
-{
-    WHD_IOCTL_SET_CHANNEL = 30,
-    WHD_IOCTL_SET_WSEC_PMK = 268,
-    WHD_IOCTL_SET_KEY = 45,
-    WHD_IOCTL_SET_WPA_AUTH = 165,
-    WHD_IOCTL_SCB_DEAUTHENTICATE_FOR_REASON = 201,
-    WHD_IOCTL_SET_PM = 86,
-    WHD_IOCTL_SET_SSID = 26,
-    WHD_IOCTL_SET_BCNPRD = 76,
-    WHD_IOCTL_SET_DTIMPRD = 78,
-    WHD_IOCTL_SET_WSEC = 134,
-    WHD_IOCTL_SET_INFRA = 20,
-    WHD_IOCTL_SET_AUTH = 22
-
-} whd_usr_ioctl_set_list_t;
-
-/**
- * IOVAR set list
- */
-typedef enum
-{
-    WHD_IOVAR_SET_MFP = 0,
-    WHD_IOVAR_SET_MPC,
-    WHD_IOVAR_SET_AMPDU_BA_WINDOW_SIZE,
-    WHD_IOVAR_SET_AMPDU_MPDU,
-    WHD_IOVAR_SET_LISTEN_INTERVAL_BEACON,
-    WHD_IOVAR_SET_LISTEN_INTERVAL_DTIM,
-    WHD_IOVAR_SET_LISTEN_INTERVAL_ASSOC,
-} whd_usr_iovar_set_list_t;
-
-/**
- * IOVAR get list
- */
-typedef enum
-{
-    WHD_IOVAR_GET_MFP = 0,
-    WHD_IOVAR_GET_MPC,
-    WHD_IOVAR_GET_AMPDU_BA_WINDOW_SIZE,
-    WHD_IOVAR_GET_AMPDU_MPDU,
-    WHD_IOVAR_GET_LISTEN_INTERVAL,          /**< Get Listen Interval value */
-    WHD_IOVAR_GET_MAC_ADDRESS,              /**< Get mac address */
-} whd_usr_iovar_get_list_t;
-
-/******************************************************
-*                 Type Definitions
-******************************************************/
-/** @cond */
-typedef struct whd_event_msg whd_event_header_t;
-/** @endcond */
-
-/**
- * Structure for storing a MAC address (Wi-Fi Media Access Control address).
- */
-typedef struct
-{
-    uint8_t octet[6]; /**< Unique 6-byte MAC address */
-} whd_mac_t;
-
-/**
- * Structure for storing a Service Set Identifier (i.e. Name of Access Point)
- */
-typedef struct
-{
-    uint8_t length;                /**< SSID length */
-    uint8_t value[SSID_NAME_SIZE]; /**< SSID name (AP name)  */
-} whd_ssid_t;
-
-/**<
-   The received packet formats are different when EXT_STA is enabled. In case
-   of EXT_STA the received packets are in 802.11 format, where as in other
-   case the received packets have Ethernet II format
-
-   1. 802.11 frames
-   ----------------------------------------------------------------------------
- | FC (2) | DID (2) |A1 (6) |A2 (6)|A3 (6) |SID (2) |SNAP (6) |type (2) |data (46 - 1500) |
-   ----------------------------------------------------------------------------
-
-   2. Ethernet II frames
-   -------------------------------------------------
- | DA (6) | SA (6) | type (2) | data (46 - 1500) |
-   -------------------------------------------------
- */
-
-
-/**
- * Macro for creating country codes according to endianness
- * @cond !ADDTHIS
- */
-#ifdef IL_BIGENDIAN
-#define MK_CNTRY(a, b, \
-                 rev)  ( ( (unsigned char)(b) ) + ( ( (unsigned char)(a) ) << 8 ) + \
-                         ( ( (unsigned short)(rev) ) << 16 ) )
-#else /* ifdef IL_BIGENDIAN */
-#define MK_CNTRY(a, b, \
-                 rev)  ( ( (unsigned char)(a) ) + ( ( (unsigned char)(b) ) << 8 ) + \
-                         ( ( (unsigned short)(rev) ) << 16 ) )
-#endif /* ifdef IL_BIGENDIAN */
-/** @endcond */
-
-/**
- * Enumerated list of country codes
- */
-typedef enum
-{
-    WHD_COUNTRY_AFGHANISTAN                           = MK_CNTRY('A', 'F', 0),   /**< AF Afghanistan */
-    WHD_COUNTRY_ALBANIA                               = MK_CNTRY('A', 'L', 0),   /**< AL Albania */
-    WHD_COUNTRY_ALGERIA                               = MK_CNTRY('D', 'Z', 0),   /**< DZ Algeria */
-    WHD_COUNTRY_AMERICAN_SAMOA                        = MK_CNTRY('A', 'S', 0),   /**< AS American_Samoa */
-    WHD_COUNTRY_ANGOLA                                = MK_CNTRY('A', 'O', 0),   /**< AO Angola */
-    WHD_COUNTRY_ANGUILLA                              = MK_CNTRY('A', 'I', 0),   /**< AI Anguilla */
-    WHD_COUNTRY_ANTIGUA_AND_BARBUDA                   = MK_CNTRY('A', 'G', 0),   /**< AG Antigua_and_Barbuda */
-    WHD_COUNTRY_ARGENTINA                             = MK_CNTRY('A', 'R', 0),   /**< AR Argentina */
-    WHD_COUNTRY_ARMENIA                               = MK_CNTRY('A', 'M', 0),   /**< AM Armenia */
-    WHD_COUNTRY_ARUBA                                 = MK_CNTRY('A', 'W', 0),   /**< AW Aruba */
-    WHD_COUNTRY_AUSTRALIA                             = MK_CNTRY('A', 'U', 0),   /**< AU Australia */
-    WHD_COUNTRY_AUSTRIA                               = MK_CNTRY('A', 'T', 0),   /**< AT Austria */
-    WHD_COUNTRY_AZERBAIJAN                            = MK_CNTRY('A', 'Z', 0),   /**< AZ Azerbaijan */
-    WHD_COUNTRY_BAHAMAS                               = MK_CNTRY('B', 'S', 0),   /**< BS Bahamas */
-    WHD_COUNTRY_BAHRAIN                               = MK_CNTRY('B', 'H', 0),   /**< BH Bahrain */
-    WHD_COUNTRY_BAKER_ISLAND                          = MK_CNTRY('0', 'B', 0),   /**< 0B Baker_Island */
-    WHD_COUNTRY_BANGLADESH                            = MK_CNTRY('B', 'D', 0),   /**< BD Bangladesh */
-    WHD_COUNTRY_BARBADOS                              = MK_CNTRY('B', 'B', 0),   /**< BB Barbados */
-    WHD_COUNTRY_BELARUS                               = MK_CNTRY('B', 'Y', 0),   /**< BY Belarus */
-    WHD_COUNTRY_BELGIUM                               = MK_CNTRY('B', 'E', 0),   /**< BE Belgium */
-    WHD_COUNTRY_BELIZE                                = MK_CNTRY('B', 'Z', 0),   /**< BZ Belize */
-    WHD_COUNTRY_BENIN                                 = MK_CNTRY('B', 'J', 0),   /**< BJ Benin */
-    WHD_COUNTRY_BERMUDA                               = MK_CNTRY('B', 'M', 0),   /**< BM Bermuda */
-    WHD_COUNTRY_BHUTAN                                = MK_CNTRY('B', 'T', 0),   /**< BT Bhutan */
-    WHD_COUNTRY_BOLIVIA                               = MK_CNTRY('B', 'O', 0),   /**< BO Bolivia */
-    WHD_COUNTRY_BOSNIA_AND_HERZEGOVINA                = MK_CNTRY('B', 'A', 0),   /**< BA Bosnia_and_Herzegovina */
-    WHD_COUNTRY_BOTSWANA                              = MK_CNTRY('B', 'W', 0),   /**< BW Botswana */
-    WHD_COUNTRY_BRAZIL                                = MK_CNTRY('B', 'R', 0),   /**< BR Brazil */
-    WHD_COUNTRY_BRITISH_INDIAN_OCEAN_TERRITORY        = MK_CNTRY('I', 'O', 0),   /**< IO British_Indian_Ocean_Territory */
-    WHD_COUNTRY_BRUNEI_DARUSSALAM                     = MK_CNTRY('B', 'N', 0),   /**< BN Brunei_Darussalam */
-    WHD_COUNTRY_BULGARIA                              = MK_CNTRY('B', 'G', 0),   /**< BG Bulgaria */
-    WHD_COUNTRY_BURKINA_FASO                          = MK_CNTRY('B', 'F', 0),   /**< BF Burkina_Faso */
-    WHD_COUNTRY_BURUNDI                               = MK_CNTRY('B', 'I', 0),   /**< BI Burundi */
-    WHD_COUNTRY_CAMBODIA                              = MK_CNTRY('K', 'H', 0),   /**< KH Cambodia */
-    WHD_COUNTRY_CAMEROON                              = MK_CNTRY('C', 'M', 0),   /**< CM Cameroon */
-    WHD_COUNTRY_CANADA                                = MK_CNTRY('C', 'A', 0),   /**< CA Canada */
-    WHD_COUNTRY_CANADA_REV950                         = MK_CNTRY('C', 'A', 950), /**< CA Canada Revision 950 */
-    WHD_COUNTRY_CAPE_VERDE                            = MK_CNTRY('C', 'V', 0),   /**< CV Cape_Verde */
-    WHD_COUNTRY_CAYMAN_ISLANDS                        = MK_CNTRY('K', 'Y', 0),   /**< KY Cayman_Islands */
-    WHD_COUNTRY_CENTRAL_AFRICAN_REPUBLIC              = MK_CNTRY('C', 'F', 0),   /**< CF Central_African_Republic */
-    WHD_COUNTRY_CHAD                                  = MK_CNTRY('T', 'D', 0),   /**< TD Chad */
-    WHD_COUNTRY_CHILE                                 = MK_CNTRY('C', 'L', 0),   /**< CL Chile */
-    WHD_COUNTRY_CHINA                                 = MK_CNTRY('C', 'N', 0),   /**< CN China */
-    WHD_COUNTRY_CHRISTMAS_ISLAND                      = MK_CNTRY('C', 'X', 0),   /**< CX Christmas_Island */
-    WHD_COUNTRY_COLOMBIA                              = MK_CNTRY('C', 'O', 0),   /**< CO Colombia */
-    WHD_COUNTRY_COMOROS                               = MK_CNTRY('K', 'M', 0),   /**< KM Comoros */
-    WHD_COUNTRY_CONGO                                 = MK_CNTRY('C', 'G', 0),   /**< CG Congo */
-    WHD_COUNTRY_CONGO_THE_DEMOCRATIC_REPUBLIC_OF_THE  = MK_CNTRY('C', 'D', 0),   /**< CD Congo,_The_Democratic_Republic_Of_The */
-    WHD_COUNTRY_COSTA_RICA                            = MK_CNTRY('C', 'R', 0),   /**< CR Costa_Rica */
-    WHD_COUNTRY_COTE_DIVOIRE                          = MK_CNTRY('C', 'I', 0),   /**< CI Cote_D'ivoire */
-    WHD_COUNTRY_CROATIA                               = MK_CNTRY('H', 'R', 0),   /**< HR Croatia */
-    WHD_COUNTRY_CUBA                                  = MK_CNTRY('C', 'U', 0),   /**< CU Cuba */
-    WHD_COUNTRY_CYPRUS                                = MK_CNTRY('C', 'Y', 0),   /**< CY Cyprus */
-    WHD_COUNTRY_CZECH_REPUBLIC                        = MK_CNTRY('C', 'Z', 0),   /**< CZ Czech_Republic */
-    WHD_COUNTRY_DENMARK                               = MK_CNTRY('D', 'K', 0),   /**< DK Denmark */
-    WHD_COUNTRY_DJIBOUTI                              = MK_CNTRY('D', 'J', 0),   /**< DJ Djibouti */
-    WHD_COUNTRY_DOMINICA                              = MK_CNTRY('D', 'M', 0),   /**< DM Dominica */
-    WHD_COUNTRY_DOMINICAN_REPUBLIC                    = MK_CNTRY('D', 'O', 0),   /**< DO Dominican_Republic */
-    WHD_COUNTRY_DOWN_UNDER                            = MK_CNTRY('A', 'U', 0),   /**< AU G'Day mate! */
-    WHD_COUNTRY_ECUADOR                               = MK_CNTRY('E', 'C', 0),   /**< EC Ecuador */
-    WHD_COUNTRY_EGYPT                                 = MK_CNTRY('E', 'G', 0),   /**< EG Egypt */
-    WHD_COUNTRY_EL_SALVADOR                           = MK_CNTRY('S', 'V', 0),   /**< SV El_Salvador */
-    WHD_COUNTRY_EQUATORIAL_GUINEA                     = MK_CNTRY('G', 'Q', 0),   /**< GQ Equatorial_Guinea */
-    WHD_COUNTRY_ERITREA                               = MK_CNTRY('E', 'R', 0),   /**< ER Eritrea */
-    WHD_COUNTRY_ESTONIA                               = MK_CNTRY('E', 'E', 0),   /**< EE Estonia */
-    WHD_COUNTRY_ETHIOPIA                              = MK_CNTRY('E', 'T', 0),   /**< ET Ethiopia */
-    WHD_COUNTRY_FALKLAND_ISLANDS_MALVINAS             = MK_CNTRY('F', 'K', 0),   /**< FK Falkland_Islands_(Malvinas) */
-    WHD_COUNTRY_FAROE_ISLANDS                         = MK_CNTRY('F', 'O', 0),   /**< FO Faroe_Islands */
-    WHD_COUNTRY_FIJI                                  = MK_CNTRY('F', 'J', 0),   /**< FJ Fiji */
-    WHD_COUNTRY_FINLAND                               = MK_CNTRY('F', 'I', 0),   /**< FI Finland */
-    WHD_COUNTRY_FRANCE                                = MK_CNTRY('F', 'R', 0),   /**< FR France */
-    WHD_COUNTRY_FRENCH_GUINA                          = MK_CNTRY('G', 'F', 0),   /**< GF French_Guina */
-    WHD_COUNTRY_FRENCH_POLYNESIA                      = MK_CNTRY('P', 'F', 0),   /**< PF French_Polynesia */
-    WHD_COUNTRY_FRENCH_SOUTHERN_TERRITORIES           = MK_CNTRY('T', 'F', 0),   /**< TF French_Southern_Territories */
-    WHD_COUNTRY_GABON                                 = MK_CNTRY('G', 'A', 0),   /**< GA Gabon */
-    WHD_COUNTRY_GAMBIA                                = MK_CNTRY('G', 'M', 0),   /**< GM Gambia */
-    WHD_COUNTRY_GEORGIA                               = MK_CNTRY('G', 'E', 0),   /**< GE Georgia */
-    WHD_COUNTRY_GERMANY                               = MK_CNTRY('D', 'E', 0),   /**< DE Germany */
-    WHD_COUNTRY_EUROPEAN_WIDE_REV895                  = MK_CNTRY('E', '0', 895), /**< E0 European_Wide Revision 895 */
-    WHD_COUNTRY_GHANA                                 = MK_CNTRY('G', 'H', 0),   /**< GH Ghana */
-    WHD_COUNTRY_GIBRALTAR                             = MK_CNTRY('G', 'I', 0),   /**< GI Gibraltar */
-    WHD_COUNTRY_GREECE                                = MK_CNTRY('G', 'R', 0),   /**< GR Greece */
-    WHD_COUNTRY_GRENADA                               = MK_CNTRY('G', 'D', 0),   /**< GD Grenada */
-    WHD_COUNTRY_GUADELOUPE                            = MK_CNTRY('G', 'P', 0),   /**< GP Guadeloupe */
-    WHD_COUNTRY_GUAM                                  = MK_CNTRY('G', 'U', 0),   /**< GU Guam */
-    WHD_COUNTRY_GUATEMALA                             = MK_CNTRY('G', 'T', 0),   /**< GT Guatemala */
-    WHD_COUNTRY_GUERNSEY                              = MK_CNTRY('G', 'G', 0),   /**< GG Guernsey */
-    WHD_COUNTRY_GUINEA                                = MK_CNTRY('G', 'N', 0),   /**< GN Guinea */
-    WHD_COUNTRY_GUINEA_BISSAU                         = MK_CNTRY('G', 'W', 0),   /**< GW Guinea-bissau */
-    WHD_COUNTRY_GUYANA                                = MK_CNTRY('G', 'Y', 0),   /**< GY Guyana */
-    WHD_COUNTRY_HAITI                                 = MK_CNTRY('H', 'T', 0),   /**< HT Haiti */
-    WHD_COUNTRY_HOLY_SEE_VATICAN_CITY_STATE           = MK_CNTRY('V', 'A', 0),   /**< VA Holy_See_(Vatican_City_State) */
-    WHD_COUNTRY_HONDURAS                              = MK_CNTRY('H', 'N', 0),   /**< HN Honduras */
-    WHD_COUNTRY_HONG_KONG                             = MK_CNTRY('H', 'K', 0),   /**< HK Hong_Kong */
-    WHD_COUNTRY_HUNGARY                               = MK_CNTRY('H', 'U', 0),   /**< HU Hungary */
-    WHD_COUNTRY_ICELAND                               = MK_CNTRY('I', 'S', 0),   /**< IS Iceland */
-    WHD_COUNTRY_INDIA                                 = MK_CNTRY('I', 'N', 0),   /**< IN India */
-    WHD_COUNTRY_INDONESIA                             = MK_CNTRY('I', 'D', 0),   /**< ID Indonesia */
-    WHD_COUNTRY_IRAN_ISLAMIC_REPUBLIC_OF              = MK_CNTRY('I', 'R', 0),   /**< IR Iran,_Islamic_Republic_Of */
-    WHD_COUNTRY_IRAQ                                  = MK_CNTRY('I', 'Q', 0),   /**< IQ Iraq */
-    WHD_COUNTRY_IRELAND                               = MK_CNTRY('I', 'E', 0),   /**< IE Ireland */
-    WHD_COUNTRY_ISRAEL                                = MK_CNTRY('I', 'L', 0),   /**< IL Israel */
-    WHD_COUNTRY_ITALY                                 = MK_CNTRY('I', 'T', 0),   /**< IT Italy */
-    WHD_COUNTRY_JAMAICA                               = MK_CNTRY('J', 'M', 0),   /**< JM Jamaica */
-    WHD_COUNTRY_JAPAN                                 = MK_CNTRY('J', 'P', 0),   /**< JP Japan */
-    WHD_COUNTRY_JERSEY                                = MK_CNTRY('J', 'E', 0),   /**< JE Jersey */
-    WHD_COUNTRY_JORDAN                                = MK_CNTRY('J', 'O', 0),   /**< JO Jordan */
-    WHD_COUNTRY_KAZAKHSTAN                            = MK_CNTRY('K', 'Z', 0),   /**< KZ Kazakhstan */
-    WHD_COUNTRY_KENYA                                 = MK_CNTRY('K', 'E', 0),   /**< KE Kenya */
-    WHD_COUNTRY_KIRIBATI                              = MK_CNTRY('K', 'I', 0),   /**< KI Kiribati */
-    WHD_COUNTRY_KOREA_REPUBLIC_OF                     = MK_CNTRY('K', 'R', 1),   /**< KR Korea,_Republic_Of */
-    WHD_COUNTRY_KOSOVO                                = MK_CNTRY('0', 'A', 0),   /**< 0A Kosovo */
-    WHD_COUNTRY_KUWAIT                                = MK_CNTRY('K', 'W', 0),   /**< KW Kuwait */
-    WHD_COUNTRY_KYRGYZSTAN                            = MK_CNTRY('K', 'G', 0),   /**< KG Kyrgyzstan */
-    WHD_COUNTRY_LAO_PEOPLES_DEMOCRATIC_REPUBIC        = MK_CNTRY('L', 'A', 0),   /**< LA Lao_People's_Democratic_Repubic */
-    WHD_COUNTRY_LATVIA                                = MK_CNTRY('L', 'V', 0),   /**< LV Latvia */
-    WHD_COUNTRY_LEBANON                               = MK_CNTRY('L', 'B', 0),   /**< LB Lebanon */
-    WHD_COUNTRY_LESOTHO                               = MK_CNTRY('L', 'S', 0),   /**< LS Lesotho */
-    WHD_COUNTRY_LIBERIA                               = MK_CNTRY('L', 'R', 0),   /**< LR Liberia */
-    WHD_COUNTRY_LIBYAN_ARAB_JAMAHIRIYA                = MK_CNTRY('L', 'Y', 0),   /**< LY Libyan_Arab_Jamahiriya */
-    WHD_COUNTRY_LIECHTENSTEIN                         = MK_CNTRY('L', 'I', 0),   /**< LI Liechtenstein */
-    WHD_COUNTRY_LITHUANIA                             = MK_CNTRY('L', 'T', 0),   /**< LT Lithuania */
-    WHD_COUNTRY_LUXEMBOURG                            = MK_CNTRY('L', 'U', 0),   /**< LU Luxembourg */
-    WHD_COUNTRY_MACAO                                 = MK_CNTRY('M', 'O', 0),   /**< MO Macao */
-    WHD_COUNTRY_MACEDONIA_FORMER_YUGOSLAV_REPUBLIC_OF = MK_CNTRY('M', 'K', 0),   /**< MK Macedonia,_Former_Yugoslav_Republic_Of */
-    WHD_COUNTRY_MADAGASCAR                            = MK_CNTRY('M', 'G', 0),   /**< MG Madagascar */
-    WHD_COUNTRY_MALAWI                                = MK_CNTRY('M', 'W', 0),   /**< MW Malawi */
-    WHD_COUNTRY_MALAYSIA                              = MK_CNTRY('M', 'Y', 0),   /**< MY Malaysia */
-    WHD_COUNTRY_MALDIVES                              = MK_CNTRY('M', 'V', 0),   /**< MV Maldives */
-    WHD_COUNTRY_MALI                                  = MK_CNTRY('M', 'L', 0),   /**< ML Mali */
-    WHD_COUNTRY_MALTA                                 = MK_CNTRY('M', 'T', 0),   /**< MT Malta */
-    WHD_COUNTRY_MAN_ISLE_OF                           = MK_CNTRY('I', 'M', 0),   /**< IM Man,_Isle_Of */
-    WHD_COUNTRY_MARTINIQUE                            = MK_CNTRY('M', 'Q', 0),   /**< MQ Martinique */
-    WHD_COUNTRY_MAURITANIA                            = MK_CNTRY('M', 'R', 0),   /**< MR Mauritania */
-    WHD_COUNTRY_MAURITIUS                             = MK_CNTRY('M', 'U', 0),   /**< MU Mauritius */
-    WHD_COUNTRY_MAYOTTE                               = MK_CNTRY('Y', 'T', 0),   /**< YT Mayotte */
-    WHD_COUNTRY_MEXICO                                = MK_CNTRY('M', 'X', 0),   /**< MX Mexico */
-    WHD_COUNTRY_MICRONESIA_FEDERATED_STATES_OF        = MK_CNTRY('F', 'M', 0),   /**< FM Micronesia,_Federated_States_Of */
-    WHD_COUNTRY_MOLDOVA_REPUBLIC_OF                   = MK_CNTRY('M', 'D', 0),   /**< MD Moldova,_Republic_Of */
-    WHD_COUNTRY_MONACO                                = MK_CNTRY('M', 'C', 0),   /**< MC Monaco */
-    WHD_COUNTRY_MONGOLIA                              = MK_CNTRY('M', 'N', 0),   /**< MN Mongolia */
-    WHD_COUNTRY_MONTENEGRO                            = MK_CNTRY('M', 'E', 0),   /**< ME Montenegro */
-    WHD_COUNTRY_MONTSERRAT                            = MK_CNTRY('M', 'S', 0),   /**< MS Montserrat */
-    WHD_COUNTRY_MOROCCO                               = MK_CNTRY('M', 'A', 0),   /**< MA Morocco */
-    WHD_COUNTRY_MOZAMBIQUE                            = MK_CNTRY('M', 'Z', 0),   /**< MZ Mozambique */
-    WHD_COUNTRY_MYANMAR                               = MK_CNTRY('M', 'M', 0),   /**< MM Myanmar */
-    WHD_COUNTRY_NAMIBIA                               = MK_CNTRY('N', 'A', 0),   /**< NA Namibia */
-    WHD_COUNTRY_NAURU                                 = MK_CNTRY('N', 'R', 0),   /**< NR Nauru */
-    WHD_COUNTRY_NEPAL                                 = MK_CNTRY('N', 'P', 0),   /**< NP Nepal */
-    WHD_COUNTRY_NETHERLANDS                           = MK_CNTRY('N', 'L', 0),   /**< NL Netherlands */
-    WHD_COUNTRY_NETHERLANDS_ANTILLES                  = MK_CNTRY('A', 'N', 0),   /**< AN Netherlands_Antilles */
-    WHD_COUNTRY_NEW_CALEDONIA                         = MK_CNTRY('N', 'C', 0),   /**< NC New_Caledonia */
-    WHD_COUNTRY_NEW_ZEALAND                           = MK_CNTRY('N', 'Z', 0),   /**< NZ New_Zealand */
-    WHD_COUNTRY_NICARAGUA                             = MK_CNTRY('N', 'I', 0),   /**< NI Nicaragua */
-    WHD_COUNTRY_NIGER                                 = MK_CNTRY('N', 'E', 0),   /**< NE Niger */
-    WHD_COUNTRY_NIGERIA                               = MK_CNTRY('N', 'G', 0),   /**< NG Nigeria */
-    WHD_COUNTRY_NORFOLK_ISLAND                        = MK_CNTRY('N', 'F', 0),   /**< NF Norfolk_Island */
-    WHD_COUNTRY_NORTHERN_MARIANA_ISLANDS              = MK_CNTRY('M', 'P', 0),   /**< MP Northern_Mariana_Islands */
-    WHD_COUNTRY_NORWAY                                = MK_CNTRY('N', 'O', 0),   /**< NO Norway */
-    WHD_COUNTRY_OMAN                                  = MK_CNTRY('O', 'M', 0),   /**< OM Oman */
-    WHD_COUNTRY_PAKISTAN                              = MK_CNTRY('P', 'K', 0),   /**< PK Pakistan */
-    WHD_COUNTRY_PALAU                                 = MK_CNTRY('P', 'W', 0),   /**< PW Palau */
-    WHD_COUNTRY_PANAMA                                = MK_CNTRY('P', 'A', 0),   /**< PA Panama */
-    WHD_COUNTRY_PAPUA_NEW_GUINEA                      = MK_CNTRY('P', 'G', 0),   /**< PG Papua_New_Guinea */
-    WHD_COUNTRY_PARAGUAY                              = MK_CNTRY('P', 'Y', 0),   /**< PY Paraguay */
-    WHD_COUNTRY_PERU                                  = MK_CNTRY('P', 'E', 0),   /**< PE Peru */
-    WHD_COUNTRY_PHILIPPINES                           = MK_CNTRY('P', 'H', 0),   /**< PH Philippines */
-    WHD_COUNTRY_POLAND                                = MK_CNTRY('P', 'L', 0),   /**< PL Poland */
-    WHD_COUNTRY_PORTUGAL                              = MK_CNTRY('P', 'T', 0),   /**< PT Portugal */
-    WHD_COUNTRY_PUETO_RICO                            = MK_CNTRY('P', 'R', 0),   /**< PR Pueto_Rico */
-    WHD_COUNTRY_QATAR                                 = MK_CNTRY('Q', 'A', 0),   /**< QA Qatar */
-    WHD_COUNTRY_REUNION                               = MK_CNTRY('R', 'E', 0),   /**< RE Reunion */
-    WHD_COUNTRY_ROMANIA                               = MK_CNTRY('R', 'O', 0),   /**< RO Romania */
-    WHD_COUNTRY_RUSSIAN_FEDERATION                    = MK_CNTRY('R', 'U', 0),   /**< RU Russian_Federation */
-    WHD_COUNTRY_RWANDA                                = MK_CNTRY('R', 'W', 0),   /**< RW Rwanda */
-    WHD_COUNTRY_SAINT_KITTS_AND_NEVIS                 = MK_CNTRY('K', 'N', 0),   /**< KN Saint_Kitts_and_Nevis */
-    WHD_COUNTRY_SAINT_LUCIA                           = MK_CNTRY('L', 'C', 0),   /**< LC Saint_Lucia */
-    WHD_COUNTRY_SAINT_PIERRE_AND_MIQUELON             = MK_CNTRY('P', 'M', 0),   /**< PM Saint_Pierre_and_Miquelon */
-    WHD_COUNTRY_SAINT_VINCENT_AND_THE_GRENADINES      = MK_CNTRY('V', 'C', 0),   /**< VC Saint_Vincent_and_The_Grenadines */
-    WHD_COUNTRY_SAMOA                                 = MK_CNTRY('W', 'S', 0),   /**< WS Samoa */
-    WHD_COUNTRY_SANIT_MARTIN_SINT_MARTEEN             = MK_CNTRY('M', 'F', 0),   /**< MF Sanit_Martin_/_Sint_Marteen */
-    WHD_COUNTRY_SAO_TOME_AND_PRINCIPE                 = MK_CNTRY('S', 'T', 0),   /**< ST Sao_Tome_and_Principe */
-    WHD_COUNTRY_SAUDI_ARABIA                          = MK_CNTRY('S', 'A', 0),   /**< SA Saudi_Arabia */
-    WHD_COUNTRY_SENEGAL                               = MK_CNTRY('S', 'N', 0),   /**< SN Senegal */
-    WHD_COUNTRY_SERBIA                                = MK_CNTRY('R', 'S', 0),   /**< RS Serbia */
-    WHD_COUNTRY_SEYCHELLES                            = MK_CNTRY('S', 'C', 0),   /**< SC Seychelles */
-    WHD_COUNTRY_SIERRA_LEONE                          = MK_CNTRY('S', 'L', 0),   /**< SL Sierra_Leone */
-    WHD_COUNTRY_SINGAPORE                             = MK_CNTRY('S', 'G', 0),   /**< SG Singapore */
-    WHD_COUNTRY_SLOVAKIA                              = MK_CNTRY('S', 'K', 0),   /**< SK Slovakia */
-    WHD_COUNTRY_SLOVENIA                              = MK_CNTRY('S', 'I', 0),   /**< SI Slovenia */
-    WHD_COUNTRY_SOLOMON_ISLANDS                       = MK_CNTRY('S', 'B', 0),   /**< SB Solomon_Islands */
-    WHD_COUNTRY_SOMALIA                               = MK_CNTRY('S', 'O', 0),   /**< SO Somalia */
-    WHD_COUNTRY_SOUTH_AFRICA                          = MK_CNTRY('Z', 'A', 0),   /**< ZA South_Africa */
-    WHD_COUNTRY_SPAIN                                 = MK_CNTRY('E', 'S', 0),   /**< ES Spain */
-    WHD_COUNTRY_SRI_LANKA                             = MK_CNTRY('L', 'K', 0),   /**< LK Sri_Lanka */
-    WHD_COUNTRY_SURINAME                              = MK_CNTRY('S', 'R', 0),   /**< SR Suriname */
-    WHD_COUNTRY_SWAZILAND                             = MK_CNTRY('S', 'Z', 0),   /**< SZ Swaziland */
-    WHD_COUNTRY_SWEDEN                                = MK_CNTRY('S', 'E', 0),   /**< SE Sweden */
-    WHD_COUNTRY_SWITZERLAND                           = MK_CNTRY('C', 'H', 0),   /**< CH Switzerland */
-    WHD_COUNTRY_SYRIAN_ARAB_REPUBLIC                  = MK_CNTRY('S', 'Y', 0),   /**< SY Syrian_Arab_Republic */
-    WHD_COUNTRY_TAIWAN_PROVINCE_OF_CHINA              = MK_CNTRY('T', 'W', 0),   /**< TW Taiwan,_Province_Of_China */
-    WHD_COUNTRY_TAJIKISTAN                            = MK_CNTRY('T', 'J', 0),   /**< TJ Tajikistan */
-    WHD_COUNTRY_TANZANIA_UNITED_REPUBLIC_OF           = MK_CNTRY('T', 'Z', 0),   /**< TZ Tanzania,_United_Republic_Of */
-    WHD_COUNTRY_THAILAND                              = MK_CNTRY('T', 'H', 0),   /**< TH Thailand */
-    WHD_COUNTRY_TOGO                                  = MK_CNTRY('T', 'G', 0),   /**< TG Togo */
-    WHD_COUNTRY_TONGA                                 = MK_CNTRY('T', 'O', 0),   /**< TO Tonga */
-    WHD_COUNTRY_TRINIDAD_AND_TOBAGO                   = MK_CNTRY('T', 'T', 0),   /**< TT Trinidad_and_Tobago */
-    WHD_COUNTRY_TUNISIA                               = MK_CNTRY('T', 'N', 0),   /**< TN Tunisia */
-    WHD_COUNTRY_TURKEY                                = MK_CNTRY('T', 'R', 0),   /**< TR Turkey */
-    WHD_COUNTRY_TURKMENISTAN                          = MK_CNTRY('T', 'M', 0),   /**< TM Turkmenistan */
-    WHD_COUNTRY_TURKS_AND_CAICOS_ISLANDS              = MK_CNTRY('T', 'C', 0),   /**< TC Turks_and_Caicos_Islands */
-    WHD_COUNTRY_TUVALU                                = MK_CNTRY('T', 'V', 0),   /**< TV Tuvalu */
-    WHD_COUNTRY_UGANDA                                = MK_CNTRY('U', 'G', 0),   /**< UG Uganda */
-    WHD_COUNTRY_UKRAINE                               = MK_CNTRY('U', 'A', 0),   /**< UA Ukraine */
-    WHD_COUNTRY_UNITED_ARAB_EMIRATES                  = MK_CNTRY('A', 'E', 0),   /**< AE United_Arab_Emirates */
-    WHD_COUNTRY_UNITED_KINGDOM                        = MK_CNTRY('G', 'B', 0),   /**< GB United_Kingdom */
-    WHD_COUNTRY_UNITED_STATES                         = MK_CNTRY('U', 'S', 0),   /**< US United_States */
-    WHD_COUNTRY_UNITED_STATES_REV4                    = MK_CNTRY('U', 'S', 4),   /**< US United_States Revision 4 */
-    WHD_COUNTRY_UNITED_STATES_REV931                  = MK_CNTRY('Q', '1', 931), /**< Q1 United_States Revision 931 */
-    WHD_COUNTRY_UNITED_STATES_NO_DFS                  = MK_CNTRY('Q', '2', 0),   /**< Q2 United_States_(No_DFS) */
-    WHD_COUNTRY_UNITED_STATES_MINOR_OUTLYING_ISLANDS  = MK_CNTRY('U', 'M', 0),   /**< UM United_States_Minor_Outlying_Islands */
-    WHD_COUNTRY_URUGUAY                               = MK_CNTRY('U', 'Y', 0),   /**< UY Uruguay */
-    WHD_COUNTRY_UZBEKISTAN                            = MK_CNTRY('U', 'Z', 0),   /**< UZ Uzbekistan */
-    WHD_COUNTRY_VANUATU                               = MK_CNTRY('V', 'U', 0),   /**< VU Vanuatu */
-    WHD_COUNTRY_VENEZUELA                             = MK_CNTRY('V', 'E', 0),   /**< VE Venezuela */
-    WHD_COUNTRY_VIET_NAM                              = MK_CNTRY('V', 'N', 0),   /**< VN Viet_Nam */
-    WHD_COUNTRY_VIRGIN_ISLANDS_BRITISH                = MK_CNTRY('V', 'G', 0),   /**< VG Virgin_Islands,_British */
-    WHD_COUNTRY_VIRGIN_ISLANDS_US                     = MK_CNTRY('V', 'I', 0),   /**< VI Virgin_Islands,_U.S. */
-    WHD_COUNTRY_WALLIS_AND_FUTUNA                     = MK_CNTRY('W', 'F', 0),   /**< WF Wallis_and_Futuna */
-    WHD_COUNTRY_WEST_BANK                             = MK_CNTRY('0', 'C', 0),   /**< 0C West_Bank */
-    WHD_COUNTRY_WESTERN_SAHARA                        = MK_CNTRY('E', 'H', 0),   /**< EH Western_Sahara */
-    WHD_COUNTRY_WORLD_WIDE_XV_REV983                  = MK_CNTRY('X', 'V', 983), /**< Worldwide Locale Revision 983 */
-    WHD_COUNTRY_WORLD_WIDE_XX                         = MK_CNTRY('X', 'X', 0),   /**< Worldwide Locale (passive Ch12-14) */
-    WHD_COUNTRY_WORLD_WIDE_XX_REV17                   = MK_CNTRY('X', 'X', 17),  /**< Worldwide Locale (passive Ch12-14) Revision 17 */
-    WHD_COUNTRY_YEMEN                                 = MK_CNTRY('Y', 'E', 0),   /**< YE Yemen */
-    WHD_COUNTRY_ZAMBIA                                = MK_CNTRY('Z', 'M', 0),   /**< ZM Zambia */
-    WHD_COUNTRY_ZIMBABWE                              = MK_CNTRY('Z', 'W', 0),   /**< ZW Zimbabwe */
-} whd_country_code_t;
-
-/**
- * Structure for storing extended scan parameters
- */
-typedef struct
-{
-    int32_t number_of_probes_per_channel;                     /**< Number of probes to send on each channel                                               */
-    int32_t scan_active_dwell_time_per_channel_ms;            /**< Period of time to wait on each channel when active scanning                            */
-    int32_t scan_passive_dwell_time_per_channel_ms;           /**< Period of time to wait on each channel when passive scanning                           */
-    int32_t scan_home_channel_dwell_time_between_channels_ms; /**< Period of time to wait on the home channel when scanning. Only relevant if associated. */
-} whd_scan_extended_params_t;
-
-/**
- * Structure for storing scan results
- */
-#pragma pack(1)
-typedef struct whd_scan_result
-{
-    whd_ssid_t SSID;                            /**< Service Set Identification (i.e. Name of Access Point)                    */
-    whd_mac_t BSSID;                            /**< Basic Service Set Identification (i.e. MAC address of Access Point)       */
-    int16_t signal_strength;                    /**< Receive Signal Strength Indication in dBm. <-90=Very poor, >-30=Excellent */
-    uint32_t max_data_rate;                     /**< Maximum data rate in kilobits/s                                           */
-    whd_bss_type_t bss_type;                    /**< Network type                                                              */
-    whd_security_t security;                    /**< Security type                                                             */
-    uint8_t channel;                            /**< Radio channel that the AP beacon was received on                          */
-    whd_802_11_band_t band;                     /**< Radio band                                                                */
-    uint8_t ccode[2];                           /**< Two letter ISO country code from AP                                       */
-    uint8_t flags;                              /**< flags                                                                     */
-    struct whd_scan_result *next;               /**< Pointer to the next scan result                                           */
-    uint8_t *ie_ptr;                            /**< Pointer to received Beacon/Probe Response IE(Information Element)         */
-    uint32_t ie_len;                            /**< Length of IE(Information Element)                                         */
-} whd_scan_result_t;
-#pragma pack()
-
-/**
- * Structure to store scan result parameters for each AP
- */
-typedef struct whd_simple_scan_result
-{
-    whd_ssid_t SSID;         /**< Service Set Identification (i.e. Name of Access Point)                    */
-    whd_mac_t BSSID;         /**< Basic Service Set Identification (i.e. MAC address of Access Point)       */
-    int16_t signal_strength; /**< Receive Signal Strength Indication in dBm. <-90=Very poor, >-30=Excellent */
-    whd_security_t security; /**< Security type                                                             */
-    uint8_t channel;         /**< Radio channel that the AP beacon was received on                          */
-} whd_sync_scan_result_t;
-
-typedef uint16_t wl_chanspec_t;  /**< Channel specified in uint16_t */
-#define MCSSET_LEN    16 /**< Maximum allowed mcs rate */
-
-/** BSS(Basic Service Set) information structure
- *
- * Applications MUST CHECK ie_offset field and length field to access IEs(Information Elements) and
- * next bss_info structure in a vector (in whd_sync_scan_result_t)
- */
-typedef struct wl_bss_info_struct
-{
-    uint32_t version;              /**< version field */
-    uint32_t length;               /**< byte length of data in this record, starting at version and including IEs */
-    whd_mac_t BSSID;               /**< Unique 6-byte MAC address */
-    uint16_t beacon_period;        /**< Interval between two consecutive beacon frames. Units are Kusec */
-    uint16_t capability;           /**< Capability information */
-    uint8_t SSID_len;              /**< SSID length */
-    uint8_t SSID[32];              /**< Array to store SSID */
-    struct
-    {
-        uint32_t count;            /**< Count of rates in this set */
-        uint8_t rates[16];         /**< rates in 500kbps units, higher bit set if basic */
-    } rateset;                     /**< supported rates */
-    wl_chanspec_t chanspec;        /**< Channel specification for basic service set */
-    uint16_t atim_window;          /**< Announcement traffic indication message window size. Units are Kusec */
-    uint8_t dtim_period;           /**< Delivery traffic indication message period */
-    int16_t RSSI;                  /**< receive signal strength (in dBm) */
-    int8_t phy_noise;              /**< noise (in dBm) */
-
-    uint8_t n_cap;                 /**< BSS is 802.11N Capable */
-    uint32_t nbss_cap;             /**< 802.11N BSS Capabilities (based on HT_CAP_*) */
-    uint8_t ctl_ch;                /**< 802.11N BSS control channel number */
-    uint32_t reserved32[1];        /**< Reserved for expansion of BSS properties */
-    uint8_t flags;                 /**< flags */
-    uint8_t reserved[3];           /**< Reserved for expansion of BSS properties */
-    uint8_t basic_mcs[MCSSET_LEN]; /**< 802.11N BSS required MCS set */
-
-    uint16_t ie_offset;            /**< offset at which IEs start, from beginning */
-    uint32_t ie_length;            /**< byte length of Information Elements */
-    int16_t SNR;                   /**< Average SNR(signal to noise ratio) during frame reception */
-    /* Add new fields here */
-    /* variable length Information Elements */
-} wl_bss_info_t;
-
-/** Structure for storing 802.11 powersave listen interval values \n
- *  See @ref whd_wifi_get_listen_interval for more information
- */
-typedef struct
-{
-    uint8_t beacon; /**< Listen interval in beacon periods */
-    uint8_t dtim;   /**< Listen interval in DTIM periods   */
-    uint16_t assoc; /**< Listen interval as sent to APs    */
-} whd_listen_interval_t;
-
-/**
- * WHD result is specified as uint32_t value
- */
-typedef uint32_t whd_result_t;
-
-/* whd_result_t error code format
- * |31-18 (14 bit) for module id|17-16 (2 bit) for result type|15-0 for whd error code|
- */
-#define WHD_RESULT_TYPE 0   /**< WHD Result type */
-#define WHD_RESULT_CREATE(x) CY_RSLT_CREATE(WHD_RESULT_TYPE, CY_RSLT_MODULE_DRIVERS_WHD_BASE, (x) ) /**< Create a result value from the specified type, module, and result code */
-
-#define WHD_SUCCESS                         CY_RSLT_SUCCESS        /**< Success */
-#define WHD_PENDING                         WHD_RESULT_CREATE(1)   /**< Pending */
-#define WHD_TIMEOUT                         WHD_RESULT_CREATE(2)   /**< Timeout */
-#define WHD_BADARG                          WHD_RESULT_CREATE(5)   /**< Bad Arguments */
-#define WHD_UNFINISHED                      WHD_RESULT_CREATE(10)  /**< Operation not finished yet WHD_RESULT_CREATE(maybe aborted) */
-
-#define WHD_PARTIAL_RESULTS              WHD_RESULT_CREATE(1003)   /**< Partial results */
-#define WHD_INVALID_KEY                  WHD_RESULT_CREATE(1004)   /**< Invalid key */
-#define WHD_DOES_NOT_EXIST               WHD_RESULT_CREATE(1005)   /**< Does not exist */
-#define WHD_NOT_AUTHENTICATED            WHD_RESULT_CREATE(1006)   /**< Not authenticated */
-#define WHD_NOT_KEYED                    WHD_RESULT_CREATE(1007)   /**< Not keyed */
-#define WHD_IOCTL_FAIL                   WHD_RESULT_CREATE(1008)   /**< IOCTL fail */
-#define WHD_BUFFER_UNAVAILABLE_TEMPORARY WHD_RESULT_CREATE(1009)   /**< Buffer unavailable temporarily */
-#define WHD_BUFFER_UNAVAILABLE_PERMANENT WHD_RESULT_CREATE(1010)   /**< Buffer unavailable permanently */
-#define WHD_CONNECTION_LOST              WHD_RESULT_CREATE(1012)   /**< Connection lost */
-#define WHD_OUT_OF_EVENT_HANDLER_SPACE   WHD_RESULT_CREATE(1013)   /**< Cannot add extra event handler */
-#define WHD_SEMAPHORE_ERROR              WHD_RESULT_CREATE(1014)   /**< Error manipulating a semaphore */
-#define WHD_FLOW_CONTROLLED              WHD_RESULT_CREATE(1015)   /**< Packet retrieval cancelled due to flow control */
-#define WHD_NO_CREDITS                   WHD_RESULT_CREATE(1016)   /**< Packet retrieval cancelled due to lack of bus credits */
-#define WHD_NO_PACKET_TO_SEND            WHD_RESULT_CREATE(1017)   /**< Packet retrieval cancelled due to no pending packets */
-#define WHD_CORE_CLOCK_NOT_ENABLED       WHD_RESULT_CREATE(1018)   /**< Core disabled due to no clock */
-#define WHD_CORE_IN_RESET                WHD_RESULT_CREATE(1019)   /**< Core disabled - in reset */
-#define WHD_UNSUPPORTED                  WHD_RESULT_CREATE(1020)   /**< Unsupported function */
-#define WHD_BUS_WRITE_REGISTER_ERROR     WHD_RESULT_CREATE(1021)   /**< Error writing to WLAN register */
-#define WHD_SDIO_BUS_UP_FAIL             WHD_RESULT_CREATE(1022)   /**< SDIO bus failed to come up */
-#define WHD_JOIN_IN_PROGRESS             WHD_RESULT_CREATE(1023)   /**< Join not finished yet */
-#define WHD_NETWORK_NOT_FOUND            WHD_RESULT_CREATE(1024)   /**< Specified network was not found */
-#define WHD_INVALID_JOIN_STATUS          WHD_RESULT_CREATE(1025)   /**< Join status error */
-#define WHD_UNKNOWN_INTERFACE            WHD_RESULT_CREATE(1026)   /**< Unknown interface specified */
-#define WHD_SDIO_RX_FAIL                 WHD_RESULT_CREATE(1027)   /**< Error during SDIO receive */
-#define WHD_HWTAG_MISMATCH               WHD_RESULT_CREATE(1028)   /**< Hardware tag header corrupt */
-#define WHD_RX_BUFFER_ALLOC_FAIL         WHD_RESULT_CREATE(1029)   /**< Failed to allocate a buffer to receive into */
-#define WHD_BUS_READ_REGISTER_ERROR      WHD_RESULT_CREATE(1030)   /**< Error reading a bus hardware register */
-#define WHD_THREAD_CREATE_FAILED         WHD_RESULT_CREATE(1031)   /**< Failed to create a new thread */
-#define WHD_QUEUE_ERROR                  WHD_RESULT_CREATE(1032)   /**< Error manipulating a queue */
-#define WHD_BUFFER_POINTER_MOVE_ERROR    WHD_RESULT_CREATE(1033)   /**< Error moving the current pointer of a packet buffer  */
-#define WHD_BUFFER_SIZE_SET_ERROR        WHD_RESULT_CREATE(1034)   /**< Error setting size of packet buffer */
-#define WHD_THREAD_STACK_NULL            WHD_RESULT_CREATE(1035)   /**< Null stack pointer passed when non null was reqired */
-#define WHD_THREAD_DELETE_FAIL           WHD_RESULT_CREATE(1036)   /**< Error deleting a thread */
-#define WHD_SLEEP_ERROR                  WHD_RESULT_CREATE(1037)   /**< Error sleeping a thread */
-#define WHD_BUFFER_ALLOC_FAIL            WHD_RESULT_CREATE(1038)   /**< Failed to allocate a packet buffer */
-#define WHD_NO_PACKET_TO_RECEIVE         WHD_RESULT_CREATE(1039)   /**< No Packets waiting to be received */
-#define WHD_INTERFACE_NOT_UP             WHD_RESULT_CREATE(1040)   /**< Requested interface is not active */
-#define WHD_DELAY_TOO_LONG               WHD_RESULT_CREATE(1041)   /**< Requested delay is too long */
-#define WHD_INVALID_DUTY_CYCLE           WHD_RESULT_CREATE(1042)   /**< Duty cycle is outside limit 0 to 100 */
-#define WHD_PMK_WRONG_LENGTH             WHD_RESULT_CREATE(1043)   /**< Returned pmk was the wrong length */
-#define WHD_UNKNOWN_SECURITY_TYPE        WHD_RESULT_CREATE(1044)   /**< AP security type was unknown */
-#define WHD_WEP_NOT_ALLOWED              WHD_RESULT_CREATE(1045)   /**< AP not allowed to use WEP - it is not secure - use Open instead */
-#define WHD_WPA_KEYLEN_BAD               WHD_RESULT_CREATE(1046)   /**< WPA / WPA2 key length must be between 8 & 64 bytes */
-#define WHD_FILTER_NOT_FOUND             WHD_RESULT_CREATE(1047)   /**< Specified filter id not found */
-#define WHD_SPI_ID_READ_FAIL             WHD_RESULT_CREATE(1048)   /**< Failed to read 0xfeedbead SPI id from chip */
-#define WHD_SPI_SIZE_MISMATCH            WHD_RESULT_CREATE(1049)   /**< Mismatch in sizes between SPI header and SDPCM header */
-#define WHD_ADDRESS_ALREADY_REGISTERED   WHD_RESULT_CREATE(1050)   /**< Attempt to register a multicast address twice */
-#define WHD_SDIO_RETRIES_EXCEEDED        WHD_RESULT_CREATE(1051)   /**< SDIO transfer failed too many times. */
-#define WHD_NULL_PTR_ARG                 WHD_RESULT_CREATE(1052)   /**< Null Pointer argument passed to function. */
-#define WHD_THREAD_FINISH_FAIL           WHD_RESULT_CREATE(1053)   /**< Error deleting a thread */
-#define WHD_WAIT_ABORTED                 WHD_RESULT_CREATE(1054)   /**< Semaphore/mutex wait has been aborted */
-#define WHD_SET_BLOCK_ACK_WINDOW_FAIL    WHD_RESULT_CREATE(1055)   /**< Failed to set block ack window */
-#define WHD_DELAY_TOO_SHORT              WHD_RESULT_CREATE(1056)   /**< Requested delay is too short */
-#define WHD_INVALID_INTERFACE            WHD_RESULT_CREATE(1057)   /**< Invalid interface provided */
-#define WHD_WEP_KEYLEN_BAD               WHD_RESULT_CREATE(1058)   /**< WEP / WEP_SHARED key length must be 5 or 13 bytes */
-#define WHD_HANDLER_ALREADY_REGISTERED   WHD_RESULT_CREATE(1059)   /**< EAPOL handler already registered */
-#define WHD_AP_ALREADY_UP                WHD_RESULT_CREATE(1060)   /**< Soft AP or P2P group owner already up */
-#define WHD_EAPOL_KEY_PACKET_M1_TIMEOUT  WHD_RESULT_CREATE(1061)   /**< Timeout occurred while waiting for EAPOL packet M1 from AP */
-#define WHD_EAPOL_KEY_PACKET_M3_TIMEOUT  WHD_RESULT_CREATE(1062)   /**< Timeout occurred while waiting for EAPOL packet M3 from APwhich may indicate incorrect WPA2/WPA passphrase */
-#define WHD_EAPOL_KEY_PACKET_G1_TIMEOUT  WHD_RESULT_CREATE(1063)   /**< Timeout occurred while waiting for EAPOL packet G1 from AP */
-#define WHD_EAPOL_KEY_FAILURE            WHD_RESULT_CREATE(1064)   /**< Unknown failure occurred during the EAPOL key handshake */
-#define WHD_MALLOC_FAILURE               WHD_RESULT_CREATE(1065)   /**< Memory allocation failure */
-#define WHD_ACCESS_POINT_NOT_FOUND       WHD_RESULT_CREATE(1066)   /**< Access point not found */
-#define WHD_RTOS_ERROR                   WHD_RESULT_CREATE(1067)   /**< RTOS operation failed */
-#define WHD_CLM_BLOB_DLOAD_ERROR         WHD_RESULT_CREATE(1068)   /**< CLM blob download failed */
-#define WHD_HAL_ERROR                    WHD_RESULT_CREATE(1069)   /**< WHD HAL Error */
-#define WHD_RTOS_STATIC_MEM_LIMIT        WHD_RESULT_CREATE(1070)   /**< Exceeding the RTOS static objects memory */
-
-#define WLAN_ENUM_OFFSET 2000            /**< WLAN enum offset for WHD_WLAN error processing */
-
-#define WHD_WLAN_ERROR                   WHD_RESULT_CREATE(2001) /**< Generic Error */
-#define WHD_WLAN_BADARG                  WHD_RESULT_CREATE(2002) /**< Bad Argument */
-#define WHD_WLAN_BADOPTION               WHD_RESULT_CREATE(2003) /**< Bad option */
-#define WHD_WLAN_NOTUP                   WHD_RESULT_CREATE(2004) /**< Not up */
-#define WHD_WLAN_NOTDOWN                 WHD_RESULT_CREATE(2005) /**< Not down */
-#define WHD_WLAN_NOTAP                   WHD_RESULT_CREATE(2006) /**< Not AP */
-#define WHD_WLAN_NOTSTA                  WHD_RESULT_CREATE(2007) /**< Not STA  */
-#define WHD_WLAN_BADKEYIDX               WHD_RESULT_CREATE(2008) /**< BAD Key Index */
-#define WHD_WLAN_RADIOOFF                WHD_RESULT_CREATE(2009) /**< Radio Off */
-#define WHD_WLAN_NOTBANDLOCKED           WHD_RESULT_CREATE(2010) /**< Not  band locked */
-#define WHD_WLAN_NOCLK                   WHD_RESULT_CREATE(2011) /**< No Clock */
-#define WHD_WLAN_BADRATESET              WHD_RESULT_CREATE(2012) /**< BAD Rate valueset */
-#define WHD_WLAN_BADBAND                 WHD_RESULT_CREATE(2013) /**< BAD Band */
-#define WHD_WLAN_BUFTOOSHORT             WHD_RESULT_CREATE(2014) /**< Buffer too short */
-#define WHD_WLAN_BUFTOOLONG              WHD_RESULT_CREATE(2015) /**< Buffer too long */
-#define WHD_WLAN_BUSY                    WHD_RESULT_CREATE(2016) /**< Busy */
-#define WHD_WLAN_NOTASSOCIATED           WHD_RESULT_CREATE(2017) /**< Not Associated */
-#define WHD_WLAN_BADSSIDLEN              WHD_RESULT_CREATE(2018) /**< Bad SSID len */
-#define WHD_WLAN_OUTOFRANGECHAN          WHD_RESULT_CREATE(2019) /**< Out of Range Channel */
-#define WHD_WLAN_BADCHAN                 WHD_RESULT_CREATE(2020) /**< Bad Channel */
-#define WHD_WLAN_BADADDR                 WHD_RESULT_CREATE(2021) /**< Bad Address */
-#define WHD_WLAN_NORESOURCE              WHD_RESULT_CREATE(2022) /**< Not Enough Resources */
-#define WHD_WLAN_UNSUPPORTED             WHD_RESULT_CREATE(2023) /**< Unsupported */
-#define WHD_WLAN_BADLEN                  WHD_RESULT_CREATE(2024) /**< Bad length */
-#define WHD_WLAN_NOTREADY                WHD_RESULT_CREATE(2025) /**< Not Ready */
-#define WHD_WLAN_EPERM                   WHD_RESULT_CREATE(2026) /**< Not Permitted */
-#define WHD_WLAN_NOMEM                   WHD_RESULT_CREATE(2027) /**< No Memory */
-#define WHD_WLAN_ASSOCIATED              WHD_RESULT_CREATE(2028) /**< Associated */
-#define WHD_WLAN_RANGE                   WHD_RESULT_CREATE(2029) /**< Not In Range */
-#define WHD_WLAN_NOTFOUND                WHD_RESULT_CREATE(2030) /**< Not Found */
-#define WHD_WLAN_WME_NOT_ENABLED         WHD_RESULT_CREATE(2031) /**< WME Not Enabled */
-#define WHD_WLAN_TSPEC_NOTFOUND          WHD_RESULT_CREATE(2032) /**< TSPEC Not Found */
-#define WHD_WLAN_ACM_NOTSUPPORTED        WHD_RESULT_CREATE(2033) /**< ACM Not Supported */
-#define WHD_WLAN_NOT_WME_ASSOCIATION     WHD_RESULT_CREATE(2034) /**< Not WME Association */
-#define WHD_WLAN_SDIO_ERROR              WHD_RESULT_CREATE(2035) /**< SDIO Bus Error */
-#define WHD_WLAN_WLAN_DOWN               WHD_RESULT_CREATE(2036) /**< WLAN Not Accessible */
-#define WHD_WLAN_BAD_VERSION             WHD_RESULT_CREATE(2037) /**< Incorrect version */
-#define WHD_WLAN_TXFAIL                  WHD_RESULT_CREATE(2038) /**< TX failure */
-#define WHD_WLAN_RXFAIL                  WHD_RESULT_CREATE(2039) /**< RX failure */
-#define WHD_WLAN_NODEVICE                WHD_RESULT_CREATE(2040) /**< Device not present */
-#define WHD_WLAN_UNFINISHED              WHD_RESULT_CREATE(2041) /**< To be finished */
-#define WHD_WLAN_NONRESIDENT             WHD_RESULT_CREATE(2042) /**< access to nonresident overlay */
-#define WHD_WLAN_DISABLED                WHD_RESULT_CREATE(2043) /**< Disabled in this build */
-#define WHD_WLAN_NOFUNCTION              WHD_RESULT_CREATE(2044) /**< Function pointer not provided */
-#define WHD_WLAN_INVALID                 WHD_RESULT_CREATE(2045) /**< Not valid */
-#define WHD_WLAN_NOBAND                  WHD_RESULT_CREATE(2046) /**< No Band */
-
-/**
- * type definition for whd_buffer_t
- */
-typedef whd_buffer_t whd_buffer_queue_ptr_t;
-
-#pragma pack(1)
-
-/**
- * Structure for storing AP information
- */
-typedef struct whd_ap_info
-{
-    whd_ssid_t SSID;          /**< Service Set Identification (i.e. Name of Access Point)                    */
-    whd_mac_t BSSID;          /**< Basic Service Set Identification (i.e. MAC address of Access Point)       */
-    int16_t signal_strength;  /**< Receive Signal Strength Indication in dBm. <-90=Very poor, >-30=Excellent */
-    uint32_t max_data_rate;   /**< Maximum data rate in kilobits/s                                           */
-    whd_bss_type_t bss_type;  /**< Network type                                                              */
-    whd_security_t security;  /**< Security type                                                             */
-    uint8_t channel;          /**< Radio channel that the AP beacon was received on                          */
-    whd_802_11_band_t band;   /**< Radio band                                                                */
-    struct whd_ap_info *next; /**< Pointer to the next scan result                                           */
-} whd_ap_info_t;
-
-/**
- * Structure describing a list of associated softAP clients
- */
-typedef struct
-{
-    uint32_t count;          /**< Number of MAC addresses in the list    */
-    whd_mac_t mac_list[1];   /**< Variable length array of MAC addresses */
-} whd_maclist_t;
-
-#pragma pack()
-
-/**
- * Time value in milliseconds
- */
-typedef uint32_t whd_time_t;
-
-/**
- * Structure for storing a WEP key
- */
-typedef struct
-{
-    uint8_t index;    /**< WEP key index [0/1/2/3]                                         */
-    uint8_t length;   /**< WEP key length. Either 5 bytes (40-bits) or 13-bytes (104-bits) */
-    uint8_t data[32]; /**< WEP key as values NOT characters                                */
-} whd_wep_key_t;
-
-/**
- * Structure for Out-of-band interrupt config parameters which can be set by application during whd power up
- */
-typedef struct whd_oob_config
-{
-    cyhal_gpio_t host_oob_pin;   /**< Host-side GPIO pin selection */
-    uint8_t dev_gpio_sel;        /**< WiFi device-side GPIO pin selection (must be zero) */
-    whd_bool_t is_falling_edge;  /**< Interrupt trigger (polarity) */
-    uint8_t intr_priority;       /**< OOB interrupt priority */
-} whd_oob_config_t;
-
-/**
- * Structure for SDIO config parameters which can be set by application during whd power up
- */
-typedef struct whd_sdio_config
-{
-    /* Bus config */
-    whd_bool_t sdio_1bit_mode;        /**< Default is false, means SDIO operates under 4 bit mode */
-    whd_bool_t high_speed_sdio_clock; /**< Default is false, means SDIO operates in normal clock rate */
-    whd_oob_config_t oob_config;      /**< Out-of-band interrupt configuration (required when bus can sleep) */
-} whd_sdio_config_t;
-
-/**
- * Structure for SPI config parameters which can be set by application during whd power up
- */
-typedef struct whd_spi_config
-{
-    /* Bus config */
-    whd_bool_t is_spi_normal_mode; /**< Default is false */
-    whd_oob_config_t oob_config;   /**< Out-of-band interrupt configuration */
-} whd_spi_config_t;
-
-/**
- * Enumeration of applicable packet mask bits for custom Information Elements (IEs)
- */
-typedef enum
-{
-    VENDOR_IE_BEACON = 0x1,         /**< Denotes beacon packet                  */
-    VENDOR_IE_PROBE_RESPONSE = 0x2, /**< Denotes probe response packet          */
-    VENDOR_IE_ASSOC_RESPONSE = 0x4, /**< Denotes association response packet    */
-    VENDOR_IE_AUTH_RESPONSE = 0x8,  /**< Denotes authentication response packet */
-    VENDOR_IE_PROBE_REQUEST = 0x10, /**< Denotes probe request packet           */
-    VENDOR_IE_ASSOC_REQUEST = 0x20, /**< Denotes association request packet     */
-    VENDOR_IE_CUSTOM = 0x100        /**< Denotes a custom IE(Information Element) identifier */
-} whd_ie_packet_flag_t;
-
-/**
- * Structure for LE Scan parameters
- */
-typedef struct whd_btc_lescan_params
-{
-    uint16_t priority;      /**< LE scan priority */
-    uint16_t duty_cycle;    /**< LE scan duty cycle */
-    uint16_t max_win;       /**< LE Max Scan window */
-    uint16_t int_grant;     /**< LE Small Interval Grant */
-    uint16_t scan_int;      /**< LE scan interval */
-    uint16_t scan_win;      /**< LE scan Window */
-} whd_btc_lescan_params_t;
-
-/**
- * Structure for coex config parameters which can be set by application
- */
-typedef struct whd_coex_config
-{
-    whd_btc_lescan_params_t le_scan_params;  /**< LE Scan Parameters */
-} whd_coex_config_t;
-
-#define PORT_FILTER_LEN 26  /**< Port filter len */
-#define PACKET_FILTER_LIST_BUFFER_MAX_LEN 1000  /**< Packet filter buffer max len */
-/**
- * Enumeration of packet filter rules
- */
-typedef enum
-{
-    WHD_PACKET_FILTER_RULE_POSITIVE_MATCHING  = 0, /**< Specifies that a filter should match a given pattern	 */
-    WHD_PACKET_FILTER_RULE_NEGATIVE_MATCHING  = 1  /**< Specifies that a filter should NOT match a given pattern */
-} whd_packet_filter_rule_t;
-
-/**
- * Structure describing a packet filter list item
- */
-typedef struct
-{
-    uint32_t id;                                  /**< Unique identifier for a packet filter item							  */
-    whd_packet_filter_rule_t rule;                /**< Filter matches are either POSITIVE or NEGATIVE matching */
-    uint16_t offset;                              /**< Offset in bytes to start filtering (referenced to the start of the ethernet packet) */
-    uint16_t mask_size;                           /**< Size of the mask in bytes */
-    uint8_t *mask;                                /**< Pattern mask bytes to be ANDed with the pattern eg. "\xff00" (must be in network byte order) */
-    uint8_t *pattern;                             /**< Pattern bytes used to filter eg. "\x0800"  (must be in network byte order) */
-    whd_bool_t enabled_status;                     /**< When returned from wwd_wifi_get_packet_filters, indicates if the filter is enabled */
-} whd_packet_filter_t;
-
-#define TKO_DATA_OFFSET offsetof(wl_tko_t, data)  /**< TKO data offset */
-
-#ifdef __cplusplus
-}     /* extern "C" */
-#endif
-#endif /* ifndef INCLUDED_WHD_TYPES_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_wifi_api.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_wifi_api.h
deleted file mode 100644
index aa04ba8a92..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_wifi_api.h
+++ /dev/null
@@ -1,1179 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Prototypes of functions for controlling the Wi-Fi system
- *
- *  This file provides prototypes for end-user functions which allow
- *  actions such as scanning for Wi-Fi networks, joining Wi-Fi
- *  networks, getting the MAC address, etc
- *
- */
-
-#include "whd.h"
-#include "whd_types.h"
-
-#ifndef INCLUDED_WHD_WIFI_API_H
-#define INCLUDED_WHD_WIFI_API_H
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-*             Function declarations
-******************************************************/
-
-/** @addtogroup wifi WHD Wi-Fi API
- *  APIs for controlling the Wi-Fi system
- *  @{
- */
-
-/** @addtogroup wifimanagement WHD Wi-Fi Management API
- *  @ingroup wifi
- *  Initialisation and other management functions for WHD system
- *  @{
- */
-
-/** Initialize an instance of the WHD driver
- *
- *  @param whd_driver_ptr       Pointer to Pointer to handle instance of the driver
- *  @param whd_init_config      Pointer to configuration data that controls how the driver is initialized
- *  @param resource_ops         Pointer to resource interface to provide resources to the driver initialization process
- *  @param buffer_ops           Pointer to a buffer interface to provide buffer related services to the driver instance
- *  @param network_ops          Pointer to a whd_netif_funcs_t to provide network stack services to the driver instance
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_init(whd_driver_t *whd_driver_ptr, whd_init_config_t *whd_init_config,
-                         whd_resource_source_t *resource_ops, whd_buffer_funcs_t *buffer_ops,
-                         whd_netif_funcs_t *network_ops);
-/* @} */
-/* @} */
-
-/** @addtogroup busapi WHD Bus API
- * Allows WHD to operate with specific SDIO/SPI bus
- *  @{
- */
-
-/** Attach the WLAN Device to a specific SDIO bus
- *
- *  @param  whd_driver         Pointer to handle instance of the driver
- *  @param  whd_config         Configuration for SDIO bus
- *  @param  sdio_obj           The SDHC hardware interface, from the Level 3 CY HW APIs
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_bus_sdio_attach(whd_driver_t whd_driver, whd_sdio_config_t *whd_config, cyhal_sdio_t *sdio_obj);
-
-/** Detach the WLAN Device to a specific SDIO bus
- *
- *  @param  whd_driver         Pointer to handle instance of the driver
- */
-extern void whd_bus_sdio_detach(whd_driver_t whd_driver);
-
-/** Attach the WLAN Device to a specific SPI bus
- *
- *  @param  whd_driver        Pointer to handle instance of the driver
- *  @param  whd_config        Configuration for SPI bus
- *  @param  spi_obj           The SPI hardware interface, from the Level 3 CY HW APIs
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_bus_spi_attach(whd_driver_t whd_driver, whd_spi_config_t *whd_config, cyhal_spi_t *spi_obj);
-
-/** Detach the WLAN Device to a specific SPI bus
- *
- *  @param  whd_driver         Pointer to handle instance of the driver
- */
-extern void whd_bus_spi_detach(whd_driver_t whd_driver);
-
-/*  @} */
-
-/** @addtogroup wifi WHD Wi-Fi API
- *  APIs for controlling the Wi-Fi system
- *  @{
- */
-
-/** @addtogroup wifimanagement WHD Wi-Fi Management API
- *  @ingroup wifi
- *  Initialisation and other management functions for WHD system
- *  @{
- */
-
-/**
- * Turn on the Wi-Fi device
- *
- *  Initialise Wi-Fi platform
- *  Program various WiFi parameters and modes
- *
- *  @param  whd_driver        Pointer to handle instance of the driver
- *  @param   ifpp             Pointer to Pointer to handle instance of whd interface
- *
- *  @return WHD_SUCCESS if initialization is successful, error code otherwise
- */
-extern uint32_t whd_wifi_on(whd_driver_t whd_driver, whd_interface_t *ifpp);
-
-/**
- * Turn off the Wi-Fi device
- *
- *  - De-Initialises the required parts of the hardware platform
- *    i.e. pins for SDIO/SPI, interrupt, reset, power etc.
- *
- *  - De-Initialises the whd thread which arbitrates access
- *    to the SDIO/SPI bus
- *
- *  @param   ifp              Pointer to handle instance of whd interface
- *
- *  @return WHD_SUCCESS if deinitialization is successful, Error code otherwise
- */
-extern uint32_t whd_wifi_off(whd_interface_t ifp);
-
-/** Shutdown this instance of the wifi driver, freeing all used resources
- *
- *  @param   ifp              Pointer to handle instance of whd interface
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_deinit(whd_interface_t ifp);
-
-/** Brings up the Wi-Fi core
- *
- *  @param   ifp              Pointer to handle instance of whd interface
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_set_up(whd_interface_t ifp);
-
-/** Bring down the Wi-Fi core
- *
- *  WARNING / NOTE:
- *     This brings down the Wi-Fi core and existing network connections will be lost.
- *
- *  @param   ifp               Pointer to handle instance of whd interface
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_set_down(whd_interface_t ifp);
-
-/** Creates a secondary interface
- *
- *  @param  whd_drv              Pointer to handle instance of the driver
- *  @param  mac_addr             MAC address for the interface
- *  @param  ifpp                 Pointer to the whd interface pointer
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_add_secondary_interface(whd_driver_t whd_drv, whd_mac_t *mac_addr, whd_interface_t *ifpp);
-/*  @} */
-
-/** @addtogroup wifijoin   WHD Wi-Fi Join, Scan and Halt API
- *  @ingroup wifi
- *  Wi-Fi APIs for join, scan & leave
- *  @{
- */
-
-/** Scan result callback function pointer type
- *
- * @param result_ptr   A pointer to the pointer that indicates where to put the next scan result
- * @param user_data    User provided data
- * @param status       Status of scan process
- */
-typedef void (*whd_scan_result_callback_t)(whd_scan_result_t **result_ptr, void *user_data, whd_scan_status_t status);
-
-/** Initiates a scan to search for 802.11 networks.
- *
- *  This functions returns the scan results with limited sets of parameter in a buffer provided by the caller.
- *  It is also a blocking call. It is an simplified version of the whd_wifi_scan().
- *
- *  @param   ifp                       Pointer to handle instance of whd interface
- *  @param   scan_result               pointer to user requested records buffer.
- *  @param   count                     No of records user is interested in.
- *                                     If 0 return the total record count.
- *
- *  @note    When scanning specific channels, devices with a strong signal strength on nearby channels may be detected
- *
- *  @return record count or Error code
- */
-extern uint32_t whd_wifi_scan_synch(whd_interface_t ifp,
-                                    whd_sync_scan_result_t *scan_result,
-                                    uint32_t count
-                                    );
-
-/** Initiates a scan to search for 802.11 networks.
- *
- *  The scan progressively accumulates results over time, and may take between 1 and 10 seconds to complete.
- *  The results of the scan will be individually provided to the callback function.
- *  Note: The callback function will be executed in the context of the WHD thread and so must not perform any
- *  actions that may cause a bus transaction.
- *
- *  @param   ifp                       Pointer to handle instance of whd interface
- *  @param   scan_type                 Specifies whether the scan should be Active, Passive or scan Prohibited channels
- *  @param   bss_type                  Specifies whether the scan should search for Infrastructure networks (those using
- *                                     an Access Point), Ad-hoc networks, or both types.
- *  @param   optional_ssid             If this is non-Null, then the scan will only search for networks using the specified SSID.
- *  @param   optional_mac              If this is non-Null, then the scan will only search for networks where
- *                                     the BSSID (MAC address of the Access Point) matches the specified MAC address.
- *  @param   optional_channel_list     If this is non-Null, then the scan will only search for networks on the
- *                                     specified channels - array of channel numbers to search, terminated with a zero
- *  @param   optional_extended_params  If this is non-Null, then the scan will obey the specifications about
- *                                     dwell times and number of probes.
- *  @param   callback                  The callback function which will receive and process the result data.
- *  @param   result_ptr                Pointer to a pointer to a result storage structure.
- *  @param   user_data                 user specific data that will be passed directly to the callback function
- *
- *  @note - When scanning specific channels, devices with a strong signal strength on nearby channels may be detected
- *        - Callback must not use blocking functions, nor use WHD functions, since it is called from the context of the
- *          WHD thread.
- *        - The callback, result_ptr and user_data variables will be referenced after the function returns.
- *          Those variables must remain valid until the scan is complete.
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_scan(whd_interface_t ifp,
-                              whd_scan_type_t scan_type,
-                              whd_bss_type_t bss_type,
-                              const whd_ssid_t *optional_ssid,
-                              const whd_mac_t *optional_mac,
-                              const uint16_t *optional_channel_list,
-                              const whd_scan_extended_params_t *optional_extended_params,
-                              whd_scan_result_callback_t callback,
-                              whd_scan_result_t *result_ptr,
-                              void *user_data);
-
-/** Abort a previously issued scan
- *
- *  @param   ifp           Pointer to handle instance of whd interface
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_stop_scan(whd_interface_t ifp);
-
-/** Joins a Wi-Fi network
- *
- *  Scans for, associates and authenticates with a Wi-Fi network.
- *  On successful return, the system is ready to send data packets.
- *
- *  @param   ifp           Pointer to handle instance of whd interface
- *  @param   ssid          A null terminated string containing the SSID name of the network to join
- *  @param   auth_type     Authentication type
- *  @param   security_key  A byte array containing either the cleartext security key for WPA/WPA2/WPA3 secured networks
- *  @param   key_length    The length of the security_key in bytes.
- *
- *  @note    In case of WPA3/WPA2 transition mode, the security_key value is WPA3 password.
- *
- *  @return  WHD_SUCCESS   when the system is joined and ready to send data packets
- *           Error code    if an error occurred
- */
-extern uint32_t whd_wifi_join(whd_interface_t ifp, const whd_ssid_t *ssid, whd_security_t auth_type,
-                              const uint8_t *security_key, uint8_t key_length);
-
-/** Joins a specific Wi-Fi network
- *
- *  Associates and authenticates with a specific Wi-Fi access point.
- *  On successful return, the system is ready to send data packets.
- *
- *  @param   ifp           Pointer to handle instance of whd interface
- *  @param   ap            A pointer to a whd_scan_result_t structure containing AP details and
- *                         set ap.channel to 0 for unspecificed channel
- *  @param   security_key  A byte array containing either the cleartext security key for WPA/WPA2
- *                         secured networks
- *  @param   key_length    The length of the security_key in bytes.
- *
- *  @return  WHD_SUCCESS   when the system is joined and ready to send data packets
- *           Error code    if an error occurred
- */
-extern uint32_t whd_wifi_join_specific(whd_interface_t ifp, const whd_scan_result_t *ap, const uint8_t *security_key,
-                                       uint8_t key_length);
-
-/*  @} */
-
-/** @addtogroup wifiutilities   WHD Wi-Fi Utility API
- *  @ingroup wifi
- *  Allows WHD to perform utility operations
- *  @{
- */
-
-/** Set the current channel on the WLAN radio
- *
- *  @note  On most WLAN devices this will set the channel for both AP *AND* STA
- *        (since there is only one radio - it cannot be on two channels simulaneously)
- *
- *  @param   ifp           Pointer to handle instance of whd interface
- *  @param   channel       The desired channel
- *
- *  @return  WHD_SUCCESS   if the channel was successfully set
- *           Error code    if the channel was not successfully set
- */
-extern uint32_t whd_wifi_set_channel(whd_interface_t ifp, uint32_t channel);
-
-/** Get the current channel on the WLAN radio
- *
- *  @note On most WLAN devices this will get the channel for both AP *AND* STA
- *       (since there is only one radio - it cannot be on two channels simulaneously)
- *
- *  @param   ifp            Pointer to handle instance of whd interface
- *  @param   channel        Pointer to receive the current channel
- *
- *  @return  WHD_SUCCESS    if the channel was successfully retrieved
- *           Error code     if the channel was not successfully retrieved
- */
-extern uint32_t whd_wifi_get_channel(whd_interface_t ifp, uint32_t *channel);
-
-/** Set the passphrase
- *
- *  @param   ifp            Pointer to handle instance of whd interface
- *  @param   security_key   The security key (passphrase) which is to be set
- *  @param   key_length     length of the key
- *
- *  @return  WHD_SUCCESS    when the key is set
- *           Error code     if an error occurred
- */
-extern uint32_t whd_wifi_set_passphrase(whd_interface_t ifp, const uint8_t *security_key, uint8_t key_length);
-
-/** Set the SAE password
- *
- *  @param   ifp            Pointer to handle instance of whd interface
- *  @param   security_key   The security key (password) which is to be set
- *  @param   key_length     length of the key
- *
- *  @return  WHD_SUCCESS    when the key is set
- *           Error code     if an error occurred
- */
-extern uint32_t whd_wifi_sae_password(whd_interface_t ifp, const uint8_t *security_key, uint8_t key_length);
-
-/** Enable WHD internal supplicant and set WPA2 passphrase in case of WPA3/WPA2 transition mode
- *
- *  @param   ifp                Pointer to handle instance of whd interface
- *  @param   security_key_psk   The security key (passphrase) which is to be set
- *  @param   psk_length         length of the key
- *  @param   auth_type          Authentication type: @ref WHD_SECURITY_WPA3_WPA2_PSK
- *
- *  @return  WHD_SUCCESS        when the supplicant variable and wpa2 passphrase is set
- *           Error code         if an error occurred
- */
-extern uint32_t whd_wifi_enable_sup_set_passphrase(whd_interface_t ifp, const uint8_t *security_key_psk,
-                                                   uint8_t psk_length, whd_security_t auth_type);
-
-
-/** Enable WHD internal supplicant
- *
- *  @param   ifp            Pointer to handle instance of whd interface
- *  @param   auth_type      Authentication type
- *
- *  @return  WHD_SUCCESS    when the supplicant variable is set
- *           Error code     if an error occurred
- */
-extern uint32_t whd_wifi_enable_supplicant(whd_interface_t ifp, whd_security_t auth_type);
-
-/** Retrieve the latest RSSI value
- *
- *  @param   ifp           Pointer to handle instance of whd interface
- *  @param   rssi          The location where the RSSI value will be stored
- *
- *  @return  WHD_SUCCESS   if the RSSI was successfully retrieved
- *           Error code    if the RSSI was not retrieved
- */
-extern uint32_t whd_wifi_get_rssi(whd_interface_t ifp, int32_t *rssi);
-
-/** Retrieve the associated STA's RSSI value
- *
- *  @param   ifp          : Pointer to handle instance of whd interface
- *  @param   rssi         : The location where the RSSI value will be stored
- *  @param   client_mac   : Pointer to associated client's MAC address
- *
- *  @return  WHD_SUCCESS  : if the RSSI was successfully retrieved
- *           Error code   : if the RSSI was not retrieved
- */
-extern uint32_t whd_wifi_get_ap_client_rssi(whd_interface_t ifp, int32_t *rssi, const whd_mac_t *client_mac);
-
-
-/* @} */
-
-/** @addtogroup wifijoin   WHD Wi-Fi Join, Scan and Halt API
- *  @ingroup wifi
- *  Wi-Fi APIs for join, scan & leave
- *  @{
- */
-/** Disassociates from a Wi-Fi network.
- *  Applicable only for STA role
- *
- *  @param   ifp           Pointer to handle instance of whd interface.
- *
- *  @return  WHD_SUCCESS   On successful disassociation from the AP
- *           Error code    If an error occurred
- */
-extern uint32_t whd_wifi_leave(whd_interface_t ifp);
-/* @} */
-
-/** @addtogroup wifiutilities   WHD Wi-Fi Utility API
- *  @ingroup wifi
- *  Allows WHD to perform utility operations
- *  @{
- */
-
-/** Retrieves the current Media Access Control (MAC) address
- *  (or Ethernet hardware address) of the 802.11 device
- *
- *  @param   ifp           Pointer to handle instance of whd interface
- *  @param   mac           Pointer to a variable that the current MAC address will be written to
- *
- *  @return  WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_get_mac_address(whd_interface_t ifp, whd_mac_t *mac);
-
-/** Get the BSSID of the interface
- *
- *  @param  ifp           Pointer to the whd_interface_t
- *  @param  bssid         Returns the BSSID address (mac address) if associated
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_get_bssid(whd_interface_t ifp, whd_mac_t *bssid);
-/* @} */
-
-/** @addtogroup wifisoftap     WHD Wi-Fi SoftAP API
- *  @ingroup wifi
- *  Wi-Fi APIs to perform SoftAP related functionalities
- *  @{
- */
-
-/** Initialises an infrastructure WiFi network (SoftAP)
- *
- *  @param   ifp           Pointer to handle instance of whd interface
- *  @param   ssid          A null terminated string containing the SSID name of the network to join
- *  @param   auth_type     Authentication type
- *  @param   security_key  A byte array containing the cleartext security key for the network
- *  @param   key_length    The length of the security_key in bytes.
- *  @param   channel       802.11 channel number
- *
- *  @return  WHD_SUCCESS   if successfully initialises an AP
- *           Error code    if an error occurred
- */
-extern uint32_t whd_wifi_init_ap(whd_interface_t ifp, whd_ssid_t *ssid, whd_security_t auth_type,
-                                 const uint8_t *security_key, uint8_t key_length, uint8_t channel);
-
-/** Start the infrastructure WiFi network (SoftAP)
- *  using the parameter set by whd_wifi_init_ap() and optionaly by whd_wifi_manage_custom_ie()
- *
- *  @return  WHD_SUCCESS   if successfully creates an AP
- *           Error code    if an error occurred
- */
-extern uint32_t whd_wifi_start_ap(whd_interface_t ifp);
-
-/** Stops an existing infrastructure WiFi network
- *
- *  @param   ifp           Pointer to handle instance of whd interface
- *
- *  @return  WHD_SUCCESS   if the AP is successfully stopped or if the AP has not yet been brought up
- *           Error code    if an error occurred
- */
-extern uint32_t whd_wifi_stop_ap(whd_interface_t ifp);
-
-
-/** Get the maximum number of associations supported by AP interfaces
- *
- *  @param   ifp           Pointer to handle instance of whd interface
- *  @param   max_assoc     The maximum number of associations supported by Soft AP interfaces.
- *
- *  @return  WHD_SUCCESS   if the maximum number of associated clients was successfully read
- *           WHD_ERROR     if the maximum number of associated clients was not successfully read
- */
-extern uint32_t whd_wifi_ap_get_max_assoc(whd_interface_t ifp, uint32_t *max_assoc);
-
-/** Gets the current number of active connections
- *
- *  @param   ifp                 Pointer to handle instance of whd interface
- *  @param   client_list_buffer  Buffer to store list of associated clients
- *  @param   buffer_length       Length of client list buffer
- *
- *  @return  WHD_SUCCESS         if the active connections was successfully read
- *           WHD_ERROR           if the active connections was not successfully read
- */
-extern uint32_t whd_wifi_get_associated_client_list(whd_interface_t ifp, void *client_list_buffer,
-                                                    uint16_t buffer_length);
-
-/** Deauthenticates a STA which may or may not be associated to SoftAP
- *
- * @param   ifp             Pointer to handle instance of whd interface
- * @param   mac             Pointer to a variable containing the MAC address to which the deauthentication will be sent
- *                          NULL mac address will deauthenticate all the associated STAs
- *
- * @param   reason          Deauthentication reason code
- *
- * @return  WHD_SUCCESS     On successful deauthentication of the other STA
- *          WHD_ERROR       If an error occurred
- */
-extern uint32_t whd_wifi_deauth_sta(whd_interface_t ifp, whd_mac_t *mac, whd_dot11_reason_code_t reason);
-
-/** Retrieves AP information
- *
- *  @param  ifp            Pointer to handle instance of whd interface
- *  @param  ap_info        Returns a whd_bss_info_t structure containing AP details
- *  @param  security       Authentication type
- *
- *  @return WHD_SUCCESS    if the AP info was successfully retrieved
- *          Error code     if the AP info was not successfully retrieved
- */
-extern uint32_t whd_wifi_get_ap_info(whd_interface_t ifp, whd_bss_info_t *ap_info, whd_security_t *security);
-
-/** Set the beacon interval.
- *
- *  Note that the value needs to be set before ap_start in order to beacon interval to take effect.
- *
- *  @param  ifp            Pointer to handle instance of whd interface
- *  @param  interval       Beacon interval in time units (Default: 100 time units = 102.4 ms)
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_ap_set_beacon_interval(whd_interface_t ifp, uint16_t interval);
-
-/** Set the DTIM interval.
- *
- *  Note that the value needs to be set before ap_start in order to DTIM interval to take effect.
- *
- *  @param  ifp            Pointer to handle instance of whd interface
- *  @param  interval       DTIM interval, in unit of beacon interval
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_ap_set_dtim_interval(whd_interface_t ifp, uint16_t interval);
-/*  @} */
-
-
-/** @addtogroup wifipowersave   WHD Wi-Fi Power Save API
- *  @ingroup wifi
- *  Wi-Fi functions for WLAN low power modes
- *  @{
- */
-
-/** Enables powersave mode on specified interface without regard for throughput reduction
- *
- *  This function enables (legacy) 802.11 PS-Poll mode and should be used
- *  to achieve the lowest power consumption possible when the Wi-Fi device
- *  is primarily passively listening to the network
- *
- *  @param  ifp            Pointer to handle instance of whd interface
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_enable_powersave(whd_interface_t ifp);
-
-/** Enables powersave mode on specified interface while attempting to maximise throughput
- *
- *
- *  Network traffic is typically bursty. Reception of a packet often means that another
- *  packet will be received shortly afterwards (and vice versa for transmit).
- *
- *  In high throughput powersave mode, rather then entering powersave mode immediately
- *  after receiving or sending a packet, the WLAN chip waits for a timeout period before
- *  returning to sleep.
- *
- *  @param   ifp                    Pointer to handle instance of whd interface
- *  @param   return_to_sleep_delay  The variable to set return to sleep delay.
- *                                 return to sleep delay must be set to a multiple of 10 and not equal to zero.
- *
- *  @return  WHD_SUCCESS            if power save mode was successfully enabled
- *           Error code             if power save mode was not successfully enabled
- *
- */
-extern uint32_t whd_wifi_enable_powersave_with_throughput(whd_interface_t ifp, uint16_t return_to_sleep_delay);
-
-/** Get powersave mode on specified interface
- *
- *  @param  ifp            Pointer to handle instance of whd interface
- *  @param  value          Value of the current powersave state
- *                          PM1_POWERSAVE_MODE, PM2_POWERSAVE_MODE, NO_POWERSAVE_MODE
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_get_powersave_mode(whd_interface_t ifp, uint32_t *value);
-
-/** Disables 802.11 power save mode on specified interface
- *
- *  @param   ifp               Pointer to handle instance of whd interface
- *
- *  @return  WHD_SUCCESS       if power save mode was successfully disabled
- *           Error code        if power save mode was not successfully disabled
- *
- */
-extern uint32_t whd_wifi_disable_powersave(whd_interface_t ifp);
-/* @} */
-
-/** @addtogroup wifiutilities   WHD Wi-Fi Utility API
- *  @ingroup wifi
- *  Allows WHD to perform utility operations
- *  @{
- */
-/** Registers interest in a multicast address
- *
- *  Once a multicast address has been registered, all packets detected on the
- *  medium destined for that address are forwarded to the host.
- *  Otherwise they are ignored.
- *
- *  @param  ifp              Pointer to handle instance of whd interface
- *  @param  mac              Ethernet MAC address
- *
- *  @return WHD_SUCCESS      if the address was registered successfully
- *          Error code       if the address was not registered
- */
-extern uint32_t whd_wifi_register_multicast_address(whd_interface_t ifp, const whd_mac_t *mac);
-
-/** Unregisters interest in a multicast address
- *
- *  Once a multicast address has been unregistered, all packets detected on the
- *  medium destined for that address are ignored.
- *
- *  @param  ifp              Pointer to handle instance of whd interface
- *  @param  mac              Ethernet MAC address
- *
- *  @return WHD_SUCCESS      if the address was unregistered successfully
- *          Error code       if the address was not unregistered
- */
-extern uint32_t whd_wifi_unregister_multicast_address(whd_interface_t ifp, const whd_mac_t *mac);
-
-/** Sets the 802.11 powersave listen interval for a Wi-Fi client, and communicates
- *  the listen interval to the Access Point. The listen interval will be set to
- *  (listen_interval x time_unit) seconds.
- *
- *  The default value for the listen interval is 0. With the default value of 0 set,
- *  the Wi-Fi device wakes to listen for AP beacons every DTIM period.
- *
- *  If the DTIM listen interval is non-zero, the DTIM listen interval will over ride
- *  the beacon listen interval value.
- *
- *  @param  ifp              Pointer to handle instance of whd interface
- *  @param  listen_interval  The desired beacon listen interval
- *  @param  time_unit        The listen interval time unit; options are beacon period or DTIM period.
- *
- *  @return WHD_SUCCESS      If the listen interval was successfully set.
- *          Error code       If the listen interval was not successfully set.
- */
-extern uint32_t whd_wifi_set_listen_interval(whd_interface_t ifp, uint8_t listen_interval,
-                                             whd_listen_interval_time_unit_t time_unit);
-
-/** Gets the current value of all beacon listen interval variables
- *
- *  @param  ifp                     Pointer to handle instance of whd interface
- *  @param  li                      Powersave listen interval values
- *                                     - listen_interval_beacon : The current value of the listen interval set as a multiple of the beacon period
- *                                     - listen_interval_dtim   : The current value of the listen interval set as a multiple of the DTIM period
- *                                     - listen_interval_assoc  : The current value of the listen interval sent to access points in an association request frame
- *
- *  @return WHD_SUCCESS             If all listen interval values are read successfully
- *          Error code              If at least one of the listen interval values are NOT read successfully
- */
-extern uint32_t whd_wifi_get_listen_interval(whd_interface_t ifp, whd_listen_interval_t *li);
-
-/** Determines if a particular interface is ready to transceive ethernet packets
- *
- *  @param     ifp                    Pointer to handle instance of whd interface
- *
- *  @return    WHD_SUCCESS            if the interface is ready to transceive ethernet packets
- *             WHD_NOTFOUND           no AP with a matching SSID was found
- *             WHD_NOT_AUTHENTICATED  Matching AP was found but it won't let you authenticate.
- *                                    This can occur if this device is in the block list on the AP.
- *             WHD_NOT_KEYED          Device has authenticated and associated but has not completed the key exchange.
- *                                    This can occur if the passphrase is incorrect.
- *             Error code             if the interface is not ready to transceive ethernet packets
- */
-extern uint32_t whd_wifi_is_ready_to_transceive(whd_interface_t ifp);
-
-/* Certification APIs */
-
-/** Retrieve the latest STA EDCF AC parameters
- *
- *  Retrieve the latest Station (STA) interface EDCF (Enhanced Distributed
- *  Coordination Function) Access Category parameters
- *
- *  @param  ifp            Pointer to handle instance of whd interface
- *  @param  acp            The location where the array of AC parameters will be stored
- *
- *  @return  WHD_SUCCESS   if the AC Parameters were successfully retrieved
- *           Error code    if the AC Parameters were not retrieved
- */
-extern uint32_t whd_wifi_get_acparams(whd_interface_t ifp, whd_edcf_ac_param_t *acp);
-
-/* Action Frames */
-
-/** Manage the addition and removal of custom IEs
- *
- *  @param  ifp            Pointer to handle instance of whd interface
- *  @param  action         the action to take (add or remove IE)
- *  @param  oui            the oui of the custom IE
- *  @param  subtype        the IE sub-type
- *  @param  data           a pointer to the buffer that hold the custom IE
- *  @param  length         the length of the buffer pointed to by 'data'
- *  @param  which_packets  A mask to indicate in which all packets this IE should be included. See whd_ie_packet_flag_t.
- *
- *  @return WHD_SUCCESS    if the custom IE action was successful
- *          Error code     if the custom IE action failed
- */
-extern uint32_t whd_wifi_manage_custom_ie(whd_interface_t ifp, whd_custom_ie_action_t action,
-                                          const uint8_t *oui, uint8_t subtype, const void *data,
-                                          uint16_t length, uint16_t which_packets);
-
-/** Send a pre-prepared action frame
- *
- *  @param  ifp            Pointer to handle instance of whd interface
- *  @param  af_params      A pointer to a pre-prepared action frame structure
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_send_action_frame(whd_interface_t ifp, whd_af_params_t *af_params);
-
-/** Set coex configuration
- *
- *  @param  ifp                  Pointer to handle instance of whd interface
- *  @param  coex_config          Pointer to the structure whd_coex_config_t
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_set_coex_config(whd_interface_t ifp, whd_coex_config_t *coex_config);
-
-/** Get version of Device (WLAN) Firmware
- *
- * @param[in]    ifp            : pointer to handle instance of whd interface
- * @param[out]   version        : pointer to store version #
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_version(whd_interface_t ifp, uint32_t *version);
-
-/** Get ARP Offload Peer Age from Device (WLAN)
- *    Length of time in seconds before aging out an entry in the WLAN processor ARP table.
- *
- * @param[in]    ifp            : pointer to handle instance of whd interface
- * @param[out]   seconds        : pointer to store value
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_peerage_get(whd_interface_t ifp, uint32_t *seconds);
-
-/** Set ARP Offload Peer Age in Device (WLAN)
- *    Length of time in seconds before aging out an entry in the WLAN processor ARP table.
- *
- * @param[in]    ifp            : pointer to handle instance of whd interface
- * @param[in]    seconds        : Seconds to age out IP
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_peerage_set(whd_interface_t ifp, uint32_t seconds);
-
-/** Get ARP Offload Agent Enable from Device (WLAN)
- *
- * @param[in]    ifp            : pointer to handle instance of whd interface
- * @param[out]   agent_enable   : pointer to store value
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_arpoe_get(whd_interface_t ifp, uint32_t *agent_enable);
-
-/** Set ARP Offload Agent Enable in Device (WLAN)
- *    Set Enable/Disable of ARP Offload Agent
- *
- * @param[in]    ifp            : pointer to handle instance of whd interface
- * @param[in]    agent_enable   : Enable=1 / Disable=0
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_arpoe_set(whd_interface_t ifp, uint32_t agent_enable);
-
-/** Clear ARP Offload cache in Device (WLAN)
- *
- * @param[in]    ifp            : pointer to handle instance of whd interface
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_cache_clear(whd_interface_t ifp);
-
-/** Get ARP Offload Feature Flags from Device (WLAN)
- *
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[out]   features   : ptr to store currently set features - bit flags CY_ARP_OL_AGENT_ENABLE, etc.
- *                            ARL_OL_AGENT | ARL_OL_SNOOP | ARP_OL_HOST_AUTO_REPLY | ARP_OL_PEER_AUTO_REPLY
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_features_get(whd_interface_t ifp, uint32_t *features);
-
-/** Set ARP Offload Feature Flags in Device (WLAN)
- *
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[in]    features   : features to set value (you can OR ('|') multiple flags) CY_ARP_OL_AGENT_ENABLE, etc.
- *                           ARL_OL_AGENT | ARL_OL_SNOOP | ARP_OL_HOST_AUTO_REPLY | ARP_OL_PEER_AUTO_REPLY
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_features_set(whd_interface_t ifp, uint32_t features);
-
-/** Print ARP Offload Feature Flags in Human readable form to console
- *
- * @param[in]    features   : feature flags to set (you can OR '|' multiple flags) CY_ARP_OL_AGENT_ENABLE, etc.
- *                            ARL_OL_AGENT | ARL_OL_SNOOP | ARP_OL_HOST_AUTO_REPLY | ARP_OL_PEER_AUTO_REPLY
- * @param[in]    title      : Optional: Title for output (NULL == no title)
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_features_print(uint32_t features, const char *title);
-
-/** Add ARP Offload Host IP Identifier(s) to HostIP List to Device (WLAN)
- *
- * @param[in]    ifp            : pointer to handle instance of whd interface
- * @param[in]    host_ipv4_list : pointer to host_ip data (IPv4, 1 uint32_t per ip addr)
- * @param[in]    count          : Number of array elements in host_ip
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_hostip_list_add(whd_interface_t ifp, uint32_t *host_ipv4_list, uint32_t count);
-
-/** Add One ARP Offload Host IP Identifier to HostIP List (mbed-style IP string) to Device (WLAN)
- *
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[in]    ip_addr    : pointer to ip string (as returned from mbedos calls)
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_hostip_list_add_string(whd_interface_t ifp, const char *ip_addr);
-
-/** Clear One ARP Offload Host IP Identifier from Host IP List in Device (WLAN)
- *
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[in]    ipv4_addr  : ip addr expressed as a uint32_t
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_hostip_list_clear_id(whd_interface_t ifp, uint32_t ipv4_addr);
-
-/** Clear One ARP Offload Host IP Identifier from Host IP List (mbed-style IP string) in Device (WLAN)
- *
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[in]    ip_addr    : pointer to ip string (as returned from mbedos calls)
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_hostip_list_clear_id_string(whd_interface_t ifp, const char *ip_addr);
-
-/** Clear all ARP Offload Host IP Identifier List
- *
- * @param[in]    ifp        : pointer to handle instance of whd interface
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_hostip_list_clear(whd_interface_t ifp);
-
-/** Get ARP Offload Host IP Identifiers from Device (WLAN)
- *
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[in]    count          : Number of array elements in host_ip
- * @param[out]   host_ipv4_list : Pointer to structure array to store host_ip data
- * @param[out]   filled         : Number of array elements filled by this routine
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_hostip_list_get(whd_interface_t ifp, uint32_t count, uint32_t *host_ipv4_list, uint32_t *filled);
-
-/** Clear ARP Offload statistics in Device (WLAN)
- *
- * @param[in]    ifp        : pointer to handle instance of whd interface
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_stats_clear(whd_interface_t ifp);
-
-/** Get ARP Offload statistics from Device (WLAN)
- *
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[out]   stats      : Ptr to store statistics whd_arp_stats_t
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_stats_get(whd_interface_t ifp, whd_arp_stats_t *stats);
-
-/** Print ARP Offload statistics
- *  NOTE: call whd_arp_stats_get(), then print them using this function.
- *
- * @param[in]    arp_stats  : Ptr to ARP statistics structure
- * @param[in]    title      : Optional: Title for output (NULL == no title)
- *
- * @return whd_result_t
- */
-whd_result_t whd_arp_stats_print(whd_arp_stats_t *arp_stats, const char *title);
-
-/** A filter must be added (e.g. created) before it can be enabled.
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[in]    settings   : Ptr to filter settings @ref whd_packet_filter_t
- * @return whd_result_t
- */
-whd_result_t whd_pf_add_packet_filter(whd_interface_t ifp, const whd_packet_filter_t *settings);
-
-/** Remove a previously added filter.
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[in]    filter_id  : filter to remove
- * @return whd_result_t
- */
-whd_result_t whd_pf_remove_packet_filter(whd_interface_t ifp, uint8_t filter_id);
-
-/** After a filter has been added it can be enabled or disabled as needed.
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[in]    filter_id  : filter to enable
- * @return whd_result_t
- */
-whd_result_t whd_pf_enable_packet_filter(whd_interface_t ifp, uint8_t filter_id);
-
-/** After a filter has been added it can be enabled or disabled as needed.
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[in]    filter_id  : filter to disable
- * @return whd_result_t
- */
-whd_result_t whd_pf_disable_packet_filter(whd_interface_t ifp, uint8_t filter_id);
-
-/** After a filter has been added it can be enabled or disabled as needed.
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[in]    filter_id  : filter to disable/enable
- * @param[in]    enable     : Enable/Disable Flag
- * @return whd_result_t
- */
-whd_result_t whd_wifi_toggle_packet_filter(whd_interface_t ifp, uint8_t filter_id, whd_bool_t enable);
-
-/** Filters are implemented in WLAN subsystem as a bit pattern and matching bit mask that
- *  are applied to incoming packets.  This API retrieves the pattern and mask.
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[in]    filter_id  : which filter to retrieve
- * @param[in]    max_size   : size of both mask and pattern buffers
- * @param[out]   mask       : mask for this filter
- * @param[out]   pattern    : pattern for this filter
- * @param[out]   size_out   : length of both mask and pattern
- * @return whd_result_t
- */
-whd_result_t whd_pf_get_packet_filter_mask_and_pattern(whd_interface_t ifp, uint8_t filter_id, uint32_t max_size,
-                                                       uint8_t *mask,
-                                                       uint8_t *pattern, uint32_t *size_out);
-
-/** Clear the packet filter stats associated with a filter id
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[in]    filter_id  : which filter
- * @return whd_result_t
- */
-whd_result_t whd_wifi_clear_packet_filter_stats(whd_interface_t ifp, uint32_t filter_id);
-
-/** Return the stats associated with a filter
- * @param[in]    ifp        : pointer to handle instance of whd interface
- * @param[in]    filter_id  : which filter
- * @param[out]   stats      : Ptr to store statistics wl_pkt_filter_stats_t
- * @return whd_result_t
- */
-whd_result_t whd_pf_get_packet_filter_stats(whd_interface_t ifp, uint8_t filter_id, whd_pkt_filter_stats_t *stats);
-
-/** Set/Get TKO retry & interval parameters
- * @param[in]    ifp            : Pointer to handle instance of whd interface
- * @param[in]    whd_tko_retry  : whd retry & interval parameters structure
- * @param[in]    set            : Set/Get Flag
- * @return whd_result_t
- */
-whd_result_t whd_tko_param(whd_interface_t ifp, whd_tko_retry_t *whd_tko_retry, int set);
-
-/** Return the tko status for all indexes
- * @param[in]    ifp        : Pointer to handle instance of whd interface
- * @param[out]   tko_status : Ptr to store tko_status
- * @return whd_result_t
- */
-whd_result_t whd_tko_get_status(whd_interface_t ifp, whd_tko_status_t *tko_status);
-
-/** Return the stats associated with a filter
- * @param[in]    ifp        : Pointer to handle instance of whd interface
- * @param[out]   max        : returns Max TCP connections supported by WLAN Firmware
- * @return whd_result_t
- */
-whd_result_t whd_tko_max_assoc(whd_interface_t ifp, uint8_t *max);
-
-/** Return the stats associated with a filter
- * @param[in]    ifp          : Pointer to handle instance of whd interface
- * @param[in]    index        : index for TCP offload connection
- * @param[out]   whd_connect  : tko_connect structure buffer from Firmware
- * @param[in]    buflen       : Buffer given for tko_connect
- * @return whd_result_t
- */
-whd_result_t whd_tko_get_FW_connect(whd_interface_t ifp, uint8_t index, whd_tko_connect_t *whd_connect,
-                                    uint16_t buflen);
-
-/** Return the stats associated with a filter
- * @param[in]    ifp        : Pointer to handle instance of whd interface
- * @param[in]    enable     : Enable/Disable TCP Keepalive offload
- * @return whd_result_t
- */
-whd_result_t whd_tko_toggle(whd_interface_t ifp, whd_bool_t enable);
-
-
-/* @} */
-
-/** @addtogroup wifiioctl   WHD Wi-Fi IOCTL Set/Get API
- *  @ingroup wifi
- *  Set and get IOCTL values
- *  @{
- */
-/** Sends an IOCTL command - CDC_SET IOCTL value
- *
- *  @param  ifp            Pointer to handle instance of whd interface
- *  @param  ioctl          CDC_SET - To set the I/O control
- *  @param  value          Data value to be sent
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_set_ioctl_value(whd_interface_t ifp, uint32_t ioctl, uint32_t value);
-
-/** Sends an IOCTL command - CDC_GET IOCTL value
- *
- *  @param  ifp            Pointer to handle instance of whd interface
- *  @param  ioctl          CDC_GET - To get the I/O control
- *  @param  value          Pointer to receive the data value
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_get_ioctl_value(whd_interface_t ifp, uint32_t ioctl, uint32_t *value);
-
-/** Sends an IOCTL command - CDC_SET IOCTL buffer
- *
- *  @param  ifp            Pointer to handle instance of whd interface
- *  @param  ioctl          CDC_SET - To set the I/O control
- *  @param  buffer         Handle for a packet buffer containing the data value to be sent.
- *  @param  buffer_length  Length of buffer
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_set_ioctl_buffer(whd_interface_t ifp, uint32_t ioctl, void *buffer, uint16_t buffer_length);
-
-/** Sends an IOCTL command - CDC_GET IOCTL buffer
- *
- *  @param  ifp           Pointer to handle instance of whd interface
- *  @param  ioctl         CDC_GET - To get the I/O control
- *  @param  out_buffer    Pointer to receive the handle for the packet buffer containing the response data value received
- *  @param  out_length    Length of out_buffer
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_get_ioctl_buffer(whd_interface_t ifp, uint32_t ioctl, uint8_t *out_buffer,
-                                          uint16_t out_length);
-
-/** Sends an IOVAR command
- *
- *  @param  ifp           Pointer to handle instance of whd interface
- *  @param  iovar_name    SDPCM_GET - To get the I/O Variable
- *  @param  param         Paramater to be passed for the IOVAR
- *  @param  paramlen      Paramter length
- *  @param  out_buffer    Pointer to receive the handle for the packet buffer containing the response data value received
- *  @param  out_length    Length of out_buffer
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_get_iovar_buffer_with_param(whd_interface_t ifp, const char *iovar_name, void *param,
-                                                     uint32_t paramlen, uint8_t *out_buffer, uint32_t out_length);
-
-/* @} */
-
-/** @addtogroup dbg  WHD Wi-Fi Debug API
- *  @ingroup wifi
- *  WHD APIs which allows debugging like, printing whd log information, getting whd stats, etc.
- *  @{
- */
-/** Retrieves the WLAN firmware version
- *
- *  @param  ifp            Pointer to handle instance of whd interface
- *  @param  version        Pointer to a buffer that version information will be written to
- *  @param  length         Length of the buffer
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_get_wifi_version(whd_interface_t ifp, char *version, uint8_t length);
-
-/** Retrieves the WLAN CLM version
- *
- *  @param  ifp            Pointer to handle instance of whd interface
- *  @param  version        Pointer to a buffer that version information will be written to
- *  @param  length         Length of the buffer
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_get_clm_version(whd_interface_t ifp, char *version, uint8_t length);
-
-/** To print whd log information
- *
- *  @param  whd_drv        Pointer to handle instance of the driver
- *  @param  buffer         Buffer to store read log results
- *  @param  buffer_size    Variable to store size of the buffer
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_read_wlan_log(whd_driver_t whd_drv, char *buffer, uint32_t buffer_size);
-
-/** To print whd log information
- *
- *  @param  whd_drv        Pointer to handle instance of the driver
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_print_whd_log(whd_driver_t whd_drv);
-
-/** Retrieves the ifidx from interface pointer.
- *  ifidx is a unique value and be used to identify a instance of tcp/ip stack
- *
- *  @param  ifp           Pointer to the whd_interface_t
- *  @param  ifidx         Pointer to ifidx
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_network_get_ifidx_from_ifp(whd_interface_t ifp, uint8_t *ifidx);
-
-/** Retrieves the bsscfgidx from interface pointer.
- *
- *  Can be used to send IOCTL with requires bsscfgidx
- *
- *  @param  ifp           Pointer to handle instance of whd interface
- *  @param  bsscfgidx     Pointer to bsscfgidx
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_network_get_bsscfgidx_from_ifp(whd_interface_t ifp, uint8_t *bsscfgidx);
-
-
-/** Retrives the bss info
- *
- *  @param  ifp                  Pointer to handle instance of whd interface
- *  @param  bi                   A pointer to the structure wl_bss_info_t
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_get_bss_info(whd_interface_t ifp, wl_bss_info_t *bi);
-
-/** Prints WHD stats
- *
- *  @param  whd_drv              Pointer to handle instance of the driver
- *  @param  reset_after_print    Bool variable to decide if whd_stats to be reset
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_print_stats(whd_driver_t whd_drv, whd_bool_t reset_after_print);
-
-/* @} */
-/* @} */
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-#endif /* ifndef INCLUDED_WHD_WIFI_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cy_network_buffer.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cy_network_buffer.c
deleted file mode 100644
index 1446fae34c..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cy_network_buffer.c
+++ /dev/null
@@ -1,114 +0,0 @@
-/***************************************************************************//**
-* \file cy_network_buffer.c
-*
-* \brief
-* Basic set of APIs for dealing with network packet buffers. This is used by WHD
-* for relaying data between the network stack and the connectivity chip.
-*
-********************************************************************************
-* \copyright
-* Copyright 2018-2019 Cypress Semiconductor Corporation
-* SPDX-License-Identifier: Apache-2.0
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-*     http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*******************************************************************************/
-
-#if 1
-
-#include <stdlib.h>
-#include "cy_network_buffer.h"
-#include "cy_utils.h"
-#include "lwip/memp.h"
-#include "whd_bus_protocol_interface.h"
-
-#define  SDIO_BLOCK_SIZE (64U)
-
-whd_result_t cy_host_buffer_get(whd_buffer_t *buffer, whd_buffer_dir_t direction, unsigned short size, unsigned long timeout_ms)
-{
-    UNUSED_PARAMETER( direction );
-    UNUSED_PARAMETER( timeout_ms );
-    struct pbuf *p = NULL;
-    if ( ( direction == WHD_NETWORK_TX) && ( size <= PBUF_POOL_BUFSIZE ) )
-    {
-    	p = pbuf_alloc(PBUF_RAW, size, PBUF_POOL);
-    }
-    else
-    {
-    	p = pbuf_alloc(PBUF_RAW, size+SDIO_BLOCK_SIZE, PBUF_RAM);
-    	if ( p != NULL )
-    	{
-    	    p->len = size;
-    	    p->tot_len -=  SDIO_BLOCK_SIZE;
-    	}
-    }
-    if (p != NULL )
-    {
-        *buffer = p;
-    	return WHD_SUCCESS;
-    }
-    else
-    {
-        return WHD_BUFFER_ALLOC_FAIL;
-    }
-}
-
-void cy_buffer_release(whd_buffer_t buffer, whd_buffer_dir_t direction)
-{
-    UNUSED_PARAMETER( direction );
-    (void) pbuf_free( (struct pbuf *)buffer );
-}
-
-uint8_t *cy_buffer_get_current_piece_data_pointer(whd_buffer_t buffer)
-{
-    CY_ASSERT(buffer != NULL);
-    struct pbuf *pbuffer= (struct pbuf*) buffer;
-    return (uint8_t*) pbuffer->payload;
-}
-
-uint16_t cy_buffer_get_current_piece_size(whd_buffer_t buffer)
-{
-    CY_ASSERT(buffer != NULL);
-    struct pbuf *pbuffer = (struct pbuf*) buffer;
-    return (uint16_t) pbuffer->len;
-}
-
-whd_result_t cy_buffer_set_size(whd_buffer_t buffer, unsigned short size)
-{
-    CY_ASSERT(buffer != NULL);
-    struct pbuf * pbuffer = (struct pbuf *) buffer;
-
-    if ( size > (unsigned short) WHD_LINK_MTU  + LWIP_MEM_ALIGN_SIZE(LWIP_MEM_ALIGN_SIZE(sizeof(struct pbuf))) + LWIP_MEM_ALIGN_SIZE(size) )
-    {
-        return WHD_PMK_WRONG_LENGTH;
-    }
-
-    pbuffer->tot_len = size;
-    pbuffer->len = size;
-
-    return CY_RSLT_SUCCESS;
-}
-
-whd_result_t cy_buffer_add_remove_at_front(whd_buffer_t *buffer, int32_t add_remove_amount)
-{
-    CY_ASSERT(buffer != NULL);
-    struct pbuf **pbuffer = (struct pbuf**) buffer;
-
-    if ( (u8_t) 0 != pbuf_header( *pbuffer, ( s16_t )( -add_remove_amount ) ) )
-    {
-        return WHD_PMK_WRONG_LENGTH;
-    }
-
-    return WHD_SUCCESS;
-}
-
-#endif /* defined(CYBSP_WIFI_CAPABLE) */
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cy_network_buffer.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cy_network_buffer.h
deleted file mode 100644
index 44f3872498..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cy_network_buffer.h
+++ /dev/null
@@ -1,185 +0,0 @@
-/***************************************************************************//**
-* \file cy_network_buffer.h
-*
-* \brief
-* Basic set of APIs for dealing with network packet buffers. This is used by WHD
-* for relaying data between the network stack and the connectivity chip.
-*
-********************************************************************************
-* \copyright
-* Copyright 2018-2019 Cypress Semiconductor Corporation
-* SPDX-License-Identifier: Apache-2.0
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-*     http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*******************************************************************************/
-
-/**
-* \addtogroup group_bsp_network_buffer Buffer management
-* \{
-* Basic set of APIs for dealing with network packet buffers
-*
-* \defgroup group_bsp_network_buffer_functions Functions
-*/
-
-#ifndef __CY_NETWORK_BUFFER_H__
-#define __CY_NETWORK_BUFFER_H__
-
-#if 1
-
-#include <stdint.h>
-#include <stdbool.h>
-#include "cy_result.h"
-#include "whd.h"
-#include "whd_network_types.h"
-#include "lwip/pbuf.h"
-
-#if defined(__cplusplus)
-extern "C" {
-#endif
-
-
-/**
-* \addtogroup group_bsp_network_buffer_functions
-* \{
-*/
-
-/** Allocates a packet buffer
- *
- *  Attempts to allocate a packet buffer of the size requested. It can do this
- *  by allocating a pre-existing packet from a pool, using a static buffer,
- *  or by dynamically allocating memory. The method of allocation does not
- *  concern WHD, however it must match the way the network stack expects packet
- *  buffers to be allocated. Usually WHD requires packet of size of WHD_LINK_MTU
- *  which includes the MTU. Refer to whd_types.h to find the size of WHD_LINK_MTU.
- *
- *  @param buffer    : A pointer which receives the allocated packet buffer handle
- *  @param direction : Indicates transmit/receive direction that the packet buffer is
- *                    used for. This may be needed if tx/rx pools are separate.
- *  @param size      : The number of bytes to allocate.
- *  @param timeout_ms: Time to wait for a packet buffer to be available
- *
- *  @return          : CY_RSLT_SUCCESS or WHD_BUFFER_ALLOC_FAIL if the buffer could not be allocated
- */
-whd_result_t cy_host_buffer_get(whd_buffer_t *buffer, whd_buffer_dir_t direction, unsigned short size, unsigned long timeout_ms);
-
-/** Releases a packet buffer
- *
- *  This function is used by WHD to indicate that it no longer requires
- *  a packet buffer. The buffer can then be released back into a pool for
- *  reuse, or the dynamically allocated memory can be freed, according to
- *  how the packet was allocated.
- *  Returns void since WHD cannot do anything about failures
- *
- *  @param buffer    : The handle of the packet buffer to be released
- *  @param direction : Indicates transmit/receive direction that the packet buffer has
- *                     been used for. This might be needed if tx/rx pools are separate.
- */
-void cy_buffer_release(whd_buffer_t buffer, whd_buffer_dir_t direction);
-
-/** Retrieves the current pointer of a packet buffer
- *
- *  Since packet buffers usually need to be created with space at the
- *  front for additional headers, this function allows WHD to get
- *  the current 'front' location pointer.
- *
- *  @param buffer : The handle of the packet buffer whose pointer is to be retrieved
- *
- *  @return       : The packet buffer's current pointer.
- */
-uint8_t *cy_buffer_get_current_piece_data_pointer(whd_buffer_t buffer);
-
-/** Retrieves the size of a packet buffer
- *
- *  Since packet buffers usually need to be created with space at the
- *  front for additional headers, the memory block used to contain a packet buffer
- *  will often be larger than the current size of the packet buffer data.
- *  This function allows WHD to retrieve the current size of a packet buffer's data.
- *
- *  @param buffer : The handle of the packet buffer whose size is to be retrieved
- *
- *  @return       :  The size of the packet buffer.
- */
-uint16_t cy_buffer_get_current_piece_size(whd_buffer_t buffer);
-
-/** Sets the current size of a WHD packet
- *
- *  This function sets the current length of a WHD packet buffer
- *
- *  @param buffer : The packet to be modified
- *  @param size   : The new size of the packet buffer
- *
- *  @return       : CY_RSLT_SUCCESS or WHD_PMK_WRONG_LENGTH if the requested size is not valid
- */
-whd_result_t cy_buffer_set_size(whd_buffer_t buffer, unsigned short size);
-
-/** Moves the current pointer of a packet buffer
- *
- *  Since packet buffers usually need to be created with space at the front for additional headers,
- *  this function allows WHD to move the current 'front' location pointer so that it has space to
- *  add headers to transmit packets, and so that the network stack does not see the internal WHD
- *  headers on received packets.
- *
- *  @param buffer            : A pointer to the handle of the current packet buffer for which the
- *                             current pointer will be moved. On return this may contain a pointer
- *                             to a newly allocated packet buffer which has been daisy chained to
- *                             the front of the given one. This would be the case if the given packet
- *                             buffer  didn't have enough space at the front.
- *  @param add_remove_amount : This is the number of bytes to move the current pointer of the packet
- *                             buffer - a negative value increases the space for headers at the front
- *                             of the packet, a positive value decreases the space.
- *
- *  @return                  : CY_RSLT_SUCCESS or WHD_PMK_WRONG_LENGTH if the added amount is outside 
- *                             the size of the buffer
- */
-whd_result_t cy_buffer_add_remove_at_front(whd_buffer_t *buffer, int32_t add_remove_amount);
-
-
-/** Called by WHD to pass received data to the network stack
- *
- *  Packets received from the Wi-Fi network by WHD are forwarded to by calling function ptr which
- *  must be implemented in the network interface. Ethernet headers
- *  are present at the start of these packet buffers.
- *
- *  This function is called asynchronously in the context of the
- *  WHD thread whenever new data has arrived.
- *  Packet buffers are allocated within WHD, and ownership is transferred
- *  to the network stack. The network stack or application is thus
- *  responsible for releasing the packet buffers.
- *  Most packet buffering systems have a pointer to the 'current point' within
- *  the packet buffer. When this function is called, the pointer points
- *  to the start of the Ethernet header. There is other inconsequential data
- *  before the Ethernet header.
- *
- *  It is preferable that the (whd_network_process_ethernet_data)() function simply puts
- *  the received packet on a queue for processing by another thread. This avoids the
- *  WHD thread being unnecessarily tied up which would delay other packets
- *  being transmitted or received.
- *
- *  @param interface : The interface on which the packet was received.
- *  @param buffer    : Handle of the packet which has just been received. Responsibility for
- *                    releasing this buffer is transferred from WHD at this point.
- *
- */
-void cy_network_process_ethernet_data(whd_interface_t interface, whd_buffer_t buffer);
-
-/** \} group_bsp_network_buffer_functions */
-
-#ifdef __cplusplus
-}
-#endif /* __cplusplus */
-
-#endif /* defined(CYBSP_WIFI_CAPABLE) */
-
-/** \} group_bsp_network_buffer */
-
-#endif // __CY_NETWORK_BUFFER_H__
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cy_result.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cy_result.h
index 40b21b0f43..8277169ab9 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cy_result.h
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cy_result.h
@@ -8,7 +8,7 @@
 *
 ********************************************************************************
 * \copyright
-* Copyright 2018-2019 Cypress Semiconductor Corporation
+* Copyright 2018-2020 Cypress Semiconductor Corporation
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
@@ -25,17 +25,30 @@
 *******************************************************************************/
 
 /**
- * \addtogroup group_result Result Type
- * \ingroup group_abstraction
- * \{
- * Basic function result handling. Defines a simple type for conveying
- * information about whether something succeeded or details about any issues
- * that were detected.
- *
- * \defgroup group_result_macros Macros
- */
-
-#pragma once
+* \addtogroup group_result Result Type
+* \ingroup group_abstraction
+* \{
+* \anchor anchor_general_description
+* \brief Defines a type and related utilities for function result handling.
+*
+* The @ref cy_rslt_t type is a structured bitfield which encodes information
+* about result type, the originating module, and a code for the specific
+* error (or warning etc). In order to extract these individual fields from
+* a @ref cy_rslt_t value, the utility macros @ref CY_RSLT_GET_TYPE, @ref CY_RSLT_GET_MODULE,
+* and @ref CY_RSLT_GET_CODE are provided. For example:
+* \code
+* cy_rslt_t result = cy_hal_do_operation(arg);
+* // Will be CY_RSLT_TYPE_INFO, CY_RSLT_TYPE_WARNING, CY_RSLT_TYPE_ERROR, or CY_RSLT_TYPE_FATAL
+* uint8_t type = CY_RSLT_GET_TYPE(result)
+* // See the "Modules" section for possible values
+* uint16_t module_id = CY_RSLT_GET_MODULE(result);
+* // Specific error codes are defined by each module
+* uint16_t error_code = CY_RSLT_GET_CODE(result);
+* \endcode
+*/
+
+#if !defined(CY_RESULT_H)
+#define CY_RESULT_H
 
 #include <stdint.h>
 
@@ -44,17 +57,20 @@ extern "C" {
 #endif
 
 /**
- * \addtogroup group_result_macros
- * \{
- */
+  * @brief Provides the result of an operation as a structured bitfield.
+  *
+  * See the \ref anchor_general_description "General Description"
+  * for more details on structure and usage.
+  */
+typedef uint32_t cy_rslt_t;
+
+/** @ref cy_rslt_t return value indicating success */
+#define CY_RSLT_SUCCESS                    ((cy_rslt_t)0x00000000U)
 
+/** \cond INTERNAL */
 /** Mask for the bit at position "x" */
-#define CY_BIT_MASK(x)                     ( (1U << (x) ) - 1U )
+#define CY_BIT_MASK(x)                     ((1UL << (x)) - 1U)
 
-/** Bit position of the result code */
-#define CY_RSLT_CODE_POSITION              (0U)
-/** Bit width of the result code */
-#define CY_RSLT_CODE_WIDTH                 (16U)
 /** Bit position of the result type */
 #define CY_RSLT_TYPE_POSITION              (16U)
 /** Bit width of the result type */
@@ -63,73 +79,150 @@ extern "C" {
 #define CY_RSLT_MODULE_POSITION            (18U)
 /** Bit width of the module identifier */
 #define CY_RSLT_MODULE_WIDTH               (14U)
+/** Bit position of the result code */
+#define CY_RSLT_CODE_POSITION              (0U)
+/** Bit width of the result code */
+#define CY_RSLT_CODE_WIDTH                 (16U)
 
-/** Mask for the result code */
-#define CY_RSLT_CODE_MASK                  CY_BIT_MASK(CY_RSLT_CODE_WIDTH)
-/** Mask for the module identifier */
-#define CY_RSLT_MODULE_MASK                CY_BIT_MASK(CY_RSLT_MODULE_WIDTH)
 /** Mask for the result type */
 #define CY_RSLT_TYPE_MASK                  CY_BIT_MASK(CY_RSLT_TYPE_WIDTH)
+/** Mask for the module identifier */
+#define CY_RSLT_MODULE_MASK                CY_BIT_MASK(CY_RSLT_MODULE_WIDTH)
+/** Mask for the result code */
+#define CY_RSLT_CODE_MASK                  CY_BIT_MASK(CY_RSLT_CODE_WIDTH)
 
-/** Informational-only result status */
+/** \endcond */
+
+/**
+* \{
+* @name Fields
+* Utility macros for constructing result values and extracting individual fields from existing results.
+*/
+
+/**
+  * @brief Get the value of the result type field
+  * @param x the @ref cy_rslt_t value from which to extract the result type
+  */
+#define CY_RSLT_GET_TYPE(x)                (((x) >> CY_RSLT_TYPE_POSITION) & CY_RSLT_TYPE_MASK)
+/**
+  * @brief Get the value of the module identifier field
+  * @param x the @ref cy_rslt_t value from which to extract the module id
+  */
+#define CY_RSLT_GET_MODULE(x)              (((x) >> CY_RSLT_MODULE_POSITION) & CY_RSLT_MODULE_MASK)
+/**
+  * @brief Get the value of the result code field
+  * @param x the @ref cy_rslt_t value from which to extract the result code
+  */
+#define CY_RSLT_GET_CODE(x)                (((x) >> CY_RSLT_CODE_POSITION) & CY_RSLT_CODE_MASK)
+
+/**
+  * @brief Create a new @ref cy_rslt_t value that encodes the specified type, module, and result code.
+  * @param type one of @ref CY_RSLT_TYPE_INFO, @ref CY_RSLT_TYPE_WARNING,
+  *  @ref CY_RSLT_TYPE_ERROR, @ref CY_RSLT_TYPE_FATAL
+  * @param module Identifies the module where this result originated; see @ref anchor_modules "Modules".
+  * @param code a module-defined identifier to identify the specific situation that
+  * this result describes.
+  */
+#define CY_RSLT_CREATE(type, module, code) \
+    ((((module) & CY_RSLT_MODULE_MASK) << CY_RSLT_MODULE_POSITION) | \
+    (((code) & CY_RSLT_CODE_MASK) << CY_RSLT_CODE_POSITION) | \
+    (((type) & CY_RSLT_TYPE_MASK) << CY_RSLT_TYPE_POSITION))
+
+/** \} fields */
+
+/**
+* \{
+* @name Result Types
+* Defines codes to identify the type of result.
+*/
+
+/** @brief The result code is informational-only */
 #define CY_RSLT_TYPE_INFO                  (0U)
-/** Warning result */
+/** @brief The result code is warning of a problem but will proceed */
 #define CY_RSLT_TYPE_WARNING               (1U)
-/** Error result */
+/** @brief The result code is an error */
 #define CY_RSLT_TYPE_ERROR                 (2U)
-/** Fatal error result */
+/** @brief The result code is a fatal error */
 #define CY_RSLT_TYPE_FATAL                 (3U)
 
-/** Get the value of the result code field */
-#define CY_RSLT_GET_CODE(x)                ( ( (x) >> CY_RSLT_CODE_POSITION ) & CY_RSLT_CODE_MASK )
-/** Get the value of the result type field */
-#define CY_RSLT_GET_TYPE(x)                ( ( (x) >> CY_RSLT_TYPE_POSITION ) & CY_RSLT_TYPE_MASK )
-/** Get the value of the module identifier field */
-#define CY_RSLT_GET_MODULE(x)              ( ( (x) >> CY_RSLT_MODULE_POSITION ) & CY_RSLT_MODULE_MASK )
-
+/** \} severity */
 
+/**
+* \{
+* @name Modules
+* @anchor anchor_modules
+* Defines codes to identify the module from which an error originated.
+* For some large libraries, a range of module codes is defined here;
+* see the library documentation for values corresponding to individual modules.
+* Valid range is 0x0000-0x4000.
+*/
 /**** DRIVER Module codes: 0x0000 - 0x00FF ****/
-/** Base identifier for peripheral driver library */
-#define CY_RSLT_MODULE_DRIVERS_PDL_BASE           (0x0000U)
-/** Base identifier for peripheral driver library */
-#define CY_RSLT_MODULE_DRIVERS_WHD_BASE           (0x0080U)
-
-/**** ABSTRACTION Module codes: 0x0100 - 0x01FF ****/
-/** Base identifier for chip support modules */
-#define CY_RSLT_MODULE_ABSTRACTION_HAL_BASE       (0x0100U)
-/** Base identifier for board support modules */
-#define CY_RSLT_MODULE_ABSTRACTION_BSP            (0x0180U)
-/** Base identifier for file system modules */
-#define CY_RSLT_MODULE_ABSTRACTION_FS             (0x0181U)
-/** Base identifier for resource abstraction modules */
-#define CY_RSLT_MODULE_ABSTRACTION_RESOURCE       (0x0182U)
-/** Base identifier for rtos abstraction modules */
-#define CY_RSLT_MODULE_ABSTRACTION_OS             (0x0183U)
-/** Base identifier for environment abstraction modules */
-#define CY_RSLT_MODULE_ABSTRACTION_ENV            (0x0184U)
-
-/**** Middleware Module codes: 0x0200 - 0x02FF ****/
-#define CY_RSLT_MODULE_MIDDLEWARE_BASE            (0x0200U)
-
-
-
-/** Provides the result of an operation as a structured bitfield */
-typedef uint32_t cy_rslt_t;
-
-/** Result value indicating success */
-#define CY_RSLT_SUCCESS                    ( (cy_rslt_t)0x00000000U )
-
-/** Create a result value from the specified type, module, and result code */
-#define CY_RSLT_CREATE(type, module, code) \
-    ( ( ( (module) & CY_RSLT_MODULE_MASK ) << CY_RSLT_MODULE_POSITION ) | \
-      ( ( (code) & CY_RSLT_CODE_MASK ) << CY_RSLT_CODE_POSITION ) | \
-      ( ( (type) & CY_RSLT_TYPE_MASK ) << CY_RSLT_TYPE_POSITION ) )
-
-/** \} group_result_macros */
+/** Base module identifier for peripheral driver library drivers (0x0000 - 0x007F) */
+#define CY_RSLT_MODULE_DRIVERS_PDL_BASE             (0x0000U)
+/** Base module identifier for wireless host driver library modules (0x0080 - 0x00FF) */
+#define CY_RSLT_MODULE_DRIVERS_WHD_BASE             (0x0080U)
+
+/** Deprecated. Use \ref CY_RSLT_MODULE_ABSTRACTION_HAL */
+#define CY_RSLT_MODULE_ABSTRACTION_HAL_BASE         (0x0100U)
+/** Module identifier for the Hardware Abstraction Layer */
+#define CY_RSLT_MODULE_ABSTRACTION_HAL              (0x0100U)
+/** Module identifier for board support package */
+#define CY_RSLT_MODULE_ABSTRACTION_BSP              (0x0180U)
+/** Module identifier for file system abstraction */
+#define CY_RSLT_MODULE_ABSTRACTION_FS               (0x0181U)
+/** Module identifier for resource abstraction */
+#define CY_RSLT_MODULE_ABSTRACTION_RESOURCE         (0x0182U)
+/** Module identifier for rtos abstraction */
+#define CY_RSLT_MODULE_ABSTRACTION_OS               (0x0183U)
+/** Base identifier for environment abstraction modules (0x0184 - 0x01FF) */
+#define CY_RSLT_MODULE_ABSTRACTION_ENV              (0x0184U)
+
+/** Base module identifier for Board Libraries (0x01A0 - 0x01BF) */
+#define CY_RSLT_MODULE_BOARD_LIB_BASE               (0x01A0U)
+/** Module identifier for the Retarget IO Board Library */
+#define CY_RSLT_MODULE_BOARD_LIB_RETARGET_IO        (0x1A0U)
+/** Module identifier for the RGB LED Board Library */
+#define CY_RSLT_MODULE_BOARD_LIB_RGB_LED            (0x01A1U)
+/** Module identifier for the Serial Flash Board Library */
+#define CY_RSLT_MODULE_BOARD_LIB_SERIAL_FLASH       (0x01A2U)
+/** Module identifier for the WiFi Host Driver + Board Support Integration Library */
+#define CY_RSLT_MODULE_BOARD_LIB_WHD_INTEGRATION    (0x01A3U)
+
+/** Base module identifier for Shield Board Libraries (0x01B8 - 0x01BF) */
+#define CY_RSLT_MODULE_BOARD_SHIELD_BASE            (0x01B8U)
+/** Module identifier for Shield Board CY8CKIT-028-EPD */
+#define CY_RSLT_MODULE_BOARD_SHIELD_028_EPD         (0x01B8U)
+/** Module identifier for Shield Board CY8CKIT-028-TFT */
+#define CY_RSLT_MODULE_BOARD_SHIELD_028_TFT         (0x01B9U)
+/** Module identifier for Shield Board CY8CKIT-032 */
+#define CY_RSLT_MODULE_BOARD_SHIELD_032             (0x01BAU)
+
+/** Base module identifier for Board Hardware Libraries (0x01C0 - 0x01FF) */
+#define CY_RSLT_MODULE_BOARD_HARDWARE_BASE          (0x01C0U)
+/** Module identifier for the BMI160 Motion Sensor Library */
+#define CY_RSLT_MODULE_BOARD_HARDWARE_BMI160        (0x01C0U)
+/** Module identifier for the E2271CS021 E-Ink Controller Library */
+#define CY_RSLT_MODULE_BOARD_HARDWARE_E2271CS021    (0x01C1U)
+/** Module identifier for the NTC GPIO Thermistor Library */
+#define CY_RSLT_MODULE_BOARD_HARDWARE_THERMISTOR    (0x01C2U)
+/** Module identifier for the SSD1306 OLED Controller Library */
+#define CY_RSLT_MODULE_BOARD_HARDWARE_SSD1306       (0x01C3U)
+/** Module identifier for the ST7789V TFT Controller Library */
+#define CY_RSLT_MODULE_BOARD_HARDWARE_ST7789V       (0x01C4U)
+/** Module identifier for the Light Sensor Library */
+#define CY_RSLT_MODULE_BOARD_HARDWARE_LIGHT_SENSOR  (0x01C5U)
+/** Module identifier for the AK4954A Audio Codec Library */
+#define CY_RSLT_MODULE_BOARD_HARDWARE_AK4954A       (0x01C6U)
+
+/** Base module identifier for Middleware Libraries (0x0200 - 0x02FF) */
+#define CY_RSLT_MODULE_MIDDLEWARE_BASE              (0x0200U)
+
+/** \} modules */
 
 #ifdef __cplusplus
 }
 #endif
 
-/** \} group_result */
+#endif /* CY_RESULT_H */
 
+/** \} group_result */
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyabs_rtos.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyabs_rtos.h
index b92a800dfd..e19ffc49f7 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyabs_rtos.h
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyabs_rtos.h
@@ -9,7 +9,7 @@
 *
 ********************************************************************************
 * \copyright
-* Copyright 2018-2019 Cypress Semiconductor Corporation
+* Copyright 2018-2020 Cypress Semiconductor Corporation
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
@@ -32,15 +32,23 @@
 #include "cy_result.h"
 #include <stdint.h>
 #include <stdbool.h>
+#include <stddef.h>
 
 /**
-* \defgroup group_abstraction_rtos_common Common 
+* \defgroup group_abstraction_rtos_common Common
+ * General types and defines for working with the RTOS abstraction layer.
 * \defgroup group_abstraction_rtos_mutex Mutex
+ * APIs for acquiring and working with Mutexes.
 * \defgroup group_abstraction_rtos_queue Queue
+ * APIs for creating and working with Queues.
 * \defgroup group_abstraction_rtos_semaphore Semaphore
-* \defgroup group_abstraction_rtos_threads Threading
+ * APIs for acquiring and working with Semaphores.
+* \defgroup group_abstraction_rtos_threads Threads
+ * APIs for creating and working with Threads.
 * \defgroup group_abstraction_rtos_time Time
+ * APIs for getting the current time and waiting.
 * \defgroup group_abstraction_rtos_timer Timer
+ * APIs for creating and working with Timers.
 */
 
 #ifdef __cplusplus
@@ -50,10 +58,17 @@ extern "C"
 
 /*********************************************** CONSTANTS **********************************************/
 
-/** 
-  * \ingroup group_abstraction_rtos_common  
-  * \{
-  */
+/**
+ * \ingroup group_abstraction_rtos_common
+ * \{
+ */
+
+#if defined(DOXYGEN)
+//#include "Template/cyabs_rtos_impl.h"
+
+/** Return value indicating success */
+#define CY_RSLT_SUCCESS                    ((cy_rslt_t)0x00000000U)
+#endif
 
 /** Used with RTOS calls that require a timeout.  This implies the call will never timeout. */
 #define CY_RTOS_NEVER_TIMEOUT ( (uint32_t)0xffffffffUL )
@@ -61,8 +76,8 @@ extern "C"
 //
 // Note on error strategy.  If the error is a normal part of operation (timeouts, full queues, empty
 // queues), the these errors are listed here and the abstraction layer implementation must map from the
-// underlying errors to these.  If the errors are special cases, the the error CY_RTOS_GENERAL_ERROR can be
-// returns and cy_rtos_last_error() used to retrieve the RTOS specific error message.
+// underlying errors to these.  If the errors are special cases, the the error \ref CY_RTOS_GENERAL_ERROR
+// will be returned and \ref cy_rtos_last_error() can be used to retrieve the RTOS specific error message.
 //
 /** Requested operation did not complete in the specified time */
 #define CY_RTOS_TIMEOUT                     CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_ABSTRACTION_OS, 0)
@@ -72,15 +87,15 @@ extern "C"
 #define CY_RTOS_GENERAL_ERROR               CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_ABSTRACTION_OS, 2)
 /** A bad argument was passed into the APIs */
 #define CY_RTOS_BAD_PARAM                   CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_ABSTRACTION_OS, 5)
-/** A memory alignment issue was detected. Ensure memory provided is aligned per CY_RTOS_ALIGNMENT */
+/** A memory alignment issue was detected. Ensure memory provided is aligned per \ref CY_RTOS_ALIGNMENT_MASK */
 #define CY_RTOS_ALIGNMENT_ERROR             CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_ABSTRACTION_OS, 6)
 
 /** \} group_abstraction_rtos_common */
 
 /**
-  * \ingroup group_abstraction_rtos_queue
-  * \{
-  */
+ * \ingroup group_abstraction_rtos_queue
+ * \{
+ */
 
 /** The Queue is already full and can't accept any more items at this time */
 #define CY_RTOS_QUEUE_FULL                  CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_ABSTRACTION_OS, 3)
@@ -93,7 +108,7 @@ extern "C"
 
 /**
  * The state a thread can be in
- * 
+ *
  * \ingroup group_abstraction_rtos_threads
  */
 typedef enum cy_thread_state
@@ -108,29 +123,29 @@ typedef enum cy_thread_state
 
 /**
  * The type of timer
- * 
+ *
  * \ingroup group_abstraction_rtos_timer
  */
 typedef enum cy_timer_trigger_type
 {
     CY_TIMER_TYPE_PERIODIC,                             /**< called periodically until stopped */
     CY_TIMER_TYPE_ONCE,                                 /**< called once only */
-    cy_timer_type_periodic = CY_TIMER_TYPE_PERIODIC,    /**< \deprecated replaced by CY_TIMER_TYPE_PERIODIC */
-    cy_timer_type_once = CY_TIMER_TYPE_ONCE,            /**< \deprecated replaced by CY_TIMER_TYPE_ONCE */
-} cy_timer_trigger_type_t ;
+    cy_timer_type_periodic = CY_TIMER_TYPE_PERIODIC,    /**< \deprecated replaced by \ref CY_TIMER_TYPE_PERIODIC */
+    cy_timer_type_once = CY_TIMER_TYPE_ONCE,            /**< \deprecated replaced by \ref CY_TIMER_TYPE_ONCE */
+} cy_timer_trigger_type_t;
 
 /**
  * The type of a function that is the entry point for a thread
  *
  * @param[in] arg the argument passed from the thread create call to the entry function
- * 
+ *
  * \ingroup group_abstraction_rtos_threads
  */
-typedef void (*cy_thread_entry_fn_t)(cy_thread_arg_t arg) ;
+typedef void (*cy_thread_entry_fn_t)(cy_thread_arg_t arg);
 
 /**
  * The callback function to be called by a timer
- * 
+ *
  * \ingroup group_abstraction_rtos_timer
  */
 typedef void (*cy_timer_callback_t)(cy_timer_callback_arg_t arg);
@@ -142,18 +157,17 @@ typedef void (*cy_timer_callback_t)(cy_timer_callback_arg_t arg);
  * results calling convention.  The underlying RTOS implementations will not but rather
  * will have their own error code conventions.  This function is provided as a service
  * to the developer, mostly for debugging, and returns the underlying RTOS error code
- * from the last RTOS abstraction layer that returned CY_RTOS_GENERAL_ERROR.
+ * from the last RTOS abstraction layer that returned \ref CY_RTOS_GENERAL_ERROR.
  *
  * @return RTOS specific error code.
- * 
+ *
  * \ingroup group_abstraction_rtos_common
  */
 cy_rtos_error_t cy_rtos_last_error();
 
 /*********************************************** Threads **********************************************/
 
-/*
- * 
+/**
  * \ingroup group_abstraction_rtos_threads
  * \{
  */
@@ -161,15 +175,15 @@ cy_rtos_error_t cy_rtos_last_error();
 /** Create a thread with specific thread argument.
  *
  * This function is called to startup a new thread. If the thread can exit, it must call
- * cy_rtos_finish_thread() just before doing so. All created threds that can terminate, either
- * by themselves or forcefully by another thread MUST be joined in order to cleanup any resources
- * that might have been allocated for them.
+ * \ref cy_rtos_exit_thread() just before doing so. All created threads that can terminate, either
+ * by themselves or forcefully by another thread MUST have \ref cy_rtos_join_thread() called on them
+ * by another thread in order to cleanup any resources that might have been allocated for them.
  *
  * @param[out] thread         Pointer to a variable which will receive the new thread handle
  * @param[in]  entry_function Function pointer which points to the main function for the new thread
  * @param[in]  name           String thread name used for a debugger
  * @param[in]  stack          The buffer to use for the thread stack. This must be aligned to
- *                            CY_RTOS_ALIGNMENT with a size of at least CY_RTOS_MIN_STACK_SIZE.
+ *                            \ref CY_RTOS_ALIGNMENT_MASK with a size of at least \ref CY_RTOS_MIN_STACK_SIZE.
  *                            If stack is null, cy_rtos_create_thread will allocate a stack from the heap.
  * @param[in]  stack_size     The size of the thread stack in bytes
  * @param[in]  priority       The priority of the thread. Values are operating system specific, but some
@@ -179,12 +193,11 @@ cy_rtos_error_t cy_rtos_last_error();
  *                                CY_THREAD_PRIORITY_HIGH
  * @param[in]  arg            The argument to pass to the new thread
  *
- * @return The status of thread create request. [CY_RSLT_SUCCESS, CY_RTOS_NO_MEMORY, CY_RTOS_GENERAL_ERROR]
+ * @return The status of thread create request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_create_thread(cy_thread_t *thread, cy_thread_entry_fn_t entry_function,
             const char *name, void *stack, uint32_t stack_size, cy_thread_priority_t priority, cy_thread_arg_t arg);
 
-
 /** Exit the current thread.
  *
  * This function is called just before a thread exits.  In some cases it is sufficient
@@ -193,26 +206,26 @@ cy_rslt_t cy_rtos_create_thread(cy_thread_t *thread, cy_thread_entry_fn_t entry_
  * where the RTOS must be signaled, this function should perform that In cases operation.
  * In code using RTOS services, this function should be placed at any at any location
  * where the main thread function will return, exiting the thread. Threads that can
- * exit must still be joined (cy_rtos_join_thread) to ensure their resources are fully
- * cleaned up.
+ * exit must still be joined (\ref cy_rtos_join_thread) to ensure their resources are
+ * fully cleaned up.
  *
- * @return The status of thread exit request. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @return The status of thread exit request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_exit_thread();
 
 /** Terminates another thread.
  *
- * This function is called to terminate another thread and reap the resoruces claimed
- * by it thread. This should be called both when forcibly terminating another thread
+ * This function is called to terminate another thread and reap the resources claimed
+ * by the thread. This should be called both when forcibly terminating another thread
  * as well as any time a thread can exit on its own. For some RTOS implementations
- * this is not required as the thread resoruces are claimed as soon as it exits. In
+ * this is not required as the thread resources are claimed as soon as it exits. In
  * other cases, this must be called to reclaim resources. Threads that are terminated
- * must still be joined (cy_rtos_join_thread) to ensure their resources are fully
+ * must still be joined (\ref cy_rtos_join_thread) to ensure their resources are fully
  * cleaned up.
  *
  * @param[in] thread Handle of the thread to terminate
  *
- * @returns The status of the thread terminate. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @returns The status of the thread terminate. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_terminate_thread(cy_thread_t *thread);
 
@@ -223,19 +236,19 @@ cy_rslt_t cy_rtos_terminate_thread(cy_thread_t *thread);
  *
  * @param[in] thread Handle of the thread to wait for
  *
- * @returns The status of thread join request. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @returns The status of thread join request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_join_thread(cy_thread_t *thread);
 
 /** Checks if the thread is running
  *
- * This function is called to determine if a thread is running or not. For information on
- * the thread state, use the cy_rtos_get_thread_state() function.
+ * This function is called to determine if a thread is actively running or not. For information on
+ * the thread state, use the \ref cy_rtos_get_thread_state() function.
  *
  * @param[in] thread     Handle of the terminated thread to delete
  * @param[out] running   Returns true if the thread is running, otherwise false
  *
- * @returns The status of the thread running check. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @returns The status of the thread running check. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_is_thread_running(cy_thread_t *thread, bool *running);
 
@@ -246,7 +259,7 @@ cy_rslt_t cy_rtos_is_thread_running(cy_thread_t *thread, bool *running);
  * @param[in] thread     Handle of the terminated thread to delete
  * @param[out] state     Returns the state the thread is currently in
  *
- * @returns The status of the thread state check. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @returns The status of the thread state check. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_get_thread_state(cy_thread_t *thread, cy_thread_state_t *state);
 
@@ -256,7 +269,7 @@ cy_rslt_t cy_rtos_get_thread_state(cy_thread_t *thread, cy_thread_state_t *state
  *
  * @param[out] thread Handle of the current running thread
  *
- * @returns The status of thread join request. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @returns The status of thread join request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_get_thread_handle(cy_thread_t *thread);
 
@@ -265,20 +278,38 @@ cy_rslt_t cy_rtos_get_thread_handle(cy_thread_t *thread);
 /*********************************************** Mutexes **********************************************/
 
 /**
-  * \ingroup group_abstraction_rtos_mutex
-  * \{
-  */
+ * \ingroup group_abstraction_rtos_mutex
+ * \{
+ */
 
-/** Create a mutex.
+/** Create a recursive mutex.
+ *
+ * Creates a binary mutex which can be used to synchronize between threads
+ * and between threads and ISRs. Created mutexes are recursive and support priority inheritance.
  *
- * This is basically a binary mutex which can be used to synchronize between threads
- * and between threads and ISRs.
+ * This function has been replaced by \ref cy_rtos_init_mutex2 which allow for specifying
+ * whether or not the mutex supports recursion or not.
  *
  * @param[out] mutex Pointer to the mutex handle to be initialized
  *
- * @return The status of mutex creation request. [CY_RSLT_SUCCESS, CY_RTOS_NO_MEMORY, CY_RTOS_GENERAL_ERROR]
+ * @return The status of mutex creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR]
  */
-cy_rslt_t cy_rtos_init_mutex(cy_mutex_t *mutex);
+#define cy_rtos_init_mutex(mutex) cy_rtos_init_mutex2(mutex, true)
+
+/** Create a mutex which can support recursion or not.
+ *
+ * Creates a binary mutex which can be used to synchronize between threads and between threads and
+ * ISRs. Created mutexes can support priority inheritance if recursive.
+ *
+ * \note Not all RTOS implementations support non-recursive mutexes. In this case a recursive
+ * mutex will be created.
+ *
+ * @param[out] mutex     Pointer to the mutex handle to be initialized
+ * @param[in]  recursive Should the created mutex support recursion or not
+ *
+ * @return The status of mutex creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR]
+ */
+cy_rslt_t cy_rtos_init_mutex2(cy_mutex_t *mutex, bool recursive);
 
 /** Get a mutex.
  *
@@ -290,22 +321,22 @@ cy_rslt_t cy_rtos_init_mutex(cy_mutex_t *mutex);
  *
  * @param[in] mutex       Pointer to the mutex handle
  * @param[in] timeout_ms  Maximum number of milliseconds to wait while attempting to get
- *                        the mutex. Use the NEVER_TIMEOUT constant to wait forever. Must
- *                        be zero is in_isr is true
+ *                        the mutex. Use the \ref CY_RTOS_NEVER_TIMEOUT constant to wait forever.
+ *                        Must be zero if in_isr is true.
  *
  * @return The status of the get mutex. Returns timeout if mutex was not acquired
- *                    before timeout_ms period. [CY_RSLT_SUCCESS, CY_RTOS_TIMEOUT]
+ *                    before timeout_ms period. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_TIMEOUT, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_get_mutex(cy_mutex_t *mutex, cy_time_t timeout_ms);
 
 /** Set a mutex.
  *
  * The mutex is released allowing any other threads waiting on the mutex to
- * obtain the sempahore.
+ * obtain the semaphore.
  *
  * @param[in] mutex   Pointer to the mutex handle
  *
- * @return The status of the set mutex request. [CY_RSLT_SUCCESS, CY_RTOS_TIMEOUT]
+ * @return The status of the set mutex request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  *
  */
 cy_rslt_t cy_rtos_set_mutex(cy_mutex_t *mutex);
@@ -316,7 +347,7 @@ cy_rslt_t cy_rtos_set_mutex(cy_mutex_t *mutex);
  *
  * @param[in] mutex Pointer to the mutex handle
  *
- * @return The status to the delete request. [CY_RSLT_SUCCESS, CY_RTOS_TIMEOUT]
+ * @return The status to the delete request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_deinit_mutex(cy_mutex_t *mutex);
 
@@ -325,9 +356,9 @@ cy_rslt_t cy_rtos_deinit_mutex(cy_mutex_t *mutex);
 /*********************************************** Semaphores **********************************************/
 
 /**
-  * \ingroup group_abstraction_rtos_semaphore
-  * \{
-  */
+ * \ingroup group_abstraction_rtos_semaphore
+ * \{
+ */
 
 /**
  * Create a semaphore
@@ -336,9 +367,9 @@ cy_rslt_t cy_rtos_deinit_mutex(cy_mutex_t *mutex);
  *
  * @param[in,out] semaphore  Pointer to the semaphore handle to be initialized
  * @param[in] maxcount       The maximum count for this semaphore
- * @param[in] initcount      The initial count for this sempahore
+ * @param[in] initcount      The initial count for this semaphore
  *
- * @return The status of the sempahore creation. [CY_RSLT_SUCCESS, CY_RTOS_NO_MEMORY, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the semaphore creation. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_init_semaphore(cy_semaphore_t *semaphore, uint32_t maxcount, uint32_t initcount);
 
@@ -351,10 +382,10 @@ cy_rslt_t cy_rtos_init_semaphore(cy_semaphore_t *semaphore, uint32_t maxcount, u
  *
  * @param[in] semaphore   Pointer to the semaphore handle
  * @param[in] timeout_ms  Maximum number of milliseconds to wait while attempting to get
- *                        the semaphore. Use the NEVER_TIMEOUT constant to wait forever. Must
+ *                        the semaphore. Use the \ref CY_RTOS_NEVER_TIMEOUT constant to wait forever. Must
  *                        be zero is in_isr is true
  * @param[in] in_isr      true if we are trying to get the semaphore from with an ISR
- * @return The status of get semaphore operation [CY_RSLT_SUCCESS, CY_RTOS_NO_MEMORY, CY_RTOS_GENERAL_ERROR]
+ * @return The status of get semaphore operation [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_TIMEOUT, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_get_semaphore(cy_semaphore_t *semaphore, cy_time_t timeout_ms, bool in_isr);
 
@@ -366,18 +397,29 @@ cy_rslt_t cy_rtos_get_semaphore(cy_semaphore_t *semaphore, cy_time_t timeout_ms,
  * @param[in] semaphore   Pointer to the semaphore handle
  * @param[in] in_isr      Value of true indicates calling from interrupt context
  *                        Value of false indicates calling from normal thread context
- * @return The status of set semaphore operation [CY_RSLT_SUCCESS, CY_RTOS_NO_MEMORY, CY_RTOS_GENERAL_ERROR]
+ * @return The status of set semaphore operation [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_set_semaphore(cy_semaphore_t *semaphore, bool in_isr);
 
 /**
- * Deletes a sempahore
+ * Get the count of a semaphore.
  *
- * This function frees the resources associated with a sempahore.
+ * Gets the number of available tokens on the semaphore.
+ *
+ * @param[in]  semaphore   Pointer to the semaphore handle
+ * @param[out] count       Pointer to the return count
+ * @return The status of get semaphore count operation [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
+ */
+cy_rslt_t cy_rtos_get_count_semaphore(cy_semaphore_t *semaphore, size_t *count);
+
+/**
+ * Deletes a semaphore
  *
- * @param[in] semaphore   Pointer to the sempahore handle
+ * This function frees the resources associated with a semaphore.
  *
- * @return The status of semaphore deletion [CY_RSLT_SUCCESS, CY_RTOS_NO_MEMORY, CY_RTOS_GENERAL_ERROR]
+ * @param[in] semaphore   Pointer to the semaphore handle
+ *
+ * @return The status of semaphore deletion [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_deinit_semaphore(cy_semaphore_t *semaphore);
 
@@ -385,10 +427,10 @@ cy_rslt_t cy_rtos_deinit_semaphore(cy_semaphore_t *semaphore);
 
 /*********************************************** Events **********************************************/
 
-/** 
-  * \ingroup group_abstraction_rtos_event
-  * \{
-  */
+/**
+ * \ingroup group_abstraction_rtos_event
+ * \{
+ */
 
 /** Create an event.
  *
@@ -398,7 +440,7 @@ cy_rslt_t cy_rtos_deinit_semaphore(cy_semaphore_t *semaphore);
  * @param[in,out] event Pointer to the event handle to be initialized
  *
  * @return The status of the event initialization request.
- *         [CY_RSLT_SUCCESS, CY_RTOS_NO_MEMORY, CY_RTOS_GENERAL_ERROR]
+ *         [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_init_event(cy_event_t *event);
 
@@ -411,7 +453,7 @@ cy_rslt_t cy_rtos_init_event(cy_event_t *event);
  * @param[in] bits   The value of the 32 bit flags
  * @param[in] in_isr If true, this is called from an ISR, otherwise from a thread
  *
- * @return The status of the set request. [CY_RSLT_SUCCESS, CY_RTOS_NO_MEMORY, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the set request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_setbits_event(cy_event_t *event, uint32_t bits, bool in_isr) ;
 
@@ -424,7 +466,7 @@ cy_rslt_t cy_rtos_setbits_event(cy_event_t *event, uint32_t bits, bool in_isr) ;
  * @param[in] bits    Any bits set in this value, will be cleared in the event.
  * @param[in] in_isr  if true, this is called from an ISR, otherwise from a thread
  *
- * @return The status of the clear flags request. [CY_RSLT_SUCCESS, CY_RTOS_NO_MEMORY, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the clear flags request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_clearbits_event(cy_event_t *event, uint32_t bits, bool in_isr) ;
 
@@ -435,13 +477,13 @@ cy_rslt_t cy_rtos_clearbits_event(cy_event_t *event, uint32_t bits, bool in_isr)
  * @param[in]  event Pointer to the event handle
  * @param[out] bits  pointer to receive the value of the event flags
  *
- * @return The status of the get request. [CY_RSLT_SUCCESS, CY_RTOS_NO_MEMORY, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the get request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_getbits_event(cy_event_t *event, uint32_t *bits);
 
 /** Wait for the event and return bits.
  *
- * Waits for the event to be set and then returns the bits assocaited
+ * Waits for the event to be set and then returns the bits associated
  * with the event, or waits for the given timeout period.
  * @note This function returns if any bit in the set is set.
  *
@@ -453,7 +495,7 @@ cy_rslt_t cy_rtos_getbits_event(cy_event_t *event, uint32_t *bits);
  *                      if false, any one bit in the initial bits value must be set to return
  * @param[in] timeout   The amount of time to wait in milliseconds
  *
- * @return The status of the wait for event request. [CY_RSLT_SUCCESS, CY_RTOS_NO_MEMORY, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the wait for event request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_waitbits_event(cy_event_t *event, uint32_t *bits, bool clear, bool all, cy_time_t timeout);
 
@@ -463,7 +505,7 @@ cy_rslt_t cy_rtos_waitbits_event(cy_event_t *event, uint32_t *bits, bool clear,
  *
  * @param[in] event Pointer to the event handle
  *
- * @return The status of the deletion request. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the deletion request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_deinit_event(cy_event_t *event);
 
@@ -471,10 +513,10 @@ cy_rslt_t cy_rtos_deinit_event(cy_event_t *event);
 
 /*********************************************** Queues **********************************************/
 
-/** 
-  * \ingroup group_abstraction_rtos_queue 
-  * \{
-  */
+/**
+ * \ingroup group_abstraction_rtos_queue
+ * \{
+ */
 
 /** Create a queue.
  *
@@ -485,7 +527,7 @@ cy_rslt_t cy_rtos_deinit_event(cy_event_t *event);
  * @param[in]  length   The maximum length of the queue in items
  * @param[in]  itemsize The size of each item in the queue.
  *
- * @return The status of the creation request. [CY_RSLT_SUCCESS, CY_RTOS_NO_MEMORY, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_init_queue(cy_queue_t *queue, size_t length, size_t itemsize);
 
@@ -502,24 +544,24 @@ cy_rslt_t cy_rtos_init_queue(cy_queue_t *queue, size_t length, size_t itemsize);
  * @param[in] timeout_ms The time to wait to place the item in the queue
  * @param[in] in_isr     If true this is being called from within and ISR
  *
- * @return The status of the creation request. [CY_RSLT_SUCCESS, CY_RTOS_NO_MEMORY, CY_RTOS_GENERAL_ERROR, CY_RTOS_QUEUE_FULL]
+ * @return The status of the creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR, \ref CY_RTOS_QUEUE_FULL]
  */
 cy_rslt_t cy_rtos_put_queue(cy_queue_t *queue, const void *item_ptr, cy_time_t timeout_ms, bool in_isr);
 
 /** Gets an item in a queue.
  *
- * This function gets an item fropm the queue. The item is copied
+ * This function gets an item from the queue. The item is copied
  * out of the queue into the memory provide by item_ptr. This space must be
  * large enough to hold a queue entry as defined when the queue was initialized.
  *
  * @note If in_isr is true, timeout_ms must be zero.
  *
- * @param[in] queue     Pointer to the queue handle
- * @param[in] item_ptr  Pointer to the memory for the item from the queue
- * @param[in] timeout_ms The time to wait to place the item in the queue
- * @param[in] in_isr    If true this is being called from within and ISR
+ * @param[in] queue      Pointer to the queue handle
+ * @param[in] item_ptr   Pointer to the memory for the item from the queue
+ * @param[in] timeout_ms The time to wait to get an item from the queue
+ * @param[in] in_isr     If true this is being called from within an ISR
  *
- * @return The status of the creation request. [CY_RSLT_SUCCESS, CY_RTOS_NO_MEMORY, CY_RTOS_GENERAL_ERROR, CY_RTOS_QUEUE_EMPTY]
+ * @return The status of the creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_NO_MEMORY, \ref CY_RTOS_GENERAL_ERROR, \ref CY_RTOS_QUEUE_EMPTY]
  */
 cy_rslt_t cy_rtos_get_queue(cy_queue_t *queue, void *item_ptr, cy_time_t timeout_ms, bool in_isr);
 
@@ -530,7 +572,7 @@ cy_rslt_t cy_rtos_get_queue(cy_queue_t *queue, void *item_ptr, cy_time_t timeout
  * @param[in]  queue       Pointer to the queue handle
  * @param[out] num_waiting Pointer to the return count
  *
- * @return The status of the creation request. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_count_queue(cy_queue_t *queue, size_t *num_waiting);
 
@@ -543,7 +585,7 @@ cy_rslt_t cy_rtos_count_queue(cy_queue_t *queue, size_t *num_waiting);
  * @param[in]  queue      Pointer to the queue handle
  * @param[out] num_spaces Pointer to the return count.
  *
- * @return The status of the creation request. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_space_queue(cy_queue_t *queue, size_t *num_spaces);
 
@@ -553,18 +595,18 @@ cy_rslt_t cy_rtos_space_queue(cy_queue_t *queue, size_t *num_spaces);
  *
  * @param[in] queue pointer to the queue handle
  *
- * @return The status of the creation request. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_reset_queue(cy_queue_t *queue);
 
 /** Deinitialize the queue handle.
  *
- * This function deinitializes the queue and returns all
+ * This function de-initializes the queue and returns all
  * resources used by the queue.
  *
  * @param[in] queue Pointer to the queue handle
  *
- * @return The status of the creation request. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_deinit_queue(cy_queue_t *queue);
 
@@ -573,33 +615,32 @@ cy_rslt_t cy_rtos_deinit_queue(cy_queue_t *queue);
 /*********************************************** Timers **********************************************/
 
 /**
-  * \ingroup group_abstraction_rtos_timer
-  * \{
-  */
+ * \ingroup group_abstraction_rtos_timer
+ * \{
+ */
 
 /** Create a new timer.
  *
- * This function intializes a timer object. @note The timer is
- * not active until start is called.
+ * This function initializes a timer object.
+ * @note The timer is not active until start is called.
+ * @note The callback may be (likely will be) called from a different thread.
  *
- * @param[out] timer Pointer to the timer handle to initalize
+ * @param[out] timer Pointer to the timer handle to initialize
  * @param[in]  type  Type of timer (periodic or once)
- * @param[in]  fun   The functiuon
+ * @param[in]  fun   The function
  * @param[in]  arg   Argument to pass along to the callback function
  *
- * @return The status of the creation request. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_init_timer(cy_timer_t *timer, cy_timer_trigger_type_t type,
         cy_timer_callback_t fun, cy_timer_callback_arg_t arg);
 
 /** Start a timer.
- *
- * @note The callback may be (likely will be) called from a different thread.
  *
  * @param[in] timer  Pointer to the timer handle
- * @param[in] num_ms The number of miliseconds to wait before the timer fires
+ * @param[in] num_ms The number of milliseconds to wait before the timer fires
  *
- * @return The status of the creation request. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_start_timer(cy_timer_t *timer, cy_time_t num_ms);
 
@@ -607,7 +648,7 @@ cy_rslt_t cy_rtos_start_timer(cy_timer_t *timer, cy_time_t num_ms);
  *
  * @param[in] timer Pointer to the timer handle
  *
- * @return The status of the creation request. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_stop_timer(cy_timer_t *timer);
 
@@ -616,18 +657,17 @@ cy_rslt_t cy_rtos_stop_timer(cy_timer_t *timer);
  * @param[in]  timer Pointer to the timer handle
  * @param[out] state Return value for state, true if running, false otherwise
  *
- * @return The status of the creation request. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_is_running_timer(cy_timer_t *timer, bool *state);
 
 /** Deinit the timer.
  *
- * This function de initializes the timer and frees all consumed
- * resources.
+ * This function deinitializes the timer and frees all consumed resources.
  *
  * @param[in] timer Pointer to the timer handle
  *
- * @return The status of the creation request. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_deinit_timer(cy_timer_t *timer);
 
@@ -636,9 +676,9 @@ cy_rslt_t cy_rtos_deinit_timer(cy_timer_t *timer);
 /*********************************************** Time **********************************************/
 
 /**
-  * \ingroup group_abstraction_rtos_time
-  * \{
-  */
+ * \ingroup group_abstraction_rtos_time
+ * \{
+ */
 
 /** Gets time in milliseconds since RTOS start.
  *
@@ -657,16 +697,15 @@ cy_rslt_t cy_rtos_get_time(cy_time_t *tval);
  * the longest period possible which is less than the delay required,
  * then makes up the difference with a tight loop.
  *
- * @param[in] num_ms The number of miliseconds to delay for
+ * @param[in] num_ms The number of milliseconds to delay for
  *
- * @return The status of the creation request. [CY_RSLT_SUCCESS, CY_RTOS_GENERAL_ERROR]
+ * @return The status of the creation request. [\ref CY_RSLT_SUCCESS, \ref CY_RTOS_GENERAL_ERROR]
  */
 cy_rslt_t cy_rtos_delay_milliseconds(cy_time_t num_ms);
 
-/** \} group_abstraction_rtos_timer */
+/** \} group_abstraction_rtos_time */
 
 #ifdef __cplusplus
 } /* extern "C" */
 #endif
 #endif /* ifndef INCLUDED_CY_RTOS_INTERFACE_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyabs_rtos_impl.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyabs_rtos_impl.h
index bb0f4767ec..8b36a68844 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyabs_rtos_impl.h
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyabs_rtos_impl.h
@@ -6,7 +6,7 @@
 *
 ********************************************************************************
 * \copyright
-* Copyright 2019 Cypress Semiconductor Corporation
+* Copyright 2019-2020 Cypress Semiconductor Corporation
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
@@ -37,9 +37,9 @@ extern "C"
 /******************************************************
 *                 Constants
 ******************************************************/
-#define CY_RTOS_MIN_STACK_SIZE      300                     /** Minimum stack size */
+#define CY_RTOS_MIN_STACK_SIZE      300                     /** Minimum stack size in bytes */
 #define CY_RTOS_ALIGNMENT           0x00000008UL            /** Minimum alignment for RTOS objects */
-#define CY_RTOS_ALIGNMENT_MASK      0x00000007UL            /** Mask for checking the alignement of crated RTOS objects */
+#define CY_RTOS_ALIGNMENT_MASK      0x00000007UL            /** Mask for checking the alignment of created RTOS objects */
 
 
 /******************************************************
@@ -66,7 +66,7 @@ typedef osSemaphoreId_t cy_semaphore_t;                /** CMSIS definition of a
 typedef osEventFlagsId_t cy_event_t;                   /** CMSIS definition of an event */
 typedef osMessageQueueId_t cy_queue_t;                 /** CMSIS definition of a message queue */
 typedef osTimerId_t cy_timer_t;                        /** CMSIS definition of a timer */
-typedef uint32_t cy_timer_callback_arg_t;              /** Argument passed to the timer callback function */
+typedef void * cy_timer_callback_arg_t;                /** Argument passed to the timer callback function */
 typedef uint32_t cy_time_t;                            /** Time in milliseconds */
 typedef osStatus_t cy_rtos_error_t;                    /** CMSIS definition of a error status */
 
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyabs_rtos_rtxv5.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyabs_rtos_rtxv5.c
index 37de65f971..37c70fe5c7 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyabs_rtos_rtxv5.c
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyabs_rtos_rtxv5.c
@@ -6,7 +6,7 @@
 *
 ********************************************************************************
 * \copyright
-* Copyright 2018-2019 Cypress Semiconductor Corporation
+* Copyright 2018-2020 Cypress Semiconductor Corporation
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
@@ -23,8 +23,8 @@
 *******************************************************************************/
 
 #include <stdlib.h>
-#include <assert.h>
-#include "cyabs_rtos.h"
+#include <cy_utils.h>
+#include <cyabs_rtos.h>
 
 #if defined(__cplusplus)
 extern "C" {
@@ -84,6 +84,8 @@ cy_rslt_t cy_rtos_create_thread(cy_thread_t *thread, cy_thread_entry_fn_t entry_
 
     if (thread == NULL || stack_size < CY_RTOS_MIN_STACK_SIZE)
         status = CY_RTOS_BAD_PARAM;
+    else if (stack != NULL && (0 != (((uint32_t)stack) & CY_RTOS_ALIGNMENT_MASK)))
+        status = CY_RTOS_ALIGNMENT_ERROR;
     else
     {
         attr.name = name;
@@ -113,10 +115,10 @@ cy_rslt_t cy_rtos_create_thread(cy_thread_t *thread, cy_thread_entry_fn_t entry_
             status = CY_RTOS_NO_MEMORY;
         else
         {
-            assert(((uint32_t)attr.cb_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
-            assert(((uint32_t)attr.stack_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
-            *thread = osThreadNew((osThreadFunc_t)entry_function, (void *)arg, &attr );
-            assert((*thread == attr.cb_mem) || (*thread == NULL));
+            CY_ASSERT(((uint32_t)attr.cb_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
+            CY_ASSERT(((uint32_t)attr.stack_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
+            *thread = osThreadNew((osThreadFunc_t)entry_function, arg, &attr);
+            CY_ASSERT((*thread == attr.cb_mem) || (*thread == NULL));
             status = (*thread == NULL) ? CY_RTOS_GENERAL_ERROR : CY_RSLT_SUCCESS;
         }
     }
@@ -126,6 +128,10 @@ cy_rslt_t cy_rtos_create_thread(cy_thread_t *thread, cy_thread_entry_fn_t entry_
 
 cy_rslt_t cy_rtos_exit_thread()
 {
+    /* This does not have a return statement because the osThreadExit() function
+     * does not return so the return statement would be unreachable and causes a
+     * warning for IAR compiler.
+     */
     osThreadExit();
 }
 
@@ -217,12 +223,24 @@ cy_rslt_t cy_rtos_join_thread(cy_thread_t *thread)
     return status;
 }
 
+cy_rslt_t cy_rtos_get_thread_handle(cy_thread_t *thread)
+{
+    cy_rslt_t status = CY_RSLT_SUCCESS;
+
+    if (thread == NULL)
+        status = CY_RTOS_BAD_PARAM;
+    else
+        *thread = osThreadGetId();
+
+    return status;
+}
+
 
 /******************************************************
 *                 Mutexes
 ******************************************************/
 
-cy_rslt_t cy_rtos_init_mutex(cy_mutex_t *mutex)
+cy_rslt_t cy_rtos_init_mutex2(cy_mutex_t *mutex, bool recursive)
 {
     cy_rslt_t status;
     osMutexAttr_t attr;
@@ -232,7 +250,11 @@ cy_rslt_t cy_rtos_init_mutex(cy_mutex_t *mutex)
     else
     {
         attr.name = NULL;
-        attr.attr_bits = osMutexRecursive | osMutexPrioInherit;
+        attr.attr_bits = osMutexPrioInherit;
+        if (recursive)
+        {
+            attr.attr_bits |= osMutexRecursive;
+        }
         attr.cb_mem = malloc(osRtxMutexCbSize);
         attr.cb_size = osRtxMutexCbSize;
 
@@ -240,9 +262,9 @@ cy_rslt_t cy_rtos_init_mutex(cy_mutex_t *mutex)
             status = CY_RTOS_NO_MEMORY;
         else
         {
-            assert(((uint32_t)attr.cb_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
+            CY_ASSERT(((uint32_t)attr.cb_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
             *mutex = osMutexNew(&attr);
-            assert((*mutex == attr.cb_mem) || (*mutex == NULL));
+            CY_ASSERT((*mutex == attr.cb_mem) || (*mutex == NULL));
             status = (*mutex == NULL) ? CY_RTOS_GENERAL_ERROR : CY_RSLT_SUCCESS;
         }
     }
@@ -327,9 +349,9 @@ cy_rslt_t cy_rtos_init_semaphore(cy_semaphore_t *semaphore, uint32_t maxcount, u
             status = CY_RTOS_NO_MEMORY;
         else
         {
-            assert(((uint32_t)attr.cb_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
+            CY_ASSERT(((uint32_t)attr.cb_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
             *semaphore = osSemaphoreNew(maxcount, initcount, &attr);
-            assert((*semaphore == attr.cb_mem) || (*semaphore == NULL));
+            CY_ASSERT((*semaphore == attr.cb_mem) || (*semaphore == NULL));
             status = (*semaphore == NULL) ? CY_RTOS_GENERAL_ERROR : CY_RSLT_SUCCESS;
         }
     }
@@ -375,6 +397,19 @@ cy_rslt_t cy_rtos_set_semaphore(cy_semaphore_t *semaphore, bool in_isr)
     return status;
 }
 
+cy_rslt_t cy_rtos_get_count_semaphore(cy_semaphore_t *semaphore, size_t *count)
+{
+    cy_rslt_t status;
+    if (semaphore == NULL || count == NULL)
+        status = CY_RTOS_BAD_PARAM;
+    else
+    {
+        *count = osSemaphoreGetCount(*semaphore);
+        status = CY_RSLT_SUCCESS;
+    }
+    return status;
+}
+
 cy_rslt_t cy_rtos_deinit_semaphore(cy_semaphore_t *semaphore)
 {
     cy_rslt_t status;
@@ -422,9 +457,9 @@ cy_rslt_t cy_rtos_init_event(cy_event_t *event)
             status = CY_RTOS_NO_MEMORY;
         else
         {
-            assert(((uint32_t)attr.cb_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
+            CY_ASSERT(((uint32_t)attr.cb_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
             *event = osEventFlagsNew(&attr);
-            assert((*event == attr.cb_mem) || (*event == NULL));
+            CY_ASSERT((*event == attr.cb_mem) || (*event == NULL));
             status = (*event == NULL) ? CY_RTOS_GENERAL_ERROR : CY_RSLT_SUCCESS;
         }
     }
@@ -555,10 +590,10 @@ cy_rslt_t cy_rtos_init_queue(cy_queue_t *queue, size_t length, size_t itemsize)
             status = CY_RTOS_NO_MEMORY;
         else
         {
-            assert(((uint32_t)attr.cb_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
-            assert(((uint32_t)attr.mq_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
+            CY_ASSERT(((uint32_t)attr.cb_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
+            CY_ASSERT(((uint32_t)attr.mq_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
             *queue = osMessageQueueNew(length, itemsize, &attr);
-            assert((*queue == attr.cb_mem) || (*queue == NULL));
+            CY_ASSERT((*queue == attr.cb_mem) || (*queue == NULL));
             status = (*queue == NULL) ? CY_RTOS_GENERAL_ERROR : CY_RSLT_SUCCESS;
         }
     }
@@ -698,9 +733,9 @@ cy_rslt_t cy_rtos_init_timer(cy_timer_t *timer, cy_timer_trigger_type_t type,
                 ? osTimerPeriodic
                 : osTimerOnce;
 
-            assert(((uint32_t)attr.cb_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
+            CY_ASSERT(((uint32_t)attr.cb_mem & CY_RTOS_ALIGNMENT_MASK) == 0UL);
             *timer = osTimerNew( (osTimerFunc_t)fun, osTriggerType, (void *)arg, &attr );
-            assert((*timer == attr.cb_mem) || (*timer == NULL));
+            CY_ASSERT((*timer == attr.cb_mem) || (*timer == NULL));
             status = (*timer == NULL) ? CY_RTOS_GENERAL_ERROR : CY_RSLT_SUCCESS;
         }
     }
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_gpio.cpp b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_gpio.cpp
deleted file mode 100644
index a0fa5ffbc3..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_gpio.cpp
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Copyright 2020 Arduino SA
- * SPDX-License-Identifier: Apache-2.0
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Provides the porting layer for STM32 GPIOs on WHD driver
- */
-
-#include "cyhal_gpio.h"
-#include "mbed.h"
-
-extern pinconfig_t      PinConfig[];
-
-static mbed::InterruptIn* oob_irq;
-static cyhal_gpio_irq_event_t oob_event = CYHAL_GPIO_IRQ_FALL;
-static cyhal_gpio_irq_handler_t oob_handler;
-static void* oob_handler_arg;
-
-static void cb() {
-  oob_handler(oob_handler_arg, oob_event);
-}
-
-void cyhal_gpio_register_irq(cyhal_gpio_t pin, uint8_t intrPriority, cyhal_gpio_irq_handler_t handler,
-                             void *handler_arg)
-{
-  if (handler && handler_arg && (oob_irq==NULL)) {
-    oob_irq = new mbed::InterruptIn(PJ_5);
-    oob_handler = handler;
-    oob_handler_arg = handler_arg;
-  }
-}
-
-void cyhal_gpio_irq_enable(cyhal_gpio_t pin, cyhal_gpio_irq_event_t event, bool enable)
-{
-  oob_event = event;
-  if (enable) {
-    if (CYHAL_GPIO_IRQ_RISE) {
-      oob_irq->rise(cb);
-    }
-    if (CYHAL_GPIO_IRQ_FALL) {
-      oob_irq->fall(cb);
-    }
-  } else if (oob_irq != NULL) {
-    delete oob_irq;
-  }
-}
-
-
-#include <stdio.h>
-
-cy_rslt_t cyhal_gpio_init(cyhal_gpio_t pin, cyhal_gpio_direction_t direction, cyhal_gpio_drive_mode_t drvMode, bool initVal)
-{
-  cy_rslt_t     ret= CY_RSLT_SUCCESS;
-   // printf("Port Init %s %d\n",PinConfig[pin].portname, PinConfig[pin].pinnumber);
-
-  /* Ignore the parameter and take the pin config directly from a static array defintions */
-  HAL_GPIO_Init(PinConfig[pin].port, &PinConfig[pin].config);
-  if (direction == CYHAL_GPIO_DIR_OUTPUT) HAL_GPIO_WritePin(PinConfig[pin].port, PinConfig[pin].config.Pin, (initVal)?GPIO_PIN_SET:GPIO_PIN_RESET);
-  //if (direction == CYHAL_GPIO_DIR_OUTPUT)   printf("Port %s %s %d\n",(initVal)?"High":"low",PinConfig[pin].portname, PinConfig[pin].pinnumber);
-
-  return ret;
-}
-
-
-
-void cyhal_gpio_write(cyhal_gpio_t pin, bool value)
-{
-  /*printf("Port %s %s %d\n",(value)?"High":"low",PinConfig[pin].portname, PinConfig[pin].pinnumber);*/
-  HAL_GPIO_WritePin(PinConfig[pin].port, PinConfig[pin].config.Pin, (value)?GPIO_PIN_SET:GPIO_PIN_RESET);
-}
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_gpio.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_gpio.h
index c741cab1ab..08d4e5bfb1 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_gpio.h
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_gpio.h
@@ -2,14 +2,14 @@
 * \file cyhal_gpio.h
 *
 * \brief
-* Provides a high level interface for interacting with the Cypress GPIO.
+* Provides a high level interface for interacting with the GPIO on Cypress devices.
 * This interface abstracts out the chip specific details. If any chip specific
 * functionality is necessary, or performance is critical the low level functions
 * can be used directly.
 *
 ********************************************************************************
 * \copyright
-* Copyright 2018-2019 Cypress Semiconductor Corporation
+* Copyright 2018-2020 Cypress Semiconductor Corporation
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
@@ -26,16 +26,58 @@
 *******************************************************************************/
 
 /**
- * \addtogroup group_hal_gpio GPIO (General Purpose Input Output)
- * \ingroup group_hal
- * \{
- * High level interface for interacting with the Cypress GPIO.
- *
- * \defgroup group_hal_gpio_macros Macros
- * \defgroup group_hal_gpio_functions Functions
- * \defgroup group_hal_gpio_data_structures Data Structures
- * \defgroup group_hal_gpio_enums Enumerated Types
- */
+* \addtogroup group_hal_gpio GPIO (General Purpose Input Output)
+* \ingroup group_hal
+* \{
+* High level interface for configuring and interacting with general purpose input/outputs (GPIO).
+*
+* The GPIO driver provides functions to configure and initialize GPIO, and to read and write data to the pin.
+* The driver also supports interrupt generation on GPIO signals with rising, falling or both edges.
+*
+* \note The APIs in this driver need not be used if a GPIO is to be used as an input or output of peripherals like I2C or PWM.
+* The respective peripheral's driver will utilize the GPIO interface to configure and initialize its GPIO pins.
+*
+* \section subsection_gpio_features Features
+* * Configurable GPIO pin direction - \ref cyhal_gpio_direction_t
+* * Configurable GPIO pin drive modes - \ref cyhal_gpio_drive_mode_t
+* * Configurable analog and digital characteristics
+* * Configurable edge-triggered interrupts and callback assignment on GPIO events - \ref cyhal_gpio_event_t
+*
+* \section subsection_gpio_quickstart Quick Start
+* \ref cyhal_gpio_init can be used for a simple GPIO initialization by providing the pin number (<b>pin</b>), pin direction (<b>direction</b>),
+* pin drive mode (<b>drive_mode</b>) and the initial value on the pin (<b>init_val</b>).
+*
+* \section subsection_gpio_sample_snippets Code Snippets
+*
+* \subsection subsection_gpio_snippet_1 Snippet 1: Reading value from GPIO
+* The following snippet initializes GPIO pin \ref P0_0 as an input with high impedance digital drive mode and initial value = <b>false</b> (low). A value is read
+* from the pin and stored to a uint8_t variable (<b>read_val</b>).
+
+* \snippet gpio.c snippet_cyhal_gpio_read
+
+* \subsection subsection_gpio_snippet_2 Snippet 2: Writing value to a GPIO
+* The following snippet initializes GPIO pin \ref P0_0 as an output pin with strong drive mode and initial value = <b>false</b> (low).
+* A value = <b>true</b> (high) is written to the output driver.
+
+* \snippet gpio.c snippet_cyhal_gpio_write
+
+* \subsection subsection_gpio_snippet_3 Snippet 3: Reconfiguring a GPIO
+* The following snippet shows how to reconfigure a GPIO pin during run-time using the firmware. The GPIO pin \ref P0_0
+* is first initialized as an output pin with strong drive mode. The pin is then reconfigured as an input with high impedance digital drive mode.
+* \note \ref cyhal_gpio_configure only changes the <b>direction</b> and the <b>drive_mode</b>
+* of the pin. Previously set pin value is retained.
+*
+* \snippet gpio.c snippet_cyhal_gpio_reconfigure
+
+* \subsection subsection_gpio_snippet_4 Snippet 4: Interrupts on GPIO events
+* GPIO events can be mapped to an interrupt and assigned to a callback function. The callback function needs to be first registered and
+* then the event needs to be enabled.
+** The following snippet initializes GPIO pin \ref P0_0 as an input pin. It registers a callback function and enables detection
+* of a falling edge event to trigger the callback.
+* \note If no argument needs to be passed to the callback function then a NULL can be passed during registering. <br>
+*
+* \snippet gpio.c snippet_cyhal_gpio_interrupt
+*/
 
 #pragma once
 
@@ -48,94 +90,77 @@
 extern "C" {
 #endif /* __cplusplus */
 
+
 /*******************************************************************************
 *       Defines
 *******************************************************************************/
 
-/**
- * \addtogroup group_hal_gpio_macros
- * \{
- */
-
 /** Integer representation of no connect pin (required to exist in all BSPs) */
-#define CYHAL_NC_PIN_VALUE ( (cyhal_gpio_t)0xFFFFFFFF )
-
-/** \} group_hal_gpio_macros */
-
-
-/**
- * \addtogroup group_hal_gpio_enums
- * \{
- */
+#define CYHAL_NC_PIN_VALUE (NC)
 
 /*******************************************************************************
 *       Enumerations
 *******************************************************************************/
 
-/** Pin IRQ events */
-typedef enum
-{
-    CYHAL_GPIO_IRQ_NONE = 0,   /**< No interrupt */
-    CYHAL_GPIO_IRQ_RISE = 1,   /**< Interrupt on rising edge */
-    CYHAL_GPIO_IRQ_FALL = 2,   /**< Interrupt on falling edge */
-    CYHAL_GPIO_IRQ_BOTH = 3,   /**< Interrupt on both rising and falling edges */
-} cyhal_gpio_irq_event_t;
+/** Pin events */
+typedef enum {
+    CYHAL_GPIO_IRQ_NONE = 0,                                            /**< No interrupt */
+    CYHAL_GPIO_IRQ_RISE = 1 << 0,                                       /**< Interrupt on rising edge */
+    CYHAL_GPIO_IRQ_FALL = 1 << 1,                                       /**< Interrupt on falling edge */
+    CYHAL_GPIO_IRQ_BOTH = (CYHAL_GPIO_IRQ_RISE | CYHAL_GPIO_IRQ_FALL),  /**< Interrupt on both rising and falling edges */
+} cyhal_gpio_event_t;
 
 /** Pin direction */
-typedef enum
-{
-    CYHAL_GPIO_DIR_INPUT         = 0,  /**< Input pin */
-    CYHAL_GPIO_DIR_OUTPUT        = 1,  /**< Output pin */
-    CYHAL_GPIO_DIR_BIDIRECTIONAL = 2,   /**< Input and output pin */
+typedef enum {
+    CYHAL_GPIO_DIR_INPUT,         /**< Input pin */
+    CYHAL_GPIO_DIR_OUTPUT,        /**< Output pin */
+    CYHAL_GPIO_DIR_BIDIRECTIONAL, /**< Input and output pin */
 } cyhal_gpio_direction_t;
 
 /** Pin drive mode */
-typedef enum
-{
-    CYHAL_GPIO_DRIVE_NONE                = 0, /**< No drive; Hi-Z */
-    CYHAL_GPIO_DRIVE_ANALOG              = 0, /**< Analog Hi-Z */
-    CYHAL_GPIO_DRIVE_PULLUP              = 2, /**< Pull-up resistor */
-    CYHAL_GPIO_DRIVE_PULLDOWN            = 3, /**< Pull-down resistor */
-    CYHAL_GPIO_DRIVE_OPENDRAINDRIVESLOW  = 4, /**< Open-drain, Drives Low */
-    CYHAL_GPIO_DRIVE_OPENDRAINDRIVESHIGH = 5, /**< Open-drain, Drives High */
-    CYHAL_GPIO_DRIVE_STRONG              = 6, /**< Strong output */
-    CYHAL_GPIO_DRIVE_PULLUPDOWN          = 7, /**< Pull-up and pull-down resistors */
-} cyhal_gpio_drive_mode_t;
-
-/** \} group_hal_gpio_enums */
-
 
-/**
- * \addtogroup group_hal_gpio_data_structures
- * \{
+/** \note When the <b> drive_mode </b> of the <b> pin </b> is set to <b> CYHAL_GPIO_DRIVE_PULL_NONE </b>,
+ * it is set to <b> CYHAL_GPIO_DRIVE_STRONG </b> if the <b> direction </b>
+ * of the <b> pin </b> is <b> CYHAL_GPIO_DIR_OUTPUT </b> or <b> CYHAL_GPIO_DIR_BIDIRECTIONAL</b>.
+ * If not, the <b> drive_mode </b> of the <b> pin </b> is set to <b> CYHAL_GPIO_DRIVE_NONE</b>.
  */
+typedef enum {
+    CYHAL_GPIO_DRIVE_NONE,                /**< Digital Hi-Z. Input only. Input init value(s): 0 or 1 */
+    CYHAL_GPIO_DRIVE_ANALOG,              /**< Analog Hi-Z. Use only for analog purpose */
+    CYHAL_GPIO_DRIVE_PULLUP,              /**< Pull-up resistor. Input and output. Input init value(s): 1, output value(s): 0 */
+    CYHAL_GPIO_DRIVE_PULLDOWN,            /**< Pull-down resistor. Input and output. Input init value(s): 0, output value(s): 1 */
+    CYHAL_GPIO_DRIVE_OPENDRAINDRIVESLOW,  /**< Open-drain, Drives Low. Input and output. Input init value(s): 1, output value(s): 0 */
+    CYHAL_GPIO_DRIVE_OPENDRAINDRIVESHIGH, /**< Open-drain, Drives High. Input and output. Input init value(s): 0, output value(s): 1 */
+    CYHAL_GPIO_DRIVE_STRONG,              /**< Strong output. Output only. Output init value(s): 0 or 1 */
+    CYHAL_GPIO_DRIVE_PULLUPDOWN,          /**< Pull-up and pull-down resistors. Input and output. Input init value(s): 0 or 1, output value(s): 0 or 1 */
+    CYHAL_GPIO_DRIVE_PULL_NONE,           /**< No Pull-up or pull-down resistors. Input and output. Input init value(s): 0 or 1, output value(s): 0 or 1 */
+} cyhal_gpio_drive_mode_t;
 
 /** GPIO callback function type */
-typedef void (*cyhal_gpio_irq_handler_t)(void *handler_arg, cyhal_gpio_irq_event_t event);
-
-/** \} group_hal_gpio_data_structures */
-
-
-/**
- * \addtogroup group_hal_gpio_functions
- * \{
- */
+typedef void (*cyhal_gpio_event_callback_t)(void *callback_arg, cyhal_gpio_event_t event);
 
 /*******************************************************************************
 *       Functions
 *******************************************************************************/
 
-/** Initialize the GPIO pin
+/** Initialize the GPIO pin <br>
+ * See \ref subsection_gpio_snippet_1.
  *
- * @param[in]  pin The GPIO pin to initialize
- * @param[in]  direction The pin direction (input/output)
- * @param[in]  drvMode The pin drive mode
- * @param[in]  initVal Initial value on the pin
+ * @param[in] pin         The GPIO pin to initialize
+ * @param[in] direction   The pin direction
+ * @param[in] drive_mode  The pin drive mode
+ * @param[in] init_val    Initial value on the pin
  *
  * @return The status of the init request
+ *
+ * Guidance for using gpio drive modes ( \ref cyhal_gpio_drive_mode_t for details).
+ * For default use drive modes:
+ * Input GPIO direction - \ref CYHAL_GPIO_DRIVE_NONE
+ * Output GPIO direction - \ref CYHAL_GPIO_DRIVE_STRONG
+ * Bidirectional GPIO - \ref CYHAL_GPIO_DRIVE_PULLUPDOWN
+ * \warning Don't use \ref CYHAL_GPIO_DRIVE_STRONG for input GPIO direction. It may cause an overcurrent issue.
  */
-cy_rslt_t cyhal_gpio_init(cyhal_gpio_t pin, cyhal_gpio_direction_t direction, cyhal_gpio_drive_mode_t drvMode,
-                          bool initVal);
+cy_rslt_t cyhal_gpio_init(cyhal_gpio_t pin, cyhal_gpio_direction_t direction, cyhal_gpio_drive_mode_t drive_mode, bool init_val);
 
 /** Uninitialize the gpio peripheral and the cyhal_gpio_t object
  *
@@ -143,66 +168,80 @@ cy_rslt_t cyhal_gpio_init(cyhal_gpio_t pin, cyhal_gpio_direction_t direction, cy
  */
 void cyhal_gpio_free(cyhal_gpio_t pin);
 
-/** Set the pin direction
+/** Configure the GPIO pin <br>
+ * See \ref subsection_gpio_snippet_3.
  *
- * @param[in] pin       The pin number
- * @param[in] direction The pin direction to be set
- * @return The status of the dir request
- */
-cy_rslt_t cyhal_gpio_direction(cyhal_gpio_t pin, cyhal_gpio_direction_t direction);
-
-/** Set the input pin mode
- *
- * @param[in] pin  The GPIO object
- * @param[in] drvMode The pin mode to be set
+ * @param[in] pin          The GPIO pin
+ * @param[in] direction    The pin direction
+ * @param[in] drive_mode   The pin drive mode
  *
- * @return The status of the mode request
+ * @return The status of the configure request
  */
-cy_rslt_t cyhal_gpio_drivemode(cyhal_gpio_t pin, cyhal_gpio_drive_mode_t drvMode);
+cy_rslt_t cyhal_gpio_configure(cyhal_gpio_t pin, cyhal_gpio_direction_t direction, cyhal_gpio_drive_mode_t drive_mode);
 
-/** Set the output value for the pin. This only works for output & in_out pins.
+/** Set the output value for the pin. This only works for output & in_out pins. <br>
+ * See \ref subsection_gpio_snippet_2.
  *
  * @param[in] pin   The GPIO object
  * @param[in] value The value to be set (high = true, low = false)
  */
 void cyhal_gpio_write(cyhal_gpio_t pin, bool value);
 
-/** Read the input value.  This only works for input & in_out pins.
+/** Read the input value.  This only works for \ref CYHAL_GPIO_DIR_INPUT & \ref CYHAL_GPIO_DIR_BIDIRECTIONAL pins. <br>
+ * See \ref subsection_gpio_snippet_1.
  *
  * @param[in]  pin   The GPIO object
  * @return The value of the IO (true = high, false = low)
  */
 bool cyhal_gpio_read(cyhal_gpio_t pin);
 
-/** Toggle the output value
- *
+/** Toggle the output value <br>
+ * See \ref subsection_gpio_snippet_4.
  * @param[in]  pin   The GPIO object
  */
 void cyhal_gpio_toggle(cyhal_gpio_t pin);
 
-/** Register/clear an interrupt handler for the pin toggle pin IRQ event
+/** Register/clear a callback handler for pin events <br>
  *
- * @param[in] pin           The pin number
- * @param[in] intrPriority  The NVIC interrupt channel priority
- * @param[in] handler       The function to call when the specified event happens. Pass NULL to unregister the handler.
- * @param[in] handler_arg   Generic argument that will be provided to the handler when called, can be NULL
+ * This function will be called when one of the events enabled by \ref cyhal_gpio_enable_event occurs.
+ *
+ * See \ref subsection_gpio_snippet_4.
+ *
+ * @param[in] pin            The pin number
+ * @param[in] callback       The function to call when the specified event happens. Pass NULL to unregister the handler.
+ * @param[in] callback_arg   Generic argument that will be provided to the callback when called, can be NULL
  */
-void cyhal_gpio_register_irq(cyhal_gpio_t pin, uint8_t intrPriority, cyhal_gpio_irq_handler_t handler,
-                             void *handler_arg);
+void cyhal_gpio_register_callback(cyhal_gpio_t pin, cyhal_gpio_event_callback_t callback, void *callback_arg);
 
-/** Enable or Disable the GPIO IRQ
+/** Enable or Disable the specified GPIO event <br>
+ *
+ * When an enabled event occurs, the function specified by \ref cyhal_gpio_register_callback will be called.
  *
- * @param[in] pin    The GPIO object
- * @param[in] event  The GPIO IRQ event
- * @param[in] enable True to turn on interrupts, False to turn off
+ * See \ref subsection_gpio_snippet_4.
+ *
+ * @param[in] pin           The GPIO object
+ * @param[in] event         The GPIO event
+ * @param[in] intr_priority The priority for NVIC interrupt events
+ * @param[in] enable        True to turn on interrupts, False to turn off
  */
-void cyhal_gpio_irq_enable(cyhal_gpio_t pin, cyhal_gpio_irq_event_t event, bool enable);
+void cyhal_gpio_enable_event(cyhal_gpio_t pin, cyhal_gpio_event_t event, uint8_t intr_priority, bool enable);
 
-/** \} group_hal_gpio_functions */
+/*******************************************************************************
+* Backward compatibility macro. The following code is DEPRECATED and must
+* not be used in new projects
+*******************************************************************************/
+/** \cond INTERNAL */
+#define cyhal_gpio_register_irq(pin, priority, handler, handler_arg)        cyhal_gpio_register_callback(pin, handler, handler_arg)
+#define cyhal_gpio_irq_enable(pin, event, enable)          cyhal_gpio_enable_event(pin, event, CYHAL_ISR_PRIORITY_DEFAULT, enable)
+typedef cyhal_gpio_event_t             cyhal_gpio_irq_event_t;
+/** \endcond */
 
 #ifdef __cplusplus
 }
 #endif /* __cplusplus */
 
-/** \} group_hal_gpio */
+#ifdef CYHAL_GPIO_IMPL_HEADER
+#include CYHAL_GPIO_IMPL_HEADER
+#endif /* CYHAL_GPIO_IMPL_HEADER */
 
+/** \} group_hal_gpio */
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_modules.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_modules.h
deleted file mode 100644
index e95f8e13ab..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_modules.h
+++ /dev/null
@@ -1,86 +0,0 @@
-/***************************************************************************//**
-* \file cyhal_modules.h
-*
-* \brief
-* Provides an enum of all HAL modules types that can be used for generating
-* custom cy_rslt_t items.
-*
-********************************************************************************
-* \copyright
-* Copyright 2018-2019 Cypress Semiconductor Corporation
-* SPDX-License-Identifier: Apache-2.0
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-*     http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*******************************************************************************/
-
-/**
- * \addtogroup group_hal_modules Driver Modules
- * \ingroup group_hal
- * \{
- * Enum definition for all HAL resource modules.
- *
- * \defgroup group_hal_modules_enums Enumerated Types
- */
-
-#pragma once
-
-#include "cy_result.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-
-/**
- * \addtogroup group_hal_modules_enums
- * \{
- */
-
-/** Enum to in indicate which module an errors occurred in. */
-enum cyhal_rslt_module_chip
-{
-    CYHAL_RSLT_MODULE_CHIP_HWMGR = CY_RSLT_MODULE_ABSTRACTION_HAL_BASE, //!< An error occurred in hardware management module
-    CYHAL_RSLT_MODULE_ADC,                                              //!< An error occurred in ADC module
-    CYHAL_RSLT_MODULE_COMP,                                             //!< An error occurred in comparator module
-    CYHAL_RSLT_MODULE_CRC,                                              //!< An error occurred in crypto CRC module
-    CYHAL_RSLT_MODULE_DAC,                                              //!< An error occurred in DAC module
-    CYHAL_RSLT_MODULE_DMA,                                              //!< An error occurred in DMA module
-    CYHAL_RSLT_MODULE_FLASH,                                            //!< An error occurred in flash module
-    CYHAL_RSLT_MODULE_GPIO,                                             //!< An error occurred in GPIO module
-    CYHAL_RSLT_MODULE_I2C,                                              //!< An error occurred in I2C module
-    CYHAL_RSLT_MODULE_I2S,                                              //!< An error occurred in I2S module
-    CYHAL_RSLT_MODULE_INTERCONNECT,                                     //!< An error occurred in Interconnct module
-    CYHAL_RSLT_MODULE_OPAMP,                                            //!< An error occurred in OpAmp module
-    CYHAL_RSLT_MODULE_PDMPCM,                                           //!< An error occurred in PDM/PCM module
-    CYHAL_RSLT_MODULE_PWM,                                              //!< An error occurred in PWM module
-    CYHAL_RSLT_MODULE_QSPI,                                             //!< An error occurred in QSPI module
-    CYHAL_RSLT_MODULE_RTC,                                              //!< An error occurred in RTC module
-    CYHAL_RSLT_MODULE_SDHC,                                             //!< An error occurred in SDHC module
-    CYHAL_RSLT_MODULE_SDIO,                                             //!< An error occurred in SDIO module
-    CYHAL_RSLT_MODULE_SPI,                                              //!< An error occurred in SPI module
-    CYHAL_RSLT_MODULE_SYSTEM,                                           //!< An error occurred in System module
-    CYHAL_RSLT_MODULE_TIMER,                                            //!< An error occurred in Timer module
-    CYHAL_RSLT_MODULE_TRNG,                                             //!< An error occurred in RNG module
-    CYHAL_RSLT_MODULE_UART,                                             //!< An error occurred in UART module
-    CYHAL_RSLT_MODULE_USB,                                              //!< An error occurred in USB module
-    CYHAL_RSLT_MODULE_WDT,                                              //!< An error occurred in WDT module
-};
-
-/** \} group_hal_modules_enums */
-
-#if defined(__cplusplus)
-}
-#endif /* __cplusplus */
-
-/** \} group_hal_modules */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_sdio.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_sdio.c
deleted file mode 100644
index 101bd09c65..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_sdio.c
+++ /dev/null
@@ -1,799 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Provides the porting layer for STM32 SDIO on WHD driver
- */
-
-#include <stdio.h>
-#include <string.h>
-#include "whd_thread.h"
-#include "bus_protocols/whd_bus_sdio_protocol.h"
-#include "cyabs_rtos.h"
-#include "cyhal_sdio.h"
-static int num=0;
-
-#define STM32H753xx
-
-#if defined (STM32H753xx)
-#define MEMCPY_RX
-#define COMMAND_FINISHED_CMD52_TIMEOUT_LOOPS (100000)
-#define COMMAND_FINISHED_CMD53_TIMEOUT_LOOPS (100000)
-#define SDIO_TX_RX_COMPLETE_TIMEOUT_LOOPS    (100000)
-//#define SDIO_1_BIT
-//#define SLOW_SDIO_CLOCK
-
-#else
-#define SLOW_SDIO_CLOCK
-
-#define COMMAND_FINISHED_CMD52_TIMEOUT_LOOPS (1000)
-#define COMMAND_FINISHED_CMD53_TIMEOUT_LOOPS (1000)
-#define SDIO_TX_RX_COMPLETE_TIMEOUT_LOOPS    (1000)
-#endif
-
-#if defined(STM32H753xx)
-#define SDIO_RESPONSE_SHORT             SDMMC_RESPONSE_SHORT
-#define SDIO_WAIT_NO                    SDMMC_WAIT_NO
-#define SDIO_CPSM_ENABLE                SDMMC_CPSM_ENABLE
-#define SDIO_CMDTRANS                   SDMMC_CMD_CMDTRANS
-#define SDIO_FLAG_CMDACT                (SDMMC_STA_CPSMACT | SDMMC_STA_DPSMACT)
-#define SDIO_TRANSFER_DIR_TO_SDIO       SDMMC_TRANSFER_DIR_TO_SDMMC
-#define SDIO_TRANSFER_DIR_TO_CARD       SDMMC_TRANSFER_DIR_TO_CARD
-#define SDIO_TRANSFER_MODE_BLOCK        SDMMC_TRANSFER_MODE_BLOCK
-#define SDIO_DPSM_ENABLE                SDMMC_DPSM_ENABLE
-#define SDIO_DPSM_DISABLE                SDMMC_DPSM_DISABLE
-#define SDIO_DCTRL_SDIOEN               SDMMC_DCTRL_SDIOEN       /* 1 << 11 */
-#define SDIO_DCTRL_DTMODE_1             SDMMC_DCTRL_DTMODE_1     /* 1<<3 */
-#define SDIO_STA_DTIMEOUT               SDMMC_STA_DTIMEOUT 
-#define SDIO_STA_CTIMEOUT               SDMMC_STA_CTIMEOUT
-#define SDIO_STA_CCRCFAIL               SDMMC_STA_CCRCFAIL
-#define SDIO_STA_DCRCFAIL               SDMMC_STA_DCRCFAIL
-#define SDIO_STA_TXUNDERR               SDMMC_STA_TXUNDERR
-#define SDIO_STA_RXOVERR                SDMMC_STA_RXOVERR
-#define SDIO_STA_TXACT                  SDMMC_STA_CPSMACT
-#define SDIO_STA_RXACT                  SDMMC_STA_DPSMACT
-#define SDIO_STA_CMDREND                SDMMC_STA_CMDREND
-#define SDIO_STA_CMDSENT                SDMMC_STA_CMDSENT
-#define SDIO_CMD_CMDTRANS               SDMMC_CMD_CMDTRANS
-#define SDIO    SDMMC2
-
-#else
-#define SDIO_CMD_CMDTRANS               0
-#endif
-
-
-#define SDIO_DMA_TIMEOUT_LOOPS               (1000000)
-#define BUS_LEVEL_MAX_RETRIES                      10
-
-#define SDIO_CMD_5      5
-#define SDIO_CMD_53     53
-
-#define  SDIO_STA_STBITERR                   ((uint32_t)0x00000200)        /*!<Start bit not detected on all data signals in wide bus mode */
-
-
-#if defined(STM32F412xG)
-#define SDIO_ERROR_MASK                    ( SDIO_STA_DCRCFAIL | SDIO_STA_CTIMEOUT | SDIO_STA_DTIMEOUT | SDIO_STA_TXUNDERR | SDIO_STA_RXOVERR | SDIO_STA_STBITERR )
-#elif defined(STM32H753xx)
-#define SDIO_ERROR_MASK                    ( SDMMC_STA_CCRCFAIL | SDMMC_STA_DCRCFAIL | SDMMC_STA_CTIMEOUT | SDMMC_STA_DTIMEOUT | SDMMC_STA_TXUNDERR | SDMMC_STA_RXOVERR )
-#define SDMMC_MASK_SDIOTIE
-#else
-#define SDIO_ERROR_MASK                    ( SDIO_STA_CCRCFAIL | SDIO_STA_DCRCFAIL | SDIO_STA_CTIMEOUT | SDIO_STA_DTIMEOUT | SDIO_STA_TXUNDERR | SDIO_STA_RXOVERR | SDIO_STA_STBITERR )
-#endif
-
-
-
-#define LINK_MTU        1024
-#define MAX(a,b)        (a>b)?a:b
-
-
-
-extern pinconfig_t     PinConfig[];
-extern  SD_HandleTypeDef hsd;
-
-
-
-
-static whd_driver_t whd_handler;
-static cyhal_sdio_irq_handler_t sdio_irq_handler;
-
-#ifdef MEMCPY_RX
-static uint8_t       temp_dma_buffer[2048] __attribute__ ((aligned (8)));;
-#endif
-static uint8_t*                     user_data;
-static uint32_t                     user_data_size;
-static uint8_t*                     dma_data_source;
-static uint32_t                     dma_transfer_size;
-static  cyhal_transfer_t    current_transfer_direction;
-
-
-static  cy_semaphore_t sdio_transfer_finished_semaphore;
-volatile static uint32_t       sdio_transfer_failed=0;
-volatile static uint32_t       irqstatus=0;
-static int current_command=0;
-
-
-cy_rslt_t cyhal_sdio_init(cyhal_sdio_t *obj, cyhal_gpio_t cmd, cyhal_gpio_t clk, cyhal_gpio_t data0, cyhal_gpio_t data1,
-                          cyhal_gpio_t data2, cyhal_gpio_t data3)
-{
-  cy_rslt_t     ret= CY_RSLT_SUCCESS;
-  
-  __HAL_RCC_GPIOB_CLK_ENABLE();
-  __HAL_RCC_GPIOC_CLK_ENABLE();
-  __HAL_RCC_GPIOD_CLK_ENABLE();
-  __HAL_RCC_GPIOG_CLK_ENABLE();
-  __HAL_RCC_GPIOJ_CLK_ENABLE();
-  __HAL_RCC_SDMMC2_CLK_ENABLE();
-
-  HAL_GPIO_Init(PinConfig[cmd].port, &PinConfig[cmd].config);
-  HAL_GPIO_Init(PinConfig[clk].port, &PinConfig[clk].config);
-  HAL_GPIO_Init(PinConfig[data0].port, &PinConfig[data0].config);
-  HAL_GPIO_Init(PinConfig[data1].port, &PinConfig[data1].config);
-  HAL_GPIO_Init(PinConfig[data2].port, &PinConfig[data2].config);
-  HAL_GPIO_Init(PinConfig[data3].port, &PinConfig[data3].config);
-
-#if defined(STM32H753xx)
-    /* Reset SDIO Block */
-    SDMMC_PowerState_OFF( SDMMC2 );
-    __HAL_RCC_SDMMC2_FORCE_RESET( );
-    __HAL_RCC_SDMMC2_RELEASE_RESET( );
-
-    /* Enable the SDIO Clock */
-    __HAL_RCC_SDMMC2_CLK_ENABLE( );
-#else
-    __HAL_RCC_SDIO_CLK_ENABLE();
-#endif
-
-  #if !(defined(DUAL_CORE) && defined(CORE_CM4))
-   /* Disable DCache for STM32H7 family */
-    SCB_CleanDCache();
-    SCB_DisableDCache();
-  #endif
-
-    //printf("in init: %d\n", sdio_transfer_finished_semaphore);
-    
-  // Lower  speed configuration
-#if defined(STM32H753xx)
-    
- 
-    
-    SDMMC_InitTypeDef sdio_init_structure;
-
-    sdio_init_structure.ClockDiv            = SDMMC_INIT_CLK_DIV;
-    sdio_init_structure.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
-    sdio_init_structure.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
-    sdio_init_structure.BusWide             = SDMMC_BUS_WIDE_1B;
-    sdio_init_structure.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
-    ret                              = SDMMC_Init( SDMMC2, sdio_init_structure );
-    ret                             |= SDMMC_PowerState_ON( SDMMC2 );
-    ret                             |= SDMMC_SetSDMMCReadWaitMode( SDMMC2, SDMMC_READ_WAIT_MODE_CLK );
-    if ( ret )
-    {
-        return ret;
-    }
-   
-    /* Clear all SDIO interrupts */
-    SDMMC2->ICR = (uint32_t) 0xffffffff;
-
-        /* Turn on SDIO IRQ */
-    /* Must be lower priority than the value of configMAX_SYSCALL_INTERRUPT_PRIORITY */
-    /* otherwise FreeRTOS will not be able to mask the interrupt */
-    /* keep in mind that ARMCM7 interrupt priority logic is inverted, the highest value */
-    /* is the lowest priority */
-    HAL_NVIC_EnableIRQ( (IRQn_Type) SDMMC2_IRQn );
-    HAL_NVIC_SetPriority(SDMMC2_IRQn, 5, 0);
-
-    //printf("after enable sdio: %d\n", sdio_transfer_finished_semaphore);
-
-
-#else
-  hsd.Instance = SDIO;
-  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
-  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
-  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
-  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_ENABLE;
-  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
-  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
-  hsd.Init.ClockDiv = 120; /* 48Khz/ 120 =  400 Khz */
- 
-  
-   /* Initialize SDIO peripheral interface with default configuration */
-  SDIO_Init(hsd.Instance, hsd.Init);
-  
-  /* Disable SDIO Clock */
-  __HAL_SD_DISABLE(&hsd); 
-  
-  /* Set Power State to ON */
-  SDIO_PowerState_ON(hsd.Instance);
-  
-   *(__IO uint32_t *) DCTRL_RWMOD_BB =  ((uint32_t)0x00000001);
-
-  /* Enable SDIO Clock */
-  __HAL_SD_ENABLE(&hsd);
-  
-  /* Required power up waiting time before starting the SD initialization sequence */
-  HAL_Delay(2U);
-  
-  /* Turn on SDIO IRQ */
-  SDIO->ICR = (uint32_t) 0xffffffff;
-
-  /* Must be lower priority than the value of configMAX_SYSCALL_INTERRUPT_PRIORITY */
-  /* otherwise FreeRTOS will not be able to mask the interrupt */
-  /* keep in mind that ARMCM3 interrupt priority logic is inverted, the highest value */
-  /* is the lowest priority */
-  NVIC_EnableIRQ( ( IRQn_Type ) SDIO_IRQn );
-  NVIC_EnableIRQ( ( IRQn_Type ) DMA2_Stream3_IRQn );
-
-  HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
-  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
-#endif
-
-  if (cy_rtos_init_semaphore(&sdio_transfer_finished_semaphore, 1, 0) != WHD_SUCCESS)
-  {
-    cy_rtos_deinit_semaphore(&sdio_transfer_finished_semaphore);
-    return -1;
-  }
-
-  //printf("cy_rtos_init_semaphore: %d\n", sdio_transfer_finished_semaphore);
-
-  return CY_RSLT_SUCCESS;
-}
-
-
-//uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout);
-cy_rslt_t cyhal_sdio_send_cmd(const cyhal_sdio_t *obj, cyhal_transfer_t direction, cyhal_sdio_command_t command,
-                              uint32_t argument, uint32_t *response)
-
-{
-    uint32_t loop_count = 0;
-    cy_rslt_t result;
-    uint16_t attempts = 0;
-    uint32_t temp_sta;
-    if ( response != NULL )
-    {
-        *response = 0;
-    }
-    current_command = 0;
-    //platform_mcu_powersave_disable();
-
-    /* Ensure the bus isn't stuck half way through transfer */
-    //DMA2_Stream3->CR   = 0;
-    //PRINTF("power %lx\nclockcr %lx\n",SDIO->POWER,SDIO->CLKCR);
-
-restart:
-    SDIO->ICR = (uint32_t) 0xFFFFFFFF;
-    ++attempts;
-
-    /* Check if we've tried too many times */
-    if (attempts >= (uint16_t) BUS_LEVEL_MAX_RETRIES)
-    {
-        /* WWD_SDIO_RETRIES_EXCEEDED */
-        result = -1;
-        goto exit;
-    }
-
-
-    /* Send the command */
-    SDIO->ARG = argument;
-    SDIO->CMD = (uint32_t) ( command | SDIO_RESPONSE_SHORT | SDIO_WAIT_NO | SDIO_CPSM_ENABLE  );
-    loop_count = (uint32_t) COMMAND_FINISHED_CMD52_TIMEOUT_LOOPS;
-    do
-    {
-      temp_sta = SDIO->STA;
-      loop_count--;
-      if ( loop_count == 0 || (( response != NULL) && (( temp_sta & SDIO_ERROR_MASK ) != 0))  )
-      {
-        WPRINT_MACRO( ("Restart single access loop count %ld  stat %lx\n",loop_count,temp_sta) );
-        HAL_Delay(10U);
-        goto restart;
-      }
-     } while ( ( temp_sta & SDIO_FLAG_CMDACT ) != 0);
-    
-#if defined(STM32F412xG)
-        /* Errata */
-        if (command == SDIO_CMD_5)
-            SDIO->ICR = SDIO_ICR_CCRCFAILC;
-#endif
-
-    if ( response != NULL )
-    {
-        *response = SDIO->RESP1;
-    }
-    result = CY_RSLT_SUCCESS;
-
-exit:
-
-     if (result)
-     {
-       WPRINT_MACRO( ("SDIO->POWER %lx \n",SDIO->POWER) );
-       WPRINT_MACRO( ("SDIO->CLKCR %lx \n",SDIO->CLKCR) );
-       WPRINT_MACRO( ("result %lx \n", result) );
-       WPRINT_MACRO( ("cyhal_sdio_send_cmd %s\n",(result==0)? "Passed":"Failed") );
-       //while(1);
-     }
-  //  platform_mcu_powersave_enable();
-#if !defined(STM32F412xG) && !defined(STM32H753xx)
-    SDIO->MASK = SDIO_MASK_SDIOITIE;
-#endif
-#if defined(STM32H753xx)
-    SDMMC2->CMD = 0;
-#endif
-
-    //PRINTF("%d %s cmd 0x%x  arg 0x%x  resp 0x%x\n",num++,(direction!=CYHAL_READ)?"Write":"Read",command,argument,(response)?*response:0);
-    return result;
-}
-
-
-
-#if defined(STM32H753xx)
-cy_rslt_t sdio_enable_high_speed(void) {
-    SDMMC_InitTypeDef sdio_init_structure;
-
-#ifdef SLOW_SDIO_CLOCK
-    sdio_init_structure.ClockDiv       = (uint8_t) 10; /* 10 = 10 MHz if SDIO clock = 200MHz */
-#else
-    sdio_init_structure.ClockDiv       = SDMMC_HSpeed_CLK_DIV;
-#endif
-    sdio_init_structure.ClockEdge      = SDMMC_CLOCK_EDGE_RISING;
-    sdio_init_structure.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
-#ifndef SDIO_1_BIT
-    sdio_init_structure.BusWide        = SDMMC_BUS_WIDE_4B;
-#else
-    sdio_init_structure.BusWide        = SDMMC_BUS_WIDE_1B;
-#endif
-    sdio_init_structure.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
-
-    SDMMC_Init( SDMMC2, sdio_init_structure );
-    return CY_RSLT_SUCCESS;
-}
-#else
-
-cy_rslt_t sdio_enable_high_speed(void) {
-
-  hsd.Instance = SDIO;
-  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
-  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
-  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
- 
-#ifndef SDIO_1_BIT
-  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
-#else
-  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
-#endif
-  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
-
-#ifdef SLOW_SDIO_CLOCK
-  hsd.Init.ClockDiv = 1; //30OK , 15 failed ?  48Mhz / 120 < 400 Khz
-#else
-  hsd.Init.ClockDiv = 0; //48Khz / 120 < 400 Khz
-#endif
-
-  /* Initialize SDIO peripheral interface with new configuration */
-  SDIO_Init(hsd.Instance, hsd.Init);
-  
- /* Set Power State to ON */
-  SDIO_PowerState_ON(hsd.Instance);
-  
-    *(__IO uint32_t *) DCTRL_RWMOD_BB =  ((uint32_t)0x00000001);
-
-  /* Enable SDIO Clock */
-  __HAL_SD_ENABLE(&hsd);
- __SDIO_DMA_ENABLE(&hsd) ;
-  return CY_RSLT_SUCCESS;
-}
-#endif
-
-static  uint32_t        find_optimal_block_size(uint32_t data_size )
-{
-    if ( data_size > (uint32_t) 256 )
-        return 512;
-    if ( data_size > (uint32_t) 128 )
-        return 256;
-    if ( data_size > (uint32_t) 64 )
-        return 128;
-    if ( data_size > (uint32_t) 32 )
-        return 64;
-    if ( data_size > (uint32_t) 16 )
-        return 32;
-    if ( data_size > (uint32_t) 8 )
-        return 16;
-    if ( data_size > (uint32_t) 4 )
-        return 8;
-    if ( data_size > (uint32_t) 2 )
-        return 4;
-
-    return 4;
-}
-
-
-
-
-static uint32_t sdio_get_blocksize(uint32_t blocksize)
-{
-  uint32_t      n=0;
-  blocksize>>=1;
-  while(blocksize)
-  {
-    n++;
-    blocksize>>=1;
-  }
-  n<<=4;
-  return n;
-}
-  uint32_t      dctrl;
-
-static void sdio_prepare_data_transfer( cyhal_transfer_t direction, uint32_t block_size, uint8_t* data, uint16_t data_size ) 
-{
-    /* Setup a single transfer using the temp buffer */
-    user_data         = data;
-    user_data_size    = data_size;
-    dma_transfer_size = (uint32_t) ( ( ( data_size + (uint16_t) block_size - 1 ) / (uint16_t) block_size ) * (uint16_t) block_size );
-
-    if ( direction == CYHAL_WRITE )
-    { 
-#if defined (STM32H753xx)
-  #if !(defined(DUAL_CORE) && defined(CORE_CM4))
-      //SCB_CleanDCache_by_Addr ((uint32_t *)data, data_size+32);
-      SCB_CleanDCache_by_Addr ((uint32_t *)dma_data_source, data_size+32);
-  #endif
-#endif
-      #ifdef MEMCPY_RX
-        memcpy(temp_dma_buffer, data, data_size);
-        dma_data_source = temp_dma_buffer;
-      #else
-        dma_data_source = data;
-      #endif
-    }
-    else
-    {
-#ifdef MEMCPY_RX
-        dma_data_source = (uint8_t*)temp_dma_buffer;
-#else
-        dma_data_source = data;
-#endif
-      //VIKR 
-      //memset(dma_data_source,0x12,data_size);
-
-#if !(defined(DUAL_CORE) && defined(CORE_CM4))
-        /* Cache-Invalidate the output from DMA */
-        //SCB_InvalidateDCache_by_Addr((uint32_t *)dma_data_source , data_size+32);
-        SCB_CleanDCache_by_Addr ((uint32_t *)dma_data_source, data_size+32);
-#endif
-    }
-
-    SDIO->DTIMER = (uint32_t) 0xFFFFFFFF;
-    SDIO->DLEN   = dma_transfer_size;
-#if defined (STM32H753xx)
-    dctrl= sdio_get_blocksize(block_size) | ((direction==CYHAL_READ)? SDIO_TRANSFER_DIR_TO_SDIO:SDIO_TRANSFER_DIR_TO_CARD) | SDIO_TRANSFER_MODE_BLOCK | SDIO_DPSM_DISABLE  | SDIO_DCTRL_SDIOEN;
-    SDIO->DCTRL = dctrl;
-#else
-    SDIO->DCTRL  = sdio_get_blocksize(block_size) | ((direction==CYHAL_READ)? SDIO_TRANSFER_DIR_TO_SDIO:SDIO_TRANSFER_DIR_TO_CARD) | SDIO_TRANSFER_MODE_BLOCK | SDIO_DPSM_ENABLE | SDIO_DCTRL_DTMODE_1 | SDIO_DCTRL_SDIOEN;    
-#endif
-    
-#if defined (STM32H753xx)
-    SDMMC2->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
-    SDMMC2->IDMABASE0 = (uint32_t) dma_data_source;
-#else
-    /* DMA2 Stream3 */
-    DMA2_Stream3->CR   = 0;
-    DMA2->LIFCR        = (uint32_t) ( 0x3F << 22 );
-    DMA2_Stream3->FCR  = (uint32_t) ( 0x00000021 | DMA_FIFOMODE_ENABLE | DMA_FIFO_THRESHOLD_FULL );
-    DMA2_Stream3->PAR  = (uint32_t) &SDIO->FIFO;
-    DMA2_Stream3->M0AR = (uint32_t) dma_data_source;
-    DMA2_Stream3->NDTR = dma_transfer_size/4;
-#endif
-}
-
-
-void sdio_enable_bus_irq( void )
-{
-#if defined(STM32F412xG)
-    SDIO->MASK = SDIO_MASK_CMDRENDIE | SDIO_MASK_CMDSENTIE;
-#elif defined (STM32H753xx)
-    SDMMC2->MASK = SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND | SDMMC_IT_CMDREND | SDMMC_IT_CMDSENT;
-#else
-    SDIO->MASK = SDIO_MASK_SDIOITIE | SDIO_MASK_CMDRENDIE | SDIO_MASK_CMDSENTIE;
-#endif
-
-}
-
-static volatile bool sdio_transfer_finished_var;
-
-cy_rslt_t cyhal_sdio_bulk_transfer(cyhal_sdio_t *obj, cyhal_transfer_t direction, uint32_t argument,
-                                   const uint32_t *data, uint16_t length, uint32_t *response)
-
-{
-    cy_rslt_t result;
- 
-    uint32_t loop_count = 0;
-    uint16_t attempts = 0;
-    uint32_t  block_size=64;
-    sdio_cmd_argument_t arg;
-    uint32_t      cmd;
-    current_command = SDIO_CMD_53;
-    current_transfer_direction = direction;
-    arg.value = argument;
-    sdio_enable_bus_irq();
-    if ( response != NULL )
-    {
-        *response = 0;
-    }
-
-    /* Ensure the bus isn't stuck half way through transfer */
-    // DMA2_Stream3->CR   = 0;
-
-restart:
-
-    sdio_transfer_failed=0;
-    SDMMC2->ICR = (uint32_t) 0xFFFFFFFF;
-    ++attempts;
-
-    /* Check if we've tried too many times */
-    if (attempts >= (uint16_t) BUS_LEVEL_MAX_RETRIES)
-    {
-        /* WWD_SDIO_RETRIES_EXCEEDED */
-        WPRINT_MACRO(("Too much attempt\n"));
-        result = -1;
-        goto exit;
-    }
-
-    /* Dodgy STM32 hack to set the CMD53 byte mode size to be the same as the block size */
-    if ( arg.cmd53.block_mode == 0 )
-    {
-      block_size = find_optimal_block_size( arg.cmd53.count );
-      if ( block_size < SDIO_512B_BLOCK )
-      {
-        arg.cmd53.count = block_size;
-      }
-      else
-      {
-        arg.cmd53.count = 0;
-      }
-      argument = arg.value;
-    }
-
-    SDMMC2->CMD |= SDMMC_CMD_CMDTRANS;
-    
-    /* Prepare the SDIO for a data transfer */
-    sdio_prepare_data_transfer( direction, block_size, (uint8_t*) data, (uint32_t) length );
-
-    sdio_transfer_finished_var = false;
-
-    /* Send the command */
-    //PRINTF("%d bs=%d argument=%x\n",num++,block_size,argument);
-    SDMMC2->ARG = argument;
-    cmd = (uint32_t) ( SDIO_CMD_53 | SDMMC_RESPONSE_SHORT | SDMMC_WAIT_NO | SDMMC_CPSM_ENABLE | SDMMC_CMD_CMDTRANS );
-    SDMMC2->CMD = cmd;
-    /* Wait for the whole transfer to complete */
-
-    //printf("cy_rtos_get_semaphore: %d\n", sdio_transfer_finished_semaphore);
-
-#if 0
-    uint32_t start = HAL_GetTick();
-    result = CY_RSLT_SUCCESS;
-    while (sdio_transfer_finished_var == false && ((HAL_GetTick() - start) < 50)) {
-
-    }
-    if ((HAL_GetTick() - start) >= 50) {
-      result = -1;
-    }
-#else
-    result = cy_rtos_get_semaphore(&sdio_transfer_finished_semaphore, 50, WHD_FALSE);
-#endif
-    if ( result != CY_RSLT_SUCCESS )
-    {
-      WPRINT_MACRO(("failed getting semaphore\n"));
-      goto exit;
-    }
-    if ( sdio_transfer_failed  )
-    {
-      WPRINT_MACRO( ("try again sdio_transfer_failed  %x irq %x\n",sdio_transfer_failed,irqstatus) );
-      goto restart;
-    }
-    /* Check if there were any SDIO errors */
-    if ( ( SDIO->STA & ( SDIO_STA_DTIMEOUT | SDIO_STA_CTIMEOUT ) ) != 0 )
-    {
-      WPRINT_MACRO(("sdio errors SDIO_STA_DTIMEOUT | SDIO_STA_CTIMEOUT\n"));
-      goto restart;
-    }
-    else if ( ( ( SDIO->STA & ( SDIO_STA_CCRCFAIL | SDIO_STA_DCRCFAIL | SDIO_STA_TXUNDERR | SDIO_STA_RXOVERR ) ) != 0 ) )
-    {
-      WPRINT_MACRO(("sdio errors SDIO_STA_CCRCFAIL | SDIO_STA_DCRCFAIL | SDIO_STA_TXUNDERR | SDIO_STA_RXOVER \n"));
-      goto restart;
-    }
-
-#if 0
-    /* Wait till complete */
-    loop_count = (uint32_t) SDIO_TX_RX_COMPLETE_TIMEOUT_LOOPS*1000;
-    do
-    {
-      loop_count--;
-      if ( loop_count == 0 || ( ( SDIO->STA & SDIO_ERROR_MASK ) != 0 ) )
-      {
-        PRINTF("sdio errors SDIO->STA & SDIO_ERROR_MASK or TO  , loopct=%d \n",loop_count);
-        goto restart;
-      }
-    } while ( ( SDIO->STA & ( SDIO_STA_TXACT | SDIO_STA_RXACT ) ) != 0 );
-#endif
-
-#ifdef MEMCPY_RX
-    if ( direction == CYHAL_READ )
-    {
-      memcpy( user_data, dma_data_source, (size_t) user_data_size );
-    }
-#endif
- 
-  if ( response != NULL )
-  {
-    *response = SDIO->RESP1;
-  }
-  result = CY_RSLT_SUCCESS;
-
-exit:
-#if !defined(STM32F412xG) && !defined(STM32H753xx)
-    SDIO->MASK = SDIO_MASK_SDIOITIE;
-#endif
-
-#if defined(STM32H753xx)
-    SDMMC2->CMD = 0;
-#endif
-
-  //HAL_Delay(30);
-  if (0) { //(direction==CYHAL_READ) {
-    WPRINT_MACRO(("%d %s cmd 53 argument %lx datasize %d  blocknumber 0x%x   cmdis %lx %lu dctrl = %x\n",num++,(direction!=CYHAL_READ)?"Write":"Read",argument,length,arg.cmd53.count,cmd,cmd,dctrl));
-  }
-  return result;
-}
-
-
-void cyhal_sdio_register_irq(cyhal_sdio_t *obj, cyhal_sdio_irq_handler_t handler, void *handler_arg)
-{
-  whd_handler = (whd_driver_t)handler_arg;
-  sdio_irq_handler = handler;
-}
-
-void cyhal_sdio_irq_enable(cyhal_sdio_t *obj, cyhal_sdio_irq_event_t event, bool enable)
-{
-
-}
-
-#if defined (STM32H753xx)
-void SDMMC2_IRQHandler(void )
-{
-    uint32_t intstatus = SDIO->STA;
-  //  WWD_BUS_STATS_INCREMENT_VARIABLE( sdio_intrs );
-
-    irqstatus = intstatus;
-//VIKR  | SDIO_STA_STBITERR )
-   if ( ( intstatus & ( SDIO_STA_CCRCFAIL | SDIO_STA_DCRCFAIL | SDIO_STA_TXUNDERR | SDIO_STA_RXOVERR )) != 0 )
-    {
-        //WWD_BUS_STATS_INCREMENT_VARIABLE( error_intrs );
-        //printf("sdio error flagged\n");
-        sdio_transfer_failed = intstatus;
-        SDIO->ICR = (uint32_t) 0xffffffff;
-        cy_rtos_set_semaphore(&sdio_transfer_finished_semaphore, WHD_TRUE);
-        //sdio_transfer_finished_var = true;
-    }
-    else
-    {
-        if ((intstatus & (SDMMC_STA_CMDREND | SDMMC_STA_CMDSENT)) != 0)
-        {
-            if ( ( SDMMC2->RESP1 & 0x800 ) != 0 )
-            {
-                sdio_transfer_failed = irqstatus;
-                //sdio_transfer_finished_var = true;
-                cy_rtos_set_semaphore(&sdio_transfer_finished_semaphore, WHD_TRUE);
-            }
-
-            /* Clear all command/response interrupts */
-            SDMMC2->ICR = (SDMMC_STA_CMDREND | SDMMC_STA_CMDSENT);
-        }
-
-        /* Check whether the external interrupt was triggered */
-        if (intstatus & SDMMC_STA_SDIOIT)
-        {
-            /* Clear the interrupt */
-            SDMMC2->ICR = SDMMC_STA_SDIOIT;
-            /* Mask interrupt, to be unmasked later by WICED WWD thread */
-            //SDMMC1->MASK &= ~(SDMMC_MASK_SDIOITIE);//VIKR (SDMMC_ICR_SDIOITC);
-            /* Inform WICED WWD thread */
-            // whd_thread_notify_irq(whd_handler);
-            sdio_irq_handler(whd_handler, CYHAL_SDIO_CARD_INTERRUPT);
-            //cy_rtos_set_semaphore(&sdio_transfer_finished_semaphore, WHD_TRUE);
-        }
-
-        if (intstatus & SDMMC_STA_DATAEND)
-        {
-            SDMMC2->ICR      = SDMMC_STA_DATAEND;
-            SDMMC2->DLEN     = 0;
-            SDMMC2->DCTRL    = SDMMC_DCTRL_SDIOEN;
-            SDMMC2->IDMACTRL = SDMMC_DISABLE_IDMA;
-            SDMMC2->CMD      = 0;
-            //sdio_transfer_finished_var = true;
-            cy_rtos_set_semaphore(&sdio_transfer_finished_semaphore, WHD_TRUE);
-        }
-    }
-}
-#else
-void sdio_irq(void )
-{
-    uint32_t intstatus = SDIO->STA;
-  //  WWD_BUS_STATS_INCREMENT_VARIABLE( sdio_intrs );
-#if defined(STM32F412xG)
-    if (current_command == SDIO_CMD_5)
-        SDIO->ICR = SDIO_ICR_CCRCFAILC;
-#endif
-
-    irqstatus = intstatus;
-
-   if ( ( intstatus & ( SDIO_STA_CCRCFAIL | SDIO_STA_DCRCFAIL | SDIO_STA_TXUNDERR | SDIO_STA_RXOVERR  | SDIO_STA_STBITERR )) != 0 )
-    {
-        //WWD_BUS_STATS_INCREMENT_VARIABLE( error_intrs );
-        //wiced_assert("sdio error flagged",0);
-        sdio_transfer_failed = intstatus;
-        SDIO->ICR = (uint32_t) 0xffffffff;
-        cy_rtos_set_semaphore(&sdio_transfer_finished_semaphore, WHD_TRUE);
-    }
-    else
-    {
-        if ((intstatus & (SDIO_STA_CMDREND | SDIO_STA_CMDSENT)) != 0)
-        {
-            if ( ( SDIO->RESP1 & 0x800 ) != 0 )
-            {
-                sdio_transfer_failed = irqstatus;
-                cy_rtos_set_semaphore(&sdio_transfer_finished_semaphore, WHD_TRUE);
-            }
-            else if (current_command == SDIO_CMD_53)
-            {
-                if (current_transfer_direction == CYHAL_WRITE)
-                {
-                    DMA2_Stream3->CR = DMA_MEMORY_TO_PERIPH |
-                                       DMA_CHANNEL_4 | DMA_PINC_DISABLE | DMA_MINC_ENABLE |
-                                       DMA_PDATAALIGN_WORD | DMA_MDATAALIGN_WORD |
-                                       DMA_NORMAL | DMA_PRIORITY_VERY_HIGH |
-                                       DMA_MBURST_INC4 | DMA_PBURST_INC4 | DMA_SxCR_PFCTRL | DMA_SxCR_EN | DMA_SxCR_TCIE;
-                }
-                else
-                {
-                    DMA2_Stream3->CR = DMA_PERIPH_TO_MEMORY |
-                                       DMA_CHANNEL_4 | DMA_PINC_DISABLE | DMA_MINC_ENABLE |
-                                       DMA_PDATAALIGN_WORD | DMA_MDATAALIGN_WORD |
-                                       DMA_NORMAL | DMA_PRIORITY_VERY_HIGH |
-                                       DMA_MBURST_INC4 | DMA_PBURST_INC4 | DMA_SxCR_PFCTRL | DMA_SxCR_EN | DMA_SxCR_TCIE;
-                }
-            }
-
-            /* Clear all command/response interrupts */
-            SDIO->ICR = (SDIO_STA_CMDREND | SDIO_STA_CMDSENT);
-        }
-
-        /* Check whether the external interrupt was triggered */
-        if ( ( intstatus & SDIO_STA_SDIOIT ) != 0 )
-        {
-            /* Clear the interrupt and then inform WICED thread */
-            SDIO->ICR = SDIO_ICR_SDIOITC;
-            whd_thread_notify_irq(whd_handler);
-        }
-    }
-}
-#endif
-
-void  sdio_dma_irq(void)
-{
-    /* Clear interrupt */
-    DMA2->LIFCR = (uint32_t) (0x3F << 22);
-    cy_rtos_set_semaphore(&sdio_transfer_finished_semaphore, WHD_TRUE);
-}
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_sdio.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_sdio.h
index 7e07a1ed72..d5600efd99 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_sdio.h
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_sdio.h
@@ -9,7 +9,7 @@
 *
 ********************************************************************************
 * \copyright
-* Copyright 2018-2019 Cypress Semiconductor Corporation
+* Copyright 2018-2020 Cypress Semiconductor Corporation
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
@@ -26,16 +26,58 @@
 *******************************************************************************/
 
 /**
- * \addtogroup group_hal_sdio SDIO (Secure Digital Input Output)
- * \ingroup group_hal
- * \{
- * High level interface for interacting with the Cypress SDIO interface.
- *
- * \defgroup group_hal_sdio_macros Macros
- * \defgroup group_hal_sdio_functions Functions
- * \defgroup group_hal_sdio_data_structures Data Structures
- * \defgroup group_hal_sdio_enums Enumerated Types
- */
+* \addtogroup group_hal_sdio SDIO (Secure Digital Input Output)
+* \ingroup group_hal
+* \{
+* High level interface to the Secure Digital Input Output (SDIO).
+*
+* This driver allows commands to be sent over the SDIO bus; the supported commands
+* can be found in \ref cyhal_sdio_command_t. Bulk data transfer is also supported
+* via cyhal_sdio_bulk_transfer().
+*
+* The SDIO protocol is an extension of the SD
+* interface for general I/O functions. Refer to the SD Specifications Part 1 SDIO
+* Specifications Version 4.10 for more information on the SDIO protocol and specifications.
+*
+*
+* \section subsection_sdio_features Features
+* * Supports 4-bit interface
+* * Supports Ultra High Speed (UHS-I) mode
+* * Supports Default Speed (DS), High Speed (HS), SDR12, SDR25 and SDR50 speed modes
+* * Supports SDIO card interrupts in both 1-bit and 4-bit modes
+* * Supports Standard capacity (SDSC), High capacity (SDHC) and Extended capacity (SDXC) memory
+*
+* \section subsection_sdio_quickstart Quick Start
+*
+* \ref cyhal_sdio_init initializes the SDIO peripheral and passes a pointer to the SDIO block through the **obj** object of type \ref cyhal_sdio_t.
+*
+* \section subsection_sdio_code_snippets Code Snippets
+*
+* \subsection subsection_sdio_use_case_1 Snippet1: Simple SDIO Initialization example
+* The following snippet shows how to initialize the SDIO interface with a pre-defined configuration
+*
+* \snippet sdio.c snippet_cyhal_sdio_simple_init
+*
+* \subsection subsection_sdio_use_case_2 Snippet2: Configure Interrupt
+* The following snippet shows how to configure an interrupt and handle specific events. Refer \ref cyhal_sdio_event_t for different types of events.
+*
+* \snippet sdio.c snippet_cyhal_sdio_interrupt_callback
+*
+* \subsection subsection_sdio_use_case_3 Snippet3: Sending Commands
+* The following snippet shows how to send a particular command. Some steps of the card initialization have been provided for reference. Refer \ref cyhal_sdio_command_t for different commands.
+*
+* \snippet sdio.c snippet_cyhal_sdio_send_command
+*
+* \subsection subsection_sdio_use_case_4 Snippet4: Bulk Data Transfer
+* The following snippet shows how to start a bulk data transfer.
+*
+* \snippet sdio.c snippet_cyhal_sdio_bulk_transfer
+*
+* \subsection subsection_sdio_use_case_5 Snippet5: Async Data Transfer
+*
+* The following snippet shows how to start an async data transfer.
+* \snippet sdio.c snippet_cyhal_sdio_async_transfer
+*/
 
 #pragma once
 
@@ -43,132 +85,138 @@
 #include <stdbool.h>
 #include "cy_result.h"
 #include "cyhal_hw_types.h"
-#include "cyhal_modules.h"
 
 #if defined(__cplusplus)
 extern "C" {
 #endif
 
+/*******************************************************************************
+*       Defines
+*******************************************************************************/
 
-/**
- * \addtogroup group_hal_sdio_macros
- * \{
- */
-
-#define CYHAL_SDIO_RET_NO_ERRORS           (0x00)     /**< No error*/
-#define CYHAL_SDIO_RET_NO_SP_ERRORS        (0x01)     /**< Non-specific error code*/
-#define CYHAL_SDIO_RET_CMD_CRC_ERROR       (0x02)     /**< There was a CRC error on the Command/Response*/
-#define CYHAL_SDIO_RET_CMD_IDX_ERROR       (0x04)     /**< The index for the command didn't match*/
-#define CYHAL_SDIO_RET_CMD_EB_ERROR        (0x08)     /**< There was an end bit error on the command*/
-#define CYHAL_SDIO_RET_DAT_CRC_ERROR       (0x10)     /**< There was a data CRC Error*/
-#define CYHAL_SDIO_RET_CMD_TIMEOUT         (0x20)     /**< The command didn't finish before the timeout period was over*/
-#define CYHAL_SDIO_RET_DAT_TIMEOUT         (0x40)     /**< The data didn't finish before the timeout period was over*/
-#define CYHAL_SDIO_RET_RESP_FLAG_ERROR     (0x80)      /**< There was an error in the resposne flag for command 53*/
-
-#define CYHAL_SDIO_CLOCK_ERROR          (0x100)   /**< Failed to initial clock for SDIO */
-#define CYHAL_SDIO_BAD_ARGUMENT         (0x200)   /**< Bad argument passed for SDIO */
-#define CYHAL_SDIO_SEMA_NOT_INITED      (0x400)   /**< Semaphore is not initiated */
-#define CYHAL_SDIO_FUNC_NOT_SUPPORTED   (0x800)   /**< Function is not supported */
+#define CYHAL_SDIO_RET_NO_ERRORS           (0x00)    /**< No error*/
+#define CYHAL_SDIO_RET_NO_SP_ERRORS        (0x01)    /**< Non-specific error code*/
+#define CYHAL_SDIO_RET_CMD_CRC_ERROR       (0x02)    /**< There was a CRC error on the Command/Response*/
+#define CYHAL_SDIO_RET_CMD_IDX_ERROR       (0x04)    /**< The index for the command didn't match*/
+#define CYHAL_SDIO_RET_CMD_EB_ERROR        (0x08)    /**< There was an end bit error on the command*/
+#define CYHAL_SDIO_RET_DAT_CRC_ERROR       (0x10)    /**< There was a data CRC Error*/
+#define CYHAL_SDIO_RET_CMD_TIMEOUT         (0x20)    /**< The command didn't finish before the timeout period was over*/
+#define CYHAL_SDIO_RET_DAT_TIMEOUT         (0x40)    /**< The data didn't finish before the timeout period was over*/
+#define CYHAL_SDIO_RET_RESP_FLAG_ERROR     (0x80)    /**< There was an error in the resposne flag for command 53*/
+
+#define CYHAL_SDIO_CLOCK_ERROR             (0x100)    /**< Failed to initial clock for SDIO */
+#define CYHAL_SDIO_BAD_ARGUMENT            (0x200)    /**< Bad argument passed for SDIO */
+#define CYHAL_SDIO_SEMA_NOT_INITED         (0x400)    /**< Semaphore is not initiated */
+#define CYHAL_SDIO_FUNC_NOT_SUPPORTED      (0x800)    /**< Function is not supported */
+#define CYHAL_SDIO_CANCELED               (0x1000)    /**< Operation canceled */
+#define CYHAL_SDIO_PM_PENDING_ERROR       (0x2000)    /**< Transfer cannot be initiated after power mode transition allowed.*/
 
 /* HAL return value defines */
 
-/** Incorrect parameter value define */
-#define CYHAL_SDIO_RSLT_ERR_BAD_PARAM          CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, \
-                                                              CYHAL_RSLT_MODULE_SDIO, \
-                                                              CYHAL_SDIO_BAD_ARGUMENT)
+/** \addtogroup group_hal_results_sdio SDIO HAL Results
+ *  SDIO specific return codes
+ *  \ingroup group_hal_results
+ *  \{ *//**
+ */
 
+/** Incorrect parameter value define */
+#define CYHAL_SDIO_RSLT_ERR_BAD_PARAM               \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SDIO, CYHAL_SDIO_BAD_ARGUMENT))
 /** Clock initialization error define */
-#define CYHAL_SDIO_RSLT_ERR_CLOCK             CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, \
-                                                             CYHAL_RSLT_MODULE_SDIO, \
-                                                             CYHAL_SDIO_CLOCK_ERROR)
-
+#define CYHAL_SDIO_RSLT_ERR_CLOCK                   \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SDIO, CYHAL_SDIO_CLOCK_ERROR))
 /** Semaphore not initiated error define */
-#define CYHAL_SDIO_RSLT_ERR_SEMA_NOT_INITED   CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, \
-                                                             CYHAL_RSLT_MODULE_SDIO, \
-                                                             CYHAL_SDIO_SEMA_NOT_INITED)
-
+#define CYHAL_SDIO_RSLT_ERR_SEMA_NOT_INITED         \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SDIO, CYHAL_SDIO_SEMA_NOT_INITED))
 /** Error define based on SDIO lower function return value */
-#define CYHAL_SDIO_RSLT_ERR_FUNC_RET(retVal)  CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, \
-                                                             CYHAL_RSLT_MODULE_SDIO, (retVal) )
-
-/** \} group_hal_sdio_macros */
-
+#define CYHAL_SDIO_RSLT_ERR_FUNC_RET(retVal)        \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SDIO, ((uint16_t)retVal)))
+/** Define to indicate canceled operation */
+#define CYHAL_SDIO_RSLT_CANCELED                    \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SDIO, CYHAL_SDIO_CANCELED))
+/** Transfers are not allowed after the SDIO block has allowed power mode transition. */
+#define CYHAL_SDIO_RSLT_ERR_PM_PENDING              \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SDIO, CYHAL_SDIO_PM_PENDING_ERROR))
 
 /**
- * \addtogroup group_hal_sdio_enums
- * \{
+ * \}
  */
 
+
+/*******************************************************************************
+*       Enumerations
+*******************************************************************************/
+
 /** Commands that can be issued */
 typedef enum
 {
-    CYHAL_SDIO_CMD_GO_IDLE_STATE  =  0, //!> Go to idle state
-    CYHAL_SDIO_CMD_SEND_RELATIVE_ADDR  =  3, //!> Send a relative address
-    CYHAL_SDIO_CMD_IO_SEND_OP_COND  =  5, //!> Send an OP IO
-    CYHAL_SDIO_CMD_SELECT_CARD  =  7, //!> Send a card select
-    CYHAL_SDIO_CMD_GO_INACTIVE_STATE = 15, //!> Go to inactive state
-    CYHAL_SDIO_CMD_IO_RW_DIRECT = 52, //!> Perform a direct read/write
-    CYHAL_SDIO_CMD_IO_RW_EXTENDED = 53, //!> Perform an extended read/write
+    CYHAL_SDIO_CMD_GO_IDLE_STATE      =  0, //!< Go to idle state
+    CYHAL_SDIO_CMD_SEND_RELATIVE_ADDR =  3, //!< Send a relative address
+    CYHAL_SDIO_CMD_IO_SEND_OP_COND    =  5, //!< Send an OP IO
+    CYHAL_SDIO_CMD_SELECT_CARD        =  7, //!< Send a card select
+    CYHAL_SDIO_CMD_GO_INACTIVE_STATE  = 15, //!< Go to inactive state
+    CYHAL_SDIO_CMD_IO_RW_DIRECT       = 52, //!< Perform a direct read/write
+    CYHAL_SDIO_CMD_IO_RW_EXTENDED     = 53, //!< Perform an extended read/write
 } cyhal_sdio_command_t;
 
 /** Types of transfer that can be performed */
 typedef enum
 {
-    CYHAL_READ, //!> Read from the card
-    CYHAL_WRITE //!> Write to the card
+    CYHAL_READ, //!< Read from the card
+    CYHAL_WRITE //!< Write to the card
 } cyhal_transfer_t;
 
-/** Events that can cause an SDIO interrupt */
-typedef enum
-{
-    CYHAL_SDIO_CMD_COMPLETE   = 0x0001, //!> Command Complete
-    CYHAL_SDIO_XFER_COMPLETE  = 0x0002, //!> Host read/write transfer is complete
-    CYHAL_SDIO_BGAP_EVENT     = 0x0004, //!> This bit is set when both read/write transaction is stopped
-    CYHAL_SDIO_DMA_INTERRUPT  = 0x0008, //!> Host controller detects an SDMA Buffer Boundary during transfer
-    CYHAL_SDIO_BUF_WR_READY   = 0x0010, //!> This bit is set if the Buffer Write Enable changes from 0 to 1
-    CYHAL_SDIO_BUF_RD_READY   = 0x0020, //!> This bit is set if the Buffer Read Enable changes from 0 to 1
-    CYHAL_SDIO_CARD_INSERTION = 0x0040, //!> This bit is set if the Card Inserted in the Present State
-    CYHAL_SDIO_CARD_REMOVAL   = 0x0080, //!> This bit is set if the Card Inserted in the Present State
-    CYHAL_SDIO_CARD_INTERRUPT = 0x0100, //!> The synchronized value of the DAT[1] interrupt input for SD mode
-    CYHAL_SDIO_INT_A          = 0x0200, //!> Reserved: set to 0
-    CYHAL_SDIO_INT_B          = 0x0400, //!> Reserved: set to 0
-    CYHAL_SDIO_INT_C          = 0x0800, //!> Reserved: set to 0,
-    CYHAL_SDIO_RE_TUNE_EVENT  = 0x1000, //!> Reserved: set to 0,
-    CYHAL_SDIO_FX_EVENT       = 0x2000, //!> This status is set when R[14] of response register is set to 1
-    CYHAL_SDIO_CQE_EVENT      = 0x4000, //!> This status is set if Command Queuing/Crypto event has occurred
-    CYHAL_SDIO_ERR_INTERRUPT  = 0x8000, //!> If any of the bits in the Error Interrupt Status register are set
-    CYHAL_SDIO_ALL_INTERRUPTS = 0xE1FF, //!> Is used to enable/disable all interrupts
-} cyhal_sdio_irq_event_t;
-
-/** \} group_hal_sdio_enums */
-
-
-/**
- * \addtogroup group_hal_sdio_data_structures
- * \{
- */
+/** Types of events that could be asserted by SDIO */
+typedef enum {
+    /* Interrupt-based thread events */
+    CYHAL_SDIO_CMD_COMPLETE   = 0x00001,  //!< Command Complete
+    CYHAL_SDIO_XFER_COMPLETE  = 0x00002,  //!< Host read/write transfer is complete
+    CYHAL_SDIO_BGAP_EVENT     = 0x00004,  //!< This bit is set when both read/write transaction is stopped
+    CYHAL_SDIO_DMA_INTERRUPT  = 0x00008,  //!< Host controller detects an SDMA Buffer Boundary during transfer
+    CYHAL_SDIO_BUF_WR_READY   = 0x00010,  //!< This bit is set if the Buffer Write Enable changes from 0 to 1
+    CYHAL_SDIO_BUF_RD_READY   = 0x00020,  //!< This bit is set if the Buffer Read Enable changes from 0 to 1
+    CYHAL_SDIO_CARD_INSERTION = 0x00040,  //!< This bit is set if the Card Inserted in the Present State
+    CYHAL_SDIO_CARD_REMOVAL   = 0x00080,  //!< This bit is set if the Card Inserted in the Present State
+    CYHAL_SDIO_CARD_INTERRUPT = 0x00100,  //!< The synchronized value of the DAT[1] interrupt input for SD mode
+    CYHAL_SDIO_INT_A          = 0x00200,  //!< Reserved: set to 0
+    CYHAL_SDIO_INT_B          = 0x00400,  //!< Reserved: set to 0
+    CYHAL_SDIO_INT_C          = 0x00800,  //!< Reserved: set to 0
+    CYHAL_SDIO_RE_TUNE_EVENT  = 0x01000,  //!< Reserved: set to 0
+    CYHAL_SDIO_FX_EVENT       = 0x02000,  //!< This status is set when R[14] of response register is set to 1
+    CYHAL_SDIO_CQE_EVENT      = 0x04000,  //!< This status is set if Command Queuing/Crypto event has occurred
+    CYHAL_SDIO_ERR_INTERRUPT  = 0x08000,  //!< If any of the bits in the Error Interrupt Status register are set
+
+    /* Non-interrupt-based thread events */
+    CYHAL_SDIO_GOING_DOWN     = 0x10000, //!< The interface is going away (eg: powering down for some period of time)
+    CYHAL_SDIO_COMING_UP      = 0x20000, //!< The interface is back up (eg: came back from a low power state)
+
+    CYHAL_SDIO_ALL_INTERRUPTS = 0x0E1FF,  //!< Is used to enable/disable all interrupts events
+} cyhal_sdio_event_t;
+
+
+/*******************************************************************************
+*       Data Structures
+*******************************************************************************/
 
-/** SDIO controller initial configuration */
+/** @brief SDIO controller initial configuration */
 typedef struct
 {
     uint32_t frequencyhal_hz; //!< Clock frequency, in hertz
-    uint16_t block_size; //!< Block size
+    uint16_t block_size;      //!< Block size
 } cyhal_sdio_cfg_t;
 
-/** Handler for SDIO interrupts */
-typedef void (*cyhal_sdio_irq_handler_t)(void *handler_arg, cyhal_sdio_irq_event_t event);
-
-/** \} group_hal_sdio_data_structures */
+/** Callback for SDIO events */
+typedef void (*cyhal_sdio_event_callback_t)(void *callback_arg, cyhal_sdio_event_t event);
 
 
-/**
- * \addtogroup group_hal_sdio_functions
- * \{
- */
-
+/*******************************************************************************
+*       Data Structures
+*******************************************************************************/
 /** Initialize the SDIO peripheral
  *
- * @param[out] obj               The SDIO object
+ * @param[out] obj                Pointer to an SDIO object.
+ *  The caller must allocate the memory for this object but the init
+ *  function will initialize its contents.
  * @param[out] clk               The pin connected to the clk signal
  * @param[in]  cmd               The pin connected to the command signal
  * @param[in]  data0             The pin connected to the data0 signal
@@ -176,99 +224,143 @@ typedef void (*cyhal_sdio_irq_handler_t)(void *handler_arg, cyhal_sdio_irq_event
  * @param[in]  data2             The pin connected to the data2 signal
  * @param[in]  data3             The pin connected to the data3 signal
  * @return The status of the init request
+ *
+ * Returns \ref CY_RSLT_SUCCESS on successful operation. Refer \ref subsection_sdio_use_case_1 for more information.
  */
-cy_rslt_t cyhal_sdio_init(cyhal_sdio_t *obj, cyhal_gpio_t cmd, cyhal_gpio_t clk, cyhal_gpio_t data0, cyhal_gpio_t data1,
-                          cyhal_gpio_t data2, cyhal_gpio_t data3);
+cy_rslt_t cyhal_sdio_init(cyhal_sdio_t *obj, cyhal_gpio_t cmd, cyhal_gpio_t clk, cyhal_gpio_t data0, cyhal_gpio_t data1, cyhal_gpio_t data2, cyhal_gpio_t data3);
 
-/** Release the SDIO peripheral, not currently invoked. It requires further
- *  resource management.
+/** Release the SDIO block.
  *
  * @param[in,out] obj The SDIO object
  */
 void cyhal_sdio_free(cyhal_sdio_t *obj);
 
-/** Configure the SDIO block.
+/** Configure the SDIO block with required parameters. Refer \ref cyhal_sdio_cfg_t for more information.
  *
  * @param[in,out] obj    The SDIO object
- * @param[in]     config The sdio configuration to apply
- * @return The status of the configure request
+ * @param[in]     config The SDIO configuration to apply
+ * @return The status of the configure request.
+ *
+ * Returns \ref CY_RSLT_SUCCESS on successful operation.
  */
 cy_rslt_t cyhal_sdio_configure(cyhal_sdio_t *obj, const cyhal_sdio_cfg_t *config);
 
-/** Sends a command to the SDIO block.
+/** Sends command to the SDIO device. See \ref cyhal_sdio_command_t for list of available commands.
+ *
+ * This will block until the command is completed.
  *
  * @param[in,out] obj       The SDIO object
  * @param[in]     direction The direction of transfer (read/write)
- * @param[in]     command   The SDIO command to send
+ * @param[in]     command   The command to send to the SDIO device
  * @param[in]     argument  The argument to the command
  * @param[out]    response  The response from the SDIO device
- * @return The status of the configure request
+ * @return The status of the command transfer.
+ *
+ * Returns \ref CY_RSLT_SUCCESS on successful operation. Refer \ref subsection_sdio_use_case_3 for more information.
  */
-cy_rslt_t cyhal_sdio_send_cmd(const cyhal_sdio_t *obj, cyhal_transfer_t direction, cyhal_sdio_command_t command,
-                              uint32_t argument, uint32_t *response);
+cy_rslt_t cyhal_sdio_send_cmd(const cyhal_sdio_t *obj, cyhal_transfer_t direction, cyhal_sdio_command_t command, uint32_t argument, uint32_t* response);
 
-/** Performs a bulk data transfer (CMD=53) to the SDIO block.
+/** Performs a bulk data transfer. Sends \ref CYHAL_SDIO_CMD_IO_RW_EXTENDED command (CMD=53) which allows writing and reading of a large number of I/O registers with a single command.
+ *
+ * This will block until the transfer is completed.
  *
  * @param[in,out] obj       The SDIO object
  * @param[in]     direction The direction of transfer (read/write)
  * @param[in]     argument  The argument to the command
- * @param[in]     data      The data to send to the SDIO device. The data buffer
- *                          should be aligned to the block size (64 bytes) if data
- *                          size is greater that block size (64 bytes).
+ * @param[in]     data      The data to send to the SDIO device. A bulk transfer is done in block
+ *                          size (default: 64 bytes) chunks for better performance. Therefore,
+ *                          the size of the data buffer passed into this function must be at least
+ *                          `length` bytes and a multiple of the block size. For example, when
+ *                          requesting to read 100 bytes of data with a block size 64 bytes, the
+ *                          data buffer needs to be at least 128 bytes. The first 100 bytes of data
+ *                          in the buffer will be the requested data.
  * @param[in]     length    The number of bytes to send
  * @param[out]    response  The response from the SDIO device
- * @return The status of the configure request
+ * @return The status of the bulk transfer operation.
+ *
+ * Returns \ref CY_RSLT_SUCCESS on successful operation. Refer \ref subsection_sdio_use_case_4 for more information.
  */
-cy_rslt_t cyhal_sdio_bulk_transfer(cyhal_sdio_t *obj, cyhal_transfer_t direction, uint32_t argument,
-                                   const uint32_t *data, uint16_t length, uint32_t *response);
+cy_rslt_t cyhal_sdio_bulk_transfer(cyhal_sdio_t *obj, cyhal_transfer_t direction, uint32_t argument, const uint32_t* data, uint16_t length, uint32_t* response);
 
-/** Performs a bulk asynchronus data transfer (CMD=53) to the SDIO block.
+/** Performs a bulk asynchronous data transfer by issuing the \ref CYHAL_SDIO_CMD_IO_RW_EXTENDED command(CMD=53) to the SDIO block.
+ * After exiting this function the \ref CYHAL_SDIO_CMD_COMPLETE and \ref CYHAL_SDIO_XFER_COMPLETE events are not asserted.
+ *
+ * To complete the asynchronous transfer, call \ref cyhal_sdio_is_busy()
+ * until it returns false.
+ * The \ref CYHAL_SDIO_CMD_COMPLETE and \ref CYHAL_SDIO_XFER_COMPLETE events are enabled
+ * after the asynchronous transfer is complete and in the condition they were
+ * enabled in before the transfer operation started. Handle these events in the interrupt callback.
+ *
+ * When the transfer is complete, the \ref CYHAL_SDIO_XFER_COMPLETE event will be raised.
+ * See \ref cyhal_sdio_register_callback and \ref cyhal_sdio_enable_event.
  *
  * @param[in,out] obj       The SDIO object
  * @param[in]     direction The direction of transfer (read/write)
  * @param[in]     argument  The argument to the command
  * @param[in]     data      The data to send to the SDIO device
  * @param[in]     length    The number of bytes to send
- * @return The status of the configure request
+ * @return The status of the async tranfer operation.
+ *
+ * Returns \ref CY_RSLT_SUCCESS on successful operation. Refer \ref subsection_sdio_use_case_5 for more information.
  */
-cy_rslt_t cyhal_sdio_transfer_async(cyhal_sdio_t *obj, cyhal_transfer_t direction, uint32_t argument,
-                                    const uint32_t *data, uint16_t length);
+cy_rslt_t cyhal_sdio_transfer_async(cyhal_sdio_t *obj, cyhal_transfer_t direction, uint32_t argument, const uint32_t* data, uint16_t length);
 
 /** Checks if the specified SDIO is in use
  *
  * @param[in]  obj  The SDIO peripheral to check
- * @return Indication of whether the SDIO is still transmitting
+ * @return true if SDIO is in use. false, otherwise.
  */
 bool cyhal_sdio_is_busy(const cyhal_sdio_t *obj);
 
 /** Abort an SDIO transfer
  *
  * @param[in] obj The SDIO peripheral to stop
- * @return The status of the abort_async request
+ * @return The status of the abort_async request.
+ *
+ * Returns \ref CY_RSLT_SUCCESS on successful operation.
  */
 cy_rslt_t cyhal_sdio_abort_async(const cyhal_sdio_t *obj);
 
-/** The sdio interrupt handler registration
+/** Register an SDIO event callback to be invoked when the event is triggered.
+ *
+ * This function will be called when one of the events enabled by \ref cyhal_sdio_enable_event occurs.
  *
- * @param[in] obj         The SDIO object
- * @param[in] handler     The callback handler which will be invoked when the interrupt fires
- * @param[in] handler_arg Generic argument that will be provided to the handler when called
+ * @param[in] obj          The SDIO object
+ * @param[in] callback     The callback function which will be invoked when the event triggers
+ * @param[in] callback_arg Generic argument that will be provided to the callback when executed
+ *
+ * Refer \ref subsection_sdio_use_case_2 for more implementation.
  */
-void cyhal_sdio_register_irq(cyhal_sdio_t *obj, cyhal_sdio_irq_handler_t handler, void *handler_arg);
+void cyhal_sdio_register_callback(cyhal_sdio_t *obj, cyhal_sdio_event_callback_t callback, void *callback_arg);
 
-/** Configure sdio interrupt.
+/** Enables callbacks to be triggered for specified SDIO events. Refer \ref cyhal_sdio_event_t for all events.
+ *
+ * @param[in] obj           The SDIO object
+ * @param[in] event         The SDIO event type
+ * @param[in] intr_priority The priority for NVIC interrupt events
+ * @param[in] enable        Set to true to enable events, or false to disable them
  *
- * @param[in] obj      The SDIO object
- * @param[in] event    The sdio IRQ type
- * @param[in] enable   Set to non-zero to enable events, or zero to disable them
+ * Refer \ref subsection_sdio_use_case_2 for more information.
  */
-void cyhal_sdio_irq_enable(cyhal_sdio_t *obj, cyhal_sdio_irq_event_t event, bool enable);
+void cyhal_sdio_enable_event(cyhal_sdio_t *obj, cyhal_sdio_event_t event, uint8_t intr_priority, bool enable);
 
-/** \} group_hal_sdio_functions */
+/*******************************************************************************
+* Backward compatibility macro. The following code is DEPRECATED and must
+* not be used in new projects
+*******************************************************************************/
+/** \cond INTERNAL */
+#define cyhal_sdio_register_irq        cyhal_sdio_register_callback
+#define cyhal_sdio_irq_enable(obj, event, enable)          cyhal_sdio_enable_event(obj, event, CYHAL_ISR_PRIORITY_DEFAULT, enable)
+typedef cyhal_sdio_event_t             cyhal_sdio_irq_event_t;
+typedef cyhal_sdio_event_callback_t    cyhal_sdio_irq_handler_t;
+/** \endcond */
 
 #if defined(__cplusplus)
 }
 #endif
 
-/** \} group_hal_sdio */
+#ifdef CYHAL_SDIO_IMPL_HEADER
+#include CYHAL_SDIO_IMPL_HEADER
+#endif /* CYHAL_SDIO_IMPL_HEADER */
 
+/** \} group_hal_sdio */
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_spi.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_spi.h
index 345f3bd86a..f5ba47669f 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_spi.h
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_spi.h
@@ -9,7 +9,7 @@
 *
 ********************************************************************************
 * \copyright
-* Copyright 2018-2019 Cypress Semiconductor Corporation
+* Copyright 2018-2020 Cypress Semiconductor Corporation
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
@@ -26,16 +26,64 @@
 *******************************************************************************/
 
 /**
- * \addtogroup group_hal_spi SPI (Serial Peripheral Interface)
- * \ingroup group_hal
- * \{
- * High level interface for interacting with the Cypress SPI.
- *
- * \defgroup group_hal_spi_macros Macros
- * \defgroup group_hal_spi_functions Functions
- * \defgroup group_hal_spi_data_structures Data Structures
- * \defgroup group_hal_spi_enums Enumerated Types
- */
+* \addtogroup group_hal_spi SPI (Serial Peripheral Interface)
+* \ingroup group_hal
+* \{
+* High level interface for interacting with the Serial Peripheral Interface (SPI).
+*
+* The SPI protocol is a synchronous serial interface protocol. Devices operate
+* in either master or slave mode. The master initiates the data transfer.
+*
+* Motorola SPI modes 0, 1, 2, and 3 are supported, with either MSB or LSB first.
+* The operating mode and data frame size can be configured via \ref cyhal_spi_cfg_t.
+*
+* \section section_spi_features Features
+* * Supports master and slave functionality.
+* * Supports Motorola modes - 0, 1, 2 and 3 - \ref cyhal_spi_mode_t
+* * MSb or LSb first shift direction - \ref cyhal_spi_mode_t
+* * Master supports up to four slave select lines
+* * Supports data frame size of 8 or 16 bits
+* * Configurable interrupt and callback assignment on SPI events:
+* Data transfer to FIFO complete, Transfer complete and Transmission error - \ref cyhal_spi_event_t
+* * Supports changing baud rate of the transaction in run time.
+* * Provides functions to send/receive a single byte or block of data.
+*
+* \section section_spi_quickstart Quick Start
+*
+* Initialise a SPI master or slave interface using \ref cyhal_spi_init() and provide the SPI pins (<b>mosi</b>, <b>miso</b>, <b>sclk</b>, <b>ssel</b>),
+* number of bits per frame (<b>data_bits</b>) and SPI Motorola <b>mode</b>. The data rate can be set using \ref cyhal_spi_set_frequency(). <br>
+* See \ref section_spi_snippets for code snippets to send or receive the data.
+*
+* \section section_spi_snippets Code snippets
+*
+* \subsection subsection_spi_snippet_1 Snippet 1: SPI Master - Single byte transfer operation (Read and Write)
+* The following code snippet initializes an SPI Master interface using the \ref cyhal_spi_init(). The data rate of transfer is set using \ref cyhal_spi_set_frequency().
+* The code snippet shows how to transfer a single byte of data using \ref cyhal_spi_send() and \ref cyhal_spi_recv().
+* \snippet spi.c snippet_cyhal_spi_master_byte_operation
+*
+* \subsection subsection_spi_snippet_2 Snippet 2: SPI Slave - Single byte transfer operation (Read and Write)
+* The following code snippet initializes an SPI Slave interface using the \ref cyhal_spi_init(). The data rate of transfer is set using \ref cyhal_spi_set_frequency.
+* The code snippet shows how to transfer a single byte of data using \ref cyhal_spi_send() and \ref cyhal_spi_recv.
+* \snippet spi.c snippet_cyhal_spi_slave_byte_operation
+*
+* \subsection subsection_spi_snippet_3 Snippet 3: SPI Block Data transfer
+* The following snippet sends and receives an array of data in a single SPI transaction using \ref cyhal_spi_transfer(). The example
+* uses SPI master to transmit 5 bytes of data and receive 5 bytes of data in a single transaction.
+* \snippet spi.c snippet_cyhal_spi_block_data_transfer
+*
+* \subsection subsection_spi_snippet_4 Snippet 4: Interrupts on SPI events
+* SPI interrupt events ( \ref cyhal_spi_event_t) can be mapped to an interrupt and assigned to a callback function.
+* The callback function needs to be first registered and then the event needs to be enabled.
+* The following snippet initialises a SPI master to perform a block transfer using \ref cyhal_spi_transfer_async(). This is a non-blocking function.
+*  A callback function is registered using \ref cyhal_spi_register_callback to notify whenever the SPI transfer is complete.
+* \snippet spi.c snippet_cyhal_spi_interrupt_callback_events
+
+* \section subsection_spi_moreinfor More Information
+*
+* * <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-spi-master"><b>mtb-example-psoc6-spi-master</b></a>: This example project demonstrates
+* use of SPI (HAL) resource in PSoC® 6 MCU in Master mode to write data to an SPI slave.
+*
+*/
 
 #pragma once
 
@@ -43,73 +91,106 @@
 #include <stdbool.h>
 #include "cy_result.h"
 #include "cyhal_hw_types.h"
-#include "cyhal_modules.h"
 
 #if defined(__cplusplus)
 extern "C" {
 #endif
 
-
-/**
- * \addtogroup group_hal_spi_macros
- * \{
+/** \addtogroup group_hal_results_spi SPI HAL Results
+ *  SPI specific return codes
+ *  \ingroup group_hal_results
+ *  \{ *//**
  */
 
 /** Bad argument */
-#define CYHAL_SPI_RSLT_BAD_ARGUMENT                    (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 0) )
+#define CYHAL_SPI_RSLT_BAD_ARGUMENT                     \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 0))
 /** Failed to initialize SPI clock */
-#define CYHAL_SPI_RSLT_CLOCK_ERROR                     (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 1) )
+#define CYHAL_SPI_RSLT_CLOCK_ERROR                      \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 1))
 /** Failed to Transfer SPI data */
-#define CYHAL_SPI_RSLT_TRANSFER_ERROR                  (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 2) )
+#define CYHAL_SPI_RSLT_TRANSFER_ERROR                   \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 2))
 /** Provided clock is not supported by SPI */
-#define CYHAL_SPI_RSLT_CLOCK_NOT_SUPPORTED             (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 3) )
+#define CYHAL_SPI_RSLT_CLOCK_NOT_SUPPORTED              \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 3))
 /** Provided PIN configuration is not supported by SPI */
-#define CYHAL_SPI_RSLT_PIN_CONFIG_NOT_SUPPORTED        (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 5) )
+#define CYHAL_SPI_RSLT_PIN_CONFIG_NOT_SUPPORTED         \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 5))
 /** Provided PIN configuration is not supported by SPI */
-#define CYHAL_SPI_RSLT_INVALID_PIN_API_NOT_SUPPORTED   (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 6) )
+#define CYHAL_SPI_RSLT_INVALID_PIN_API_NOT_SUPPORTED    \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 6))
 /** The requested resource type is invalid */
-#define CYHAL_SPI_RSLT_ERR_INVALID_PIN                 (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 7) )
+#define CYHAL_SPI_RSLT_ERR_INVALID_PIN                  \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 7))
+/** Cannot configure SSEL signal */
+#define CYHAL_SPI_RSLT_ERR_CANNOT_CONFIG_SSEL           \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 8))
+/** Cannot switch SSEL - device is busy or incorrect pin provided */
+#define CYHAL_SPI_RSLT_ERR_CANNOT_SWITCH_SSEL           \
+    (CYHAL_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CYHAL_RSLT_MODULE_SPI, 9))
 
-/** \} group_hal_spi_macros */
+/**
+ * \}
+ */
 
+/** Compatibility define for cyhal_spi_set_frequency. */
+#define cyhal_spi_frequency cyhal_spi_set_frequency
 
 /** SPI interrupt triggers */
-typedef enum
-{
-    CYHAL_SPI_IRQ_NONE                = 0,      //!< Disable all interrupt call backs
+typedef enum {
     /** All transfer data has been moved into data FIFO */
     CYHAL_SPI_IRQ_DATA_IN_FIFO        = 1 << 1,
     /** Transfer complete. */
     CYHAL_SPI_IRQ_DONE                = 1 << 2,
     /** An error occurred while transferring data */
     CYHAL_SPI_IRQ_ERROR               = 1 << 3,
-} cyhal_spi_irq_event_t;
+} cyhal_spi_event_t;
+
+/** SPI Slave Select polarity */
+typedef enum {
+    /** SSEL signal is active low */
+    CYHAL_SPI_SSEL_ACTIVE_LOW         = 0,
+    /** SSEL signal is active high */
+    CYHAL_SPI_SSEL_ACTIVE_HIGH        = 1,
+} cyhal_spi_ssel_polarity_t;
 
 /** Handler for SPI interrupts */
-typedef void (*cyhal_spi_irq_handler_t)(void *handler_arg, cyhal_spi_irq_event_t event);
+typedef void (*cyhal_spi_event_callback_t)(void *callback_arg, cyhal_spi_event_t event);
+
+/** Flag for SPI \ref cyhal_spi_mode_t values indicating that the LSB is sent first. */
+#define CYHAL_SPI_MODE_FLAG_LSB             (0x01u)
+/** Flag for SPI \ref cyhal_spi_mode_t values indicating that the CPHA=1. */
+#define CYHAL_SPI_MODE_FLAG_CPHA            (0x02u)
+/** Flag for SPI \ref cyhal_spi_mode_t values indicating that the CPOL=1. */
+#define CYHAL_SPI_MODE_FLAG_CPOL            (0x04u)
+/** Creates a \ref cyhal_spi_mode_t value given the cpol, cpha, lsb values. */
+#define CYHAL_SPI_MODE(cpol, cpha, lsb)     (((cpol > 0) ? CYHAL_SPI_MODE_FLAG_CPOL : 0) | \
+                                             ((cpha > 0) ? CYHAL_SPI_MODE_FLAG_CPHA : 0) | \
+                                             (( lsb > 0) ? CYHAL_SPI_MODE_FLAG_LSB  : 0))
 
 /** SPI operating modes */
 typedef enum
 {
     /** Standard motorola SPI CPOL=0, CPHA=0 with MSB first operation */
-    CYHAL_SPI_MODE_00_MSB,
+    CYHAL_SPI_MODE_00_MSB = CYHAL_SPI_MODE(0, 0, 0),
     /** Standard motorola SPI CPOL=0, CPHA=0 with LSB first operation */
-    CYHAL_SPI_MODE_00_LSB,
+    CYHAL_SPI_MODE_00_LSB = CYHAL_SPI_MODE(0, 0, 1),
     /** Standard motorola SPI CPOL=0, CPHA=1 with MSB first operation */
-    CYHAL_SPI_MODE_01_MSB,
+    CYHAL_SPI_MODE_01_MSB = CYHAL_SPI_MODE(0, 1, 0),
     /** Standard motorola SPI CPOL=0, CPHA=1 with LSB first operation */
-    CYHAL_SPI_MODE_01_LSB,
+    CYHAL_SPI_MODE_01_LSB = CYHAL_SPI_MODE(0, 1, 1),
     /** Standard motorola SPI CPOL=1, CPHA=0 with MSB first operation */
-    CYHAL_SPI_MODE_10_MSB,
+    CYHAL_SPI_MODE_10_MSB = CYHAL_SPI_MODE(1, 0, 0),
     /** Standard motorola SPI CPOL=1, CPHA=0 with LSB first operation */
-    CYHAL_SPI_MODE_10_LSB,
+    CYHAL_SPI_MODE_10_LSB = CYHAL_SPI_MODE(1, 0, 1),
     /** Standard motorola SPI CPOL=1, CPHA=1 with MSB first operation */
-    CYHAL_SPI_MODE_11_MSB,
+    CYHAL_SPI_MODE_11_MSB = CYHAL_SPI_MODE(1, 1, 0),
     /** Standard motorola SPI CPOL=1, CPHA=1 with LSB first operation */
-    CYHAL_SPI_MODE_11_LSB,
+    CYHAL_SPI_MODE_11_LSB = CYHAL_SPI_MODE(1, 1, 1),
 } cyhal_spi_mode_t;
 
-/** Initial SPI configuration. */
+/** @brief Initial SPI configuration. */
 typedef struct
 {
     cyhal_spi_mode_t mode; //!< The operating mode
@@ -117,11 +198,11 @@ typedef struct
     bool is_slave; //!< Whether the peripheral is operating as slave or master
 } cyhal_spi_cfg_t;
 
-
 /** Initialize the SPI peripheral
  *
  * Configures the pins used by SPI, sets a default format and frequency, and enables the peripheral
- * @param[out] obj  The SPI object to initialize
+ * @param[out] obj  Pointer to a SPI object. The caller must allocate the memory
+ *  for this object but the init function will initialize its contents.
  * @param[in]  mosi The pin to use for MOSI
  * @note At least MOSI or MISO pin should be non-NC
  * @param[in]  miso The pin to use for MISO
@@ -129,7 +210,9 @@ typedef struct
  * @param[in]  sclk The pin to use for SCLK
  * @note This pin cannot be NC
  * @param[in]  ssel The pin to use for SSEL
- * @note This pin can be NC
+ * @note Provided pin will be configured for \ref CYHAL_SPI_SSEL_ACTIVE_LOW polarity and set as active. This can be changed
+ * (as well as additional ssel pins can be added) by \ref cyhal_spi_slave_select_config and \ref cyhal_spi_select_active_ssel
+ * functions. This pin can be NC.
  * @param[in]  clk The clock to use can be shared, if not provided a new clock will be allocated
  * @param[in]  bits      The number of bits per frame
  * @note bits should be 8 or 16
@@ -138,8 +221,7 @@ typedef struct
  * @return The status of the init request
  */
 cy_rslt_t cyhal_spi_init(cyhal_spi_t *obj, cyhal_gpio_t mosi, cyhal_gpio_t miso, cyhal_gpio_t sclk, cyhal_gpio_t ssel,
-                         const cyhal_clock_divider_t *clk,
-                         uint8_t bits, cyhal_spi_mode_t mode, bool is_slave);
+                        const cyhal_clock_t *clk, uint8_t bits, cyhal_spi_mode_t mode, bool is_slave);
 
 /** Release a SPI object
  *
@@ -154,13 +236,38 @@ void cyhal_spi_free(cyhal_spi_t *obj);
  * Configures the SPI peripheral's baud rate
  * @param[in,out] obj The SPI object to configure
  * @param[in]     hz  The baud rate in Hz
- * @return The status of the frequency request
+ * @return The status of the set_frequency request
+ */
+cy_rslt_t cyhal_spi_set_frequency(cyhal_spi_t *obj, uint32_t hz);
+
+/** Configures provided ssel pin to work as SPI slave select with specified polarity.
+ *
+ * Multiple pins can be configured as SPI slave select pins. Please refer to device datasheet for details. Switching
+ * between configured slave select pins is done by \ref cyhal_spi_select_active_ssel function.
+ * Unless modified with this function, the SSEL pin provided as part of \ref cyhal_spi_init is the default.
+ * @param[in] obj       The SPI object to add slave select for
+ * @param[in] ssel      Slave select pin to be added
+ * @param[in] polarity  Polarity of slave select
+ * @return The status of ssel pin configuration
+ */
+cy_rslt_t cyhal_spi_slave_select_config(cyhal_spi_t *obj, cyhal_gpio_t ssel, cyhal_spi_ssel_polarity_t polarity);
+
+/** Selects an active slave select line from one of available.
+ *
+ * This function is applicable for the master and slave.
+ * SSEL pin should be configured by \ref cyhal_spi_slave_select_config or \ref cyhal_spi_init functions prior
+ * to selecting it as active. The active slave select line will automatically be toggled as part of any transfer.
+ * @param[in] obj       The SPI object for switching
+ * @param[in] ssel      Slave select pin to be set as active
+ * @return CY_RSLT_SUCCESS if slave select was switched successfully, otherwise - CYHAL_SPI_RSLT_ERR_CANNOT_SWITCH_SSEL
  */
-cy_rslt_t cyhal_spi_frequency(cyhal_spi_t *obj, uint32_t hz);
+cy_rslt_t cyhal_spi_select_active_ssel(cyhal_spi_t *obj, cyhal_gpio_t ssel);
 
-/** Get a received value out of the SPI receive buffer
+/** Synchronously get a received value out of the SPI receive buffer
+ *
+ * In Master mode - transmits fill-in value and read the data from RxFifo
+ * In Slave mode - Blocks until a value is available
  *
- * Blocks until a value is available
  * @param[in] obj   The SPI peripheral to read
  * @param[in] value The value received
  * @return The status of the read request
@@ -168,9 +275,12 @@ cy_rslt_t cyhal_spi_frequency(cyhal_spi_t *obj, uint32_t hz);
  * - In Master mode, MISO pin required to be non-NC for this API to operate
  * - In Slave mode, MOSI pin required to be non-NC for this API to operate
  */
-cy_rslt_t cyhal_spi_read(cyhal_spi_t *obj, uint32_t *value);
+cy_rslt_t cyhal_spi_recv(cyhal_spi_t *obj, uint32_t* value);
 
-/** Write a byte out
+/** Synchronously send a byte out
+ *
+ * In Master mode transmits value to slave and read/drop a value from the RxFifo.
+ * In Slave mode writes a value to TxFifo
  *
  * @param[in] obj   The SPI peripheral to use for sending
  * @param[in] value The value to send
@@ -179,27 +289,35 @@ cy_rslt_t cyhal_spi_read(cyhal_spi_t *obj, uint32_t *value);
  * - In Master mode, MOSI pin required to be non-NC for this API to operate
  * - In Slave mode, MISO pin required to be non-NC for this API to operate
  */
-cy_rslt_t cyhal_spi_write(cyhal_spi_t *obj, uint32_t value);
+cy_rslt_t cyhal_spi_send(cyhal_spi_t *obj, uint32_t value);
 
-/** Write a block out and receive a value
+/** Synchronously Write a block out and receive a value
  *
- *  The total number of bytes sent and received will be the maximum of
- *  tx_length and rx_length. The bytes written will be padded with the
- *  value 0xff.
+ *  The total number of bytes sent and received will be the maximum of tx_length
+ *  and rx_length. The bytes written will be padded (at the end) with the value
+ *  given by write_fill.
+ *
+ * This function will block for the duration of the transfer. \ref cyhal_spi_transfer_async
+ * can be used for non-blocking transfers.
  *
  * @param[in] obj           The SPI peripheral to use for sending
  * @param[in] tx            Pointer to the byte-array of data to write to the device
  * @param[in,out] tx_length Number of bytes to write, updated with the number actually written
  * @param[out] rx           Pointer to the byte-array of data to read from the device
- * @param[in,out] rx_length Number of bytes to read, udpated with the number actually read
+ * @param[in,out] rx_length Number of bytes to read, updated with the number actually read
  * @param[in] write_fill    Default data transmitted while performing a read
  * @return The status of the transfer request
  * @note Both MOSI and MISO pins required to be non-NC for this API to operate
  */
-cy_rslt_t cyhal_spi_transfer(cyhal_spi_t *obj, const uint8_t *tx, size_t tx_length, uint8_t *rx, size_t rx_length,
-                             uint8_t write_fill);
+cy_rslt_t cyhal_spi_transfer(cyhal_spi_t *obj, const uint8_t *tx, size_t tx_length, uint8_t *rx, size_t rx_length, uint8_t write_fill);
 
-/** Begin the SPI transfer. Buffer pointers and lengths are specified in tx_buff and rx_buff
+/** Start an asynchronous SPI transfer.
+ *
+ * This will transfer `rx_length` bytes into the buffer pointed to by `rx`, while simultaneously transfering
+ * `tx_length` bytes of data from the buffer pointed to by `tx`, both in the background.
+ * When the transfer is complete, the @ref CYHAL_SPI_IRQ_DONE event will be raised.
+ * See @ref cyhal_spi_register_callback and @ref cyhal_spi_enable_event.
+ * \note For blocking transfers cyhal_spi_transfer can be used.
  *
  * @param[in] obj           The SPI object that holds the transfer information
  * @param[in] tx            The transmit buffer
@@ -209,8 +327,7 @@ cy_rslt_t cyhal_spi_transfer(cyhal_spi_t *obj, const uint8_t *tx, size_t tx_leng
  * @return The status of the transfer_async request
  * @note Both MOSI and MISO pins required to be non-NC for this API to operate
  */
-cy_rslt_t cyhal_spi_transfer_async(cyhal_spi_t *obj, const uint8_t *tx, size_t tx_length, uint8_t *rx,
-                                   size_t rx_length);
+cy_rslt_t cyhal_spi_transfer_async(cyhal_spi_t *obj, const uint8_t *tx, size_t tx_length, uint8_t *rx, size_t rx_length);
 
 /** Checks if the specified SPI peripheral is in use
  *
@@ -226,25 +343,41 @@ bool cyhal_spi_is_busy(cyhal_spi_t *obj);
  */
 cy_rslt_t cyhal_spi_abort_async(cyhal_spi_t *obj);
 
-/** The SPI interrupt handler registration
+/** Register a SPI callback handler
  *
- * @param[in] obj         The SPI object
- * @param[in] handler     The callback handler which will be invoked when the interrupt fires
- * @param[in] handler_arg Generic argument that will be provided to the handler when called
+ * This function will be called when one of the events enabled by \ref cyhal_spi_enable_event occurs.
+ *
+ * @param[in] obj          The SPI object
+ * @param[in] callback     The callback handler which will be invoked when the interrupt fires
+ * @param[in] callback_arg Generic argument that will be provided to the callback when called
  */
-void cyhal_spi_register_irq(cyhal_spi_t *obj, cyhal_spi_irq_handler_t handler, void *handler_arg);
+void cyhal_spi_register_callback(cyhal_spi_t *obj, cyhal_spi_event_callback_t callback, void *callback_arg);
 
 /** Configure SPI interrupt. This function is used for word-approach
  *
- * @param[in] obj      The SPI object
- * @param[in] event    The SPI IRQ type
- * @param[in] enable   True to turn on interrupts, False to turn off
+ * When an enabled event occurs, the function specified by \ref cyhal_spi_register_callback will be called.
+ *
+ * @param[in] obj            The SPI object
+ * @param[in] event          The SPI event type
+ * @param[in] intr_priority  The priority for NVIC interrupt events
+ * @param[in] enable         True to turn on interrupts, False to turn off
  */
-void cyhal_spi_irq_enable(cyhal_spi_t *obj, cyhal_spi_irq_event_t event, bool enable);
+void cyhal_spi_enable_event(cyhal_spi_t *obj, cyhal_spi_event_t event, uint8_t intr_priority, bool enable);
 
-/** \} group_hal_spi_functions */
+/*******************************************************************************
+* Backward compatibility macro. The following code is DEPRECATED and must
+* not be used in new projects
+*******************************************************************************/
+/** \cond INTERNAL */
+typedef cyhal_spi_event_t             cyhal_spi_irq_event_t;
+/** \endcond */
 
 #if defined(__cplusplus)
 }
 #endif
 
+#ifdef CYHAL_SPI_IMPL_HEADER
+#include CYHAL_SPI_IMPL_HEADER
+#endif /* CYHAL_SPI_IMPL_HEADER */
+
+/** \} group_hal_spi */
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/mbed_lib.json b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/mbed_lib.json
deleted file mode 100644
index 0d9dace57e..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/mbed_lib.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-  "name": "cy_psoc6_whd",
-  "config": {
-        "present": 1
-  }
-}
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cy_hal.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cy_hal.c
index bb5f942102..f5a0716697 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cy_hal.c
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cy_hal.c
@@ -18,59 +18,46 @@
 /** @file
  *  Provides cyhal porting to generic mbed APIs
  */
-
-#include <stddef.h>
-#include "cyhal_sdio.h"
-#include "cyhal_spi.h"
-#include "cyhal_gpio.h"
-#include <stdio.h>
-#include "sockets.h"
-
-void Cy_SysLib_Delay(uint32_t milliseconds) {
-	thread_sleep_for(milliseconds);
-}
-
-void Cy_SysLib_DelayUs(uint16_t microseconds) {
-	wait_us(microseconds);
-}
-
-static bool filesystem_mounted = false;
-extern bool wiced_filesystem_mount();
-
-int wiced_filesystem_file_open(int* fd, const char* filename) {
-	if (!filesystem_mounted) {
-		filesystem_mounted = wiced_filesystem_mount();
-	}
-	if (!filesystem_mounted) {
-		return WHD_BADARG;
-	}
-	*fd = open(filename, O_RDONLY);
-	if (*fd == -1) {
-		return WHD_BADARG;
-	}
-	return WHD_SUCCESS;
+#include "cyhal.h"
+#include "mbed_thread.h"
+#include "mbed_wait_api.h"
+
+static cyhal_sdio_t sdio_obj;
+
+/* Edit  Pin configuration */
+const pinconfig_t PinConfig[] = {
+
+    [CYBSP_WIFI_WL_REG_ON] = WIFI_WL_REG_ON,
+#ifdef CYBSP_WIFI_32K_CLK
+    [CYBSP_WIFI_32K_CLK]  =  WIFI_32K_CLK,
+#endif /* CYBSP_WIFI_32K_CLK */
+    [CYBSP_LED1    ]      =  BSP_LED1,
+    [CYBSP_LED2    ]      =  BSP_LED2,
+    [CYBSP_WIFI_SDIO_CMD] =  WIFI_SDIO_CMD,
+    [CYBSP_WIFI_SDIO_CLK] =  WIFI_SDIO_CLK,
+    [CYBSP_WIFI_SDIO_D0 ] =  WIFI_SDIO_D0,
+    [CYBSP_WIFI_SDIO_D1 ] =  WIFI_SDIO_D1,
+    [CYBSP_WIFI_SDIO_D2 ] =  WIFI_SDIO_D2,
+    [CYBSP_WIFI_SDIO_D3 ] =  WIFI_SDIO_D3,
+    [CYBSP_SDIO_OOB_IRQ ] =  WIFI_SDIO_OOB_IRQ //VIKR
+};
+
+void Cy_SysLib_Delay(uint32_t milliseconds)
+{
+    thread_sleep_for(milliseconds);
 }
 
-int wiced_filesystem_file_seek(int* fd, uint32_t offset) {
-	if (*fd == -1) {
-		return WHD_BADARG;
-	}
-	lseek(*fd, offset, SEEK_SET);
-	return WHD_SUCCESS;
+void Cy_SysLib_DelayUs(uint16_t microseconds)
+{
+    wait_us(microseconds);
 }
 
-int wiced_filesystem_file_read(int* fd, void *buffer, uint32_t maxsize, uint32_t* size) {
-	if (*fd == -1) {
-		return WHD_BADARG;
-	}
-	*size = read(*fd, buffer, maxsize);
-	return WHD_SUCCESS;
+void cyhal_system_delay_ms(uint32_t milliseconds)
+{
+    Cy_SysLib_Delay(milliseconds);
 }
 
-int wiced_filesystem_file_close(int* fd) {
-	if (*fd == -1) {
-		return WHD_BADARG;
-	}
-	close(*fd);
-	return WHD_SUCCESS;
+cyhal_sdio_t *cybsp_get_wifi_sdio_obj(void)
+{
+    return &sdio_obj;
 }
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cy_utils.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cy_utils.h
index 30a99344c1..db8c143f36 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cy_utils.h
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cy_utils.h
@@ -33,6 +33,8 @@
 
 #pragma once
 
+#include "stdint.h"
+
 #if defined(__cplusplus)
 extern "C" {
 #endif
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cybsp.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cybsp.h
new file mode 100644
index 0000000000..06226f327b
--- /dev/null
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cybsp.h
@@ -0,0 +1,50 @@
+/***************************************************************************//**
+* \file cybsp.h
+*
+* \brief
+* Basic API for setting up boards containing a Cypress MCU.
+*
+********************************************************************************
+* \copyright
+* Copyright 2018-2020 Cypress Semiconductor Corporation
+* SPDX-License-Identifier: Apache-2.0
+*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*     http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*******************************************************************************/
+
+#pragma once
+
+#include "cy_result.h"
+#include "cyhal_sdio.h"
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+/**
+* \addtogroup group_bsp_functions Functions
+* \{
+*/
+
+/**
+ * \brief Get the initialized sdio object used for communicating with the WiFi Chip.
+ * \note This function should only be called after cybsp_init();
+ * \returns The initialized sdio object.
+ */
+cyhal_sdio_t* cybsp_get_wifi_sdio_obj(void);
+
+/** \} group_bsp_functions */
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cybsp_wifi.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cybsp_wifi.c
deleted file mode 100644
index a169f3fcff..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cybsp_wifi.c
+++ /dev/null
@@ -1,219 +0,0 @@
-/***************************************************************************//**
-* \file cybsp_wifi.c
-*
-* \brief
-* Provides utility functions that are used by board support packages.
-* 
-********************************************************************************
-* \copyright
-* Copyright 2018-2019 Cypress Semiconductor Corporation
-* SPDX-License-Identifier: Apache-2.0
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-*     http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*******************************************************************************/
-
-#include "cy_network_buffer.h"
-#include "cyabs_rtos.h"
-#include "whd_types.h"
-#include "whd_config.h"
-#include "whd_wifi_api.h"
-#include "cyhal_sdio.h"
-
-#if defined(__cplusplus)
-extern "C" {
-#endif
-
-static whd_driver_t whd_drv;
-
-static whd_buffer_funcs_t buffer_ops =
-{
-    .whd_host_buffer_get = cy_host_buffer_get,
-    .whd_buffer_release = cy_buffer_release,
-    .whd_buffer_get_current_piece_data_pointer = cy_buffer_get_current_piece_data_pointer,
-    .whd_buffer_get_current_piece_size = cy_buffer_get_current_piece_size,
-    .whd_buffer_set_size = cy_buffer_set_size,
-    .whd_buffer_add_remove_at_front = cy_buffer_add_remove_at_front,
-};
-
-static whd_netif_funcs_t netif_ops =
-{
-    .whd_network_process_ethernet_data = cy_network_process_ethernet_data,
-};
-
-//TODO: Need to use resource implemenatation from abstraction layer.
-extern whd_resource_source_t resource_ops;
-
-typedef enum
-{
-  CYBSP_WIFI_WL_REG_ON,
-  CYBSP_WIFI_32K_CLK,
-  CYBSP_LED1,
-  CYBSP_LED2,
-  CYBSP_WIFI_SDIO_CMD,
-  CYBSP_WIFI_SDIO_CLK,
-  CYBSP_WIFI_SDIO_D0,
-  CYBSP_WIFI_SDIO_D1,
-  CYBSP_WIFI_SDIO_D2,
-  CYBSP_WIFI_SDIO_D3,
-  CYBSP_SDIO_OOB_IRQ,
-  CYBSP_WIFI_MAX,
-} wwd_sdio_pin_t;
-
-/* Edit  Pin configuration */
-const pinconfig_t PinConfig[]={  
-
-    [CYBSP_WIFI_WL_REG_ON] = WIFI_WL_REG_ON,
-#ifdef CYBSP_WIFI_32K_CLK
-    [CYBSP_WIFI_32K_CLK]  =  WIFI_32K_CLK,
-#endif /* CYBSP_WIFI_32K_CLK */
-    [CYBSP_LED1    ]      =  BSP_LED1,
-    [CYBSP_LED2    ]      =  BSP_LED2,
-    [CYBSP_WIFI_SDIO_CMD] =  WIFI_SDIO_CMD,
-    [CYBSP_WIFI_SDIO_CLK] =  WIFI_SDIO_CLK,
-    [CYBSP_WIFI_SDIO_D0 ] =  WIFI_SDIO_D0,
-    [CYBSP_WIFI_SDIO_D1 ] =  WIFI_SDIO_D1,
-    [CYBSP_WIFI_SDIO_D2 ] =  WIFI_SDIO_D2,
-    [CYBSP_WIFI_SDIO_D3 ] =  WIFI_SDIO_D3,
-    [CYBSP_SDIO_OOB_IRQ ] =  WIFI_SDIO_OOB_IRQ //VIKR
-};
-
-whd_sdio_config_t       sdio_config=
-{
-    /* Bus config */
-    .sdio_1bit_mode = false,       /**< Default is false, means SDIO operates under 4 bit mode */
-    .high_speed_sdio_clock = false, /**< Default is false, means SDIO operates in normal clock rate */
-    .oob_config = {
-      /**< Out-of-band interrupt configuration (required when bus can sleep) */
-    .host_oob_pin = CYBSP_SDIO_OOB_IRQ,   /**< Host-side GPIO pin selection CYHAL_NC_PIN_VALUE or CYBSP_SDIO_OOB_IRQ */
-    .dev_gpio_sel = 0,        /**< WiFi device-side GPIO pin selection (must be zero) */
-    .is_falling_edge = true,  /**< Interrupt trigger (polarity) */
-    .intr_priority = 0,       /**< OOB interrupt priority */
-    } 
-};
-
-cy_rslt_t sdio_enumerate( cyhal_sdio_t   *sdhc_obj )
-{
-    cy_rslt_t result;
-    uint32_t     loop_count = 0;
-    uint32_t     data = 0;
-    do
-    {
-        /* Send CMD0 to set it to idle state in SDIO_BYTE_MODE, SDIO_1B_BLOCK */
-        cyhal_sdio_send_cmd( sdhc_obj, CYHAL_WRITE, CYHAL_SDIO_CMD_GO_IDLE_STATE, 0,NULL );
-
-        /* CMD5. */
-        cyhal_sdio_send_cmd( sdhc_obj, CYHAL_READ, CYHAL_SDIO_CMD_IO_SEND_OP_COND, 0,NULL);
-
-        /* Send CMD3 to get RCA. */
-        result = cyhal_sdio_send_cmd(sdhc_obj,  CYHAL_READ, CYHAL_SDIO_CMD_SEND_RELATIVE_ADDR,0, &data );
-        loop_count++;
-        if ( loop_count >= (uint32_t) SDIO_ENUMERATION_TIMEOUT_MS )
-        {
-            return -1;
-        }
-
-    } while ( ( result != CY_RSLT_SUCCESS ) && ( cy_rtos_delay_milliseconds( (uint32_t) 1 ), ( 1 == 1 ) ) );
-    /* If you're stuck here, check the platform matches your hardware */
-
-    /* Send CMD7 with the returned RCA to select the card */
-    cyhal_sdio_send_cmd(sdhc_obj,  CYHAL_WRITE, CYHAL_SDIO_CMD_SELECT_CARD,data, &data);
-    return result;
-}
-
-cy_rslt_t whd_init_hardware_sdio(cyhal_sdio_t   *sdhc_obj)
-{
-   /* WiFi no power */
-    cy_rslt_t result = cyhal_gpio_init(CYBSP_WIFI_WL_REG_ON, CYHAL_GPIO_DIR_OUTPUT, CYHAL_GPIO_DRIVE_PULLUP,0);
- 
- #ifdef CYBSP_WIFI_32K_CLK
-   result = cyhal_gpio_init(CYBSP_WIFI_32K_CLK, CYHAL_GPIO_DIR_INPUT, CYHAL_GPIO_DRIVE_PULLUP,0);
-   cyhal_gpio_write(CYBSP_WIFI_32K_CLK, false);
-#endif
-
-    if(result == CY_RSLT_SUCCESS)
-    {
-        /* Init SDIO Host */
-        result = cyhal_sdio_init(sdhc_obj, CYBSP_WIFI_SDIO_CMD, CYBSP_WIFI_SDIO_CLK, CYBSP_WIFI_SDIO_D0, CYBSP_WIFI_SDIO_D1, CYBSP_WIFI_SDIO_D2, CYBSP_WIFI_SDIO_D3);;
-        
-        if(result == CY_RSLT_SUCCESS)
-        {
-            /* WiFi put power  */
-            cyhal_gpio_write(CYBSP_WIFI_WL_REG_ON, true);
-            osDelay(WLAN_POWER_UP_DELAY_MS);
-        }
-      result=sdio_enumerate(sdhc_obj);
-
-      if(result == CY_RSLT_SUCCESS) sdio_enable_high_speed();
-
-    }
-    return result;
-}
-
-static cy_rslt_t init_sdio_bus(whd_driver_t* drv, cyhal_sdio_t   *sdhc_obj)
-{
-    cy_rslt_t res = whd_init_hardware_sdio(sdhc_obj);
-    if (res != CY_RSLT_SUCCESS) {
-        return res;
-    }
-    return whd_bus_sdio_attach(*drv, &sdio_config, sdhc_obj);
-}
-
-cyhal_sdio_t   sdhc_obj;
-
-cy_rslt_t cybsp_wifi_init_primary(whd_interface_t* interface)
-{
-    whd_init_config_t whd_init_config;
-    whd_init_config.thread_stack_size = (uint32_t)WHD_THREAD_STACK_SIZE;
-    whd_init_config.thread_stack_start = NULL;
-    whd_init_config.thread_priority =  (uint32_t)WHD_THREAD_PRIORITY;
-    whd_init_config.country = WHD_COUNTRY;
-
-    cy_rslt_t result = whd_init(&whd_drv, &whd_init_config, &resource_ops, &buffer_ops, &netif_ops);
-    if(result == CY_RSLT_SUCCESS)
-    {
-        result = init_sdio_bus(&whd_drv, &sdhc_obj);
-        if(result == CY_RSLT_SUCCESS)
-        {
-            result = whd_wifi_on(whd_drv, interface);
-        }
-    }
-    return result;
-}
-
-cy_rslt_t cybsp_wifi_init_secondary(whd_interface_t* interface, whd_mac_t* mac_address)
-{
-    return whd_add_secondary_interface(whd_drv, mac_address, interface);
-}
-
-cy_rslt_t cybsp_wifi_deinit(whd_interface_t interface)
-{
-    cy_rslt_t result = whd_wifi_off(interface);
-    if(result == CY_RSLT_SUCCESS)
-    {
-        result = whd_deinit(interface);
-        if(result == CY_RSLT_SUCCESS)
-        {
-            cyhal_gpio_free(CYBSP_WIFI_WL_REG_ON);
-        }
-    }
-    return result;
-}
-
-whd_driver_t cybsp_get_wifi_driver(void)
-{
-    return whd_drv;
-}
-
-#if defined(__cplusplus)
-}
-#endif
\ No newline at end of file
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cybsp_wifi.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cybsp_wifi.h
deleted file mode 100644
index 31bfc82566..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cybsp_wifi.h
+++ /dev/null
@@ -1,109 +0,0 @@
-/***************************************************************************//**
-* \file cybsp_wifi.h
-*
-* \brief
-* Basic abstraction layer for dealing with boards containing a Cypress MCU. This
-* API provides convenience methods for initializing and manipulating different
-* hardware found on the board.
-*
-********************************************************************************
-* \copyright
-* Copyright 2018-2019 Cypress Semiconductor Corporation
-* SPDX-License-Identifier: Apache-2.0
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-*     http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*******************************************************************************/
-
-/**
-* \addtogroup group_bsp_wifi WiFi
-* \{
-* Basic abstraction layer for dealing with boards containing a Cypress MCU. This
-* API provides convenience methods for initializing and manipulating different
-* hardware found on the board.
-*
-* \defgroup group_bsp_wifi_macros Macros
-* \defgroup group_bsp_wifi_functions Functions
-*/
-#pragma once
-
-#include "cy_result.h"
-#include "whd_wifi_api.h"
-
-#if defined(__cplusplus)
-extern "C" {
-#endif
-
-/**
-* \addtogroup group_bsp_wifi_macros
-* \{
-*/
-
-/** Initialization of the WiFi driver failed. */
-#define CYBSP_RSLT_WIFI_INIT_FAILED (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_ABSTRACTION_BSP, 4))
-
-/** SDIO enumeration failed. */
-#define CYBSP_RSLT_WIFI_SDIO_ENUM_TIMEOUT (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_ABSTRACTION_BSP, 5))
-
-/** \} group_bsp_board_macros */
-
-/**
-* \addtogroup group_bsp_wifi_functions
-* \{
-*/
-
-/** Initializes the primary interface for the WiFi driver on the board. This function
- * does the following
- * 1) Initializes the WiFi driver.
- * 2) Turns on the WiFi chip.
- *
- * @note This function cannot be called multiple times. The user needs to first de-initialize
- * before calling this function again.
- * 
- * @param[out] interface Interface to be initialized 
- * @return CY_RSLT_SUCCESS for successful initialization or error if initialization failed.
- */
-cy_rslt_t cybsp_wifi_init_primary(whd_interface_t* interface);
-
-/** This function initializes and adds a secondary interface to the WiFi driver.
- *  @note This function does not initialize the WiFi driver or turn on the WiFi chip.
- * That is required to be done by the primary interface
- * 
- * @param[out] interface Interface to be initialized
- * @param[in] mac_address Mac address for secondary interface
- * @return CY_RSLT_SUCCESS for successful initialization or error if initialization failed.
- */
-cy_rslt_t cybsp_wifi_init_secondary(whd_interface_t* interface, whd_mac_t* mac_address);
-
-/** De-initializes all WiFi interfaces and the WiFi driver. This function does the following
- * 1) Deinitializes all WiFi interfaces and WiFi driver.
- * 2) Turns off the WiFi chip.
- *
- * @param[in] interface Interface to be de-initialized.
- * @return CY_RSLT_SUCCESS for successful de-initialization or error if de-initialization failed.
- */
-cy_rslt_t cybsp_wifi_deinit(whd_interface_t interface);
-
-/** Gets the wifi driver instance initialized by the driver. This should only be called
- * after the interface is initialized by cybsp_wifi_init_primary().
- *
- * @return Wifi driver instance pointer.
- */
-whd_driver_t cybsp_get_wifi_driver(void);
-
-/** \} group_bsp_wifi_functions */
-
-#ifdef __cplusplus
-}
-#endif /* __cplusplus */
-
-/** \} group_bsp_wifi */
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_version.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cycfg.h
similarity index 79%
rename from targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_version.h
rename to targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cycfg.h
index 79a39ee3e9..7a3dee0ca9 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/inc/whd_version.h
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cycfg.h
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020 Cypress Semiconductor Corporation
+ * Copyright 2020 Arduino SA
  * SPDX-License-Identifier: Apache-2.0
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -15,6 +15,6 @@
  * limitations under the License.
  */
 
-#define WHD_VERSION "v1.91.2"
-#define WHD_BRANCH "v1.91.2"
-#define WHD_DATE "2020-06-25 02:15:47 -0500"
+/** @file
+ *  Empty file to be compliant with Cypress COMPONENT_WHD
+ */
\ No newline at end of file
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal.h
new file mode 100644
index 0000000000..e56be0e013
--- /dev/null
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal.h
@@ -0,0 +1,52 @@
+/*
+ * Copyright 2020 Arduino SA
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/** @file
+ *  Provides cyhal porting to generic mbed APIs
+ */
+#include "whd_config.h"
+#include "cyhal_hw_types.h"
+#include "cyhal_gpio.h"
+#include "cyhal_sdio.h"
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+typedef enum
+{
+  CYBSP_WIFI_WL_REG_ON,
+  CYBSP_WIFI_32K_CLK,
+  CYBSP_LED1,
+  CYBSP_LED2,
+  CYBSP_WIFI_SDIO_CMD,
+  CYBSP_WIFI_SDIO_CLK,
+  CYBSP_WIFI_SDIO_D0,
+  CYBSP_WIFI_SDIO_D1,
+  CYBSP_WIFI_SDIO_D2,
+  CYBSP_WIFI_SDIO_D3,
+  CYBSP_SDIO_OOB_IRQ,
+  CYBSP_WIFI_MAX,
+} wwd_sdio_pin_t;
+
+void cyhal_system_delay_ms(uint32_t milliseconds);
+cy_rslt_t sdio_enable_high_speed(void);
+
+#if defined(__cplusplus)
+}
+#endif
+
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_gpio.cpp b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_gpio.cpp
new file mode 100644
index 0000000000..930764c77f
--- /dev/null
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_gpio.cpp
@@ -0,0 +1,104 @@
+/*
+ * Copyright 2020 Arduino SA
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/** @file
+ *  Provides the porting layer for STM32 GPIOs on WHD driver
+ */
+
+#include <stdio.h>
+#include "cyhal.h"
+#include "cybsp.h"
+#include "mbed.h"
+#include "wiced_filesystem.h"
+
+extern pinconfig_t      PinConfig[];
+
+/*******************************************************************************
+*       Internal
+*******************************************************************************/
+static mbed::InterruptIn *oob_irq;
+static cyhal_gpio_event_t oob_event = CYHAL_GPIO_IRQ_FALL;
+static cyhal_gpio_event_callback_t oob_handler;
+static void *oob_handler_arg;
+
+/*******************************************************************************
+*       Internal Interrrupt Service Routine
+*******************************************************************************/
+static void cb()
+{
+    oob_handler(oob_handler_arg, oob_event);
+}
+
+/*******************************************************************************
+*       HAL Implementation
+*******************************************************************************/
+cy_rslt_t cyhal_gpio_init(cyhal_gpio_t pin, cyhal_gpio_direction_t direction, cyhal_gpio_drive_mode_t drvMode, bool initVal)
+{
+    cy_rslt_t     ret = CY_RSLT_SUCCESS;
+
+    // Workaround to enable GPIOJ clock
+    if (pin == CYBSP_WIFI_WL_REG_ON) {
+        __HAL_RCC_GPIOJ_CLK_ENABLE();
+        // Ensure FS and BlockDevice are initialized on time if needed
+        wiced_filesystem_init();
+    }
+    // Ignore the parameter and take the pin config directly from a static array defintions
+    HAL_GPIO_Init(PinConfig[pin].port, &PinConfig[pin].config);
+    if (direction == CYHAL_GPIO_DIR_OUTPUT) {
+        HAL_GPIO_WritePin(PinConfig[pin].port, PinConfig[pin].config.Pin, (initVal) ? GPIO_PIN_SET : GPIO_PIN_RESET);
+    }
+    // Workaround to initialize sdio interface without cypress bsp init
+    if (pin == CYBSP_WIFI_WL_REG_ON) {
+        cyhal_sdio_t *sdio_p = cybsp_get_wifi_sdio_obj();
+        ret = cyhal_sdio_init(sdio_p, CYBSP_WIFI_SDIO_CMD, CYBSP_WIFI_SDIO_CLK, CYBSP_WIFI_SDIO_D0, CYBSP_WIFI_SDIO_D1, CYBSP_WIFI_SDIO_D2, CYBSP_WIFI_SDIO_D3);
+    }
+    return ret;
+}
+
+void cyhal_gpio_write(cyhal_gpio_t pin, bool value)
+{
+    HAL_GPIO_WritePin(PinConfig[pin].port, PinConfig[pin].config.Pin, (value) ? GPIO_PIN_SET : GPIO_PIN_RESET);
+}
+
+void cyhal_gpio_register_callback(cyhal_gpio_t pin, cyhal_gpio_event_callback_t handler, void *handler_arg)
+{
+    if (handler && handler_arg && (oob_irq == NULL)) {
+        oob_irq = new mbed::InterruptIn(PJ_5);
+        oob_handler = handler;
+        oob_handler_arg = handler_arg;
+    }
+}
+
+void cyhal_gpio_enable_event(cyhal_gpio_t pin, cyhal_gpio_event_t event, uint8_t intr_priority, bool enable)
+{
+    oob_event = event;
+    if (enable) {
+        if (event == CYHAL_GPIO_IRQ_RISE) {
+            oob_irq->rise(cb);
+        }
+        if (event == CYHAL_GPIO_IRQ_FALL) {
+            oob_irq->fall(cb);
+        }
+    } else if (oob_irq != NULL) {
+        delete oob_irq;
+    }
+}
+
+void cyhal_gpio_free(cyhal_gpio_t pin)
+{
+    // Do nothing
+}
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_hw_types.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_hw_types.h
similarity index 78%
rename from targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_hw_types.h
rename to targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_hw_types.h
index 0436834aff..1f872abb37 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/interface/cyhal_hw_types.h
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_hw_types.h
@@ -41,6 +41,7 @@
 #pragma once
 #include <stdbool.h>
 #include "stm32h7xx_hal.h"
+#include "PinNames.h"
 
 /*
  #include "TODO: Port specific header file"
@@ -50,6 +51,14 @@
 extern "C" {
 #endif
 
+
+#ifndef CYHAL_ISR_PRIORITY_DEFAULT
+/** Priority that is applied by default to all drivers when initalized. Priorities can be
+ * overridden on each driver as part of enabling events.
+ */
+#define CYHAL_ISR_PRIORITY_DEFAULT  (7)
+#endif
+
 /**
  * \addtogroup group_hal_hw_types_data_structures
  * \{
@@ -71,6 +80,18 @@ typedef struct
     void *div_type;
 } cyhal_clock_divider_t;
 
+/** Clock object */
+typedef struct
+{
+    //For backwards compatibility with cyhal_clock_divider_t only. Do not use going forward.
+    int                     div_type;                /*!< Deprecated */
+    uint8_t                 div_num;                 /*!< Deprecated */
+    //End BWC items
+    int                     block;
+    uint8_t                 channel;
+    bool                    reserved;
+} cyhal_clock_t;
+
 /** SDIO object */
 typedef   void*  *cyhal_sdio_t;
 
@@ -81,23 +102,11 @@ typedef struct
     void *empty;
 } cyhal_spi_t;
 
-
-#include "whd_debug.h"
-
-#if defined(WPRINT_ENABLE_WHD_ERROR) || defined(WPRINT_ENABLE_WHD_INFO) || defined(WPRINT_ENABLE_WHD_DEBUG)
-/** \} group_hal_hw_types_data_structures */
-#define PRINTF(...)   do { \
-                      (void) printf(__VA_ARGS__); \
-                      } while (0)
-#else
-#define PRINTF(...)
-#endif
-
 #include "whd_config.h"
+#include "whd_debug.h"
 
 #if defined(__cplusplus)
 }
 #endif /* __cplusplus */
 
 /** \} group_hal_hw_types */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_sdio.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_sdio.c
new file mode 100644
index 0000000000..34aa5498e1
--- /dev/null
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_sdio.c
@@ -0,0 +1,483 @@
+/*
+ * Copyright 2020 Cypress Semiconductor Corporation
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/** @file
+ *  Provides the porting layer for STM32 SDIO on WHD driver
+ */
+
+#include <stdio.h>
+#include <string.h>
+#include "whd_thread.h"
+#include "bus_protocols/whd_bus_sdio_protocol.h"
+#include "cyabs_rtos.h"
+#include "cyhal_sdio.h"
+
+#define SDIO_RESPONSE_SHORT             SDMMC_RESPONSE_SHORT
+#define SDIO_WAIT_NO                    SDMMC_WAIT_NO
+#define SDIO_CPSM_ENABLE                SDMMC_CPSM_ENABLE
+#define SDIO_CMDTRANS                   SDMMC_CMD_CMDTRANS
+#define SDIO_FLAG_CMDACT                (SDMMC_STA_CPSMACT | SDMMC_STA_DPSMACT)
+#define SDIO_TRANSFER_DIR_TO_SDIO       SDMMC_TRANSFER_DIR_TO_SDMMC
+#define SDIO_TRANSFER_DIR_TO_CARD       SDMMC_TRANSFER_DIR_TO_CARD
+#define SDIO_TRANSFER_MODE_BLOCK        SDMMC_TRANSFER_MODE_BLOCK
+#define SDIO_DPSM_ENABLE                SDMMC_DPSM_ENABLE
+#define SDIO_DPSM_DISABLE               SDMMC_DPSM_DISABLE
+#define SDIO_DCTRL_SDIOEN               SDMMC_DCTRL_SDIOEN       /* 1 << 11 */
+#define SDIO_DCTRL_DTMODE_1             SDMMC_DCTRL_DTMODE_1     /* 1<<3 */
+#define SDIO_STA_DTIMEOUT               SDMMC_STA_DTIMEOUT
+#define SDIO_STA_CTIMEOUT               SDMMC_STA_CTIMEOUT
+#define SDIO_STA_CCRCFAIL               SDMMC_STA_CCRCFAIL
+#define SDIO_STA_DCRCFAIL               SDMMC_STA_DCRCFAIL
+#define SDIO_STA_TXUNDERR               SDMMC_STA_TXUNDERR
+#define SDIO_STA_RXOVERR                SDMMC_STA_RXOVERR
+#define SDIO_STA_TXACT                  SDMMC_STA_CPSMACT
+#define SDIO_STA_RXACT                  SDMMC_STA_DPSMACT
+#define SDIO_STA_CMDREND                SDMMC_STA_CMDREND
+#define SDIO_STA_CMDSENT                SDMMC_STA_CMDSENT
+#define SDIO_CMD_CMDTRANS               SDMMC_CMD_CMDTRANS
+#define SDIO                            SDMMC1
+
+#define COMMAND_FINISHED_CMD52_TIMEOUT_LOOPS (100000)
+#define BUS_LEVEL_MAX_RETRIES                      10
+
+#define SDIO_CMD_5      5
+#define SDIO_CMD_53     53
+
+#define  SDIO_STA_STBITERR               ((uint32_t)0x00000200)        /*!<Start bit not detected on all data signals in wide bus mode */
+#define SDIO_ERROR_MASK                  ( SDMMC_STA_CCRCFAIL | SDMMC_STA_DCRCFAIL | SDMMC_STA_CTIMEOUT | SDMMC_STA_DTIMEOUT | SDMMC_STA_TXUNDERR | SDMMC_STA_RXOVERR )
+
+#define LINK_MTU        1024
+#define MAX(a,b)        (a>b)?a:b
+
+extern pinconfig_t     PinConfig[];
+extern  SD_HandleTypeDef hsd;
+
+/* for debug prints only */
+//static int num = 0;
+
+static uint32_t      dctrl;
+
+static whd_driver_t whd_handler;
+static cyhal_sdio_irq_handler_t sdio_irq_handler;
+
+static uint8_t       temp_dma_buffer[2048] __attribute__((aligned(8)));
+static uint8_t                     *user_data;
+static uint32_t                     user_data_size;
+static uint8_t                     *dma_data_source;
+static uint32_t                     dma_transfer_size;
+static cyhal_transfer_t    current_transfer_direction;
+
+static cy_semaphore_t sdio_transfer_finished_semaphore;
+static volatile uint32_t       sdio_transfer_failed = 0;
+static volatile uint32_t       irqstatus = 0;
+static int current_command = 0;
+
+static cy_rslt_t sdio_enable_high_speed(void)
+{
+    SDMMC_InitTypeDef sdio_init_structure;
+
+    sdio_init_structure.ClockDiv       = SDMMC_HSpeed_CLK_DIV;
+    sdio_init_structure.ClockEdge      = SDMMC_CLOCK_EDGE_RISING;
+    sdio_init_structure.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
+    sdio_init_structure.BusWide        = SDMMC_BUS_WIDE_4B;
+    sdio_init_structure.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
+
+    SDMMC_Init(SDMMC1, sdio_init_structure);
+    return CY_RSLT_SUCCESS;
+}
+
+static uint32_t find_optimal_block_size(uint32_t data_size)
+{
+    if (data_size > (uint32_t) 256) {
+        return 512;
+    }
+    if (data_size > (uint32_t) 128) {
+        return 256;
+    }
+    if (data_size > (uint32_t) 64) {
+        return 128;
+    }
+    if (data_size > (uint32_t) 32) {
+        return 64;
+    }
+    if (data_size > (uint32_t) 16) {
+        return 32;
+    }
+    if (data_size > (uint32_t) 8) {
+        return 16;
+    }
+    if (data_size > (uint32_t) 4) {
+        return 8;
+    }
+    if (data_size > (uint32_t) 2) {
+        return 4;
+    }
+
+    return 4;
+}
+
+static uint32_t sdio_get_blocksize(uint32_t blocksize)
+{
+    uint32_t      n = 0;
+    blocksize >>= 1;
+    while (blocksize) {
+        n++;
+        blocksize >>= 1;
+    }
+    n <<= 4;
+    return n;
+}
+
+static void sdio_prepare_data_transfer(cyhal_transfer_t direction, uint32_t block_size, uint8_t *data, uint16_t data_size)
+{
+    /* Setup a single transfer using the temp buffer */
+    user_data         = data;
+    user_data_size    = data_size;
+    dma_transfer_size = (uint32_t)(((data_size + (uint16_t) block_size - 1) / (uint16_t) block_size) * (uint16_t) block_size);
+
+    if (direction == CYHAL_WRITE) {
+
+#if !(defined(DUAL_CORE) && defined(CORE_CM4))
+        SCB_CleanDCache_by_Addr((uint32_t *)dma_data_source, data_size + 32);
+#endif
+        memcpy(temp_dma_buffer, data, data_size);
+        dma_data_source = temp_dma_buffer;
+    } else {
+        dma_data_source = (uint8_t *)temp_dma_buffer;
+        //VIKR
+        //memset(dma_data_source,0x12,data_size);
+
+#if !(defined(DUAL_CORE) && defined(CORE_CM4))
+        /* Cache-Invalidate the output from DMA */
+        SCB_CleanDCache_by_Addr((uint32_t *)dma_data_source, data_size + 32);
+#endif
+    }
+
+    SDIO->DTIMER = (uint32_t) 0xFFFFFFFF;
+    SDIO->DLEN   = dma_transfer_size;
+    dctrl = sdio_get_blocksize(block_size) | ((direction == CYHAL_READ) ? SDIO_TRANSFER_DIR_TO_SDIO : SDIO_TRANSFER_DIR_TO_CARD) | SDIO_TRANSFER_MODE_BLOCK | SDIO_DPSM_DISABLE  | SDIO_DCTRL_SDIOEN;
+    SDIO->DCTRL = dctrl;
+
+    SDMMC1->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
+    SDMMC1->IDMABASE0 = (uint32_t) dma_data_source;
+}
+
+static void sdio_enable_bus_irq(void)
+{
+    SDMMC1->MASK = SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND | SDMMC_IT_CMDREND | SDMMC_IT_CMDSENT;
+}
+
+void SDMMC1_IRQHandler(void)
+{
+    uint32_t intstatus = SDIO->STA;
+
+    irqstatus = intstatus;
+    //VIKR  | SDIO_STA_STBITERR )
+    if ((intstatus & (SDIO_STA_CCRCFAIL | SDIO_STA_DCRCFAIL | SDIO_STA_TXUNDERR | SDIO_STA_RXOVERR)) != 0) {
+        WPRINT_WHD_DEBUG(("sdio error flagged\n"));
+        sdio_transfer_failed = intstatus;
+        SDIO->ICR = (uint32_t) 0xffffffff;
+        cy_rtos_set_semaphore(&sdio_transfer_finished_semaphore, WHD_TRUE);
+    } else {
+        if ((intstatus & (SDMMC_STA_CMDREND | SDMMC_STA_CMDSENT)) != 0) {
+            if ((SDMMC1->RESP1 & 0x800) != 0) {
+                sdio_transfer_failed = irqstatus;
+                cy_rtos_set_semaphore(&sdio_transfer_finished_semaphore, WHD_TRUE);
+            }
+
+            /* Clear all command/response interrupts */
+            SDMMC1->ICR = (SDMMC_STA_CMDREND | SDMMC_STA_CMDSENT);
+        }
+
+        /* Check whether the external interrupt was triggered */
+        if (intstatus & SDMMC_STA_SDIOIT) {
+            /* Clear the interrupt */
+            SDMMC1->ICR = SDMMC_STA_SDIOIT;
+            /* Inform WICED WWD thread */
+            sdio_irq_handler(whd_handler, CYHAL_SDIO_CARD_INTERRUPT);
+        }
+
+        if (intstatus & SDMMC_STA_DATAEND) {
+            SDMMC1->ICR      = SDMMC_STA_DATAEND;
+            SDMMC1->DLEN     = 0;
+            SDMMC1->DCTRL    = SDMMC_DCTRL_SDIOEN;
+            SDMMC1->IDMACTRL = SDMMC_DISABLE_IDMA;
+            SDMMC1->CMD      = 0;
+            cy_rtos_set_semaphore(&sdio_transfer_finished_semaphore, WHD_TRUE);
+        }
+    }
+}
+
+//void  sdio_dma_irq(void)
+//{
+//    /* Clear interrupt */
+//    DMA2->LIFCR = (uint32_t)(0x3F << 22);
+//    cy_rtos_set_semaphore(&sdio_transfer_finished_semaphore, WHD_TRUE);
+//}
+
+cy_rslt_t cyhal_sdio_init(cyhal_sdio_t *obj, cyhal_gpio_t cmd, cyhal_gpio_t clk, cyhal_gpio_t data0, cyhal_gpio_t data1, cyhal_gpio_t data2, cyhal_gpio_t data3)
+{
+    cy_rslt_t     ret = CY_RSLT_SUCCESS;
+
+    __HAL_RCC_GPIOC_CLK_ENABLE();
+    __HAL_RCC_GPIOD_CLK_ENABLE();
+    __HAL_RCC_SDMMC1_CLK_ENABLE();
+
+    HAL_GPIO_Init(PinConfig[cmd].port, &PinConfig[cmd].config);
+    HAL_GPIO_Init(PinConfig[clk].port, &PinConfig[clk].config);
+    HAL_GPIO_Init(PinConfig[data0].port, &PinConfig[data0].config);
+    HAL_GPIO_Init(PinConfig[data1].port, &PinConfig[data1].config);
+    HAL_GPIO_Init(PinConfig[data2].port, &PinConfig[data2].config);
+    HAL_GPIO_Init(PinConfig[data3].port, &PinConfig[data3].config);
+
+    /* Reset SDIO Block */
+    SDMMC_PowerState_OFF(SDMMC1);
+    __HAL_RCC_SDMMC1_FORCE_RESET();
+    __HAL_RCC_SDMMC1_RELEASE_RESET();
+
+    /* Enable the SDIO Clock */
+    __HAL_RCC_SDMMC1_CLK_ENABLE();
+
+#if !(defined(DUAL_CORE) && defined(CORE_CM4))
+    /* Disable DCache for STM32H7 family */
+    SCB_CleanDCache();
+    SCB_DisableDCache();
+#endif
+
+    WPRINT_WHD_DEBUG(("in init: %p\n", sdio_transfer_finished_semaphore));
+
+    // Lower  speed configuration
+    SDMMC_InitTypeDef sdio_init_structure;
+
+    sdio_init_structure.ClockDiv            = SDMMC_INIT_CLK_DIV;
+    sdio_init_structure.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
+    sdio_init_structure.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
+    sdio_init_structure.BusWide             = SDMMC_BUS_WIDE_1B;
+    sdio_init_structure.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
+    ret                              = SDMMC_Init(SDMMC1, sdio_init_structure);
+    ret                             |= SDMMC_PowerState_ON(SDMMC1);
+    ret                             |= SDMMC_SetSDMMCReadWaitMode(SDMMC1, SDMMC_READ_WAIT_MODE_CLK);
+    if (ret) {
+        return ret;
+    }
+
+    /* Clear all SDIO interrupts */
+    SDMMC1->ICR = (uint32_t) 0xffffffff;
+
+    /* Turn on SDIO IRQ */
+    /* Must be lower priority than the value of configMAX_SYSCALL_INTERRUPT_PRIORITY */
+    /* otherwise FreeRTOS will not be able to mask the interrupt */
+    /* keep in mind that ARMCM7 interrupt priority logic is inverted, the highest value */
+    /* is the lowest priority */
+    HAL_NVIC_EnableIRQ((IRQn_Type) SDMMC1_IRQn);
+    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
+
+    WPRINT_WHD_DEBUG(("after enable sdio: %p\n", sdio_transfer_finished_semaphore));
+
+    if (cy_rtos_init_semaphore(&sdio_transfer_finished_semaphore, 1, 0) != WHD_SUCCESS) {
+        cy_rtos_deinit_semaphore(&sdio_transfer_finished_semaphore);
+        return -1;
+    }
+
+    WPRINT_WHD_DEBUG(("cy_rtos_init_semaphore: %p\n", sdio_transfer_finished_semaphore));
+
+    return ret;
+}
+
+void cyhal_sdio_free(cyhal_sdio_t *obj)
+{
+    //TODO
+}
+
+cy_rslt_t cyhal_sdio_configure(cyhal_sdio_t *obj, const cyhal_sdio_cfg_t *config)
+{
+    return sdio_enable_high_speed();
+}
+
+cy_rslt_t cyhal_sdio_send_cmd(const cyhal_sdio_t *obj, cyhal_transfer_t direction, cyhal_sdio_command_t command, uint32_t argument, uint32_t *response)
+{
+    uint32_t loop_count = 0;
+    cy_rslt_t result;
+    uint16_t attempts = 0;
+    uint32_t temp_sta;
+
+    if (response != NULL) {
+        *response = 0;
+    }
+    current_command = 0;
+
+restart:
+    SDIO->ICR = (uint32_t) 0xFFFFFFFF;
+    ++attempts;
+
+    /* Check if we've tried too many times */
+    if (attempts >= (uint16_t) BUS_LEVEL_MAX_RETRIES) {
+        /* WWD_SDIO_RETRIES_EXCEEDED */
+        result = -1;
+        goto exit;
+    }
+
+    /* Send the command */
+    SDIO->ARG = argument;
+    SDIO->CMD = (uint32_t)(command | SDIO_RESPONSE_SHORT | SDIO_WAIT_NO | SDIO_CPSM_ENABLE);
+    loop_count = (uint32_t) COMMAND_FINISHED_CMD52_TIMEOUT_LOOPS;
+    do {
+        temp_sta = SDIO->STA;
+        loop_count--;
+        if (loop_count == 0 /*|| ((response != NULL) && ((temp_sta & SDIO_ERROR_MASK) != 0))*/) {
+            WPRINT_WHD_DEBUG(("Restart single access loop count %ld  stat %lx\n", loop_count, temp_sta));
+            HAL_Delay(10U);
+            goto restart;
+        }
+    } while ((temp_sta & SDIO_FLAG_CMDACT) != 0);
+
+    if (response != NULL) {
+        *response = SDIO->RESP1;
+    }
+    result = CY_RSLT_SUCCESS;
+
+exit:
+    if (result) {
+        WPRINT_WHD_ERROR(("SDIO->POWER %lx \n", SDIO->POWER));
+        WPRINT_WHD_ERROR(("SDIO->CLKCR %lx \n", SDIO->CLKCR));
+        WPRINT_WHD_ERROR(("result %lx \n", result));
+        WPRINT_WHD_ERROR(("cyhal_sdio_send_cmd %s\n", (result == 0) ? "Passed" : "Failed"));
+        while (1);
+    }
+    SDMMC1->CMD = 0;
+
+    //WPRINT_WHD_DEBUG(("%d %s cmd 0x%x  arg 0x%x  resp 0x%x\n",num++,(direction!=CYHAL_READ)?"Write":"Read",command,argument,(response)?*response:0));
+    return result;
+}
+
+cy_rslt_t cyhal_sdio_bulk_transfer(cyhal_sdio_t *obj, cyhal_transfer_t direction, uint32_t argument, const uint32_t *data, uint16_t length, uint32_t *response)
+{
+    cy_rslt_t result;
+    uint16_t attempts = 0;
+    uint32_t  block_size = 64;
+    sdio_cmd_argument_t arg;
+    uint32_t      cmd;
+    current_command = SDIO_CMD_53;
+    current_transfer_direction = direction;
+    arg.value = argument;
+
+    sdio_enable_bus_irq();
+    if (response != NULL) {
+        *response = 0;
+    }
+
+restart:
+    sdio_transfer_failed = 0;
+    SDMMC1->ICR = (uint32_t) 0xFFFFFFFF;
+    ++attempts;
+
+    /* Check if we've tried too many times */
+    if (attempts >= (uint16_t) BUS_LEVEL_MAX_RETRIES) {
+        /* WWD_SDIO_RETRIES_EXCEEDED */
+        WPRINT_WHD_ERROR(("Too much attempt\n"));
+        result = -1;
+        goto exit;
+    }
+
+    /* Dodgy STM32 hack to set the CMD53 byte mode size to be the same as the block size */
+    if (arg.cmd53.block_mode == 0) {
+        block_size = find_optimal_block_size(arg.cmd53.count);
+        if (block_size < SDIO_512B_BLOCK) {
+            arg.cmd53.count = block_size;
+        } else {
+            arg.cmd53.count = 0;
+        }
+        argument = arg.value;
+    }
+
+    SDMMC1->CMD |= SDMMC_CMD_CMDTRANS;
+
+    /* Prepare the SDIO for a data transfer */
+    sdio_prepare_data_transfer(direction, block_size, (uint8_t *) data, (uint32_t) length);
+
+    /* Send the command */
+    //WPRINT_WHD_DEBUG(("%d bs=%d argument=%x\n",num++,block_size,argument));
+    SDMMC1->ARG = argument;
+    cmd = (uint32_t)(SDIO_CMD_53 | SDMMC_RESPONSE_SHORT | SDMMC_WAIT_NO | SDMMC_CPSM_ENABLE | SDMMC_CMD_CMDTRANS);
+    SDMMC1->CMD = cmd;
+
+    /* Wait for the whole transfer to complete */
+    //WPRINT_WHD_DEBUG(("cy_rtos_get_semaphore: %d\n", sdio_transfer_finished_semaphore));
+    result = cy_rtos_get_semaphore(&sdio_transfer_finished_semaphore, 50, WHD_FALSE);
+
+    if (result != CY_RSLT_SUCCESS) {
+        WPRINT_WHD_ERROR(("failed getting semaphore\n"));
+        goto exit;
+    }
+    if (sdio_transfer_failed) {
+        WPRINT_WHD_DEBUG(("try again sdio_transfer_failed  %"PRIu32" irq %"PRIu32"\n", sdio_transfer_failed, irqstatus));
+        goto restart;
+    }
+    /* Check if there were any SDIO errors */
+    if ((SDIO->STA & (SDIO_STA_DTIMEOUT | SDIO_STA_CTIMEOUT)) != 0) {
+        WPRINT_WHD_DEBUG(("sdio errors SDIO_STA_DTIMEOUT | SDIO_STA_CTIMEOUT\n"));
+        goto restart;
+    } else if (((SDIO->STA & (SDIO_STA_CCRCFAIL | SDIO_STA_DCRCFAIL | SDIO_STA_TXUNDERR | SDIO_STA_RXOVERR)) != 0)) {
+        WPRINT_WHD_DEBUG(("sdio errors SDIO_STA_CCRCFAIL | SDIO_STA_DCRCFAIL | SDIO_STA_TXUNDERR | SDIO_STA_RXOVER \n"));
+        goto restart;
+    }
+
+    if (direction == CYHAL_READ) {
+        memcpy(user_data, dma_data_source, (size_t) user_data_size);
+    }
+
+    if (response != NULL) {
+        *response = SDIO->RESP1;
+    }
+    result = CY_RSLT_SUCCESS;
+
+exit:
+    SDMMC1->CMD = 0;
+
+    //WPRINT_WHD_DEBUG(("%d %s cmd 53 argument %lx datasize %d  blocknumber 0x%x   cmdis %lx %lu dctrl = %x\n", num++, (direction != CYHAL_READ) ? "Write" : "Read", argument, length, arg.cmd53.count, cmd, cmd, dctrl));
+
+    return result;
+}
+
+cy_rslt_t cyhal_sdio_transfer_async(cyhal_sdio_t *obj, cyhal_transfer_t direction, uint32_t argument, const uint32_t *data, uint16_t length)
+{
+    //TODO
+    return CYHAL_SDIO_RET_NO_SP_ERRORS;
+}
+
+bool cyhal_sdio_is_busy(const cyhal_sdio_t *obj)
+{
+    return false;
+}
+
+cy_rslt_t cyhal_sdio_abort_async(const cyhal_sdio_t *obj)
+{
+    //TODO
+    return CYHAL_SDIO_RET_NO_SP_ERRORS;
+}
+
+void cyhal_sdio_register_callback(cyhal_sdio_t *obj, cyhal_sdio_irq_handler_t handler, void *handler_arg)
+{
+    whd_handler = (whd_driver_t)handler_arg;
+    sdio_irq_handler = handler;
+}
+
+void cyhal_sdio_enable_event(cyhal_sdio_t *obj, cyhal_sdio_irq_event_t event, uint8_t intr_priority, bool enable)
+{
+    //TODO
+}
+
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_spi.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_spi.c
new file mode 100644
index 0000000000..162c7a6801
--- /dev/null
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_spi.c
@@ -0,0 +1,29 @@
+/*
+ * Copyright 2020 Arduino SA
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/** @file
+ *  Provides stubs for the WHD driver needed by ARMClang
+ */
+
+#include <stdio.h>
+#include <string.h>
+#include "cyhal_spi.h"
+
+cy_rslt_t cyhal_spi_transfer(cyhal_spi_t *obj, const uint8_t *tx, size_t tx_length, uint8_t *rx, size_t rx_length, uint8_t write_fill)
+{
+    // Do nothing
+}
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_system.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_system.h
new file mode 100644
index 0000000000..7a3dee0ca9
--- /dev/null
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/cyhal_system.h
@@ -0,0 +1,20 @@
+/*
+ * Copyright 2020 Arduino SA
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/** @file
+ *  Empty file to be compliant with Cypress COMPONENT_WHD
+ */
\ No newline at end of file
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_clm.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/wiced_bd.h
similarity index 52%
rename from targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_clm.h
rename to targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/wiced_bd.h
index 168e34d5e7..578b2d9e4e 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_clm.h
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/wiced_bd.h
@@ -1,13 +1,13 @@
 /*
- * Copyright 2020 Cypress Semiconductor Corporation
+ * Copyright 2020 Arduino SA
  * SPDX-License-Identifier: Apache-2.0
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *     http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -16,30 +16,34 @@
  */
 
 /** @file
- *  Provides generic clm blob file download functionality
+ *  Provides wiced fs porting to generic mbed APIs
  */
-#ifndef _WHD_INTERNAL_CLM_H_
-#define _WHD_INTERNAL_CLM_H_
 
-#include "whd.h"
+#pragma once
+
+#include "whd_config.h"
+#include "BlockDevice.h"
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 /******************************************************
-*                      Macros
-******************************************************/
-
-
-/******************************************************
-*             Function prototypes
-******************************************************/
-whd_result_t whd_process_clm_data(whd_interface_t ifp);
+ *                 Type Definitions
+ ******************************************************/
+
+/**
+ * Mount the physical device
+ *
+ * This assumes that the device is ready to read/write immediately.
+ *
+ * @param[in]  device        - physical media to init
+ * @param[out] fs_handle_out - Receives the filesystem handle.
+ *
+ * @return WICED_SUCCESS on success
+ */
+wiced_result_t wiced_filesystem_mount(mbed::BlockDevice *device, wiced_filesystem_handle_type_t fs_type, wiced_filesystem_t *fs_handle_out, const char *mounted_name);
 
 #ifdef __cplusplus
 } /*extern "C" */
 #endif
-
-#endif /* ifndef _WHD_INTERNAL_CLM_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/wiced_filesystem.cpp b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/wiced_filesystem.cpp
new file mode 100644
index 0000000000..bea07abdef
--- /dev/null
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/wiced_filesystem.cpp
@@ -0,0 +1,220 @@
+/*
+ * Copyright 2020 Arduino SA
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/** @file
+ *  Provides wiced fs porting to generic mbed APIs
+ */
+
+#include <stddef.h>
+#include <stdio.h>
+#include <stdbool.h>
+#include <string>
+#include "sockets.h"
+#include "resources.h"
+#include "wiced_filesystem.h"
+#include "wiced_bd.h"
+#include "QSPIFBlockDevice.h"
+#include "MBRBlockDevice.h"
+#include "FATFileSystem.h"
+
+#define WIFI_DEFAULT_FIRMWARE_PATH "/wlan/4343WA1.BIN"
+#define WIFI_DEFAULT_MOUNT_NAME "wlan"
+#define WIFI_DEFAULT_PARTITION 1
+#define WIFI_DEFAULT_FS 0
+
+BlockDevice      *qspi_bd = NULL;
+MBRBlockDevice   *mbr_bd = NULL;
+FATFileSystem    *wifi_fs = NULL;
+
+wiced_filesystem_t resource_fs_handle;
+
+MBED_WEAK BlockDevice *BlockDevice::get_default_instance()
+{
+    static QSPIFBlockDevice default_bd(PD_11, PD_12, PF_7, PD_13,  PF_10, PG_6, QSPIF_POLARITY_MODE_1, 40000000);
+    return &default_bd;
+}
+
+MBED_WEAK void wiced_filesystem_mount_error(void)
+{
+    WPRINT_WHD_ERROR(("Failed to mount the filesystem containing the WiFi firmware.\n\r"));
+    whd_print_logbuffer();
+    while (1) {}
+}
+
+MBED_WEAK void wiced_filesystem_firmware_error(void)
+{
+    WPRINT_WHD_ERROR(("Please run the \"WiFiFirmwareUpdater\" sketch once to install the WiFi firmware.\n\r"));
+    whd_print_logbuffer();
+    while (1) {}
+}
+
+MBED_WEAK wiced_result_t whd_firmware_check_hook(const char *mounted_name, int mount_err)
+{
+    DIR *dir;
+    struct dirent *ent;
+    std::string dir_name(mounted_name);
+    if (mount_err) {
+        wiced_filesystem_mount_error();
+    } else {
+        if ((dir = opendir(mounted_name)) != NULL) {
+            // print all the files and directories within directory
+            while ((ent = readdir(dir)) != NULL) {
+                std::string fullname =  "/" + dir_name + "/" + std::string(ent->d_name);
+                if (fullname == WIFI_DEFAULT_FIRMWARE_PATH) {
+                    closedir(dir);
+                    return WICED_SUCCESS;
+                }
+            }
+            closedir(dir);
+        }
+        wiced_filesystem_firmware_error();
+    }
+    return WICED_ERROR;
+}
+
+static wiced_result_t whd_default_firmware_restore(void)
+{
+#if MBED_CONF_APP_WIFI_FIRMWARE_RESTORE
+    size_t ret;
+    FILE *fp;
+
+    //This should only happen the firs time or if the partition table has been overwritten i.e QSPI tests
+    WPRINT_WHD_DEBUG(("MBRBlockDevice init failed, repatitioning\n\r"));
+    if (mbr_bd->partition(qspi_bd, 1, 0x0B, 0, 1024 * 1024) != BD_ERROR_OK) {
+        return WICED_ERROR;
+    }
+    WPRINT_WHD_DEBUG(("MBRBockDevice repatitioning OK, reinit\n\r"));
+
+    if (mbr_bd->init() != BD_ERROR_OK) {
+        return WICED_ERROR;
+    }
+    WPRINT_WHD_DEBUG(("MBRBockDevice init OK\n\r"));
+
+    wifi_fs = new FATFileSystem(WIFI_DEFAULT_MOUNT_NAME);
+
+    if (wifi_fs->reformat(mbr_bd) != 0) {
+        return WICED_ERROR;
+    }
+    WPRINT_WHD_DEBUG(("FATFileSystem reformat and mount OK\n\r"));
+
+    fp = fopen(WIFI_DEFAULT_FIRMWARE_PATH, "wb");
+    if (fp == NULL) {
+        return WICED_ERROR;
+    }
+    ret = fwrite(wifi_firmware_image_data, wifi_firmware_image.size, 1, fp);
+    if (ret != wifi_firmware_image.size) {
+        return WICED_ERROR;
+    }
+    fclose(fp);
+
+    if (mbr_bd->sync() != 0) {
+        return WICED_ERROR;
+    }
+    WPRINT_WHD_DEBUG(("Sync BlockDevice OK\n\r"));
+
+    if (wifi_fs->unmount() != 0) {
+        return WICED_ERROR;
+    }
+    WPRINT_WHD_DEBUG(("Unmount FS\n\r"));
+    wifi_fs = NULL;
+#endif
+
+    return WICED_SUCCESS;
+}
+
+wiced_result_t wiced_filesystem_init(void)
+{
+    if (mbr_bd == NULL && wifi_fs == NULL) {
+        WPRINT_WHD_DEBUG(("Initialize FileSystem with Mbed default settings\n\r"));
+        qspi_bd = mbed::BlockDevice::get_default_instance();
+
+        if (qspi_bd->init() == BD_ERROR_OK) {
+            mbr_bd = new MBRBlockDevice(qspi_bd, WIFI_DEFAULT_PARTITION);
+            if (mbr_bd->init() == BD_ERROR_OK) {
+                return WICED_SUCCESS;
+            } else {
+                return whd_default_firmware_restore();
+            }
+        }
+        return WICED_ERROR;
+    } else {
+        WPRINT_WHD_DEBUG(("FileSystem initialized with user settings\n\r"));
+        return WICED_SUCCESS;
+    }
+}
+
+wiced_result_t wiced_filesystem_mount(BlockDevice *device, wiced_filesystem_handle_type_t fs_type, wiced_filesystem_t *fs_handle_out, const char *mounted_name)
+{
+    wifi_fs = new FATFileSystem(mounted_name);
+
+    int err = wifi_fs->mount(device);
+    whd_firmware_check_hook(mounted_name, err);
+    if (!err) {
+        //fs_handle_out = wifi_fs
+        return WICED_SUCCESS;
+    }
+    return WICED_ERROR;
+}
+
+wiced_result_t wiced_filesystem_file_open(wiced_filesystem_t *fs_handle, wiced_file_t *file_handle_out, const char *filename, wiced_filesystem_open_mode_t mode)
+{
+    /* This is called by mbed test system */
+    //if (mbr_bd == NULL && wifi_fs == NULL) {
+    //    wiced_filesystem_init();
+    //}
+    //This can be called from user sketch to provide custom block device and mount point before WiFi.beginAP or WiFi.begin
+    if (wifi_fs == NULL) {
+        wiced_filesystem_mount(mbr_bd, WIFI_DEFAULT_FS, fs_handle, WIFI_DEFAULT_MOUNT_NAME);
+    }
+
+    if (wifi_fs == NULL) {
+        return WICED_ERROR;
+    }
+
+    *file_handle_out = open(filename, mode);
+    if (*file_handle_out == -1) {
+        return WICED_ERROR;
+    }
+    return WICED_SUCCESS;
+}
+
+wiced_result_t wiced_filesystem_file_seek(wiced_file_t *file_handle, int64_t offset, wiced_filesystem_seek_type_t whence)
+{
+    if (*file_handle == -1) {
+        return WICED_ERROR;
+    }
+    lseek(*file_handle, offset, whence);
+    return WICED_SUCCESS;
+}
+
+wiced_result_t wiced_filesystem_file_read(wiced_file_t *file_handle, void *data, uint64_t bytes_to_read, uint64_t *returned_bytes_count)
+{
+    if (*file_handle == -1) {
+        return WICED_ERROR;
+    }
+    *returned_bytes_count = read(*file_handle, data, bytes_to_read);
+    return WICED_SUCCESS;
+}
+
+wiced_result_t wiced_filesystem_file_close(wiced_file_t *file_handle)
+{
+    if (*file_handle == -1) {
+        return WICED_ERROR;
+    }
+    close(*file_handle);
+    return WICED_SUCCESS;
+}
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/wiced_filesystem.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/wiced_filesystem.h
new file mode 100644
index 0000000000..a65aa3c148
--- /dev/null
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/port/wiced_filesystem.h
@@ -0,0 +1,139 @@
+/*
+ * Copyright 2020 Arduino SA
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/** @file
+ *  Provides wiced fs porting to generic mbed APIs
+ */
+
+#pragma once
+
+#include "whd_config.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+/******************************************************
+ *                   Enumerations
+ ******************************************************/
+
+typedef enum {
+    WICED_FILESYSTEM_OPEN_FOR_READ,      /** Specifies read access to the object. Data can be read from the file - equivalent to "r" or "rb" */
+    WICED_FILESYSTEM_OPEN_FOR_WRITE,     /** Specifies read/write access to the object. Data can be written to the file - equivalent to "r+" or "rb+" or "r+b" */
+    WICED_FILESYSTEM_OPEN_WRITE_CREATE,  /** Opens for read/write access, creates it if it doesn't exist */
+    WICED_FILESYSTEM_OPEN_ZERO_LENGTH,   /** Opens for read/write access, Truncates file to zero length if it exists, or creates it if it doesn't - equivalent to "w+", "wb+" or "w+b" */
+    WICED_FILESYSTEM_OPEN_APPEND,        /** Opens for read/write access, places the current location at the end of the file ready for appending - equivalent to "a", "ab" */
+    WICED_FILESYSTEM_OPEN_APPEND_CREATE, /** Opens for read/write access, creates it if it doesn't exist, and places the current location at the end of the file ready for appending  - equivalent to "a+", "ab+" or "a+b" */
+} wiced_filesystem_open_mode_t;
+
+typedef enum {
+    WICED_FILESYSTEM_SEEK_SET = SEEK_SET,      /* Offset from start of file */
+    WICED_FILESYSTEM_SEEK_CUR = SEEK_CUR,      /* Offset from current position in file */
+    WICED_FILESYSTEM_SEEK_END = SEEK_END,      /* Offset from end of file */
+} wiced_filesystem_seek_type_t;
+
+typedef enum {
+    WICED_SUCCESS = 0,
+    WICED_ERROR = 1
+} wiced_result_t;
+
+/******************************************************
+ *                 Type Definitions
+ ******************************************************/
+
+/**
+ * File-system Handle Structure
+ */
+typedef int wiced_filesystem_t;
+
+/**
+ * File Handle Structure
+ *
+ */
+typedef int wiced_file_t;
+
+/**
+ * File-system type Handle Structure
+ */
+typedef int wiced_filesystem_handle_type_t;
+
+/**
+ * Initialise the BlockDevice and filesystem module
+ *
+ * Initialises the BlockDevice and filesystem module before mounting a physical device.
+ *
+ * @return WICED_SUCCESS on success
+ */
+wiced_result_t wiced_filesystem_init(void);
+
+/**
+ * Open a file for reading or writing
+ *
+ * @param[in]  fs_handle       - The filesystem handle to use - obtained from wiced_filesystem_mount
+ * @param[out] file_handle_out - a pointer to a wiced_file_t structure which will receive the
+ *                               file handle after it is opened
+ * @param[in]  filename        - The filename of the file to open
+ * @param[in]  mode            - Specifies read or write access
+ *
+ * @return WICED_SUCCESS on success
+ */
+wiced_result_t wiced_filesystem_file_open(wiced_filesystem_t *fs_handle, wiced_file_t *file_handle_out, const char *filename, wiced_filesystem_open_mode_t mode);
+
+/**
+ * Seek to a location within a file
+ *
+ * This is similar to the fseek() in ISO C.
+ *
+ * @param[in] file_handle - The file handle on which to perform the seek.
+ *                          Must have been previously opened with wiced_filesystem_fopen.
+ * @param[in] offset      - The offset in bytes
+ * @param[in] whence      - WICED_FILESYSTEM_SEEK_SET = Offset from start of file
+ *                          WICED_FILESYSTEM_SEEK_CUR = Offset from current position in file
+ *                          WICED_FILESYSTEM_SEEK_END = Offset from end of file
+ *
+ * @return WICED_SUCCESS  on success
+ */
+wiced_result_t wiced_filesystem_file_seek(wiced_file_t *file_handle, int64_t offset, wiced_filesystem_seek_type_t whence);
+
+/**
+ * Reads data from a file into a memory buffer
+ *
+ * @param[in] file_handle          - the file handle to read from
+ * @param[out] data                - A pointer to the memory buffer that will
+ *                                   receive the data that is read
+ * @param[in] bytes_to_read        - the number of bytes to read
+ * @param[out] returned_item_count - the number of items successfully read.
+ *
+ * @return WICED_SUCCESS  on success
+ */
+wiced_result_t wiced_filesystem_file_read(wiced_file_t *file_handle, void *data, uint64_t bytes_to_read, uint64_t *returned_bytes_count);
+
+/**
+ * Close a file
+ *
+ * This is similar to the fclose() in ISO C.
+ *
+ * @param[in] file_handle - the file handle to close
+ *
+ * @return WICED_SUCCESS = success
+ */
+wiced_result_t wiced_filesystem_file_close(wiced_file_t *file_handle);
+
+#ifdef __cplusplus
+} /*extern "C" */
+#endif
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1-mfgtest.bin b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1-mfgtest.bin
deleted file mode 100644
index 6963d81dbc0c2cbb776c9bc3beb3883196ce1ada..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 391693
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%0DHfMGcT{z
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

diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1-mfgtest.clm_blob b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1-mfgtest.clm_blob
deleted file mode 100644
index 2538cb4457ecf805b2903c5319faf3393c4ce6e4..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 7222
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
I|Ay$l0OgYfa{vGU

diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1-mfgtest_bin.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1-mfgtest_bin.c
deleted file mode 100644
index 278fc779c6..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1-mfgtest_bin.c
+++ /dev/null
@@ -1,23672 +0,0 @@
-/*
- * Copyright (c) 2019, Cypress Semiconductor Corporation, All Rights Reserved
- * SPDX-License-Identifier: LicenseRef-PBL
- *
- * This file and the related binary are licensed under the
- * Permissive Binary License, Version 1.0 (the "License");
- * you may not use these files except in compliance with the License.
- *
- * You may obtain a copy of the License here:
- * LICENSE-permissive-binary-license-1.0.txt and at
- * https://www.mbed.com/licenses/PBL-1.0
- *
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-#include "wiced_resource.h"
-
-#if defined(CY_STORAGE_WIFI_DATA)
-CY_SECTION_WHD(CY_STORAGE_WIFI_DATA) __attribute__((used))
-#endif
-const unsigned char wifi_mfg_firmware_image_data[391693] = {
-        0, 0, 0, 0, 61, 32, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0, 105, 31, 0,
-        0, 105, 31, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0, 105,
-        31, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0,
-        105, 31, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0, 105, 31,
-        0, 0, 105, 31, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0, 105,
-        31, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0,
-        105, 31, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0, 105, 31, 0, 0, 0, 72, 0,
-        71, 61, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 66, 80, 80,
-        48, 44, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 160, 1, 0, 139, 81, 2, 0,
-        231, 81, 2, 0, 245, 75, 2, 0, 109, 73, 2, 0, 185, 72, 2, 0, 1, 74, 2,
-        0, 119, 71, 2, 0, 83, 72, 2, 0, 97, 82, 2, 0, 105, 82, 2, 0, 57, 71,
-        2, 0, 83, 71, 2, 0, 161, 76, 2, 0, 97, 71, 2, 0, 45, 81, 2, 0, 77, 71,
-        2, 0, 189, 79, 2, 0, 177, 31, 0, 0, 173, 31, 0, 0, 237, 31, 0, 0, 143,
-        62, 3, 0, 101, 62, 3, 0, 179, 60, 3, 0, 207, 60, 3, 0, 147, 62, 3, 0,
-        231, 60, 3, 0, 63, 162, 1, 0, 35, 134, 0, 0, 91, 129, 0, 0, 31, 134,
-        0, 0, 165, 125, 0, 0, 149, 129, 0, 0, 99, 134, 0, 0, 209, 134, 0, 0,
-        189, 130, 0, 0, 213, 134, 0, 0, 215, 134, 0, 0, 243, 133, 0, 0, 207,
-        134, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 145, 175, 1, 0, 51, 166, 1,
-        0, 133, 164, 1, 0, 217, 162, 1, 0, 121, 164, 1, 0, 217, 41, 0, 0, 15,
-        127, 1, 0, 11, 127, 1, 0, 21, 127, 1, 0, 77, 175, 1, 0, 225, 161, 1,
-        0, 215, 164, 1, 0, 7, 127, 1, 0, 225, 169, 1, 0, 1, 127, 1, 0, 217,
-        41, 0, 0, 123, 175, 1, 0, 171, 70, 3, 0, 217, 41, 0, 0, 53, 160, 1,
-        0, 217, 41, 0, 0, 245, 72, 3, 0, 205, 149, 2, 0, 247, 129, 2, 0, 41,
-        143, 2, 0, 53, 143, 2, 0, 205, 141, 2, 0, 245, 160, 2, 0, 43, 172, 2,
-        0, 139, 135, 2, 0, 59, 130, 2, 0, 35, 152, 2, 0, 9, 148, 2, 0, 61, 138,
-        2, 0, 237, 137, 2, 0, 201, 135, 2, 0, 177, 135, 2, 0, 171, 135, 2, 0,
-        77, 152, 2, 0, 13, 135, 2, 0, 217, 41, 0, 0, 217, 41, 0, 0, 41, 131,
-        2, 0, 217, 41, 0, 0, 217, 41, 0, 0, 35, 172, 2, 0, 217, 41, 0, 0, 217,
-        41, 0, 0, 173, 134, 2, 0, 39, 130, 2, 0, 49, 130, 2, 0, 63, 146, 2,
-        0, 61, 143, 2, 0, 37, 130, 2, 0, 55, 144, 2, 0, 125, 155, 2, 0, 113,
-        147, 2, 0, 205, 134, 2, 0, 5, 152, 2, 0, 229, 160, 2, 0, 165, 160, 2,
-        0, 177, 160, 2, 0, 127, 151, 2, 0, 215, 134, 2, 0, 75, 146, 2, 0, 107,
-        146, 2, 0, 65, 146, 2, 0, 41, 146, 2, 0, 199, 141, 2, 0, 31, 130, 2,
-        0, 25, 130, 2, 0, 41, 172, 2, 0, 237, 146, 2, 0, 183, 135, 2, 0, 45,
-        172, 2, 0, 225, 151, 2, 0, 77, 135, 2, 0, 9, 152, 2, 0, 133, 138, 2,
-        0, 21, 142, 2, 0, 139, 141, 2, 0, 217, 41, 0, 0, 217, 41, 0, 0, 157,
-        141, 2, 0, 37, 141, 2, 0, 173, 138, 2, 0, 217, 41, 0, 0, 217, 41, 0,
-        0, 217, 41, 0, 0, 217, 41, 0, 0, 151, 141, 2, 0, 217, 41, 0, 0, 79,
-        148, 2, 0, 217, 41, 0, 0, 1, 71, 3, 0, 205, 72, 3, 0, 205, 69, 3, 0,
-        97, 70, 3, 0, 153, 74, 3, 0, 115, 72, 3, 0, 173, 74, 3, 0, 177, 73,
-        3, 0, 121, 74, 3, 0, 159, 73, 3, 0, 115, 70, 3, 0, 253, 68, 3, 0, 249,
-        71, 3, 0, 217, 41, 0, 0, 135, 115, 3, 0, 217, 41, 0, 0, 217, 41, 0,
-        0, 131, 115, 3, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217,
-        41, 0, 0, 217, 41, 0, 0, 143, 121, 3, 0, 217, 41, 0, 0, 217, 41, 0,
-        0, 217, 41, 0, 0, 117, 129, 3, 0, 73, 129, 3, 0, 217, 41, 0, 0, 17,
-        127, 3, 0, 223, 128, 3, 0, 253, 126, 3, 0, 25, 129, 3, 0, 241, 125,
-        3, 0, 1, 167, 1, 0, 105, 162, 3, 0, 139, 162, 3, 0, 143, 162, 3, 0,
-        217, 41, 0, 0, 217, 41, 0, 0, 117, 148, 3, 0, 11, 150, 3, 0, 217, 41,
-        0, 0, 77, 154, 3, 0, 217, 41, 0, 0, 217, 41, 0, 0, 183, 177, 3, 0, 217,
-        41, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0,
-        217, 41, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217, 41,
-        0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217,
-        41, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0,
-        217, 41, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 81, 35, 0, 0, 213, 48,
-        0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 109, 99, 0, 0, 121,
-        99, 0, 0, 113, 101, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217, 41, 0,
-        0, 217, 41, 0, 0, 217, 41, 0, 0, 5, 194, 0, 0, 217, 41, 0, 0, 63, 34,
-        0, 0, 101, 34, 0, 0, 37, 35, 0, 0, 93, 35, 0, 0, 109, 36, 0, 0, 105,
-        42, 0, 0, 225, 48, 0, 0, 237, 48, 0, 0, 121, 49, 0, 0, 37, 52, 0, 0,
-        85, 52, 0, 0, 113, 53, 0, 0, 21, 55, 0, 0, 255, 57, 0, 0, 253, 59, 0,
-        0, 185, 63, 0, 0, 73, 69, 0, 0, 113, 70, 0, 0, 225, 71, 0, 0, 93, 100,
-        0, 0, 217, 41, 0, 0, 169, 100, 0, 0, 135, 101, 0, 0, 141, 101, 0, 0,
-        169, 101, 0, 0, 201, 102, 0, 0, 225, 102, 0, 0, 9, 103, 0, 0, 29, 104,
-        0, 0, 35, 107, 0, 0, 139, 107, 0, 0, 241, 107, 0, 0, 255, 107, 0, 0,
-        67, 108, 0, 0, 237, 108, 0, 0, 51, 109, 0, 0, 125, 109, 0, 0, 153, 111,
-        0, 0, 69, 110, 0, 0, 73, 109, 0, 0, 167, 111, 0, 0, 245, 111, 0, 0,
-        199, 112, 0, 0, 249, 112, 0, 0, 33, 114, 0, 0, 225, 135, 0, 0, 231,
-        135, 0, 0, 235, 135, 0, 0, 9, 136, 0, 0, 77, 136, 0, 0, 137, 136, 0,
-        0, 157, 136, 0, 0, 189, 158, 0, 0, 101, 159, 0, 0, 253, 161, 0, 0, 73,
-        162, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217, 41, 0, 0, 217, 41, 0,
-        0, 129, 162, 0, 0, 115, 164, 0, 0, 153, 170, 0, 0, 41, 171, 0, 0, 211,
-        182, 0, 0, 45, 171, 0, 0, 57, 171, 0, 0, 163, 171, 0, 0, 85, 172, 0,
-        0, 213, 172, 0, 0, 65, 173, 0, 0, 129, 175, 0, 0, 113, 173, 0, 0, 65,
-        179, 0, 0, 217, 41, 0, 0, 213, 252, 0, 0, 23, 188, 0, 0, 43, 188, 0,
-        0, 57, 188, 0, 0, 149, 188, 0, 0, 101, 192, 0, 0, 217, 41, 0, 0, 217,
-        41, 0, 0, 47, 194, 0, 0, 125, 195, 0, 0, 245, 212, 0, 0, 249, 215, 0,
-        0, 81, 218, 0, 0, 187, 218, 0, 0, 225, 227, 0, 0, 73, 232, 0, 0, 43,
-        246, 0, 0, 27, 254, 0, 0, 241, 254, 0, 0, 189, 1, 1, 0, 223, 1, 1, 0,
-        237, 1, 1, 0, 225, 2, 1, 0, 59, 3, 1, 0, 87, 3, 1, 0, 75, 7, 1, 0, 225,
-        17, 1, 0, 189, 30, 1, 0, 37, 31, 1, 0, 241, 55, 1, 0, 247, 62, 1, 0,
-        225, 72, 1, 0, 125, 76, 1, 0, 253, 84, 1, 0, 201, 91, 1, 0, 145, 100,
-        1, 0, 73, 180, 1, 0, 101, 189, 1, 0, 169, 207, 1, 0, 203, 207, 1, 0,
-        55, 209, 1, 0, 227, 211, 1, 0, 217, 41, 0, 0, 205, 217, 1, 0, 85, 2,
-        2, 0, 187, 4, 2, 0, 41, 10, 2, 0, 217, 41, 0, 0, 177, 12, 2, 0, 37,
-        30, 2, 0, 29, 38, 2, 0, 65, 38, 2, 0, 71, 38, 2, 0, 103, 38, 2, 0, 187,
-        38, 2, 0, 7, 39, 2, 0, 85, 39, 2, 0, 143, 39, 2, 0, 237, 54, 2, 0, 225,
-        103, 2, 0, 171, 121, 3, 0, 183, 121, 3, 0, 113, 122, 3, 0, 195, 122,
-        3, 0, 245, 122, 3, 0, 57, 123, 3, 0, 93, 123, 3, 0, 101, 123, 3, 0,
-        105, 123, 3, 0, 203, 124, 3, 0, 207, 124, 3, 0, 251, 173, 3, 0, 1, 0,
-        0, 0, 0, 0, 0, 8, 32, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0, 0, 255, 3, 0, 0,
-        80, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
-        0, 1, 0, 0, 0, 1, 0, 0, 0, 232, 3, 0, 0, 4, 0, 0, 0, 10, 7, 8, 0, 110,
-        25, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 4, 0, 4, 0, 8, 0, 1, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
-        244, 204, 183, 0, 0, 0, 0, 2, 244, 166, 178, 0, 0, 0, 0, 2, 244, 56,
-        177, 0, 0, 0, 0, 1, 244, 32, 179, 0, 0, 0, 0, 1, 244, 234, 178, 0, 0,
-        0, 0, 255, 247, 10, 158, 0, 0, 0, 0, 250, 247, 86, 157, 0, 0, 0, 0,
-        250, 247, 230, 155, 0, 0, 0, 0, 250, 247, 34, 156, 0, 0, 0, 0, 250,
-        247, 104, 157, 0, 0, 0, 0, 250, 247, 2, 157, 0, 0, 0, 0, 250, 247, 89,
-        154, 0, 0, 0, 0, 254, 247, 141, 153, 0, 0, 0, 0, 1, 244, 54, 181, 0,
-        0, 0, 0, 0, 244, 134, 181, 0, 0, 0, 0, 230, 247, 123, 159, 0, 0, 0,
-        0, 247, 247, 16, 159, 0, 0, 0, 0, 247, 247, 48, 153, 0, 0, 0, 0, 247,
-        247, 240, 152, 0, 0, 0, 0, 250, 247, 170, 157, 0, 0, 0, 0, 250, 247,
-        246, 157, 0, 0, 0, 0, 250, 247, 138, 158, 0, 0, 0, 0, 250, 247, 140,
-        156, 0, 0, 0, 0, 240, 247, 248, 159, 0, 0, 0, 0, 240, 247, 208, 157,
-        0, 0, 0, 0, 240, 247, 60, 155, 0, 0, 0, 0, 245, 247, 27, 154, 0, 0,
-        0, 0, 244, 247, 178, 158, 0, 0, 0, 0, 238, 247, 252, 153, 0, 0, 0, 0,
-        240, 247, 50, 155, 0, 0, 0, 0, 235, 247, 205, 153, 0, 0, 0, 0, 244,
-        247, 211, 153, 0, 0, 0, 0, 243, 247, 10, 152, 0, 0, 0, 0, 235, 247,
-        90, 158, 0, 0, 0, 0, 241, 247, 2, 155, 0, 0, 0, 0, 232, 247, 94, 155,
-        0, 0, 0, 0, 232, 247, 34, 156, 0, 0, 0, 0, 240, 247, 116, 159, 0, 0,
-        0, 0, 228, 247, 220, 159, 0, 0, 0, 0, 239, 247, 1, 153, 0, 0, 0, 0,
-        228, 247, 88, 152, 0, 0, 0, 0, 227, 247, 230, 156, 0, 0, 0, 0, 226,
-        247, 170, 158, 0, 0, 0, 0, 226, 247, 174, 156, 0, 0, 0, 0, 230, 247,
-        144, 157, 0, 0, 0, 0, 230, 247, 108, 152, 0, 0, 0, 0, 229, 247, 124,
-        159, 0, 0, 0, 0, 229, 247, 230, 152, 0, 0, 0, 0, 228, 247, 204, 155,
-        0, 0, 0, 0, 228, 247, 192, 152, 0, 0, 0, 0, 228, 247, 111, 153, 0, 0,
-        0, 0, 227, 247, 86, 154, 0, 0, 0, 0, 227, 247, 130, 155, 0, 0, 0, 0,
-        227, 247, 65, 152, 0, 0, 0, 0, 226, 247, 73, 157, 0, 0, 0, 0, 226, 247,
-        69, 158, 0, 0, 0, 0, 226, 247, 25, 157, 0, 0, 0, 0, 226, 247, 145, 155,
-        0, 0, 0, 0, 226, 247, 2, 156, 0, 0, 0, 0, 226, 247, 133, 152, 0, 0,
-        0, 0, 226, 247, 77, 153, 0, 0, 0, 0, 227, 247, 40, 154, 0, 0, 0, 0,
-        227, 247, 184, 155, 0, 0, 0, 0, 225, 247, 54, 159, 0, 0, 0, 0, 225,
-        247, 253, 155, 0, 0, 0, 0, 222, 247, 160, 157, 0, 0, 0, 0, 223, 247,
-        104, 156, 0, 0, 0, 0, 223, 247, 42, 159, 0, 0, 0, 0, 222, 247, 84, 158,
-        0, 0, 0, 0, 234, 247, 97, 159, 0, 0, 0, 0, 219, 247, 170, 159, 0, 0,
-        0, 0, 221, 247, 58, 155, 0, 0, 0, 0, 221, 247, 75, 152, 0, 0, 0, 0,
-        221, 247, 34, 154, 0, 0, 0, 0, 221, 247, 178, 153, 0, 0, 0, 0, 218,
-        247, 88, 159, 0, 0, 0, 0, 218, 247, 160, 156, 0, 0, 0, 0, 218, 247,
-        254, 155, 0, 0, 0, 0, 218, 247, 82, 152, 0, 0, 0, 0, 219, 247, 138,
-        156, 0, 0, 0, 0, 219, 247, 1, 154, 0, 0, 0, 0, 219, 247, 52, 154, 0,
-        0, 0, 0, 218, 247, 209, 157, 0, 0, 0, 0, 218, 247, 240, 158, 0, 0, 0,
-        0, 218, 247, 31, 156, 0, 0, 0, 0, 218, 247, 43, 156, 0, 0, 0, 0, 218,
-        247, 47, 155, 0, 0, 0, 0, 218, 247, 101, 154, 0, 0, 0, 0, 212, 247,
-        142, 157, 0, 0, 0, 0, 212, 247, 159, 158, 0, 0, 0, 0, 212, 247, 232,
-        155, 0, 0, 0, 0, 212, 247, 58, 157, 0, 0, 0, 0, 212, 247, 152, 159,
-        0, 0, 0, 0, 212, 247, 92, 153, 0, 0, 0, 0, 212, 247, 6, 157, 0, 0, 0,
-        0, 212, 247, 168, 155, 0, 0, 0, 0, 212, 247, 166, 155, 0, 0, 0, 0, 232,
-        247, 17, 156, 0, 0, 0, 0, 212, 247, 238, 156, 0, 0, 0, 0, 217, 247,
-        42, 158, 0, 0, 0, 0, 229, 247, 96, 156, 0, 0, 0, 0, 212, 247, 188, 155,
-        0, 0, 0, 0, 212, 247, 227, 153, 0, 0, 0, 0, 212, 247, 188, 153, 0, 0,
-        0, 0, 212, 247, 197, 153, 0, 0, 0, 0, 212, 247, 76, 153, 0, 0, 0, 0,
-        212, 247, 150, 152, 0, 0, 0, 0, 227, 247, 224, 155, 0, 0, 0, 0, 209,
-        247, 194, 158, 0, 0, 0, 0, 209, 247, 247, 152, 0, 0, 0, 0, 209, 247,
-        130, 152, 0, 0, 0, 0, 227, 247, 39, 153, 0, 0, 0, 0, 224, 247, 102,
-        158, 0, 0, 0, 0, 229, 247, 234, 155, 0, 0, 0, 0, 222, 247, 40, 156,
-        0, 0, 0, 0, 222, 247, 187, 157, 0, 0, 0, 0, 207, 247, 86, 156, 0, 0,
-        0, 0, 207, 247, 98, 155, 0, 0, 0, 0, 206, 247, 219, 157, 0, 0, 0, 0,
-        227, 247, 172, 152, 0, 0, 0, 0, 228, 247, 189, 153, 0, 0, 0, 0, 227,
-        247, 86, 159, 0, 0, 0, 0, 208, 247, 188, 152, 0, 0, 0, 0, 207, 247,
-        218, 156, 0, 0, 0, 0, 207, 247, 143, 156, 0, 0, 0, 0, 207, 247, 222,
-        155, 0, 0, 0, 0, 223, 247, 180, 152, 0, 0, 0, 0, 226, 247, 145, 159,
-        0, 0, 0, 0, 230, 247, 222, 156, 0, 0, 0, 0, 206, 247, 55, 153, 0, 0,
-        0, 0, 206, 247, 138, 152, 0, 0, 0, 0, 205, 247, 191, 159, 0, 0, 0, 0,
-        212, 247, 146, 154, 0, 0, 0, 0, 228, 247, 62, 159, 0, 0, 0, 0, 228,
-        247, 206, 159, 0, 0, 0, 0, 221, 247, 192, 153, 0, 0, 0, 0, 220, 247,
-        115, 153, 0, 0, 0, 0, 221, 247, 102, 158, 0, 0, 0, 0, 206, 247, 190,
-        153, 0, 0, 0, 0, 206, 247, 228, 152, 0, 0, 0, 0, 205, 247, 245, 159,
-        0, 0, 0, 0, 205, 247, 250, 153, 0, 0, 0, 0, 204, 247, 138, 156, 0, 0,
-        0, 0, 229, 247, 124, 157, 0, 0, 0, 0, 229, 247, 48, 157, 0, 0, 0, 0,
-        226, 247, 134, 157, 0, 0, 0, 0, 223, 247, 160, 157, 0, 0, 0, 0, 227,
-        247, 214, 153, 0, 0, 0, 0, 224, 247, 36, 156, 0, 0, 0, 0, 205, 247,
-        222, 157, 0, 0, 0, 0, 227, 247, 5, 152, 0, 0, 0, 0, 224, 247, 0, 155,
-        0, 0, 0, 0, 223, 247, 44, 153, 0, 0, 0, 0, 224, 247, 25, 153, 0, 0,
-        0, 0, 219, 247, 15, 156, 0, 0, 0, 0, 223, 247, 236, 159, 0, 0, 0, 0,
-        227, 247, 188, 153, 0, 0, 0, 0, 196, 247, 222, 156, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        212, 8, 128, 0, 4, 0, 0, 0, 0, 16, 0, 0, 24, 67, 128, 0, 4, 0, 0, 0,
-        8, 16, 0, 0, 144, 67, 128, 0, 4, 0, 0, 0, 16, 16, 0, 0, 156, 83, 128,
-        0, 4, 0, 0, 0, 24, 16, 0, 0, 4, 85, 128, 0, 4, 0, 0, 0, 32, 16, 0, 0,
-        52, 114, 128, 0, 4, 0, 0, 0, 40, 16, 0, 0, 60, 131, 128, 0, 4, 0, 0,
-        0, 48, 16, 0, 0, 168, 132, 128, 0, 4, 0, 0, 0, 56, 16, 0, 0, 180, 132,
-        128, 0, 4, 0, 0, 0, 64, 16, 0, 0, 208, 123, 128, 0, 4, 0, 0, 0, 72,
-        16, 0, 0, 80, 124, 128, 0, 4, 0, 0, 0, 80, 16, 0, 0, 112, 134, 128,
-        0, 4, 0, 0, 0, 88, 16, 0, 0, 204, 167, 128, 0, 4, 0, 0, 0, 96, 16, 0,
-        0, 36, 78, 128, 0, 4, 0, 0, 0, 104, 16, 0, 0, 16, 54, 128, 0, 4, 0,
-        0, 0, 112, 16, 0, 0, 208, 66, 131, 0, 4, 0, 0, 0, 120, 16, 0, 0, 120,
-        190, 128, 0, 4, 0, 0, 0, 128, 16, 0, 0, 0, 198, 128, 0, 4, 0, 0, 0,
-        136, 16, 0, 0, 104, 200, 128, 0, 4, 0, 0, 0, 144, 16, 0, 0, 76, 229,
-        128, 0, 4, 0, 0, 0, 152, 16, 0, 0, 104, 230, 128, 0, 4, 0, 0, 0, 160,
-        16, 0, 0, 8, 233, 128, 0, 4, 0, 0, 0, 168, 16, 0, 0, 180, 235, 128,
-        0, 4, 0, 0, 0, 176, 16, 0, 0, 232, 147, 129, 0, 4, 0, 0, 0, 184, 16,
-        0, 0, 208, 149, 129, 0, 4, 0, 0, 0, 192, 16, 0, 0, 236, 152, 129, 0,
-        4, 0, 0, 0, 200, 16, 0, 0, 136, 160, 129, 0, 4, 0, 0, 0, 208, 16, 0,
-        0, 132, 162, 129, 0, 4, 0, 0, 0, 216, 16, 0, 0, 16, 244, 129, 0, 4,
-        0, 0, 0, 224, 16, 0, 0, 72, 247, 129, 0, 4, 0, 0, 0, 232, 16, 0, 0,
-        88, 248, 129, 0, 4, 0, 0, 0, 240, 16, 0, 0, 120, 2, 130, 0, 4, 0, 0,
-        0, 248, 16, 0, 0, 188, 15, 130, 0, 4, 0, 0, 0, 0, 17, 0, 0, 180, 31,
-        130, 0, 4, 0, 0, 0, 8, 17, 0, 0, 176, 37, 130, 0, 4, 0, 0, 0, 16, 17,
-        0, 0, 104, 43, 130, 0, 4, 0, 0, 0, 24, 17, 0, 0, 136, 45, 130, 0, 4,
-        0, 0, 0, 32, 17, 0, 0, 220, 50, 130, 0, 4, 0, 0, 0, 40, 17, 0, 0, 36,
-        25, 131, 0, 4, 0, 0, 0, 48, 17, 0, 0, 228, 65, 130, 0, 4, 0, 0, 0, 56,
-        17, 0, 0, 96, 45, 131, 0, 4, 0, 0, 0, 64, 17, 0, 0, 232, 50, 131, 0,
-        4, 0, 0, 0, 72, 17, 0, 0, 200, 61, 131, 0, 4, 0, 0, 0, 80, 17, 0, 0,
-        8, 64, 131, 0, 4, 0, 0, 0, 88, 17, 0, 0, 52, 79, 131, 0, 4, 0, 0, 0,
-        96, 17, 0, 0, 20, 82, 131, 0, 4, 0, 0, 0, 104, 17, 0, 0, 16, 83, 131,
-        0, 4, 0, 0, 0, 112, 17, 0, 0, 152, 107, 131, 0, 4, 0, 0, 0, 120, 17,
-        0, 0, 16, 122, 131, 0, 4, 0, 0, 0, 128, 17, 0, 0, 228, 130, 131, 0,
-        4, 0, 0, 0, 136, 17, 0, 0, 252, 131, 131, 0, 4, 0, 0, 0, 144, 17, 0,
-        0, 156, 146, 131, 0, 4, 0, 0, 0, 152, 17, 0, 0, 152, 147, 131, 0, 4,
-        0, 0, 0, 160, 17, 0, 0, 44, 164, 131, 0, 4, 0, 0, 0, 168, 17, 0, 0,
-        96, 165, 131, 0, 4, 0, 0, 0, 176, 17, 0, 0, 200, 165, 131, 0, 4, 0,
-        0, 0, 184, 17, 0, 0, 104, 167, 131, 0, 4, 0, 0, 0, 192, 17, 0, 0, 28,
-        169, 131, 0, 4, 0, 0, 0, 200, 17, 0, 0, 224, 174, 131, 0, 4, 0, 0, 0,
-        208, 17, 0, 0, 196, 177, 131, 0, 4, 0, 0, 0, 216, 17, 0, 0, 40, 181,
-        131, 0, 4, 0, 0, 0, 224, 17, 0, 0, 48, 184, 131, 0, 4, 0, 0, 0, 232,
-        17, 0, 0, 252, 191, 131, 0, 4, 0, 0, 0, 240, 17, 0, 0, 188, 196, 131,
-        0, 4, 0, 0, 0, 248, 17, 0, 0, 68, 217, 131, 0, 4, 0, 0, 0, 0, 18, 0,
-        0, 184, 238, 131, 0, 4, 0, 0, 0, 8, 18, 0, 0, 100, 246, 131, 0, 4, 0,
-        0, 0, 16, 18, 0, 0, 160, 250, 131, 0, 4, 0, 0, 0, 24, 18, 0, 0, 172,
-        253, 131, 0, 4, 0, 0, 0, 32, 18, 0, 0, 196, 69, 130, 0, 4, 0, 0, 0,
-        40, 18, 0, 0, 80, 67, 132, 0, 4, 0, 0, 0, 48, 18, 0, 0, 116, 73, 132,
-        0, 4, 0, 0, 0, 56, 18, 0, 0, 140, 75, 132, 0, 4, 0, 0, 0, 64, 18, 0,
-        0, 60, 77, 132, 0, 4, 0, 0, 0, 72, 18, 0, 0, 184, 77, 132, 0, 4, 0,
-        0, 0, 80, 18, 0, 0, 184, 85, 132, 0, 4, 0, 0, 0, 88, 18, 0, 0, 108,
-        97, 132, 0, 4, 0, 0, 0, 96, 18, 0, 0, 76, 99, 132, 0, 4, 0, 0, 0, 104,
-        18, 0, 0, 252, 101, 132, 0, 4, 0, 0, 0, 112, 18, 0, 0, 148, 110, 132,
-        0, 4, 0, 0, 0, 120, 18, 0, 0, 212, 112, 132, 0, 4, 0, 0, 0, 128, 18,
-        0, 0, 204, 115, 132, 0, 4, 0, 0, 0, 136, 18, 0, 0, 16, 122, 132, 0,
-        4, 0, 0, 0, 144, 18, 0, 0, 204, 123, 132, 0, 4, 0, 0, 0, 152, 18, 0,
-        0, 152, 125, 132, 0, 4, 0, 0, 0, 160, 18, 0, 0, 172, 133, 132, 0, 4,
-        0, 0, 0, 168, 18, 0, 0, 120, 135, 132, 0, 4, 0, 0, 0, 176, 18, 0, 0,
-        128, 135, 132, 0, 4, 0, 0, 0, 184, 18, 0, 0, 36, 234, 132, 0, 4, 0,
-        0, 0, 192, 18, 0, 0, 224, 236, 132, 0, 4, 0, 0, 0, 200, 18, 0, 0, 108,
-        241, 132, 0, 4, 0, 0, 0, 208, 18, 0, 0, 44, 242, 132, 0, 4, 0, 0, 0,
-        216, 18, 0, 0, 72, 4, 133, 0, 4, 0, 0, 0, 224, 18, 0, 0, 132, 242, 132,
-        0, 4, 0, 0, 0, 232, 18, 0, 0, 168, 11, 133, 0, 4, 0, 0, 0, 240, 18,
-        0, 0, 64, 17, 133, 0, 4, 0, 0, 0, 248, 18, 0, 0, 144, 17, 133, 0, 4,
-        0, 0, 0, 0, 19, 0, 0, 96, 87, 130, 0, 4, 0, 0, 0, 8, 19, 0, 0, 72, 243,
-        132, 0, 4, 0, 0, 0, 16, 19, 0, 0, 48, 146, 132, 0, 4, 0, 0, 0, 24, 19,
-        0, 0, 252, 156, 130, 0, 4, 0, 0, 0, 32, 19, 0, 0, 140, 21, 133, 0, 4,
-        0, 0, 0, 40, 19, 0, 0, 0, 25, 133, 0, 4, 0, 0, 0, 48, 19, 0, 0, 20,
-        25, 133, 0, 4, 0, 0, 0, 56, 19, 0, 0, 80, 25, 133, 0, 4, 0, 0, 0, 64,
-        19, 0, 0, 120, 25, 133, 0, 4, 0, 0, 0, 72, 19, 0, 0, 132, 244, 132,
-        0, 4, 0, 0, 0, 80, 19, 0, 0, 16, 163, 130, 0, 4, 0, 0, 0, 88, 19, 0,
-        0, 48, 65, 133, 0, 4, 0, 0, 0, 96, 19, 0, 0, 32, 80, 133, 0, 4, 0, 0,
-        0, 104, 19, 0, 0, 16, 78, 133, 0, 4, 0, 0, 0, 112, 19, 0, 0, 92, 169,
-        130, 0, 4, 0, 0, 0, 120, 19, 0, 0, 236, 171, 130, 0, 4, 0, 0, 0, 128,
-        19, 0, 0, 184, 174, 130, 0, 4, 0, 0, 0, 136, 19, 0, 0, 204, 10, 132,
-        0, 4, 0, 0, 0, 144, 19, 0, 0, 240, 17, 132, 0, 4, 0, 0, 0, 152, 19,
-        0, 0, 52, 111, 133, 0, 4, 0, 0, 0, 160, 19, 0, 0, 228, 115, 133, 0,
-        4, 0, 0, 0, 168, 19, 0, 0, 144, 126, 133, 0, 4, 0, 0, 0, 176, 19, 0,
-        0, 132, 175, 130, 0, 4, 0, 0, 0, 184, 19, 0, 0, 252, 177, 130, 0, 4,
-        0, 0, 0, 192, 19, 0, 0, 148, 180, 130, 0, 4, 0, 0, 0, 200, 19, 0, 0,
-        136, 51, 134, 0, 4, 0, 0, 0, 208, 19, 0, 0, 76, 61, 134, 0, 4, 0, 0,
-        0, 216, 19, 0, 0, 128, 62, 134, 0, 4, 0, 0, 0, 224, 19, 0, 0, 16, 63,
-        134, 0, 4, 0, 0, 0, 232, 19, 0, 0, 48, 197, 130, 0, 4, 0, 0, 0, 240,
-        19, 0, 0, 128, 197, 130, 0, 4, 0, 0, 0, 248, 19, 0, 0, 172, 200, 130,
-        0, 4, 0, 0, 0, 0, 20, 0, 0, 204, 97, 134, 0, 4, 0, 0, 0, 8, 20, 0, 0,
-        164, 98, 134, 0, 4, 0, 0, 0, 16, 20, 0, 0, 124, 99, 134, 0, 4, 0, 0,
-        0, 24, 20, 0, 0, 132, 18, 133, 0, 4, 0, 0, 0, 32, 20, 0, 0, 12, 111,
-        131, 0, 4, 0, 0, 0, 40, 20, 0, 0, 236, 208, 130, 0, 4, 0, 0, 0, 48,
-        20, 0, 0, 116, 28, 132, 0, 4, 0, 0, 0, 56, 20, 0, 0, 140, 31, 132, 0,
-        4, 0, 0, 0, 64, 20, 0, 0, 24, 34, 132, 0, 4, 0, 0, 0, 72, 20, 0, 0,
-        200, 144, 134, 0, 4, 0, 0, 0, 80, 20, 0, 0, 20, 146, 134, 0, 4, 0, 0,
-        0, 88, 20, 0, 0, 156, 147, 134, 0, 4, 0, 0, 0, 96, 20, 0, 0, 220, 165,
-        134, 0, 4, 0, 0, 0, 104, 20, 0, 0, 12, 185, 134, 0, 4, 0, 0, 0, 112,
-        20, 0, 0, 20, 217, 130, 0, 4, 0, 0, 0, 120, 20, 0, 0, 12, 220, 130,
-        0, 4, 0, 0, 0, 128, 20, 0, 0, 196, 221, 130, 0, 4, 0, 0, 0, 136, 20,
-        0, 0, 84, 235, 130, 0, 4, 0, 0, 0, 144, 20, 0, 0, 84, 236, 130, 0, 4,
-        0, 0, 0, 152, 20, 0, 0, 16, 237, 130, 0, 4, 0, 0, 0, 160, 20, 0, 0,
-        72, 202, 134, 0, 4, 0, 0, 0, 168, 20, 0, 0, 120, 237, 130, 0, 4, 0,
-        0, 0, 176, 20, 0, 0, 240, 238, 130, 0, 4, 0, 0, 0, 184, 20, 0, 0, 180,
-        239, 130, 0, 4, 0, 0, 0, 192, 20, 0, 0, 224, 241, 130, 0, 4, 0, 0, 0,
-        200, 20, 0, 0, 176, 36, 132, 0, 4, 0, 0, 0, 208, 20, 0, 0, 68, 254,
-        130, 0, 4, 0, 0, 0, 216, 20, 0, 0, 20, 0, 131, 0, 4, 0, 0, 0, 224, 20,
-        0, 0, 52, 104, 135, 0, 4, 0, 0, 0, 232, 20, 0, 0, 104, 70, 131, 105,
-        65, 105, 11, 181, 3, 105, 90, 70, 81, 70, 14, 180, 74, 70, 65, 70, 6,
-        180, 195, 104, 130, 104, 65, 104, 254, 180, 3, 104, 194, 105, 239, 243,
-        3, 129, 14, 180, 130, 105, 239, 243, 5, 129, 6, 180, 3, 72, 1, 104,
-        0, 41, 254, 208, 104, 70, 136, 71, 20, 176, 0, 189, 20, 32, 0, 0, 98,
-        182, 112, 71, 114, 182, 112, 71, 4, 73, 8, 64, 0, 40, 3, 208, 3, 73,
-        10, 104, 2, 67, 10, 96, 112, 71, 0, 0, 255, 255, 0, 0, 0, 225, 0, 224,
-        4, 73, 8, 64, 0, 40, 4, 208, 3, 73, 10, 104, 192, 67, 2, 64, 10, 96,
-        112, 71, 255, 255, 0, 0, 128, 225, 0, 224, 2, 73, 9, 104, 144, 34, 136,
-        88, 112, 71, 0, 0, 28, 32, 0, 0, 2, 73, 9, 104, 156, 34, 136, 80, 112,
-        71, 0, 0, 28, 32, 0, 0, 221, 186, 173, 187, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 74, 17,
-        104, 16, 96, 8, 28, 112, 71, 0, 0, 20, 32, 0, 0, 86, 72, 87, 73, 0,
-        34, 10, 80, 1, 104, 86, 74, 10, 64, 86, 79, 15, 64, 63, 66, 6, 209,
-        80, 70, 0, 66, 2, 208, 64, 70, 0, 66, 41, 209, 254, 231, 252, 33, 65,
-        88, 10, 104, 15, 35, 19, 64, 15, 43, 241, 208, 1, 43, 1, 208, 4, 49,
-        246, 231, 8, 49, 75, 75, 19, 64, 75, 76, 163, 66, 6, 209, 0, 240, 193,
-        248, 128, 70, 0, 240, 202, 248, 129, 70, 233, 231, 71, 76, 163, 66,
-        230, 209, 11, 31, 27, 104, 70, 76, 35, 64, 24, 36, 227, 64, 156, 70,
-        0, 240, 176, 248, 130, 70, 0, 240, 185, 248, 131, 70, 216, 231, 65,
-        73, 33, 34, 66, 80, 55, 74, 64, 73, 137, 88, 255, 35, 25, 66, 25, 208,
-        81, 104, 62, 75, 25, 66, 21, 208, 17, 104, 52, 75, 25, 64, 211, 106,
-        16, 224, 163, 66, 14, 208, 192, 70, 12, 224, 57, 73, 137, 88, 25, 66,
-        8, 208, 56, 73, 137, 88, 25, 64, 153, 66, 250, 209, 54, 75, 17, 105,
-        25, 66, 252, 208, 73, 70, 63, 66, 4, 209, 152, 35, 203, 88, 16, 36,
-        227, 64, 1, 224, 49, 75, 203, 88, 28, 36, 35, 64, 0, 43, 1, 208, 0,
-        240, 146, 248, 64, 70, 46, 73, 8, 96, 72, 70, 45, 73, 8, 96, 80, 70,
-        45, 73, 8, 96, 96, 70, 44, 73, 8, 96, 44, 73, 15, 96, 44, 77, 45, 73,
-        13, 96, 45, 72, 45, 73, 0, 34, 4, 192, 129, 66, 252, 216, 4, 61, 173,
-        70, 0, 157, 236, 67, 16, 35, 221, 65, 172, 66, 16, 209, 36, 12, 164,
-        0, 39, 77, 44, 96, 107, 70, 27, 27, 38, 72, 38, 77, 40, 96, 0, 44, 5,
-        208, 29, 104, 5, 96, 4, 51, 4, 48, 4, 60, 249, 220, 129, 176, 34, 75,
-        27, 73, 13, 104, 237, 26, 13, 96, 108, 70, 228, 26, 165, 70, 104, 70,
-        0, 9, 0, 1, 133, 70, 2, 240, 89, 251, 254, 231, 0, 0, 0, 24, 20, 6,
-        0, 0, 255, 255, 0, 0, 0, 0, 0, 240, 0, 255, 15, 0, 0, 42, 8, 0, 0, 14,
-        8, 0, 0, 0, 0, 255, 224, 1, 0, 0, 4, 6, 0, 0, 0, 0, 56, 0, 24, 6, 0,
-        0, 12, 6, 0, 0, 0, 16, 0, 0, 8, 4, 0, 0, 28, 32, 0, 0, 32, 32, 0, 0,
-        36, 32, 0, 0, 40, 32, 0, 0, 24, 32, 0, 0, 0, 0, 8, 0, 140, 16, 4, 0,
-        212, 27, 4, 0, 196, 50, 4, 0, 148, 16, 4, 0, 20, 28, 4, 0, 144, 16,
-        4, 0, 0, 0, 1, 0, 8, 104, 15, 34, 4, 49, 2, 64, 5, 42, 249, 209, 1,
-        74, 16, 64, 247, 70, 0, 0, 0, 240, 255, 255, 8, 104, 15, 34, 4, 49,
-        2, 64, 5, 42, 249, 209, 128, 34, 16, 66, 246, 208, 1, 74, 16, 64, 247,
-        70, 0, 240, 255, 255, 254, 231, 48, 181, 0, 35, 6, 224, 197, 92, 204,
-        92, 165, 66, 6, 211, 3, 241, 1, 3, 6, 216, 147, 66, 246, 209, 0, 32,
-        48, 189, 79, 240, 255, 48, 48, 189, 1, 32, 48, 189, 3, 42, 45, 233,
-        240, 79, 131, 70, 77, 217, 72, 64, 16, 240, 3, 0, 75, 209, 75, 66, 3,
-        240, 3, 3, 210, 26, 3, 224, 12, 92, 11, 248, 0, 64, 1, 48, 152, 66,
-        249, 209, 31, 42, 11, 235, 0, 3, 1, 68, 10, 217, 34, 240, 31, 0, 8,
-        24, 177, 232, 240, 23, 163, 232, 240, 23, 136, 66, 249, 216, 2, 240,
-        31, 2, 144, 8, 1, 56, 6, 40, 39, 216, 223, 232, 0, 240, 4, 9, 14, 19,
-        24, 29, 34, 0, 8, 104, 24, 96, 4, 49, 4, 51, 28, 224, 177, 232, 17,
-        0, 163, 232, 17, 0, 23, 224, 177, 232, 49, 0, 163, 232, 49, 0, 18, 224,
-        177, 232, 113, 0, 163, 232, 113, 0, 13, 224, 177, 232, 241, 0, 163,
-        232, 241, 0, 8, 224, 177, 232, 241, 16, 163, 232, 241, 16, 3, 224, 177,
-        232, 241, 17, 163, 232, 241, 17, 2, 240, 3, 2, 2, 224, 3, 70, 0, 224,
-        91, 70, 0, 32, 2, 224, 12, 92, 28, 84, 1, 48, 144, 66, 250, 209, 88,
-        70, 189, 232, 240, 143, 0, 72, 112, 71, 212, 27, 4, 0, 0, 72, 112, 71,
-        20, 44, 4, 0, 0, 72, 112, 71, 120, 44, 4, 0, 16, 181, 4, 70, 255, 247,
-        248, 255, 3, 104, 19, 177, 64, 104, 33, 70, 152, 71, 16, 189, 0, 72,
-        112, 71, 32, 44, 4, 0, 6, 240, 232, 190, 1, 35, 139, 64, 45, 233, 247,
-        79, 179, 245, 0, 31, 40, 191, 79, 244, 0, 19, 4, 43, 56, 191, 4, 35,
-        3, 48, 1, 147, 32, 240, 3, 4, 255, 247, 214, 255, 53, 75, 0, 34, 211,
-        248, 0, 176, 21, 70, 148, 70, 19, 70, 39, 224, 209, 248, 0, 160, 162,
-        69, 34, 211, 1, 241, 8, 7, 1, 158, 7, 235, 10, 8, 198, 241, 0, 9, 196,
-        235, 8, 6, 9, 234, 6, 6, 190, 66, 21, 211, 221, 248, 4, 144, 9, 241,
-        255, 57, 25, 234, 7, 15, 205, 248, 0, 144, 2, 208, 247, 27, 7, 47, 9,
-        217, 196, 235, 10, 7, 95, 69, 5, 210, 66, 70, 53, 70, 111, 177, 187,
-        70, 132, 70, 11, 70, 8, 70, 65, 104, 0, 41, 212, 209, 59, 185, 28, 74,
-        24, 70, 17, 104, 1, 49, 17, 96, 47, 224, 132, 70, 11, 70, 82, 27, 17,
-        27, 7, 41, 9, 217, 24, 104, 42, 25, 64, 26, 8, 57, 24, 96, 41, 81, 89,
-        104, 81, 96, 90, 96, 34, 70, 25, 104, 137, 26, 7, 41, 3, 216, 90, 104,
-        204, 248, 4, 32, 4, 224, 90, 80, 161, 241, 8, 2, 26, 96, 91, 24, 12,
-        72, 0, 34, 25, 104, 90, 96, 2, 104, 138, 24, 2, 96, 9, 72, 1, 104, 8,
-        49, 1, 96, 137, 24, 8, 74, 16, 104, 129, 66, 136, 191, 17, 96, 3, 241,
-        8, 0, 189, 232, 254, 143, 44, 7, 0, 0, 40, 7, 0, 0, 76, 7, 0, 0, 120,
-        7, 0, 0, 28, 44, 4, 0, 56, 181, 25, 75, 80, 248, 8, 44, 25, 104, 5,
-        70, 138, 26, 26, 96, 22, 75, 160, 241, 8, 4, 26, 104, 8, 58, 26, 96,
-        255, 247, 80, 255, 2, 224, 163, 66, 3, 210, 24, 70, 67, 104, 0, 43,
-        249, 209, 85, 248, 8, 44, 169, 24, 139, 66, 5, 209, 25, 104, 91, 104,
-        82, 24, 8, 50, 69, 248, 8, 44, 99, 96, 3, 104, 3, 241, 8, 2, 130, 24,
-        162, 66, 7, 209, 85, 248, 8, 44, 155, 24, 8, 51, 3, 96, 99, 104, 67,
-        96, 0, 224, 68, 96, 0, 32, 56, 189, 76, 7, 0, 0, 120, 7, 0, 0, 16, 181,
-        0, 33, 64, 34, 4, 70, 1, 240, 22, 219, 16, 75, 35, 96, 16, 75, 99, 96,
-        16, 75, 163, 96, 16, 75, 227, 96, 16, 75, 35, 97, 16, 75, 99, 97, 16,
-        75, 163, 97, 16, 75, 227, 97, 16, 75, 35, 98, 16, 75, 99, 98, 16, 75,
-        163, 98, 16, 75, 227, 98, 16, 75, 35, 99, 16, 75, 99, 99, 16, 75, 163,
-        99, 16, 75, 227, 99, 16, 189, 0, 191, 0, 0, 0, 0, 212, 178, 3, 0, 212,
-        178, 3, 0, 137, 16, 4, 0, 140, 16, 4, 0, 210, 27, 4, 0, 212, 27, 4,
-        0, 196, 50, 4, 0, 196, 50, 4, 0, 196, 75, 5, 0, 196, 75, 5, 0, 12, 249,
-        5, 0, 252, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 181, 45,
-        77, 145, 176, 104, 70, 255, 247, 178, 255, 41, 120, 0, 41, 55, 209,
-        8, 152, 9, 156, 36, 26, 6, 208, 34, 70, 1, 240, 196, 218, 8, 152, 33,
-        70, 5, 240, 218, 218, 34, 70, 36, 73, 36, 72, 1, 240, 225, 218, 36,
-        75, 0, 36, 28, 112, 1, 35, 43, 112, 34, 77, 5, 240, 7, 218, 43, 104,
-        0, 43, 51, 208, 26, 120, 0, 42, 48, 208, 159, 137, 94, 137, 12, 224,
-        43, 104, 29, 74, 217, 137, 16, 104, 6, 240, 154, 249, 1, 52, 1, 70,
-        48, 177, 24, 75, 24, 104, 2, 240, 245, 217, 163, 25, 187, 66, 239, 219,
-        22, 75, 41, 104, 24, 104, 1, 34, 3, 240, 144, 255, 22, 224, 20, 78,
-        49, 120, 153, 185, 10, 152, 11, 156, 36, 26, 6, 208, 34, 70, 1, 240,
-        137, 218, 10, 152, 33, 70, 5, 240, 159, 218, 8, 72, 13, 73, 34, 70,
-        1, 240, 166, 218, 0, 35, 43, 112, 1, 35, 51, 112, 5, 240, 206, 217,
-        17, 176, 240, 189, 52, 7, 0, 0, 226, 216, 135, 0, 62, 181, 3, 0, 44,
-        44, 4, 0, 116, 7, 0, 0, 192, 45, 4, 0, 172, 44, 4, 0, 136, 44, 4, 0,
-        144, 204, 135, 0, 1, 75, 24, 104, 112, 71, 0, 191, 140, 16, 4, 0, 0,
-        32, 112, 71, 127, 181, 13, 74, 13, 75, 21, 104, 13, 74, 27, 104, 20,
-        104, 13, 74, 18, 104, 122, 177, 22, 120, 110, 177, 235, 24, 227, 26,
-        3, 245, 126, 116, 7, 52, 164, 10, 0, 148, 20, 137, 1, 148, 82, 137,
-        2, 146, 6, 74, 1, 240, 170, 218, 127, 189, 0, 191, 120, 7, 0, 0, 76,
-        7, 0, 0, 44, 7, 0, 0, 116, 7, 0, 0, 22, 22, 136, 0, 8, 181, 131, 106,
-        51, 177, 0, 35, 131, 98, 128, 248, 32, 48, 16, 48, 5, 240, 116, 218,
-        1, 32, 8, 189, 112, 181, 35, 78, 48, 104, 0, 40, 64, 208, 11, 240, 91,
-        223, 1, 32, 5, 240, 118, 220, 1, 32, 255, 247, 51, 254, 1, 36, 22, 224,
-        29, 75, 28, 104, 9, 224, 227, 104, 29, 66, 5, 208, 37, 234, 3, 5, 99,
-        104, 11, 177, 160, 104, 152, 71, 36, 104, 13, 177, 0, 44, 242, 209,
-        5, 240, 203, 217, 21, 75, 4, 70, 24, 104, 5, 240, 66, 220, 48, 104,
-        12, 240, 167, 217, 18, 75, 29, 104, 5, 64, 225, 209, 0, 44, 223, 209,
-        16, 77, 43, 104, 35, 177, 27, 104, 19, 177, 88, 104, 5, 240, 139, 221,
-        43, 104, 35, 177, 27, 104, 19, 177, 91, 104, 0, 43, 231, 208, 0, 32,
-        255, 247, 255, 253, 0, 32, 189, 232, 112, 64, 5, 240, 58, 156, 112,
-        189, 0, 191, 56, 7, 0, 0, 112, 7, 0, 0, 64, 7, 0, 0, 72, 7, 0, 0, 100,
-        7, 0, 0, 2, 75, 26, 104, 1, 50, 26, 96, 112, 71, 0, 191, 132, 44, 4,
-        0, 1, 75, 24, 104, 112, 71, 0, 191, 132, 44, 4, 0, 45, 233, 240, 79,
-        157, 176, 10, 168, 255, 247, 170, 254, 255, 247, 94, 255, 4, 70, 255,
-        247, 97, 255, 10, 155, 11, 154, 15, 153, 210, 26, 14, 155, 13, 157,
-        195, 235, 1, 9, 17, 153, 16, 155, 110, 78, 203, 26, 12, 153, 223, 248,
-        0, 130, 193, 235, 5, 11, 147, 68, 50, 104, 216, 248, 0, 16, 2, 245,
-        0, 82, 82, 26, 74, 68, 210, 24, 90, 68, 20, 25, 36, 24, 9, 148, 223,
-        248, 228, 161, 100, 76, 100, 79, 34, 104, 218, 248, 0, 80, 99, 72, 173,
-        24, 58, 104, 8, 147, 197, 235, 2, 12, 205, 248, 28, 192, 1, 240, 184,
-        217, 8, 155, 9, 245, 126, 113, 1, 147, 3, 245, 126, 115, 7, 51, 155,
-        10, 7, 49, 11, 245, 126, 114, 137, 10, 7, 50, 2, 147, 8, 35, 146, 10,
-        0, 145, 3, 147, 89, 70, 75, 70, 85, 72, 1, 240, 161, 217, 51, 104, 32,
-        104, 57, 104, 221, 248, 28, 192, 1, 144, 3, 147, 0, 245, 126, 112, 3,
-        245, 126, 115, 12, 245, 126, 118, 1, 245, 126, 114, 7, 48, 7, 51, 128,
-        10, 155, 10, 7, 50, 7, 54, 182, 10, 146, 10, 2, 144, 4, 147, 72, 72,
-        99, 70, 0, 150, 1, 240, 131, 217, 9, 153, 5, 245, 126, 114, 1, 245,
-        126, 115, 7, 51, 155, 10, 7, 50, 146, 10, 0, 147, 41, 70, 9, 155, 65,
-        72, 1, 240, 116, 217, 64, 75, 65, 79, 25, 104, 65, 72, 1, 240, 110,
-        217, 57, 104, 64, 75, 10, 104, 70, 70, 154, 66, 3, 208, 62, 72, 1, 240,
-        101, 217, 37, 224, 26, 145, 11, 70, 4, 224, 21, 104, 57, 72, 19, 29,
-        133, 66, 3, 209, 26, 70, 27, 171, 154, 66, 246, 211, 51, 104, 26, 173,
-        0, 147, 54, 72, 43, 70, 26, 146, 1, 240, 80, 217, 59, 104, 26, 154,
-        233, 26, 51, 72, 211, 26, 10, 70, 0, 147, 1, 240, 71, 217, 51, 104,
-        26, 154, 89, 27, 47, 72, 155, 26, 10, 70, 0, 147, 1, 240, 62, 217, 45,
-        75, 27, 104, 75, 179, 26, 120, 58, 179, 89, 137, 221, 137, 26, 137,
-        1, 251, 5, 246, 56, 53, 77, 67, 6, 245, 126, 115, 7, 51, 155, 18, 141,
-        232, 40, 0, 5, 245, 126, 115, 7, 51, 155, 18, 2, 147, 35, 72, 51, 70,
-        1, 240, 35, 217, 35, 104, 218, 248, 0, 32, 153, 27, 155, 24, 91, 27,
-        3, 245, 126, 112, 1, 245, 126, 114, 7, 48, 128, 10, 7, 50, 0, 144, 146,
-        10, 26, 72, 1, 240, 17, 217, 26, 75, 29, 104, 5, 240, 59, 218, 4, 70,
-        255, 247, 18, 255, 41, 70, 3, 70, 34, 70, 22, 72, 1, 240, 4, 217, 29,
-        176, 189, 232, 240, 143, 0, 191, 28, 44, 4, 0, 76, 7, 0, 0, 44, 7, 0,
-        0, 113, 181, 3, 0, 128, 181, 3, 0, 191, 181, 3, 0, 4, 182, 3, 0, 40,
-        7, 0, 0, 128, 44, 4, 0, 63, 182, 3, 0, 75, 65, 84, 83, 90, 182, 3, 0,
-        126, 182, 3, 0, 181, 182, 3, 0, 218, 182, 3, 0, 116, 7, 0, 0, 0, 183,
-        3, 0, 45, 183, 3, 0, 60, 7, 0, 0, 85, 183, 3, 0, 40, 44, 4, 0, 120,
-        7, 0, 0, 16, 181, 4, 70, 6, 240, 94, 249, 0, 32, 5, 240, 61, 220, 5,
-        240, 49, 220, 32, 70, 5, 240, 48, 220, 32, 70, 5, 240, 7, 218, 251,
-        231, 8, 181, 113, 70, 3, 72, 1, 240, 191, 216, 1, 32, 189, 232, 8, 64,
-        0, 240, 148, 186, 131, 183, 3, 0, 247, 181, 7, 70, 14, 70, 20, 70, 5,
-        240, 224, 217, 88, 179, 0, 37, 32, 70, 13, 241, 6, 1, 106, 70, 173,
-        248, 6, 80, 0, 149, 5, 240, 25, 222, 0, 152, 41, 70, 255, 247, 161,
-        252, 4, 70, 216, 177, 41, 70, 0, 154, 1, 240, 119, 216, 99, 104, 242,
-        28, 103, 243, 20, 3, 34, 240, 3, 2, 99, 96, 1, 58, 27, 12, 98, 243,
-        79, 19, 227, 128, 167, 96, 166, 129, 32, 70, 5, 240, 164, 217, 1, 35,
-        32, 128, 163, 112, 189, 248, 6, 48, 227, 129, 4, 224, 3, 75, 0, 36,
-        26, 104, 1, 50, 26, 96, 32, 70, 254, 189, 184, 44, 4, 0, 45, 233, 243,
-        65, 7, 70, 12, 70, 5, 240, 164, 217, 16, 185, 255, 247, 115, 254, 58,
-        224, 0, 38, 32, 70, 13, 241, 6, 1, 106, 70, 173, 248, 6, 96, 0, 150,
-        7, 241, 3, 8, 5, 240, 216, 221, 0, 157, 40, 240, 3, 8, 69, 68, 64, 246,
-        56, 3, 157, 66, 38, 216, 45, 179, 40, 70, 49, 70, 255, 247, 87, 252,
-        4, 70, 248, 177, 49, 70, 0, 154, 1, 240, 45, 216, 0, 155, 167, 129,
-        237, 26, 226, 24, 200, 235, 5, 8, 2, 235, 8, 3, 163, 96, 99, 104, 1,
-        61, 98, 243, 20, 3, 99, 96, 27, 12, 101, 243, 79, 19, 227, 128, 32,
-        70, 5, 240, 86, 217, 1, 35, 32, 128, 163, 112, 189, 248, 6, 48, 227,
-        129, 4, 224, 4, 75, 0, 36, 26, 104, 1, 50, 26, 96, 32, 70, 189, 232,
-        252, 129, 0, 191, 184, 44, 4, 0, 56, 181, 0, 33, 5, 70, 128, 137, 255,
-        247, 170, 255, 4, 70, 32, 177, 128, 104, 169, 104, 170, 137, 255, 247,
-        161, 251, 32, 70, 56, 189, 45, 233, 240, 65, 6, 70, 136, 70, 23, 70,
-        5, 240, 68, 217, 4, 70, 16, 185, 255, 247, 18, 254, 46, 224, 184, 241,
-        0, 15, 42, 219, 0, 47, 40, 219, 60, 32, 0, 33, 255, 247, 6, 252, 4,
-        70, 24, 179, 243, 137, 191, 178, 91, 6, 76, 191, 181, 107, 53, 70, 171,
-        120, 0, 33, 1, 51, 171, 112, 60, 34, 0, 240, 211, 223, 178, 104, 99,
-        104, 66, 68, 98, 243, 20, 3, 99, 96, 27, 12, 103, 243, 79, 19, 227,
-        128, 227, 137, 162, 96, 67, 240, 64, 3, 167, 129, 227, 129, 32, 70,
-        5, 240, 254, 216, 165, 99, 32, 128, 0, 224, 0, 36, 32, 70, 189, 232,
-        240, 129, 0, 0, 16, 181, 1, 35, 66, 104, 131, 112, 195, 136, 194, 243,
-        20, 2, 2, 235, 83, 18, 131, 104, 1, 50, 91, 13, 91, 5, 210, 24, 8, 75,
-        204, 28, 35, 64, 211, 26, 131, 96, 195, 137, 129, 129, 3, 244, 12, 83,
-        195, 129, 0, 33, 16, 48, 40, 34, 189, 232, 16, 64, 0, 240, 153, 159,
-        0, 191, 252, 255, 1, 0, 56, 181, 4, 70, 227, 137, 89, 6, 33, 212, 162,
-        120, 1, 58, 210, 178, 162, 112, 0, 42, 39, 209, 226, 120, 98, 177, 19,
-        75, 32, 70, 83, 248, 34, 80, 233, 137, 255, 247, 202, 255, 40, 70, 33,
-        70, 189, 232, 56, 64, 3, 240, 104, 188, 218, 5, 22, 212, 12, 75, 32,
-        70, 163, 96, 33, 136, 5, 240, 206, 216, 32, 70, 189, 232, 56, 64, 255,
-        247, 27, 188, 7, 75, 32, 70, 163, 96, 33, 136, 165, 107, 5, 240, 194,
-        216, 32, 70, 255, 247, 17, 252, 44, 70, 206, 231, 56, 189, 112, 45,
-        4, 0, 239, 190, 173, 222, 16, 181, 7, 224, 5, 75, 130, 138, 27, 104,
-        83, 248, 34, 64, 255, 247, 191, 255, 32, 70, 0, 40, 245, 209, 16, 189,
-        0, 191, 32, 7, 0, 0, 248, 181, 31, 78, 1, 34, 13, 70, 48, 104, 0, 33,
-        6, 240, 130, 251, 0, 33, 8, 34, 7, 70, 48, 104, 6, 240, 124, 251, 2,
-        45, 1, 70, 16, 209, 7, 234, 0, 4, 20, 244, 128, 100, 6, 208, 48, 104,
-        33, 244, 128, 97, 0, 34, 6, 240, 110, 251, 44, 70, 250, 4, 30, 213,
-        68, 240, 4, 4, 27, 224, 5, 45, 16, 209, 7, 244, 0, 100, 212, 241, 1,
-        4, 56, 191, 0, 36, 187, 5, 17, 213, 48, 104, 65, 244, 128, 97, 0, 34,
-        6, 240, 88, 251, 68, 240, 32, 4, 8, 224, 53, 185, 48, 104, 41, 70, 5,
-        34, 189, 232, 248, 64, 6, 240, 77, 187, 0, 36, 32, 70, 248, 189, 56,
-        7, 0, 0, 41, 185, 3, 75, 17, 70, 24, 104, 7, 34, 6, 240, 65, 187, 112,
-        71, 56, 7, 0, 0, 248, 181, 6, 70, 0, 32, 13, 70, 4, 70, 0, 33, 41, 96,
-        51, 70, 0, 224, 1, 51, 26, 120, 32, 42, 251, 208, 10, 179, 42, 104,
-        12, 177, 64, 248, 34, 48, 1, 50, 42, 96, 12, 224, 34, 42, 9, 209, 129,
-        240, 1, 1, 52, 177, 95, 30, 90, 120, 3, 248, 1, 43, 0, 42, 250, 209,
-        59, 70, 1, 51, 26, 120, 26, 177, 0, 41, 238, 209, 32, 42, 236, 209,
-        0, 44, 223, 208, 0, 42, 221, 208, 0, 34, 3, 248, 1, 43, 217, 231, 68,
-        185, 40, 104, 33, 70, 1, 48, 128, 0, 255, 247, 239, 250, 8, 185, 40,
-        96, 248, 189, 1, 52, 2, 44, 199, 209, 43, 104, 0, 34, 64, 248, 35, 32,
-        248, 189, 55, 181, 19, 75, 27, 104, 211, 248, 160, 80, 3, 120, 251,
-        177, 1, 169, 255, 247, 180, 255, 1, 155, 4, 70, 59, 185, 136, 185, 23,
-        224, 40, 104, 33, 104, 0, 240, 57, 223, 24, 177, 237, 104, 0, 45, 247,
-        209, 10, 224, 107, 104, 168, 104, 1, 153, 34, 70, 152, 71, 5, 240, 105,
-        219, 32, 70, 255, 247, 74, 251, 3, 224, 3, 72, 0, 240, 192, 222, 245,
-        231, 62, 189, 124, 7, 0, 0, 101, 208, 136, 0, 71, 75, 112, 181, 28,
-        104, 37, 104, 117, 177, 99, 25, 0, 38, 30, 119, 165, 97, 163, 25, 24,
-        127, 1, 54, 5, 240, 242, 219, 174, 66, 248, 209, 10, 32, 5, 240, 237,
-        219, 97, 224, 212, 248, 156, 0, 0, 40, 117, 208, 2, 33, 255, 247, 43,
-        255, 0, 240, 15, 0, 1, 40, 110, 208, 2, 40, 2, 209, 32, 70, 5, 240,
-        70, 219, 5, 33, 212, 248, 156, 0, 255, 247, 29, 255, 192, 7, 98, 213,
-        212, 248, 156, 0, 0, 33, 255, 247, 22, 255, 212, 248, 172, 48, 6, 70,
-        27, 177, 212, 248, 168, 0, 241, 178, 152, 71, 13, 46, 16, 208, 8, 46,
-        1, 208, 127, 46, 13, 209, 163, 105, 0, 43, 76, 208, 1, 59, 163, 97,
-        8, 32, 5, 240, 186, 219, 32, 32, 5, 240, 183, 219, 8, 32, 62, 224, 10,
-        38, 48, 70, 5, 240, 177, 219, 148, 248, 165, 48, 11, 177, 10, 46, 57,
-        209, 165, 105, 10, 46, 4, 235, 5, 3, 26, 208, 30, 119, 27, 72, 0, 240,
-        235, 222, 1, 53, 133, 66, 15, 209, 148, 248, 165, 48, 99, 185, 23, 72,
-        0, 240, 226, 222, 21, 73, 2, 70, 4, 241, 28, 0, 0, 240, 228, 222, 16,
-        185, 1, 35, 132, 248, 165, 48, 127, 45, 165, 97, 2, 216, 112, 189, 0,
-        34, 26, 119, 148, 248, 165, 48, 59, 185, 127, 45, 165, 97, 4, 216, 4,
-        241, 28, 0, 41, 70, 255, 247, 83, 255, 0, 35, 62, 32, 163, 97, 35, 96,
-        132, 248, 165, 48, 5, 240, 119, 219, 32, 32, 189, 232, 112, 64, 5, 240,
-        114, 155, 112, 189, 0, 191, 124, 7, 0, 0, 146, 183, 3, 0, 16, 181, 4,
-        70, 5, 240, 14, 219, 12, 177, 0, 35, 27, 96, 6, 75, 0, 33, 24, 104,
-        4, 240, 86, 216, 4, 75, 27, 104, 3, 177, 152, 71, 5, 240, 0, 219, 254,
-        231, 0, 191, 56, 7, 0, 0, 128, 7, 0, 0, 45, 233, 255, 71, 73, 75, 4,
-        70, 216, 98, 3, 104, 3, 43, 3, 209, 71, 75, 24, 104, 11, 240, 18, 219,
-        35, 104, 163, 241, 16, 2, 15, 42, 4, 216, 4, 176, 189, 232, 240, 71,
-        255, 247, 166, 187, 3, 43, 15, 209, 64, 74, 227, 108, 34, 240, 1, 2,
-        147, 66, 9, 209, 98, 108, 6, 51, 147, 97, 99, 108, 79, 240, 255, 50,
-        26, 96, 4, 176, 189, 232, 240, 135, 57, 75, 58, 78, 101, 108, 27, 104,
-        241, 105, 50, 104, 56, 72, 197, 235, 3, 10, 0, 240, 219, 221, 163, 108,
-        33, 104, 0, 147, 99, 108, 34, 70, 1, 147, 163, 104, 51, 72, 2, 147,
-        227, 104, 0, 39, 3, 147, 227, 108, 0, 240, 204, 221, 227, 105, 4, 241,
-        16, 1, 0, 147, 35, 106, 46, 72, 1, 147, 99, 106, 79, 234, 154, 10, 2,
-        147, 163, 106, 185, 70, 3, 147, 14, 201, 0, 240, 187, 221, 163, 107,
-        4, 241, 44, 1, 0, 147, 227, 107, 38, 72, 1, 147, 35, 108, 184, 70, 2,
-        147, 14, 201, 0, 240, 174, 221, 235, 104, 35, 72, 0, 147, 149, 232,
-        14, 0, 0, 240, 167, 221, 235, 105, 5, 241, 16, 1, 0, 147, 31, 72, 14,
-        201, 0, 240, 159, 221, 24, 224, 122, 89, 211, 7, 15, 213, 255, 42, 13,
-        217, 27, 75, 154, 66, 4, 217, 2, 241, 98, 67, 179, 245, 128, 31, 5,
-        216, 24, 72, 57, 70, 0, 240, 141, 221, 9, 241, 1, 9, 4, 55, 185, 241,
-        15, 15, 8, 241, 1, 8, 1, 216, 208, 69, 228, 209, 51, 104, 0, 32, 67,
-        244, 128, 99, 134, 232, 24, 0, 4, 176, 189, 232, 240, 71, 255, 247,
-        82, 191, 48, 44, 4, 0, 56, 7, 0, 0, 37, 135, 128, 0, 140, 16, 4, 0,
-        140, 44, 4, 0, 180, 183, 3, 0, 202, 183, 3, 0, 255, 183, 3, 0, 50, 184,
-        3, 0, 97, 184, 3, 0, 127, 184, 3, 0, 212, 178, 3, 0, 157, 184, 3, 0,
-        3, 104, 16, 181, 2, 43, 4, 70, 3, 208, 8, 75, 24, 104, 5, 240, 39, 254,
-        32, 70, 255, 247, 68, 255, 35, 104, 2, 43, 5, 208, 3, 75, 24, 104, 189,
-        232, 16, 64, 5, 240, 215, 189, 16, 189, 56, 7, 0, 0, 1, 75, 24, 104,
-        112, 71, 0, 191, 216, 44, 4, 0, 195, 104, 152, 108, 192, 243, 64, 0,
-        112, 71, 0, 0, 112, 181, 144, 248, 124, 49, 4, 70, 255, 43, 19, 77,
-        4, 209, 213, 248, 164, 48, 64, 106, 152, 71, 232, 185, 107, 111, 96,
-        106, 152, 71, 213, 248, 164, 80, 96, 106, 168, 71, 212, 248, 0, 50,
-        152, 66, 11, 210, 148, 248, 32, 18, 65, 185, 11, 70, 32, 70, 8, 74,
-        4, 240, 155, 222, 1, 35, 132, 248, 32, 50, 112, 189, 96, 106, 148, 248,
-        9, 97, 168, 71, 48, 24, 132, 248, 10, 1, 112, 189, 0, 191, 208, 134,
-        135, 0, 41, 57, 0, 0, 137, 177, 145, 248, 20, 50, 1, 43, 13, 208, 145,
-        248, 121, 49, 83, 177, 74, 105, 5, 75, 16, 106, 3, 64, 43, 177, 79,
-        240, 128, 115, 8, 70, 19, 98, 9, 240, 171, 154, 112, 71, 0, 252, 1,
-        1, 45, 233, 240, 79, 0, 241, 40, 7, 1, 33, 187, 176, 4, 70, 56, 70,
-        1, 240, 50, 221, 1, 40, 64, 243, 66, 129, 212, 248, 152, 49, 152, 66,
-        0, 242, 61, 129, 32, 70, 9, 240, 147, 218, 1, 33, 56, 70, 1, 240, 35,
-        221, 1, 40, 129, 70, 64, 243, 50, 129, 212, 248, 168, 33, 1, 33, 0,
-        38, 4, 168, 82, 24, 55, 150, 79, 240, 1, 8, 1, 240, 186, 220, 40, 224,
-        0, 33, 4, 168, 42, 70, 1, 240, 116, 221, 184, 241, 1, 15, 10, 209, 171,
-        104, 106, 104, 35, 240, 127, 67, 194, 243, 20, 2, 35, 244, 96, 3, 155,
-        26, 11, 43, 18, 221, 171, 104, 91, 121, 25, 6, 16, 212, 26, 7, 14, 208,
-        135, 75, 8, 241, 1, 8, 27, 104, 1, 224, 8, 241, 1, 8, 170, 138, 83,
-        248, 34, 80, 0, 45, 248, 209, 2, 224, 70, 70, 0, 224, 1, 38, 56, 70,
-        0, 33, 1, 240, 246, 220, 5, 70, 0, 40, 207, 209, 3, 224, 56, 70, 0,
-        33, 1, 240, 68, 221, 4, 168, 0, 33, 1, 240, 234, 220, 2, 70, 0, 40,
-        244, 209, 0, 46, 64, 240, 231, 128, 212, 248, 240, 48, 27, 104, 152,
-        69, 0, 242, 225, 128, 212, 248, 228, 49, 212, 248, 232, 17, 3, 235,
-        73, 9, 31, 250, 137, 249, 160, 104, 73, 68, 173, 248, 226, 144, 5, 240,
-        204, 250, 130, 70, 0, 40, 0, 240, 207, 128, 58, 173, 53, 248, 6, 45,
-        208, 248, 8, 128, 130, 129, 49, 70, 64, 70, 0, 240, 68, 220, 41, 70,
-        2, 34, 64, 70, 254, 247, 231, 255, 189, 248, 226, 48, 8, 241, 2, 0,
-        219, 67, 41, 70, 2, 34, 173, 248, 226, 48, 254, 247, 220, 255, 8, 241,
-        12, 3, 1, 147, 173, 248, 230, 96, 179, 70, 106, 224, 88, 74, 171, 137,
-        17, 104, 169, 70, 2, 224, 144, 137, 145, 70, 27, 24, 185, 248, 20, 32,
-        81, 248, 34, 32, 0, 42, 246, 209, 173, 248, 226, 48, 171, 104, 26, 121,
-        25, 29, 2, 145, 3, 146, 187, 241, 0, 15, 3, 208, 45, 136, 171, 248,
-        20, 80, 24, 224, 3, 153, 74, 74, 8, 241, 4, 0, 10, 67, 58, 169, 65,
-        248, 16, 45, 8, 34, 0, 147, 254, 247, 173, 255, 148, 248, 10, 33, 46,
-        70, 132, 248, 11, 33, 136, 248, 9, 32, 189, 248, 226, 32, 0, 155, 12,
-        50, 173, 248, 226, 32, 2, 153, 8, 34, 54, 168, 0, 147, 254, 247, 154,
-        255, 3, 154, 2, 152, 81, 28, 54, 154, 201, 178, 34, 240, 255, 2, 10,
-        67, 54, 146, 54, 169, 8, 34, 254, 247, 141, 255, 148, 248, 10, 33, 0,
-        155, 132, 248, 11, 33, 90, 114, 212, 248, 160, 33, 189, 248, 226, 16,
-        83, 30, 91, 24, 179, 251, 242, 243, 83, 67, 189, 248, 230, 32, 155,
-        178, 89, 26, 173, 248, 228, 48, 155, 24, 173, 248, 230, 48, 1, 155,
-        169, 248, 16, 16, 157, 28, 24, 70, 57, 169, 2, 34, 254, 247, 108, 255,
-        203, 70, 1, 149, 56, 70, 0, 33, 1, 240, 60, 220, 5, 70, 0, 40, 141,
-        209, 41, 70, 82, 70, 56, 70, 1, 240, 138, 220, 214, 248, 8, 128, 179,
-        137, 168, 241, 12, 0, 12, 51, 152, 248, 4, 144, 13, 241, 230, 1, 179,
-        129, 2, 34, 176, 96, 254, 247, 79, 255, 189, 248, 230, 48, 13, 241,
-        230, 1, 219, 67, 2, 34, 168, 241, 10, 0, 173, 248, 230, 48, 254, 247,
-        67, 255, 73, 240, 64, 99, 67, 244, 64, 115, 58, 169, 65, 248, 16, 61,
-        8, 34, 168, 241, 8, 0, 254, 247, 55, 255, 148, 248, 10, 49, 56, 70,
-        132, 248, 11, 49, 41, 70, 8, 248, 3, 60, 50, 70, 1, 240, 88, 220, 148,
-        248, 8, 49, 1, 51, 132, 248, 8, 49, 59, 176, 189, 232, 240, 143, 32,
-        7, 0, 0, 0, 131, 0, 12, 208, 248, 132, 17, 16, 181, 4, 70, 129, 177,
-        212, 248, 136, 33, 2, 35, 192, 104, 11, 240, 211, 218, 212, 248, 132,
-        17, 212, 248, 136, 33, 224, 104, 74, 64, 2, 35, 189, 232, 16, 64, 11,
-        240, 200, 154, 16, 189, 0, 0, 45, 233, 248, 67, 0, 241, 40, 7, 2, 33,
-        4, 70, 56, 70, 1, 240, 197, 219, 0, 40, 32, 70, 212, 191, 79, 240, 0,
-        8, 79, 240, 1, 8, 79, 240, 0, 9, 255, 247, 56, 254, 64, 224, 160, 104,
-        41, 70, 3, 240, 145, 248, 212, 248, 240, 48, 27, 104, 152, 66, 5, 217,
-        56, 70, 65, 70, 42, 70, 1, 240, 47, 220, 61, 224, 174, 104, 0, 35, 179,
-        113, 148, 248, 124, 49, 41, 70, 51, 114, 148, 248, 10, 49, 132, 248,
-        11, 49, 115, 114, 212, 248, 8, 50, 96, 106, 1, 51, 196, 248, 8, 50,
-        114, 121, 42, 75, 130, 240, 128, 2, 210, 9, 155, 106, 152, 71, 184,
-        185, 212, 248, 248, 48, 131, 177, 184, 241, 0, 15, 8, 209, 50, 120,
-        112, 120, 66, 234, 0, 32, 15, 48, 0, 9, 2, 10, 24, 191, 0, 32, 155,
-        104, 152, 113, 148, 248, 124, 33, 26, 114, 196, 248, 248, 80, 79, 240,
-        1, 9, 212, 248, 240, 48, 27, 104, 1, 43, 6, 217, 56, 70, 65, 70, 1,
-        240, 127, 219, 5, 70, 0, 40, 178, 209, 0, 35, 132, 248, 252, 48, 196,
-        248, 248, 48, 185, 241, 0, 15, 5, 208, 99, 105, 4, 34, 90, 100, 32,
-        70, 9, 240, 180, 218, 1, 33, 56, 70, 1, 240, 90, 219, 212, 248, 204,
-        49, 152, 66, 4, 217, 32, 105, 189, 232, 248, 67, 3, 240, 151, 152, 1,
-        33, 56, 70, 1, 240, 77, 219, 212, 248, 208, 49, 152, 66, 4, 210, 32,
-        105, 189, 232, 248, 67, 3, 240, 128, 152, 189, 232, 248, 131, 208, 134,
-        135, 0, 248, 181, 4, 70, 212, 248, 168, 49, 192, 141, 14, 70, 152, 66,
-        12, 211, 2, 42, 10, 209, 160, 104, 1, 34, 5, 240, 96, 249, 212, 248,
-        172, 49, 0, 37, 1, 51, 196, 248, 172, 49, 184, 224, 4, 241, 40, 0, 10,
-        185, 1, 33, 0, 224, 0, 33, 50, 70, 4, 241, 40, 5, 1, 240, 134, 219,
-        2, 33, 40, 70, 1, 240, 28, 219, 0, 40, 2, 221, 32, 70, 255, 247, 73,
-        255, 40, 70, 1, 33, 1, 240, 19, 219, 7, 70, 0, 40, 0, 240, 156, 128,
-        212, 248, 164, 81, 7, 45, 30, 208, 8, 45, 50, 208, 1, 45, 3, 208, 32,
-        70, 255, 247, 54, 255, 143, 224, 212, 248, 152, 49, 152, 66, 6, 211,
-        32, 70, 255, 247, 192, 253, 32, 70, 255, 247, 43, 255, 133, 224, 148,
-        248, 126, 33, 0, 42, 64, 240, 129, 128, 212, 248, 148, 1, 212, 248,
-        156, 17, 4, 240, 135, 218, 117, 224, 148, 248, 126, 49, 35, 185, 60,
-        75, 96, 106, 27, 109, 152, 71, 224, 177, 212, 248, 152, 49, 159, 66,
-        24, 210, 212, 248, 176, 49, 0, 43, 91, 208, 178, 137, 212, 248, 180,
-        49, 154, 66, 86, 216, 14, 224, 148, 248, 126, 49, 35, 185, 49, 75, 96,
-        106, 27, 109, 152, 71, 48, 177, 212, 248, 152, 49, 159, 66, 2, 210,
-        179, 137, 64, 43, 16, 216, 32, 70, 255, 247, 136, 253, 32, 70, 255,
-        247, 243, 254, 148, 248, 126, 49, 27, 179, 212, 248, 148, 1, 255, 247,
-        20, 248, 0, 35, 132, 248, 126, 49, 27, 224, 212, 248, 176, 33, 146,
-        179, 212, 248, 180, 33, 147, 66, 46, 216, 31, 75, 96, 106, 27, 109,
-        152, 71, 5, 70, 144, 185, 32, 70, 255, 247, 106, 253, 32, 70, 255, 247,
-        213, 254, 148, 248, 126, 49, 43, 177, 212, 248, 148, 1, 254, 247, 246,
-        255, 132, 248, 126, 81, 0, 35, 132, 248, 40, 50, 34, 224, 148, 248,
-        40, 50, 251, 185, 148, 248, 126, 49, 27, 177, 212, 248, 148, 1, 254,
-        247, 230, 255, 0, 33, 1, 37, 212, 248, 148, 1, 10, 70, 4, 240, 31, 218,
-        132, 248, 126, 81, 132, 248, 40, 82, 13, 224, 148, 248, 126, 33, 74,
-        185, 212, 248, 148, 1, 212, 248, 156, 17, 4, 240, 17, 218, 1, 37, 132,
-        248, 126, 81, 0, 224, 1, 37, 40, 70, 248, 189, 208, 134, 135, 0, 45,
-        233, 240, 79, 144, 248, 120, 49, 133, 176, 0, 39, 5, 70, 12, 70, 146,
-        70, 208, 248, 8, 128, 2, 151, 1, 151, 11, 177, 64, 70, 42, 224, 139,
-        104, 208, 248, 216, 97, 144, 248, 42, 34, 30, 64, 82, 177, 66, 104,
-        17, 58, 5, 42, 6, 216, 138, 137, 243, 42, 3, 216, 244, 54, 34, 240,
-        3, 2, 182, 26, 98, 104, 35, 240, 127, 67, 194, 243, 20, 2, 35, 244,
-        96, 3, 6, 241, 12, 9, 155, 26, 75, 69, 43, 210, 180, 248, 12, 176, 213,
-        248, 228, 17, 64, 70, 89, 68, 137, 25, 5, 240, 67, 248, 7, 70, 40, 185,
-        64, 70, 33, 70, 1, 34, 5, 240, 94, 248, 97, 224, 213, 248, 228, 49,
-        128, 104, 186, 137, 243, 24, 192, 24, 184, 96, 211, 26, 187, 129, 90,
-        70, 161, 104, 254, 247, 92, 253, 44, 75, 162, 138, 27, 104, 83, 248,
-        34, 48, 3, 177, 27, 136, 33, 70, 187, 130, 64, 70, 0, 34, 5, 240, 67,
-        248, 60, 70, 78, 177, 160, 104, 163, 137, 128, 27, 243, 24, 160, 96,
-        163, 129, 0, 33, 50, 70, 0, 240, 155, 217, 213, 248, 228, 49, 162, 137,
-        166, 104, 33, 70, 246, 26, 155, 24, 163, 129, 166, 96, 64, 70, 2, 240,
-        203, 254, 4, 175, 39, 248, 2, 13, 57, 70, 2, 34, 48, 70, 254, 247, 47,
-        253, 189, 248, 14, 48, 57, 70, 219, 67, 2, 34, 176, 28, 173, 248, 14,
-        48, 254, 247, 37, 253, 149, 248, 8, 33, 79, 234, 10, 35, 3, 244, 112,
-        99, 19, 67, 4, 169, 67, 234, 9, 99, 65, 248, 12, 61, 8, 34, 48, 29,
-        254, 247, 21, 253, 40, 70, 33, 70, 82, 70, 255, 247, 150, 254, 48, 177,
-        149, 248, 8, 49, 1, 39, 1, 51, 133, 248, 8, 49, 0, 224, 7, 70, 56, 70,
-        5, 176, 189, 232, 240, 143, 0, 191, 32, 7, 0, 0, 56, 181, 144, 248,
-        126, 49, 4, 70, 75, 177, 208, 248, 148, 1, 254, 247, 23, 255, 0, 33,
-        212, 248, 148, 1, 10, 70, 4, 240, 81, 217, 227, 141, 0, 43, 78, 209,
-        148, 248, 42, 50, 27, 177, 99, 104, 17, 59, 5, 43, 8, 217, 212, 248,
-        28, 2, 40, 177, 3, 120, 27, 177, 2, 240, 2, 254, 5, 70, 144, 185, 148,
-        248, 42, 50, 160, 104, 212, 248, 228, 17, 43, 177, 99, 104, 17, 59,
-        5, 43, 1, 216, 244, 49, 2, 224, 212, 248, 232, 49, 89, 24, 4, 240, 159,
-        255, 5, 70, 0, 179, 148, 248, 42, 34, 212, 248, 228, 49, 34, 177, 98,
-        104, 17, 58, 5, 42, 152, 191, 244, 51, 171, 129, 32, 70, 255, 247, 1,
-        252, 212, 248, 228, 49, 170, 104, 32, 70, 210, 24, 170, 96, 170, 137,
-        41, 70, 211, 26, 171, 129, 1, 34, 255, 247, 8, 255, 80, 185, 212, 248,
-        16, 50, 1, 51, 196, 248, 16, 50, 212, 248, 248, 49, 1, 51, 196, 248,
-        248, 49, 56, 189, 212, 248, 12, 50, 1, 51, 196, 248, 12, 50, 56, 189,
-        16, 181, 4, 104, 0, 35, 132, 248, 32, 50, 32, 70, 255, 247, 218, 251,
-        212, 248, 244, 49, 107, 185, 148, 248, 11, 49, 148, 248, 10, 33, 154,
-        66, 12, 208, 148, 248, 9, 33, 155, 26, 212, 248, 0, 34, 219, 178, 147,
-        66, 4, 216, 32, 70, 189, 232, 16, 64, 255, 247, 128, 191, 16, 189, 0,
-        0, 112, 181, 12, 70, 0, 41, 53, 208, 72, 106, 0, 40, 50, 208, 145, 248,
-        121, 49, 0, 43, 46, 208, 145, 248, 20, 50, 1, 43, 42, 208, 209, 248,
-        252, 49, 0, 43, 38, 208, 20, 78, 214, 248, 164, 80, 168, 71, 212, 248,
-        240, 49, 152, 66, 30, 210, 115, 111, 96, 106, 152, 71, 96, 106, 148,
-        248, 9, 97, 168, 71, 212, 248, 244, 49, 54, 24, 246, 178, 132, 248,
-        10, 97, 91, 185, 148, 248, 11, 49, 158, 66, 12, 208, 148, 248, 9, 33,
-        155, 26, 212, 248, 0, 34, 219, 178, 147, 66, 4, 216, 32, 70, 189, 232,
-        112, 64, 255, 247, 68, 191, 112, 189, 0, 191, 208, 134, 135, 0, 16,
-        181, 4, 104, 0, 35, 32, 70, 132, 248, 126, 49, 255, 247, 194, 251, 32,
-        70, 189, 232, 16, 64, 255, 247, 43, 189, 208, 248, 0, 49, 144, 248,
-        123, 33, 11, 67, 192, 248, 0, 49, 234, 177, 90, 7, 5, 213, 144, 248,
-        124, 33, 67, 234, 2, 99, 192, 248, 0, 49, 208, 248, 0, 49, 19, 240,
-        10, 15, 28, 191, 67, 244, 128, 35, 192, 248, 0, 49, 208, 248, 0, 33,
-        67, 105, 218, 100, 0, 34, 192, 248, 0, 33, 128, 248, 123, 33, 8, 34,
-        90, 100, 9, 240, 41, 152, 112, 71, 115, 181, 142, 104, 13, 70, 170,
-        137, 115, 136, 8, 58, 155, 178, 6, 241, 8, 1, 146, 178, 19, 240, 15,
-        15, 4, 70, 169, 96, 170, 129, 29, 208, 217, 7, 4, 213, 208, 248, 88,
-        33, 1, 50, 192, 248, 88, 33, 154, 7, 4, 213, 212, 248, 92, 33, 1, 50,
-        196, 248, 92, 33, 88, 7, 4, 213, 212, 248, 96, 33, 1, 50, 196, 248,
-        96, 33, 25, 7, 64, 241, 135, 128, 212, 248, 100, 49, 1, 51, 196, 248,
-        100, 49, 128, 224, 3, 42, 7, 216, 208, 248, 72, 49, 1, 51, 192, 248,
-        72, 49, 208, 248, 24, 2, 120, 224, 2, 34, 1, 168, 254, 247, 208, 251,
-        169, 104, 13, 241, 6, 0, 2, 49, 2, 34, 254, 247, 201, 251, 32, 70, 255,
-        247, 4, 251, 200, 177, 148, 248, 5, 50, 170, 104, 75, 177, 189, 248,
-        6, 16, 68, 75, 201, 67, 137, 178, 3, 49, 11, 64, 219, 67, 173, 248,
-        6, 48, 189, 248, 6, 48, 189, 248, 4, 0, 219, 67, 153, 178, 136, 66,
-        3, 209, 19, 128, 51, 128, 173, 248, 4, 48, 50, 136, 189, 248, 4, 48,
-        146, 178, 154, 66, 2, 208, 212, 248, 36, 34, 42, 177, 218, 67, 189,
-        248, 6, 16, 146, 178, 145, 66, 20, 208, 50, 136, 146, 178, 154, 66,
-        4, 208, 212, 248, 76, 33, 1, 50, 196, 248, 76, 33, 219, 67, 189, 248,
-        6, 32, 155, 178, 154, 66, 47, 208, 212, 248, 80, 49, 1, 51, 196, 248,
-        80, 49, 41, 224, 170, 104, 212, 248, 36, 98, 19, 29, 171, 96, 171, 137,
-        25, 31, 137, 178, 169, 129, 94, 177, 7, 41, 5, 216, 212, 248, 72, 49,
-        1, 51, 196, 248, 72, 49, 23, 224, 12, 50, 12, 59, 170, 96, 171, 129,
-        169, 137, 7, 41, 16, 217, 171, 104, 8, 57, 26, 120, 216, 120, 137, 178,
-        8, 51, 171, 96, 169, 129, 22, 185, 160, 241, 12, 3, 1, 224, 160, 241,
-        20, 3, 219, 178, 153, 66, 14, 210, 212, 248, 24, 2, 32, 177, 3, 120,
-        19, 177, 1, 33, 2, 240, 230, 252, 160, 104, 41, 70, 0, 34, 4, 240, 68,
-        254, 0, 32, 22, 224, 148, 248, 9, 49, 147, 66, 6, 208, 212, 248, 84,
-        49, 132, 248, 9, 33, 1, 51, 196, 248, 84, 49, 148, 248, 9, 49, 1, 32,
-        1, 51, 132, 248, 9, 49, 171, 104, 8, 59, 171, 96, 171, 137, 8, 51, 171,
-        129, 124, 189, 252, 255, 1, 0, 247, 181, 0, 37, 4, 70, 46, 70, 67, 224,
-        35, 75, 202, 138, 27, 104, 136, 104, 83, 248, 34, 112, 0, 35, 203, 130,
-        66, 120, 212, 248, 36, 194, 2, 240, 15, 2, 195, 120, 188, 241, 0, 15,
-        1, 209, 4, 59, 0, 224, 12, 59, 219, 178, 192, 24, 136, 96, 136, 137,
-        2, 42, 195, 235, 0, 3, 139, 129, 18, 209, 21, 177, 11, 136, 235, 130,
-        0, 224, 14, 70, 47, 177, 187, 104, 91, 120, 3, 240, 15, 3, 2, 43, 24,
-        208, 49, 70, 32, 105, 0, 38, 0, 240, 79, 253, 53, 70, 18, 224, 26, 185,
-        32, 105, 2, 240, 153, 220, 13, 224, 1, 42, 5, 209, 1, 145, 4, 240, 91,
-        220, 160, 104, 1, 153, 0, 224, 160, 104, 0, 34, 4, 240, 226, 253, 0,
-        224, 13, 70, 57, 70, 0, 41, 185, 209, 254, 189, 32, 7, 0, 0, 0, 105,
-        112, 71, 112, 181, 144, 248, 34, 98, 0, 35, 5, 106, 4, 70, 3, 98, 206,
-        185, 144, 248, 125, 49, 179, 177, 208, 248, 132, 17, 153, 177, 208,
-        248, 136, 33, 2, 35, 192, 104, 74, 64, 10, 240, 141, 222, 148, 248,
-        127, 49, 132, 248, 125, 97, 132, 248, 128, 97, 43, 177, 212, 248, 144,
-        1, 254, 247, 228, 252, 132, 248, 127, 97, 106, 0, 6, 213, 32, 70, 8,
-        240, 15, 220, 32, 70, 8, 240, 58, 218, 33, 225, 0, 45, 47, 218, 99,
-        105, 94, 104, 22, 240, 4, 6, 24, 208, 148, 248, 120, 17, 41, 185, 32,
-        70, 8, 240, 10, 221, 32, 70, 8, 240, 57, 220, 0, 35, 132, 248, 120,
-        49, 32, 105, 2, 240, 85, 220, 99, 105, 32, 70, 26, 104, 2, 33, 66, 240,
-        4, 2, 26, 96, 255, 247, 103, 254, 17, 224, 1, 35, 132, 248, 120, 49,
-        32, 105, 2, 240, 147, 220, 32, 70, 49, 70, 8, 240, 237, 220, 32, 70,
-        8, 240, 28, 220, 99, 105, 26, 104, 34, 240, 4, 2, 26, 96, 148, 248,
-        120, 49, 0, 43, 64, 240, 235, 128, 235, 7, 7, 213, 32, 70, 1, 33, 8,
-        240, 218, 220, 32, 70, 1, 33, 255, 247, 69, 254, 46, 7, 8, 213, 148,
-        248, 9, 33, 148, 248, 11, 49, 154, 66, 2, 208, 32, 70, 255, 247, 109,
-        253, 168, 7, 9, 213, 1, 35, 132, 248, 123, 49, 212, 248, 0, 49, 27,
-        177, 32, 70, 0, 33, 255, 247, 46, 254, 233, 5, 4, 213, 212, 248, 104,
-        49, 1, 51, 196, 248, 104, 49, 170, 5, 18, 213, 212, 248, 108, 49, 212,
-        248, 244, 16, 1, 51, 196, 248, 108, 49, 49, 177, 160, 104, 1, 34, 4,
-        240, 64, 253, 0, 35, 196, 248, 244, 48, 32, 70, 0, 33, 8, 240, 163,
-        220, 171, 1, 4, 213, 212, 248, 112, 49, 1, 51, 196, 248, 112, 49, 110,
-        1, 4, 213, 212, 248, 116, 49, 1, 51, 196, 248, 116, 49, 148, 248, 40,
-        50, 171, 177, 212, 248, 164, 49, 8, 43, 17, 209, 32, 70, 255, 247, 183,
-        249, 32, 70, 255, 247, 34, 251, 148, 248, 126, 49, 0, 38, 132, 248,
-        40, 98, 43, 177, 212, 248, 148, 1, 254, 247, 64, 252, 132, 248, 126,
-        97, 68, 78, 46, 64, 38, 177, 32, 70, 41, 70, 8, 240, 17, 218, 6, 70,
-        104, 7, 34, 213, 212, 248, 132, 17, 249, 177, 1, 35, 132, 248, 125,
-        49, 99, 105, 29, 106, 91, 106, 29, 64, 21, 240, 240, 5, 3, 208, 32,
-        70, 8, 240, 32, 222, 17, 224, 212, 248, 136, 33, 2, 35, 224, 104, 74,
-        64, 10, 240, 186, 221, 148, 248, 127, 49, 132, 248, 128, 81, 43, 177,
-        212, 248, 144, 1, 254, 247, 19, 252, 132, 248, 127, 81, 4, 241, 40,
-        5, 2, 33, 40, 70, 0, 240, 177, 222, 0, 40, 2, 221, 32, 70, 255, 247,
-        222, 250, 40, 70, 1, 33, 0, 240, 168, 222, 0, 40, 73, 208, 212, 248,
-        164, 81, 7, 45, 16, 208, 8, 45, 32, 208, 1, 45, 60, 209, 148, 248, 126,
-        33, 0, 42, 61, 209, 212, 248, 148, 1, 212, 248, 156, 17, 3, 240, 46,
-        222, 132, 248, 126, 81, 52, 224, 148, 248, 126, 49, 83, 177, 212, 248,
-        152, 49, 152, 66, 6, 210, 35, 107, 155, 104, 91, 120, 3, 240, 15, 3,
-        3, 43, 38, 209, 0, 35, 132, 248, 40, 50, 26, 224, 148, 248, 126, 49,
-        107, 177, 148, 248, 40, 34, 82, 185, 212, 248, 152, 33, 144, 66, 6,
-        210, 34, 107, 146, 104, 82, 120, 2, 240, 15, 2, 3, 42, 17, 209, 0, 37,
-        132, 248, 40, 82, 43, 177, 212, 248, 148, 1, 254, 247, 192, 251, 132,
-        248, 126, 81, 32, 70, 255, 247, 37, 249, 32, 70, 255, 247, 144, 250,
-        0, 224, 0, 38, 48, 70, 112, 189, 0, 252, 1, 1, 203, 137, 16, 181, 27,
-        5, 14, 212, 139, 104, 208, 248, 236, 33, 220, 120, 2, 235, 132, 2, 155,
-        24, 154, 137, 70, 246, 136, 67, 154, 66, 20, 191, 2, 34, 1, 34, 0, 224,
-        1, 34, 189, 232, 16, 64, 255, 247, 210, 187, 83, 28, 10, 208, 2, 42,
-        79, 240, 1, 3, 0, 208, 10, 185, 130, 240, 2, 2, 19, 250, 2, 242, 210,
-        178, 0, 224, 255, 34, 144, 248, 124, 49, 1, 41, 12, 191, 26, 67, 35,
-        234, 2, 2, 128, 248, 124, 33, 255, 247, 97, 188, 131, 105, 152, 105,
-        0, 240, 115, 187, 137, 105, 3, 70, 136, 105, 25, 70, 0, 240, 119, 187,
-        0, 0, 45, 233, 240, 79, 133, 176, 3, 146, 15, 154, 2, 145, 16, 153,
-        23, 70, 4, 70, 221, 248, 56, 160, 1, 146, 155, 70, 0, 43, 24, 191, 0,
-        39, 161, 177, 141, 104, 74, 104, 37, 240, 127, 67, 194, 243, 20, 2,
-        35, 244, 96, 3, 155, 26, 66, 108, 20, 50, 147, 66, 1, 210, 128, 104,
-        62, 224, 139, 137, 16, 61, 16, 51, 141, 96, 139, 129, 80, 224, 3, 108,
-        66, 107, 3, 241, 16, 1, 120, 24, 144, 66, 38, 191, 162, 241, 16, 8,
-        195, 235, 8, 8, 184, 70, 160, 104, 65, 68, 4, 240, 242, 251, 6, 70,
-        0, 40, 81, 208, 99, 108, 133, 104, 237, 24, 8, 241, 16, 3, 133, 96,
-        131, 129, 186, 241, 0, 15, 11, 208, 184, 241, 0, 15, 8, 208, 81, 70,
-        5, 241, 16, 0, 66, 70, 254, 247, 10, 249, 194, 68, 200, 235, 7, 7, 0,
-        150, 169, 70, 176, 70, 28, 224, 102, 107, 160, 104, 183, 66, 56, 191,
-        62, 70, 49, 70, 4, 240, 205, 251, 5, 70, 56, 185, 160, 104, 65, 70,
-        1, 34, 5, 176, 189, 232, 240, 79, 4, 240, 229, 187, 81, 70, 50, 70,
-        128, 104, 254, 247, 236, 248, 0, 155, 42, 136, 178, 68, 191, 27, 154,
-        130, 0, 149, 186, 241, 0, 15, 1, 208, 0, 47, 221, 209, 77, 70, 65, 70,
-        1, 154, 2, 155, 106, 96, 3, 154, 43, 96, 19, 12, 27, 4, 187, 241, 0,
-        15, 1, 208, 67, 240, 1, 3, 171, 96, 4, 75, 197, 248, 12, 176, 27, 104,
-        96, 104, 27, 105, 152, 71, 5, 176, 189, 232, 240, 143, 188, 7, 0, 0,
-        45, 233, 240, 65, 4, 70, 76, 32, 14, 70, 21, 70, 152, 70, 4, 240, 123,
-        251, 7, 70, 160, 177, 0, 33, 76, 34, 255, 243, 15, 245, 79, 244, 240,
-        99, 123, 99, 79, 244, 122, 115, 251, 99, 28, 35, 59, 100, 12, 35, 123,
-        100, 4, 35, 199, 248, 12, 128, 62, 96, 125, 96, 188, 96, 187, 100, 56,
-        70, 189, 232, 240, 129, 0, 0, 45, 233, 240, 79, 143, 104, 177, 248,
-        12, 176, 187, 104, 145, 176, 9, 147, 0, 35, 187, 241, 15, 15, 215, 248,
-        0, 144, 128, 70, 12, 70, 13, 147, 14, 147, 15, 147, 5, 108, 70, 108,
-        64, 242, 238, 129, 122, 104, 17, 12, 13, 146, 10, 208, 146, 178, 139,
-        69, 13, 146, 5, 210, 13, 147, 30, 70, 8, 147, 111, 240, 13, 7, 227,
-        225, 10, 70, 13, 155, 179, 245, 0, 95, 3, 217, 0, 38, 13, 150, 8, 150,
-        216, 225, 171, 241, 16, 11, 90, 69, 56, 191, 147, 70, 98, 104, 123,
-        13, 91, 5, 194, 243, 20, 2, 155, 24, 226, 136, 49, 29, 194, 243, 74,
-        18, 1, 50, 210, 24, 210, 27, 251, 26, 146, 178, 139, 66, 162, 129, 4,
-        217, 91, 26, 249, 26, 211, 24, 161, 96, 163, 129, 163, 104, 180, 248,
-        12, 160, 16, 51, 163, 96, 150, 75, 161, 138, 26, 104, 170, 241, 16,
-        10, 82, 248, 33, 16, 31, 250, 138, 250, 164, 248, 12, 160, 49, 177,
-        216, 248, 8, 0, 0, 34, 4, 240, 55, 251, 0, 33, 161, 130, 13, 155, 173,
-        27, 234, 24, 82, 69, 6, 149, 16, 216, 165, 104, 97, 104, 37, 240, 127,
-        66, 193, 243, 20, 1, 34, 244, 96, 2, 82, 26, 20, 54, 178, 66, 4, 211,
-        1, 34, 163, 129, 0, 38, 8, 146, 24, 224, 216, 248, 64, 16, 216, 248,
-        8, 0, 89, 24, 20, 49, 4, 240, 244, 250, 6, 70, 88, 177, 216, 248, 68,
-        80, 131, 104, 20, 53, 93, 25, 189, 248, 52, 48, 0, 33, 133, 96, 131,
-        129, 8, 145, 2, 224, 1, 34, 8, 146, 5, 70, 0, 35, 10, 147, 7, 147, 67,
-        70, 205, 248, 44, 144, 184, 70, 31, 70, 100, 224, 13, 155, 155, 69,
-        44, 191, 217, 70, 153, 70, 185, 241, 0, 15, 83, 208, 72, 70, 4, 240,
-        187, 250, 7, 144, 64, 179, 202, 235, 9, 9, 38, 70, 19, 224, 123, 107,
-        184, 104, 153, 69, 56, 191, 75, 70, 25, 70, 5, 147, 4, 240, 192, 250,
-        5, 155, 0, 177, 0, 136, 98, 73, 176, 130, 10, 104, 82, 248, 32, 96,
-        62, 177, 195, 235, 9, 9, 185, 241, 0, 15, 232, 220, 7, 157, 0, 38, 57,
-        224, 163, 138, 82, 248, 35, 16, 166, 130, 184, 104, 1, 34, 4, 240, 201,
-        250, 7, 152, 4, 240, 147, 250, 86, 75, 27, 120, 219, 177, 13, 155, 6,
-        153, 202, 24, 90, 69, 12, 217, 193, 245, 128, 98, 82, 68, 147, 66, 7,
-        217, 163, 245, 128, 99, 13, 147, 1, 34, 0, 35, 10, 146, 7, 147, 180,
-        231, 6, 153, 1, 34, 193, 235, 10, 3, 13, 147, 0, 35, 165, 104, 10, 146,
-        7, 147, 15, 224, 184, 70, 221, 248, 44, 144, 13, 147, 111, 240, 26,
-        7, 17, 225, 9, 155, 184, 70, 221, 248, 44, 144, 13, 149, 6, 147, 79,
-        240, 255, 55, 212, 224, 0, 45, 152, 208, 59, 70, 221, 248, 44, 144,
-        71, 70, 152, 70, 187, 241, 0, 15, 5, 208, 40, 70, 7, 241, 16, 1, 90,
-        70, 253, 247, 147, 255, 56, 75, 153, 69, 32, 209, 187, 241, 7, 15, 64,
-        242, 186, 128, 7, 153, 213, 248, 4, 144, 171, 241, 8, 11, 8, 53, 137,
-        185, 22, 177, 51, 70, 50, 70, 1, 224, 35, 70, 34, 70, 146, 104, 8, 50,
-        154, 96, 22, 177, 51, 70, 50, 70, 1, 224, 35, 70, 34, 70, 146, 137,
-        8, 58, 154, 129, 9, 155, 67, 240, 2, 3, 0, 224, 9, 155, 223, 248, 164,
-        160, 6, 147, 202, 68, 186, 245, 162, 127, 136, 191, 202, 70, 186, 245,
-        131, 127, 74, 208, 6, 216, 186, 241, 2, 15, 87, 208, 186, 241, 253,
-        15, 91, 209, 16, 224, 64, 242, 7, 19, 154, 69, 29, 208, 64, 242, 11,
-        19, 154, 69, 82, 209, 216, 248, 0, 0, 0, 33, 23, 74, 216, 248, 60, 48,
-        3, 240, 73, 221, 70, 224, 171, 120, 106, 120, 27, 4, 67, 234, 2, 35,
-        42, 120, 233, 120, 19, 67, 216, 248, 0, 0, 67, 234, 1, 97, 2, 240, 222,
-        216, 209, 70, 0, 39, 106, 224, 40, 70, 12, 73, 4, 34, 255, 243, 72,
-        244, 3, 70, 0, 40, 48, 209, 10, 74, 1, 33, 18, 104, 0, 145, 151, 105,
-        216, 248, 4, 0, 41, 70, 90, 70, 29, 224, 0, 191, 32, 7, 0, 0, 220, 6,
-        0, 0, 62, 218, 254, 255, 149, 101, 128, 0, 253, 26, 136, 0, 188, 7,
-        0, 0, 224, 235, 27, 0, 40, 70, 66, 73, 4, 34, 255, 243, 39, 244, 136,
-        185, 64, 75, 13, 154, 27, 104, 0, 144, 216, 248, 4, 0, 159, 105, 41,
-        70, 13, 171, 184, 71, 3, 224, 216, 248, 0, 0, 2, 240, 169, 216, 7, 70,
-        209, 70, 49, 224, 9, 155, 3, 244, 112, 65, 6, 155, 9, 11, 19, 240, 2,
-        2, 12, 208, 15, 171, 1, 147, 14, 171, 2, 147, 1, 35, 187, 241, 0, 15,
-        8, 191, 0, 37, 205, 248, 0, 176, 3, 147, 7, 224, 16, 171, 83, 248, 12,
-        13, 3, 146, 141, 232, 9, 0, 14, 171, 2, 147, 216, 248, 0, 0, 74, 70,
-        43, 70, 2, 240, 93, 216, 16, 241, 14, 15, 7, 70, 10, 209, 10, 153, 65,
-        177, 0, 35, 13, 147, 111, 240, 26, 7, 3, 224, 9, 155, 111, 240, 23,
-        7, 6, 147, 7, 153, 65, 177, 0, 149, 216, 248, 8, 0, 33, 70, 0, 34, 13,
-        155, 0, 240, 2, 218, 8, 224, 189, 248, 52, 32, 0, 46, 20, 191, 51, 70,
-        35, 70, 154, 129, 0, 35, 7, 147, 15, 177, 14, 155, 13, 147, 8, 153,
-        49, 185, 33, 70, 216, 248, 8, 0, 8, 154, 4, 240, 163, 249, 52, 70, 13,
-        155, 6, 154, 1, 147, 64, 70, 73, 70, 59, 70, 0, 149, 2, 148, 255, 247,
-        78, 253, 7, 154, 90, 177, 16, 70, 4, 240, 96, 249, 7, 224, 30, 70, 8,
-        147, 111, 240, 23, 7, 9, 155, 0, 37, 6, 147, 210, 231, 17, 176, 189,
-        232, 240, 143, 0, 191, 253, 26, 136, 0, 188, 7, 0, 0, 45, 233, 240,
-        65, 138, 104, 12, 70, 7, 70, 129, 108, 134, 104, 96, 104, 34, 240, 127,
-        67, 192, 243, 20, 0, 35, 244, 96, 3, 27, 26, 139, 66, 48, 210, 180,
-        248, 12, 128, 48, 70, 65, 68, 4, 240, 73, 249, 5, 70, 48, 185, 33, 70,
-        48, 70, 1, 34, 4, 240, 100, 249, 44, 70, 54, 224, 195, 137, 226, 137,
-        35, 240, 7, 3, 27, 4, 2, 240, 7, 2, 27, 12, 19, 67, 195, 129, 226, 137,
-        209, 6, 76, 191, 67, 240, 16, 3, 35, 240, 16, 3, 195, 129, 163, 124,
-        161, 104, 131, 116, 187, 108, 128, 104, 66, 70, 192, 24, 253, 247, 83,
-        254, 33, 70, 48, 70, 1, 34, 4, 240, 66, 249, 44, 70, 4, 224, 163, 137,
-        82, 26, 201, 24, 162, 96, 161, 129, 163, 104, 32, 34, 26, 112, 226,
-        137, 210, 6, 1, 213, 36, 34, 26, 112, 226, 137, 2, 240, 7, 2, 90, 112,
-        0, 34, 154, 112, 162, 124, 218, 112, 32, 70, 189, 232, 240, 129, 3,
-        70, 112, 181, 154, 108, 140, 137, 128, 104, 148, 66, 45, 211, 138, 104,
-        21, 120, 45, 9, 110, 30, 1, 46, 39, 216, 200, 137, 86, 120, 32, 240,
-        7, 0, 0, 4, 6, 240, 7, 6, 0, 12, 48, 67, 200, 129, 22, 120, 22, 240,
-        8, 15, 28, 191, 64, 240, 8, 0, 200, 129, 16, 120, 16, 240, 3, 0, 5,
-        208, 142, 105, 38, 244, 64, 54, 70, 234, 0, 64, 136, 97, 1, 45, 1, 209,
-        0, 32, 0, 224, 208, 120, 136, 116, 155, 108, 0, 32, 210, 24, 227, 26,
-        138, 96, 139, 129, 112, 189, 0, 34, 4, 240, 240, 248, 1, 32, 112, 189,
-        0, 41, 195, 107, 9, 221, 130, 108, 0, 42, 6, 221, 1, 57, 145, 66, 186,
-        191, 3, 108, 83, 248, 33, 48, 0, 35, 24, 70, 112, 71, 0, 0, 8, 181,
-        3, 75, 0, 104, 27, 104, 91, 105, 152, 71, 8, 189, 0, 191, 188, 7, 0,
-        0, 112, 181, 4, 70, 14, 70, 64, 104, 17, 70, 4, 240, 245, 248, 1, 70,
-        224, 104, 255, 247, 71, 255, 5, 70, 224, 177, 32, 70, 49, 70, 42, 70,
-        1, 240, 130, 223, 0, 40, 21, 219, 41, 70, 96, 104, 1, 240, 92, 255,
-        9, 75, 6, 70, 27, 104, 32, 104, 219, 104, 41, 70, 152, 71, 48, 177,
-        227, 105, 158, 25, 99, 105, 230, 97, 1, 51, 99, 97, 2, 224, 227, 106,
-        1, 51, 227, 98, 0, 32, 112, 189, 188, 7, 0, 0, 45, 233, 247, 79, 0,
-        36, 5, 70, 138, 70, 39, 70, 1, 148, 38, 70, 90, 224, 50, 75, 186, 248,
-        22, 32, 27, 104, 83, 248, 34, 128, 218, 248, 8, 48, 147, 248, 2, 144,
-        9, 240, 15, 9, 184, 241, 0, 15, 5, 208, 216, 248, 8, 48, 155, 120, 3,
-        240, 15, 3, 1, 147, 232, 104, 81, 70, 255, 247, 92, 255, 131, 70, 0,
-        187, 164, 185, 40, 70, 73, 70, 255, 247, 143, 255, 6, 70, 48, 177, 104,
-        104, 81, 70, 4, 240, 179, 248, 4, 70, 7, 70, 53, 224, 104, 104, 81,
-        70, 50, 70, 4, 240, 111, 248, 79, 240, 1, 11, 10, 224, 104, 104, 81,
-        70, 4, 240, 164, 248, 8, 177, 3, 136, 0, 224, 3, 70, 227, 130, 4, 70,
-        34, 224, 171, 106, 1, 51, 171, 98, 207, 177, 184, 241, 0, 15, 5, 208,
-        187, 241, 0, 15, 2, 209, 1, 155, 153, 69, 16, 208, 0, 35, 227, 130,
-        51, 105, 168, 107, 219, 104, 49, 70, 58, 70, 152, 71, 40, 177, 171,
-        106, 0, 36, 1, 51, 171, 98, 39, 70, 1, 224, 4, 70, 7, 70, 194, 70, 186,
-        241, 0, 15, 161, 209, 3, 224, 43, 105, 1, 51, 43, 97, 219, 231, 189,
-        232, 254, 143, 32, 7, 0, 0, 115, 181, 11, 70, 4, 70, 0, 41, 42, 208,
-        0, 42, 40, 208, 129, 107, 145, 185, 193, 107, 33, 187, 194, 99, 131,
-        99, 90, 98, 83, 98, 0, 145, 64, 104, 33, 70, 34, 104, 255, 247, 103,
-        252, 224, 96, 0, 40, 12, 191, 79, 240, 255, 48, 0, 32, 21, 224, 153,
-        66, 17, 209, 195, 107, 147, 66, 14, 208, 134, 108, 0, 32, 9, 224, 35,
-        108, 3, 235, 128, 5, 83, 248, 32, 48, 1, 48, 19, 185, 42, 96, 81, 98,
-        3, 224, 176, 66, 243, 219, 79, 240, 255, 48, 124, 189, 112, 71, 16,
-        181, 64, 240, 93, 248, 64, 240, 107, 248, 63, 240, 89, 250, 64, 240,
-        23, 249, 4, 70, 63, 240, 18, 250, 253, 247, 132, 254, 32, 70, 189, 232,
-        16, 64, 254, 247, 165, 184, 0, 0, 45, 233, 243, 65, 7, 70, 5, 70, 0,
-        36, 62, 224, 213, 248, 116, 131, 216, 248, 8, 105, 22, 240, 3, 3, 53,
-        208, 3, 34, 200, 248, 4, 41, 216, 248, 8, 41, 144, 7, 251, 209, 2, 43,
-        3, 208, 3, 43, 19, 208, 25, 72, 18, 224, 216, 248, 0, 56, 24, 72, 67,
-        240, 1, 3, 200, 248, 0, 56, 216, 248, 0, 56, 216, 248, 0, 56, 35, 240,
-        1, 3, 200, 248, 0, 56, 216, 248, 0, 56, 0, 224, 17, 72, 255, 243, 73,
-        241, 33, 70, 16, 72, 255, 243, 69, 241, 216, 248, 12, 25, 216, 248,
-        16, 41, 216, 248, 20, 57, 216, 248, 28, 9, 0, 144, 11, 72, 255, 243,
-        57, 241, 11, 72, 49, 70, 255, 243, 53, 241, 1, 52, 4, 53, 215, 248,
-        112, 51, 156, 66, 188, 211, 189, 232, 252, 129, 0, 191, 215, 184, 3,
-        0, 231, 184, 3, 0, 243, 184, 3, 0, 174, 28, 136, 0, 4, 185, 3, 0, 60,
-        185, 3, 0, 45, 233, 240, 65, 31, 70, 0, 235, 1, 8, 0, 241, 14, 3, 152,
-        69, 4, 70, 13, 70, 22, 70, 3, 217, 144, 249, 14, 48, 0, 43, 69, 218,
-        23, 45, 63, 217, 33, 124, 99, 124, 4, 241, 18, 2, 67, 234, 1, 35, 211,
-        24, 152, 69, 54, 211, 227, 123, 162, 123, 67, 234, 2, 34, 72, 242, 1,
-        3, 154, 66, 50, 209, 28, 72, 4, 241, 19, 1, 3, 34, 253, 247, 102, 252,
-        88, 187, 162, 125, 227, 125, 67, 234, 2, 35, 1, 43, 37, 209, 71, 45,
-        31, 217, 148, 248, 45, 48, 148, 248, 44, 32, 27, 4, 67, 234, 2, 99,
-        148, 248, 47, 32, 19, 67, 148, 248, 46, 32, 67, 234, 2, 35, 72, 51,
-        155, 178, 227, 24, 152, 69, 12, 211, 14, 177, 1, 46, 13, 209, 56, 70,
-        127, 177, 4, 241, 24, 1, 48, 34, 253, 247, 83, 252, 0, 32, 189, 232,
-        240, 129, 111, 240, 23, 0, 189, 232, 240, 129, 111, 240, 29, 0, 189,
-        232, 240, 129, 189, 232, 240, 129, 212, 178, 3, 0, 0, 72, 112, 71, 0,
-        45, 4, 0, 128, 105, 112, 71, 0, 138, 64, 0, 112, 71, 0, 0, 128, 138,
-        203, 105, 178, 251, 240, 243, 0, 251, 19, 34, 210, 178, 66, 240, 0,
-        66, 27, 6, 66, 234, 19, 67, 139, 97, 0, 35, 0, 224, 1, 51, 136, 105,
-        9, 74, 0, 40, 2, 218, 147, 66, 248, 209, 6, 224, 147, 66, 4, 208, 195,
-        0, 5, 212, 192, 243, 64, 112, 112, 71, 79, 246, 255, 112, 112, 71, 79,
-        246, 255, 112, 112, 71, 128, 150, 152, 0, 16, 181, 132, 104, 0, 35,
-        100, 105, 75, 97, 48, 44, 196, 191, 209, 248, 244, 48, 3, 244, 126,
-        3, 193, 248, 244, 48, 189, 232, 16, 64, 255, 247, 201, 191, 45, 233,
-        240, 65, 0, 36, 128, 70, 15, 70, 22, 1, 37, 70, 64, 70, 57, 70, 170,
-        25, 255, 247, 227, 255, 79, 246, 255, 115, 152, 66, 6, 208, 168, 64,
-        1, 53, 4, 67, 16, 45, 164, 178, 240, 209, 0, 224, 4, 70, 32, 70, 189,
-        232, 240, 129, 191, 35, 11, 128, 255, 35, 19, 128, 112, 71, 1, 57, 6,
-        41, 29, 216, 223, 232, 1, 240, 4, 10, 28, 28, 16, 28, 23, 0, 32, 35,
-        67, 130, 64, 35, 131, 130, 128, 35, 16, 224, 64, 35, 67, 130, 131, 130,
-        79, 244, 128, 115, 10, 224, 96, 35, 67, 130, 64, 35, 131, 130, 79, 244,
-        192, 115, 3, 224, 16, 35, 67, 130, 64, 35, 131, 130, 3, 130, 0, 32,
-        112, 71, 1, 57, 10, 41, 25, 216, 223, 232, 1, 240, 6, 8, 10, 12, 14,
-        24, 16, 24, 24, 24, 19, 0, 64, 35, 12, 224, 96, 35, 10, 224, 128, 35,
-        8, 224, 160, 35, 6, 224, 192, 35, 4, 224, 79, 244, 128, 115, 1, 224,
-        79, 244, 192, 115, 67, 130, 32, 35, 131, 130, 131, 138, 66, 138, 83,
-        67, 27, 17, 3, 130, 0, 32, 112, 71, 111, 240, 22, 0, 112, 71, 0, 0,
-        48, 181, 203, 105, 133, 176, 3, 244, 224, 35, 179, 245, 128, 63, 12,
-        70, 38, 209, 24, 75, 4, 173, 15, 203, 5, 233, 15, 0, 0, 35, 29, 248,
-        3, 32, 66, 240, 1, 66, 162, 97, 0, 34, 0, 224, 1, 50, 161, 105, 0, 41,
-        17, 73, 2, 218, 138, 66, 248, 209, 23, 224, 138, 66, 21, 208, 4, 51,
-        16, 43, 235, 209, 0, 35, 0, 224, 1, 51, 34, 105, 18, 240, 128, 79, 9,
-        74, 2, 209, 147, 66, 247, 209, 7, 224, 147, 66, 5, 208, 99, 105, 0,
-        32, 67, 240, 0, 67, 99, 97, 1, 224, 79, 240, 255, 48, 5, 176, 48, 189,
-        216, 178, 3, 0, 128, 150, 152, 0, 203, 105, 3, 244, 224, 35, 179, 245,
-        128, 63, 27, 209, 79, 240, 2, 67, 139, 97, 0, 35, 0, 224, 1, 51, 138,
-        105, 0, 42, 15, 74, 2, 218, 147, 66, 248, 209, 20, 224, 147, 66, 18,
-        208, 0, 35, 0, 224, 1, 51, 10, 105, 18, 240, 128, 79, 9, 74, 2, 208,
-        147, 66, 247, 209, 7, 224, 147, 66, 8, 208, 75, 105, 0, 32, 35, 240,
-        0, 67, 75, 97, 112, 71, 79, 240, 255, 48, 112, 71, 79, 240, 255, 48,
-        112, 71, 128, 150, 152, 0, 48, 181, 132, 138, 203, 105, 178, 251, 244,
-        240, 4, 251, 16, 34, 3, 244, 224, 35, 0, 6, 210, 178, 179, 245, 128,
-        63, 20, 191, 79, 240, 33, 69, 79, 240, 42, 69, 66, 234, 16, 67, 43,
-        67, 139, 97, 0, 35, 0, 224, 1, 51, 138, 105, 6, 72, 0, 42, 4, 218, 131,
-        66, 248, 209, 79, 240, 255, 48, 48, 189, 131, 66, 12, 191, 79, 240,
-        255, 48, 0, 32, 48, 189, 128, 150, 152, 0, 8, 181, 10, 75, 75, 97, 131,
-        104, 91, 105, 48, 43, 198, 191, 209, 248, 244, 48, 3, 244, 126, 3, 0,
-        35, 67, 244, 128, 99, 67, 240, 6, 3, 193, 248, 244, 48, 255, 247, 178,
-        254, 8, 189, 0, 191, 150, 141, 5, 64, 16, 181, 10, 76, 28, 67, 131,
-        104, 76, 97, 91, 105, 48, 43, 198, 191, 209, 248, 244, 48, 3, 244, 126,
-        3, 0, 35, 67, 244, 128, 99, 67, 240, 6, 3, 193, 248, 244, 48, 255, 247,
-        153, 254, 16, 189, 150, 137, 5, 64, 16, 181, 10, 76, 28, 67, 131, 104,
-        76, 97, 91, 105, 48, 43, 198, 191, 209, 248, 244, 48, 3, 244, 126, 3,
-        0, 35, 67, 244, 4, 67, 67, 240, 6, 3, 193, 248, 244, 48, 255, 247, 129,
-        254, 16, 189, 150, 137, 10, 64, 16, 181, 11, 76, 28, 67, 131, 104, 76,
-        97, 91, 105, 48, 43, 198, 191, 209, 248, 244, 48, 3, 244, 126, 3, 0,
-        35, 67, 244, 4, 67, 67, 240, 6, 3, 193, 248, 244, 48, 189, 232, 16,
-        64, 255, 247, 119, 191, 0, 191, 148, 9, 10, 192, 45, 233, 248, 79, 209,
-        248, 20, 160, 6, 70, 12, 70, 21, 70, 209, 248, 244, 176, 0, 39, 23,
-        224, 33, 70, 42, 70, 59, 70, 48, 70, 255, 247, 213, 255, 48, 70, 33,
-        70, 42, 70, 59, 70, 255, 247, 183, 255, 1, 40, 6, 208, 8, 241, 255,
-        56, 95, 250, 136, 248, 184, 241, 0, 15, 234, 209, 1, 55, 2, 47, 2, 208,
-        79, 240, 16, 8, 228, 231, 0, 35, 33, 70, 42, 70, 48, 70, 255, 247, 162,
-        255, 1, 35, 128, 70, 33, 70, 42, 70, 48, 70, 255, 247, 155, 255, 160,
-        241, 1, 2, 87, 66, 71, 235, 2, 7, 33, 70, 0, 35, 42, 70, 48, 70, 255,
-        247, 120, 255, 1, 35, 129, 70, 33, 70, 48, 70, 42, 70, 255, 247, 113,
-        255, 184, 241, 1, 15, 2, 209, 79, 185, 1, 40, 9, 208, 185, 241, 1, 15,
-        8, 209, 0, 47, 12, 191, 255, 32, 0, 32, 4, 224, 0, 32, 2, 224, 56, 70,
-        0, 224, 255, 32, 196, 248, 20, 160, 196, 248, 244, 176, 189, 232, 248,
-        143, 203, 105, 112, 181, 3, 244, 224, 35, 179, 245, 128, 63, 5, 70,
-        12, 70, 22, 70, 10, 209, 255, 247, 52, 255, 1, 40, 25, 208, 40, 70,
-        33, 70, 50, 70, 189, 232, 112, 64, 255, 247, 141, 191, 75, 105, 3, 240,
-        0, 67, 75, 97, 131, 104, 91, 105, 48, 43, 198, 191, 209, 248, 244, 48,
-        3, 244, 126, 3, 0, 35, 193, 248, 244, 48, 189, 232, 112, 64, 255, 247,
-        238, 190, 0, 32, 112, 189, 48, 181, 132, 138, 203, 105, 178, 251, 244,
-        240, 4, 251, 16, 34, 3, 244, 224, 35, 0, 6, 210, 178, 179, 245, 128,
-        63, 20, 191, 79, 240, 8, 69, 79, 240, 5, 69, 66, 234, 16, 67, 43, 67,
-        139, 97, 0, 35, 0, 224, 1, 51, 138, 105, 6, 72, 0, 42, 4, 218, 131,
-        66, 248, 209, 79, 240, 255, 48, 48, 189, 131, 66, 12, 191, 79, 240,
-        255, 48, 0, 32, 48, 189, 128, 150, 152, 0, 2, 104, 74, 246, 209, 3,
-        146, 178, 154, 66, 9, 208, 4, 216, 74, 246, 123, 3, 154, 66, 6, 209,
-        3, 224, 4, 75, 211, 24, 1, 43, 1, 216, 255, 32, 112, 71, 79, 240, 255,
-        48, 112, 71, 0, 191, 37, 87, 255, 255, 45, 233, 248, 67, 22, 30, 4,
-        70, 13, 70, 17, 218, 144, 248, 54, 32, 0, 38, 1, 58, 9, 224, 148, 248,
-        55, 0, 1, 33, 128, 25, 17, 250, 0, 240, 161, 105, 8, 66, 24, 208, 1,
-        54, 150, 66, 243, 219, 20, 224, 255, 46, 18, 209, 135, 105, 144, 248,
-        55, 0, 180, 248, 74, 32, 79, 240, 1, 12, 129, 24, 12, 250, 1, 241, 57,
-        66, 2, 235, 12, 1, 22, 70, 164, 248, 74, 16, 241, 209, 8, 42, 63, 220,
-        148, 248, 55, 112, 1, 34, 191, 25, 18, 250, 7, 247, 162, 105, 23, 64,
-        79, 240, 255, 50, 55, 209, 148, 248, 53, 16, 8, 152, 1, 241, 1, 9, 2,
-        250, 9, 249, 67, 234, 9, 3, 148, 248, 52, 144, 16, 250, 1, 241, 2, 250,
-        9, 249, 11, 67, 35, 234, 9, 9, 184, 70, 18, 224, 3, 250, 8, 243, 19,
-        234, 9, 15, 11, 208, 4, 235, 70, 3, 26, 143, 32, 70, 41, 70, 66, 68,
-        255, 247, 59, 255, 0, 40, 24, 191, 79, 240, 255, 55, 8, 241, 1, 8, 148,
-        248, 52, 48, 152, 69, 79, 240, 1, 3, 230, 211, 148, 248, 55, 32, 150,
-        25, 179, 64, 166, 105, 51, 67, 163, 97, 3, 224, 79, 240, 255, 55, 0,
-        224, 23, 70, 56, 70, 189, 232, 248, 131, 45, 233, 247, 67, 6, 70, 13,
-        70, 31, 70, 79, 234, 2, 24, 0, 36, 87, 250, 4, 243, 217, 7, 19, 213,
-        4, 235, 8, 9, 48, 70, 41, 70, 74, 70, 255, 247, 13, 255, 88, 177, 40,
-        70, 255, 247, 93, 255, 1, 35, 2, 70, 0, 147, 48, 70, 41, 70, 75, 70,
-        255, 247, 109, 255, 24, 185, 1, 52, 16, 44, 228, 209, 0, 32, 189, 232,
-        254, 131, 79, 240, 255, 48, 112, 71, 0, 0, 0, 72, 112, 71, 36, 17, 4,
-        0, 112, 181, 4, 70, 5, 138, 128, 104, 9, 240, 34, 219, 0, 33, 6, 70,
-        160, 104, 9, 240, 107, 222, 162, 104, 83, 105, 34, 43, 5, 221, 195,
-        108, 155, 5, 155, 13, 7, 51, 219, 8, 163, 133, 16, 70, 49, 70, 9, 240,
-        93, 222, 163, 141, 109, 0, 232, 26, 2, 56, 112, 189, 112, 181, 4, 70,
-        128, 104, 13, 70, 22, 70, 9, 240, 27, 221, 48, 177, 32, 70, 41, 70,
-        50, 70, 189, 232, 112, 64, 255, 247, 2, 189, 6, 245, 128, 102, 53, 248,
-        22, 0, 128, 178, 112, 189, 0, 0, 115, 181, 0, 35, 173, 248, 4, 48, 173,
-        248, 6, 48, 131, 104, 4, 70, 91, 105, 13, 70, 39, 43, 5, 221, 203, 105,
-        27, 5, 27, 13, 27, 17, 4, 59, 6, 224, 27, 43, 6, 216, 79, 244, 146,
-        98, 154, 64, 2, 213, 12, 35, 131, 98, 14, 224, 36, 43, 1, 208, 39, 43,
-        4, 209, 35, 138, 127, 43, 5, 216, 12, 35, 4, 224, 23, 43, 1, 208, 24,
-        43, 1, 221, 20, 35, 163, 98, 235, 105, 3, 244, 224, 35, 179, 245, 128,
-        63, 14, 208, 79, 240, 4, 67, 171, 97, 0, 35, 0, 224, 1, 51, 170, 105,
-        0, 42, 46, 74, 2, 218, 147, 66, 248, 209, 87, 224, 147, 66, 85, 208,
-        43, 105, 162, 106, 163, 97, 3, 50, 32, 70, 41, 70, 255, 247, 163, 255,
-        40, 75, 162, 105, 0, 9, 3, 64, 19, 67, 163, 97, 3, 244, 64, 115, 0,
-        34, 179, 245, 64, 127, 132, 248, 46, 32, 2, 209, 1, 35, 132, 248, 46,
-        48, 163, 106, 13, 241, 6, 2, 4, 51, 163, 131, 35, 138, 32, 70, 227,
-        131, 227, 132, 1, 169, 255, 247, 178, 252, 189, 248, 6, 32, 189, 248,
-        4, 48, 214, 26, 182, 178, 22, 177, 227, 131, 99, 132, 162, 132, 163,
-        105, 219, 5, 10, 213, 32, 70, 41, 70, 162, 106, 255, 247, 116, 255,
-        0, 9, 128, 178, 0, 177, 224, 131, 227, 139, 0, 224, 163, 139, 35, 132,
-        174, 185, 32, 70, 255, 247, 74, 255, 163, 105, 0, 235, 208, 112, 64,
-        16, 96, 132, 152, 5, 9, 213, 162, 106, 32, 70, 41, 70, 1, 50, 255, 247,
-        91, 255, 0, 9, 96, 132, 160, 132, 1, 224, 35, 140, 163, 132, 124, 189,
-        128, 150, 152, 0, 0, 255, 255, 0, 45, 233, 240, 79, 0, 38, 135, 176,
-        0, 41, 4, 70, 144, 70, 155, 70, 5, 150, 2, 145, 87, 219, 138, 24, 67,
-        138, 129, 138, 75, 67, 154, 66, 81, 220, 128, 104, 9, 240, 70, 218,
-        49, 70, 3, 144, 160, 104, 9, 240, 143, 221, 5, 70, 41, 70, 32, 70, 255,
-        247, 174, 252, 41, 224, 27, 248, 1, 123, 79, 240, 8, 10, 1, 224, 70,
-        69, 36, 208, 250, 7, 27, 213, 2, 155, 32, 70, 6, 235, 3, 9, 41, 70,
-        74, 70, 255, 247, 244, 253, 144, 177, 40, 70, 255, 247, 68, 254, 1,
-        35, 2, 70, 0, 147, 32, 70, 41, 70, 75, 70, 255, 247, 84, 254, 48, 177,
-        107, 105, 79, 240, 255, 48, 35, 240, 0, 67, 107, 97, 32, 224, 127, 8,
-        1, 54, 186, 241, 1, 10, 218, 209, 70, 69, 211, 219, 41, 70, 32, 70,
-        255, 247, 187, 252, 160, 104, 0, 33, 5, 170, 9, 240, 74, 220, 5, 170,
-        160, 104, 1, 33, 9, 240, 69, 220, 32, 70, 41, 70, 255, 247, 9, 255,
-        160, 104, 3, 153, 9, 240, 71, 221, 0, 32, 1, 224, 111, 240, 28, 0, 7,
-        176, 189, 232, 240, 143, 45, 233, 247, 67, 79, 240, 0, 8, 2, 175, 4,
-        70, 71, 248, 4, 141, 128, 104, 9, 240, 231, 217, 65, 70, 129, 70, 160,
-        104, 9, 240, 48, 221, 6, 70, 49, 70, 32, 70, 255, 247, 79, 252, 49,
-        70, 63, 34, 32, 70, 255, 247, 204, 253, 49, 70, 64, 69, 20, 191, 79,
-        240, 255, 53, 69, 70, 127, 34, 32, 70, 255, 247, 194, 253, 64, 69, 24,
-        191, 111, 240, 1, 5, 49, 70, 128, 34, 32, 70, 255, 247, 185, 253, 64,
-        69, 24, 191, 111, 240, 2, 5, 49, 70, 129, 34, 32, 70, 255, 247, 176,
-        253, 49, 70, 64, 69, 32, 70, 24, 191, 111, 240, 3, 5, 255, 247, 100,
-        252, 160, 104, 65, 70, 58, 70, 9, 240, 243, 219, 58, 70, 160, 104, 1,
-        33, 9, 240, 238, 219, 32, 70, 49, 70, 255, 247, 178, 254, 160, 104,
-        73, 70, 9, 240, 240, 220, 40, 70, 189, 232, 254, 131, 248, 181, 4, 70,
-        128, 104, 22, 70, 15, 70, 9, 240, 152, 217, 0, 33, 5, 70, 160, 104,
-        9, 240, 225, 220, 58, 70, 1, 70, 32, 70, 255, 247, 132, 254, 41, 70,
-        48, 128, 160, 104, 9, 240, 215, 220, 0, 32, 248, 189, 1, 57, 45, 233,
-        248, 79, 4, 70, 145, 70, 30, 70, 14, 41, 113, 216, 223, 232, 1, 240,
-        8, 24, 112, 40, 112, 112, 112, 52, 112, 112, 112, 112, 112, 112, 59,
-        0, 144, 248, 46, 32, 131, 139, 10, 177, 197, 140, 0, 224, 197, 139,
-        237, 26, 163, 105, 216, 5, 46, 213, 51, 104, 171, 66, 51, 211, 167,
-        139, 54, 224, 144, 248, 46, 32, 3, 140, 10, 177, 197, 140, 0, 224, 69,
-        140, 237, 26, 163, 105, 153, 5, 30, 213, 51, 104, 171, 66, 35, 211,
-        39, 140, 38, 224, 131, 105, 79, 240, 2, 5, 19, 244, 128, 111, 19, 208,
-        51, 104, 1, 43, 24, 217, 135, 106, 2, 55, 26, 224, 135, 140, 197, 140,
-        131, 105, 237, 27, 19, 244, 0, 111, 5, 224, 135, 139, 197, 140, 131,
-        105, 237, 27, 19, 244, 64, 127, 4, 209, 53, 96, 111, 240, 29, 0, 189,
-        232, 248, 143, 51, 104, 171, 66, 4, 210, 53, 96, 111, 240, 13, 0, 189,
-        232, 248, 143, 160, 104, 9, 240, 43, 217, 0, 33, 131, 70, 160, 104,
-        9, 240, 116, 220, 79, 240, 0, 8, 130, 70, 9, 224, 8, 235, 7, 2, 32,
-        70, 81, 70, 255, 247, 18, 254, 8, 241, 1, 8, 41, 248, 2, 11, 168, 69,
-        243, 209, 160, 104, 89, 70, 9, 240, 96, 220, 198, 248, 0, 128, 0, 32,
-        189, 232, 248, 143, 111, 240, 1, 0, 189, 232, 248, 143, 0, 0, 45, 233,
-        255, 71, 4, 70, 128, 104, 22, 70, 154, 70, 13, 70, 9, 240, 255, 216,
-        0, 33, 128, 70, 160, 104, 9, 240, 72, 220, 7, 70, 32, 70, 255, 247,
-        194, 250, 49, 70, 129, 70, 82, 70, 104, 70, 254, 243, 180, 245, 79,
-        234, 89, 9, 0, 38, 21, 224, 179, 7, 4, 209, 104, 70, 17, 73, 114, 0,
-        254, 243, 191, 245, 32, 70, 57, 70, 50, 70, 21, 185, 255, 247, 213,
-        253, 1, 224, 255, 247, 227, 250, 2, 70, 11, 73, 104, 70, 254, 243, 177,
-        245, 1, 54, 78, 69, 231, 209, 104, 70, 8, 73, 254, 243, 170, 245, 160,
-        104, 65, 70, 9, 240, 26, 220, 2, 155, 0, 152, 192, 26, 4, 176, 189,
-        232, 240, 135, 77, 185, 3, 0, 86, 185, 3, 0, 236, 252, 135, 0, 240,
-        181, 67, 105, 135, 176, 21, 43, 5, 70, 2, 208, 22, 43, 64, 243, 215,
-        128, 40, 70, 9, 240, 192, 218, 40, 70, 9, 240, 191, 218, 0, 40, 0, 240,
-        208, 128, 40, 70, 9, 240, 171, 216, 0, 33, 7, 70, 40, 70, 9, 240, 244,
-        219, 6, 70, 255, 247, 105, 250, 107, 105, 4, 70, 48, 43, 4, 221, 241,
-        105, 1, 244, 112, 65, 9, 11, 3, 224, 169, 105, 1, 244, 96, 17, 201,
-        12, 0, 41, 0, 240, 173, 128, 243, 105, 3, 244, 224, 35, 27, 12, 1, 43,
-        3, 209, 32, 70, 255, 247, 212, 250, 3, 224, 19, 185, 32, 70, 255, 247,
-        172, 250, 106, 105, 1, 171, 48, 42, 27, 221, 83, 74, 2, 241, 16, 12,
-        16, 104, 81, 104, 158, 70, 174, 232, 3, 0, 8, 50, 98, 69, 115, 70, 246,
-        209, 18, 136, 4, 241, 56, 0, 26, 128, 1, 169, 18, 34, 252, 247, 119,
-        254, 9, 35, 132, 248, 54, 48, 18, 35, 132, 248, 52, 48, 14, 35, 113,
-        224, 39, 42, 12, 221, 69, 74, 2, 241, 16, 12, 16, 104, 81, 104, 158,
-        70, 174, 232, 3, 0, 8, 50, 98, 69, 115, 70, 246, 209, 83, 224, 36, 42,
-        158, 70, 15, 209, 62, 74, 25, 70, 16, 104, 146, 136, 1, 144, 154, 128,
-        4, 241, 56, 0, 6, 34, 252, 247, 82, 254, 3, 35, 132, 248, 54, 48, 15,
-        35, 76, 224, 21, 42, 1, 208, 24, 42, 24, 209, 53, 75, 3, 241, 16, 12,
-        24, 104, 89, 104, 114, 70, 3, 194, 8, 51, 99, 69, 150, 70, 247, 209,
-        4, 241, 56, 0, 1, 169, 16, 34, 252, 247, 56, 254, 8, 35, 132, 248, 54,
-        48, 15, 35, 132, 248, 52, 48, 11, 35, 50, 224, 27, 42, 21, 209, 40,
-        73, 26, 70, 8, 104, 73, 104, 3, 194, 25, 70, 4, 241, 56, 0, 8, 34, 252,
-        247, 35, 254, 4, 35, 132, 248, 54, 48, 15, 35, 132, 248, 52, 48, 11,
-        35, 132, 248, 53, 48, 20, 35, 29, 224, 30, 74, 2, 241, 16, 12, 16, 104,
-        81, 104, 158, 70, 174, 232, 3, 0, 8, 50, 98, 69, 115, 70, 246, 209,
-        18, 136, 4, 241, 56, 0, 26, 128, 1, 169, 18, 34, 252, 247, 4, 254, 9,
-        35, 132, 248, 54, 48, 17, 35, 132, 248, 52, 48, 13, 35, 132, 248, 53,
-        48, 16, 35, 132, 248, 55, 48, 0, 35, 164, 248, 74, 48, 32, 70, 49, 70,
-        255, 247, 243, 252, 0, 224, 12, 70, 40, 70, 57, 70, 9, 240, 47, 219,
-        2, 224, 0, 36, 0, 224, 4, 70, 32, 70, 7, 176, 240, 189, 232, 178, 3,
-        0, 250, 178, 3, 0, 12, 179, 3, 0, 18, 179, 3, 0, 34, 179, 3, 0, 42,
-        179, 3, 0, 45, 233, 240, 79, 133, 176, 4, 70, 0, 39, 4, 174, 128, 104,
-        145, 70, 155, 70, 136, 70, 70, 248, 4, 125, 8, 240, 192, 223, 57, 70,
-        130, 70, 160, 104, 9, 240, 9, 219, 5, 70, 41, 70, 32, 70, 255, 247,
-        40, 250, 75, 70, 66, 70, 41, 70, 32, 70, 205, 248, 0, 176, 255, 247,
-        228, 251, 41, 70, 128, 70, 32, 70, 255, 247, 89, 250, 160, 104, 57,
-        70, 50, 70, 9, 240, 232, 217, 50, 70, 160, 104, 1, 33, 9, 240, 227,
-        217, 32, 70, 41, 70, 255, 247, 167, 252, 160, 104, 81, 70, 9, 240, 229,
-        218, 64, 70, 5, 176, 189, 232, 240, 143, 45, 233, 240, 65, 221, 248,
-        24, 128, 7, 70, 20, 70, 30, 70, 13, 1, 15, 224, 226, 7, 10, 213, 64,
-        70, 255, 247, 163, 251, 42, 70, 1, 70, 6, 240, 1, 3, 56, 70, 255, 247,
-        176, 255, 40, 185, 1, 53, 100, 8, 118, 8, 0, 44, 237, 209, 32, 70, 189,
-        232, 240, 129, 247, 181, 20, 70, 31, 70, 5, 70, 14, 70, 255, 247, 100,
-        252, 128, 234, 7, 2, 146, 178, 82, 177, 40, 70, 33, 70, 59, 70, 0, 150,
-        255, 247, 209, 255, 0, 40, 24, 191, 111, 240, 21, 0, 0, 224, 16, 70,
-        254, 189, 45, 233, 248, 67, 4, 70, 128, 104, 22, 70, 15, 70, 8, 240,
-        85, 223, 0, 33, 128, 70, 160, 104, 9, 240, 158, 218, 5, 70, 41, 70,
-        32, 70, 58, 70, 255, 247, 64, 252, 48, 234, 6, 3, 25, 209, 128, 234,
-        6, 9, 41, 70, 31, 250, 137, 249, 32, 70, 255, 247, 177, 249, 41, 70,
-        58, 70, 75, 70, 32, 70, 255, 247, 227, 251, 41, 70, 32, 70, 255, 247,
-        229, 249, 41, 70, 32, 70, 58, 70, 51, 70, 255, 247, 186, 255, 5, 70,
-        1, 224, 111, 240, 1, 5, 160, 104, 65, 70, 9, 240, 117, 218, 40, 70,
-        189, 232, 248, 131, 45, 233, 240, 79, 144, 70, 139, 176, 31, 70, 130,
-        106, 0, 35, 9, 147, 75, 30, 4, 70, 3, 145, 4, 146, 7, 43, 0, 242, 173,
-        129, 223, 232, 19, 240, 8, 0, 18, 0, 171, 1, 28, 0, 171, 1, 171, 1,
-        171, 1, 47, 0, 134, 139, 195, 139, 155, 27, 159, 66, 0, 242, 160, 129,
-        131, 105, 195, 243, 0, 35, 40, 224, 6, 140, 67, 140, 155, 27, 159, 66,
-        0, 242, 150, 129, 131, 105, 195, 243, 64, 35, 30, 224, 131, 105, 89,
-        5, 0, 241, 139, 129, 2, 47, 0, 242, 139, 129, 5, 209, 184, 248, 2, 48,
-        19, 244, 112, 79, 64, 240, 126, 129, 4, 155, 0, 34, 158, 28, 1, 146,
-        12, 224, 131, 105, 19, 244, 0, 99, 64, 240, 119, 129, 198, 140, 130,
-        140, 178, 26, 151, 66, 0, 242, 116, 129, 246, 27, 1, 147, 160, 104,
-        8, 240, 212, 222, 0, 33, 6, 144, 160, 104, 9, 240, 29, 218, 123, 0,
-        5, 70, 24, 70, 5, 147, 2, 240, 145, 255, 2, 144, 0, 40, 0, 240, 83,
-        129, 79, 240, 0, 9, 202, 70, 131, 70, 24, 224, 56, 248, 9, 32, 32, 70,
-        43, 248, 9, 32, 41, 70, 10, 235, 6, 2, 255, 247, 172, 251, 40, 248,
-        9, 0, 59, 248, 9, 48, 48, 234, 3, 2, 64, 240, 79, 129, 88, 64, 40, 248,
-        9, 0, 10, 241, 1, 10, 9, 241, 2, 9, 186, 69, 228, 209, 32, 70, 41, 70,
-        195, 70, 255, 247, 18, 249, 79, 240, 0, 9, 205, 248, 28, 128, 168, 70,
-        37, 70, 92, 70, 17, 224, 40, 70, 65, 70, 9, 235, 6, 2, 52, 248, 2, 59,
-        255, 247, 58, 251, 48, 177, 130, 70, 65, 70, 40, 70, 44, 70, 255, 247,
-        57, 249, 48, 225, 9, 241, 1, 9, 185, 69, 235, 209, 4, 155, 1, 154, 44,
-        70, 69, 70, 216, 70, 79, 234, 3, 27, 0, 42, 120, 209, 3, 154, 83, 30,
-        7, 43, 116, 216, 223, 232, 3, 240, 4, 52, 115, 82, 115, 115, 115, 97,
-        148, 248, 46, 48, 163, 177, 35, 107, 41, 70, 6, 235, 3, 14, 79, 234,
-        14, 30, 79, 246, 240, 115, 162, 106, 32, 70, 14, 234, 3, 3, 255, 247,
-        10, 251, 32, 70, 41, 70, 11, 241, 61, 2, 255, 247, 36, 250, 12, 224,
-        9, 235, 6, 14, 79, 234, 14, 30, 79, 246, 240, 115, 32, 70, 41, 70, 162,
-        106, 14, 234, 3, 3, 255, 247, 246, 250, 41, 70, 11, 241, 60, 2, 32,
-        70, 255, 247, 16, 250, 32, 70, 41, 70, 11, 241, 59, 2, 60, 224, 79,
-        234, 6, 30, 79, 246, 240, 115, 14, 234, 3, 3, 41, 70, 162, 106, 32,
-        70, 255, 247, 224, 250, 180, 248, 34, 224, 162, 106, 79, 234, 14, 30,
-        79, 246, 240, 115, 41, 70, 1, 50, 32, 70, 14, 234, 3, 3, 255, 247, 210,
-        250, 32, 70, 41, 70, 11, 241, 61, 2, 30, 224, 32, 70, 41, 70, 11, 241,
-        62, 2, 255, 247, 231, 249, 1, 47, 24, 217, 184, 248, 2, 48, 67, 244,
-        128, 67, 168, 248, 2, 48, 17, 224, 162, 106, 79, 234, 6, 30, 79, 246,
-        240, 115, 41, 70, 1, 50, 32, 70, 14, 234, 3, 3, 255, 247, 178, 250,
-        32, 70, 41, 70, 11, 241, 63, 2, 255, 247, 204, 249, 41, 70, 32, 70,
-        255, 247, 174, 248, 160, 104, 0, 33, 9, 170, 9, 240, 61, 216, 160, 104,
-        1, 33, 9, 170, 9, 240, 56, 216, 1, 155, 0, 43, 96, 209, 3, 154, 83,
-        30, 7, 43, 49, 216, 223, 232, 3, 240, 4, 22, 48, 66, 48, 48, 48, 42,
-        148, 248, 46, 32, 58, 177, 35, 107, 79, 240, 60, 9, 243, 24, 27, 1,
-        155, 178, 0, 34, 39, 224, 9, 235, 6, 3, 27, 1, 155, 178, 79, 240, 60,
-        9, 32, 224, 79, 234, 6, 30, 79, 246, 240, 115, 32, 70, 41, 70, 162,
-        106, 14, 234, 3, 3, 255, 247, 85, 254, 130, 70, 0, 40, 111, 209, 99,
-        140, 79, 240, 61, 9, 27, 1, 155, 178, 3, 224, 51, 1, 155, 178, 79, 240,
-        63, 9, 1, 34, 6, 224, 3, 155, 79, 240, 0, 9, 4, 43, 14, 208, 75, 70,
-        74, 70, 212, 248, 40, 224, 32, 70, 41, 70, 114, 68, 255, 247, 56, 254,
-        130, 70, 0, 40, 82, 209, 1, 224, 79, 240, 62, 9, 217, 68, 32, 70, 41,
-        70, 74, 70, 254, 247, 151, 255, 79, 246, 255, 115, 152, 66, 64, 208,
-        88, 185, 40, 70, 255, 247, 183, 249, 74, 70, 1, 70, 1, 35, 32, 70, 255,
-        247, 197, 253, 130, 70, 0, 40, 56, 209, 32, 70, 41, 70, 255, 247, 152,
-        250, 64, 70, 2, 153, 5, 154, 252, 247, 145, 251, 169, 70, 79, 240, 0,
-        8, 37, 70, 7, 156, 10, 224, 40, 70, 73, 70, 8, 235, 6, 2, 52, 248, 2,
-        59, 255, 247, 4, 254, 240, 185, 8, 241, 1, 8, 184, 69, 242, 209, 44,
-        70, 21, 224, 111, 240, 26, 10, 160, 104, 6, 153, 9, 240, 186, 216, 7,
-        224, 111, 240, 1, 10, 4, 224, 79, 240, 255, 58, 1, 224, 111, 240, 14,
-        10, 80, 70, 11, 176, 189, 232, 240, 143, 111, 240, 1, 10, 4, 224, 79,
-        240, 0, 10, 1, 224, 130, 70, 44, 70, 2, 152, 2, 240, 31, 254, 226, 231,
-        8, 181, 67, 104, 219, 104, 152, 71, 8, 189, 8, 181, 67, 104, 27, 104,
-        152, 71, 8, 189, 112, 181, 4, 70, 128, 104, 14, 70, 8, 240, 67, 221,
-        0, 33, 5, 70, 160, 104, 9, 240, 140, 216, 99, 104, 50, 70, 1, 70, 91,
-        104, 32, 70, 152, 71, 41, 70, 6, 70, 160, 104, 9, 240, 129, 216, 48,
-        70, 112, 189, 16, 181, 68, 104, 100, 107, 160, 71, 16, 189, 115, 181,
-        0, 38, 4, 70, 1, 150, 254, 247, 236, 254, 76, 34, 49, 70, 5, 70, 253,
-        243, 131, 247, 99, 105, 21, 43, 43, 96, 1, 208, 22, 43, 6, 217, 255,
-        247, 237, 249, 18, 75, 131, 96, 255, 247, 233, 249, 104, 96, 107, 104,
-        211, 177, 172, 96, 32, 70, 8, 240, 80, 223, 232, 96, 32, 70, 8, 240,
-        24, 223, 6, 70, 32, 185, 32, 70, 1, 33, 1, 170, 8, 240, 71, 223, 107,
-        104, 32, 70, 27, 105, 152, 71, 5, 70, 54, 185, 32, 70, 49, 70, 1, 170,
-        8, 240, 60, 223, 0, 224, 29, 70, 40, 70, 124, 189, 65, 84, 0, 0, 45,
-        233, 247, 67, 153, 70, 0, 35, 4, 70, 15, 70, 144, 70, 1, 147, 8, 240,
-        246, 222, 5, 70, 32, 185, 32, 70, 1, 33, 1, 170, 8, 240, 37, 223, 32,
-        70, 8, 240, 236, 222, 120, 177, 32, 70, 8, 240, 230, 222, 88, 185, 32,
-        70, 255, 247, 170, 255, 80, 177, 67, 104, 57, 70, 94, 105, 66, 70, 75,
-        70, 176, 71, 6, 70, 4, 224, 111, 240, 24, 6, 1, 224, 79, 240, 255, 54,
-        37, 185, 32, 70, 41, 70, 1, 170, 8, 240, 6, 223, 48, 70, 189, 232, 254,
-        131, 45, 233, 240, 67, 153, 70, 133, 176, 0, 35, 4, 70, 15, 70, 144,
-        70, 3, 147, 8, 240, 194, 222, 5, 70, 32, 185, 32, 70, 1, 33, 3, 170,
-        8, 240, 241, 222, 32, 70, 8, 240, 184, 222, 136, 177, 32, 70, 8, 240,
-        178, 222, 104, 185, 32, 70, 255, 247, 118, 255, 96, 177, 12, 154, 67,
-        104, 0, 146, 222, 105, 57, 70, 66, 70, 75, 70, 176, 71, 6, 70, 4, 224,
-        111, 240, 24, 6, 1, 224, 79, 240, 255, 54, 37, 185, 32, 70, 41, 70,
-        3, 170, 8, 240, 208, 222, 48, 70, 5, 176, 189, 232, 240, 131, 45, 233,
-        255, 71, 30, 70, 79, 244, 192, 115, 138, 70, 21, 70, 3, 147, 7, 70,
-        8, 240, 191, 222, 79, 244, 64, 112, 2, 240, 65, 253, 4, 70, 0, 40, 0,
-        240, 204, 128, 0, 33, 79, 244, 64, 114, 253, 243, 210, 246, 56, 70,
-        81, 70, 34, 70, 3, 171, 255, 247, 120, 255, 24, 177, 16, 241, 30, 15,
-        64, 240, 188, 128, 0, 46, 0, 240, 180, 128, 30, 48, 17, 209, 3, 155,
-        255, 34, 79, 234, 67, 9, 4, 235, 9, 3, 3, 248, 1, 44, 3, 248, 2, 44,
-        169, 241, 2, 3, 0, 32, 158, 66, 128, 242, 139, 128, 128, 70, 138, 224,
-        186, 241, 2, 15, 22, 209, 3, 155, 0, 32, 90, 0, 2, 224, 33, 92, 17,
-        185, 1, 48, 144, 66, 250, 219, 3, 241, 0, 67, 1, 59, 176, 235, 67, 15,
-        168, 191, 0, 32, 0, 224, 128, 32, 3, 155, 79, 234, 67, 14, 0, 35, 63,
-        224, 123, 105, 44, 43, 5, 221, 186, 104, 64, 246, 60, 3, 154, 66, 2,
-        209, 240, 231, 35, 43, 127, 221, 0, 33, 56, 70, 28, 34, 11, 70, 0, 145,
-        8, 240, 38, 220, 0, 40, 172, 191, 8, 32, 12, 32, 227, 231, 33, 92, 9,
-        185, 1, 70, 42, 224, 128, 41, 149, 248, 0, 192, 4, 235, 0, 2, 10, 209,
-        188, 241, 128, 15, 18, 209, 146, 248, 1, 192, 105, 120, 140, 69, 13,
-        209, 145, 120, 170, 120, 3, 224, 140, 69, 8, 209, 81, 120, 106, 120,
-        194, 235, 1, 12, 220, 241, 0, 2, 66, 235, 12, 2, 0, 224, 0, 34, 210,
-        178, 0, 42, 24, 191, 3, 70, 34, 24, 82, 120, 128, 24, 2, 48, 112, 69,
-        212, 219, 213, 231, 98, 92, 18, 185, 1, 49, 113, 69, 250, 219, 179,
-        177, 226, 24, 146, 248, 1, 224, 0, 34, 14, 241, 1, 12, 4, 235, 3, 8,
-        21, 248, 2, 144, 24, 248, 2, 128, 56, 234, 9, 8, 2, 209, 1, 50, 148,
-        69, 243, 218, 14, 241, 2, 14, 114, 69, 8, 191, 24, 70, 0, 235, 6, 9,
-        25, 240, 1, 15, 24, 191, 9, 241, 1, 9, 1, 57, 137, 69, 172, 191, 111,
-        240, 14, 8, 79, 240, 0, 8, 1, 224, 111, 240, 14, 8, 32, 24, 41, 70,
-        50, 70, 252, 247, 200, 249, 184, 241, 0, 15, 13, 209, 9, 235, 217, 121,
-        56, 70, 81, 70, 34, 70, 79, 234, 105, 3, 205, 248, 0, 128, 255, 247,
-        241, 254, 128, 70, 0, 224, 176, 70, 32, 70, 2, 240, 117, 252, 1, 224,
-        79, 240, 255, 56, 64, 70, 4, 176, 189, 232, 240, 135, 45, 233, 240,
-        71, 130, 70, 137, 70, 144, 70, 28, 70, 219, 177, 83, 120, 1, 51, 163,
-        66, 27, 218, 0, 37, 79, 240, 255, 48, 8, 235, 5, 6, 119, 120, 2, 55,
-        188, 66, 20, 219, 80, 70, 73, 70, 50, 70, 59, 70, 255, 247, 1, 255,
-        104, 185, 115, 120, 228, 27, 2, 51, 0, 44, 29, 68, 236, 220, 189, 232,
-        240, 135, 189, 232, 240, 71, 255, 247, 244, 190, 79, 240, 255, 48, 189,
-        232, 240, 135, 45, 233, 240, 65, 5, 70, 136, 70, 23, 70, 30, 70, 255,
-        247, 68, 254, 64, 177, 67, 104, 65, 70, 28, 106, 40, 70, 58, 70, 51,
-        70, 160, 71, 189, 232, 240, 129, 79, 240, 255, 48, 189, 232, 240, 129,
-        115, 181, 0, 35, 4, 70, 1, 147, 8, 240, 106, 221, 6, 70, 32, 185, 32,
-        70, 1, 33, 1, 170, 8, 240, 153, 221, 32, 70, 8, 240, 96, 221, 96, 177,
-        32, 70, 8, 240, 90, 221, 64, 185, 32, 70, 255, 247, 30, 254, 56, 177,
-        67, 104, 91, 106, 152, 71, 5, 70, 4, 224, 111, 240, 24, 5, 1, 224, 79,
-        240, 255, 53, 38, 185, 32, 70, 49, 70, 1, 170, 8, 240, 125, 221, 40,
-        70, 124, 189, 8, 181, 67, 104, 155, 106, 152, 71, 8, 189, 16, 181, 68,
-        104, 164, 104, 12, 177, 160, 71, 16, 189, 111, 240, 22, 0, 16, 189,
-        0, 0, 16, 181, 138, 176, 4, 70, 17, 70, 6, 168, 26, 70, 253, 243, 228,
-        247, 34, 104, 6, 168, 19, 73, 253, 243, 245, 247, 161, 138, 34, 138,
-        99, 138, 0, 145, 6, 168, 16, 73, 253, 243, 237, 247, 33, 140, 162, 139,
-        0, 145, 97, 140, 227, 139, 1, 145, 161, 140, 6, 168, 2, 145, 225, 140,
-        3, 145, 161, 141, 4, 145, 9, 73, 253, 243, 221, 247, 162, 106, 163,
-        105, 6, 168, 7, 73, 253, 243, 215, 247, 6, 168, 6, 73, 253, 243, 211,
-        247, 200, 32, 10, 176, 16, 189, 94, 185, 3, 0, 114, 185, 3, 0, 140,
-        185, 3, 0, 208, 185, 3, 0, 236, 252, 135, 0, 247, 181, 6, 70, 200, 7,
-        13, 70, 20, 70, 31, 70, 90, 212, 177, 245, 64, 127, 87, 216, 177, 245,
-        220, 127, 86, 211, 177, 245, 234, 127, 86, 216, 178, 248, 64, 32, 69,
-        242, 114, 49, 138, 66, 19, 208, 180, 248, 128, 48, 139, 66, 15, 208,
-        180, 248, 182, 1, 136, 66, 11, 208, 64, 242, 52, 97, 139, 66, 7, 208,
-        0, 144, 36, 73, 36, 72, 253, 243, 77, 245, 79, 240, 255, 48, 64, 224,
-        34, 136, 79, 246, 255, 115, 154, 66, 6, 209, 32, 72, 29, 73, 253, 243,
-        65, 245, 0, 47, 52, 209, 41, 224, 105, 30, 255, 34, 32, 70, 0, 240,
-        175, 251, 192, 67, 181, 245, 234, 127, 79, 234, 0, 35, 5, 209, 148,
-        248, 210, 33, 19, 67, 164, 248, 210, 49, 13, 224, 181, 245, 230, 127,
-        5, 209, 148, 248, 202, 33, 19, 67, 164, 248, 202, 49, 4, 224, 148, 248,
-        182, 33, 19, 67, 164, 248, 182, 49, 167, 177, 0, 35, 1, 33, 0, 147,
-        48, 70, 34, 70, 53, 250, 1, 243, 255, 247, 206, 253, 10, 224, 56, 70,
-        8, 224, 1, 32, 6, 224, 111, 240, 13, 0, 3, 224, 111, 240, 14, 0, 0,
-        224, 0, 32, 254, 189, 184, 187, 3, 0, 165, 186, 3, 0, 229, 186, 3, 0,
-        45, 233, 240, 79, 128, 70, 135, 176, 79, 244, 64, 112, 139, 70, 5, 146,
-        153, 70, 17, 159, 2, 240, 54, 251, 4, 70, 79, 244, 64, 112, 2, 240,
-        49, 251, 5, 70, 0, 44, 0, 240, 211, 128, 0, 40, 0, 240, 223, 128, 16,
-        153, 69, 242, 170, 83, 153, 66, 9, 208, 71, 234, 1, 3, 222, 7, 0, 241,
-        213, 128, 123, 24, 179, 245, 64, 127, 0, 242, 208, 128, 73, 70, 64,
-        70, 253, 243, 89, 244, 0, 35, 0, 147, 1, 144, 3, 147, 64, 70, 89, 70,
-        5, 154, 75, 70, 2, 148, 253, 243, 76, 244, 6, 70, 0, 40, 64, 240, 189,
-        128, 96, 73, 180, 248, 64, 32, 180, 248, 128, 48, 95, 72, 253, 243,
-        192, 244, 34, 136, 79, 246, 255, 115, 154, 66, 64, 242, 52, 97, 69,
-        209, 18, 154, 178, 248, 128, 48, 139, 66, 12, 209, 88, 72, 86, 73, 26,
-        70, 253, 243, 175, 244, 183, 245, 234, 127, 192, 240, 154, 128, 64,
-        240, 155, 128, 234, 38, 35, 224, 18, 153, 177, 248, 64, 32, 69, 242,
-        114, 49, 138, 66, 1, 208, 139, 66, 11, 209, 78, 72, 75, 73, 253, 243,
-        154, 244, 183, 245, 220, 127, 192, 240, 133, 128, 64, 240, 134, 128,
-        220, 38, 14, 224, 128, 47, 5, 209, 72, 72, 68, 73, 253, 243, 140, 244,
-        64, 38, 6, 224, 70, 72, 65, 73, 253, 243, 134, 244, 111, 240, 1, 6,
-        120, 224, 0, 35, 79, 234, 70, 10, 141, 232, 8, 4, 3, 147, 64, 70, 89,
-        70, 5, 154, 75, 70, 2, 148, 253, 243, 246, 243, 0, 40, 104, 209, 49,
-        224, 180, 248, 128, 32, 138, 66, 16, 209, 79, 244, 234, 122, 64, 70,
-        89, 70, 5, 154, 75, 70, 0, 150, 205, 248, 4, 160, 2, 148, 3, 150, 253,
-        243, 226, 243, 0, 40, 84, 209, 234, 38, 28, 224, 180, 248, 64, 16, 69,
-        242, 114, 51, 153, 66, 1, 208, 154, 66, 17, 209, 0, 35, 79, 244, 220,
-        118, 141, 232, 72, 0, 3, 147, 64, 70, 89, 70, 5, 154, 75, 70, 2, 148,
-        253, 243, 201, 243, 0, 40, 59, 209, 178, 70, 220, 38, 2, 224, 79, 240,
-        128, 10, 64, 38, 16, 154, 69, 242, 170, 83, 154, 66, 40, 70, 79, 234,
-        70, 2, 3, 209, 255, 33, 253, 243, 16, 244, 41, 224, 33, 70, 251, 247,
-        180, 255, 16, 155, 18, 153, 35, 240, 1, 0, 58, 70, 40, 24, 251, 247,
-        172, 255, 255, 34, 40, 70, 10, 241, 255, 49, 0, 240, 154, 250, 1, 62,
-        21, 248, 22, 32, 195, 67, 219, 178, 66, 234, 3, 35, 37, 248, 22, 48,
-        14, 224, 1, 38, 21, 177, 40, 70, 2, 240, 88, 250, 48, 70, 7, 176, 189,
-        232, 240, 143, 111, 240, 13, 6, 3, 224, 111, 240, 14, 6, 0, 224, 1,
-        38, 32, 70, 2, 240, 74, 250, 236, 231, 233, 185, 3, 0, 2, 187, 3, 0,
-        50, 187, 3, 0, 77, 187, 3, 0, 125, 187, 3, 0, 150, 187, 3, 0, 1, 75,
-        67, 248, 32, 16, 112, 71, 112, 45, 4, 0, 3, 75, 83, 248, 32, 0, 67,
-        26, 88, 66, 64, 235, 3, 0, 112, 71, 112, 45, 4, 0, 1, 35, 112, 181,
-        4, 70, 3, 116, 5, 70, 0, 38, 4, 224, 235, 106, 32, 70, 41, 107, 152,
-        71, 1, 54, 227, 124, 8, 53, 158, 66, 246, 219, 0, 32, 32, 116, 112,
-        189, 112, 181, 133, 105, 4, 70, 29, 177, 43, 104, 105, 104, 152, 71,
-        25, 224, 134, 124, 1, 62, 15, 224, 35, 137, 99, 177, 99, 124, 19, 185,
-        50, 70, 1, 62, 0, 224, 42, 70, 12, 50, 4, 235, 194, 2, 83, 104, 32,
-        70, 145, 104, 152, 71, 1, 53, 163, 124, 157, 66, 236, 219, 99, 124,
-        131, 240, 1, 3, 99, 116, 0, 32, 112, 189, 16, 181, 82, 8, 0, 35, 3,
-        224, 49, 248, 2, 75, 1, 51, 0, 25, 147, 66, 249, 209, 16, 189, 48, 181,
-        19, 70, 12, 70, 3, 224, 52, 248, 2, 91, 2, 59, 64, 25, 1, 43, 249, 216,
-        83, 8, 210, 7, 68, 191, 17, 248, 19, 48, 192, 24, 131, 178, 3, 235,
-        16, 64, 0, 235, 16, 64, 192, 67, 128, 178, 48, 189, 56, 181, 20, 70,
-        16, 34, 13, 70, 255, 247, 215, 255, 5, 241, 18, 1, 164, 241, 18, 2,
-        189, 232, 56, 64, 255, 247, 218, 191, 66, 104, 6, 75, 16, 181, 74, 97,
-        4, 70, 65, 96, 0, 34, 24, 104, 2, 240, 102, 250, 35, 137, 1, 51, 35,
-        129, 16, 189, 192, 45, 4, 0, 56, 181, 4, 137, 5, 70, 108, 177, 68, 104,
-        1, 34, 99, 105, 33, 70, 67, 96, 5, 75, 24, 104, 2, 240, 83, 250, 0,
-        35, 99, 97, 43, 137, 1, 59, 43, 129, 32, 70, 56, 189, 192, 45, 4, 0,
-        248, 181, 4, 70, 71, 109, 255, 247, 229, 255, 5, 70, 72, 185, 227, 124,
-        19, 177, 32, 70, 255, 247, 102, 255, 32, 70, 255, 247, 219, 255, 5,
-        70, 112, 177, 102, 120, 102, 185, 95, 177, 103, 109, 32, 70, 161, 109,
-        42, 70, 1, 35, 184, 71, 32, 177, 41, 70, 32, 70, 255, 247, 187, 255,
-        53, 70, 40, 70, 248, 189, 16, 181, 4, 70, 255, 247, 180, 255, 35, 125,
-        67, 185, 163, 124, 51, 177, 35, 124, 35, 185, 32, 70, 189, 232, 16,
-        64, 255, 247, 84, 191, 16, 189, 45, 233, 248, 67, 6, 70, 12, 70, 143,
-        137, 2, 177, 191, 16, 180, 248, 10, 128, 0, 37, 20, 224, 48, 70, 225,
-        137, 98, 120, 2, 240, 12, 217, 129, 70, 152, 177, 32, 70, 73, 70, 254,
-        243, 70, 242, 1, 53, 56, 177, 48, 70, 73, 70, 0, 34, 2, 240, 131, 249,
-        79, 240, 255, 53, 7, 224, 5, 235, 8, 3, 187, 66, 230, 219, 0, 37, 1,
-        224, 111, 240, 26, 5, 163, 124, 35, 177, 35, 124, 19, 185, 32, 70, 255,
-        247, 36, 255, 40, 70, 189, 232, 248, 131, 66, 137, 60, 41, 40, 191,
-        60, 33, 3, 70, 145, 66, 44, 191, 8, 70, 16, 70, 152, 129, 112, 71, 1,
-        117, 112, 71, 0, 0, 5, 75, 0, 32, 27, 104, 4, 224, 138, 137, 128, 24,
-        138, 138, 83, 248, 34, 16, 0, 41, 248, 209, 112, 71, 32, 7, 0, 0, 5,
-        75, 0, 32, 27, 104, 3, 224, 138, 138, 1, 48, 83, 248, 34, 16, 0, 41,
-        249, 209, 112, 71, 0, 191, 32, 7, 0, 0, 48, 181, 3, 70, 186, 177, 13,
-        72, 4, 104, 208, 138, 84, 248, 32, 0, 144, 177, 12, 37, 5, 251, 1, 49,
-        13, 138, 1, 61, 13, 130, 217, 136, 1, 57, 217, 128, 195, 138, 84, 248,
-        35, 48, 3, 177, 27, 136, 211, 130, 0, 35, 195, 130, 48, 189, 16, 70,
-        48, 189, 0, 191, 32, 7, 0, 0, 240, 181, 4, 120, 46, 79, 3, 70, 62, 93,
-        1, 48, 22, 240, 32, 6, 247, 209, 43, 44, 1, 209, 3, 70, 5, 224, 45,
-        44, 8, 191, 3, 70, 20, 191, 0, 38, 1, 38, 106, 185, 26, 120, 48, 42,
-        22, 209, 90, 120, 120, 42, 1, 208, 88, 42, 2, 209, 2, 51, 16, 34, 15,
-        224, 1, 51, 8, 34, 12, 224, 16, 42, 10, 209, 24, 120, 48, 40, 7, 209,
-        88, 120, 120, 40, 1, 208, 88, 40, 2, 209, 2, 51, 0, 224, 10, 34, 0,
-        32, 17, 224, 2, 251, 0, 68, 132, 66, 12, 210, 94, 185, 41, 179, 43,
-        70, 26, 120, 1, 53, 186, 92, 18, 240, 68, 15, 248, 209, 11, 96, 79,
-        240, 255, 48, 240, 189, 32, 70, 29, 70, 44, 120, 1, 51, 23, 248, 4,
-        192, 28, 240, 68, 15, 12, 208, 28, 240, 4, 15, 1, 208, 48, 60, 5, 224,
-        28, 240, 2, 15, 1, 208, 87, 60, 0, 224, 55, 60, 148, 66, 216, 211, 6,
-        177, 64, 66, 25, 177, 13, 96, 240, 189, 79, 240, 255, 48, 240, 189,
-        22, 119, 135, 0, 6, 34, 8, 181, 3, 73, 251, 247, 182, 253, 208, 241,
-        1, 0, 56, 191, 0, 32, 8, 189, 236, 125, 135, 0, 6, 34, 8, 181, 3, 73,
-        251, 247, 170, 253, 208, 241, 1, 0, 56, 191, 0, 32, 8, 189, 248, 125,
-        135, 0, 254, 243, 0, 176, 253, 243, 194, 183, 253, 243, 204, 183, 253,
-        243, 226, 183, 131, 137, 112, 181, 14, 43, 132, 104, 64, 242, 130, 128,
-        163, 137, 129, 43, 51, 209, 227, 137, 30, 10, 70, 234, 3, 38, 35, 138,
-        182, 178, 117, 11, 8, 43, 3, 208, 77, 246, 134, 82, 147, 66, 19, 209,
-        162, 124, 19, 9, 4, 43, 1, 209, 227, 124, 8, 224, 6, 43, 5, 209, 227,
-        124, 27, 9, 67, 234, 2, 19, 219, 178, 0, 224, 0, 35, 91, 9, 2, 208,
-        79, 244, 128, 114, 2, 224, 43, 70, 79, 244, 0, 114, 0, 41, 78, 208,
-        171, 66, 76, 208, 241, 4, 201, 12, 65, 234, 67, 49, 137, 178, 13, 10,
-        69, 234, 1, 33, 225, 129, 66, 244, 128, 98, 64, 224, 8, 43, 3, 208,
-        77, 246, 134, 82, 147, 66, 52, 209, 162, 123, 19, 9, 4, 43, 1, 209,
-        227, 123, 8, 224, 6, 43, 5, 209, 227, 123, 27, 9, 67, 234, 2, 19, 219,
-        178, 0, 224, 0, 35, 154, 8, 20, 42, 26, 208, 9, 216, 12, 42, 23, 208,
-        1, 216, 10, 42, 2, 224, 14, 42, 18, 208, 18, 42, 20, 209, 15, 224, 28,
-        42, 24, 208, 4, 216, 22, 42, 10, 208, 26, 42, 12, 209, 18, 224, 30,
-        42, 16, 208, 46, 42, 7, 209, 79, 244, 0, 98, 6, 35, 13, 224, 79, 244,
-        0, 98, 3, 35, 9, 224, 91, 9, 79, 244, 0, 98, 5, 224, 0, 34, 19, 70,
-        2, 224, 79, 244, 0, 98, 4, 35, 193, 137, 3, 240, 7, 4, 33, 240, 7, 1,
-        33, 67, 193, 129, 66, 234, 3, 0, 112, 189, 0, 32, 112, 189, 0, 241,
-        52, 2, 52, 42, 8, 181, 3, 70, 6, 217, 5, 72, 32, 33, 5, 74, 253, 243,
-        215, 241, 3, 72, 8, 189, 4, 74, 67, 66, 82, 248, 35, 0, 8, 189, 78,
-        45, 4, 0, 210, 188, 3, 0, 24, 121, 135, 0, 3, 70, 4, 224, 19, 248, 1,
-        11, 66, 64, 3, 72, 130, 92, 17, 241, 255, 49, 247, 210, 16, 70, 112,
-        71, 210, 187, 3, 0, 48, 181, 96, 185, 16, 224, 68, 120, 163, 28, 153,
-        66, 11, 211, 5, 120, 149, 66, 9, 208, 192, 24, 111, 240, 1, 3, 27, 27,
-        201, 24, 1, 41, 241, 216, 0, 32, 48, 189, 0, 32, 48, 189, 0, 0, 45,
-        233, 240, 67, 137, 70, 161, 176, 144, 70, 1, 70, 32, 177, 3, 120, 19,
-        177, 24, 72, 253, 243, 90, 241, 0, 38, 128, 37, 108, 70, 30, 224, 22,
-        240, 15, 7, 7, 209, 32, 70, 41, 70, 19, 74, 51, 70, 253, 243, 141, 241,
-        36, 24, 45, 26, 0, 45, 8, 221, 32, 70, 41, 70, 15, 74, 25, 248, 6, 48,
-        253, 243, 130, 241, 36, 24, 45, 26, 15, 47, 5, 209, 11, 72, 105, 70,
-        253, 243, 58, 241, 128, 37, 108, 70, 1, 54, 70, 69, 222, 209, 105, 70,
-        140, 66, 2, 208, 5, 72, 253, 243, 47, 241, 33, 176, 189, 232, 240, 131,
-        142, 31, 136, 0, 229, 188, 3, 0, 156, 31, 136, 0, 68, 78, 136, 0, 56,
-        181, 4, 70, 13, 70, 10, 34, 33, 70, 0, 32, 255, 247, 105, 253, 4, 241,
-        12, 1, 165, 241, 12, 2, 189, 232, 56, 64, 255, 247, 108, 189, 127, 181,
-        5, 70, 20, 70, 14, 70, 12, 34, 0, 33, 1, 168, 253, 243, 229, 240, 5,
-        241, 16, 1, 4, 34, 2, 168, 251, 247, 135, 252, 5, 241, 12, 1, 4, 34,
-        1, 168, 251, 247, 129, 252, 107, 122, 0, 32, 141, 248, 13, 48, 35, 10,
-        67, 234, 4, 35, 1, 169, 12, 34, 141, 248, 12, 0, 173, 248, 14, 48, 255,
-        247, 61, 253, 49, 70, 34, 70, 255, 247, 92, 253, 4, 176, 112, 189, 112,
-        181, 138, 176, 4, 70, 14, 70, 21, 70, 0, 33, 36, 34, 1, 168, 253, 243,
-        186, 240, 4, 241, 8, 1, 16, 34, 1, 168, 251, 247, 92, 252, 4, 241, 24,
-        1, 16, 34, 5, 168, 251, 247, 86, 252, 98, 121, 35, 121, 1, 169, 67,
-        234, 2, 35, 173, 248, 36, 48, 163, 121, 36, 34, 0, 32, 141, 248, 39,
-        48, 255, 247, 19, 253, 49, 70, 42, 70, 255, 247, 50, 253, 10, 176, 112,
-        189, 112, 181, 12, 70, 22, 70, 50, 73, 3, 34, 5, 70, 251, 247, 39, 252,
-        168, 185, 235, 120, 8, 43, 86, 216, 223, 232, 3, 240, 74, 11, 13, 5,
-        8, 11, 13, 85, 15, 0, 68, 242, 64, 3, 73, 224, 79, 244, 129, 67, 70,
-        224, 64, 35, 68, 224, 128, 35, 66, 224, 32, 35, 64, 224, 40, 70, 36,
-        73, 3, 34, 251, 247, 11, 252, 32, 185, 235, 120, 1, 43, 61, 209, 64,
-        34, 49, 224, 40, 70, 32, 73, 3, 34, 251, 247, 0, 252, 56, 185, 235,
-        120, 0, 43, 50, 209, 14, 185, 16, 35, 41, 224, 8, 35, 39, 224, 40, 70,
-        26, 73, 3, 34, 251, 247, 242, 251, 96, 185, 235, 120, 1, 43, 3, 208,
-        21, 211, 2, 43, 33, 209, 2, 224, 79, 244, 128, 98, 19, 224, 79, 244,
-        0, 99, 20, 224, 40, 70, 17, 73, 3, 34, 251, 247, 223, 251, 152, 185,
-        235, 120, 1, 43, 6, 208, 2, 211, 2, 43, 14, 209, 6, 224, 1, 32, 32,
-        96, 112, 189, 2, 34, 34, 96, 24, 70, 112, 189, 4, 35, 35, 96, 1, 32,
-        112, 189, 0, 32, 112, 189, 0, 32, 112, 189, 0, 191, 68, 179, 3, 0, 68,
-        29, 136, 0, 60, 179, 3, 0, 72, 179, 3, 0, 64, 179, 3, 0, 1, 56, 192,
-        178, 10, 40, 154, 191, 2, 75, 51, 248, 16, 0, 0, 32, 112, 71, 0, 191,
-        238, 188, 3, 0, 75, 246, 255, 115, 3, 64, 64, 43, 18, 208, 128, 43,
-        16, 208, 16, 43, 14, 208, 179, 245, 128, 95, 11, 208, 179, 245, 0, 79,
-        8, 208, 179, 245, 128, 127, 7, 208, 163, 245, 0, 115, 88, 66, 64, 235,
-        3, 0, 112, 71, 1, 32, 112, 71, 1, 32, 112, 71, 73, 242, 208, 51, 3,
-        64, 24, 28, 24, 191, 1, 32, 112, 71, 248, 181, 7, 156, 208, 248, 172,
-        96, 100, 4, 221, 248, 24, 192, 100, 12, 22, 177, 18, 240, 64, 79, 4,
-        209, 31, 1, 205, 25, 146, 25, 170, 96, 8, 224, 149, 15, 31, 1, 34, 240,
-        64, 66, 68, 234, 5, 68, 150, 25, 205, 25, 174, 96, 208, 248, 176, 32,
-        234, 96, 220, 248, 0, 32, 202, 81, 108, 96, 130, 104, 210, 7, 14, 213,
-        27, 1, 205, 24, 168, 104, 238, 104, 202, 88, 112, 64, 107, 104, 80,
-        64, 88, 64, 0, 240, 250, 222, 16, 177, 68, 244, 128, 36, 108, 96, 248,
-        189, 130, 107, 129, 104, 16, 181, 20, 104, 17, 240, 1, 15, 4, 244, 64,
-        52, 68, 240, 1, 3, 4, 191, 68, 244, 0, 99, 67, 240, 1, 3, 137, 7, 144,
-        248, 181, 16, 72, 191, 67, 244, 128, 99, 67, 234, 129, 67, 144, 248,
-        186, 16, 35, 244, 96, 3, 67, 234, 65, 83, 144, 248, 187, 16, 35, 240,
-        64, 115, 67, 234, 1, 99, 144, 248, 50, 16, 9, 177, 67, 234, 65, 35,
-        144, 248, 222, 16, 9, 177, 67, 244, 0, 115, 208, 248, 160, 16, 67, 234,
-        65, 3, 19, 96, 16, 189, 176, 248, 160, 48, 11, 128, 176, 248, 148, 0,
-        16, 128, 112, 71, 176, 248, 70, 16, 16, 181, 3, 70, 209, 177, 66, 107,
-        20, 105, 208, 248, 196, 32, 128, 110, 20, 64, 36, 26, 20, 64, 36, 9,
-        164, 178, 163, 248, 210, 64, 179, 248, 72, 32, 7, 224, 216, 108, 80,
-        248, 34, 0, 64, 185, 1, 50, 72, 30, 2, 64, 146, 178, 162, 66, 245, 209,
-        0, 32, 16, 189, 8, 70, 16, 189, 45, 233, 240, 67, 176, 248, 70, 64,
-        36, 185, 12, 96, 79, 240, 255, 48, 189, 232, 240, 131, 0, 37, 1, 43,
-        209, 248, 0, 192, 13, 96, 176, 248, 210, 80, 2, 209, 176, 248, 74, 48,
-        30, 224, 208, 248, 52, 128, 208, 248, 196, 96, 216, 248, 16, 48, 216,
-        248, 20, 144, 208, 248, 200, 128, 135, 110, 51, 64, 9, 234, 8, 8, 219,
-        27, 199, 235, 8, 7, 51, 64, 62, 64, 27, 9, 54, 9, 155, 178, 182, 178,
-        179, 66, 160, 248, 210, 48, 3, 208, 115, 30, 1, 60, 35, 64, 155, 178,
-        13, 177, 0, 36, 19, 224, 176, 248, 74, 64, 156, 66, 249, 210, 20, 224,
-        198, 108, 86, 248, 37, 96, 38, 177, 100, 69, 10, 218, 66, 248, 36, 96,
-        1, 52, 176, 248, 70, 96, 1, 53, 1, 62, 53, 64, 173, 178, 157, 66, 238,
-        209, 12, 96, 0, 32, 189, 232, 240, 131, 79, 240, 255, 48, 189, 232,
-        240, 131, 176, 248, 108, 16, 16, 181, 3, 70, 217, 177, 130, 107, 20,
-        105, 208, 248, 204, 32, 208, 248, 144, 0, 20, 64, 36, 26, 20, 64, 36,
-        9, 164, 178, 163, 248, 208, 64, 179, 248, 110, 32, 7, 224, 88, 111,
-        80, 248, 34, 0, 64, 185, 1, 50, 72, 30, 2, 64, 146, 178, 162, 66, 245,
-        209, 0, 32, 16, 189, 8, 70, 16, 189, 176, 248, 108, 32, 176, 248, 112,
-        16, 176, 248, 110, 48, 1, 58, 203, 26, 2, 234, 3, 0, 112, 71, 16, 181,
-        160, 177, 131, 104, 35, 234, 1, 1, 10, 67, 211, 7, 12, 213, 67, 107,
-        25, 104, 65, 244, 0, 100, 28, 96, 67, 107, 28, 104, 20, 244, 0, 111,
-        20, 191, 25, 96, 34, 240, 1, 2, 130, 96, 0, 224, 2, 70, 16, 70, 16,
-        189, 3, 70, 176, 248, 70, 0, 240, 181, 0, 40, 89, 208, 1, 41, 179, 248,
-        72, 32, 2, 209, 179, 248, 74, 64, 34, 224, 179, 248, 210, 64, 93, 107,
-        162, 66, 10, 209, 44, 105, 211, 248, 196, 96, 159, 110, 52, 64, 228,
-        27, 52, 64, 36, 9, 164, 178, 163, 248, 210, 64, 3, 41, 16, 209, 105,
-        105, 211, 248, 200, 80, 41, 64, 157, 110, 73, 27, 211, 248, 196, 80,
-        137, 178, 41, 64, 9, 9, 140, 66, 3, 208, 76, 30, 1, 56, 4, 64, 164,
-        178, 10, 177, 0, 32, 26, 224, 179, 248, 74, 16, 161, 66, 249, 210, 38,
-        224, 217, 107, 21, 1, 73, 25, 136, 104, 72, 104, 18, 72, 136, 96, 217,
-        107, 77, 25, 217, 108, 232, 96, 0, 37, 81, 248, 34, 0, 65, 248, 34,
-        80, 179, 248, 70, 16, 1, 50, 1, 57, 10, 64, 146, 178, 162, 66, 1, 208,
-        0, 40, 229, 208, 179, 248, 70, 16, 179, 248, 74, 64, 163, 248, 72, 32,
-        162, 26, 76, 30, 34, 64, 137, 26, 1, 57, 89, 96, 240, 189, 16, 70, 240,
-        189, 0, 191, 239, 190, 173, 222, 192, 248, 188, 16, 0, 32, 112, 71,
-        177, 245, 128, 127, 42, 208, 7, 216, 1, 41, 30, 208, 26, 211, 2, 41,
-        30, 208, 3, 41, 51, 209, 30, 224, 64, 242, 3, 19, 153, 66, 38, 208,
-        7, 216, 64, 242, 1, 19, 153, 66, 27, 208, 177, 245, 129, 127, 38, 209,
-        26, 224, 64, 242, 5, 19, 153, 66, 28, 208, 64, 242, 7, 19, 153, 66,
-        29, 209, 26, 224, 128, 248, 183, 32, 112, 71, 128, 248, 184, 32, 112,
-        71, 128, 248, 185, 32, 112, 71, 128, 248, 182, 32, 112, 71, 128, 248,
-        186, 32, 112, 71, 128, 248, 187, 32, 112, 71, 128, 248, 181, 32, 112,
-        71, 128, 248, 214, 32, 112, 71, 128, 248, 50, 32, 112, 71, 128, 248,
-        222, 32, 112, 71, 248, 181, 4, 70, 15, 70, 180, 248, 110, 80, 180, 248,
-        112, 48, 171, 66, 83, 208, 180, 248, 208, 48, 157, 66, 12, 209, 163,
-        107, 212, 248, 204, 32, 27, 105, 212, 248, 144, 16, 19, 64, 91, 26,
-        19, 64, 27, 9, 155, 178, 164, 248, 208, 48, 15, 185, 157, 66, 65, 208,
-        99, 111, 0, 34, 83, 248, 37, 96, 67, 248, 37, 32, 31, 75, 49, 70, 24,
-        104, 1, 34, 1, 240, 15, 253, 148, 248, 50, 48, 19, 185, 148, 248, 222,
-        48, 155, 177, 182, 241, 0, 79, 16, 209, 180, 248, 108, 48, 1, 53, 90,
-        30, 21, 64, 180, 248, 112, 16, 173, 178, 164, 248, 110, 80, 77, 27,
-        42, 64, 155, 26, 1, 59, 196, 248, 216, 48, 191, 231, 33, 108, 42, 1,
-        137, 24, 139, 104, 14, 75, 1, 53, 139, 96, 33, 108, 138, 24, 211, 96,
-        180, 248, 108, 48, 180, 248, 112, 16, 90, 30, 21, 64, 173, 178, 164,
-        248, 110, 80, 77, 27, 42, 64, 155, 26, 1, 59, 196, 248, 216, 48, 2,
-        224, 0, 38, 0, 224, 62, 70, 48, 70, 248, 189, 192, 45, 4, 0, 239, 190,
-        173, 222, 176, 248, 108, 48, 11, 177, 255, 247, 149, 191, 24, 70, 112,
-        71, 56, 181, 5, 70, 208, 248, 188, 0, 88, 177, 3, 120, 75, 177, 253,
-        243, 66, 245, 4, 70, 88, 185, 213, 248, 188, 0, 1, 33, 255, 247, 224,
-        250, 5, 224, 1, 36, 3, 224, 168, 106, 0, 34, 1, 240, 60, 252, 1, 33,
-        40, 70, 255, 247, 222, 255, 1, 70, 0, 40, 244, 209, 52, 185, 213, 248,
-        188, 0, 33, 70, 189, 232, 56, 64, 255, 247, 202, 186, 56, 189, 45, 233,
-        240, 65, 4, 70, 0, 37, 32, 70, 0, 33, 255, 247, 202, 255, 6, 70, 0,
-        40, 90, 208, 163, 104, 130, 104, 19, 240, 128, 15, 8, 208, 212, 248,
-        160, 48, 91, 8, 2, 51, 50, 248, 19, 48, 4, 51, 19, 128, 0, 224, 19,
-        136, 212, 248, 160, 16, 180, 248, 148, 32, 88, 24, 144, 66, 56, 191,
-        2, 70, 148, 248, 50, 0, 72, 177, 181, 137, 170, 66, 2, 216, 178, 129,
-        0, 34, 0, 224, 82, 27, 166, 248, 80, 32, 0, 224, 178, 129, 180, 248,
-        148, 112, 207, 27, 255, 24, 0, 47, 47, 221, 163, 104, 91, 6, 23, 213,
-        160, 106, 49, 70, 0, 34, 34, 224, 3, 136, 168, 248, 20, 48, 180, 248,
-        148, 48, 148, 248, 50, 16, 159, 66, 180, 191, 58, 70, 26, 70, 17, 177,
-        170, 66, 40, 191, 42, 70, 255, 26, 0, 47, 130, 129, 2, 220, 8, 224,
-        176, 70, 0, 224, 128, 70, 32, 70, 0, 33, 255, 247, 122, 255, 0, 40,
-        226, 209, 162, 104, 18, 240, 4, 2, 7, 209, 160, 106, 49, 70, 1, 240,
-        202, 251, 227, 104, 1, 51, 227, 96, 157, 231, 48, 70, 189, 232, 240,
-        129, 56, 181, 176, 248, 72, 32, 176, 248, 74, 48, 4, 70, 154, 66, 13,
-        70, 7, 209, 56, 189, 163, 104, 26, 7, 3, 212, 160, 106, 1, 34, 1, 240,
-        178, 251, 41, 70, 32, 70, 255, 247, 70, 254, 1, 70, 0, 40, 241, 209,
-        56, 189, 45, 233, 255, 71, 0, 35, 3, 147, 4, 70, 14, 70, 144, 70, 176,
-        248, 74, 80, 11, 70, 76, 224, 67, 73, 159, 138, 9, 104, 5, 241, 1, 10,
-        81, 248, 39, 112, 180, 248, 70, 16, 180, 248, 72, 144, 1, 57, 10, 234,
-        1, 10, 202, 69, 154, 104, 152, 137, 179, 248, 16, 192, 98, 208, 28,
-        235, 0, 0, 52, 208, 179, 66, 79, 240, 0, 14, 8, 191, 79, 240, 0, 67,
-        205, 248, 12, 224, 8, 191, 3, 147, 87, 185, 3, 155, 67, 240, 128, 78,
-        205, 248, 12, 224, 184, 241, 0, 15, 2, 208, 67, 240, 192, 67, 3, 147,
-        141, 66, 3, 209, 3, 155, 67, 240, 128, 83, 3, 147, 148, 248, 214, 48,
-        27, 177, 3, 155, 67, 244, 128, 35, 3, 147, 3, 171, 0, 147, 1, 144, 43,
-        70, 32, 70, 225, 107, 255, 247, 200, 252, 180, 248, 70, 48, 1, 53, 1,
-        59, 29, 64, 180, 248, 72, 48, 173, 178, 171, 66, 42, 208, 59, 70, 0,
-        43, 176, 209, 3, 155, 89, 0, 9, 212, 180, 248, 70, 32, 105, 30, 1, 58,
-        10, 64, 225, 107, 18, 1, 67, 240, 192, 67, 139, 80, 180, 248, 70, 48,
-        104, 30, 90, 30, 225, 108, 16, 64, 65, 248, 32, 96, 164, 248, 74, 80,
-        184, 241, 0, 15, 4, 208, 160, 110, 97, 107, 0, 235, 5, 16, 72, 96, 180,
-        248, 72, 16, 0, 32, 109, 26, 42, 64, 155, 26, 1, 59, 99, 96, 11, 224,
-        160, 106, 49, 70, 1, 34, 1, 240, 35, 251, 0, 35, 99, 96, 99, 105, 79,
-        240, 255, 48, 1, 51, 99, 97, 4, 176, 189, 232, 240, 135, 0, 191, 32,
-        7, 0, 0, 45, 233, 240, 79, 0, 35, 143, 176, 13, 147, 131, 104, 144,
-        248, 50, 16, 144, 248, 222, 32, 3, 240, 16, 11, 4, 70, 187, 241, 0,
-        15, 12, 191, 79, 240, 1, 11, 79, 240, 16, 11, 0, 41, 12, 191, 1, 35,
-        2, 35, 162, 177, 208, 248, 188, 48, 27, 177, 26, 120, 10, 177, 218,
-        137, 1, 224, 180, 248, 148, 32, 17, 177, 194, 245, 0, 98, 1, 33, 2,
-        245, 244, 114, 79, 244, 246, 115, 3, 50, 146, 251, 243, 242, 139, 24,
-        180, 248, 108, 32, 180, 248, 112, 96, 180, 248, 110, 16, 85, 30, 113,
-        26, 41, 64, 195, 241, 1, 0, 137, 178, 65, 26, 212, 248, 156, 0, 145,
-        251, 243, 241, 146, 251, 243, 243, 131, 66, 148, 191, 201, 24, 9, 24,
-        180, 248, 148, 48, 8, 145, 204, 43, 3, 217, 212, 248, 152, 32, 5, 146,
-        1, 224, 0, 35, 5, 147, 79, 240, 0, 10, 246, 224, 212, 248, 188, 0, 120,
-        177, 3, 120, 107, 177, 3, 137, 4, 43, 7, 216, 4, 241, 32, 0, 126, 73,
-        252, 243, 166, 244, 120, 185, 212, 248, 188, 0, 255, 247, 223, 248,
-        8, 224, 180, 248, 148, 16, 5, 154, 1, 57, 89, 68, 160, 106, 137, 24,
-        1, 240, 133, 250, 5, 70, 112, 185, 186, 241, 0, 15, 6, 209, 32, 70,
-        0, 240, 13, 217, 0, 48, 24, 191, 1, 32, 0, 224, 0, 32, 35, 105, 1, 51,
-        35, 97, 206, 224, 163, 104, 19, 240, 16, 3, 5, 208, 131, 104, 11, 241,
-        255, 50, 195, 235, 11, 3, 19, 64, 5, 154, 155, 24, 5, 208, 170, 104,
-        210, 24, 170, 96, 170, 137, 211, 26, 171, 129, 213, 248, 8, 128, 99,
-        111, 0, 39, 200, 248, 0, 112, 67, 248, 38, 80, 96, 75, 41, 70, 24, 104,
-        58, 70, 1, 240, 237, 250, 148, 248, 50, 48, 193, 70, 0, 43, 54, 209,
-        180, 248, 148, 112, 148, 248, 222, 80, 79, 240, 0, 67, 0, 45, 12, 191,
-        61, 70, 79, 244, 246, 117, 13, 147, 197, 241, 0, 8, 127, 27, 180, 248,
-        108, 32, 123, 25, 1, 58, 150, 66, 3, 209, 13, 154, 66, 240, 128, 82,
-        13, 146, 13, 170, 171, 66, 212, 191, 1, 147, 1, 149, 0, 146, 51, 70,
-        74, 70, 32, 70, 33, 108, 255, 247, 182, 251, 180, 248, 108, 48, 1, 54,
-        1, 59, 30, 64, 0, 47, 182, 178, 169, 68, 115, 221, 99, 111, 79, 240,
-        0, 66, 67, 248, 38, 32, 0, 35, 13, 147, 71, 68, 215, 231, 180, 248,
-        108, 48, 13, 151, 1, 59, 158, 66, 4, 191, 79, 240, 128, 83, 13, 147,
-        13, 153, 170, 137, 14, 171, 65, 240, 0, 65, 67, 248, 4, 29, 0, 147,
-        1, 146, 51, 70, 66, 70, 32, 70, 33, 108, 255, 247, 140, 251, 181, 248,
-        82, 112, 180, 248, 108, 48, 213, 248, 64, 144, 213, 248, 68, 128, 148,
-        248, 222, 80, 1, 54, 0, 45, 12, 191, 61, 70, 79, 244, 246, 117, 1, 59,
-        30, 64, 197, 241, 0, 12, 205, 248, 36, 160, 182, 178, 127, 27, 226,
-        70, 98, 111, 79, 240, 0, 65, 66, 248, 38, 16, 0, 34, 13, 146, 180, 248,
-        108, 32, 123, 25, 1, 58, 150, 66, 4, 191, 79, 240, 128, 82, 13, 146,
-        13, 170, 171, 66, 212, 191, 2, 147, 2, 149, 0, 150, 205, 248, 44, 144,
-        205, 248, 48, 128, 1, 146, 11, 171, 12, 203, 33, 108, 32, 70, 255, 243,
-        227, 247, 180, 248, 108, 48, 1, 54, 1, 59, 30, 64, 0, 47, 182, 178,
-        14, 221, 0, 35, 205, 248, 28, 128, 6, 147, 221, 233, 6, 35, 66, 234,
-        9, 2, 82, 25, 67, 241, 0, 3, 152, 70, 145, 70, 87, 68, 199, 231, 221,
-        248, 36, 160, 10, 241, 1, 10, 8, 154, 146, 69, 127, 244, 5, 175, 0,
-        32, 212, 248, 144, 32, 163, 107, 164, 248, 112, 96, 2, 235, 6, 22, 94,
-        96, 15, 176, 189, 232, 240, 143, 188, 207, 3, 0, 192, 45, 4, 0, 0, 72,
-        112, 71, 92, 17, 4, 0, 0, 72, 112, 71, 240, 208, 3, 0, 0, 32, 112, 71,
-        8, 181, 255, 247, 243, 255, 65, 120, 2, 120, 1, 35, 19, 250, 1, 241,
-        19, 250, 2, 242, 10, 67, 129, 120, 139, 64, 66, 234, 3, 0, 8, 189, 45,
-        233, 247, 67, 79, 240, 0, 8, 4, 70, 15, 70, 22, 70, 153, 70, 69, 70,
-        1, 35, 3, 250, 8, 243, 19, 234, 9, 15, 43, 208, 99, 105, 32, 70, 34,
-        43, 10, 221, 227, 105, 90, 6, 7, 213, 64, 246, 39, 1, 0, 34, 7, 240,
-        59, 217, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 196, 98, 7, 240, 131,
-        216, 192, 248, 0, 128, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 91,
-        6, 7, 213, 64, 246, 39, 1, 0, 34, 7, 240, 37, 217, 1, 70, 32, 70, 0,
-        224, 0, 33, 64, 242, 36, 98, 7, 240, 109, 216, 3, 104, 29, 67, 8, 241,
-        1, 8, 184, 241, 31, 15, 200, 209, 157, 248, 40, 48, 75, 177, 69, 177,
-        1, 35, 0, 147, 32, 70, 43, 70, 57, 70, 50, 70, 255, 247, 180, 255, 5,
-        67, 40, 70, 189, 232, 254, 131, 129, 104, 56, 181, 64, 246, 60, 3, 153,
-        66, 4, 70, 40, 209, 195, 104, 11, 43, 3, 216, 79, 240, 168, 113, 153,
-        64, 1, 212, 12, 43, 31, 217, 73, 242, 24, 35, 154, 66, 5, 208, 73, 246,
-        64, 67, 154, 66, 23, 209, 12, 77, 0, 224, 12, 77, 99, 105, 32, 70, 34,
-        43, 10, 221, 227, 105, 89, 6, 7, 213, 64, 246, 39, 1, 0, 34, 7, 240,
-        223, 216, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242, 220, 98, 7, 240, 39,
-        216, 5, 96, 56, 189, 0, 191, 153, 1, 1, 0, 182, 1, 1, 0, 56, 181, 67,
-        105, 4, 70, 34, 43, 10, 221, 195, 105, 93, 6, 7, 213, 64, 246, 39, 1,
-        0, 34, 7, 240, 195, 216, 1, 70, 32, 70, 1, 224, 32, 70, 0, 33, 79, 244,
-        192, 98, 7, 240, 10, 216, 5, 104, 32, 70, 5, 240, 124, 5, 173, 8, 255,
-        247, 71, 255, 3, 224, 131, 120, 171, 66, 7, 208, 12, 48, 16, 177, 3,
-        136, 0, 43, 247, 209, 32, 70, 255, 247, 63, 255, 3, 136, 79, 244, 122,
-        112, 88, 67, 56, 189, 112, 181, 4, 70, 22, 70, 13, 70, 1, 240, 241,
-        250, 148, 248, 96, 35, 9, 75, 0, 40, 24, 191, 1, 35, 1, 42, 148, 248,
-        104, 35, 8, 191, 212, 248, 92, 51, 1, 42, 12, 191, 212, 248, 100, 35,
-        111, 240, 0, 66, 43, 96, 50, 96, 112, 189, 0, 191, 1, 0, 130, 14, 45,
-        233, 255, 71, 29, 70, 67, 105, 144, 70, 0, 34, 34, 43, 4, 70, 137, 70,
-        2, 146, 3, 146, 9, 221, 195, 105, 95, 6, 6, 213, 64, 246, 39, 1, 7,
-        240, 113, 216, 1, 70, 32, 70, 1, 224, 32, 70, 0, 33, 79, 244, 196, 98,
-        6, 240, 184, 223, 5, 96, 35, 106, 32, 70, 12, 43, 99, 105, 22, 221,
-        34, 43, 10, 221, 227, 105, 94, 6, 7, 213, 64, 246, 39, 1, 0, 34, 7,
-        240, 88, 216, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 197, 98, 6, 240,
-        160, 223, 7, 104, 63, 12, 191, 5, 191, 13, 20, 224, 34, 43, 10, 221,
-        227, 105, 89, 6, 7, 213, 64, 246, 39, 1, 0, 34, 7, 240, 65, 216, 1,
-        70, 32, 70, 0, 224, 0, 33, 79, 244, 197, 98, 6, 240, 137, 223, 7, 104,
-        63, 10, 255, 178, 1, 35, 171, 64, 0, 38, 32, 70, 73, 70, 66, 70, 0,
-        150, 255, 247, 215, 254, 5, 70, 1, 34, 18, 250, 6, 243, 43, 66, 7, 208,
-        0, 146, 32, 70, 73, 70, 66, 70, 255, 247, 203, 254, 37, 234, 0, 5, 1,
-        54, 31, 46, 239, 209, 32, 70, 2, 169, 3, 170, 255, 247, 117, 255, 2,
-        155, 0, 38, 37, 234, 3, 10, 53, 70, 1, 35, 171, 64, 19, 234, 10, 15,
-        8, 208, 32, 70, 73, 70, 66, 70, 235, 178, 255, 247, 131, 255, 134, 66,
-        56, 191, 6, 70, 1, 53, 31, 45, 238, 209, 184, 28, 128, 25, 4, 176, 189,
-        232, 240, 135, 45, 233, 240, 65, 6, 158, 4, 70, 21, 70, 31, 70, 255,
-        247, 142, 254, 0, 40, 112, 208, 16, 234, 6, 8, 0, 234, 7, 7, 44, 208,
-        99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 90, 6, 7, 213, 64, 246,
-        39, 1, 0, 34, 6, 240, 225, 223, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242,
-        28, 98, 6, 240, 41, 223, 99, 105, 6, 70, 34, 43, 32, 70, 10, 221, 227,
-        105, 91, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 204, 223, 1, 70,
-        32, 70, 0, 224, 0, 33, 64, 242, 28, 98, 6, 240, 20, 223, 3, 104, 67,
-        234, 8, 3, 51, 96, 0, 47, 43, 208, 99, 105, 32, 70, 34, 43, 10, 221,
-        227, 105, 94, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 178, 223, 1,
-        70, 32, 70, 0, 224, 0, 33, 79, 244, 195, 98, 6, 240, 250, 222, 99, 105,
-        6, 70, 34, 43, 32, 70, 10, 221, 227, 105, 89, 6, 7, 213, 64, 246, 39,
-        1, 0, 34, 6, 240, 157, 223, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 195,
-        98, 6, 240, 229, 222, 3, 104, 31, 67, 55, 96, 7, 155, 154, 3, 5, 212,
-        189, 232, 240, 129, 10, 32, 0, 240, 164, 220, 1, 224, 64, 242, 221,
-        84, 213, 248, 224, 49, 155, 3, 1, 212, 1, 60, 243, 209, 189, 232, 240,
-        129, 0, 0, 45, 233, 240, 65, 29, 70, 67, 105, 4, 70, 34, 43, 10, 221,
-        195, 105, 95, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 111, 223, 1,
-        70, 32, 70, 1, 224, 32, 70, 0, 33, 79, 244, 204, 98, 6, 240, 182, 222,
-        99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 94, 6, 7, 213, 64, 246,
-        39, 1, 0, 34, 6, 240, 90, 223, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242,
-        100, 98, 6, 240, 162, 222, 32, 70, 6, 240, 5, 222, 1, 61, 237, 178,
-        2, 45, 152, 191, 121, 75, 103, 106, 152, 191, 83, 248, 37, 96, 35, 106,
-        136, 191, 118, 78, 4, 43, 99, 105, 204, 191, 7, 244, 120, 23, 7, 244,
-        240, 23, 79, 244, 122, 120, 127, 12, 34, 43, 176, 251, 248, 248, 32,
-        70, 10, 221, 227, 105, 93, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240,
-        44, 223, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 204, 98, 6, 240, 116,
-        222, 2, 35, 3, 96, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 89, 6,
-        7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 22, 223, 1, 70, 32, 70, 0, 224,
-        0, 33, 64, 242, 100, 98, 6, 240, 94, 222, 99, 105, 5, 104, 34, 43, 32,
-        70, 10, 221, 227, 105, 90, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240,
-        1, 223, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 204, 98, 6, 240, 73,
-        222, 3, 35, 3, 96, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 91, 6,
-        7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 235, 222, 1, 70, 32, 70, 0, 224,
-        0, 33, 64, 242, 100, 98, 6, 240, 51, 222, 31, 250, 136, 248, 184, 245,
-        150, 79, 2, 104, 10, 208, 70, 242, 144, 83, 152, 69, 9, 208, 73, 242,
-        24, 35, 152, 69, 78, 209, 79, 240, 2, 8, 4, 224, 79, 240, 0, 8, 1, 224,
-        79, 240, 1, 8, 7, 251, 8, 248, 8, 241, 2, 3, 86, 248, 35, 48, 157, 66,
-        56, 209, 8, 241, 3, 3, 86, 248, 35, 48, 0, 37, 154, 66, 50, 209, 55,
-        224, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 89, 6, 7, 213, 64,
-        246, 39, 1, 0, 34, 6, 240, 177, 222, 1, 70, 32, 70, 0, 224, 0, 33, 79,
-        244, 204, 98, 6, 240, 249, 221, 5, 96, 99, 105, 32, 70, 34, 43, 10,
-        221, 227, 105, 90, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 156, 222,
-        1, 70, 32, 70, 0, 224, 0, 33, 64, 242, 100, 98, 6, 240, 228, 221, 8,
-        235, 5, 3, 86, 248, 35, 48, 1, 53, 3, 96, 237, 178, 0, 224, 0, 37, 189,
-        66, 203, 209, 79, 244, 128, 101, 0, 224, 0, 37, 99, 105, 32, 70, 34,
-        43, 10, 221, 227, 105, 91, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240,
-        121, 222, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 192, 98, 6, 240, 193,
-        221, 3, 104, 32, 70, 29, 67, 99, 105, 34, 43, 10, 221, 227, 105, 89,
-        6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 99, 222, 1, 70, 32, 70, 0,
-        224, 0, 33, 79, 244, 192, 98, 6, 240, 171, 221, 5, 96, 189, 232, 240,
-        129, 200, 207, 3, 0, 132, 208, 3, 0, 247, 181, 30, 70, 67, 105, 4, 70,
-        34, 43, 15, 70, 21, 70, 11, 221, 195, 105, 90, 6, 8, 213, 64, 246, 39,
-        1, 0, 34, 6, 240, 68, 222, 0, 151, 1, 70, 32, 70, 2, 224, 0, 151, 32,
-        70, 0, 33, 79, 240, 255, 51, 79, 244, 202, 98, 6, 240, 245, 223, 99,
-        105, 34, 43, 12, 221, 227, 105, 91, 6, 9, 213, 64, 246, 39, 1, 32, 70,
-        0, 34, 6, 240, 43, 222, 0, 150, 1, 70, 32, 70, 2, 224, 0, 150, 32, 70,
-        0, 33, 64, 242, 84, 98, 43, 70, 6, 240, 221, 223, 254, 189, 247, 181,
-        30, 70, 67, 105, 4, 70, 34, 43, 15, 70, 21, 70, 11, 221, 195, 105, 91,
-        6, 8, 213, 64, 246, 39, 1, 0, 34, 6, 240, 14, 222, 0, 151, 1, 70, 32,
-        70, 2, 224, 0, 151, 32, 70, 0, 33, 79, 240, 255, 51, 79, 244, 203, 98,
-        6, 240, 191, 223, 99, 105, 34, 43, 12, 221, 227, 105, 89, 6, 9, 213,
-        64, 246, 39, 1, 32, 70, 0, 34, 6, 240, 245, 221, 0, 150, 1, 70, 32,
-        70, 2, 224, 0, 150, 32, 70, 0, 33, 64, 242, 92, 98, 43, 70, 6, 240,
-        167, 223, 254, 189, 247, 181, 30, 70, 67, 105, 4, 70, 34, 43, 15, 70,
-        21, 70, 11, 221, 195, 105, 89, 6, 8, 213, 64, 246, 39, 1, 0, 34, 6,
-        240, 216, 221, 0, 151, 1, 70, 32, 70, 2, 224, 0, 151, 32, 70, 0, 33,
-        79, 240, 255, 51, 79, 244, 204, 98, 6, 240, 137, 223, 99, 105, 34, 43,
-        12, 221, 227, 105, 90, 6, 9, 213, 64, 246, 39, 1, 32, 70, 0, 34, 6,
-        240, 191, 221, 0, 150, 1, 70, 32, 70, 2, 224, 0, 150, 32, 70, 0, 33,
-        64, 242, 100, 98, 43, 70, 6, 240, 113, 223, 254, 189, 67, 105, 19, 181,
-        34, 43, 4, 70, 13, 221, 195, 105, 91, 6, 10, 213, 64, 246, 39, 1, 0,
-        34, 6, 240, 165, 221, 79, 244, 128, 99, 1, 70, 0, 147, 32, 70, 4, 224,
-        79, 244, 128, 99, 0, 147, 32, 70, 0, 33, 79, 244, 192, 98, 6, 240, 84,
-        223, 28, 189, 0, 0, 45, 233, 240, 79, 1, 58, 210, 178, 8, 42, 133, 176,
-        4, 70, 154, 70, 21, 216, 55, 75, 158, 92, 55, 75, 159, 92, 55, 75, 19,
-        248, 2, 144, 54, 75, 155, 92, 3, 147, 54, 75, 19, 248, 2, 176, 53, 75,
-        155, 92, 2, 147, 53, 75, 19, 248, 2, 128, 52, 75, 157, 92, 7, 224, 0,
-        37, 168, 70, 2, 149, 171, 70, 3, 149, 169, 70, 47, 70, 46, 70, 99, 105,
-        34, 43, 13, 221, 227, 105, 91, 6, 10, 213, 64, 246, 39, 1, 32, 70, 0,
-        34, 6, 240, 97, 221, 205, 248, 0, 144, 1, 70, 32, 70, 3, 224, 205, 248,
-        0, 144, 32, 70, 0, 33, 79, 240, 255, 51, 79, 244, 203, 98, 6, 240, 16,
-        223, 99, 105, 34, 43, 15, 221, 227, 105, 88, 6, 12, 213, 64, 246, 39,
-        1, 32, 70, 0, 34, 6, 240, 70, 221, 7, 234, 10, 3, 179, 64, 1, 70, 0,
-        147, 32, 70, 5, 224, 7, 234, 10, 3, 179, 64, 32, 70, 0, 147, 0, 33,
-        23, 250, 6, 243, 64, 242, 92, 98, 6, 240, 241, 222, 3, 155, 131, 177,
-        72, 250, 11, 242, 8, 234, 10, 8, 72, 250, 11, 251, 32, 70, 2, 156, 41,
-        70, 162, 64, 11, 250, 4, 243, 5, 176, 189, 232, 240, 79, 255, 247, 2,
-        191, 5, 176, 189, 232, 240, 143, 0, 191, 212, 207, 3, 0, 221, 207, 3,
-        0, 230, 207, 3, 0, 239, 207, 3, 0, 248, 207, 3, 0, 100, 210, 3, 0, 112,
-        208, 3, 0, 121, 208, 3, 0, 45, 233, 248, 67, 4, 70, 137, 70, 6, 240,
-        80, 220, 0, 33, 6, 70, 32, 70, 6, 240, 153, 223, 128, 70, 32, 70, 255,
-        247, 141, 251, 7, 70, 32, 70, 6, 240, 63, 222, 73, 70, 5, 70, 66, 70,
-        59, 120, 32, 70, 255, 247, 110, 252, 11, 35, 2, 48, 88, 67, 7, 75, 49,
-        70, 235, 24, 179, 251, 245, 245, 69, 67, 32, 70, 6, 240, 126, 223, 10,
-        35, 181, 251, 243, 245, 168, 178, 189, 232, 248, 131, 63, 66, 15, 0,
-        111, 240, 22, 0, 112, 71, 56, 181, 67, 105, 4, 70, 34, 43, 10, 221,
-        195, 105, 93, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 206, 220, 1,
-        70, 32, 70, 1, 224, 32, 70, 0, 33, 64, 242, 20, 98, 6, 240, 21, 220,
-        99, 105, 5, 104, 34, 43, 32, 70, 10, 221, 227, 105, 89, 6, 7, 213, 64,
-        246, 39, 1, 0, 34, 6, 240, 184, 220, 1, 70, 32, 70, 0, 224, 0, 33, 64,
-        242, 20, 98, 6, 240, 0, 220, 3, 104, 157, 66, 20, 208, 99, 105, 32,
-        70, 34, 43, 10, 221, 227, 105, 90, 6, 7, 213, 64, 246, 39, 1, 0, 34,
-        6, 240, 161, 220, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242, 20, 98, 6,
-        240, 233, 219, 5, 104, 40, 70, 56, 189, 56, 181, 28, 70, 29, 104, 255,
-        247, 182, 255, 3, 70, 35, 96, 64, 27, 56, 189, 45, 233, 247, 67, 0,
-        37, 4, 70, 15, 70, 22, 70, 152, 70, 157, 248, 40, 144, 1, 149, 255,
-        247, 166, 255, 1, 144, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 91,
-        6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 116, 220, 1, 70, 32, 70, 0,
-        224, 0, 33, 79, 244, 194, 98, 6, 240, 188, 219, 185, 241, 1, 15, 0,
-        104, 1, 209, 8, 185, 14, 224, 80, 185, 184, 235, 69, 31, 9, 217, 32,
-        70, 57, 70, 50, 70, 1, 171, 255, 247, 198, 255, 45, 24, 217, 231, 0,
-        32, 0, 224, 1, 32, 11, 155, 109, 1, 29, 96, 189, 232, 254, 131, 45,
-        233, 240, 79, 0, 38, 133, 176, 128, 70, 137, 70, 146, 70, 3, 150, 1,
-        37, 3, 175, 64, 70, 73, 70, 82, 70, 67, 246, 152, 35, 0, 149, 1, 151,
-        255, 247, 178, 255, 4, 70, 136, 185, 141, 232, 129, 0, 64, 35, 64, 70,
-        73, 70, 82, 70, 221, 248, 12, 176, 255, 247, 166, 255, 3, 155, 56, 185,
-        155, 68, 94, 68, 67, 246, 151, 35, 158, 66, 224, 217, 40, 70, 0, 224,
-        32, 70, 5, 176, 189, 232, 240, 143, 45, 233, 248, 67, 153, 70, 67, 105,
-        4, 70, 34, 43, 14, 70, 21, 70, 221, 248, 32, 128, 9, 159, 10, 221, 195,
-        105, 90, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 17, 220, 1, 70, 32,
-        70, 1, 224, 32, 70, 0, 33, 79, 244, 195, 98, 6, 240, 88, 219, 3, 104,
-        32, 70, 201, 248, 0, 48, 99, 105, 34, 43, 10, 221, 227, 105, 91, 6,
-        7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 249, 219, 1, 70, 32, 70, 0, 224,
-        0, 33, 64, 242, 28, 98, 6, 240, 65, 219, 3, 104, 32, 70, 200, 248, 0,
-        48, 213, 248, 224, 49, 59, 96, 255, 247, 130, 250, 7, 70, 0, 40, 114,
-        208, 213, 248, 224, 49, 153, 3, 4, 212, 32, 70, 49, 70, 42, 70, 255,
-        247, 138, 255, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 90, 6, 7,
-        213, 64, 246, 39, 1, 0, 34, 6, 240, 208, 219, 1, 70, 32, 70, 0, 224,
-        0, 33, 79, 244, 195, 98, 6, 240, 24, 219, 99, 105, 6, 70, 34, 43, 32,
-        70, 10, 221, 227, 105, 91, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240,
-        187, 219, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 195, 98, 6, 240, 3,
-        219, 3, 104, 255, 67, 59, 64, 51, 96, 99, 105, 32, 70, 34, 43, 10, 221,
-        227, 105, 94, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 163, 219, 1,
-        70, 32, 70, 0, 224, 0, 33, 64, 242, 28, 98, 6, 240, 235, 218, 99, 105,
-        6, 70, 34, 43, 32, 70, 10, 221, 227, 105, 89, 6, 7, 213, 64, 246, 39,
-        1, 0, 34, 6, 240, 142, 219, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242, 28,
-        98, 6, 240, 214, 218, 3, 104, 64, 242, 221, 84, 31, 64, 55, 96, 2, 224,
-        10, 32, 0, 240, 151, 216, 213, 248, 224, 49, 154, 3, 1, 213, 1, 60,
-        246, 209, 100, 32, 189, 232, 248, 67, 0, 240, 140, 152, 189, 232, 248,
-        131, 55, 181, 4, 70, 1, 171, 79, 244, 0, 97, 106, 70, 6, 240, 14, 222,
-        99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 93, 6, 7, 213, 64, 246,
-        39, 1, 0, 34, 6, 240, 92, 219, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244,
-        206, 98, 6, 240, 164, 218, 5, 104, 21, 240, 0, 83, 22, 208, 99, 105,
-        32, 70, 34, 43, 10, 221, 227, 105, 89, 6, 7, 213, 64, 246, 39, 1, 0,
-        34, 6, 240, 68, 219, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 206, 98,
-        6, 240, 140, 218, 5, 96, 1, 37, 0, 224, 29, 70, 32, 70, 157, 232, 6,
-        0, 6, 240, 23, 221, 40, 70, 62, 189, 112, 181, 4, 70, 14, 70, 6, 240,
-        118, 218, 0, 33, 5, 70, 32, 70, 6, 240, 191, 221, 49, 70, 2, 70, 32,
-        70, 255, 247, 82, 250, 41, 70, 6, 70, 32, 70, 6, 240, 181, 221, 48,
-        70, 112, 189, 0, 0, 1, 75, 24, 96, 112, 71, 0, 191, 180, 45, 4, 0, 248,
-        181, 72, 79, 4, 70, 58, 104, 0, 42, 64, 240, 137, 128, 67, 105, 34,
-        43, 9, 221, 195, 105, 91, 6, 6, 213, 64, 246, 39, 1, 6, 240, 3, 219,
-        1, 70, 32, 70, 1, 224, 32, 70, 0, 33, 64, 242, 20, 98, 6, 240, 74, 218,
-        99, 105, 5, 104, 34, 43, 32, 70, 10, 221, 227, 105, 94, 6, 7, 213, 64,
-        246, 39, 1, 0, 34, 6, 240, 237, 218, 1, 70, 32, 70, 0, 224, 0, 33, 64,
-        242, 20, 98, 6, 240, 53, 218, 3, 104, 157, 66, 20, 208, 99, 105, 32,
-        70, 34, 43, 10, 221, 227, 105, 89, 6, 7, 213, 64, 246, 39, 1, 0, 34,
-        6, 240, 214, 218, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242, 20, 98, 6,
-        240, 30, 218, 5, 104, 66, 242, 16, 112, 255, 243, 227, 247, 99, 105,
-        32, 70, 34, 43, 10, 221, 227, 105, 90, 6, 7, 213, 64, 246, 39, 1, 0,
-        34, 6, 240, 189, 218, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242, 20, 98,
-        6, 240, 5, 218, 99, 105, 6, 104, 34, 43, 32, 70, 10, 221, 227, 105,
-        91, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 168, 218, 1, 70, 32, 70,
-        0, 224, 0, 33, 64, 242, 20, 98, 6, 240, 240, 217, 3, 104, 158, 66, 20,
-        208, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 94, 6, 7, 213, 64,
-        246, 39, 1, 0, 34, 6, 240, 145, 218, 1, 70, 32, 70, 0, 224, 0, 33, 64,
-        242, 20, 98, 6, 240, 217, 217, 6, 104, 117, 27, 100, 38, 117, 67, 61,
-        96, 56, 104, 248, 189, 180, 45, 4, 0, 45, 233, 247, 79, 4, 70, 136,
-        70, 145, 70, 31, 70, 6, 240, 206, 219, 131, 70, 0, 40, 64, 240, 217,
-        128, 32, 70, 6, 240, 187, 217, 89, 70, 130, 70, 32, 70, 6, 240, 4, 221,
-        99, 105, 5, 70, 45, 43, 12, 209, 208, 248, 244, 48, 185, 241, 0, 15,
-        2, 208, 35, 240, 0, 115, 1, 224, 67, 240, 0, 115, 197, 248, 244, 48,
-        184, 224, 32, 70, 255, 247, 232, 248, 195, 120, 1, 38, 158, 64, 0, 240,
-        177, 128, 185, 241, 0, 15, 94, 208, 99, 105, 32, 70, 34, 43, 10, 221,
-        227, 105, 89, 6, 7, 213, 64, 246, 39, 1, 90, 70, 6, 240, 68, 218, 1,
-        70, 32, 70, 0, 224, 0, 33, 79, 244, 195, 98, 6, 240, 140, 217, 3, 104,
-        65, 70, 59, 96, 67, 234, 6, 7, 1, 35, 0, 147, 32, 70, 59, 70, 42, 70,
-        255, 247, 218, 248, 99, 105, 7, 67, 34, 43, 32, 70, 10, 221, 227, 105,
-        90, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 35, 218, 1, 70, 32, 70,
-        0, 224, 0, 33, 79, 244, 195, 98, 6, 240, 107, 217, 65, 70, 7, 96, 42,
-        70, 32, 70, 255, 247, 195, 253, 79, 244, 122, 112, 255, 243, 43, 247,
-        64, 242, 221, 87, 2, 224, 10, 32, 255, 243, 37, 247, 99, 105, 32, 70,
-        34, 43, 10, 221, 227, 105, 91, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6,
-        240, 255, 217, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242, 12, 98, 6, 240,
-        71, 217, 3, 104, 51, 66, 66, 209, 1, 63, 227, 209, 63, 224, 58, 104,
-        154, 185, 99, 105, 32, 70, 34, 43, 9, 221, 227, 105, 95, 6, 6, 213,
-        64, 246, 39, 1, 6, 240, 228, 217, 1, 70, 32, 70, 0, 224, 0, 33, 79,
-        244, 195, 98, 6, 240, 44, 217, 2, 104, 34, 234, 6, 7, 1, 35, 0, 147,
-        32, 70, 59, 70, 65, 70, 42, 70, 255, 247, 123, 248, 99, 105, 7, 67,
-        55, 66, 12, 191, 0, 38, 1, 38, 34, 43, 32, 70, 10, 221, 227, 105, 89,
-        6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 192, 217, 1, 70, 32, 70, 0,
-        224, 0, 33, 79, 244, 195, 98, 6, 240, 8, 217, 65, 70, 7, 96, 42, 70,
-        32, 70, 255, 247, 96, 253, 0, 224, 1, 38, 64, 242, 45, 23, 2, 224, 10,
-        32, 255, 243, 196, 246, 43, 105, 3, 244, 128, 83, 179, 235, 6, 63, 1,
-        208, 1, 63, 244, 209, 32, 70, 81, 70, 3, 176, 189, 232, 240, 79, 6,
-        240, 51, 156, 3, 176, 189, 232, 240, 143, 240, 181, 0, 35, 137, 176,
-        14, 70, 23, 70, 5, 147, 6, 147, 7, 147, 3, 170, 4, 171, 79, 244, 0,
-        97, 4, 70, 6, 240, 47, 220, 6, 171, 5, 70, 0, 147, 7, 171, 1, 147, 32,
-        70, 49, 70, 42, 70, 5, 171, 255, 247, 89, 253, 32, 70, 41, 70, 50, 70,
-        59, 70, 255, 247, 250, 249, 6, 155, 32, 70, 0, 147, 7, 155, 49, 70,
-        1, 147, 42, 70, 5, 155, 255, 247, 114, 249, 32, 70, 3, 153, 4, 154,
-        6, 240, 77, 219, 9, 176, 240, 189, 240, 181, 137, 176, 4, 70, 13, 70,
-        6, 170, 7, 171, 79, 244, 0, 97, 6, 240, 3, 220, 41, 70, 32, 70, 255,
-        247, 40, 254, 79, 244, 122, 118, 0, 34, 176, 251, 246, 246, 19, 70,
-        2, 33, 32, 70, 255, 247, 103, 251, 0, 34, 7, 70, 19, 70, 0, 240, 15,
-        5, 3, 33, 32, 70, 255, 247, 94, 251, 79, 246, 128, 115, 59, 64, 223,
-        9, 79, 244, 0, 3, 32, 240, 127, 66, 0, 147, 3, 168, 4, 169, 51, 70,
-        251, 243, 160, 247, 5, 168, 3, 153, 4, 154, 24, 35, 119, 67, 251, 243,
-        221, 247, 5, 185, 45, 96, 5, 154, 79, 244, 0, 99, 0, 147, 79, 244, 128,
-        83, 3, 168, 4, 169, 186, 24, 147, 251, 245, 243, 251, 243, 138, 247,
-        2, 168, 3, 153, 4, 154, 12, 35, 251, 243, 200, 247, 32, 70, 6, 153,
-        7, 154, 6, 240, 251, 218, 2, 152, 9, 176, 240, 189, 16, 181, 4, 70,
-        6, 240, 156, 218, 1, 70, 32, 70, 189, 232, 16, 64, 255, 247, 163, 191,
-        112, 181, 4, 70, 22, 70, 255, 247, 241, 255, 99, 105, 5, 70, 34, 43,
-        32, 70, 10, 221, 227, 105, 91, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6,
-        240, 248, 216, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 204, 98, 6, 240,
-        64, 216, 4, 35, 3, 96, 214, 248, 100, 54, 79, 244, 122, 112, 219, 178,
-        181, 251, 243, 245, 104, 67, 112, 189, 112, 181, 4, 70, 14, 70, 6, 240,
-        42, 216, 0, 33, 5, 70, 32, 70, 6, 240, 115, 219, 49, 70, 2, 70, 32,
-        70, 255, 247, 204, 255, 41, 70, 6, 70, 32, 70, 6, 240, 105, 219, 48,
-        70, 112, 189, 255, 247, 232, 191, 55, 181, 4, 70, 255, 247, 181, 255,
-        79, 244, 0, 97, 106, 70, 1, 171, 5, 70, 32, 70, 6, 240, 103, 219, 0,
-        34, 19, 70, 32, 70, 4, 33, 255, 247, 211, 250, 0, 244, 127, 64, 3, 10,
-        0, 185, 27, 96, 181, 251, 243, 245, 32, 70, 157, 232, 6, 0, 6, 240,
-        147, 218, 40, 70, 62, 189, 112, 181, 4, 70, 14, 70, 5, 240, 242, 223,
-        0, 33, 5, 70, 32, 70, 6, 240, 59, 219, 49, 70, 2, 70, 32, 70, 255, 247,
-        76, 252, 32, 70, 254, 247, 43, 255, 99, 105, 6, 70, 34, 43, 32, 70,
-        10, 221, 227, 105, 90, 6, 7, 213, 64, 246, 39, 1, 0, 34, 6, 240, 142,
-        216, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242, 12, 98, 5, 240, 214, 223,
-        243, 120, 1, 33, 17, 250, 3, 243, 2, 104, 41, 70, 26, 66, 12, 191, 0,
-        38, 1, 38, 32, 70, 6, 240, 17, 219, 48, 70, 112, 189, 112, 71, 1, 32,
-        112, 71, 112, 71, 45, 233, 255, 71, 131, 110, 0, 34, 4, 70, 13, 70,
-        2, 146, 3, 146, 99, 177, 208, 248, 204, 16, 0, 235, 129, 1, 209, 248,
-        212, 0, 33, 110, 136, 66, 5, 209, 96, 110, 152, 71, 129, 70, 2, 224,
-        153, 70, 0, 224, 145, 70, 32, 70, 5, 240, 161, 223, 0, 33, 130, 70,
-        32, 70, 6, 240, 234, 218, 2, 169, 128, 70, 3, 170, 32, 70, 254, 247,
-        170, 255, 2, 159, 0, 38, 3, 150, 247, 177, 59, 70, 32, 70, 41, 70, 66,
-        70, 0, 150, 254, 247, 235, 254, 99, 105, 56, 67, 34, 43, 2, 144, 32,
-        70, 10, 221, 227, 105, 89, 6, 7, 213, 64, 246, 39, 1, 50, 70, 6, 240,
-        51, 216, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 195, 98, 5, 240, 123,
-        223, 2, 155, 3, 96, 3, 158, 254, 177, 0, 39, 51, 70, 32, 70, 41, 70,
-        66, 70, 0, 151, 254, 247, 201, 254, 99, 105, 48, 67, 34, 43, 3, 144,
-        32, 70, 10, 221, 227, 105, 90, 6, 7, 213, 64, 246, 39, 1, 58, 70, 6,
-        240, 17, 216, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242, 28, 98, 5, 240,
-        89, 223, 3, 155, 3, 96, 41, 70, 66, 70, 32, 70, 255, 247, 176, 251,
-        32, 70, 81, 70, 6, 240, 150, 218, 227, 110, 91, 177, 212, 248, 204,
-        32, 4, 235, 130, 2, 210, 248, 212, 16, 34, 110, 145, 66, 2, 209, 96,
-        110, 73, 70, 152, 71, 189, 232, 255, 135, 0, 33, 249, 247, 187, 189,
-        249, 247, 65, 190, 0, 32, 112, 71, 16, 181, 4, 70, 8, 70, 17, 70, 26,
-        70, 250, 247, 250, 248, 16, 177, 35, 104, 1, 51, 35, 96, 16, 189, 0,
-        0, 16, 181, 0, 34, 12, 70, 255, 243, 153, 247, 160, 185, 10, 75, 27,
-        104, 139, 177, 26, 120, 122, 177, 218, 137, 148, 66, 12, 216, 24, 70,
-        253, 247, 63, 254, 32, 177, 5, 75, 26, 104, 1, 50, 26, 96, 16, 189,
-        4, 75, 26, 104, 1, 50, 26, 96, 16, 189, 116, 7, 0, 0, 184, 45, 4, 0,
-        188, 45, 4, 0, 56, 181, 4, 70, 13, 70, 34, 177, 131, 104, 19, 177, 192,
-        104, 0, 34, 152, 71, 9, 75, 26, 104, 43, 70, 7, 224, 217, 120, 17, 185,
-        33, 104, 1, 57, 33, 96, 155, 138, 82, 248, 35, 48, 0, 43, 245, 209,
-        40, 70, 189, 232, 56, 64, 250, 247, 234, 185, 32, 7, 0, 0, 16, 181,
-        4, 70, 8, 70, 250, 247, 59, 249, 16, 177, 35, 104, 1, 51, 35, 96, 16,
-        189, 8, 74, 3, 70, 16, 181, 16, 104, 10, 70, 7, 224, 212, 120, 20, 185,
-        28, 104, 1, 52, 28, 96, 146, 138, 80, 248, 34, 32, 0, 42, 245, 209,
-        8, 70, 16, 189, 32, 7, 0, 0, 8, 74, 3, 70, 16, 181, 16, 104, 10, 70,
-        7, 224, 212, 120, 20, 185, 28, 104, 1, 60, 28, 96, 146, 138, 80, 248,
-        34, 32, 0, 42, 245, 209, 8, 70, 16, 189, 32, 7, 0, 0, 3, 126, 43, 177,
-        64, 105, 208, 241, 1, 0, 56, 191, 0, 32, 112, 71, 1, 32, 112, 71, 112,
-        181, 3, 105, 205, 28, 37, 240, 3, 5, 157, 66, 4, 70, 14, 70, 18, 216,
-        0, 104, 6, 240, 222, 216, 225, 104, 50, 70, 0, 35, 255, 247, 102, 255,
-        80, 177, 227, 104, 91, 25, 227, 96, 35, 105, 93, 27, 99, 105, 37, 97,
-        1, 51, 99, 97, 112, 189, 0, 32, 112, 189, 75, 104, 65, 104, 195, 243,
-        20, 3, 139, 66, 9, 211, 129, 104, 139, 66, 6, 210, 67, 105, 18, 177,
-        1, 51, 67, 97, 112, 71, 1, 59, 67, 97, 112, 71, 0, 0, 45, 233, 248,
-        79, 26, 75, 7, 70, 28, 104, 136, 70, 30, 224, 229, 104, 163, 104, 186,
-        70, 5, 235, 3, 11, 0, 38, 14, 224, 40, 70, 251, 243, 125, 241, 0, 241,
-        1, 9, 78, 68, 176, 69, 24, 219, 80, 70, 41, 70, 74, 70, 249, 247, 103,
-        252, 77, 68, 202, 68, 93, 69, 2, 210, 43, 120, 0, 43, 235, 209, 36,
-        104, 198, 235, 8, 8, 191, 25, 0, 44, 222, 209, 184, 241, 0, 15, 7, 221,
-        60, 112, 32, 70, 189, 232, 248, 143, 111, 240, 13, 0, 189, 232, 248,
-        143, 111, 240, 13, 0, 189, 232, 248, 143, 0, 191, 0, 8, 0, 0, 45, 233,
-        248, 79, 12, 70, 6, 240, 123, 216, 65, 242, 1, 0, 229, 104, 255, 247,
-        252, 254, 0, 40, 124, 208, 0, 241, 1, 12, 6, 70, 32, 224, 1, 50, 25,
-        112, 210, 178, 67, 70, 57, 120, 61, 70, 1, 55, 193, 177, 61, 41, 3,
-        241, 1, 8, 243, 209, 50, 112, 41, 70, 70, 70, 0, 34, 3, 224, 1, 50,
-        55, 112, 210, 178, 102, 70, 17, 248, 1, 127, 195, 235, 5, 8, 176, 68,
-        6, 241, 1, 12, 0, 47, 242, 209, 26, 112, 8, 241, 1, 5, 231, 104, 163,
-        104, 251, 24, 157, 66, 5, 210, 43, 120, 27, 177, 47, 70, 99, 70, 0,
-        34, 215, 231, 37, 70, 1, 35, 226, 104, 131, 70, 186, 26, 42, 130, 59,
-        224, 89, 70, 17, 248, 1, 43, 154, 66, 2, 209, 79, 240, 0, 12, 10, 224,
-        16, 43, 42, 209, 15, 42, 248, 220, 39, 224, 27, 248, 1, 143, 7, 248,
-        12, 128, 12, 241, 1, 12, 98, 69, 247, 209, 1, 235, 2, 8, 137, 92, 7,
-        235, 2, 12, 79, 240, 61, 9, 7, 248, 2, 144, 8, 241, 1, 11, 12, 241,
-        1, 7, 1, 241, 1, 9, 0, 34, 3, 224, 24, 248, 2, 160, 12, 248, 2, 160,
-        1, 50, 74, 69, 248, 209, 122, 24, 79, 240, 0, 12, 7, 248, 1, 192, 139,
-        68, 87, 28, 6, 224, 17, 248, 2, 176, 1, 235, 2, 12, 11, 241, 1, 11,
-        227, 68, 179, 69, 193, 211, 1, 51, 2, 53, 17, 43, 184, 209, 189, 232,
-        248, 79, 255, 247, 128, 190, 189, 232, 248, 143, 1, 240, 159, 158, 255,
-        247, 55, 191, 0, 0, 1, 75, 3, 235, 192, 0, 112, 71, 196, 45, 4, 0, 1,
-        75, 3, 235, 192, 0, 112, 71, 232, 45, 4, 0, 45, 233, 248, 67, 4, 70,
-        13, 70, 22, 70, 153, 70, 5, 240, 154, 221, 167, 110, 128, 70, 111, 177,
-        212, 248, 204, 48, 4, 235, 131, 3, 211, 248, 212, 32, 35, 110, 154,
-        66, 3, 209, 96, 110, 184, 71, 7, 70, 0, 224, 0, 39, 32, 70, 0, 33, 6,
-        240, 211, 216, 29, 185, 0, 245, 160, 96, 4, 48, 1, 224, 0, 245, 161,
-        96, 5, 104, 62, 177, 3, 104, 35, 234, 6, 6, 6, 96, 3, 104, 67, 234,
-        9, 3, 3, 96, 32, 70, 65, 70, 6, 240, 190, 216, 227, 110, 91, 177, 212,
-        248, 204, 32, 4, 235, 130, 2, 210, 248, 212, 16, 34, 110, 145, 66, 2,
-        209, 96, 110, 57, 70, 152, 71, 40, 70, 189, 232, 248, 131, 16, 181,
-        12, 70, 19, 70, 4, 33, 34, 70, 189, 232, 16, 64, 254, 247, 184, 191,
-        16, 181, 12, 70, 19, 70, 2, 33, 34, 70, 189, 232, 16, 64, 254, 247,
-        175, 191, 16, 181, 12, 70, 19, 70, 6, 33, 34, 70, 189, 232, 16, 64,
-        254, 247, 166, 191, 45, 233, 240, 65, 133, 110, 4, 70, 15, 70, 22, 70,
-        109, 177, 208, 248, 204, 48, 0, 235, 131, 3, 211, 248, 212, 32, 3, 110,
-        154, 66, 3, 209, 64, 110, 168, 71, 5, 70, 0, 224, 0, 37, 32, 70, 5,
-        240, 44, 221, 128, 70, 71, 185, 32, 70, 57, 70, 58, 70, 59, 70, 255,
-        247, 130, 255, 0, 240, 1, 6, 21, 224, 0, 46, 79, 240, 1, 2, 12, 191,
-        51, 70, 19, 70, 20, 191, 0, 39, 79, 244, 128, 39, 79, 240, 0, 1, 32,
-        70, 255, 247, 112, 255, 32, 70, 2, 33, 79, 244, 128, 34, 59, 70, 254,
-        247, 109, 255, 32, 70, 65, 70, 6, 240, 85, 216, 227, 110, 91, 177, 212,
-        248, 204, 32, 4, 235, 130, 2, 210, 248, 212, 16, 34, 110, 145, 66, 2,
-        209, 96, 110, 41, 70, 152, 71, 48, 70, 189, 232, 240, 129, 112, 71,
-        0, 33, 8, 181, 10, 70, 11, 70, 255, 247, 77, 255, 0, 240, 1, 0, 8, 189,
-        1, 32, 112, 71, 112, 181, 6, 70, 255, 247, 250, 255, 216, 177, 0, 37,
-        40, 70, 255, 247, 57, 255, 3, 104, 19, 177, 64, 104, 152, 71, 40, 177,
-        1, 53, 237, 178, 4, 45, 243, 209, 1, 36, 0, 224, 4, 70, 48, 70, 255,
-        247, 221, 255, 160, 66, 6, 208, 48, 70, 1, 33, 34, 70, 189, 232, 112,
-        64, 255, 247, 133, 191, 112, 189, 3, 75, 24, 112, 24, 177, 3, 75, 26,
-        104, 1, 50, 26, 96, 112, 71, 228, 45, 4, 0, 8, 46, 4, 0, 16, 181, 4,
-        70, 0, 32, 255, 247, 239, 255, 32, 70, 161, 109, 255, 247, 249, 249,
-        32, 177, 1, 32, 189, 232, 16, 64, 255, 247, 229, 191, 16, 189, 1, 75,
-        24, 120, 112, 71, 0, 191, 228, 45, 4, 0, 248, 181, 4, 70, 255, 247,
-        182, 255, 0, 40, 55, 208, 32, 70, 255, 247, 225, 255, 165, 110, 109,
-        177, 212, 248, 204, 48, 4, 235, 131, 3, 211, 248, 212, 32, 35, 110,
-        154, 66, 3, 209, 96, 110, 168, 71, 5, 70, 0, 224, 0, 37, 32, 70, 5,
-        240, 138, 220, 7, 70, 255, 247, 219, 255, 88, 177, 0, 38, 48, 70, 255,
-        247, 212, 254, 3, 104, 11, 177, 64, 104, 152, 71, 1, 54, 246, 178, 4,
-        46, 244, 209, 32, 70, 57, 70, 5, 240, 196, 223, 227, 110, 91, 177, 212,
-        248, 204, 32, 4, 235, 130, 2, 210, 248, 212, 16, 34, 110, 145, 66, 2,
-        209, 96, 110, 41, 70, 152, 71, 248, 189, 0, 0, 11, 75, 16, 181, 26,
-        104, 28, 70, 144, 66, 4, 209, 90, 104, 145, 66, 1, 209, 24, 70, 16,
-        189, 99, 105, 5, 74, 152, 66, 6, 209, 144, 105, 20, 50, 129, 66, 12,
-        191, 16, 70, 0, 32, 16, 189, 0, 32, 16, 189, 100, 49, 5, 0, 16, 181,
-        9, 2, 0, 245, 64, 116, 138, 24, 161, 92, 8, 70, 59, 177, 157, 248, 8,
-        0, 33, 234, 3, 1, 3, 64, 11, 67, 163, 84, 160, 92, 16, 189, 79, 244,
-        64, 34, 56, 181, 64, 246, 12, 65, 19, 70, 5, 70, 5, 240, 60, 221, 0,
-        34, 19, 70, 64, 246, 12, 65, 40, 70, 5, 240, 53, 221, 0, 34, 19, 70,
-        64, 246, 12, 65, 40, 70, 5, 240, 46, 221, 64, 246, 3, 2, 40, 70, 64,
-        246, 12, 65, 19, 70, 5, 240, 38, 221, 10, 36, 0, 34, 40, 70, 64, 246,
-        12, 65, 19, 70, 5, 240, 30, 221, 1, 60, 246, 209, 35, 70, 64, 246, 12,
-        65, 64, 246, 3, 2, 40, 70, 5, 240, 20, 221, 34, 70, 35, 70, 64, 246,
-        12, 65, 40, 70, 5, 240, 13, 221, 34, 70, 35, 70, 64, 246, 12, 65, 40,
-        70, 5, 240, 6, 221, 35, 70, 40, 70, 64, 246, 12, 65, 79, 244, 64, 34,
-        5, 240, 254, 220, 79, 244, 78, 100, 33, 70, 0, 35, 40, 70, 79, 240,
-        255, 50, 4, 52, 5, 240, 244, 220, 180, 245, 86, 111, 244, 209, 56, 189,
-        115, 181, 4, 70, 255, 247, 167, 255, 20, 35, 116, 34, 32, 70, 64, 246,
-        12, 65, 5, 240, 229, 220, 32, 70, 1, 33, 4, 34, 5, 240, 100, 221, 32,
-        70, 2, 33, 4, 34, 5, 240, 95, 221, 1, 37, 0, 33, 32, 70, 64, 246, 28,
-        98, 79, 240, 255, 51, 0, 149, 5, 240, 11, 221, 17, 35, 0, 147, 0, 33,
-        32, 70, 64, 246, 24, 98, 79, 240, 255, 51, 5, 240, 1, 221, 65, 242,
-        2, 19, 0, 147, 0, 33, 32, 70, 64, 246, 68, 66, 79, 240, 255, 51, 5,
-        240, 246, 220, 243, 35, 32, 70, 79, 244, 94, 97, 79, 240, 255, 50, 5,
-        240, 180, 220, 0, 35, 32, 70, 64, 246, 248, 81, 79, 240, 255, 50, 5,
-        240, 172, 220, 0, 35, 32, 70, 64, 246, 228, 81, 79, 240, 255, 50, 5,
-        240, 164, 220, 8, 35, 32, 70, 64, 246, 236, 81, 79, 240, 255, 50, 5,
-        240, 156, 220, 0, 35, 32, 70, 64, 246, 232, 81, 79, 240, 255, 50, 5,
-        240, 148, 220, 219, 35, 32, 70, 79, 244, 93, 97, 79, 240, 255, 50, 5,
-        240, 140, 220, 12, 34, 0, 35, 32, 70, 64, 246, 84, 65, 5, 240, 133,
-        220, 40, 75, 0, 33, 0, 147, 32, 70, 64, 246, 188, 82, 79, 240, 255,
-        51, 5, 240, 181, 220, 36, 75, 41, 70, 0, 147, 32, 70, 64, 246, 188,
-        82, 79, 240, 255, 51, 5, 240, 171, 220, 32, 75, 2, 33, 0, 147, 32, 70,
-        64, 246, 188, 82, 79, 240, 255, 51, 5, 240, 161, 220, 42, 70, 43, 70,
-        32, 70, 64, 246, 36, 97, 5, 240, 96, 220, 64, 246, 255, 115, 0, 147,
-        0, 33, 22, 78, 32, 70, 64, 246, 180, 82, 79, 240, 255, 51, 5, 240, 142,
-        220, 0, 33, 32, 70, 64, 246, 184, 82, 79, 240, 255, 51, 0, 150, 5, 240,
-        133, 220, 75, 246, 152, 35, 0, 147, 41, 70, 32, 70, 64, 246, 184, 82,
-        79, 240, 255, 51, 5, 240, 122, 220, 32, 70, 79, 244, 92, 97, 79, 240,
-        255, 50, 51, 70, 2, 176, 189, 232, 112, 64, 5, 240, 53, 156, 0, 191,
-        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 16, 50, 84, 118, 56,
-        181, 20, 70, 66, 105, 3, 70, 10, 42, 133, 105, 5, 217, 15, 42, 5, 208,
-        5, 240, 131, 218, 1, 35, 16, 224, 2, 42, 12, 217, 24, 70, 5, 240, 216,
-        218, 212, 248, 164, 48, 35, 240, 255, 3, 67, 240, 2, 3, 196, 248, 164,
-        48, 2, 35, 1, 224, 7, 72, 48, 35, 162, 104, 210, 7, 8, 212, 5, 240,
-        24, 5, 8, 45, 2, 209, 176, 251, 243, 240, 56, 189, 79, 244, 225, 16,
-        56, 189, 0, 191, 0, 198, 62, 5, 56, 181, 21, 70, 12, 70, 129, 177, 0,
-        42, 17, 221, 5, 240, 236, 218, 41, 70, 3, 70, 8, 74, 32, 70, 250, 243,
-        174, 245, 3, 30, 79, 240, 0, 0, 1, 219, 171, 66, 5, 219, 32, 112, 79,
-        240, 255, 48, 56, 189, 79, 240, 255, 48, 56, 189, 0, 191, 220, 210,
-        3, 0, 55, 181, 21, 70, 64, 246, 60, 98, 145, 66, 12, 70, 6, 216, 0,
-        147, 0, 33, 34, 70, 43, 70, 5, 240, 205, 218, 0, 224, 0, 32, 62, 189,
-        79, 240, 255, 48, 112, 71, 0, 0, 19, 181, 12, 70, 2, 185, 73, 177, 8,
-        73, 19, 177, 11, 104, 28, 64, 3, 224, 11, 104, 28, 67, 36, 234, 3, 4,
-        34, 64, 0, 146, 0, 33, 112, 34, 35, 70, 5, 240, 178, 218, 28, 189, 0,
-        191, 8, 8, 0, 0, 19, 181, 20, 70, 66, 105, 10, 42, 15, 221, 41, 177,
-        1, 41, 5, 208, 2, 41, 10, 209, 132, 34, 2, 224, 120, 34, 0, 224, 124,
-        34, 0, 147, 0, 33, 35, 70, 5, 240, 154, 218, 1, 224, 79, 240, 255, 48,
-        28, 189, 45, 233, 240, 65, 4, 70, 5, 240, 77, 220, 0, 33, 10, 70, 11,
-        70, 7, 70, 32, 70, 255, 247, 196, 255, 0, 33, 10, 70, 11, 70, 6, 70,
-        32, 70, 255, 247, 213, 255, 0, 34, 5, 70, 2, 33, 32, 70, 19, 70, 255,
-        247, 206, 255, 212, 248, 120, 128, 21, 224, 216, 248, 8, 48, 131, 177,
-        152, 248, 4, 32, 0, 42, 216, 248, 12, 32, 12, 191, 40, 70, 56, 70, 0,
-        234, 2, 0, 18, 208, 50, 64, 144, 66, 2, 208, 216, 248, 0, 16, 152, 71,
-        216, 248, 16, 128, 184, 241, 0, 15, 230, 209, 32, 70, 65, 70, 42, 70,
-        43, 70, 189, 232, 240, 65, 255, 247, 170, 191, 0, 40, 237, 209, 239,
-        231, 79, 244, 128, 48, 112, 71, 192, 105, 0, 240, 8, 0, 112, 71, 115,
-        181, 4, 70, 13, 70, 5, 240, 243, 220, 24, 185, 32, 70, 255, 247, 243,
-        255, 72, 179, 0, 45, 20, 191, 79, 244, 128, 115, 0, 35, 0, 147, 32,
-        70, 0, 33, 79, 244, 240, 114, 79, 244, 128, 115, 5, 240, 54, 218, 213,
-        177, 64, 242, 221, 86, 2, 224, 10, 32, 254, 243, 251, 247, 0, 37, 43,
-        70, 32, 70, 41, 70, 79, 244, 240, 114, 0, 149, 5, 240, 38, 218, 195,
-        1, 1, 212, 1, 62, 239, 209, 0, 33, 32, 70, 79, 244, 240, 114, 11, 70,
-        0, 149, 5, 240, 26, 218, 124, 189, 56, 181, 0, 37, 29, 112, 209, 248,
-        204, 48, 79, 244, 0, 97, 19, 96, 42, 70, 4, 70, 5, 240, 73, 221, 5,
-        70, 56, 177, 208, 248, 224, 49, 218, 1, 3, 212, 32, 70, 1, 33, 255,
-        247, 181, 255, 40, 70, 56, 189, 0, 0, 115, 181, 131, 105, 0, 37, 154,
-        0, 4, 70, 173, 248, 6, 80, 72, 213, 79, 244, 0, 97, 42, 70, 208, 248,
-        204, 96, 5, 240, 45, 221, 0, 40, 63, 208, 99, 105, 34, 43, 216, 191,
-        192, 248, 104, 81, 192, 248, 100, 81, 192, 248, 96, 81, 99, 105, 34,
-        43, 3, 220, 28, 75, 192, 248, 68, 49, 5, 224, 1, 35, 192, 248, 72, 49,
-        255, 35, 192, 248, 76, 49, 99, 105, 34, 43, 79, 240, 0, 3, 6, 220, 192,
-        248, 128, 49, 192, 248, 124, 49, 192, 248, 120, 49, 3, 224, 192, 248,
-        116, 49, 192, 248, 112, 49, 49, 70, 32, 70, 5, 240, 15, 221, 32, 70,
-        13, 241, 6, 1, 5, 240, 64, 223, 144, 185, 189, 248, 6, 0, 128, 177,
-        99, 105, 32, 70, 34, 43, 217, 191, 79, 244, 128, 33, 10, 70, 6, 73,
-        64, 34, 0, 35, 5, 240, 18, 218, 2, 224, 79, 240, 255, 48, 0, 224, 0,
-        32, 124, 189, 0, 0, 251, 191, 64, 0, 85, 85, 115, 181, 4, 70, 5, 240,
-        76, 220, 24, 185, 32, 70, 255, 247, 76, 255, 96, 179, 32, 70, 33, 70,
-        106, 70, 13, 241, 7, 3, 255, 247, 125, 255, 6, 70, 192, 177, 64, 242,
-        45, 21, 2, 224, 10, 32, 254, 243, 90, 247, 214, 248, 212, 49, 24, 7,
-        6, 212, 1, 61, 246, 209, 3, 224, 10, 32, 254, 243, 80, 247, 1, 224,
-        64, 242, 45, 21, 214, 248, 212, 49, 89, 7, 1, 213, 1, 61, 243, 209,
-        32, 70, 0, 33, 255, 247, 41, 255, 157, 248, 7, 48, 27, 185, 32, 70,
-        0, 153, 5, 240, 186, 220, 124, 189, 16, 181, 4, 70, 255, 243, 219, 240,
-        32, 70, 255, 247, 194, 255, 1, 32, 16, 189, 240, 181, 133, 176, 4, 70,
-        13, 70, 23, 70, 255, 247, 13, 255, 0, 40, 0, 240, 148, 128, 166, 110,
-        110, 177, 212, 248, 204, 48, 4, 235, 131, 3, 211, 248, 212, 32, 35,
-        110, 154, 66, 3, 209, 96, 110, 176, 71, 6, 70, 0, 224, 0, 38, 32, 70,
-        33, 70, 2, 170, 13, 241, 15, 3, 255, 247, 44, 255, 0, 40, 99, 208, 8,
-        47, 97, 216, 223, 232, 7, 240, 5, 20, 28, 39, 53, 64, 74, 85, 13, 0,
-        0, 149, 32, 70, 0, 33, 79, 244, 156, 114, 79, 240, 255, 51, 78, 224,
-        0, 33, 0, 145, 32, 70, 79, 244, 156, 114, 11, 70, 71, 224, 79, 240,
-        255, 51, 0, 147, 32, 70, 0, 33, 79, 244, 154, 114, 63, 224, 0, 33, 32,
-        70, 79, 244, 236, 114, 11, 70, 0, 145, 5, 240, 27, 217, 0, 240, 1, 5,
-        57, 224, 37, 177, 32, 35, 0, 147, 32, 70, 0, 33, 3, 224, 2, 35, 0, 147,
-        32, 70, 41, 70, 79, 244, 232, 114, 34, 35, 38, 224, 0, 33, 32, 70, 79,
-        244, 154, 114, 11, 70, 0, 145, 5, 240, 2, 217, 192, 243, 192, 37, 32,
-        224, 0, 33, 32, 70, 79, 244, 224, 114, 11, 70, 0, 145, 5, 240, 247,
-        216, 197, 178, 22, 224, 0, 33, 32, 70, 79, 244, 154, 114, 11, 70, 0,
-        145, 5, 240, 237, 216, 192, 243, 64, 37, 11, 224, 237, 178, 0, 149,
-        32, 70, 0, 33, 79, 244, 224, 114, 255, 35, 5, 240, 225, 216, 5, 70,
-        0, 224, 1, 37, 157, 248, 15, 48, 27, 185, 32, 70, 2, 153, 5, 240, 33,
-        220, 227, 110, 107, 177, 212, 248, 204, 32, 4, 235, 130, 2, 210, 248,
-        212, 16, 34, 110, 145, 66, 4, 209, 96, 110, 49, 70, 152, 71, 0, 224,
-        5, 70, 40, 70, 5, 176, 240, 189, 67, 105, 45, 233, 247, 67, 34, 43,
-        5, 70, 14, 70, 64, 243, 153, 128, 25, 185, 255, 247, 103, 254, 64, 185,
-        145, 224, 5, 240, 95, 219, 0, 40, 0, 240, 141, 128, 7, 46, 0, 242, 140,
-        128, 40, 70, 79, 244, 0, 97, 0, 34, 213, 248, 204, 144, 5, 240, 227,
-        219, 4, 70, 0, 40, 0, 240, 129, 128, 3, 46, 3, 208, 40, 70, 1, 33, 255,
-        247, 79, 254, 212, 248, 48, 49, 35, 240, 4, 3, 196, 248, 48, 49, 1,
-        35, 158, 66, 196, 248, 48, 49, 4, 217, 4, 46, 12, 191, 13, 35, 9, 35,
-        0, 224, 13, 35, 3, 46, 196, 248, 48, 49, 79, 208, 212, 248, 48, 49,
-        1, 46, 35, 240, 1, 3, 196, 248, 48, 49, 1, 217, 4, 46, 69, 209, 79,
-        240, 255, 8, 0, 33, 79, 244, 226, 114, 67, 70, 40, 70, 205, 248, 0,
-        128, 5, 240, 115, 216, 40, 70, 4, 240, 216, 223, 79, 244, 225, 49, 255,
-        247, 2, 252, 7, 70, 136, 177, 131, 104, 0, 33, 0, 147, 79, 244, 226,
-        114, 67, 70, 40, 70, 5, 240, 97, 216, 59, 105, 40, 70, 0, 147, 0, 33,
-        79, 244, 238, 114, 67, 70, 5, 240, 88, 216, 1, 35, 0, 147, 0, 33, 255,
-        35, 79, 244, 198, 114, 40, 70, 5, 240, 79, 216, 24, 73, 42, 70, 40,
-        70, 64, 240, 128, 252, 40, 35, 0, 147, 0, 33, 79, 244, 230, 114, 255,
-        35, 40, 70, 5, 240, 65, 216, 129, 35, 0, 147, 40, 70, 0, 33, 79, 244,
-        232, 114, 255, 35, 5, 240, 56, 216, 212, 248, 48, 49, 40, 70, 35, 240,
-        112, 3, 67, 234, 6, 22, 196, 248, 48, 97, 212, 248, 48, 49, 73, 70,
-        35, 240, 8, 3, 196, 248, 48, 49, 5, 240, 112, 219, 2, 224, 4, 70, 0,
-        224, 0, 36, 32, 70, 189, 232, 254, 131, 0, 191, 123, 147, 0, 0, 195,
-        105, 16, 181, 91, 7, 4, 70, 19, 213, 255, 247, 214, 251, 79, 244, 127,
-        66, 19, 70, 64, 246, 116, 81, 32, 70, 5, 240, 19, 217, 32, 70, 255,
-        247, 32, 252, 32, 70, 64, 246, 84, 65, 16, 34, 0, 35, 5, 240, 9, 217,
-        0, 32, 16, 189, 112, 181, 133, 110, 4, 70, 109, 177, 208, 248, 204,
-        48, 0, 235, 131, 3, 211, 248, 212, 32, 3, 110, 154, 66, 3, 209, 64,
-        110, 168, 71, 5, 70, 0, 224, 0, 37, 32, 70, 161, 109, 254, 247, 191,
-        251, 227, 110, 6, 70, 91, 177, 212, 248, 204, 32, 4, 235, 130, 2, 210,
-        248, 212, 16, 34, 110, 145, 66, 2, 209, 96, 110, 41, 70, 152, 71, 48,
-        70, 112, 189, 56, 181, 4, 70, 4, 240, 210, 223, 79, 244, 0, 97, 5, 70,
-        0, 34, 32, 70, 5, 240, 11, 219, 0, 35, 192, 248, 64, 60, 208, 248, 0,
-        62, 41, 70, 35, 240, 127, 67, 35, 244, 112, 3, 67, 240, 136, 83, 67,
-        244, 128, 19, 192, 248, 0, 62, 1, 35, 192, 248, 64, 60, 79, 240, 17,
-        51, 192, 248, 0, 62, 131, 109, 3, 240, 31, 3, 131, 101, 195, 109, 3,
-        240, 31, 3, 195, 101, 131, 110, 3, 240, 31, 3, 131, 102, 195, 110, 3,
-        240, 31, 3, 195, 102, 32, 70, 189, 232, 56, 64, 5, 240, 237, 154, 0,
-        0, 45, 233, 243, 65, 7, 70, 12, 70, 5, 240, 218, 217, 0, 33, 128, 70,
-        56, 70, 5, 240, 225, 218, 186, 105, 35, 120, 2, 240, 3, 2, 154, 66,
-        5, 70, 1, 216, 67, 72, 15, 224, 212, 248, 1, 96, 14, 185, 66, 72, 10,
-        224, 56, 70, 65, 70, 42, 70, 255, 247, 94, 252, 7, 70, 40, 177, 176,
-        235, 6, 31, 5, 210, 61, 72, 250, 243, 0, 242, 111, 240, 25, 6, 108,
-        224, 1, 34, 79, 240, 254, 8, 19, 70, 33, 120, 40, 70, 205, 248, 0, 128,
-        255, 247, 31, 251, 247, 35, 4, 34, 33, 120, 0, 147, 40, 70, 8, 35, 255,
-        247, 23, 251, 2, 34, 1, 35, 33, 120, 40, 70, 205, 248, 0, 128, 255,
-        247, 15, 251, 79, 240, 128, 8, 6, 35, 2, 34, 33, 120, 40, 70, 0, 147,
-        255, 247, 6, 251, 3, 34, 33, 120, 40, 70, 67, 70, 205, 248, 0, 128,
-        255, 247, 254, 250, 2, 6, 31, 213, 115, 8, 3, 235, 23, 23, 183, 251,
-        246, 246, 243, 178, 33, 120, 0, 147, 0, 34, 255, 35, 40, 70, 54, 10,
-        255, 247, 238, 250, 246, 178, 33, 120, 1, 34, 255, 35, 40, 70, 0, 150,
-        255, 247, 230, 250, 127, 35, 0, 147, 33, 120, 40, 70, 3, 34, 67, 70,
-        255, 247, 222, 250, 0, 38, 1, 224, 79, 240, 255, 54, 1, 39, 33, 120,
-        2, 34, 59, 70, 40, 70, 0, 151, 255, 247, 210, 250, 33, 120, 58, 70,
-        59, 70, 40, 70, 0, 151, 255, 247, 203, 250, 8, 35, 33, 120, 40, 70,
-        4, 34, 0, 147, 255, 247, 196, 250, 38, 185, 65, 242, 124, 80, 254, 243,
-        219, 244, 1, 224, 79, 240, 255, 54, 48, 70, 189, 232, 252, 129, 0, 191,
-        227, 210, 3, 0, 2, 211, 3, 0, 30, 211, 3, 0, 45, 233, 247, 79, 11, 120,
-        0, 36, 19, 112, 84, 112, 148, 112, 212, 112, 20, 113, 21, 70, 128, 70,
-        15, 70, 5, 240, 50, 217, 33, 70, 129, 70, 64, 70, 5, 240, 57, 218, 216,
-        248, 24, 32, 43, 120, 2, 240, 3, 2, 154, 66, 6, 70, 5, 216, 32, 72,
-        250, 243, 104, 241, 111, 240, 25, 0, 55, 224, 73, 70, 64, 70, 50, 70,
-        255, 247, 182, 251, 129, 70, 0, 40, 45, 208, 79, 240, 128, 8, 57, 120,
-        3, 34, 67, 70, 48, 70, 205, 248, 0, 128, 255, 247, 127, 250, 57, 120,
-        34, 70, 35, 70, 48, 70, 0, 148, 255, 247, 120, 250, 57, 120, 131, 70,
-        1, 34, 35, 70, 48, 70, 0, 148, 255, 247, 112, 250, 130, 70, 79, 234,
-        10, 106, 127, 35, 75, 234, 26, 75, 57, 120, 48, 70, 0, 147, 3, 34, 67,
-        70, 79, 234, 11, 27, 255, 247, 97, 250, 185, 251, 251, 249, 197, 248,
-        1, 144, 32, 70, 1, 224, 79, 240, 255, 48, 189, 232, 254, 143, 0, 191,
-        227, 210, 3, 0, 112, 71, 16, 181, 4, 70, 255, 247, 166, 249, 144, 177,
-        0, 34, 8, 33, 32, 70, 19, 70, 254, 247, 98, 249, 129, 7, 10, 213, 32,
-        70, 8, 33, 2, 34, 0, 35, 254, 247, 90, 249, 32, 70, 189, 232, 16, 64,
-        254, 247, 139, 185, 16, 189, 3, 42, 48, 181, 36, 217, 76, 136, 4, 58,
-        148, 66, 32, 216, 10, 120, 26, 112, 10, 120, 1, 42, 2, 208, 2, 42, 28,
-        209, 19, 224, 12, 121, 0, 235, 132, 5, 109, 104, 0, 44, 12, 191, 34,
-        70, 111, 240, 1, 2, 165, 177, 28, 113, 9, 121, 0, 235, 129, 0, 65, 104,
-        9, 127, 89, 113, 2, 33, 89, 128, 12, 224, 1, 34, 26, 113, 90, 128, 0,
-        34, 7, 224, 111, 240, 13, 2, 4, 224, 111, 240, 22, 2, 1, 224, 111, 240,
-        1, 2, 16, 70, 48, 189, 65, 242, 198, 3, 153, 66, 5, 217, 161, 245, 134,
-        83, 6, 59, 131, 97, 1, 34, 1, 224, 0, 34, 130, 97, 64, 104, 26, 185,
-        79, 244, 122, 115, 89, 67, 0, 224, 1, 73, 254, 243, 169, 176, 0, 191,
-        112, 133, 65, 0, 0, 235, 129, 3, 112, 181, 93, 104, 4, 70, 14, 70, 165,
-        177, 104, 104, 32, 177, 248, 247, 91, 254, 104, 104, 254, 243, 24, 241,
-        168, 104, 32, 177, 248, 247, 84, 254, 168, 104, 254, 243, 17, 241, 40,
-        70, 254, 247, 239, 254, 4, 235, 134, 6, 0, 35, 115, 96, 99, 104, 27,
-        185, 34, 104, 18, 104, 130, 248, 105, 49, 112, 189, 0, 0, 248, 181,
-        11, 120, 6, 70, 0, 235, 131, 3, 92, 104, 13, 70, 116, 185, 36, 32, 254,
-        247, 213, 254, 4, 70, 0, 40, 89, 208, 0, 33, 36, 34, 250, 243, 104,
-        240, 38, 96, 43, 120, 6, 235, 131, 3, 92, 96, 34, 127, 233, 104, 79,
-        244, 122, 115, 90, 67, 75, 67, 154, 66, 66, 216, 43, 105, 0, 43, 66,
-        208, 97, 104, 41, 185, 32, 70, 36, 74, 11, 70, 254, 243, 33, 241, 96,
-        96, 169, 104, 235, 104, 32, 70, 153, 66, 1, 216, 1, 33, 0, 224, 201,
-        26, 255, 247, 144, 255, 32, 106, 24, 177, 254, 247, 171, 254, 0, 35,
-        35, 98, 40, 105, 254, 247, 163, 254, 32, 98, 64, 179, 47, 70, 87, 248,
-        16, 47, 5, 241, 20, 1, 248, 247, 220, 251, 57, 70, 2, 34, 4, 241, 30,
-        0, 248, 247, 214, 251, 41, 29, 4, 34, 4, 241, 12, 0, 248, 247, 208,
-        251, 4, 241, 20, 0, 5, 241, 12, 1, 4, 34, 248, 247, 201, 251, 51, 104,
-        27, 104, 147, 248, 105, 1, 96, 185, 1, 34, 131, 248, 105, 33, 248, 189,
-        111, 240, 28, 0, 248, 189, 111, 240, 1, 0, 248, 189, 111, 240, 26, 0,
-        248, 189, 0, 32, 248, 189, 0, 191, 41, 156, 0, 0, 3, 42, 45, 233, 240,
-        65, 6, 70, 12, 70, 72, 217, 75, 136, 4, 58, 147, 66, 68, 216, 10, 120,
-        18, 177, 1, 42, 73, 209, 20, 224, 23, 43, 64, 217, 11, 121, 0, 43, 64,
-        209, 141, 104, 77, 177, 74, 104, 36, 75, 19, 64, 0, 43, 60, 209, 4,
-        49, 189, 232, 240, 65, 255, 247, 112, 191, 41, 70, 255, 247, 73, 255,
-        56, 224, 1, 43, 5, 217, 13, 121, 0, 45, 24, 191, 111, 240, 1, 5, 0,
-        224, 0, 37, 148, 248, 4, 128, 6, 235, 136, 8, 216, 248, 4, 112, 151,
-        185, 36, 32, 254, 247, 57, 254, 200, 248, 4, 0, 35, 121, 6, 235, 131,
-        3, 88, 104, 224, 177, 57, 70, 36, 34, 249, 243, 200, 247, 35, 121, 6,
-        235, 131, 3, 91, 104, 30, 96, 35, 121, 98, 121, 6, 235, 131, 6, 115,
-        104, 90, 119, 26, 119, 13, 224, 111, 240, 13, 5, 10, 224, 111, 240,
-        23, 5, 7, 224, 111, 240, 1, 5, 4, 224, 111, 240, 22, 5, 1, 224, 111,
-        240, 26, 5, 40, 70, 189, 232, 240, 129, 0, 255, 255, 0, 48, 181, 3,
-        153, 4, 157, 5, 155, 6, 156, 18, 177, 1, 42, 12, 209, 5, 224, 42, 70,
-        3, 148, 189, 232, 48, 64, 255, 247, 177, 190, 25, 70, 34, 70, 189, 232,
-        48, 64, 255, 247, 137, 191, 111, 240, 22, 0, 48, 189, 248, 181, 3, 104,
-        5, 70, 14, 70, 88, 104, 17, 70, 23, 70, 254, 247, 1, 254, 4, 70, 88,
-        177, 49, 70, 58, 70, 128, 104, 248, 247, 40, 251, 40, 104, 33, 70, 0,
-        34, 10, 240, 97, 254, 0, 32, 248, 189, 79, 240, 255, 48, 248, 189, 16,
-        181, 4, 104, 65, 242, 198, 2, 163, 105, 147, 66, 3, 217, 163, 245, 134,
-        83, 6, 59, 12, 224, 107, 177, 96, 104, 248, 247, 47, 253, 163, 105,
-        79, 244, 122, 113, 89, 67, 96, 104, 0, 34, 253, 243, 103, 247, 0, 35,
-        163, 97, 16, 189, 33, 106, 32, 104, 226, 139, 255, 247, 199, 255, 161,
-        104, 41, 185, 32, 70, 7, 74, 11, 70, 254, 243, 32, 240, 160, 96, 34,
-        127, 160, 104, 0, 50, 79, 244, 122, 113, 24, 191, 1, 34, 189, 232, 16,
-        64, 253, 243, 76, 183, 145, 156, 0, 0, 48, 181, 4, 104, 133, 176, 97,
-        127, 37, 104, 129, 185, 107, 104, 156, 66, 2, 209, 40, 70, 255, 247,
-        152, 254, 0, 34, 0, 146, 1, 146, 2, 146, 3, 146, 40, 104, 146, 33, 19,
-        70, 33, 240, 184, 218, 7, 224, 40, 70, 33, 106, 226, 139, 255, 247,
-        150, 255, 99, 127, 1, 59, 99, 119, 5, 176, 48, 189, 0, 0, 45, 233, 240,
-        65, 141, 137, 134, 176, 13, 45, 6, 70, 140, 104, 64, 243, 180, 128,
-        34, 123, 99, 123, 67, 234, 2, 35, 179, 245, 192, 111, 2, 219, 4, 241,
-        12, 8, 13, 224, 21, 45, 64, 243, 167, 128, 86, 72, 4, 241, 14, 1, 6,
-        34, 248, 247, 153, 250, 0, 40, 64, 240, 158, 128, 4, 241, 20, 8, 152,
-        248, 0, 32, 152, 248, 1, 48, 67, 234, 2, 35, 179, 245, 0, 111, 64, 240,
-        146, 128, 152, 248, 2, 16, 8, 241, 2, 0, 1, 240, 15, 1, 137, 0, 101,
-        25, 71, 24, 175, 66, 0, 242, 134, 128, 152, 248, 11, 48, 17, 43, 64,
-        240, 129, 128, 184, 248, 8, 48, 28, 10, 68, 234, 3, 36, 164, 4, 164,
-        12, 0, 44, 119, 209, 184, 248, 4, 48, 26, 10, 66, 234, 3, 35, 91, 26,
-        155, 178, 251, 24, 157, 66, 112, 211, 252, 247, 209, 253, 184, 248,
-        12, 48, 131, 66, 106, 209, 0, 47, 99, 208, 58, 136, 123, 136, 17, 10,
-        65, 234, 2, 34, 18, 178, 67, 42, 96, 209, 26, 10, 66, 234, 3, 35, 27,
-        178, 68, 43, 90, 209, 59, 122, 2, 43, 84, 209, 215, 248, 244, 32, 45,
-        75, 154, 66, 79, 209, 117, 104, 251, 104, 234, 104, 27, 186, 154, 66,
-        73, 209, 248, 55, 56, 70, 60, 33, 53, 34, 252, 247, 81, 253, 0, 40,
-        67, 208, 131, 120, 6, 43, 14, 208, 5, 43, 60, 209, 56, 70, 60, 33, 51,
-        34, 252, 247, 69, 253, 4, 70, 16, 177, 67, 120, 4, 43, 13, 208, 108,
-        127, 0, 44, 47, 209, 48, 104, 146, 33, 34, 70, 35, 70, 0, 148, 1, 148,
-        2, 148, 3, 148, 33, 240, 21, 218, 39, 224, 168, 104, 48, 177, 248, 247,
-        76, 252, 168, 104, 253, 243, 9, 247, 0, 35, 171, 96, 5, 168, 161, 28,
-        4, 34, 248, 247, 34, 250, 5, 155, 104, 104, 27, 186, 5, 147, 152, 177,
-        248, 247, 59, 252, 43, 127, 5, 153, 107, 119, 107, 105, 40, 70, 153,
-        66, 1, 216, 73, 8, 0, 224, 201, 26, 255, 247, 177, 253, 1, 36, 4, 224,
-        60, 70, 2, 224, 0, 36, 0, 224, 4, 70, 32, 70, 6, 176, 189, 232, 240,
-        129, 98, 211, 3, 0, 99, 130, 83, 99, 45, 233, 240, 65, 5, 70, 240, 177,
-        208, 248, 92, 50, 251, 177, 0, 36, 213, 248, 92, 114, 102, 1, 23, 235,
-        6, 8, 14, 208, 184, 89, 96, 177, 254, 247, 175, 252, 0, 33, 200, 248,
-        4, 16, 185, 81, 200, 248, 8, 16, 8, 241, 12, 0, 16, 34, 249, 243, 59,
-        246, 1, 52, 10, 44, 231, 209, 0, 32, 189, 232, 240, 129, 79, 240, 255,
-        48, 189, 232, 240, 129, 79, 240, 255, 48, 189, 232, 240, 129, 0, 0,
-        0, 72, 112, 71, 140, 17, 4, 0, 139, 124, 138, 104, 210, 24, 138, 96,
-        138, 137, 211, 26, 139, 129, 112, 71, 112, 181, 145, 104, 136, 137,
-        4, 10, 68, 234, 0, 32, 0, 178, 176, 245, 0, 111, 5, 209, 200, 125, 6,
-        40, 10, 208, 17, 40, 50, 209, 7, 224, 26, 76, 160, 66, 46, 209, 8, 125,
-        6, 40, 1, 208, 17, 40, 43, 209, 76, 136, 99, 185, 10, 136, 20, 67, 138,
-        136, 20, 67, 164, 178, 36, 177, 11, 120, 3, 240, 1, 3, 131, 240, 1,
-        3, 216, 178, 112, 189, 152, 104, 69, 136, 6, 136, 108, 64, 13, 136,
-        128, 136, 137, 136, 117, 64, 44, 67, 65, 64, 12, 67, 164, 178, 84, 185,
-        208, 137, 219, 137, 0, 240, 7, 0, 3, 240, 7, 3, 195, 26, 88, 66, 64,
-        235, 3, 0, 0, 224, 0, 32, 192, 178, 112, 189, 0, 32, 112, 189, 0, 32,
-        112, 189, 221, 134, 255, 255, 0, 32, 112, 71, 19, 181, 195, 104, 4,
-        70, 147, 248, 172, 0, 56, 177, 2, 170, 0, 35, 66, 248, 4, 61, 160, 104,
-        1, 33, 28, 240, 22, 251, 227, 104, 147, 248, 172, 48, 83, 177, 48, 177,
-        0, 33, 4, 241, 64, 0, 10, 70, 253, 243, 197, 245, 2, 224, 160, 104,
-        76, 240, 117, 218, 28, 189, 45, 233, 247, 79, 140, 105, 22, 70, 35,
-        105, 153, 66, 4, 208, 203, 106, 43, 177, 211, 248, 0, 144, 3, 224, 79,
-        240, 0, 9, 0, 224, 153, 70, 165, 104, 73, 70, 40, 70, 24, 240, 60, 251,
-        99, 104, 0, 144, 147, 249, 62, 48, 99, 177, 149, 248, 33, 50, 11, 177,
-        131, 121, 83, 177, 149, 248, 34, 178, 219, 241, 1, 11, 56, 191, 79,
-        240, 0, 11, 3, 224, 79, 240, 1, 11, 0, 224, 155, 70, 0, 37, 47, 70,
-        170, 70, 168, 70, 78, 224, 48, 75, 242, 138, 27, 104, 49, 70, 83, 248,
-        34, 48, 0, 34, 242, 130, 1, 147, 99, 104, 88, 105, 254, 247, 63, 252,
-        6, 70, 49, 70, 32, 70, 255, 247, 78, 255, 99, 104, 147, 249, 62, 48,
-        0, 43, 42, 208, 187, 241, 0, 15, 16, 208, 32, 70, 0, 153, 50, 70, 59,
-        70, 255, 247, 72, 255, 130, 70, 96, 177, 243, 137, 67, 244, 128, 83,
-        243, 129, 45, 177, 51, 136, 235, 130, 53, 70, 3, 224, 218, 70, 1, 224,
-        53, 70, 55, 70, 143, 177, 1, 154, 18, 177, 186, 241, 0, 15, 24, 209,
-        57, 70, 160, 104, 74, 70, 10, 240, 52, 252, 0, 40, 12, 191, 7, 70, 0,
-        39, 61, 70, 24, 191, 79, 240, 1, 8, 186, 241, 0, 15, 8, 209, 160, 104,
-        49, 70, 74, 70, 10, 240, 36, 252, 0, 40, 24, 191, 79, 240, 1, 8, 1,
-        158, 0, 46, 174, 209, 99, 104, 147, 249, 62, 48, 75, 177, 71, 177, 160,
-        104, 57, 70, 74, 70, 10, 240, 19, 252, 0, 40, 24, 191, 79, 240, 1, 8,
-        64, 70, 189, 232, 254, 143, 32, 7, 0, 0, 45, 233, 248, 67, 67, 104,
-        23, 70, 138, 104, 12, 70, 145, 248, 35, 128, 73, 104, 94, 105, 34, 240,
-        127, 67, 193, 243, 20, 1, 35, 244, 96, 3, 91, 26, 3, 43, 46, 216, 180,
-        248, 12, 144, 48, 70, 9, 241, 4, 1, 254, 247, 132, 251, 5, 70, 48, 185,
-        33, 70, 48, 70, 1, 34, 254, 247, 159, 251, 44, 70, 44, 224, 195, 137,
-        226, 137, 35, 240, 7, 3, 27, 4, 2, 240, 7, 2, 27, 12, 19, 67, 195, 129,
-        226, 137, 161, 104, 210, 6, 76, 191, 67, 240, 16, 3, 35, 240, 16, 3,
-        195, 129, 128, 104, 74, 70, 4, 48, 248, 247, 145, 248, 33, 70, 48, 70,
-        1, 34, 254, 247, 128, 251, 44, 70, 4, 224, 163, 137, 4, 58, 4, 51, 162,
-        96, 163, 129, 163, 104, 0, 33, 1, 34, 25, 112, 90, 112, 131, 248, 2,
-        128, 217, 112, 58, 112, 32, 70, 189, 232, 248, 131, 0, 0, 45, 233, 243,
-        71, 153, 70, 3, 105, 7, 70, 94, 106, 138, 70, 144, 70, 94, 179, 68,
-        32, 254, 247, 42, 251, 4, 70, 56, 179, 68, 34, 0, 33, 4, 241, 20, 5,
-        249, 243, 188, 244, 101, 96, 196, 248, 0, 144, 255, 247, 139, 254, 123,
-        104, 186, 241, 2, 15, 96, 98, 231, 98, 205, 248, 0, 128, 12, 191, 14,
-        74, 14, 74, 79, 240, 16, 1, 219, 104, 40, 70, 249, 243, 13, 245, 12,
-        75, 36, 100, 27, 104, 48, 70, 91, 104, 41, 70, 152, 71, 0, 40, 6, 221,
-        137, 248, 5, 0, 0, 224, 52, 70, 32, 70, 189, 232, 252, 135, 32, 70,
-        254, 247, 253, 250, 0, 36, 247, 231, 104, 211, 3, 0, 39, 56, 136, 0,
-        188, 7, 0, 0, 56, 181, 4, 70, 99, 104, 128, 104, 27, 126, 203, 185,
-        5, 240, 171, 254, 5, 70, 32, 185, 212, 248, 128, 0, 9, 240, 220, 223,
-        5, 70, 248, 247, 167, 249, 99, 104, 211, 248, 152, 16, 89, 177, 11,
-        120, 75, 177, 6, 75, 0, 34, 24, 104, 252, 247, 108, 249, 32, 70, 15,
-        240, 125, 220, 0, 224, 0, 37, 40, 70, 56, 189, 0, 191, 172, 44, 4, 0,
-        31, 181, 8, 74, 3, 70, 0, 146, 7, 74, 8, 70, 1, 146, 7, 74, 7, 73, 18,
-        104, 2, 146, 26, 104, 6, 75, 249, 243, 207, 246, 5, 176, 0, 189, 0,
-        191, 168, 211, 3, 0, 31, 181, 3, 0, 176, 44, 4, 0, 121, 211, 3, 0, 156,
-        211, 3, 0, 45, 233, 247, 67, 4, 70, 23, 70, 9, 185, 6, 105, 0, 224,
-        78, 104, 187, 104, 117, 106, 147, 248, 12, 128, 91, 123, 67, 234, 8,
-        40, 72, 246, 108, 3, 195, 235, 8, 2, 210, 241, 0, 8, 72, 235, 2, 8,
-        184, 241, 0, 15, 25, 209, 57, 70, 32, 70, 15, 240, 134, 217, 212, 248,
-        180, 0, 57, 70, 0, 240, 163, 251, 99, 104, 129, 70, 232, 185, 147, 248,
-        105, 49, 83, 177, 212, 248, 184, 0, 57, 70, 255, 247, 252, 252, 32,
-        177, 99, 104, 57, 70, 88, 105, 74, 70, 67, 224, 0, 45, 61, 208, 184,
-        241, 0, 15, 29, 209, 235, 105, 219, 7, 11, 213, 99, 125, 75, 177, 32,
-        70, 57, 70, 15, 240, 44, 219, 32, 185, 99, 104, 88, 105, 57, 70, 66,
-        70, 47, 224, 99, 104, 147, 248, 146, 48, 83, 177, 212, 248, 132, 0,
-        57, 70, 41, 240, 109, 249, 2, 70, 24, 185, 99, 104, 57, 70, 88, 105,
-        32, 224, 2, 170, 0, 35, 57, 70, 2, 248, 1, 61, 32, 70, 255, 247, 199,
-        254, 1, 70, 192, 177, 157, 248, 7, 48, 131, 116, 99, 104, 88, 105, 254,
-        247, 186, 250, 43, 105, 4, 70, 219, 104, 48, 70, 41, 70, 34, 70, 152,
-        71, 72, 177, 32, 70, 248, 247, 121, 252, 5, 224, 99, 104, 57, 70, 88,
-        105, 42, 70, 254, 247, 108, 250, 189, 232, 254, 131, 45, 233, 240, 65,
-        151, 137, 131, 104, 6, 63, 6, 70, 57, 70, 88, 104, 21, 70, 254, 247,
-        61, 250, 4, 70, 184, 177, 169, 104, 58, 70, 6, 49, 128, 104, 247, 247,
-        99, 255, 149, 248, 32, 48, 48, 70, 132, 248, 32, 48, 149, 248, 35, 48,
-        0, 33, 132, 248, 35, 48, 235, 106, 34, 70, 227, 98, 1, 35, 189, 232,
-        240, 65, 255, 247, 95, 191, 189, 232, 240, 129, 1, 105, 16, 181, 72,
-        106, 40, 177, 1, 105, 140, 105, 20, 177, 17, 70, 26, 70, 160, 71, 16,
-        189, 7, 181, 19, 70, 82, 104, 18, 42, 48, 208, 5, 216, 16, 42, 45, 208,
-        54, 216, 11, 42, 61, 209, 6, 224, 33, 42, 11, 208, 46, 42, 25, 208,
-        25, 42, 54, 209, 15, 224, 67, 104, 211, 248, 28, 33, 145, 7, 48, 213,
-        2, 34, 5, 224, 67, 104, 211, 248, 28, 33, 210, 7, 41, 213, 1, 34, 195,
-        248, 32, 33, 37, 224, 67, 104, 211, 248, 28, 33, 16, 7, 32, 213, 8,
-        34, 245, 231, 66, 104, 210, 248, 28, 17, 73, 7, 25, 213, 219, 104, 1,
-        43, 22, 209, 4, 35, 194, 248, 32, 49, 18, 224, 155, 120, 3, 240, 1,
-        3, 3, 117, 107, 177, 208, 248, 144, 0, 255, 247, 5, 253, 8, 224, 0,
-        33, 2, 170, 66, 248, 4, 29, 128, 104, 147, 248, 47, 16, 24, 240, 215,
-        248, 14, 189, 112, 71, 16, 181, 67, 104, 4, 70, 27, 126, 123, 177, 208,
-        248, 128, 0, 9, 240, 146, 222, 160, 104, 6, 240, 74, 248, 99, 104, 0,
-        33, 32, 70, 131, 248, 32, 16, 189, 232, 16, 64, 15, 240, 34, 152, 16,
-        189, 36, 48, 112, 71, 67, 124, 0, 43, 20, 191, 48, 35, 36, 35, 192,
-        24, 4, 48, 112, 71, 67, 124, 0, 43, 20, 191, 64, 35, 40, 35, 192, 24,
-        4, 48, 112, 71, 67, 124, 2, 140, 0, 43, 20, 191, 32, 35, 8, 35, 155,
-        24, 192, 24, 36, 48, 112, 71, 45, 233, 247, 79, 189, 248, 48, 128, 189,
-        248, 52, 160, 131, 70, 1, 146, 153, 70, 15, 70, 0, 41, 12, 191, 4, 38,
-        16, 38, 0, 37, 11, 235, 5, 3, 28, 105, 196, 177, 99, 124, 187, 66, 21,
-        209, 32, 70, 255, 247, 203, 255, 1, 153, 50, 70, 247, 247, 151, 254,
-        104, 185, 32, 70, 255, 247, 197, 255, 73, 70, 50, 70, 247, 247, 143,
-        254, 40, 185, 99, 138, 67, 69, 2, 209, 163, 138, 83, 69, 4, 208, 4,
-        53, 16, 45, 223, 209, 0, 32, 0, 224, 32, 70, 189, 232, 254, 143, 3,
-        42, 16, 181, 4, 70, 60, 217, 72, 136, 4, 58, 144, 66, 56, 216, 8, 136,
-        24, 128, 10, 136, 4, 42, 54, 216, 223, 232, 2, 240, 3, 6, 12, 27, 32,
-        0, 4, 34, 90, 128, 23, 224, 8, 34, 90, 128, 24, 29, 161, 29, 8, 34,
-        11, 224, 10, 121, 3, 42, 40, 216, 4, 50, 84, 248, 34, 16, 0, 41, 38,
-        208, 202, 137, 24, 29, 90, 128, 16, 49, 247, 247, 106, 254, 20, 224,
-        4, 32, 88, 128, 34, 121, 26, 113, 15, 224, 5, 34, 90, 128, 4, 34, 26,
-        113, 0, 34, 33, 105, 9, 177, 9, 121, 0, 224, 255, 33, 152, 24, 1, 50,
-        4, 52, 4, 42, 65, 113, 244, 209, 0, 32, 16, 189, 111, 240, 13, 0, 16,
-        189, 111, 240, 22, 0, 16, 189, 111, 240, 28, 0, 16, 189, 111, 240, 29,
-        0, 16, 189, 248, 181, 3, 104, 5, 70, 14, 70, 88, 104, 17, 70, 23, 70,
-        254, 247, 15, 249, 4, 70, 88, 177, 49, 70, 58, 70, 128, 104, 247, 247,
-        54, 254, 40, 104, 33, 70, 0, 34, 10, 240, 111, 249, 0, 32, 248, 189,
-        79, 240, 255, 48, 248, 189, 3, 104, 137, 104, 152, 104, 14, 240, 227,
-        158, 1, 35, 112, 181, 10, 113, 4, 70, 67, 113, 5, 70, 0, 241, 16, 6,
-        41, 105, 17, 177, 32, 70, 255, 247, 238, 255, 4, 53, 181, 66, 247, 209,
-        112, 189, 3, 104, 112, 181, 5, 70, 12, 70, 152, 104, 137, 104, 22, 70,
-        14, 240, 201, 222, 79, 244, 122, 114, 43, 104, 114, 67, 152, 104, 161,
-        104, 0, 35, 189, 232, 112, 64, 14, 240, 152, 158, 45, 233, 240, 67,
-        142, 137, 133, 176, 13, 46, 5, 70, 140, 104, 64, 243, 228, 128, 34,
-        123, 99, 123, 67, 234, 2, 35, 179, 245, 192, 111, 2, 219, 4, 241, 12,
-        7, 13, 224, 21, 46, 64, 243, 215, 128, 111, 72, 4, 241, 14, 1, 6, 34,
-        247, 247, 211, 253, 0, 40, 64, 240, 206, 128, 4, 241, 20, 7, 57, 120,
-        122, 120, 163, 25, 66, 234, 1, 34, 178, 245, 0, 111, 7, 241, 2, 8, 5,
-        208, 72, 242, 221, 97, 138, 66, 64, 240, 189, 128, 57, 224, 185, 120,
-        1, 240, 15, 1, 137, 0, 8, 235, 1, 4, 156, 66, 0, 242, 179, 128, 250,
-        122, 6, 42, 64, 240, 175, 128, 58, 137, 79, 234, 18, 41, 73, 234, 2,
-        41, 79, 234, 137, 73, 79, 234, 153, 73, 185, 241, 0, 15, 64, 240, 162,
-        128, 186, 136, 22, 10, 70, 234, 2, 38, 118, 26, 182, 178, 162, 25, 147,
-        66, 192, 240, 156, 128, 64, 70, 252, 247, 4, 249, 187, 137, 131, 66,
-        64, 240, 149, 128, 64, 70, 33, 70, 50, 70, 252, 247, 11, 249, 35, 138,
-        131, 66, 64, 240, 140, 128, 7, 241, 14, 3, 7, 241, 18, 2, 73, 70, 27,
-        224, 7, 241, 42, 4, 156, 66, 125, 216, 58, 122, 6, 42, 122, 209, 250,
-        136, 22, 10, 70, 234, 2, 38, 182, 178, 162, 25, 147, 66, 114, 211, 64,
-        70, 33, 70, 50, 70, 252, 247, 23, 249, 123, 143, 131, 66, 106, 209,
-        7, 241, 10, 3, 7, 241, 26, 2, 1, 33, 0, 44, 102, 208, 180, 248, 2, 224,
-        32, 136, 79, 234, 30, 44, 76, 234, 14, 46, 31, 250, 142, 254, 167, 104,
-        212, 248, 4, 128, 205, 248, 0, 224, 79, 234, 16, 46, 78, 234, 0, 32,
-        128, 178, 1, 144, 40, 70, 255, 247, 155, 254, 63, 186, 152, 250, 136,
-        248, 129, 70, 0, 40, 74, 208, 4, 241, 12, 1, 2, 34, 3, 168, 247, 247,
-        86, 253, 157, 248, 13, 48, 19, 240, 16, 4, 5, 209, 40, 70, 73, 70, 2,
-        34, 255, 247, 37, 255, 56, 224, 157, 248, 12, 32, 18, 9, 182, 235, 130,
-        15, 3, 208, 40, 70, 73, 70, 6, 34, 41, 224, 16, 43, 3, 208, 40, 70,
-        73, 70, 3, 34, 35, 224, 217, 248, 24, 48, 187, 66, 24, 209, 217, 248,
-        28, 48, 67, 69, 9, 208, 23, 217, 72, 70, 255, 247, 94, 254, 185, 248,
-        34, 32, 1, 70, 40, 70, 255, 247, 227, 254, 107, 137, 73, 70, 169, 248,
-        12, 48, 40, 70, 234, 136, 255, 247, 11, 255, 79, 240, 1, 9, 12, 224,
-        40, 70, 73, 70, 4, 34, 2, 224, 40, 70, 73, 70, 5, 34, 255, 247, 238,
-        254, 79, 240, 0, 9, 0, 224, 161, 70, 72, 70, 5, 176, 189, 232, 240,
-        131, 0, 191, 177, 211, 3, 0, 0, 35, 112, 181, 4, 70, 67, 113, 5, 70,
-        0, 241, 16, 6, 41, 105, 49, 177, 0, 34, 10, 113, 99, 137, 32, 70, 139,
-        129, 255, 247, 228, 254, 4, 53, 181, 66, 243, 209, 112, 189, 11, 29,
-        112, 181, 80, 248, 35, 64, 5, 70, 14, 70, 132, 177, 163, 104, 59, 177,
-        33, 70, 255, 247, 190, 254, 43, 104, 161, 104, 152, 104, 14, 240, 25,
-        222, 32, 70, 253, 247, 163, 255, 4, 54, 0, 35, 69, 248, 38, 48, 112,
-        189, 56, 181, 5, 70, 0, 36, 225, 178, 40, 70, 1, 52, 255, 247, 223,
-        255, 4, 44, 248, 209, 56, 189, 45, 233, 248, 67, 2, 241, 36, 9, 31,
-        250, 137, 249, 5, 70, 72, 70, 136, 70, 23, 70, 14, 120, 253, 247, 131,
-        255, 4, 70, 32, 179, 0, 33, 74, 70, 249, 243, 23, 241, 65, 70, 58, 70,
-        37, 96, 231, 129, 4, 241, 16, 0, 247, 247, 183, 252, 43, 104, 13, 73,
-        152, 104, 34, 70, 0, 35, 14, 240, 242, 221, 160, 96, 48, 185, 32, 70,
-        253, 247, 108, 255, 79, 240, 255, 48, 189, 232, 248, 131, 0, 32, 32,
-        113, 107, 137, 4, 54, 163, 129, 69, 248, 38, 64, 189, 232, 248, 131,
-        111, 240, 26, 0, 189, 232, 248, 131, 39, 170, 0, 0, 3, 42, 112, 181,
-        5, 70, 12, 70, 50, 217, 75, 136, 4, 58, 147, 66, 46, 216, 10, 136, 2,
-        42, 14, 208, 3, 42, 27, 208, 1, 42, 42, 209, 7, 43, 49, 217, 6, 121,
-        0, 46, 43, 209, 6, 48, 4, 49, 8, 34, 247, 247, 126, 252, 44, 224, 9,
-        121, 3, 41, 31, 216, 3, 121, 0, 43, 31, 209, 255, 247, 127, 255, 98,
-        136, 40, 70, 33, 29, 189, 232, 112, 64, 255, 247, 156, 191, 3, 43, 23,
-        217, 14, 121, 3, 121, 179, 66, 22, 208, 6, 113, 22, 177, 255, 247, 90,
-        255, 17, 224, 255, 247, 132, 255, 15, 224, 111, 240, 13, 6, 12, 224,
-        111, 240, 22, 6, 9, 224, 111, 240, 28, 6, 6, 224, 111, 240, 15, 6, 3,
-        224, 111, 240, 23, 6, 0, 224, 0, 38, 48, 70, 112, 189, 48, 181, 3, 153,
-        4, 157, 5, 155, 6, 156, 18, 177, 1, 42, 12, 209, 5, 224, 42, 70, 3,
-        148, 189, 232, 48, 64, 255, 247, 172, 189, 25, 70, 34, 70, 189, 232,
-        48, 64, 255, 247, 161, 191, 111, 240, 22, 0, 48, 189, 3, 121, 43, 177,
-        64, 121, 208, 241, 1, 0, 56, 191, 0, 32, 112, 71, 24, 70, 112, 71, 56,
-        181, 4, 70, 13, 70, 255, 247, 241, 255, 40, 177, 32, 70, 41, 70, 189,
-        232, 56, 64, 255, 247, 30, 190, 56, 189, 240, 181, 5, 104, 4, 70, 135,
-        176, 40, 70, 255, 247, 226, 255, 0, 40, 45, 208, 166, 137, 222, 185,
-        40, 70, 33, 70, 1, 34, 5, 175, 255, 247, 231, 253, 49, 70, 4, 34, 56,
-        70, 249, 243, 97, 240, 35, 124, 151, 33, 141, 248, 20, 48, 40, 104,
-        4, 35, 208, 248, 108, 34, 3, 147, 194, 50, 5, 35, 0, 150, 1, 150, 2,
-        151, 32, 240, 221, 219, 15, 224, 32, 70, 255, 247, 28, 253, 34, 140,
-        1, 70, 40, 70, 255, 247, 170, 253, 163, 137, 40, 70, 1, 59, 163, 129,
-        33, 70, 42, 137, 255, 247, 210, 253, 7, 176, 240, 189, 144, 249, 33,
-        0, 112, 71, 79, 244, 192, 112, 112, 71, 8, 181, 0, 104, 255, 247, 249,
-        255, 0, 40, 56, 191, 0, 32, 0, 40, 8, 191, 2, 32, 128, 178, 8, 189,
-        2, 104, 48, 181, 210, 248, 108, 50, 212, 104, 152, 66, 40, 209, 146,
-        248, 114, 50, 43, 187, 208, 248, 4, 17, 73, 123, 25, 187, 208, 248,
-        244, 16, 0, 124, 205, 141, 107, 0, 96, 177, 145, 248, 96, 0, 67, 67,
-        146, 248, 45, 2, 8, 177, 67, 67, 4, 224, 146, 248, 44, 34, 10, 177,
-        83, 0, 107, 67, 9, 142, 212, 248, 128, 1, 212, 248, 140, 33, 9, 185,
-        130, 66, 10, 211, 155, 2, 24, 24, 130, 66, 148, 191, 0, 32, 1, 32, 48,
-        189, 0, 32, 48, 189, 24, 70, 48, 189, 1, 32, 48, 189, 0, 32, 112, 71,
-        0, 32, 112, 71, 208, 248, 164, 53, 88, 137, 112, 71, 72, 242, 243, 3,
-        153, 66, 6, 208, 72, 242, 55, 16, 9, 26, 72, 66, 64, 235, 1, 0, 112,
-        71, 1, 32, 112, 71, 67, 137, 3, 240, 3, 3, 2, 43, 3, 209, 195, 106,
-        216, 120, 192, 9, 112, 71, 3, 43, 4, 209, 195, 106, 216, 120, 0, 240,
-        1, 0, 112, 71, 0, 32, 112, 71, 131, 122, 3, 240, 3, 3, 2, 43, 7, 209,
-        195, 106, 219, 120, 19, 240, 48, 15, 12, 191, 0, 32, 1, 32, 112, 71,
-        3, 43, 4, 209, 195, 106, 24, 120, 192, 243, 192, 0, 112, 71, 0, 32,
-        112, 71, 200, 136, 192, 243, 192, 16, 112, 71, 200, 136, 192, 243, 128,
-        0, 112, 71, 208, 248, 104, 49, 216, 121, 16, 241, 255, 48, 24, 191,
-        1, 32, 112, 71, 8, 124, 168, 177, 209, 248, 244, 16, 73, 142, 81, 64,
-        17, 244, 96, 80, 14, 208, 2, 244, 96, 82, 178, 245, 128, 95, 6, 208,
-        178, 245, 192, 95, 5, 209, 24, 28, 24, 191, 1, 32, 112, 71, 1, 32, 112,
-        71, 0, 32, 112, 71, 112, 71, 11, 105, 19, 177, 147, 248, 37, 19, 185,
-        185, 153, 121, 25, 185, 0, 104, 144, 248, 44, 0, 120, 185, 2, 244, 64,
-        112, 176, 245, 64, 127, 12, 208, 112, 177, 211, 248, 4, 49, 24, 120,
-        72, 177, 160, 241, 2, 1, 72, 66, 64, 235, 1, 0, 112, 71, 8, 70, 112,
-        71, 0, 32, 112, 71, 1, 32, 112, 71, 203, 104, 72, 177, 1, 136, 79, 246,
-        255, 114, 145, 66, 4, 209, 27, 177, 90, 120, 10, 177, 155, 120, 3, 128,
-        0, 32, 112, 71, 0, 34, 10, 96, 16, 240, 64, 114, 195, 178, 11, 208,
-        178, 241, 128, 127, 2, 209, 67, 240, 128, 115, 5, 224, 178, 241, 0,
-        127, 45, 209, 195, 178, 67, 240, 0, 115, 0, 244, 64, 114, 19, 67, 194,
-        2, 72, 191, 67, 244, 128, 19, 66, 2, 72, 191, 67, 244, 128, 3, 2, 2,
-        0, 244, 224, 32, 72, 191, 67, 244, 0, 3, 176, 245, 128, 63, 2, 209,
-        67, 244, 128, 51, 16, 224, 176, 245, 0, 63, 2, 209, 67, 244, 0, 51,
-        10, 224, 176, 245, 64, 63, 2, 209, 67, 244, 64, 51, 4, 224, 176, 245,
-        128, 47, 8, 191, 67, 244, 128, 35, 11, 96, 0, 32, 112, 71, 111, 240,
-        1, 0, 112, 71, 112, 181, 5, 104, 208, 248, 8, 5, 213, 248, 136, 64,
-        102, 104, 1, 54, 102, 96, 166, 104, 182, 24, 166, 96, 16, 177, 132,
-        105, 1, 52, 132, 97, 209, 248, 248, 0, 16, 185, 12, 105, 228, 104, 0,
-        224, 4, 70, 102, 105, 1, 54, 102, 97, 8, 185, 9, 105, 200, 104, 129,
-        105, 137, 24, 129, 97, 105, 107, 105, 177, 7, 72, 213, 248, 140, 16,
-        195, 92, 6, 72, 195, 92, 1, 235, 195, 3, 89, 104, 1, 49, 89, 96, 153,
-        104, 82, 24, 154, 96, 112, 189, 0, 191, 138, 182, 135, 0, 84, 194, 135,
-        0, 3, 104, 88, 107, 112, 177, 211, 248, 140, 0, 7, 75, 155, 92, 7, 74,
-        211, 92, 4, 51, 0, 235, 195, 3, 90, 104, 1, 50, 90, 96, 154, 104, 137,
-        24, 153, 96, 112, 71, 0, 191, 138, 182, 135, 0, 84, 194, 135, 0, 74,
-        104, 16, 181, 147, 66, 76, 136, 39, 219, 225, 6, 3, 213, 3, 104, 27,
-        126, 0, 43, 36, 209, 34, 7, 3, 213, 3, 104, 27, 126, 0, 43, 33, 208,
-        163, 6, 2, 213, 67, 126, 0, 43, 31, 208, 20, 240, 3, 3, 31, 208, 2,
-        153, 23, 240, 79, 252, 0, 40, 28, 208, 225, 7, 2, 213, 131, 121, 0,
-        43, 26, 209, 20, 240, 2, 4, 26, 208, 131, 121, 0, 43, 12, 191, 111,
-        240, 5, 0, 0, 32, 16, 189, 111, 240, 1, 0, 16, 189, 111, 240, 4, 0,
-        16, 189, 111, 240, 3, 0, 16, 189, 111, 240, 10, 0, 16, 189, 24, 70,
-        16, 189, 111, 240, 29, 0, 16, 189, 111, 240, 6, 0, 16, 189, 32, 70,
-        16, 189, 136, 110, 56, 181, 12, 70, 21, 70, 40, 177, 253, 247, 241,
-        252, 0, 35, 163, 102, 164, 248, 108, 48, 32, 70, 41, 70, 79, 244, 146,
-        114, 189, 232, 56, 64, 247, 247, 36, 186, 45, 233, 248, 67, 6, 70, 13,
-        70, 23, 70, 152, 70, 209, 248, 204, 144, 208, 248, 160, 69, 16, 224,
-        213, 248, 204, 48, 153, 69, 14, 209, 227, 104, 171, 66, 8, 209, 163,
-        121, 155, 7, 5, 213, 176, 104, 161, 104, 58, 70, 67, 70, 255, 247, 186,
-        250, 36, 104, 0, 44, 236, 209, 189, 232, 248, 131, 248, 181, 64, 104,
-        12, 70, 21, 70, 30, 70, 251, 247, 145, 251, 5, 241, 107, 2, 144, 66,
-        163, 104, 124, 211, 167, 137, 5, 241, 8, 2, 151, 66, 119, 211, 90, 25,
-        91, 93, 170, 43, 115, 209, 83, 120, 170, 43, 112, 209, 147, 120, 3,
-        43, 109, 209, 208, 120, 0, 40, 106, 209, 17, 121, 0, 41, 106, 209, 83,
-        121, 0, 43, 96, 209, 209, 136, 8, 10, 64, 234, 1, 33, 50, 72, 9, 178,
-        129, 66, 90, 209, 167, 241, 8, 3, 93, 27, 2, 208, 2, 241, 8, 3, 8, 224,
-        46, 75, 162, 138, 27, 104, 83, 248, 34, 0, 0, 40, 81, 208, 131, 104,
-        133, 137, 98, 45, 74, 217, 26, 120, 1, 58, 210, 178, 1, 42, 69, 216,
-        90, 120, 3, 42, 66, 209, 90, 136, 17, 10, 65, 234, 2, 34, 146, 178,
-        94, 42, 61, 217, 26, 121, 2, 42, 1, 208, 254, 42, 41, 209, 89, 121,
-        154, 121, 66, 234, 1, 34, 194, 243, 192, 5, 194, 243, 192, 17, 194,
-        243, 0, 32, 194, 243, 128, 39, 194, 243, 192, 36, 110, 177, 3, 46, 24,
-        209, 173, 177, 180, 185, 184, 177, 193, 185, 207, 185, 179, 248, 97,
-        96, 214, 241, 1, 6, 56, 191, 0, 38, 19, 224, 147, 5, 17, 212, 128, 185,
-        121, 177, 82, 6, 13, 212, 101, 177, 95, 185, 132, 240, 1, 6, 8, 224,
-        46, 70, 6, 224, 0, 38, 4, 224, 6, 70, 2, 224, 38, 70, 0, 224, 14, 70,
-        48, 70, 248, 189, 8, 70, 248, 189, 24, 70, 248, 189, 0, 32, 248, 189,
-        0, 32, 248, 189, 0, 191, 142, 136, 255, 255, 32, 7, 0, 0, 45, 233, 248,
-        67, 0, 235, 66, 2, 5, 70, 12, 70, 152, 70, 8, 159, 163, 241, 14, 6,
-        178, 248, 76, 148, 61, 240, 230, 218, 1, 56, 1, 40, 7, 216, 40, 70,
-        33, 70, 61, 240, 201, 218, 16, 177, 129, 69, 40, 191, 129, 70, 169,
-        241, 42, 3, 158, 66, 3, 210, 62, 96, 1, 32, 189, 232, 248, 131, 212,
-        248, 164, 49, 98, 104, 217, 7, 15, 75, 88, 191, 169, 241, 28, 9, 2,
-        234, 3, 3, 72, 191, 169, 241, 34, 9, 11, 177, 169, 241, 2, 9, 78, 69,
-        12, 217, 35, 125, 218, 7, 9, 212, 41, 240, 1, 3, 168, 241, 15, 0, 192,
-        24, 59, 96, 176, 251, 243, 240, 189, 232, 248, 131, 62, 96, 1, 32, 189,
-        232, 248, 131, 64, 0, 1, 0, 1, 240, 64, 112, 176, 241, 128, 127, 5,
-        209, 12, 49, 200, 178, 44, 40, 40, 191, 44, 32, 112, 71, 0, 40, 51,
-        209, 201, 178, 22, 41, 47, 208, 12, 216, 11, 41, 27, 208, 4, 216, 2,
-        41, 44, 208, 4, 41, 40, 209, 19, 224, 12, 41, 21, 208, 18, 41, 35, 209,
-        20, 224, 48, 41, 24, 208, 4, 216, 24, 41, 17, 208, 36, 41, 27, 209,
-        16, 224, 96, 41, 20, 208, 108, 41, 20, 208, 72, 41, 20, 209, 13, 224,
-        1, 32, 112, 71, 2, 32, 112, 71, 7, 32, 112, 71, 11, 32, 112, 71, 6,
-        32, 112, 71, 10, 32, 112, 71, 5, 32, 112, 71, 9, 32, 112, 71, 4, 32,
-        112, 71, 8, 32, 112, 71, 44, 32, 112, 71, 3, 32, 112, 71, 45, 233, 240,
-        79, 137, 176, 6, 146, 18, 157, 66, 104, 79, 240, 0, 10, 4, 144, 5, 145,
-        7, 147, 3, 146, 204, 53, 79, 240, 1, 11, 209, 70, 86, 70, 70, 224, 181,
-        245, 240, 111, 180, 191, 47, 70, 79, 244, 240, 103, 3, 152, 57, 70,
-        253, 247, 157, 251, 4, 70, 104, 185, 4, 154, 81, 70, 19, 104, 3, 152,
-        211, 248, 136, 48, 162, 70, 26, 106, 1, 50, 26, 98, 1, 34, 253, 247,
-        176, 251, 46, 224, 208, 248, 8, 128, 187, 241, 0, 15, 20, 208, 167,
-        241, 180, 3, 163, 129, 227, 137, 8, 241, 180, 0, 67, 240, 7, 3, 227,
-        129, 7, 155, 160, 96, 8, 33, 0, 147, 5, 154, 6, 155, 18, 240, 181, 222,
-        8, 241, 204, 8, 204, 63, 162, 70, 66, 70, 75, 70, 2, 224, 2, 248, 1,
-        59, 1, 51, 9, 235, 7, 1, 139, 66, 248, 219, 14, 177, 34, 136, 178, 130,
-        165, 245, 240, 101, 153, 70, 38, 70, 79, 240, 0, 11, 0, 45, 182, 220,
-        80, 70, 9, 176, 189, 232, 240, 143, 45, 233, 248, 67, 137, 104, 139,
-        137, 8, 43, 92, 209, 200, 125, 139, 123, 6, 40, 88, 209, 3, 240, 15,
-        3, 155, 0, 1, 241, 14, 4, 228, 24, 103, 123, 77, 124, 16, 47, 8, 124,
-        38, 123, 76, 209, 0, 2, 54, 9, 40, 24, 3, 235, 134, 3, 128, 178, 131,
-        66, 68, 209, 148, 248, 8, 128, 99, 122, 148, 248, 10, 192, 231, 122,
-        0, 42, 57, 208, 144, 104, 130, 137, 8, 42, 56, 209, 197, 125, 6, 45,
-        53, 209, 133, 123, 0, 241, 14, 6, 5, 240, 15, 5, 6, 235, 133, 5, 110,
-        123, 16, 46, 43, 209, 149, 248, 8, 144, 110, 122, 79, 234, 9, 105, 54,
-        4, 78, 68, 149, 248, 10, 144, 27, 4, 79, 234, 9, 41, 79, 234, 8, 104,
-        78, 68, 67, 68, 149, 248, 11, 144, 79, 234, 12, 44, 99, 68, 78, 68,
-        219, 25, 158, 66, 18, 217, 26, 48, 26, 49, 247, 247, 33, 248, 128, 185,
-        4, 34, 40, 70, 33, 70, 247, 247, 27, 248, 208, 241, 1, 0, 56, 191, 0,
-        32, 189, 232, 248, 131, 16, 70, 189, 232, 248, 131, 0, 32, 189, 232,
-        248, 131, 0, 32, 189, 232, 248, 131, 0, 0, 48, 181, 19, 72, 145, 176,
-        0, 104, 21, 156, 15, 144, 17, 72, 18, 77, 7, 144, 32, 104, 11, 149,
-        8, 144, 16, 72, 9, 144, 160, 104, 100, 104, 10, 144, 14, 144, 7, 168,
-        0, 144, 4, 147, 4, 32, 20, 155, 12, 148, 1, 144, 11, 76, 0, 32, 2, 144,
-        3, 144, 5, 147, 8, 70, 1, 35, 17, 70, 15, 170, 13, 148, 73, 240, 3,
-        221, 17, 176, 48, 189, 0, 191, 78, 179, 3, 0, 13, 195, 129, 0, 233,
-        194, 129, 0, 209, 194, 129, 0, 57, 172, 0, 0, 45, 233, 243, 71, 4, 70,
-        8, 70, 22, 70, 31, 70, 13, 70, 221, 248, 40, 128, 255, 247, 251, 251,
-        1, 170, 1, 70, 32, 70, 23, 240, 184, 249, 214, 248, 40, 160, 129, 70,
-        154, 248, 0, 48, 218, 7, 21, 213, 0, 40, 49, 208, 208, 248, 204, 48,
-        91, 5, 55, 212, 208, 248, 244, 48, 91, 142, 3, 244, 64, 67, 163, 245,
-        64, 76, 220, 241, 0, 3, 67, 235, 12, 3, 14, 51, 0, 235, 131, 3, 88,
-        104, 25, 224, 120, 177, 49, 70, 32, 70, 255, 247, 89, 252, 3, 28, 24,
-        191, 1, 35, 32, 70, 73, 70, 82, 70, 44, 240, 50, 252, 16, 177, 208,
-        248, 16, 144, 5, 224, 32, 70, 177, 106, 23, 240, 213, 249, 129, 70,
-        0, 32, 185, 241, 0, 15, 3, 208, 153, 248, 68, 48, 133, 248, 33, 48,
-        168, 98, 15, 177, 199, 248, 0, 144, 184, 241, 0, 15, 4, 208, 200, 248,
-        0, 0, 1, 224, 0, 32, 239, 231, 189, 232, 252, 135, 0, 0, 248, 181, 205,
-        178, 107, 30, 14, 45, 140, 191, 79, 244, 64, 71, 0, 39, 222, 43, 6,
-        70, 18, 216, 14, 45, 7, 216, 30, 72, 41, 70, 249, 243, 123, 242, 4,
-        28, 24, 191, 1, 36, 9, 224, 27, 72, 41, 70, 249, 243, 115, 242, 0, 40,
-        20, 191, 5, 36, 0, 36, 0, 224, 0, 36, 224, 7, 37, 213, 69, 244, 128,
-        85, 61, 67, 214, 248, 92, 1, 41, 70, 68, 240, 201, 221, 8, 177, 68,
-        240, 2, 4, 161, 7, 24, 213, 41, 70, 214, 248, 92, 1, 68, 240, 91, 220,
-        41, 70, 1, 40, 214, 248, 92, 1, 8, 191, 68, 240, 8, 4, 68, 240, 190,
-        220, 8, 177, 68, 240, 64, 4, 214, 248, 92, 1, 41, 70, 68, 240, 28, 220,
-        8, 177, 68, 240, 32, 4, 32, 70, 248, 189, 0, 191, 170, 201, 135, 0,
-        198, 201, 135, 0, 56, 181, 4, 70, 212, 248, 52, 19, 128, 104, 13, 240,
-        249, 223, 212, 248, 60, 21, 208, 241, 1, 5, 160, 104, 56, 191, 0, 37,
-        13, 240, 240, 223, 0, 185, 1, 53, 212, 248, 116, 52, 160, 104, 211,
-        248, 48, 17, 13, 240, 231, 223, 0, 185, 1, 53, 40, 70, 56, 189, 56,
-        181, 13, 70, 128, 179, 121, 179, 131, 121, 4, 104, 99, 187, 212, 248,
-        108, 50, 26, 122, 66, 179, 211, 248, 4, 49, 27, 120, 35, 179, 35, 104,
-        147, 248, 120, 48, 3, 179, 148, 248, 160, 55, 235, 185, 148, 248, 208,
-        55, 211, 177, 148, 248, 184, 55, 35, 177, 160, 104, 212, 248, 180, 23,
-        13, 240, 194, 223, 170, 139, 160, 104, 18, 244, 0, 82, 24, 191, 13,
-        34, 212, 248, 180, 23, 0, 35, 13, 240, 145, 223, 1, 35, 0, 34, 132,
-        248, 184, 55, 132, 248, 208, 39, 132, 248, 160, 55, 56, 189, 45, 233,
-        240, 65, 164, 176, 144, 70, 6, 70, 42, 168, 37, 200, 205, 248, 32, 128,
-        3, 144, 7, 136, 12, 70, 181, 248, 0, 192, 184, 248, 12, 128, 7, 244,
-        128, 78, 9, 147, 180, 248, 68, 48, 205, 248, 64, 224, 0, 235, 12, 14,
-        204, 235, 8, 12, 205, 248, 20, 192, 173, 248, 116, 48, 178, 248, 12,
-        192, 62, 248, 2, 60, 141, 248, 108, 192, 195, 243, 192, 19, 79, 240,
-        0, 12, 23, 244, 128, 127, 141, 248, 57, 48, 113, 104, 173, 248, 40,
-        112, 205, 248, 16, 224, 205, 248, 24, 128, 141, 248, 56, 192, 0, 241,
-        16, 3, 3, 209, 4, 48, 31, 147, 32, 144, 2, 224, 10, 48, 31, 144, 32,
-        147, 0, 35, 17, 147, 19, 123, 48, 70, 0, 147, 34, 70, 3, 171, 97, 240,
-        181, 216, 16, 155, 48, 185, 243, 177, 212, 248, 116, 49, 1, 51, 196,
-        248, 116, 49, 24, 224, 35, 177, 212, 248, 112, 49, 1, 51, 196, 248,
-        112, 49, 8, 155, 17, 152, 155, 104, 30, 147, 136, 177, 3, 122, 4, 43,
-        13, 209, 48, 70, 3, 169, 97, 240, 52, 217, 17, 155, 42, 136, 147, 249,
-        14, 48, 211, 24, 43, 128, 2, 224, 79, 240, 255, 48, 0, 224, 0, 32, 36,
-        176, 189, 232, 240, 129, 247, 181, 9, 155, 21, 70, 155, 137, 6, 70,
-        26, 10, 66, 234, 3, 35, 21, 74, 27, 178, 147, 66, 12, 70, 13, 209, 97,
-        177, 145, 248, 80, 51, 75, 177, 41, 70, 6, 34, 0, 35, 255, 247, 102,
-        252, 24, 177, 48, 70, 33, 70, 60, 240, 27, 223, 167, 121, 159, 185,
-        32, 70, 10, 153, 88, 240, 99, 220, 212, 248, 4, 49, 147, 248, 72, 48,
-        83, 177, 41, 70, 112, 104, 250, 247, 234, 255, 1, 33, 3, 70, 58, 70,
-        32, 70, 0, 151, 88, 240, 191, 220, 0, 32, 254, 189, 0, 191, 142, 136,
-        255, 255, 56, 181, 160, 248, 72, 20, 4, 70, 208, 248, 92, 1, 13, 70,
-        24, 240, 231, 249, 212, 248, 116, 20, 75, 123, 35, 177, 32, 70, 14,
-        49, 42, 70, 45, 240, 64, 255, 33, 106, 32, 70, 46, 240, 7, 248, 32,
-        70, 23, 240, 45, 221, 212, 248, 16, 7, 189, 232, 56, 64, 47, 240, 212,
-        189, 112, 181, 4, 104, 13, 70, 212, 248, 108, 50, 152, 66, 62, 209,
-        35, 104, 26, 126, 0, 42, 58, 208, 147, 248, 120, 48, 0, 43, 54, 208,
-        148, 248, 46, 50, 65, 185, 115, 179, 160, 104, 212, 248, 236, 17, 13,
-        240, 207, 222, 132, 248, 46, 82, 38, 224, 147, 177, 212, 248, 236, 17,
-        160, 104, 13, 240, 198, 222, 0, 35, 132, 248, 46, 50, 252, 243, 101,
-        244, 196, 248, 48, 2, 5, 224, 160, 104, 212, 248, 236, 17, 79, 244,
-        122, 114, 11, 224, 148, 248, 46, 50, 155, 185, 32, 70, 166, 104, 212,
-        248, 236, 81, 24, 240, 191, 216, 41, 70, 2, 70, 48, 70, 1, 35, 13, 240,
-        131, 222, 1, 35, 132, 248, 46, 50, 112, 189, 148, 248, 46, 50, 0, 43,
-        226, 208, 112, 189, 56, 181, 4, 70, 5, 104, 255, 247, 255, 249, 33,
-        70, 2, 70, 40, 70, 59, 240, 82, 218, 128, 178, 56, 189, 25, 177, 3,
-        106, 27, 104, 153, 66, 6, 209, 67, 126, 0, 43, 20, 191, 0, 32, 111,
-        240, 10, 0, 112, 71, 111, 240, 12, 0, 112, 71, 19, 181, 7, 42, 12, 70,
-        204, 191, 89, 104, 0, 33, 97, 44, 10, 220, 96, 44, 20, 218, 93, 44,
-        18, 220, 92, 44, 15, 218, 60, 44, 13, 208, 74, 44, 24, 209, 10, 224,
-        170, 44, 8, 208, 2, 220, 168, 44, 18, 219, 10, 224, 194, 44, 2, 208,
-        195, 44, 13, 209, 5, 224, 0, 33, 2, 176, 189, 232, 16, 64, 255, 247,
-        205, 191, 0, 33, 10, 70, 11, 70, 0, 145, 31, 240, 177, 217, 0, 224,
-        0, 32, 2, 176, 16, 189, 248, 181, 0, 37, 15, 70, 6, 104, 44, 70, 8,
-        224, 214, 248, 168, 2, 57, 70, 64, 25, 248, 243, 115, 242, 56, 53, 56,
-        177, 1, 52, 51, 104, 147, 248, 184, 48, 156, 66, 241, 219, 111, 240,
-        29, 4, 32, 70, 248, 189, 45, 233, 240, 71, 138, 70, 17, 70, 152, 70,
-        145, 70, 4, 104, 255, 247, 223, 255, 3, 30, 5, 218, 35, 104, 0, 38,
-        147, 248, 184, 32, 53, 70, 59, 224, 212, 248, 172, 34, 56, 32, 66, 248,
-        35, 128, 212, 248, 168, 34, 0, 251, 3, 32, 67, 107, 1, 51, 67, 99, 0,
-        32, 189, 232, 240, 135, 212, 248, 168, 50, 6, 241, 56, 1, 159, 93, 152,
-        25, 31, 187, 73, 70, 31, 34, 248, 243, 144, 242, 212, 248, 168, 50,
-        12, 153, 158, 25, 8, 155, 198, 248, 32, 160, 179, 98, 9, 155, 56, 70,
-        115, 98, 10, 155, 243, 98, 11, 155, 51, 99, 212, 248, 4, 55, 67, 248,
-        53, 16, 3, 235, 197, 2, 13, 155, 83, 96, 115, 107, 1, 51, 115, 99, 212,
-        248, 172, 50, 67, 248, 37, 128, 189, 232, 240, 135, 1, 53, 14, 70, 149,
-        66, 208, 219, 111, 240, 21, 0, 189, 232, 240, 135, 45, 233, 240, 65,
-        7, 104, 12, 70, 21, 70, 152, 70, 215, 248, 176, 2, 0, 38, 4, 224, 3,
-        104, 156, 66, 11, 208, 6, 70, 0, 105, 0, 40, 248, 209, 17, 224, 0, 35,
-        3, 97, 14, 177, 48, 97, 1, 224, 199, 248, 176, 2, 6, 155, 128, 232,
-        48, 1, 195, 96, 0, 32, 189, 232, 240, 129, 111, 240, 21, 0, 189, 232,
-        240, 129, 20, 32, 252, 247, 199, 255, 0, 40, 232, 209, 245, 231, 45,
-        233, 248, 67, 7, 104, 12, 70, 21, 70, 152, 70, 215, 248, 180, 98, 79,
-        240, 0, 9, 12, 224, 32, 70, 49, 104, 248, 243, 219, 241, 40, 185, 115,
-        104, 157, 66, 2, 209, 179, 104, 152, 69, 25, 208, 177, 70, 246, 104,
-        0, 46, 240, 209, 16, 32, 252, 247, 167, 255, 120, 177, 128, 232, 48,
-        1, 198, 96, 185, 241, 0, 15, 4, 208, 201, 248, 12, 0, 48, 70, 189, 232,
-        248, 131, 199, 248, 180, 2, 72, 70, 189, 232, 248, 131, 111, 240, 21,
-        0, 189, 232, 248, 131, 45, 233, 240, 79, 208, 248, 160, 81, 143, 176,
-        153, 70, 0, 35, 11, 149, 4, 70, 15, 70, 221, 248, 100, 160, 12, 147,
-        155, 70, 29, 70, 148, 70, 152, 70, 54, 224, 212, 248, 4, 39, 238, 0,
-        82, 248, 53, 0, 176, 177, 57, 70, 205, 248, 28, 192, 19, 240, 47, 218,
-        221, 248, 28, 192, 3, 70, 32, 179, 193, 136, 79, 246, 255, 114, 145,
-        66, 29, 208, 212, 248, 4, 55, 50, 70, 154, 24, 82, 104, 6, 70, 224,
-        70, 9, 146, 36, 224, 212, 248, 168, 34, 90, 68, 16, 106, 136, 177, 57,
-        70, 205, 248, 28, 192, 19, 240, 19, 218, 221, 248, 28, 192, 3, 70, 64,
-        177, 212, 248, 168, 50, 6, 70, 91, 68, 224, 70, 155, 106, 14, 224, 79,
-        240, 1, 8, 1, 53, 11, 241, 56, 11, 34, 104, 146, 248, 184, 32, 149,
-        66, 195, 219, 30, 70, 67, 70, 224, 70, 0, 43, 46, 209, 9, 147, 35, 104,
-        147, 248, 184, 48, 157, 66, 26, 218, 42, 224, 212, 248, 168, 50, 91,
-        68, 27, 106, 131, 177, 212, 248, 4, 39, 82, 248, 53, 32, 90, 177, 24,
-        70, 57, 70, 19, 240, 228, 217, 48, 177, 212, 248, 168, 50, 6, 70, 91,
-        68, 155, 106, 9, 147, 12, 224, 1, 53, 11, 241, 56, 11, 2, 224, 0, 37,
-        171, 70, 48, 70, 35, 104, 147, 248, 184, 48, 157, 66, 221, 219, 6, 70,
-        35, 104, 147, 248, 184, 48, 157, 66, 2, 219, 111, 240, 22, 3, 32, 224,
-        184, 241, 0, 15, 2, 209, 221, 248, 96, 128, 209, 70, 51, 137, 27, 177,
-        8, 43, 12, 191, 83, 70, 4, 35, 10, 147, 157, 248, 104, 32, 179, 136,
-        91, 0, 2, 177, 1, 51, 67, 72, 57, 70, 7, 34, 8, 147, 248, 243, 74, 241,
-        132, 70, 0, 40, 70, 209, 185, 241, 3, 15, 3, 220, 111, 240, 13, 3, 12,
-        147, 107, 224, 4, 34, 65, 70, 13, 168, 205, 248, 28, 192, 246, 247,
-        37, 252, 32, 70, 13, 153, 12, 170, 22, 240, 252, 253, 12, 155, 131,
-        70, 30, 51, 221, 248, 28, 192, 26, 209, 8, 154, 208, 7, 23, 213, 1,
-        35, 0, 147, 32, 70, 13, 153, 98, 70, 99, 70, 59, 240, 57, 222, 131,
-        70, 24, 185, 111, 240, 26, 3, 12, 147, 9, 224, 32, 70, 89, 70, 22, 240,
-        171, 255, 12, 144, 24, 177, 32, 70, 89, 70, 60, 240, 43, 216, 12, 155,
-        0, 43, 59, 209, 8, 155, 7, 55, 217, 7, 8, 241, 4, 8, 169, 241, 4, 9,
-        4, 213, 24, 154, 170, 241, 4, 10, 4, 50, 24, 146, 219, 248, 12, 48,
-        27, 147, 8, 154, 27, 155, 2, 240, 1, 11, 1, 147, 32, 70, 49, 70, 24,
-        154, 83, 70, 205, 248, 0, 176, 31, 240, 17, 216, 12, 144, 224, 185,
-        24, 154, 141, 232, 0, 3, 2, 146, 10, 154, 212, 248, 172, 50, 4, 146,
-        27, 154, 205, 248, 12, 160, 5, 146, 83, 248, 37, 0, 49, 70, 8, 154,
-        59, 70, 9, 157, 168, 71, 12, 144, 187, 241, 0, 15, 5, 208, 11, 157,
-        43, 120, 19, 177, 40, 70, 106, 240, 26, 219, 12, 152, 40, 177, 0, 241,
-        52, 3, 52, 43, 156, 191, 35, 104, 152, 102, 15, 176, 189, 232, 240,
-        143, 0, 191, 70, 62, 136, 0, 45, 233, 240, 65, 31, 70, 142, 176, 6,
-        70, 13, 70, 20, 70, 0, 35, 22, 224, 12, 171, 0, 34, 0, 147, 2, 146,
-        4, 35, 48, 70, 46, 73, 13, 170, 1, 147, 3, 151, 255, 247, 201, 254,
-        0, 40, 79, 209, 13, 155, 14, 169, 189, 248, 48, 128, 1, 235, 67, 2,
-        34, 248, 40, 140, 1, 51, 13, 147, 13, 155, 7, 43, 228, 217, 41, 70,
-        34, 70, 8, 168, 248, 243, 67, 242, 0, 37, 33, 76, 45, 224, 161, 136,
-        170, 1, 0, 35, 137, 24, 12, 147, 137, 178, 13, 147, 180, 248, 8, 192,
-        26, 70, 19, 224, 8, 9, 8, 40, 44, 216, 13, 241, 56, 8, 8, 235, 64, 0,
-        48, 248, 40, 140, 1, 240, 15, 0, 72, 250, 0, 240, 0, 240, 1, 0, 144,
-        64, 1, 49, 3, 67, 137, 178, 1, 50, 98, 69, 233, 211, 13, 146, 226, 136,
-        12, 147, 63, 42, 1, 209, 1, 53, 173, 178, 8, 168, 13, 73, 58, 70, 248,
-        243, 41, 242, 12, 52, 39, 104, 0, 47, 206, 209, 51, 104, 8, 168, 211,
-        248, 216, 48, 8, 73, 90, 108, 248, 243, 29, 242, 56, 70, 1, 224, 79,
-        240, 255, 48, 14, 176, 189, 232, 240, 129, 254, 215, 3, 0, 188, 214,
-        3, 0, 6, 216, 3, 0, 16, 216, 3, 0, 248, 181, 3, 104, 12, 70, 211, 248,
-        136, 112, 195, 105, 224, 49, 0, 105, 157, 106, 22, 70, 58, 240, 50,
-        216, 3, 70, 40, 91, 24, 26, 128, 178, 32, 177, 196, 55, 186, 89, 18,
-        24, 186, 81, 43, 83, 248, 189, 139, 105, 67, 244, 0, 115, 139, 97, 195,
-        104, 211, 248, 128, 49, 211, 24, 75, 98, 112, 71, 19, 181, 0, 36, 0,
-        148, 31, 240, 66, 223, 28, 189, 0, 0, 145, 248, 33, 0, 145, 248, 32,
-        48, 130, 248, 33, 0, 136, 106, 130, 248, 32, 48, 144, 98, 200, 106,
-        0, 35, 208, 98, 136, 139, 129, 248, 32, 48, 144, 131, 72, 106, 80, 98,
-        72, 107, 80, 99, 75, 99, 139, 139, 136, 105, 147, 131, 9, 75, 3, 64,
-        136, 127, 147, 97, 0, 240, 79, 0, 144, 119, 200, 127, 32, 240, 49, 0,
-        208, 119, 136, 105, 0, 240, 0, 64, 3, 67, 147, 97, 11, 107, 19, 99,
-        112, 71, 242, 70, 128, 95, 45, 233, 240, 79, 137, 176, 8, 171, 7, 70,
-        0, 32, 67, 248, 4, 13, 144, 104, 13, 105, 176, 248, 8, 192, 176, 248,
-        10, 224, 176, 248, 0, 128, 176, 248, 2, 144, 176, 248, 4, 160, 176,
-        248, 6, 176, 14, 48, 144, 96, 144, 137, 14, 70, 14, 56, 144, 129, 215,
-        248, 160, 1, 20, 70, 205, 248, 12, 192, 205, 248, 16, 224, 106, 240,
-        129, 217, 42, 124, 1, 136, 3, 70, 5, 145, 221, 248, 12, 192, 18, 179,
-        214, 248, 164, 33, 210, 7, 13, 213, 4, 154, 160, 248, 134, 128, 160,
-        248, 136, 144, 160, 248, 138, 160, 160, 248, 142, 176, 160, 248, 144,
-        192, 160, 248, 146, 32, 16, 224, 170, 121, 50, 185, 160, 248, 134, 128,
-        160, 248, 136, 144, 160, 248, 138, 160, 7, 224, 221, 248, 16, 224, 160,
-        248, 134, 176, 160, 248, 136, 192, 160, 248, 138, 224, 179, 248, 76,
-        32, 2, 240, 7, 8, 184, 241, 4, 15, 6, 209, 56, 70, 41, 70, 3, 147, 14,
-        240, 141, 217, 3, 155, 14, 224, 183, 248, 62, 19, 34, 244, 254, 66,
-        72, 28, 167, 248, 62, 3, 72, 2, 71, 246, 224, 113, 34, 240, 224, 2,
-        1, 64, 66, 234, 1, 0, 163, 248, 76, 0, 162, 139, 209, 4, 16, 212, 161,
-        105, 72, 5, 13, 212, 5, 153, 1, 240, 16, 2, 146, 178, 90, 185, 225,
-        137, 1, 240, 7, 1, 96, 49, 6, 235, 65, 1, 202, 136, 80, 28, 200, 128,
-        18, 1, 163, 248, 140, 32, 162, 139, 179, 248, 140, 16, 34, 244, 126,
-        98, 34, 240, 31, 2, 66, 234, 17, 18, 184, 104, 162, 131, 3, 147, 14,
-        240, 39, 216, 16, 240, 8, 15, 3, 155, 3, 208, 162, 139, 66, 244, 0,
-        82, 162, 131, 162, 105, 145, 5, 9, 213, 161, 140, 163, 248, 66, 16,
-        225, 140, 163, 248, 68, 16, 25, 136, 65, 244, 0, 81, 25, 128, 7, 153,
-        10, 67, 162, 97, 170, 121, 42, 185, 213, 248, 72, 35, 242, 177, 146,
-        123, 210, 7, 27, 213, 150, 248, 231, 32, 194, 177, 184, 241, 4, 15,
-        21, 208, 28, 74, 150, 248, 218, 16, 18, 248, 8, 32, 118, 51, 81, 250,
-        2, 242, 18, 240, 1, 15, 79, 240, 1, 2, 0, 146, 56, 70, 49, 70, 34, 70,
-        2, 208, 46, 240, 16, 223, 1, 224, 47, 240, 105, 217, 213, 248, 28, 49,
-        67, 185, 213, 248, 24, 35, 197, 248, 32, 33, 213, 248, 28, 35, 197,
-        248, 36, 33, 13, 224, 3, 241, 35, 2, 85, 248, 50, 16, 3, 241, 36, 2,
-        69, 248, 50, 16, 5, 235, 195, 2, 210, 248, 28, 17, 194, 248, 36, 17,
-        1, 51, 3, 240, 63, 3, 197, 248, 28, 49, 9, 176, 189, 232, 240, 143,
-        0, 191, 84, 194, 135, 0, 112, 181, 4, 70, 144, 137, 157, 104, 6, 10,
-        70, 234, 0, 38, 165, 241, 8, 0, 152, 96, 152, 137, 182, 178, 8, 48,
-        152, 129, 16, 136, 37, 248, 8, 12, 80, 136, 37, 248, 6, 12, 144, 136,
-        37, 248, 4, 12, 208, 136, 37, 248, 2, 12, 16, 137, 40, 128, 82, 137,
-        8, 70, 106, 128, 25, 70, 250, 247, 102, 251, 14, 56, 128, 178, 3, 10,
-        67, 234, 0, 32, 170, 35, 171, 113, 235, 113, 3, 35, 43, 114, 0, 35,
-        168, 128, 107, 114, 171, 114, 49, 70, 32, 70, 254, 247, 42, 254, 51,
-        10, 0, 40, 20, 191, 248, 32, 0, 32, 67, 234, 6, 38, 232, 114, 174, 129,
-        112, 189, 45, 233, 240, 67, 139, 104, 12, 70, 23, 70, 202, 137, 73,
-        104, 35, 240, 127, 67, 193, 243, 20, 1, 35, 244, 96, 3, 91, 26, 179,
-        43, 133, 176, 6, 70, 208, 248, 4, 144, 2, 240, 7, 8, 4, 217, 80, 6,
-        2, 212, 163, 120, 1, 43, 61, 217, 72, 70, 180, 33, 252, 247, 105, 252,
-        5, 70, 152, 185, 51, 104, 211, 248, 136, 48, 26, 106, 1, 50, 26, 98,
-        47, 177, 59, 105, 27, 177, 219, 104, 26, 106, 1, 50, 26, 98, 215, 248,
-        92, 49, 0, 36, 1, 51, 199, 248, 92, 49, 122, 224, 131, 104, 33, 70,
-        180, 51, 131, 96, 131, 137, 42, 70, 180, 59, 131, 129, 48, 104, 255,
-        247, 96, 254, 235, 137, 161, 104, 35, 240, 7, 3, 72, 234, 3, 3, 235,
-        129, 1, 241, 14, 3, 163, 96, 163, 137, 168, 104, 14, 59, 163, 129, 171,
-        137, 14, 56, 14, 51, 168, 96, 171, 129, 14, 34, 246, 247, 96, 249, 36,
-        136, 172, 130, 44, 70, 161, 104, 184, 241, 0, 15, 44, 208, 122, 104,
-        42, 75, 19, 64, 67, 187, 214, 248, 84, 50, 219, 177, 139, 137, 26, 10,
-        66, 234, 3, 35, 27, 178, 19, 245, 254, 79, 19, 208, 12, 34, 104, 70,
-        246, 247, 70, 249, 165, 104, 163, 137, 40, 31, 4, 51, 163, 129, 160,
-        96, 105, 70, 12, 34, 246, 247, 60, 249, 79, 234, 72, 24, 129, 35, 43,
-        129, 165, 248, 10, 128, 51, 104, 91, 107, 51, 177, 150, 248, 56, 50,
-        27, 185, 227, 137, 35, 240, 7, 3, 227, 129, 162, 104, 147, 137, 25,
-        10, 65, 234, 3, 35, 155, 178, 64, 242, 220, 81, 139, 66, 27, 217, 72,
-        246, 142, 1, 139, 66, 161, 105, 2, 209, 65, 240, 16, 1, 5, 224, 72,
-        246, 180, 0, 131, 66, 6, 209, 65, 240, 0, 65, 163, 127, 161, 97, 99,
-        240, 127, 3, 163, 119, 163, 105, 48, 70, 67, 240, 8, 3, 163, 97, 73,
-        70, 35, 70, 255, 247, 18, 255, 32, 70, 5, 176, 189, 232, 240, 131, 64,
-        0, 1, 0, 56, 181, 147, 137, 21, 70, 7, 43, 24, 217, 148, 104, 4, 241,
-        14, 1, 16, 240, 206, 217, 144, 177, 171, 104, 3, 241, 8, 2, 170, 96,
-        170, 137, 8, 58, 170, 129, 226, 136, 218, 129, 34, 137, 26, 130, 98,
-        137, 90, 130, 34, 136, 26, 129, 98, 136, 90, 129, 164, 136, 156, 129,
-        56, 189, 0, 0, 56, 181, 12, 70, 5, 70, 8, 70, 63, 73, 247, 243, 169,
-        247, 63, 73, 32, 70, 247, 243, 165, 247, 62, 73, 32, 70, 247, 243, 161,
-        247, 61, 73, 32, 70, 247, 243, 157, 247, 60, 73, 32, 70, 247, 243, 153,
-        247, 59, 73, 32, 70, 247, 243, 149, 247, 32, 70, 57, 73, 247, 243, 145,
-        247, 213, 248, 52, 1, 14, 240, 244, 249, 32, 185, 213, 248, 56, 1, 41,
-        240, 46, 222, 24, 177, 32, 70, 51, 73, 247, 243, 131, 247, 213, 248,
-        52, 1, 14, 240, 230, 249, 24, 177, 32, 70, 48, 73, 247, 243, 122, 247,
-        213, 248, 56, 1, 41, 240, 28, 222, 24, 177, 32, 70, 44, 73, 247, 243,
-        113, 247, 213, 248, 48, 1, 42, 240, 233, 222, 24, 177, 32, 70, 41, 73,
-        247, 243, 104, 247, 213, 248, 48, 1, 15, 240, 20, 254, 24, 177, 32,
-        70, 37, 73, 247, 243, 95, 247, 37, 73, 32, 70, 247, 243, 91, 247, 36,
-        73, 32, 70, 247, 243, 87, 247, 35, 73, 32, 70, 247, 243, 83, 247, 34,
-        73, 32, 70, 247, 243, 79, 247, 43, 106, 24, 105, 29, 240, 77, 249, 130,
-        7, 7, 213, 30, 73, 32, 70, 247, 243, 69, 247, 32, 70, 28, 73, 247, 243,
-        65, 247, 32, 70, 27, 73, 247, 243, 61, 247, 32, 70, 26, 73, 247, 243,
-        57, 247, 26, 73, 32, 70, 247, 243, 53, 247, 40, 240, 62, 248, 24, 73,
-        2, 70, 32, 70, 189, 232, 56, 64, 247, 243, 44, 183, 31, 216, 3, 0, 35,
-        216, 3, 0, 40, 216, 3, 0, 45, 216, 3, 0, 54, 216, 3, 0, 63, 216, 3,
-        0, 67, 216, 3, 0, 72, 216, 3, 0, 79, 216, 3, 0, 89, 216, 3, 0, 99, 216,
-        3, 0, 108, 216, 3, 0, 117, 216, 3, 0, 132, 216, 3, 0, 138, 216, 3, 0,
-        145, 216, 3, 0, 152, 216, 3, 0, 161, 216, 3, 0, 174, 216, 3, 0, 179,
-        216, 3, 0, 189, 216, 3, 0, 194, 216, 3, 0, 48, 181, 133, 176, 5, 70,
-        104, 70, 12, 70, 247, 243, 227, 246, 40, 70, 105, 70, 255, 247, 69,
-        255, 32, 70, 5, 176, 48, 189, 203, 136, 19, 244, 192, 111, 12, 191,
-        0, 32, 1, 32, 112, 71, 112, 181, 21, 70, 0, 41, 66, 208, 0, 42, 64,
-        208, 140, 104, 0, 44, 61, 208, 0, 38, 22, 98, 86, 98, 148, 248, 77,
-        32, 148, 248, 76, 48, 64, 104, 67, 234, 2, 35, 171, 128, 180, 248, 68,
-        32, 180, 248, 66, 48, 67, 234, 2, 67, 43, 96, 98, 120, 35, 120, 67,
-        234, 2, 35, 235, 128, 226, 120, 163, 120, 172, 97, 67, 234, 2, 35, 43,
-        129, 112, 35, 107, 97, 4, 241, 118, 3, 235, 97, 4, 241, 38, 3, 171,
-        98, 4, 241, 112, 3, 235, 98, 98, 122, 35, 122, 67, 234, 2, 35, 107,
-        129, 163, 122, 226, 122, 67, 234, 2, 35, 171, 129, 180, 248, 140, 48,
-        27, 9, 43, 134, 250, 247, 110, 249, 118, 56, 104, 130, 238, 129, 180,
-        248, 70, 48, 43, 130, 112, 189, 48, 181, 145, 176, 5, 70, 12, 70, 3,
-        170, 255, 247, 177, 255, 0, 35, 40, 70, 33, 70, 3, 170, 0, 147, 254,
-        247, 217, 255, 17, 176, 48, 189, 139, 122, 200, 106, 3, 240, 3, 3, 2,
-        43, 3, 209, 0, 120, 0, 240, 127, 0, 112, 71, 40, 240, 77, 186, 16, 181,
-        12, 70, 137, 105, 36, 240, 144, 216, 163, 105, 27, 136, 227, 128, 16,
-        189, 208, 248, 104, 18, 0, 34, 139, 88, 83, 177, 152, 121, 64, 185,
-        24, 122, 48, 177, 24, 124, 32, 185, 211, 248, 252, 48, 147, 248, 137,
-        48, 35, 177, 4, 50, 32, 42, 239, 209, 0, 32, 112, 71, 1, 32, 112, 71,
-        144, 248, 115, 34, 10, 177, 255, 247, 228, 191, 144, 248, 113, 2, 112,
-        71, 0, 0, 10, 75, 16, 181, 1, 240, 96, 4, 100, 17, 51, 248, 20, 64,
-        8, 75, 1, 240, 15, 1, 91, 92, 160, 248, 214, 64, 128, 248, 216, 48,
-        26, 177, 128, 248, 217, 48, 128, 248, 218, 48, 16, 189, 0, 191, 246,
-        215, 3, 0, 216, 215, 3, 0, 45, 233, 240, 79, 3, 240, 1, 3, 169, 176,
-        4, 70, 21, 147, 212, 248, 108, 52, 16, 105, 27, 104, 14, 70, 195, 88,
-        208, 248, 68, 19, 27, 120, 145, 70, 12, 147, 212, 248, 112, 52, 178,
-        104, 27, 104, 25, 145, 195, 88, 7, 144, 27, 120, 8, 146, 22, 147, 19,
-        136, 96, 104, 10, 147, 3, 240, 12, 3, 155, 8, 2, 43, 8, 191, 10, 153,
-        18, 147, 10, 154, 12, 191, 193, 243, 192, 19, 0, 35, 219, 178, 26, 147,
-        2, 244, 64, 115, 163, 245, 64, 117, 107, 66, 67, 235, 5, 3, 49, 70,
-        28, 147, 55, 159, 250, 247, 207, 248, 54, 155, 4, 48, 13, 144, 131,
-        177, 27, 122, 11, 43, 7, 209, 35, 104, 147, 248, 177, 48, 75, 177, 54,
-        152, 131, 121, 7, 43, 5, 216, 54, 153, 13, 154, 145, 249, 15, 48, 210,
-        24, 13, 146, 212, 248, 180, 49, 0, 43, 45, 218, 54, 155, 3, 179, 27,
-        122, 2, 43, 31, 209, 148, 248, 148, 34, 242, 185, 7, 152, 3, 109, 19,
-        240, 8, 3, 28, 209, 54, 153, 138, 121, 33, 104, 209, 248, 188, 16, 138,
-        66, 23, 210, 3, 42, 21, 217, 11, 42, 19, 216, 178, 105, 144, 0, 16,
-        212, 51, 154, 1, 42, 15, 209, 13, 155, 1, 32, 8, 51, 13, 147, 4, 224,
-        54, 154, 4, 224, 0, 35, 4, 224, 0, 32, 11, 144, 5, 224, 11, 146, 3,
-        224, 11, 147, 1, 224, 0, 33, 11, 145, 181, 104, 179, 137, 170, 31, 118,
-        51, 165, 241, 118, 0, 29, 146, 179, 129, 0, 33, 112, 34, 176, 96, 24,
-        144, 247, 243, 60, 243, 179, 139, 217, 4, 2, 212, 178, 105, 82, 5, 2,
-        213, 27, 5, 27, 13, 32, 224, 217, 248, 4, 32, 161, 75, 19, 64, 187,
-        177, 10, 153, 1, 240, 252, 3, 136, 43, 18, 209, 8, 154, 19, 121, 216,
-        7, 14, 212, 51, 152, 242, 137, 65, 30, 2, 240, 7, 2, 50, 152, 96, 50,
-        9, 235, 66, 2, 136, 66, 211, 136, 6, 209, 89, 28, 209, 128, 3, 224,
-        18, 153, 1, 41, 6, 209, 17, 224, 18, 152, 1, 40, 14, 208, 0, 33, 5,
-        145, 2, 224, 16, 34, 5, 146, 0, 35, 50, 152, 27, 1, 155, 178, 0, 240,
-        15, 2, 8, 153, 19, 67, 203, 130, 1, 224, 0, 34, 5, 146, 8, 155, 160,
-        104, 218, 138, 179, 139, 35, 244, 126, 99, 35, 240, 31, 3, 67, 234,
-        18, 19, 179, 131, 13, 240, 107, 220, 1, 7, 3, 213, 179, 139, 67, 244,
-        0, 83, 179, 131, 52, 152, 4, 40, 8, 209, 32, 70, 7, 153, 53, 248, 42,
-        44, 13, 240, 138, 221, 173, 248, 152, 0, 25, 224, 50, 153, 51, 152,
-        1, 240, 15, 2, 180, 248, 62, 51, 65, 30, 50, 152, 66, 234, 3, 18, 136,
-        66, 146, 178, 2, 209, 1, 51, 164, 248, 62, 51, 52, 153, 82, 1, 71, 246,
-        224, 115, 19, 64, 1, 240, 7, 2, 19, 67, 173, 248, 152, 48, 153, 248,
-        231, 48, 59, 185, 10, 154, 2, 240, 252, 3, 128, 43, 2, 208, 7, 152,
-        131, 121, 27, 185, 5, 153, 65, 240, 32, 1, 5, 145, 100, 75, 59, 64,
-        0, 43, 64, 240, 130, 128, 7, 240, 64, 114, 178, 241, 128, 127, 0, 240,
-        129, 128, 18, 154, 1, 42, 48, 217, 179, 105, 218, 6, 45, 212, 0, 43,
-        43, 219, 150, 249, 31, 48, 0, 43, 39, 219, 34, 106, 88, 75, 210, 248,
-        72, 128, 8, 234, 3, 3, 35, 185, 8, 240, 64, 115, 179, 241, 128, 127,
-        3, 209, 8, 152, 3, 121, 223, 7, 102, 212, 210, 248, 68, 128, 80, 75,
-        8, 234, 3, 3, 35, 185, 8, 240, 64, 115, 179, 241, 128, 127, 4, 209,
-        8, 153, 11, 121, 19, 240, 1, 3, 89, 208, 8, 154, 19, 121, 216, 7, 3,
-        212, 217, 248, 8, 48, 25, 7, 5, 213, 153, 248, 80, 112, 7, 240, 127,
-        7, 184, 70, 73, 224, 2, 35, 141, 248, 134, 48, 39, 171, 0, 147, 212,
-        248, 96, 1, 31, 171, 73, 70, 38, 170, 43, 240, 179, 251, 10, 152, 221,
-        248, 124, 128, 0, 240, 252, 3, 72, 43, 32, 159, 1, 208, 200, 43, 11,
-        209, 65, 70, 7, 152, 0, 34, 32, 240, 232, 221, 153, 248, 80, 112, 128,
-        70, 7, 240, 127, 7, 0, 35, 8, 224, 179, 105, 50, 153, 67, 240, 0, 99,
-        179, 97, 209, 241, 1, 3, 56, 191, 0, 35, 189, 248, 156, 32, 210, 7,
-        3, 213, 178, 105, 66, 244, 0, 82, 178, 97, 34, 104, 146, 248, 229, 32,
-        186, 177, 212, 248, 228, 6, 73, 70, 189, 248, 152, 32, 4, 147, 94, 240,
-        186, 222, 4, 155, 17, 144, 13, 224, 0, 34, 184, 70, 17, 146, 19, 70,
-        8, 224, 184, 70, 3, 224, 71, 70, 0, 35, 0, 224, 71, 70, 17, 147, 0,
-        224, 17, 146, 34, 104, 212, 248, 116, 20, 146, 248, 79, 32, 145, 248,
-        12, 176, 18, 240, 3, 2, 0, 240, 188, 129, 138, 120, 1, 42, 9, 217, 32,
-        106, 144, 249, 77, 160, 170, 241, 1, 14, 222, 241, 0, 10, 74, 235, 14,
-        10, 1, 224, 79, 240, 0, 10, 1, 42, 95, 250, 138, 250, 24, 217, 34, 106,
-        146, 249, 77, 32, 1, 50, 19, 209, 217, 248, 4, 0, 16, 240, 128, 64,
-        15, 208, 1, 241, 14, 0, 2, 33, 4, 147, 248, 243, 149, 240, 0, 48, 24,
-        191, 1, 32, 4, 155, 4, 224, 64, 0, 1, 0, 255, 0, 0, 192, 0, 32, 24,
-        240, 64, 127, 192, 178, 95, 250, 136, 242, 7, 208, 31, 42, 2, 217, 32,
-        42, 7, 208, 85, 58, 7, 42, 4, 217, 28, 224, 167, 73, 138, 86, 0, 42,
-        24, 218, 184, 241, 0, 15, 21, 219, 40, 244, 128, 24, 40, 244, 64, 120,
-        24, 240, 64, 114, 9, 208, 186, 241, 0, 15, 3, 209, 178, 241, 128, 127,
-        3, 209, 16, 177, 72, 244, 128, 24, 4, 224, 187, 241, 1, 15, 8, 191,
-        72, 244, 128, 120, 23, 240, 64, 127, 250, 178, 7, 208, 31, 42, 2, 217,
-        32, 42, 7, 208, 85, 58, 7, 42, 4, 217, 27, 224, 146, 73, 138, 86, 0,
-        42, 23, 218, 0, 47, 21, 219, 39, 244, 128, 23, 39, 244, 64, 119, 23,
-        240, 64, 114, 9, 208, 186, 241, 0, 15, 3, 209, 178, 241, 128, 127, 3,
-        209, 16, 177, 71, 244, 128, 23, 4, 224, 187, 241, 1, 15, 8, 191, 71,
-        244, 128, 119, 180, 248, 72, 36, 2, 244, 96, 82, 178, 245, 192, 95,
-        67, 209, 24, 244, 224, 34, 15, 209, 24, 240, 64, 127, 10, 208, 217,
-        248, 4, 32, 2, 244, 0, 34, 0, 42, 20, 191, 79, 244, 0, 50, 79, 244,
-        128, 50, 1, 224, 79, 244, 128, 50, 24, 240, 64, 127, 10, 208, 148, 249,
-        196, 18, 72, 28, 31, 208, 117, 74, 117, 72, 82, 248, 33, 32, 48, 248,
-        17, 0, 26, 224, 112, 72, 95, 250, 136, 241, 65, 86, 0, 41, 5, 218, 148,
-        249, 195, 18, 72, 28, 6, 209, 0, 240, 59, 190, 148, 249, 194, 18, 72,
-        28, 0, 240, 59, 134, 105, 74, 105, 72, 82, 248, 33, 32, 48, 248, 17,
-        0, 0, 240, 53, 190, 79, 246, 255, 112, 95, 250, 136, 241, 19, 144, 32,
-        41, 8, 191, 79, 244, 0, 50, 15, 224, 95, 250, 136, 242, 249, 178, 79,
-        246, 255, 112, 32, 42, 8, 191, 79, 240, 128, 120, 19, 144, 79, 244,
-        128, 50, 32, 41, 8, 191, 79, 240, 128, 119, 39, 244, 224, 42, 23, 240,
-        64, 127, 40, 244, 224, 40, 72, 234, 2, 8, 24, 191, 74, 234, 2, 10, 34,
-        106, 8, 191, 74, 244, 128, 58, 81, 108, 82, 74, 10, 64, 0, 42, 83, 209,
-        1, 240, 64, 113, 177, 241, 128, 127, 78, 208, 24, 240, 64, 127, 148,
-        248, 32, 34, 4, 208, 1, 42, 2, 209, 72, 244, 0, 8, 2, 224, 10, 185,
-        40, 244, 0, 8, 26, 240, 64, 127, 148, 248, 32, 34, 5, 208, 1, 42, 3,
-        209, 74, 244, 0, 10, 0, 240, 237, 189, 0, 42, 64, 240, 234, 133, 42,
-        244, 0, 10, 0, 240, 230, 189, 217, 248, 4, 16, 200, 3, 43, 213, 217,
-        248, 8, 16, 9, 6, 39, 213, 1, 50, 37, 209, 24, 240, 64, 127, 15, 208,
-        95, 250, 136, 242, 162, 241, 87, 1, 1, 41, 9, 217, 99, 42, 7, 208, 100,
-        42, 5, 208, 101, 42, 3, 208, 102, 42, 24, 191, 72, 244, 128, 8, 26,
-        240, 64, 127, 15, 208, 95, 250, 138, 242, 162, 241, 87, 1, 1, 41, 9,
-        217, 99, 42, 7, 208, 100, 42, 5, 208, 101, 42, 3, 208, 102, 42, 24,
-        191, 74, 244, 128, 10, 32, 70, 73, 70, 4, 147, 19, 240, 92, 218, 24,
-        240, 64, 114, 4, 155, 77, 208, 22, 153, 2, 41, 8, 209, 8, 244, 224,
-        43, 171, 245, 0, 50, 210, 241, 0, 11, 75, 235, 2, 11, 1, 224, 79, 240,
-        0, 11, 95, 250, 136, 242, 31, 42, 4, 216, 7, 42, 148, 191, 0, 33, 1,
-        33, 10, 224, 32, 42, 6, 208, 162, 241, 85, 1, 7, 41, 148, 191, 0, 33,
-        1, 33, 0, 224, 0, 33, 201, 178, 57, 177, 153, 248, 14, 17, 33, 177,
-        153, 248, 15, 17, 0, 49, 24, 191, 1, 33, 24, 244, 0, 15, 16, 145, 34,
-        208, 31, 42, 4, 216, 7, 42, 140, 191, 0, 34, 1, 34, 17, 224, 32, 42,
-        13, 208, 85, 58, 7, 42, 140, 191, 0, 34, 1, 34, 8, 224, 224, 248, 135,
-        0, 172, 215, 3, 0, 238, 215, 3, 0, 255, 0, 0, 192, 1, 34, 210, 178,
-        0, 42, 12, 191, 2, 70, 4, 34, 14, 146, 4, 224, 14, 146, 147, 70, 16,
-        146, 0, 224, 14, 144, 26, 240, 64, 114, 41, 208, 26, 244, 0, 15, 40,
-        208, 95, 250, 138, 242, 31, 42, 4, 216, 7, 42, 140, 191, 0, 34, 1, 34,
-        9, 224, 32, 42, 5, 208, 85, 58, 7, 42, 140, 191, 0, 34, 1, 34, 0, 224,
-        1, 34, 210, 178, 0, 42, 24, 191, 4, 32, 17, 224, 40, 244, 224, 40, 39,
-        244, 224, 42, 79, 246, 255, 112, 72, 244, 128, 56, 74, 244, 128, 58,
-        19, 144, 15, 146, 14, 146, 147, 70, 16, 146, 2, 224, 15, 146, 0, 224,
-        15, 144, 163, 177, 7, 154, 51, 152, 210, 248, 28, 17, 1, 241, 36, 3,
-        66, 248, 51, 128, 2, 235, 193, 3, 194, 178, 195, 248, 36, 33, 1, 49,
-        7, 154, 1, 240, 63, 1, 194, 248, 28, 17, 201, 248, 48, 162, 24, 240,
-        64, 119, 3, 209, 95, 250, 136, 243, 27, 147, 3, 224, 64, 70, 39, 240,
-        131, 253, 27, 144, 18, 152, 2, 40, 0, 208, 136, 185, 180, 248, 88, 52,
-        13, 153, 153, 66, 2, 220, 179, 105, 91, 1, 12, 213, 8, 154, 16, 152,
-        19, 121, 3, 240, 1, 3, 0, 43, 8, 191, 1, 32, 23, 144, 4, 224, 16, 153,
-        23, 145, 1, 224, 16, 154, 23, 146, 35, 106, 89, 125, 65, 177, 12, 155,
-        51, 177, 47, 185, 136, 74, 95, 250, 136, 243, 211, 86, 0, 43, 7, 219,
-        35, 104, 147, 248, 79, 48, 152, 7, 39, 208, 55, 179, 22, 152, 32, 179,
-        51, 154, 1, 42, 14, 217, 12, 155, 0, 43, 12, 191, 79, 240, 48, 10, 79,
-        240, 22, 10, 179, 105, 74, 244, 128, 58, 35, 240, 0, 99, 179, 97, 208,
-        70, 18, 224, 137, 177, 12, 152, 120, 177, 103, 185, 8, 240, 127, 3,
-        2, 43, 10, 208, 4, 43, 8, 208, 11, 43, 6, 208, 22, 43, 24, 191, 79,
-        240, 1, 11, 1, 224, 79, 240, 1, 11, 24, 240, 64, 113, 12, 145, 26, 209,
-        8, 240, 127, 3, 22, 43, 22, 216, 107, 74, 154, 64, 19, 213, 21, 154,
-        98, 177, 95, 250, 136, 243, 2, 43, 11, 208, 217, 248, 16, 48, 147, 249,
-        24, 49, 19, 241, 255, 51, 24, 191, 1, 35, 0, 224, 21, 155, 14, 147,
-        1, 224, 12, 152, 14, 144, 26, 240, 64, 113, 20, 145, 27, 209, 10, 240,
-        127, 3, 22, 43, 23, 216, 92, 74, 154, 64, 20, 213, 21, 154, 106, 177,
-        95, 250, 138, 243, 2, 43, 12, 208, 217, 248, 16, 48, 147, 249, 24, 33,
-        18, 241, 255, 50, 24, 191, 1, 34, 15, 146, 4, 224, 20, 155, 15, 147,
-        1, 224, 20, 152, 15, 144, 18, 153, 217, 248, 4, 48, 2, 41, 8, 191, 201,
-        248, 104, 129, 19, 244, 128, 51, 74, 208, 148, 248, 17, 50, 0, 43, 70,
-        208, 148, 248, 21, 50, 0, 43, 66, 208, 22, 154, 3, 42, 48, 208, 12,
-        155, 75, 185, 8, 240, 127, 3, 2, 43, 44, 208, 4, 43, 44, 208, 11, 43,
-        45, 208, 22, 43, 46, 208, 8, 152, 3, 121, 19, 240, 1, 3, 43, 209, 10,
-        153, 1, 240, 252, 2, 136, 42, 41, 209, 52, 154, 3, 42, 38, 216, 179,
-        105, 28, 152, 67, 244, 128, 83, 179, 97, 5, 155, 8, 153, 0, 40, 12,
-        191, 24, 34, 30, 34, 67, 244, 160, 67, 5, 147, 139, 90, 35, 240, 96,
-        3, 27, 4, 27, 12, 67, 240, 32, 3, 139, 82, 1, 34, 7, 224, 0, 35, 12,
-        224, 12, 152, 8, 224, 12, 153, 9, 145, 8, 224, 12, 154, 9, 146, 5, 224,
-        12, 155, 2, 224, 0, 32, 9, 144, 0, 224, 9, 147, 29, 153, 32, 70, 0,
-        145, 13, 154, 65, 70, 10, 155, 24, 240, 213, 220, 34, 175, 32, 70, 81,
-        70, 13, 154, 10, 155, 0, 151, 24, 240, 205, 220, 6, 34, 165, 241, 64,
-        0, 57, 70, 245, 247, 207, 250, 20, 154, 98, 185, 10, 240, 127, 3, 22,
-        43, 8, 216, 23, 74, 154, 64, 5, 213, 13, 155, 5, 248, 60, 60, 27, 10,
-        5, 248, 59, 60, 179, 105, 12, 153, 90, 5, 18, 213, 145, 177, 54, 154,
-        34, 177, 18, 122, 4, 42, 1, 208, 11, 42, 27, 209, 67, 244, 0, 99, 179,
-        97, 23, 152, 148, 248, 190, 50, 0, 43, 24, 191, 1, 32, 23, 144, 16,
-        224, 121, 185, 5, 74, 95, 250, 136, 243, 211, 86, 0, 43, 9, 218, 21,
-        248, 6, 60, 3, 240, 15, 3, 21, 147, 6, 224, 224, 248, 135, 0, 0, 2,
-        16, 40, 21, 248, 6, 44, 21, 146, 10, 155, 164, 43, 20, 208, 8, 152,
-        3, 121, 219, 7, 16, 212, 9, 153, 129, 185, 179, 105, 32, 70, 95, 5,
-        65, 70, 2, 213, 16, 240, 7, 219, 3, 224, 14, 154, 53, 155, 24, 240,
-        82, 220, 8, 154, 80, 128, 20, 224, 9, 155, 83, 177, 65, 70, 32, 70,
-        14, 154, 64, 246, 42, 19, 24, 240, 38, 218, 8, 153, 128, 178, 2, 48,
-        72, 128, 10, 154, 164, 42, 4, 209, 8, 152, 67, 136, 37, 248, 58, 60,
-        25, 224, 8, 153, 11, 121, 217, 7, 1, 212, 9, 154, 42, 177, 0, 35, 5,
-        248, 58, 60, 5, 248, 57, 60, 13, 224, 179, 105, 32, 70, 90, 5, 81, 70,
-        2, 213, 16, 240, 215, 218, 3, 224, 15, 154, 53, 155, 24, 240, 34, 220,
-        37, 248, 58, 12, 178, 105, 147, 5, 9, 213, 179, 140, 37, 248, 52, 60,
-        243, 140, 37, 248, 50, 60, 5, 155, 67, 244, 0, 83, 5, 147, 50, 152,
-        24, 185, 5, 153, 65, 240, 8, 1, 5, 145, 8, 152, 3, 121, 223, 7, 18,
-        212, 208, 4, 16, 212, 148, 248, 20, 50, 11, 177, 81, 6, 11, 212, 83,
-        5, 5, 212, 26, 153, 25, 177, 25, 154, 146, 248, 40, 48, 27, 185, 5,
-        155, 67, 240, 1, 3, 5, 147, 140, 75, 52, 152, 18, 153, 27, 92, 2, 41,
-        22, 147, 27, 209, 3, 40, 25, 216, 148, 248, 17, 50, 179, 177, 27, 154,
-        4, 42, 19, 217, 212, 248, 52, 1, 11, 240, 91, 248, 112, 185, 25, 152,
-        22, 153, 0, 235, 65, 3, 155, 139, 19, 177, 179, 105, 95, 5, 5, 213,
-        16, 154, 26, 185, 5, 155, 67, 244, 128, 83, 5, 147, 35, 106, 24, 105,
-        27, 240, 163, 252, 0, 244, 96, 80, 176, 245, 192, 95, 3, 209, 5, 152,
-        64, 244, 128, 112, 5, 144, 11, 153, 25, 177, 5, 154, 66, 244, 0, 66,
-        5, 146, 5, 155, 37, 248, 118, 60, 54, 152, 16, 179, 148, 248, 148, 50,
-        19, 187, 7, 153, 10, 109, 18, 240, 8, 2, 33, 209, 3, 122, 11, 43, 6,
-        209, 35, 104, 147, 248, 177, 48, 211, 177, 131, 121, 7, 43, 20, 216,
-        54, 154, 147, 121, 34, 104, 210, 248, 188, 32, 147, 66, 15, 210, 178,
-        105, 144, 0, 15, 212, 54, 152, 2, 123, 2, 240, 7, 2, 66, 234, 3, 18,
-        3, 224, 54, 153, 5, 145, 7, 224, 0, 34, 5, 146, 4, 224, 0, 35, 5, 147,
-        1, 224, 0, 32, 5, 144, 15, 153, 75, 30, 219, 178, 1, 43, 4, 216, 5,
-        154, 66, 244, 0, 83, 155, 178, 5, 147, 165, 241, 114, 0, 8, 153, 2,
-        34, 245, 247, 171, 249, 0, 35, 5, 248, 112, 60, 5, 248, 111, 60, 5,
-        248, 74, 60, 5, 248, 73, 60, 54, 155, 0, 43, 47, 208, 148, 248, 148,
-        50, 0, 43, 43, 209, 7, 152, 3, 109, 25, 7, 39, 212, 54, 153, 11, 122,
-        11, 43, 6, 209, 35, 104, 147, 248, 177, 48, 251, 177, 139, 121, 7, 43,
-        28, 216, 54, 155, 154, 121, 35, 104, 211, 248, 188, 48, 154, 66, 21,
-        210, 179, 105, 154, 0, 18, 212, 28, 152, 24, 185, 8, 153, 1, 241, 24,
-        2, 2, 224, 8, 155, 3, 241, 30, 2, 26, 152, 0, 177, 2, 50, 0, 35, 0,
-        147, 32, 70, 24, 153, 54, 155, 35, 240, 41, 218, 8, 153, 6, 34, 4, 49,
-        165, 241, 80, 0, 18, 145, 245, 247, 103, 249, 189, 248, 152, 48, 37,
-        248, 42, 60, 0, 35, 5, 248, 40, 60, 5, 248, 39, 60, 5, 248, 38, 60,
-        5, 248, 37, 60, 5, 248, 36, 60, 5, 248, 35, 60, 5, 248, 34, 60, 5, 248,
-        33, 60, 5, 248, 32, 60, 5, 248, 31, 60, 23, 154, 26, 185, 187, 241,
-        0, 15, 1, 209, 226, 224, 155, 70, 0, 34, 65, 70, 7, 152, 32, 240, 44,
-        217, 0, 34, 6, 144, 81, 70, 7, 152, 32, 240, 38, 217, 6, 155, 7, 144,
-        19, 240, 64, 115, 24, 147, 6, 209, 6, 153, 22, 75, 200, 178, 27, 86,
-        0, 43, 3, 218, 20, 224, 6, 152, 39, 240, 224, 250, 2, 56, 24, 191, 1,
-        32, 112, 177, 217, 248, 16, 48, 147, 249, 24, 49, 1, 43, 10, 208, 5,
-        154, 66, 244, 128, 67, 155, 178, 5, 147, 1, 35, 11, 147, 4, 224, 24,
-        152, 11, 144, 1, 224, 0, 33, 11, 145, 7, 155, 19, 240, 64, 114, 10,
-        209, 216, 178, 3, 75, 27, 86, 0, 43, 8, 218, 30, 224, 0, 191, 84, 194,
-        135, 0, 224, 248, 135, 0, 7, 152, 39, 240, 183, 250, 2, 56, 24, 191,
-        1, 32, 120, 177, 217, 248, 16, 48, 147, 249, 24, 49, 1, 43, 11, 208,
-        5, 152, 1, 33, 111, 234, 64, 67, 111, 234, 83, 67, 155, 178, 5, 147,
-        16, 145, 3, 224, 16, 144, 1, 224, 0, 34, 16, 146, 53, 248, 118, 60,
-        187, 241, 0, 15, 2, 208, 67, 244, 0, 99, 1, 224, 67, 240, 6, 3, 37,
-        248, 118, 60, 187, 241, 0, 15, 12, 191, 79, 240, 20, 12, 79, 240, 14,
-        12, 165, 241, 30, 3, 98, 70, 0, 147, 32, 70, 6, 153, 10, 155, 205, 248,
-        16, 192, 24, 240, 197, 218, 221, 248, 16, 192, 36, 175, 98, 70, 10,
-        155, 32, 70, 7, 153, 0, 151, 24, 240, 187, 218, 57, 70, 6, 34, 165,
-        241, 72, 0, 245, 247, 189, 248, 11, 152, 14, 153, 13, 154, 165, 241,
-        24, 3, 10, 147, 0, 144, 1, 145, 2, 146, 0, 39, 89, 70, 6, 154, 67, 70,
-        32, 70, 3, 151, 24, 240, 194, 218, 37, 248, 22, 12, 16, 155, 15, 152,
-        13, 153, 0, 147, 1, 144, 2, 145, 32, 70, 89, 70, 7, 154, 83, 70, 3,
-        151, 24, 240, 179, 218, 37, 248, 66, 12, 165, 241, 20, 0, 187, 241,
-        0, 15, 9, 208, 111, 240, 59, 3, 5, 248, 24, 60, 5, 248, 23, 124, 8,
-        154, 2, 241, 10, 1, 14, 224, 111, 240, 75, 3, 5, 248, 24, 60, 5, 248,
-        23, 188, 18, 153, 6, 34, 245, 247, 130, 248, 8, 155, 165, 241, 14, 0,
-        3, 241, 10, 1, 6, 34, 245, 247, 122, 248, 21, 152, 24, 154, 129, 178,
-        82, 185, 6, 152, 78, 74, 195, 178, 211, 86, 0, 43, 4, 218, 21, 248,
-        30, 60, 3, 240, 15, 3, 1, 224, 21, 248, 30, 60, 27, 2, 25, 67, 21, 145,
-        31, 224, 89, 70, 6, 34, 165, 241, 30, 0, 246, 243, 183, 244, 89, 70,
-        16, 34, 165, 241, 24, 0, 246, 243, 177, 244, 165, 241, 72, 0, 89, 70,
-        6, 34, 246, 243, 171, 244, 5, 248, 66, 188, 5, 248, 65, 188, 205, 248,
-        28, 176, 205, 248, 24, 176, 205, 248, 40, 176, 205, 248, 64, 176, 205,
-        248, 44, 176, 179, 105, 91, 5, 15, 213, 12, 153, 105, 177, 40, 171,
-        0, 34, 35, 248, 2, 45, 0, 147, 212, 248, 52, 1, 73, 70, 66, 70, 13,
-        155, 13, 240, 211, 249, 5, 248, 67, 12, 5, 155, 37, 248, 116, 60, 21,
-        152, 37, 248, 100, 12, 20, 153, 177, 241, 128, 127, 11, 208, 49, 185,
-        10, 240, 127, 3, 22, 43, 2, 216, 38, 74, 154, 64, 1, 212, 1, 32, 2,
-        224, 20, 152, 0, 224, 2, 32, 6, 154, 128, 178, 2, 240, 64, 115, 179,
-        241, 128, 127, 11, 208, 51, 185, 2, 240, 127, 2, 22, 42, 2, 216, 28,
-        73, 145, 64, 0, 212, 1, 35, 155, 0, 155, 178, 0, 224, 8, 35, 7, 153,
-        24, 67, 1, 240, 64, 115, 179, 241, 128, 127, 11, 208, 51, 185, 1, 240,
-        127, 2, 22, 42, 2, 216, 18, 73, 145, 64, 0, 212, 1, 35, 27, 1, 159,
-        178, 0, 224, 32, 39, 35, 106, 7, 67, 24, 105, 27, 240, 148, 250, 192,
-        178, 71, 234, 0, 39, 37, 248, 98, 124, 12, 154, 178, 241, 128, 127,
-        16, 208, 50, 185, 8, 240, 127, 3, 22, 43, 2, 216, 4, 74, 154, 64, 1,
-        212, 1, 35, 0, 224, 12, 155, 155, 178, 4, 224, 224, 248, 135, 0, 0,
-        2, 16, 40, 2, 35, 14, 152, 173, 248, 154, 48, 66, 30, 210, 178, 1, 42,
-        9, 216, 67, 240, 16, 3, 173, 248, 154, 48, 35, 104, 211, 248, 136, 48,
-        154, 105, 1, 50, 154, 97, 65, 70, 32, 70, 189, 248, 154, 112, 44, 240,
-        211, 255, 179, 105, 7, 67, 185, 178, 31, 1, 173, 248, 154, 16, 14, 213,
-        35, 104, 147, 248, 229, 48, 83, 177, 35, 106, 24, 105, 28, 240, 220,
-        254, 35, 106, 13, 241, 154, 1, 24, 105, 17, 154, 28, 240, 222, 254,
-        189, 248, 154, 48, 65, 70, 37, 248, 110, 60, 32, 70, 180, 248, 72, 36,
-        30, 240, 130, 217, 19, 153, 207, 67, 191, 178, 55, 177, 79, 246, 248,
-        115, 1, 240, 7, 2, 3, 64, 67, 234, 2, 0, 37, 248, 108, 12, 180, 248,
-        72, 36, 32, 70, 81, 70, 30, 240, 111, 217, 20, 154, 66, 177, 63, 177,
-        19, 155, 3, 240, 7, 2, 79, 246, 248, 115, 3, 64, 67, 234, 2, 0, 37,
-        248, 106, 12, 23, 152, 16, 185, 187, 241, 0, 15, 15, 208, 6, 153, 180,
-        248, 72, 36, 32, 70, 30, 240, 87, 217, 37, 248, 104, 12, 7, 153, 32,
-        70, 180, 248, 72, 36, 30, 240, 79, 217, 37, 248, 102, 12, 12, 153, 73,
-        177, 14, 154, 4, 42, 6, 209, 32, 70, 65, 70, 13, 154, 23, 240, 179,
-        223, 37, 248, 56, 12, 20, 155, 75, 177, 15, 152, 4, 40, 6, 209, 32,
-        70, 81, 70, 13, 154, 23, 240, 167, 223, 37, 248, 54, 12, 217, 248, 4,
-        48, 88, 6, 114, 213, 26, 153, 0, 41, 111, 208, 25, 154, 22, 152, 2,
-        235, 64, 3, 155, 139, 0, 43, 104, 208, 179, 105, 89, 5, 101, 212, 50,
-        153, 0, 41, 98, 209, 14, 154, 32, 70, 65, 70, 13, 155, 23, 240, 231,
-        222, 10, 154, 131, 70, 138, 177, 6, 153, 11, 154, 32, 70, 15, 240, 29,
-        222, 7, 153, 7, 70, 16, 154, 32, 70, 15, 240, 23, 222, 10, 155, 179,
-        248, 2, 144, 185, 68, 53, 248, 66, 124, 22, 224, 9, 152, 176, 185, 65,
-        70, 14, 154, 9, 155, 32, 70, 24, 240, 234, 216, 81, 70, 15, 154, 13,
-        155, 0, 235, 11, 9, 32, 70, 23, 240, 194, 222, 81, 70, 7, 70, 15, 154,
-        32, 70, 9, 155, 24, 240, 219, 216, 199, 25, 1, 224, 10, 159, 217, 70,
-        31, 250, 137, 249, 37, 248, 112, 156, 37, 248, 74, 124, 22, 154, 25,
-        153, 1, 235, 66, 3, 155, 139, 155, 68, 201, 235, 11, 9, 31, 250, 137,
-        243, 26, 4, 26, 212, 32, 70, 65, 70, 14, 154, 15, 240, 224, 221, 255,
-        40, 5, 217, 180, 248, 74, 36, 144, 66, 56, 191, 2, 70, 1, 224, 79, 244,
-        128, 114, 52, 152, 146, 178, 4, 235, 64, 3, 179, 248, 76, 52, 147, 66,
-        3, 208, 32, 70, 52, 153, 16, 240, 232, 221, 179, 105, 189, 248, 152,
-        0, 67, 240, 132, 3, 179, 97, 41, 176, 189, 232, 240, 143, 79, 246, 255,
-        113, 19, 145, 255, 247, 231, 185, 79, 246, 255, 112, 19, 144, 255, 247,
-        226, 185, 212, 248, 116, 36, 40, 244, 128, 8, 146, 249, 19, 32, 42,
-        244, 128, 10, 1, 42, 127, 244, 15, 170, 255, 247, 23, 186, 45, 233,
-        240, 79, 147, 176, 157, 248, 120, 112, 6, 70, 13, 151, 157, 248, 132,
-        112, 221, 248, 116, 192, 11, 151, 221, 248, 128, 128, 119, 104, 0, 32,
-        12, 70, 10, 146, 154, 70, 221, 248, 112, 144, 173, 248, 68, 0, 173,
-        248, 70, 0, 220, 248, 16, 80, 12, 151, 184, 241, 0, 15, 50, 208, 152,
-        248, 8, 48, 2, 43, 46, 209, 214, 248, 180, 49, 0, 43, 19, 218, 150,
-        248, 148, 50, 131, 185, 43, 109, 24, 7, 13, 212, 50, 104, 152, 248,
-        6, 48, 210, 248, 188, 32, 147, 66, 6, 210, 3, 43, 4, 217, 11, 43, 2,
-        216, 186, 241, 1, 15, 22, 208, 163, 104, 12, 159, 3, 147, 34, 155, 0,
-        151, 11, 159, 6, 147, 48, 104, 33, 70, 10, 154, 83, 70, 205, 248, 8,
-        192, 205, 248, 36, 192, 1, 149, 205, 248, 16, 128, 5, 151, 94, 240,
-        32, 216, 221, 248, 36, 192, 21, 177, 149, 248, 37, 51, 203, 185, 11,
-        159, 10, 241, 255, 51, 1, 151, 31, 159, 13, 241, 70, 2, 3, 151, 10,
-        159, 2, 146, 251, 26, 98, 70, 48, 70, 33, 70, 24, 191, 1, 35, 205, 248,
-        36, 192, 205, 248, 0, 128, 14, 240, 158, 223, 221, 248, 36, 192, 131,
-        70, 1, 224, 79, 240, 0, 11, 185, 241, 0, 15, 25, 208, 220, 248, 164,
-        49, 220, 248, 4, 32, 217, 7, 129, 75, 88, 191, 9, 241, 28, 9, 2, 234,
-        3, 3, 72, 191, 9, 241, 34, 9, 11, 177, 9, 241, 2, 9, 184, 241, 0, 15,
-        5, 208, 152, 249, 14, 32, 152, 249, 15, 48, 211, 24, 153, 68, 214, 248,
-        104, 52, 27, 104, 235, 92, 27, 177, 220, 248, 4, 48, 195, 243, 128,
-        3, 10, 159, 0, 34, 141, 232, 128, 4, 5, 146, 31, 159, 17, 170, 6, 146,
-        33, 70, 98, 70, 48, 70, 2, 151, 205, 248, 36, 192, 205, 248, 12, 144,
-        205, 248, 16, 128, 16, 240, 216, 216, 189, 248, 68, 16, 171, 121, 189,
-        248, 70, 112, 15, 145, 221, 248, 36, 192, 163, 185, 149, 248, 148, 48,
-        139, 177, 185, 241, 0, 15, 14, 209, 13, 154, 98, 177, 79, 246, 255,
-        115, 152, 66, 5, 208, 163, 127, 35, 240, 15, 3, 67, 240, 5, 3, 163,
-        119, 0, 35, 133, 248, 148, 48, 184, 241, 0, 15, 60, 208, 150, 248, 148,
-        50, 195, 185, 43, 109, 26, 7, 21, 212, 152, 248, 8, 48, 11, 43, 7, 209,
-        51, 104, 147, 248, 177, 48, 107, 177, 152, 248, 6, 48, 7, 43, 9, 216,
-        51, 104, 152, 248, 6, 32, 211, 248, 188, 48, 154, 66, 2, 210, 163, 105,
-        155, 0, 32, 213, 189, 248, 68, 144, 163, 104, 9, 241, 118, 9, 75, 68,
-        163, 96, 163, 137, 48, 70, 201, 235, 3, 3, 163, 129, 12, 153, 43, 70,
-        34, 70, 205, 248, 0, 192, 205, 248, 36, 192, 205, 248, 4, 128, 95, 240,
-        118, 216, 163, 104, 221, 248, 36, 192, 201, 235, 3, 3, 163, 96, 163,
-        137, 153, 68, 164, 248, 12, 144, 171, 121, 51, 185, 213, 248, 72, 51,
-        0, 43, 66, 208, 155, 123, 216, 7, 63, 213, 31, 155, 4, 43, 35, 208,
-        156, 248, 231, 48, 0, 43, 56, 208, 10, 152, 10, 241, 255, 51, 193, 26,
-        48, 74, 31, 152, 75, 66, 67, 235, 1, 3, 18, 92, 156, 248, 218, 16, 48,
-        70, 81, 250, 2, 242, 18, 240, 1, 15, 0, 147, 97, 70, 34, 70, 91, 70,
-        205, 248, 36, 192, 2, 208, 45, 240, 120, 218, 1, 224, 45, 240, 209,
-        220, 221, 248, 36, 192, 24, 224, 181, 248, 90, 0, 205, 248, 36, 192,
-        247, 243, 222, 246, 221, 248, 36, 192, 72, 177, 171, 110, 90, 28, 6,
-        208, 5, 235, 131, 3, 219, 110, 19, 177, 27, 122, 4, 43, 5, 208, 187,
-        248, 0, 48, 67, 244, 0, 83, 171, 248, 0, 48, 13, 153, 41, 177, 220,
-        248, 164, 49, 3, 240, 5, 3, 1, 43, 31, 208, 214, 248, 160, 1, 3, 120,
-        219, 177, 186, 241, 1, 15, 24, 209, 148, 249, 30, 48, 0, 43, 20, 219,
-        149, 248, 37, 51, 139, 185, 15, 154, 97, 70, 187, 24, 189, 248, 68,
-        32, 31, 159, 2, 146, 189, 248, 70, 32, 118, 51, 0, 151, 11, 159, 3,
-        146, 155, 178, 34, 70, 1, 151, 104, 240, 147, 219, 19, 176, 189, 232,
-        240, 143, 64, 0, 1, 0, 84, 194, 135, 0, 136, 138, 139, 105, 4, 56, 128,
-        178, 27, 26, 27, 12, 27, 4, 24, 67, 112, 71, 0, 0, 45, 233, 240, 65,
-        144, 176, 12, 70, 6, 70, 144, 70, 255, 247, 238, 255, 64, 34, 5, 70,
-        0, 33, 104, 70, 246, 243, 118, 241, 163, 136, 33, 70, 195, 243, 64,
-        19, 48, 70, 205, 248, 22, 80, 205, 248, 14, 48, 75, 240, 219, 219, 227,
-        138, 205, 248, 30, 0, 173, 248, 8, 48, 3, 244, 64, 67, 163, 245, 64,
-        66, 83, 66, 67, 235, 2, 3, 10, 51, 86, 248, 35, 48, 24, 105, 27, 240,
-        244, 252, 216, 248, 8, 112, 205, 248, 34, 0, 57, 70, 32, 70, 38, 240,
-        195, 255, 251, 136, 5, 70, 3, 240, 240, 3, 27, 9, 8, 43, 1, 208, 12,
-        43, 30, 209, 163, 136, 3, 240, 3, 3, 2, 43, 25, 209, 251, 120, 27, 7,
-        8, 213, 221, 248, 46, 48, 198, 248, 52, 86, 67, 240, 1, 3, 205, 248,
-        46, 48, 13, 224, 59, 120, 122, 120, 26, 67, 187, 120, 19, 67, 7, 209,
-        221, 248, 46, 48, 214, 248, 52, 86, 67, 240, 2, 3, 205, 248, 46, 48,
-        99, 138, 216, 7, 5, 213, 221, 248, 46, 48, 67, 240, 12, 3, 205, 248,
-        46, 48, 5, 240, 64, 119, 183, 241, 128, 127, 60, 209, 189, 248, 8, 32,
-        141, 248, 12, 80, 2, 244, 96, 83, 179, 245, 192, 95, 17, 209, 5, 244,
-        224, 35, 179, 245, 128, 63, 6, 209, 18, 244, 224, 111, 1, 209, 2, 35,
-        5, 224, 4, 35, 3, 224, 179, 245, 0, 63, 2, 209, 1, 35, 141, 248, 13,
-        48, 41, 2, 5, 213, 157, 248, 13, 48, 67, 240, 8, 3, 141, 248, 13, 48,
-        106, 2, 5, 213, 157, 248, 13, 48, 67, 240, 64, 3, 141, 248, 13, 48,
-        235, 2, 5, 213, 157, 248, 13, 48, 67, 240, 16, 3, 141, 248, 13, 48,
-        48, 70, 157, 248, 13, 16, 157, 248, 12, 32, 16, 240, 203, 223, 173,
-        248, 10, 0, 8, 224, 40, 70, 38, 240, 55, 254, 79, 244, 250, 115, 144,
-        251, 243, 243, 173, 248, 10, 48, 35, 136, 6, 59, 205, 248, 18, 48, 227,
-        136, 27, 10, 205, 248, 26, 48, 189, 248, 8, 48, 19, 244, 64, 79, 12,
-        191, 179, 106, 243, 106, 27, 137, 1, 147, 1, 155, 7, 43, 13, 216, 79,
-        240, 104, 66, 154, 64, 11, 212, 79, 240, 64, 114, 154, 64, 5, 212, 79,
-        240, 128, 98, 154, 64, 1, 213, 2, 35, 0, 224, 4, 35, 1, 147, 47, 187,
-        5, 240, 127, 3, 22, 43, 15, 216, 34, 74, 154, 64, 12, 213, 1, 35, 173,
-        248, 42, 48, 163, 136, 173, 248, 44, 112, 3, 240, 128, 3, 0, 43, 12,
-        191, 2, 35, 1, 35, 30, 224, 27, 75, 237, 178, 91, 87, 0, 43, 12, 218,
-        2, 35, 173, 248, 42, 48, 0, 35, 173, 248, 44, 48, 1, 35, 173, 248, 38,
-        48, 0, 35, 173, 248, 40, 48, 14, 224, 3, 35, 173, 248, 42, 48, 0, 35,
-        173, 248, 44, 48, 99, 137, 27, 5, 27, 13, 0, 43, 12, 191, 4, 35, 3,
-        35, 205, 248, 38, 48, 35, 138, 216, 6, 3, 213, 0, 154, 66, 240, 128,
-        2, 0, 146, 217, 7, 3, 213, 0, 155, 67, 240, 1, 3, 0, 147, 176, 104,
-        105, 70, 66, 70, 252, 247, 155, 252, 16, 176, 189, 232, 240, 129, 0,
-        2, 16, 40, 224, 248, 135, 0, 248, 181, 31, 70, 0, 35, 59, 112, 1, 35,
-        123, 112, 12, 70, 22, 70, 5, 70, 19, 240, 147, 218, 64, 244, 128, 83,
-        155, 178, 14, 40, 140, 191, 79, 244, 64, 64, 0, 32, 24, 67, 3, 10, 67,
-        234, 0, 32, 120, 128, 33, 70, 40, 70, 75, 240, 182, 218, 3, 6, 0, 244,
-        127, 66, 67, 234, 16, 99, 67, 234, 2, 35, 0, 244, 127, 0, 67, 234, 16,
-        32, 120, 96, 33, 70, 40, 70, 255, 247, 168, 254, 0, 186, 184, 96, 49,
-        70, 32, 70, 38, 240, 162, 254, 0, 186, 248, 96, 248, 189, 56, 181, 29,
-        70, 20, 70, 255, 247, 154, 254, 43, 104, 131, 66, 2, 210, 35, 104, 1,
-        59, 35, 96, 40, 96, 56, 189, 240, 181, 4, 104, 173, 245, 59, 125, 5,
-        70, 0, 33, 208, 248, 244, 96, 79, 244, 55, 114, 1, 168, 185, 145, 39,
-        106, 246, 243, 17, 240, 42, 122, 66, 177, 115, 142, 19, 244, 64, 79,
-        12, 191, 0, 35, 1, 35, 10, 51, 84, 248, 35, 112, 123, 108, 184, 147,
-        0, 43, 59, 208, 3, 240, 64, 113, 177, 241, 128, 127, 38, 209, 19, 244,
-        224, 47, 27, 209, 10, 177, 112, 142, 3, 224, 35, 106, 24, 105, 26, 240,
-        65, 254, 0, 244, 96, 80, 176, 245, 128, 95, 184, 155, 2, 209, 67, 244,
-        128, 51, 10, 224, 176, 245, 192, 95, 2, 209, 67, 244, 0, 51, 4, 224,
-        176, 245, 32, 95, 2, 209, 67, 244, 128, 35, 184, 147, 148, 249, 32,
-        50, 1, 43, 3, 209, 184, 155, 67, 244, 0, 3, 184, 147, 184, 153, 32,
-        70, 33, 244, 64, 113, 184, 145, 43, 240, 107, 255, 184, 156, 5, 70,
-        32, 70, 38, 240, 190, 252, 40, 26, 68, 234, 0, 32, 15, 224, 40, 70,
-        1, 169, 184, 170, 185, 171, 20, 240, 150, 255, 184, 152, 24, 185, 40,
-        70, 28, 240, 201, 218, 3, 224, 148, 248, 229, 53, 3, 177, 185, 152,
-        13, 245, 59, 125, 240, 189, 45, 233, 247, 67, 136, 70, 17, 70, 5, 70,
-        23, 70, 20, 240, 68, 253, 6, 70, 0, 40, 80, 208, 213, 248, 124, 2, 0,
-        40, 76, 208, 54, 33, 67, 240, 17, 222, 4, 70, 0, 40, 70, 208, 0, 241,
-        24, 9, 6, 241, 194, 1, 6, 34, 72, 70, 244, 247, 62, 251, 54, 35, 5,
-        34, 196, 248, 48, 144, 99, 96, 98, 97, 213, 248, 124, 2, 105, 104, 67,
-        240, 7, 222, 160, 99, 56, 185, 213, 248, 124, 2, 33, 70, 3, 176, 189,
-        232, 240, 67, 67, 240, 7, 158, 123, 121, 128, 248, 1, 128, 3, 112, 0,
-        35, 131, 112, 214, 248, 204, 48, 27, 5, 1, 213, 1, 35, 131, 112, 150,
-        248, 68, 48, 195, 112, 59, 121, 1, 43, 4, 209, 179, 121, 0, 51, 24,
-        191, 1, 35, 0, 224, 2, 35, 3, 113, 213, 248, 108, 50, 40, 70, 219, 104,
-        33, 70, 0, 147, 50, 70, 59, 70, 12, 240, 236, 218, 40, 70, 33, 70, 3,
-        176, 189, 232, 240, 67, 30, 240, 15, 157, 3, 176, 189, 232, 240, 131,
-        45, 233, 240, 79, 211, 176, 221, 248, 112, 161, 7, 145, 153, 70, 208,
-        248, 104, 97, 186, 248, 10, 48, 4, 70, 93, 159, 6, 147, 158, 177, 179,
-        121, 155, 177, 48, 70, 92, 240, 26, 216, 128, 70, 120, 177, 212, 248,
-        104, 6, 65, 70, 9, 241, 16, 2, 75, 240, 97, 219, 1, 40, 0, 240, 106,
-        129, 4, 40, 3, 209, 102, 225, 176, 70, 0, 224, 152, 70, 185, 248, 0,
-        176, 11, 240, 252, 11, 171, 241, 128, 14, 222, 241, 0, 11, 75, 235,
-        14, 11, 187, 241, 0, 15, 14, 208, 179, 136, 93, 7, 13, 212, 7, 154,
-        212, 248, 92, 1, 209, 138, 201, 178, 65, 240, 141, 223, 208, 241, 1,
-        5, 56, 191, 0, 37, 2, 224, 93, 70, 0, 224, 0, 37, 167, 241, 12, 1, 0,
-        34, 10, 241, 12, 0, 248, 247, 178, 253, 179, 104, 1, 70, 2, 43, 15,
-        208, 51, 185, 6, 155, 152, 7, 0, 241, 53, 129, 19, 240, 1, 15, 5, 224,
-        1, 43, 64, 240, 47, 129, 6, 155, 19, 240, 2, 15, 0, 240, 42, 129, 48,
-        70, 42, 70, 92, 240, 202, 217, 0, 40, 0, 240, 35, 129, 51, 123, 218,
-        7, 9, 212, 6, 241, 12, 0, 9, 241, 16, 1, 6, 34, 244, 247, 120, 250,
-        0, 40, 64, 240, 22, 129, 9, 241, 16, 14, 9, 173, 32, 70, 7, 153, 114,
-        70, 91, 70, 205, 248, 24, 224, 205, 248, 0, 160, 1, 151, 2, 149, 31,
-        240, 83, 216, 0, 40, 64, 240, 4, 129, 212, 248, 104, 1, 105, 142, 92,
-        240, 75, 216, 0, 40, 0, 240, 252, 128, 43, 122, 106, 142, 32, 70, 0,
-        147, 6, 153, 5, 241, 9, 3, 14, 240, 21, 222, 5, 70, 8, 179, 195, 136,
-        187, 241, 0, 15, 2, 208, 219, 5, 2, 212, 233, 224, 216, 5, 24, 212,
-        189, 248, 78, 48, 0, 43, 0, 240, 227, 128, 234, 136, 145, 7, 4, 213,
-        189, 248, 42, 16, 136, 7, 64, 241, 219, 128, 189, 248, 42, 16, 74, 64,
-        145, 7, 15, 212, 106, 141, 106, 177, 18, 178, 27, 178, 154, 66, 9, 219,
-        206, 224, 212, 248, 20, 51, 43, 177, 189, 249, 78, 32, 27, 178, 154,
-        66, 192, 242, 198, 128, 35, 104, 147, 248, 175, 48, 51, 177, 212, 248,
-        136, 1, 9, 169, 82, 70, 59, 70, 35, 240, 173, 216, 212, 248, 104, 49,
-        219, 121, 1, 43, 68, 209, 179, 136, 0, 34, 173, 248, 144, 32, 154, 7,
-        12, 213, 56, 70, 250, 247, 221, 252, 35, 144, 0, 40, 0, 240, 169, 128,
-        81, 70, 58, 70, 244, 247, 23, 250, 173, 248, 144, 112, 189, 248, 144,
-        0, 140, 48, 250, 247, 206, 252, 189, 248, 144, 48, 5, 70, 32, 179, 1,
-        38, 32, 70, 9, 169, 5, 241, 12, 2, 128, 51, 0, 150, 22, 240, 15, 222,
-        168, 185, 180, 248, 148, 53, 8, 34, 43, 129, 109, 35, 107, 96, 43, 105,
-        110, 129, 12, 51, 43, 96, 65, 70, 0, 146, 1, 144, 2, 144, 4, 147, 32,
-        70, 69, 34, 9, 241, 10, 3, 3, 149, 22, 240, 210, 223, 40, 70, 250, 247,
-        170, 252, 189, 248, 144, 48, 0, 43, 114, 208, 35, 152, 107, 224, 197,
-        185, 212, 248, 32, 51, 2, 43, 23, 209, 7, 154, 189, 248, 86, 144, 211,
-        138, 9, 244, 127, 73, 219, 178, 73, 234, 3, 9, 157, 248, 44, 48, 32,
-        70, 0, 147, 6, 153, 74, 70, 13, 241, 45, 3, 14, 240, 167, 220, 32, 177,
-        86, 224, 79, 240, 0, 9, 0, 224, 169, 70, 182, 136, 22, 240, 2, 6, 12,
-        208, 56, 70, 250, 247, 124, 252, 6, 70, 0, 40, 72, 208, 81, 70, 58,
-        70, 35, 144, 244, 247, 182, 249, 173, 248, 144, 112, 205, 185, 32, 70,
-        9, 169, 252, 247, 86, 254, 0, 40, 56, 208, 32, 70, 14, 240, 80, 220,
-        5, 70, 0, 40, 50, 208, 212, 248, 32, 51, 2, 43, 9, 209, 157, 248, 44,
-        48, 32, 70, 0, 147, 6, 153, 74, 70, 13, 241, 45, 3, 14, 240, 17, 220,
-        32, 70, 41, 70, 9, 170, 252, 247, 93, 255, 249, 243, 242, 247, 104,
-        102, 212, 248, 104, 1, 3, 123, 219, 7, 25, 212, 12, 48, 248, 247, 199,
-        251, 5, 70, 160, 185, 212, 248, 104, 1, 91, 240, 185, 222, 1, 40, 14,
-        209, 184, 241, 0, 15, 11, 208, 212, 248, 104, 1, 41, 70, 92, 240, 11,
-        217, 5, 224, 48, 70, 250, 247, 54, 252, 1, 224, 0, 46, 249, 209, 83,
-        176, 189, 232, 240, 143, 45, 233, 240, 79, 16, 41, 171, 176, 4, 70,
-        13, 70, 147, 70, 0, 240, 161, 128, 208, 248, 104, 49, 219, 121, 1, 43,
-        20, 209, 176, 248, 148, 53, 12, 33, 42, 170, 173, 248, 36, 48, 109,
-        35, 66, 248, 140, 29, 8, 147, 0, 35, 3, 146, 4, 145, 173, 248, 38, 48,
-        0, 149, 1, 147, 2, 147, 89, 70, 69, 34, 84, 224, 3, 104, 147, 248, 23,
-        49, 0, 43, 72, 208, 208, 248, 16, 35, 12, 38, 16, 104, 0, 35, 11, 224,
-        145, 104, 128, 54, 177, 248, 108, 16, 12, 41, 3, 217, 9, 57, 33, 240,
-        3, 1, 118, 24, 1, 51, 4, 50, 131, 66, 241, 209, 48, 70, 250, 247, 238,
-        251, 129, 70, 0, 40, 103, 208, 0, 241, 12, 7, 178, 70, 79, 240, 0, 8,
-        17, 224, 1, 33, 8, 241, 2, 2, 0, 145, 83, 248, 34, 16, 32, 70, 58, 70,
-        83, 70, 22, 240, 40, 221, 80, 185, 123, 104, 8, 241, 1, 8, 195, 235,
-        10, 10, 255, 24, 212, 248, 16, 51, 26, 104, 144, 69, 232, 211, 201,
-        248, 8, 128, 0, 35, 32, 70, 89, 70, 26, 34, 0, 149, 1, 147, 2, 147,
-        205, 248, 12, 144, 4, 150, 22, 240, 232, 222, 72, 70, 250, 247, 192,
-        251, 8, 224, 141, 232, 10, 0, 2, 147, 17, 70, 3, 147, 4, 147, 26, 34,
-        22, 240, 219, 222, 212, 248, 32, 51, 2, 43, 4, 209, 160, 104, 212, 248,
-        52, 19, 11, 240, 168, 217, 8, 45, 11, 208, 93, 177, 212, 248, 32, 51,
-        2, 43, 79, 240, 3, 3, 12, 191, 196, 248, 32, 51, 196, 248, 28, 51, 24,
-        224, 1, 37, 32, 70, 212, 248, 24, 19, 22, 240, 142, 222, 212, 248, 16,
-        3, 212, 248, 24, 19, 22, 240, 160, 222, 212, 248, 32, 51, 2, 43, 2,
-        209, 196, 248, 32, 83, 5, 224, 212, 248, 28, 51, 2, 43, 8, 191, 196,
-        248, 28, 83, 43, 176, 189, 232, 240, 143, 45, 233, 240, 71, 221, 248,
-        32, 144, 7, 70, 146, 70, 28, 70, 211, 248, 244, 128, 14, 70, 41, 185,
-        211, 248, 248, 48, 25, 116, 132, 248, 234, 19, 3, 224, 144, 248, 198,
-        53, 0, 43, 127, 209, 0, 35, 132, 248, 152, 51, 118, 177, 212, 248, 252,
-        48, 147, 248, 60, 48, 91, 177, 185, 241, 0, 15, 8, 209, 32, 70, 81,
-        70, 20, 240, 26, 253, 24, 177, 189, 232, 240, 135, 132, 248, 118, 99,
-        215, 248, 124, 2, 16, 33, 67, 240, 91, 219, 5, 70, 0, 40, 98, 208, 16,
-        35, 0, 54, 24, 191, 1, 38, 67, 96, 70, 128, 192, 248, 12, 144, 163,
-        121, 0, 43, 75, 209, 35, 122, 0, 43, 72, 208, 34, 109, 64, 242, 55,
-        19, 19, 64, 0, 43, 66, 208, 216, 248, 104, 48, 0, 43, 62, 208, 184,
-        248, 108, 128, 184, 241, 12, 15, 57, 217, 180, 248, 90, 0, 3, 241, 12,
-        9, 168, 241, 12, 8, 247, 243, 209, 241, 40, 177, 72, 70, 65, 70, 247,
-        243, 86, 240, 6, 70, 208, 185, 180, 248, 90, 0, 248, 247, 156, 252,
-        48, 177, 72, 70, 65, 70, 48, 34, 248, 247, 92, 251, 6, 70, 112, 185,
-        180, 248, 90, 48, 179, 245, 128, 111, 2, 208, 179, 245, 0, 111, 22,
-        209, 72, 70, 65, 70, 68, 34, 248, 247, 77, 251, 6, 70, 120, 177, 114,
-        120, 215, 248, 124, 2, 121, 104, 2, 50, 16, 35, 67, 240, 21, 219, 168,
-        99, 40, 177, 114, 120, 49, 70, 2, 50, 106, 97, 244, 247, 57, 248, 56,
-        70, 33, 70, 42, 70, 83, 70, 27, 240, 167, 221, 56, 70, 41, 70, 189,
-        232, 240, 71, 30, 240, 61, 154, 189, 232, 240, 135, 0, 0, 45, 233, 240,
-        79, 18, 240, 64, 116, 133, 176, 6, 70, 21, 70, 3, 147, 5, 209, 18, 241,
-        0, 10, 24, 191, 79, 240, 1, 10, 1, 224, 79, 240, 0, 10, 2, 41, 95, 250,
-        138, 250, 197, 243, 0, 83, 12, 191, 183, 106, 247, 106, 186, 241, 0,
-        15, 6, 208, 21, 244, 64, 15, 64, 240, 183, 128, 0, 43, 64, 240, 180,
-        128, 50, 104, 164, 241, 128, 124, 146, 248, 79, 32, 220, 241, 0, 11,
-        5, 244, 64, 120, 75, 235, 12, 11, 79, 234, 24, 40, 146, 7, 95, 250,
-        133, 249, 205, 248, 8, 128, 40, 208, 187, 241, 0, 15, 37, 208, 185,
-        241, 32, 15, 0, 242, 157, 128, 26, 191, 79, 234, 217, 8, 8, 241, 1,
-        8, 79, 240, 1, 8, 83, 177, 50, 106, 16, 105, 1, 147, 27, 240, 178, 248,
-        16, 240, 2, 15, 1, 155, 64, 240, 145, 128, 137, 224, 185, 241, 32, 15,
-        40, 209, 182, 248, 70, 36, 2, 244, 96, 82, 178, 245, 128, 95, 127, 208,
-        3, 179, 2, 155, 1, 43, 29, 217, 122, 224, 186, 241, 0, 15, 21, 208,
-        9, 240, 127, 3, 22, 43, 6, 216, 62, 74, 154, 64, 3, 213, 59, 104, 2,
-        43, 13, 208, 108, 224, 58, 104, 2, 42, 2, 209, 122, 125, 0, 42, 102,
-        208, 57, 74, 211, 86, 0, 43, 2, 219, 97, 224, 0, 45, 95, 209, 79, 240,
-        1, 8, 5, 244, 224, 35, 179, 245, 128, 47, 88, 208, 179, 245, 64, 63,
-        9, 209, 51, 106, 24, 105, 27, 240, 116, 248, 0, 7, 79, 213, 186, 241,
-        0, 15, 34, 209, 72, 224, 179, 245, 0, 63, 17, 209, 51, 106, 24, 105,
-        27, 240, 103, 248, 193, 7, 66, 213, 228, 185, 5, 240, 127, 3, 2, 43,
-        58, 208, 4, 43, 56, 208, 11, 43, 54, 208, 22, 43, 16, 209, 51, 224,
-        179, 245, 128, 63, 9, 209, 187, 241, 0, 15, 8, 208, 185, 241, 32, 15,
-        12, 191, 111, 240, 1, 4, 0, 36, 2, 224, 0, 36, 0, 224, 92, 70, 173,
-        177, 0, 224, 0, 36, 2, 155, 152, 68, 214, 248, 116, 52, 155, 120, 152,
-        69, 28, 216, 69, 240, 64, 69, 48, 70, 41, 70, 58, 104, 1, 35, 34, 240,
-        125, 218, 152, 177, 48, 70, 41, 70, 20, 240, 66, 248, 3, 155, 11, 177,
-        189, 100, 3, 224, 125, 100, 48, 70, 30, 240, 142, 222, 214, 248, 160,
-        1, 103, 240, 174, 222, 4, 224, 111, 240, 1, 4, 1, 224, 111, 240, 28,
-        4, 32, 70, 5, 176, 189, 232, 240, 143, 79, 234, 72, 8, 108, 231, 0,
-        191, 0, 2, 16, 40, 224, 248, 135, 0, 45, 233, 240, 79, 78, 104, 147,
-        176, 209, 248, 8, 176, 5, 70, 198, 243, 192, 64, 12, 70, 3, 144, 23,
-        70, 153, 70, 4, 168, 198, 243, 0, 67, 0, 33, 40, 34, 38, 240, 134, 70,
-        2, 147, 38, 244, 234, 22, 245, 243, 129, 243, 43, 240, 131, 3, 212,
-        248, 16, 160, 102, 96, 163, 96, 0, 47, 0, 240, 208, 128, 59, 120, 151,
-        248, 1, 128, 67, 234, 8, 40, 164, 248, 16, 129, 187, 120, 132, 248,
-        18, 49, 70, 244, 128, 51, 99, 96, 43, 104, 147, 248, 66, 32, 178, 177,
-        147, 248, 67, 48, 155, 177, 70, 244, 160, 38, 212, 248, 52, 49, 102,
-        96, 147, 248, 93, 48, 123, 185, 27, 244, 0, 127, 3, 208, 148, 248, 36,
-        48, 218, 6, 8, 213, 40, 70, 33, 70, 38, 240, 195, 216, 3, 224, 40, 70,
-        33, 70, 38, 240, 176, 216, 162, 104, 18, 240, 0, 98, 34, 209, 8, 240,
-        12, 3, 155, 16, 1, 43, 148, 248, 14, 1, 148, 248, 15, 17, 6, 208, 3,
-        43, 9, 208, 67, 185, 1, 34, 132, 248, 14, 33, 1, 224, 132, 248, 14,
-        49, 132, 248, 15, 49, 3, 224, 132, 248, 14, 33, 132, 248, 15, 33, 148,
-        248, 14, 49, 131, 66, 7, 209, 148, 248, 15, 97, 118, 26, 24, 191, 1,
-        38, 2, 224, 0, 38, 0, 224, 1, 38, 24, 244, 64, 127, 3, 208, 99, 104,
-        67, 240, 128, 67, 99, 96, 24, 240, 1, 15, 3, 208, 163, 104, 67, 240,
-        128, 3, 163, 96, 24, 240, 32, 15, 3, 208, 163, 104, 67, 240, 1, 3, 163,
-        96, 24, 240, 64, 15, 3, 208, 163, 104, 67, 240, 2, 3, 163, 96, 163,
-        104, 11, 240, 3, 11, 3, 240, 3, 3, 155, 69, 24, 191, 1, 38, 24, 240,
-        16, 15, 3, 209, 99, 104, 67, 244, 128, 19, 99, 96, 24, 244, 128, 79,
-        3, 208, 99, 104, 67, 240, 0, 115, 99, 96, 200, 243, 64, 8, 185, 241,
-        0, 15, 42, 208, 5, 245, 54, 112, 7, 48, 73, 70, 22, 34, 243, 247, 140,
-        254, 184, 241, 0, 15, 3, 208, 153, 248, 1, 128, 200, 243, 128, 8, 153,
-        248, 1, 48, 27, 7, 3, 213, 99, 104, 67, 240, 128, 115, 99, 96, 153,
-        248, 2, 48, 19, 240, 8, 3, 13, 208, 218, 248, 244, 48, 64, 246, 8, 66,
-        91, 142, 65, 246, 16, 1, 3, 244, 64, 67, 179, 245, 64, 79, 20, 191,
-        11, 70, 19, 70, 165, 248, 192, 50, 43, 104, 147, 249, 82, 48, 251, 177,
-        28, 155, 235, 177, 154, 248, 6, 48, 211, 185, 28, 153, 14, 34, 14, 168,
-        243, 247, 90, 254, 40, 70, 14, 169, 1, 34, 28, 240, 49, 217, 80, 70,
-        14, 169, 16, 240, 77, 217, 11, 224, 40, 70, 33, 70, 6, 34, 33, 240,
-        89, 223, 40, 70, 33, 70, 38, 240, 3, 216, 62, 70, 184, 70, 25, 224,
-        16, 34, 249, 28, 13, 241, 37, 0, 243, 247, 62, 254, 213, 248, 116, 52,
-        4, 168, 153, 120, 38, 240, 63, 248, 213, 248, 108, 18, 40, 70, 27, 240,
-        9, 222, 255, 35, 1, 144, 0, 34, 4, 168, 0, 147, 1, 70, 19, 70, 38, 240,
-        208, 249, 2, 152, 136, 177, 99, 104, 19, 244, 128, 51, 16, 208, 9, 170,
-        0, 35, 225, 24, 18, 248, 1, 15, 145, 248, 97, 16, 136, 66, 6, 209, 1,
-        51, 16, 43, 245, 209, 0, 35, 2, 224, 2, 155, 0, 224, 1, 35, 98, 104,
-        2, 152, 2, 244, 128, 49, 194, 243, 0, 66, 144, 66, 0, 209, 99, 177,
-        4, 241, 97, 0, 41, 177, 13, 241, 37, 1, 16, 34, 243, 247, 2, 254, 2,
-        224, 16, 34, 245, 243, 86, 242, 1, 38, 184, 241, 0, 15, 3, 208, 99,
-        104, 67, 244, 0, 35, 99, 96, 3, 155, 67, 69, 0, 209, 70, 177, 213, 248,
-        116, 52, 147, 248, 123, 48, 27, 185, 40, 70, 33, 70, 41, 240, 63, 252,
-        19, 176, 189, 232, 240, 143, 240, 181, 135, 176, 4, 70, 13, 70, 17,
-        240, 70, 216, 6, 70, 0, 40, 64, 240, 133, 128, 107, 28, 4, 43, 0, 242,
-        129, 128, 223, 232, 3, 240, 71, 3, 78, 127, 78, 0, 35, 104, 0, 39, 131,
-        248, 79, 112, 35, 104, 131, 248, 81, 112, 212, 248, 56, 3, 195, 136,
-        35, 240, 32, 3, 195, 128, 56, 48, 38, 240, 96, 249, 37, 106, 57, 70,
-        5, 241, 101, 0, 16, 34, 245, 243, 20, 242, 107, 108, 51, 177, 19, 240,
-        64, 127, 3, 208, 111, 100, 32, 70, 30, 240, 233, 220, 171, 108, 35,
-        177, 19, 240, 64, 127, 1, 208, 0, 35, 171, 100, 0, 37, 212, 248, 104,
-        50, 90, 89, 154, 177, 212, 248, 36, 1, 3, 169, 92, 240, 102, 217, 5,
-        224, 0, 34, 32, 70, 19, 70, 0, 146, 255, 247, 89, 254, 3, 169, 212,
-        248, 36, 1, 41, 240, 222, 249, 1, 70, 0, 40, 241, 209, 4, 53, 32, 45,
-        228, 209, 55, 224, 212, 248, 116, 52, 157, 120, 3, 45, 12, 191, 3, 37,
-        1, 37, 1, 33, 32, 70, 10, 70, 32, 240, 139, 216, 3, 45, 35, 104, 1,
-        209, 7, 34, 0, 224, 3, 34, 131, 248, 79, 32, 212, 248, 56, 3, 195, 136,
-        67, 240, 32, 3, 195, 128, 212, 248, 116, 52, 56, 48, 25, 121, 38, 240,
-        121, 249, 0, 33, 32, 70, 212, 248, 56, 83, 27, 240, 63, 221, 56, 53,
-        0, 34, 255, 35, 0, 147, 1, 144, 41, 70, 40, 70, 19, 70, 38, 240, 5,
-        249, 32, 106, 212, 248, 56, 19, 101, 48, 77, 49, 16, 34, 243, 247, 87,
-        253, 48, 70, 7, 176, 240, 189, 240, 181, 137, 176, 28, 70, 14, 155,
-        5, 70, 0, 147, 19, 70, 15, 70, 252, 247, 99, 252, 6, 70, 0, 40, 51,
-        208, 27, 75, 35, 64, 203, 185, 4, 240, 64, 115, 179, 241, 128, 127,
-        20, 208, 59, 120, 19, 240, 1, 15, 43, 106, 20, 191, 156, 108, 92, 108,
-        19, 75, 35, 64, 83, 185, 4, 240, 64, 115, 179, 241, 128, 127, 5, 208,
-        43, 106, 155, 105, 147, 248, 80, 64, 4, 240, 127, 4, 213, 248, 108,
-        50, 0, 33, 147, 249, 24, 49, 1, 32, 42, 106, 0, 145, 1, 144, 2, 144,
-        3, 145, 4, 145, 6, 145, 5, 148, 19, 241, 255, 51, 40, 70, 49, 70, 146,
-        105, 24, 191, 1, 35, 14, 240, 223, 223, 48, 70, 9, 176, 240, 189, 255,
-        0, 0, 192, 240, 181, 19, 105, 22, 76, 211, 248, 68, 99, 13, 104, 150,
-        248, 41, 112, 101, 93, 87, 250, 5, 245, 21, 240, 1, 5, 31, 208, 15,
-        104, 143, 185, 1, 104, 219, 104, 209, 248, 136, 16, 8, 106, 1, 48, 8,
-        98, 25, 106, 79, 240, 255, 48, 1, 49, 25, 98, 210, 248, 92, 49, 1, 51,
-        194, 248, 92, 49, 240, 189, 1, 63, 15, 96, 150, 248, 41, 192, 229, 93,
-        76, 250, 5, 245, 21, 240, 1, 5, 225, 209, 40, 70, 240, 189, 40, 70,
-        240, 189, 84, 194, 135, 0, 45, 233, 240, 79, 153, 70, 153, 176, 0, 35,
-        20, 146, 22, 147, 66, 104, 3, 104, 13, 104, 14, 146, 26, 126, 4, 70,
-        138, 70, 213, 248, 40, 128, 50, 185, 211, 248, 136, 48, 12, 146, 89,
-        106, 1, 49, 89, 98, 97, 227, 144, 248, 116, 34, 0, 42, 64, 240, 126,
-        131, 216, 248, 16, 112, 174, 105, 58, 124, 122, 177, 152, 248, 20, 16,
-        200, 7, 11, 212, 152, 248, 36, 16, 17, 240, 2, 1, 6, 209, 211, 248,
-        136, 48, 12, 145, 90, 106, 1, 50, 90, 98, 71, 227, 33, 106, 216, 248,
-        48, 0, 73, 104, 136, 66, 7, 208, 211, 248, 136, 48, 90, 106, 1, 50,
-        90, 98, 0, 35, 12, 147, 57, 227, 216, 248, 4, 48, 143, 73, 25, 64, 17,
-        177, 233, 137, 1, 240, 7, 1, 12, 145, 185, 121, 1, 185, 210, 185, 152,
-        248, 20, 32, 209, 7, 22, 213, 215, 248, 204, 32, 82, 5, 18, 212, 215,
-        248, 244, 32, 82, 142, 2, 244, 64, 66, 162, 245, 64, 76, 220, 241, 0,
-        2, 66, 235, 12, 2, 14, 50, 7, 235, 130, 2, 82, 104, 18, 177, 146, 248,
-        231, 32, 178, 185, 88, 6, 23, 213, 24, 171, 0, 34, 67, 248, 4, 45, 0,
-        147, 32, 70, 12, 155, 65, 70, 42, 70, 34, 240, 98, 216, 23, 155, 131,
-        70, 0, 43, 64, 240, 1, 131, 235, 137, 3, 240, 7, 3, 12, 147, 4, 224,
-        79, 240, 4, 11, 1, 224, 79, 240, 1, 11, 157, 248, 136, 32, 201, 248,
-        0, 176, 35, 104, 18, 177, 179, 248, 98, 48, 1, 224, 179, 248, 96, 48,
-        187, 241, 3, 15, 7, 216, 226, 105, 2, 235, 75, 2, 178, 249, 28, 32,
-        154, 66, 128, 242, 190, 128, 14, 152, 41, 70, 247, 247, 211, 253, 21,
-        40, 129, 70, 18, 216, 35, 104, 211, 248, 136, 48, 154, 106, 1, 50, 154,
-        98, 216, 248, 16, 48, 27, 177, 219, 104, 90, 106, 1, 50, 90, 98, 216,
-        248, 92, 49, 1, 51, 200, 248, 92, 49, 198, 226, 170, 104, 187, 121,
-        18, 146, 91, 177, 19, 120, 217, 7, 8, 213, 212, 248, 8, 5, 57, 70, 75,
-        70, 43, 240, 116, 219, 0, 40, 64, 240, 183, 130, 6, 240, 16, 3, 219,
-        178, 17, 147, 151, 248, 89, 48, 91, 177, 152, 248, 20, 48, 218, 7, 7,
-        212, 152, 248, 36, 48, 219, 6, 3, 212, 17, 155, 0, 43, 0, 240, 164,
-        130, 212, 248, 156, 33, 6, 240, 0, 67, 186, 92, 82, 177, 152, 248, 20,
-        32, 208, 7, 6, 212, 152, 248, 36, 32, 209, 6, 2, 212, 0, 43, 0, 240,
-        147, 130, 58, 109, 64, 242, 55, 22, 22, 64, 254, 177, 151, 248, 37,
-        35, 202, 185, 17, 154, 82, 177, 184, 248, 68, 96, 190, 177, 216, 248,
-        12, 96, 166, 177, 51, 105, 0, 43, 8, 191, 0, 38, 15, 224, 107, 185,
-        216, 248, 12, 96, 94, 185, 187, 110, 90, 28, 0, 240, 118, 130, 7, 235,
-        131, 3, 222, 110, 30, 185, 112, 226, 0, 38, 0, 224, 17, 158, 151, 248,
-        80, 51, 155, 177, 17, 155, 139, 177, 151, 248, 37, 51, 115, 185, 32,
-        70, 41, 70, 14, 34, 3, 35, 252, 247, 190, 249, 56, 177, 212, 248, 120,
-        4, 35, 73, 183, 248, 26, 33, 43, 70, 84, 240, 197, 219, 62, 177, 51,
-        122, 2, 43, 6, 209, 1, 34, 9, 241, 8, 9, 16, 146, 3, 224, 16, 150, 1,
-        224, 0, 35, 16, 147, 171, 105, 19, 244, 136, 111, 14, 209, 151, 248,
-        37, 51, 91, 185, 22, 171, 0, 147, 32, 70, 65, 70, 90, 70, 75, 70, 252,
-        247, 43, 250, 1, 40, 13, 144, 9, 209, 2, 224, 169, 241, 14, 3, 22, 147,
-        14, 152, 41, 70, 247, 247, 52, 253, 1, 34, 13, 146, 148, 248, 74, 54,
-        3, 177, 64, 0, 227, 105, 3, 235, 139, 3, 91, 104, 27, 104, 131, 66,
-        14, 216, 4, 235, 75, 3, 179, 248, 90, 34, 180, 248, 88, 50, 35, 234,
-        2, 3, 164, 248, 88, 50, 56, 226, 64, 0, 1, 0, 19, 253, 0, 0, 13, 154,
-        79, 240, 0, 12, 162, 241, 1, 14, 222, 241, 0, 3, 67, 235, 14, 3, 14,
-        34, 205, 248, 84, 176, 19, 146, 195, 70, 205, 248, 60, 192, 184, 70,
-        25, 70, 103, 70, 149, 225, 0, 46, 126, 208, 148, 248, 148, 50, 155,
-        185, 216, 248, 80, 48, 24, 7, 15, 212, 51, 122, 11, 43, 6, 209, 35,
-        104, 147, 248, 177, 48, 67, 177, 179, 121, 7, 43, 5, 216, 35, 104, 178,
-        121, 211, 248, 188, 48, 154, 66, 7, 211, 150, 249, 14, 48, 150, 249,
-        15, 0, 180, 51, 10, 147, 0, 33, 2, 224, 180, 35, 0, 32, 10, 147, 16,
-        154, 0, 42, 94, 208, 15, 155, 144, 74, 2, 51, 156, 70, 13, 155, 210,
-        248, 0, 224, 170, 138, 156, 69, 94, 248, 34, 32, 53, 211, 8, 48, 202,
-        177, 178, 248, 20, 192, 94, 248, 44, 224, 190, 241, 0, 15, 43, 209,
-        210, 248, 4, 192, 178, 248, 6, 224, 147, 104, 204, 243, 20, 12, 12,
-        235, 94, 28, 79, 234, 83, 94, 79, 234, 78, 94, 12, 241, 1, 12, 244,
-        68, 178, 248, 12, 224, 17, 224, 213, 248, 4, 192, 181, 248, 6, 224,
-        171, 104, 204, 243, 20, 12, 12, 235, 94, 28, 79, 234, 83, 94, 79, 234,
-        78, 94, 12, 241, 1, 12, 244, 68, 181, 248, 12, 224, 158, 68, 206, 235,
-        12, 14, 134, 69, 56, 191, 0, 33, 0, 224, 0, 33, 181, 248, 14, 224, 30,
-        240, 64, 15, 64, 240, 170, 128, 149, 248, 2, 224, 190, 241, 1, 15, 0,
-        242, 164, 128, 122, 177, 178, 248, 14, 224, 30, 240, 64, 15, 64, 240,
-        157, 128, 146, 120, 1, 42, 0, 242, 153, 128, 4, 224, 79, 240, 180, 12,
-        48, 70, 205, 248, 40, 192, 0, 41, 0, 240, 144, 128, 152, 248, 37, 51,
-        0, 43, 64, 240, 135, 128, 171, 105, 26, 4, 0, 241, 131, 128, 149, 249,
-        30, 48, 0, 43, 126, 219, 212, 248, 160, 193, 156, 248, 0, 48, 0, 43,
-        120, 208, 16, 154, 218, 177, 212, 248, 180, 49, 0, 43, 23, 218, 182,
-        177, 51, 122, 2, 43, 19, 209, 148, 248, 148, 50, 131, 185, 216, 248,
-        80, 48, 27, 7, 12, 212, 34, 104, 179, 121, 210, 248, 188, 32, 147, 66,
-        6, 210, 3, 43, 4, 217, 11, 43, 2, 216, 169, 241, 8, 3, 0, 224, 75, 70,
-        21, 154, 96, 70, 0, 146, 12, 154, 89, 70, 1, 146, 42, 70, 205, 248,
-        44, 192, 103, 240, 118, 217, 221, 248, 44, 192, 0, 40, 64, 208, 71,
-        70, 216, 70, 0, 46, 44, 208, 0, 35, 96, 70, 89, 70, 50, 70, 103, 240,
-        250, 217, 51, 122, 2, 43, 35, 209, 212, 248, 180, 49, 0, 43, 15, 218,
-        148, 248, 148, 50, 99, 185, 59, 109, 24, 7, 9, 212, 34, 104, 179, 121,
-        210, 248, 188, 32, 147, 66, 3, 210, 3, 43, 1, 217, 11, 43, 15, 217,
-        14, 155, 18, 154, 141, 232, 136, 1, 12, 155, 3, 146, 5, 147, 32, 104,
-        41, 70, 0, 34, 1, 35, 4, 150, 205, 248, 24, 144, 92, 240, 31, 220, 42,
-        70, 75, 70, 32, 70, 65, 70, 252, 247, 121, 255, 35, 104, 211, 248, 136,
-        48, 218, 106, 1, 50, 218, 98, 20, 154, 1, 35, 19, 96, 222, 224, 171,
-        105, 67, 244, 0, 67, 171, 97, 35, 104, 211, 248, 136, 48, 26, 107, 1,
-        50, 26, 99, 202, 248, 0, 80, 1, 33, 117, 224, 22, 154, 1, 144, 0, 146,
-        14, 152, 41, 70, 19, 154, 10, 155, 13, 240, 228, 222, 74, 248, 7, 0,
-        48, 187, 216, 70, 86, 70, 7, 70, 6, 224, 14, 152, 86, 248, 4, 27, 1,
-        34, 249, 247, 39, 253, 1, 55, 221, 248, 60, 192, 103, 69, 244, 209,
-        202, 248, 0, 80, 35, 104, 211, 248, 136, 48, 26, 106, 1, 50, 26, 98,
-        216, 248, 16, 48, 27, 177, 219, 104, 26, 106, 1, 50, 26, 98, 216, 248,
-        92, 49, 1, 51, 200, 248, 92, 49, 215, 224, 0, 191, 32, 7, 0, 0, 190,
-        177, 51, 122, 11, 43, 20, 209, 148, 248, 148, 50, 115, 185, 216, 248,
-        80, 48, 25, 7, 10, 212, 34, 104, 146, 248, 177, 48, 51, 177, 179, 121,
-        7, 43, 3, 216, 210, 248, 188, 32, 147, 66, 2, 211, 131, 137, 16, 51,
-        131, 129, 131, 104, 18, 153, 14, 59, 131, 96, 90, 248, 7, 48, 154, 137,
-        152, 104, 14, 50, 154, 129, 14, 34, 243, 247, 240, 249, 13, 154, 221,
-        248, 60, 192, 83, 30, 156, 69, 5, 209, 32, 104, 41, 70, 90, 248, 7,
-        32, 252, 247, 206, 254, 90, 248, 7, 48, 233, 137, 218, 137, 1, 240,
-        7, 1, 34, 240, 7, 2, 10, 67, 221, 248, 76, 192, 218, 129, 22, 155, 0,
-        33, 156, 68, 205, 248, 76, 192, 221, 248, 60, 192, 4, 55, 12, 241, 1,
-        12, 205, 248, 60, 192, 221, 248, 60, 192, 13, 154, 148, 69, 127, 244,
-        100, 174, 216, 70, 67, 70, 79, 240, 0, 12, 205, 248, 60, 144, 176, 70,
-        169, 70, 221, 248, 84, 176, 87, 70, 101, 70, 30, 70, 42, 224, 157, 66,
-        17, 210, 16, 154, 74, 177, 22, 155, 32, 104, 14, 51, 0, 147, 14, 153,
-        151, 232, 12, 0, 93, 240, 71, 221, 3, 224, 14, 152, 121, 104, 247, 247,
-        58, 251, 14, 56, 0, 224, 0, 32, 17, 155, 57, 104, 12, 154, 2, 147, 22,
-        155, 141, 232, 65, 0, 5, 146, 6, 147, 42, 70, 13, 155, 32, 70, 205,
-        248, 12, 176, 205, 248, 16, 128, 254, 247, 217, 250, 87, 248, 4, 59,
-        1, 53, 158, 98, 13, 155, 157, 66, 3, 241, 255, 51, 207, 209, 90, 248,
-        35, 48, 77, 70, 171, 66, 221, 248, 60, 144, 176, 70, 4, 208, 14, 152,
-        41, 70, 1, 34, 249, 247, 111, 252, 13, 154, 20, 155, 26, 96, 216, 248,
-        88, 49, 65, 70, 1, 51, 200, 248, 88, 49, 241, 233, 96, 35, 18, 235,
-        9, 2, 67, 241, 0, 3, 193, 233, 0, 35, 32, 70, 65, 70, 74, 70, 12, 155,
-        251, 247, 156, 254, 0, 32, 34, 224, 20, 154, 0, 35, 19, 96, 41, 70,
-        14, 152, 247, 247, 239, 250, 12, 154, 1, 70, 32, 70, 251, 247, 196,
-        254, 35, 104, 147, 248, 66, 32, 66, 177, 147, 248, 67, 48, 43, 177,
-        212, 248, 52, 1, 65, 70, 42, 70, 11, 240, 223, 255, 14, 152, 41, 70,
-        1, 34, 249, 247, 56, 252, 79, 240, 255, 48, 1, 224, 111, 240, 15, 0,
-        25, 176, 189, 232, 240, 143, 112, 181, 4, 70, 64, 33, 32, 70, 29, 240,
-        12, 223, 22, 34, 20, 33, 5, 70, 32, 105, 54, 240, 62, 216, 79, 244,
-        209, 113, 6, 70, 32, 70, 29, 240, 0, 223, 79, 244, 210, 113, 32, 70,
-        29, 240, 251, 222, 64, 33, 32, 70, 29, 240, 247, 222, 133, 66, 228,
-        209, 7, 45, 226, 208, 212, 248, 64, 55, 79, 244, 122, 114, 246, 26,
-        182, 251, 242, 246, 2, 251, 6, 51, 212, 248, 56, 7, 64, 246, 184, 49,
-        48, 24, 196, 248, 56, 7, 164, 248, 60, 23, 196, 248, 64, 55, 112, 189,
-        45, 233, 240, 65, 197, 104, 12, 70, 213, 248, 84, 49, 134, 176, 75,
-        96, 213, 248, 88, 49, 6, 70, 11, 96, 181, 248, 144, 52, 0, 105, 139,
-        129, 181, 248, 216, 52, 79, 240, 0, 8, 203, 129, 184, 33, 54, 240, 240,
-        221, 64, 33, 164, 248, 186, 0, 48, 105, 54, 240, 234, 221, 213, 248,
-        32, 17, 164, 248, 188, 0, 161, 96, 181, 248, 144, 38, 167, 137, 146,
-        178, 0, 151, 3, 146, 231, 137, 162, 131, 180, 248, 186, 32, 51, 104,
-        1, 151, 4, 146, 5, 144, 2, 145, 217, 104, 98, 104, 35, 104, 99, 72,
-        244, 243, 78, 245, 181, 248, 192, 23, 137, 178, 33, 130, 181, 248, 208,
-        39, 146, 178, 98, 130, 181, 248, 210, 55, 155, 178, 163, 130, 181, 248,
-        72, 4, 164, 248, 210, 0, 181, 248, 74, 4, 164, 248, 212, 0, 181, 248,
-        76, 4, 164, 248, 214, 0, 86, 72, 244, 243, 51, 245, 181, 248, 0, 53,
-        48, 70, 227, 131, 181, 248, 14, 53, 35, 131, 181, 248, 238, 51, 99,
-        131, 181, 248, 26, 52, 164, 248, 172, 48, 181, 248, 28, 52, 181, 248,
-        2, 116, 164, 248, 174, 48, 191, 178, 121, 0, 29, 240, 115, 222, 121,
-        28, 164, 248, 166, 0, 73, 0, 48, 70, 29, 240, 108, 222, 249, 28, 164,
-        248, 168, 0, 73, 0, 48, 70, 29, 240, 101, 222, 0, 33, 164, 248, 170,
-        0, 128, 34, 4, 241, 34, 0, 244, 243, 223, 244, 8, 235, 71, 1, 48, 70,
-        29, 240, 88, 222, 4, 235, 8, 3, 8, 241, 2, 8, 184, 241, 128, 15, 88,
-        132, 242, 209, 56, 72, 244, 243, 245, 244, 160, 70, 34, 70, 0, 35, 67,
-        244, 0, 49, 197, 248, 96, 17, 213, 248, 96, 17, 213, 248, 100, 17, 1,
-        51, 81, 132, 2, 50, 64, 43, 242, 209, 48, 72, 244, 243, 226, 244, 0,
-        39, 57, 70, 48, 70, 57, 240, 245, 217, 1, 55, 64, 47, 168, 248, 34,
-        0, 8, 241, 2, 8, 244, 209, 41, 72, 244, 243, 211, 244, 35, 104, 83,
-        177, 40, 72, 244, 243, 206, 244, 0, 35, 226, 24, 213, 248, 88, 17, 2,
-        51, 128, 43, 81, 132, 248, 209, 35, 72, 244, 243, 195, 244, 0, 35, 226,
-        24, 213, 248, 84, 17, 2, 51, 128, 43, 81, 132, 248, 209, 181, 248, 152,
-        54, 164, 248, 190, 48, 243, 104, 211, 248, 40, 33, 196, 248, 192, 32,
-        211, 248, 44, 33, 211, 248, 80, 49, 196, 248, 196, 32, 196, 248, 200,
-        48, 51, 105, 211, 248, 240, 48, 196, 248, 204, 48, 79, 244, 248, 115,
-        165, 248, 252, 51, 181, 248, 254, 51, 164, 248, 208, 48, 181, 248, 70,
-        54, 164, 248, 216, 48, 181, 248, 72, 54, 164, 248, 218, 48, 181, 248,
-        102, 54, 164, 248, 220, 48, 181, 248, 112, 54, 164, 248, 222, 48, 6,
-        176, 189, 232, 240, 129, 87, 68, 136, 0, 235, 68, 136, 0, 134, 69, 136,
-        0, 147, 69, 136, 0, 158, 69, 136, 0, 176, 69, 136, 0, 186, 69, 136,
-        0, 127, 181, 5, 70, 228, 32, 14, 70, 249, 243, 92, 242, 4, 70, 32, 177,
-        40, 70, 33, 70, 255, 247, 234, 254, 2, 224, 11, 72, 244, 243, 108, 244,
-        0, 34, 228, 35, 3, 147, 40, 70, 41, 33, 19, 70, 0, 150, 1, 146, 2, 148,
-        27, 240, 199, 223, 44, 177, 32, 70, 4, 176, 189, 232, 112, 64, 249,
-        247, 157, 186, 4, 176, 112, 189, 9, 70, 136, 0, 112, 181, 13, 70, 0,
-        33, 4, 70, 29, 240, 168, 221, 2, 33, 6, 70, 32, 70, 29, 240, 163, 221,
-        49, 70, 2, 70, 25, 72, 244, 243, 70, 244, 34, 104, 212, 248, 36, 24,
-        147, 106, 89, 26, 3, 41, 20, 216, 209, 104, 20, 72, 42, 70, 244, 243,
-        58, 244, 2, 45, 20, 191, 41, 70, 3, 33, 32, 70, 255, 247, 183, 255,
-        16, 72, 244, 243, 48, 244, 35, 104, 147, 248, 156, 48, 1, 43, 15, 209,
-        10, 224, 210, 248, 136, 48, 209, 104, 211, 248, 20, 50, 42, 70, 1, 51,
-        9, 72, 244, 243, 32, 244, 3, 224, 32, 70, 0, 33, 10, 240, 133, 254,
-        35, 104, 155, 106, 196, 248, 36, 56, 112, 189, 190, 69, 136, 0, 204,
-        216, 3, 0, 39, 70, 136, 0, 5, 217, 3, 0, 45, 233, 240, 67, 3, 106, 143,
-        176, 27, 104, 4, 70, 1, 43, 20, 191, 79, 240, 10, 9, 79, 240, 16, 9,
-        136, 70, 16, 240, 143, 222, 2, 169, 37, 240, 133, 250, 212, 248, 116,
-        52, 2, 168, 153, 120, 37, 240, 127, 249, 212, 248, 108, 18, 32, 70,
-        26, 240, 73, 223, 255, 35, 1, 144, 0, 34, 2, 168, 0, 147, 1, 70, 19,
-        70, 37, 240, 16, 251, 0, 37, 58, 224, 14, 170, 83, 25, 19, 248, 44,
-        124, 32, 70, 7, 240, 127, 7, 57, 70, 29, 240, 20, 220, 12, 171, 6, 70,
-        57, 70, 0, 147, 32, 70, 66, 70, 79, 244, 0, 115, 22, 240, 76, 217, 57,
-        70, 0, 34, 67, 70, 32, 70, 21, 240, 0, 223, 157, 248, 49, 32, 157, 248,
-        48, 48, 18, 2, 210, 24, 72, 68, 135, 178, 6, 241, 10, 1, 32, 70, 146,
-        178, 33, 240, 160, 219, 157, 248, 51, 32, 157, 248, 50, 48, 18, 2, 210,
-        24, 32, 70, 6, 241, 12, 1, 146, 178, 33, 240, 148, 219, 32, 70, 6, 241,
-        16, 1, 58, 70, 33, 240, 142, 219, 1, 53, 2, 155, 157, 66, 193, 211,
-        15, 176, 189, 232, 240, 131, 240, 181, 141, 176, 4, 70, 16, 240, 48,
-        222, 2, 169, 37, 240, 38, 250, 212, 248, 116, 52, 2, 168, 153, 120,
-        37, 240, 32, 249, 212, 248, 108, 18, 32, 70, 26, 240, 234, 222, 255,
-        35, 1, 144, 0, 34, 2, 168, 0, 147, 1, 70, 19, 70, 37, 240, 177, 250,
-        0, 37, 22, 224, 12, 170, 83, 25, 19, 248, 36, 108, 39, 106, 6, 240,
-        127, 6, 48, 70, 37, 240, 253, 248, 56, 24, 144, 248, 120, 32, 26, 185,
-        157, 248, 12, 32, 2, 240, 127, 2, 32, 70, 49, 70, 20, 240, 107, 219,
-        1, 53, 2, 155, 157, 66, 229, 211, 13, 176, 240, 189, 144, 248, 45, 50,
-        1, 43, 2, 209, 182, 33, 0, 34, 4, 224, 144, 248, 44, 34, 182, 33, 66,
-        234, 3, 34, 33, 240, 63, 155, 16, 181, 4, 104, 251, 247, 251, 250, 227,
-        104, 2, 70, 163, 248, 18, 6, 150, 33, 32, 70, 189, 232, 16, 64, 33,
-        240, 49, 155, 112, 181, 4, 70, 14, 70, 32, 240, 192, 219, 79, 240, 128,
-        97, 5, 70, 0, 40, 20, 191, 79, 240, 128, 98, 0, 34, 32, 70, 27, 240,
-        143, 223, 53, 177, 114, 1, 4, 212, 32, 105, 189, 232, 112, 64, 17, 240,
-        217, 184, 112, 189, 112, 181, 4, 104, 6, 70, 99, 126, 0, 43, 44, 208,
-        29, 240, 54, 217, 212, 248, 108, 50, 158, 66, 33, 209, 51, 124, 251,
-        177, 212, 248, 28, 55, 0, 40, 20, 191, 79, 240, 0, 117, 0, 37, 26, 104,
-        130, 177, 219, 104, 115, 177, 248, 243, 253, 244, 212, 248, 28, 55,
-        218, 104, 130, 26, 178, 245, 122, 127, 1, 217, 1, 34, 26, 114, 212,
-        248, 28, 55, 0, 34, 218, 96, 32, 70, 79, 240, 0, 113, 42, 70, 27, 240,
-        88, 223, 32, 70, 189, 232, 112, 64, 12, 240, 83, 159, 112, 189, 208,
-        248, 4, 49, 16, 181, 25, 114, 3, 104, 4, 70, 27, 106, 24, 105, 25, 240,
-        224, 253, 32, 70, 189, 232, 16, 64, 255, 247, 189, 191, 16, 181, 144,
-        248, 114, 50, 4, 70, 59, 177, 3, 104, 147, 248, 79, 48, 155, 7, 7, 209,
-        3, 106, 91, 125, 35, 185, 212, 248, 12, 34, 50, 240, 127, 66, 4, 208,
-        79, 244, 128, 17, 32, 70, 10, 70, 2, 224, 32, 70, 79, 244, 128, 17,
-        27, 240, 39, 223, 32, 70, 90, 33, 63, 34, 189, 232, 16, 64, 33, 240,
-        178, 154, 19, 181, 208, 248, 44, 70, 10, 64, 36, 234, 1, 1, 17, 67,
-        3, 104, 192, 248, 44, 22, 27, 126, 107, 177, 3, 35, 0, 147, 33, 177,
-        4, 33, 79, 244, 0, 66, 0, 35, 3, 224, 79, 244, 0, 66, 4, 33, 19, 70,
-        27, 240, 26, 223, 28, 189, 19, 181, 4, 70, 255, 247, 12, 255, 32, 70,
-        19, 240, 98, 221, 212, 248, 116, 52, 0, 32, 147, 248, 173, 16, 1, 34,
-        147, 248, 70, 49, 1, 144, 32, 105, 0, 146, 17, 240, 134, 248, 32, 105,
-        2, 176, 189, 232, 16, 64, 68, 240, 49, 157, 195, 105, 115, 181, 1, 241,
-        12, 5, 3, 235, 69, 5, 174, 136, 0, 235, 65, 1, 178, 26, 170, 128, 177,
-        248, 90, 18, 176, 248, 88, 34, 4, 70, 10, 67, 160, 248, 88, 34, 179,
-        249, 28, 16, 179, 249, 30, 32, 138, 24, 179, 249, 32, 16, 179, 249,
-        34, 48, 82, 24, 218, 66, 43, 209, 144, 248, 116, 50, 217, 6, 1, 213,
-        56, 240, 44, 220, 148, 248, 116, 50, 26, 7, 2, 213, 32, 70, 13, 240,
-        89, 255, 148, 248, 116, 50, 155, 6, 13, 213, 212, 248, 116, 52, 147,
-        248, 80, 48, 67, 177, 32, 70, 42, 240, 75, 248, 148, 248, 116, 50, 35,
-        240, 32, 3, 132, 248, 116, 50, 148, 248, 116, 50, 88, 6, 8, 213, 32,
-        70, 42, 240, 108, 253, 148, 248, 116, 50, 35, 240, 64, 3, 132, 248,
-        116, 50, 35, 104, 147, 248, 47, 48, 115, 177, 148, 248, 117, 50, 91,
-        177, 227, 105, 179, 249, 36, 48, 59, 185, 132, 248, 117, 50, 32, 70,
-        1, 33, 64, 34, 0, 147, 27, 240, 161, 222, 212, 248, 168, 4, 8, 179,
-        208, 248, 248, 48, 155, 104, 6, 43, 28, 209, 195, 104, 219, 104, 91,
-        137, 195, 185, 227, 105, 179, 249, 28, 16, 179, 249, 30, 32, 138, 24,
-        179, 249, 32, 16, 179, 249, 34, 48, 82, 24, 218, 66, 11, 209, 212, 248,
-        208, 36, 212, 248, 204, 52, 2, 50, 83, 248, 34, 16, 2, 176, 189, 232,
-        112, 64, 15, 240, 248, 189, 2, 176, 112, 189, 45, 233, 240, 71, 144,
-        176, 221, 248, 96, 144, 13, 70, 73, 70, 4, 70, 22, 70, 31, 70, 18, 240,
-        125, 255, 128, 70, 185, 241, 0, 15, 1, 209, 208, 248, 12, 144, 0, 35,
-        205, 248, 0, 144, 141, 248, 62, 48, 212, 248, 44, 1, 41, 70, 50, 70,
-        59, 70, 41, 240, 32, 249, 0, 40, 0, 240, 131, 130, 1, 40, 64, 240, 128,
-        130, 32, 70, 41, 70, 50, 70, 59, 70, 251, 247, 208, 249, 176, 241, 0,
-        10, 192, 242, 148, 130, 35, 104, 91, 126, 59, 185, 32, 105, 68, 240,
-        102, 220, 24, 177, 160, 104, 250, 247, 103, 254, 119, 226, 62, 177,
-        3, 47, 5, 217, 14, 168, 49, 70, 4, 34, 242, 247, 87, 253, 1, 224, 0,
-        35, 14, 147, 163, 45, 226, 104, 32, 208, 9, 220, 28, 45, 5, 220, 27,
-        45, 27, 218, 171, 30, 1, 43, 18, 216, 23, 224, 52, 45, 14, 224, 64,
-        242, 11, 19, 157, 66, 17, 208, 3, 220, 214, 45, 14, 208, 251, 45, 5,
-        224, 181, 245, 139, 127, 9, 208, 64, 242, 27, 19, 157, 66, 5, 208, 0,
-        46, 0, 240, 91, 130, 0, 47, 64, 243, 88, 130, 100, 45, 0, 240, 68, 129,
-        46, 220, 63, 45, 0, 240, 209, 128, 18, 220, 21, 45, 123, 208, 7, 220,
-        8, 45, 95, 208, 20, 45, 97, 208, 7, 45, 64, 240, 44, 130, 86, 224, 61,
-        45, 125, 208, 0, 243, 136, 128, 60, 45, 64, 240, 36, 130, 202, 225,
-        80, 45, 0, 240, 82, 129, 9, 220, 74, 45, 0, 240, 196, 129, 79, 45, 0,
-        240, 51, 129, 64, 45, 64, 240, 22, 130, 204, 224, 92, 45, 192, 242,
-        18, 130, 97, 45, 64, 243, 183, 129, 99, 45, 64, 240, 12, 130, 7, 225,
-        212, 45, 17, 220, 211, 45, 128, 242, 174, 129, 170, 45, 9, 220, 168,
-        45, 128, 242, 169, 129, 113, 45, 0, 240, 222, 128, 127, 45, 64, 240,
-        251, 129, 53, 225, 165, 241, 194, 3, 30, 224, 64, 242, 19, 19, 157,
-        66, 16, 220, 181, 245, 137, 127, 128, 242, 114, 129, 181, 245, 132,
-        127, 0, 240, 97, 129, 181, 245, 134, 127, 0, 240, 79, 129, 181, 245,
-        128, 127, 64, 240, 227, 129, 127, 225, 64, 242, 29, 19, 157, 66, 0,
-        240, 113, 129, 192, 242, 219, 129, 165, 245, 154, 115, 3, 59, 1, 43,
-        0, 242, 213, 129, 123, 225, 161, 75, 27, 104, 44, 224, 14, 154, 159,
-        75, 26, 96, 17, 224, 152, 248, 6, 48, 14, 154, 19, 177, 0, 42, 0, 240,
-        201, 129, 0, 50, 212, 248, 56, 51, 24, 191, 1, 34, 131, 248, 52, 32,
-        32, 70, 65, 70, 18, 240, 104, 254, 79, 240, 0, 10, 211, 225, 184, 249,
-        84, 48, 3, 43, 15, 208, 184, 249, 86, 32, 26, 185, 0, 51, 24, 191, 1,
-        35, 8, 224, 2, 35, 6, 224, 212, 248, 116, 52, 147, 248, 28, 81, 29,
-        177, 147, 248, 69, 49, 51, 96, 230, 231, 147, 249, 8, 48, 4, 225, 35,
-        104, 29, 126, 0, 45, 0, 240, 160, 129, 212, 248, 116, 36, 14, 153, 146,
-        248, 28, 49, 147, 177, 203, 178, 130, 248, 70, 49, 212, 248, 116, 36,
-        0, 37, 17, 114, 212, 248, 116, 36, 146, 248, 172, 16, 1, 34, 141, 232,
-        36, 0, 42, 70, 32, 105, 16, 240, 215, 254, 134, 225, 32, 70, 73, 178,
-        42, 240, 113, 252, 176, 241, 0, 10, 192, 242, 149, 129, 212, 248, 116,
-        52, 14, 154, 32, 70, 26, 114, 32, 240, 246, 217, 32, 70, 42, 240, 116,
-        252, 32, 70, 212, 248, 160, 20, 21, 240, 90, 216, 32, 70, 26, 240, 161,
-        217, 129, 225, 212, 248, 116, 52, 147, 248, 28, 113, 23, 177, 147, 248,
-        172, 48, 185, 231, 34, 104, 21, 126, 13, 185, 219, 121, 190, 224, 35,
-        106, 13, 241, 63, 1, 24, 105, 25, 240, 167, 250, 32, 177, 157, 248,
-        63, 48, 186, 70, 51, 96, 104, 225, 212, 248, 116, 52, 219, 121, 51,
-        96, 69, 225, 14, 155, 90, 28, 4, 42, 0, 242, 75, 129, 1, 51, 1, 209,
-        3, 35, 14, 147, 212, 248, 116, 52, 14, 153, 147, 248, 28, 33, 114, 177,
-        201, 178, 131, 248, 173, 16, 212, 248, 116, 52, 0, 34, 147, 248, 69,
-        49, 0, 146, 1, 146, 32, 105, 1, 34, 16, 240, 128, 254, 4, 224, 35, 106,
-        201, 178, 24, 105, 25, 240, 127, 250, 212, 248, 116, 52, 14, 154, 218,
-        113, 100, 231, 35, 104, 27, 126, 0, 43, 0, 240, 44, 129, 212, 248, 116,
-        52, 147, 248, 28, 17, 17, 177, 147, 248, 175, 48, 110, 231, 178, 248,
-        232, 51, 77, 246, 173, 98, 155, 178, 147, 66, 0, 240, 22, 129, 79, 246,
-        255, 114, 147, 66, 0, 240, 17, 129, 195, 243, 64, 19, 94, 231, 99, 126,
-        0, 43, 0, 240, 13, 129, 0, 33, 32, 105, 10, 70, 53, 240, 24, 223, 0,
-        240, 1, 0, 73, 224, 35, 104, 27, 126, 0, 43, 0, 240, 3, 129, 14, 155,
-        0, 37, 1, 34, 91, 27, 32, 70, 41, 70, 24, 191, 1, 35, 0, 149, 27, 240,
-        187, 220, 235, 224, 50, 104, 69, 242, 171, 83, 154, 66, 79, 240, 0,
-        3, 8, 209, 51, 96, 141, 232, 192, 0, 2, 147, 205, 248, 12, 144, 32,
-        70, 36, 73, 83, 224, 141, 232, 192, 0, 2, 147, 205, 248, 12, 144, 32,
-        70, 33, 73, 75, 224, 1, 35, 141, 232, 192, 0, 2, 147, 205, 248, 12,
-        144, 32, 70, 29, 73, 0, 34, 105, 224, 12, 47, 28, 209, 51, 121, 219,
-        7, 0, 241, 216, 128, 32, 70, 65, 70, 50, 29, 40, 240, 39, 248, 4, 70,
-        88, 177, 3, 105, 157, 121, 181, 177, 1, 33, 0, 34, 90, 240, 216, 223,
-        32, 70, 90, 240, 147, 223, 48, 96, 239, 230, 152, 248, 6, 80, 0, 45,
-        64, 240, 186, 128, 7, 224, 4, 47, 64, 240, 188, 128, 152, 248, 6, 80,
-        0, 45, 64, 240, 183, 128, 216, 248, 0, 49, 27, 105, 51, 96, 157, 224,
-        8, 245, 104, 112, 6, 48, 49, 70, 68, 34, 242, 247, 131, 251, 143, 224,
-        8, 7, 0, 0, 45, 217, 3, 0, 10, 87, 136, 0, 141, 232, 192, 0, 0, 35,
-        83, 73, 2, 147, 205, 248, 12, 144, 32, 70, 50, 70, 59, 70, 251, 247,
-        156, 254, 122, 224, 23, 240, 1, 2, 64, 240, 147, 128, 1, 33, 2, 145,
-        32, 70, 75, 73, 76, 76, 141, 232, 192, 0, 205, 248, 12, 144, 157, 66,
-        24, 191, 33, 70, 17, 224, 183, 245, 10, 127, 127, 211, 48, 70, 161,
-        106, 79, 244, 10, 114, 242, 247, 85, 251, 166, 230, 141, 232, 192, 0,
-        0, 34, 66, 73, 2, 146, 205, 248, 12, 144, 32, 70, 19, 70, 215, 231,
-        32, 70, 41, 70, 58, 70, 51, 70, 251, 247, 123, 253, 130, 70, 0, 40,
-        106, 209, 60, 45, 30, 209, 48, 29, 100, 208, 115, 104, 19, 240, 64,
-        127, 96, 209, 3, 240, 127, 3, 22, 43, 92, 216, 53, 74, 154, 64, 89,
-        213, 32, 70, 4, 169, 21, 240, 196, 222, 32, 70, 4, 169, 28, 240, 136,
-        223, 112, 104, 16, 240, 64, 127, 1, 209, 192, 178, 1, 224, 36, 240,
-        214, 252, 112, 96, 11, 224, 135, 45, 9, 209, 35, 106, 24, 105, 25, 240,
-        13, 251, 1, 70, 32, 70, 73, 240, 106, 217, 48, 96, 61, 224, 35, 106,
-        13, 241, 62, 2, 0, 146, 24, 105, 41, 70, 58, 70, 51, 70, 25, 240, 150,
-        255, 74, 45, 130, 70, 6, 208, 2, 220, 60, 45, 45, 209, 2, 224, 92, 61,
-        1, 45, 41, 216, 186, 241, 0, 15, 38, 209, 46, 179, 50, 104, 35, 104,
-        0, 50, 24, 191, 1, 34, 131, 248, 64, 32, 29, 224, 130, 70, 27, 224,
-        111, 240, 22, 10, 24, 224, 111, 240, 6, 10, 21, 224, 170, 70, 19, 224,
-        111, 240, 28, 10, 16, 224, 79, 240, 255, 58, 13, 224, 111, 240, 10,
-        10, 10, 224, 111, 240, 3, 10, 7, 224, 111, 240, 29, 10, 4, 224, 111,
-        240, 13, 10, 1, 224, 111, 240, 1, 10, 80, 70, 16, 176, 189, 232, 240,
-        135, 51, 217, 3, 0, 40, 217, 3, 0, 38, 217, 3, 0, 61, 217, 3, 0, 0,
-        2, 16, 40, 45, 233, 243, 65, 8, 156, 7, 70, 14, 70, 21, 70, 152, 70,
-        0, 148, 255, 247, 38, 253, 16, 241, 47, 15, 12, 208, 16, 241, 23, 15,
-        11, 209, 56, 70, 49, 70, 42, 70, 67, 70, 8, 148, 2, 176, 189, 232, 240,
-        65, 15, 240, 70, 155, 111, 240, 22, 0, 2, 176, 189, 232, 240, 129, 45,
-        233, 240, 71, 12, 70, 136, 176, 145, 178, 129, 70, 18, 240, 54, 253,
-        7, 70, 0, 40, 64, 208, 162, 7, 62, 213, 208, 248, 84, 67, 0, 44, 58,
-        208, 37, 70, 0, 38, 0, 35, 4, 235, 6, 8, 7, 147, 152, 248, 2, 48, 19,
-        179, 164, 33, 113, 67, 96, 24, 97, 24, 1, 241, 176, 10, 213, 248, 152,
-        16, 170, 105, 107, 105, 213, 248, 136, 192, 213, 248, 132, 224, 28,
-        48, 17, 177, 4, 235, 198, 1, 4, 49, 4, 145, 7, 169, 2, 144, 5, 145,
-        72, 70, 57, 70, 141, 232, 0, 80, 205, 248, 12, 160, 22, 240, 148, 254,
-        136, 185, 136, 248, 2, 0, 32, 112, 1, 54, 164, 53, 2, 46, 209, 209,
-        251, 104, 72, 70, 0, 147, 121, 33, 6, 35, 7, 241, 188, 2, 255, 247,
-        151, 255, 1, 35, 99, 112, 8, 176, 189, 232, 240, 135, 240, 181, 4, 70,
-        139, 176, 84, 248, 188, 107, 2, 173, 7, 70, 0, 33, 32, 34, 40, 70, 243,
-        243, 166, 246, 48, 70, 2, 33, 28, 34, 79, 244, 128, 115, 0, 149, 21,
-        240, 62, 220, 72, 35, 173, 248, 14, 48, 33, 70, 0, 35, 6, 34, 13, 241,
-        18, 0, 173, 248, 16, 48, 242, 247, 58, 250, 7, 241, 194, 1, 6, 34, 6,
-        168, 242, 247, 52, 250, 33, 70, 6, 34, 13, 241, 30, 0, 242, 247, 46,
-        250, 48, 70, 79, 244, 208, 97, 32, 34, 43, 70, 32, 240, 139, 222, 11,
-        176, 240, 189, 0, 105, 16, 240, 77, 187, 112, 181, 134, 176, 0, 147,
-        11, 124, 0, 38, 4, 70, 1, 146, 2, 150, 3, 150, 197, 104, 43, 185, 209,
-        248, 244, 48, 30, 142, 0, 54, 24, 191, 1, 38, 157, 248, 56, 48, 163,
-        177, 32, 70, 5, 169, 4, 170, 255, 247, 228, 255, 4, 155, 2, 168, 2,
-        147, 5, 155, 3, 169, 3, 147, 10, 154, 11, 155, 102, 240, 61, 218, 1,
-        168, 105, 70, 2, 154, 3, 155, 102, 240, 31, 218, 79, 240, 128, 81, 32,
-        70, 10, 70, 27, 240, 193, 218, 0, 155, 32, 70, 197, 248, 128, 49, 1,
-        155, 79, 240, 128, 81, 197, 248, 132, 49, 13, 155, 0, 34, 70, 234, 131,
-        22, 12, 155, 197, 248, 136, 97, 197, 248, 140, 49, 27, 240, 173, 218,
-        6, 176, 112, 189, 208, 248, 96, 1, 1, 240, 1, 1, 39, 240, 193, 191,
-        16, 181, 4, 70, 248, 243, 51, 240, 212, 248, 40, 53, 196, 248, 44, 5,
-        1, 51, 196, 248, 40, 53, 16, 189, 16, 181, 4, 70, 248, 243, 39, 240,
-        212, 248, 44, 53, 66, 242, 16, 114, 195, 26, 147, 66, 4, 217, 0, 35,
-        196, 248, 40, 53, 196, 248, 44, 53, 16, 189, 0, 35, 55, 181, 4, 70,
-        29, 70, 226, 24, 210, 248, 152, 34, 4, 51, 0, 42, 24, 191, 1, 37, 16,
-        43, 246, 209, 212, 248, 16, 53, 3, 185, 69, 177, 0, 35, 0, 41, 164,
-        248, 36, 53, 12, 191, 13, 70, 111, 240, 25, 5, 1, 224, 164, 248, 36,
-        21, 35, 104, 27, 126, 187, 177, 32, 70, 31, 240, 42, 223, 32, 70, 124,
-        33, 180, 248, 36, 37, 32, 240, 242, 221, 180, 248, 36, 53, 32, 34, 3,
-        33, 32, 70, 0, 43, 20, 191, 19, 70, 0, 35, 0, 145, 27, 240, 104, 218,
-        32, 70, 25, 240, 203, 222, 40, 70, 62, 189, 55, 181, 3, 104, 4, 70,
-        91, 126, 0, 43, 64, 240, 33, 129, 0, 105, 68, 240, 121, 216, 0, 40,
-        64, 240, 27, 129, 35, 104, 147, 248, 32, 48, 51, 185, 32, 105, 16, 240,
-        95, 251, 35, 104, 1, 34, 131, 248, 32, 32, 32, 105, 16, 240, 22, 250,
-        32, 70, 56, 240, 205, 218, 212, 248, 116, 52, 3, 34, 147, 248, 81, 48,
-        0, 146, 128, 34, 0, 43, 20, 191, 19, 70, 0, 35, 32, 70, 4, 33, 27, 240,
-        54, 218, 35, 104, 219, 110, 227, 185, 32, 105, 54, 240, 128, 218, 9,
-        48, 23, 209, 34, 104, 211, 110, 19, 240, 2, 5, 18, 209, 67, 240, 2,
-        3, 211, 102, 212, 248, 104, 50, 89, 89, 65, 177, 139, 121, 51, 185,
-        75, 121, 35, 177, 11, 124, 19, 177, 32, 70, 55, 240, 253, 219, 4, 53,
-        32, 45, 239, 209, 35, 104, 219, 110, 27, 177, 32, 70, 15, 240, 112,
-        223, 209, 224, 32, 105, 53, 240, 252, 223, 32, 105, 144, 249, 52, 17,
-        77, 28, 3, 209, 1, 33, 53, 240, 242, 223, 1, 224, 53, 240, 71, 223,
-        1, 35, 99, 118, 32, 70, 28, 240, 232, 220, 35, 104, 32, 70, 89, 107,
-        3, 35, 0, 147, 33, 177, 79, 244, 128, 114, 0, 33, 19, 70, 2, 224, 79,
-        244, 128, 114, 11, 70, 27, 240, 236, 217, 160, 104, 9, 240, 71, 218,
-        35, 104, 1, 34, 26, 118, 148, 248, 211, 49, 115, 177, 32, 70, 31, 240,
-        144, 222, 212, 248, 56, 51, 32, 70, 89, 142, 30, 240, 92, 219, 0, 35,
-        132, 248, 211, 49, 32, 70, 25, 240, 58, 222, 212, 248, 44, 38, 3, 33,
-        32, 70, 255, 247, 154, 250, 32, 70, 13, 240, 195, 217, 180, 248, 36,
-        21, 32, 70, 255, 247, 42, 255, 32, 105, 54, 240, 255, 217, 3, 35, 32,
-        34, 0, 147, 32, 70, 19, 70, 1, 33, 27, 240, 187, 217, 35, 104, 147,
-        248, 47, 48, 27, 177, 212, 248, 8, 5, 41, 240, 233, 223, 35, 104, 147,
-        248, 49, 48, 147, 177, 0, 37, 212, 248, 104, 50, 89, 89, 81, 177, 139,
-        121, 67, 185, 75, 121, 51, 177, 209, 248, 204, 48, 216, 7, 2, 213, 32,
-        70, 49, 240, 241, 218, 4, 53, 32, 45, 237, 209, 32, 70, 19, 240, 91,
-        220, 32, 70, 91, 240, 118, 217, 1, 37, 79, 244, 122, 114, 1, 35, 212,
-        248, 236, 17, 160, 104, 9, 240, 65, 217, 212, 248, 160, 1, 132, 248,
-        46, 82, 43, 240, 79, 248, 32, 70, 42, 240, 181, 248, 212, 248, 116,
-        52, 32, 70, 147, 249, 18, 16, 14, 240, 187, 220, 32, 70, 32, 240, 194,
-        218, 32, 70, 32, 240, 171, 218, 32, 70, 41, 70, 32, 240, 99, 219, 227,
-        104, 132, 248, 72, 86, 211, 248, 36, 33, 41, 70, 66, 240, 64, 2, 195,
-        248, 36, 33, 35, 106, 0, 34, 24, 105, 25, 240, 202, 255, 32, 70, 132,
-        248, 116, 86, 56, 240, 3, 218, 126, 33, 32, 105, 53, 240, 121, 221,
-        66, 30, 146, 178, 79, 246, 253, 115, 154, 66, 7, 216, 16, 250, 5, 243,
-        64, 25, 168, 64, 164, 248, 64, 56, 164, 248, 66, 8, 180, 248, 64, 24,
-        33, 177, 32, 70, 180, 248, 92, 39, 32, 240, 195, 220, 180, 248, 66,
-        24, 73, 177, 32, 70, 180, 248, 68, 40, 32, 240, 187, 220, 0, 32, 3,
-        224, 111, 240, 8, 0, 0, 224, 8, 70, 62, 189, 83, 28, 3, 208, 1, 35,
-        19, 250, 2, 242, 0, 224, 255, 34, 209, 248, 204, 0, 16, 64, 194, 235,
-        0, 12, 220, 241, 0, 0, 64, 235, 12, 0, 112, 71, 209, 248, 204, 48, 26,
-        66, 12, 191, 0, 32, 1, 32, 112, 71, 112, 181, 92, 28, 2, 208, 1, 36,
-        156, 64, 0, 224, 255, 36, 209, 248, 204, 80, 4, 234, 5, 6, 26, 177,
-        166, 66, 15, 208, 44, 67, 2, 224, 102, 177, 37, 234, 4, 4, 193, 248,
-        204, 64, 209, 248, 204, 64, 52, 240, 255, 5, 3, 209, 189, 232, 112,
-        64, 250, 247, 250, 189, 112, 189, 0, 0, 45, 233, 240, 71, 23, 70, 209,
-        248, 248, 32, 4, 70, 14, 70, 10, 185, 10, 105, 210, 104, 213, 104, 186,
-        105, 41, 29, 18, 244, 128, 111, 34, 104, 32, 70, 210, 105, 183, 248,
-        14, 144, 20, 191, 210, 248, 52, 128, 210, 248, 48, 128, 58, 70, 251,
-        247, 227, 252, 168, 185, 1, 34, 96, 104, 57, 70, 248, 247, 238, 250,
-        35, 104, 211, 248, 136, 48, 26, 106, 1, 50, 26, 98, 51, 105, 27, 177,
-        219, 104, 26, 106, 1, 50, 26, 98, 214, 248, 92, 49, 1, 51, 198, 248,
-        92, 49, 35, 104, 90, 107, 18, 177, 154, 109, 18, 7, 8, 213, 107, 137,
-        67, 69, 25, 219, 32, 70, 41, 70, 1, 34, 79, 240, 255, 51, 15, 224, 147,
-        248, 83, 48, 131, 177, 9, 74, 9, 240, 7, 3, 210, 92, 12, 33, 1, 251,
-        2, 82, 146, 138, 66, 69, 6, 219, 32, 70, 41, 70, 1, 34, 189, 232, 240,
-        71, 255, 247, 138, 191, 189, 232, 240, 135, 72, 194, 135, 0, 45, 233,
-        240, 65, 209, 248, 204, 64, 6, 70, 13, 70, 36, 240, 255, 7, 42, 177,
-        35, 67, 193, 248, 204, 48, 239, 185, 1, 34, 6, 224, 36, 234, 3, 4, 159,
-        66, 193, 248, 204, 64, 21, 209, 44, 185, 79, 240, 255, 51, 189, 232,
-        240, 65, 250, 247, 130, 189, 7, 36, 1, 34, 162, 64, 213, 248, 204, 48,
-        26, 64, 4, 209, 48, 70, 41, 70, 35, 70, 250, 247, 118, 253, 20, 241,
-        255, 52, 241, 210, 189, 232, 240, 129, 209, 248, 204, 48, 16, 181, 12,
-        70, 59, 177, 79, 240, 255, 51, 0, 34, 250, 247, 103, 253, 0, 35, 196,
-        248, 204, 48, 16, 189, 56, 181, 5, 70, 208, 248, 120, 66, 4, 224, 33,
-        70, 40, 70, 255, 247, 233, 255, 36, 104, 0, 44, 248, 209, 56, 189, 121,
-        177, 114, 177, 72, 106, 11, 106, 195, 24, 203, 97, 8, 109, 203, 108,
-        195, 24, 72, 109, 27, 24, 139, 100, 16, 70, 20, 49, 72, 34, 241, 247,
-        105, 191, 112, 71, 45, 233, 240, 71, 0, 38, 142, 176, 5, 70, 138, 70,
-        144, 70, 15, 70, 52, 70, 30, 224, 249, 7, 26, 213, 107, 105, 83, 248,
-        38, 144, 185, 241, 0, 15, 12, 209, 19, 224, 184, 241, 1, 15, 4, 209,
-        104, 104, 66, 70, 248, 247, 66, 250, 3, 224, 4, 177, 36, 136, 204, 130,
-        12, 70, 74, 75, 1, 33, 72, 70, 219, 107, 152, 71, 1, 70, 0, 40, 235,
-        209, 1, 54, 127, 8, 0, 47, 222, 209, 213, 248, 180, 117, 7, 241, 4,
-        9, 82, 224, 66, 75, 226, 138, 27, 104, 40, 70, 83, 248, 34, 128, 0,
-        35, 33, 70, 1, 170, 227, 130, 251, 247, 17, 255, 40, 70, 33, 70, 1,
-        170, 15, 240, 147, 222, 16, 177, 227, 127, 218, 6, 5, 213, 104, 104,
-        33, 70, 1, 34, 248, 247, 18, 250, 54, 224, 227, 137, 53, 74, 3, 240,
-        7, 3, 209, 92, 163, 105, 67, 244, 128, 115, 35, 244, 0, 66, 162, 97,
-        12, 34, 2, 251, 1, 114, 144, 138, 210, 138, 144, 66, 32, 211, 91, 5,
-        166, 106, 5, 213, 213, 248, 52, 1, 49, 70, 34, 70, 10, 240, 152, 253,
-        1, 34, 104, 104, 33, 70, 248, 247, 241, 249, 43, 104, 211, 248, 136,
-        48, 26, 106, 1, 50, 26, 98, 46, 177, 51, 105, 27, 177, 219, 104, 26,
-        106, 1, 50, 26, 98, 214, 248, 92, 49, 1, 51, 198, 248, 92, 49, 3, 224,
-        72, 70, 34, 70, 244, 243, 48, 244, 68, 70, 0, 44, 170, 209, 86, 70,
-        18, 224, 240, 7, 14, 213, 107, 105, 83, 248, 36, 48, 83, 177, 235, 105,
-        3, 235, 68, 3, 154, 139, 19, 178, 0, 43, 3, 221, 40, 70, 33, 70, 255,
-        247, 179, 248, 1, 52, 118, 8, 0, 46, 234, 209, 213, 248, 128, 65, 197,
-        248, 180, 101, 133, 248, 177, 101, 100, 177, 40, 70, 18, 240, 176, 248,
-        1, 70, 32, 70, 85, 240, 200, 223, 129, 7, 3, 213, 213, 248, 128, 1,
-        85, 240, 198, 223, 14, 176, 189, 232, 240, 135, 0, 191, 208, 134, 135,
-        0, 32, 7, 0, 0, 72, 194, 135, 0, 144, 248, 176, 37, 50, 185, 208, 248,
-        172, 21, 1, 34, 128, 248, 176, 37, 12, 240, 20, 156, 112, 71, 247, 181,
-        144, 248, 214, 49, 4, 70, 0, 43, 64, 240, 175, 128, 3, 104, 30, 126,
-        0, 46, 0, 240, 171, 128, 25, 240, 183, 221, 1, 35, 132, 248, 214, 49,
-        32, 105, 17, 240, 71, 254, 6, 70, 32, 105, 67, 240, 141, 221, 5, 70,
-        16, 177, 0, 39, 61, 70, 66, 224, 212, 248, 104, 1, 4, 33, 89, 240, 91,
-        219, 212, 248, 104, 50, 95, 89, 71, 179, 187, 121, 59, 177, 59, 121,
-        35, 179, 32, 70, 57, 70, 55, 240, 125, 217, 54, 24, 30, 224, 56, 70,
-        46, 240, 144, 223, 123, 121, 54, 24, 195, 177, 35, 104, 32, 70, 147,
-        248, 49, 48, 57, 70, 91, 177, 215, 248, 204, 48, 218, 7, 7, 213, 55,
-        240, 105, 217, 54, 24, 212, 248, 92, 1, 63, 240, 34, 219, 6, 224, 55,
-        240, 31, 217, 54, 24, 79, 244, 122, 96, 247, 243, 26, 246, 4, 53, 32,
-        45, 207, 209, 198, 231, 212, 248, 168, 50, 219, 25, 27, 107, 43, 177,
-        212, 248, 172, 34, 82, 248, 37, 0, 152, 71, 54, 24, 1, 53, 56, 55, 35,
-        104, 147, 248, 184, 48, 157, 66, 237, 219, 148, 248, 46, 50, 75, 177,
-        160, 104, 212, 248, 236, 17, 8, 240, 242, 222, 0, 185, 1, 54, 0, 35,
-        132, 248, 46, 50, 32, 70, 250, 247, 234, 254, 35, 104, 0, 33, 25, 118,
-        35, 106, 79, 240, 255, 50, 134, 25, 24, 105, 24, 240, 93, 248, 32, 70,
-        15, 240, 97, 216, 32, 70, 255, 247, 151, 254, 212, 248, 120, 82, 7,
-        224, 0, 35, 41, 29, 96, 104, 1, 34, 0, 147, 244, 243, 102, 242, 45,
-        104, 0, 45, 245, 209, 212, 248, 124, 2, 16, 177, 65, 240, 252, 216,
-        54, 24, 32, 105, 52, 240, 66, 223, 0, 37, 134, 25, 212, 248, 104, 50,
-        89, 89, 97, 177, 139, 121, 83, 185, 35, 104, 147, 248, 49, 48, 27, 177,
-        209, 248, 204, 48, 219, 7, 2, 212, 32, 70, 71, 240, 237, 219, 4, 53,
-        32, 45, 235, 209, 0, 35, 99, 118, 132, 248, 214, 49, 0, 224, 0, 38,
-        48, 70, 254, 189, 68, 242, 33, 51, 152, 66, 84, 208, 68, 242, 19, 51,
-        152, 66, 80, 208, 68, 242, 26, 51, 152, 66, 76, 208, 68, 242, 42, 51,
-        152, 66, 72, 208, 68, 242, 22, 51, 152, 66, 68, 208, 68, 242, 29, 51,
-        152, 66, 64, 208, 68, 242, 45, 51, 152, 66, 60, 208, 68, 242, 82, 51,
-        152, 66, 56, 208, 68, 242, 90, 51, 152, 66, 52, 208, 68, 242, 72, 51,
-        152, 66, 48, 208, 68, 242, 51, 51, 152, 66, 44, 208, 68, 242, 162, 51,
-        152, 66, 40, 208, 68, 242, 176, 51, 152, 66, 36, 208, 68, 242, 173,
-        51, 152, 66, 32, 208, 68, 242, 229, 51, 152, 66, 28, 208, 68, 242, 179,
-        51, 152, 66, 24, 208, 68, 242, 165, 51, 152, 66, 20, 208, 68, 242, 185,
-        51, 152, 66, 16, 208, 68, 242, 194, 51, 152, 66, 12, 208, 68, 242, 79,
-        51, 152, 66, 10, 208, 68, 242, 188, 51, 195, 235, 0, 12, 220, 241, 0,
-        0, 64, 235, 12, 0, 112, 71, 1, 32, 112, 71, 1, 32, 112, 71, 45, 233,
-        240, 71, 144, 248, 116, 50, 162, 176, 219, 6, 4, 70, 14, 70, 0, 241,
-        183, 128, 144, 248, 177, 53, 0, 43, 64, 240, 178, 128, 208, 248, 164,
-        53, 153, 66, 64, 240, 173, 128, 144, 248, 32, 49, 0, 43, 64, 240, 168,
-        128, 1, 35, 128, 248, 32, 49, 208, 248, 4, 160, 1, 241, 4, 9, 176, 248,
-        88, 82, 139, 224, 151, 106, 57, 105, 209, 248, 204, 48, 152, 3, 27,
-        213, 209, 248, 148, 51, 91, 7, 2, 213, 147, 105, 152, 7, 20, 212, 32,
-        70, 31, 155, 55, 240, 123, 219, 0, 40, 120, 208, 2, 154, 147, 105, 91,
-        5, 4, 213, 212, 248, 52, 1, 57, 70, 10, 240, 231, 251, 80, 70, 2, 153,
-        1, 34, 248, 247, 61, 248, 105, 224, 147, 105, 88, 5, 7, 213, 212, 248,
-        52, 1, 49, 70, 2, 170, 31, 155, 9, 240, 90, 251, 69, 224, 19, 240, 4,
-        3, 7, 208, 1, 35, 17, 70, 32, 70, 33, 170, 32, 147, 27, 240, 241, 217,
-        6, 224, 0, 147, 32, 70, 2, 169, 32, 170, 33, 171, 254, 247, 79, 248,
-        0, 40, 49, 209, 33, 153, 3, 41, 9, 216, 35, 104, 147, 248, 156, 48,
-        1, 43, 4, 209, 212, 248, 52, 1, 3, 34, 8, 240, 70, 252, 1, 175, 79,
-        240, 0, 8, 28, 224, 121, 104, 18, 170, 32, 70, 251, 247, 248, 252, 189,
-        248, 76, 32, 17, 4, 7, 213, 121, 104, 0, 35, 0, 147, 212, 248, 96, 1,
-        137, 106, 39, 240, 189, 250, 1, 35, 0, 147, 1, 147, 32, 70, 33, 153,
-        87, 248, 4, 47, 18, 171, 1, 240, 93, 251, 8, 241, 1, 8, 32, 155, 152,
-        69, 223, 219, 24, 224, 16, 48, 22, 209, 72, 70, 31, 153, 2, 154, 244,
-        243, 58, 242, 148, 248, 116, 50, 75, 177, 180, 248, 88, 50, 1, 34, 29,
-        64, 31, 155, 18, 250, 3, 243, 37, 234, 3, 5, 4, 224, 180, 248, 88, 50,
-        157, 66, 11, 208, 29, 70, 77, 177, 31, 170, 72, 70, 41, 70, 244, 243,
-        88, 241, 2, 70, 2, 144, 0, 40, 127, 244, 105, 175, 32, 70, 49, 70, 20,
-        240, 161, 221, 0, 35, 132, 248, 32, 49, 34, 176, 189, 232, 240, 135,
-        0, 0, 45, 233, 243, 65, 12, 70, 25, 105, 144, 70, 5, 70, 30, 70, 8,
-        154, 0, 41, 72, 208, 88, 104, 44, 75, 231, 137, 3, 64, 7, 240, 7, 7,
-        35, 177, 43, 104, 91, 107, 11, 177, 40, 75, 218, 93, 166, 98, 145, 248,
-        68, 48, 1, 146, 132, 248, 33, 48, 9, 155, 0, 34, 0, 147, 33, 70, 19,
-        70, 40, 70, 14, 240, 96, 223, 50, 105, 33, 75, 145, 121, 25, 185, 210,
-        248, 148, 35, 81, 7, 17, 213, 150, 248, 231, 32, 114, 177, 162, 105,
-        146, 7, 11, 212, 218, 93, 13, 42, 1, 220, 1, 50, 0, 224, 15, 34, 40,
-        70, 33, 70, 12, 240, 75, 253, 168, 177, 33, 224, 219, 93, 8, 241, 4,
-        1, 13, 43, 1, 220, 1, 51, 0, 224, 15, 35, 40, 70, 34, 70, 251, 247,
-        97, 249, 56, 177, 157, 248, 40, 48, 139, 185, 40, 70, 65, 70, 255, 247,
-        233, 254, 12, 224, 104, 104, 1, 34, 33, 70, 247, 247, 100, 255, 43,
-        104, 0, 32, 211, 248, 136, 48, 26, 106, 1, 50, 26, 98, 0, 224, 1, 32,
-        189, 232, 252, 129, 0, 191, 64, 0, 1, 0, 138, 182, 135, 0, 72, 194,
-        135, 0, 45, 233, 240, 79, 179, 176, 13, 70, 61, 153, 15, 147, 73, 137,
-        144, 70, 173, 248, 88, 16, 138, 178, 65, 70, 18, 146, 4, 70, 16, 240,
-        226, 218, 184, 248, 22, 48, 192, 178, 184, 248, 4, 224, 16, 144, 15,
-        153, 64, 70, 26, 147, 205, 248, 108, 224, 35, 240, 11, 255, 63, 153,
-        0, 39, 61, 154, 62, 155, 15, 112, 16, 153, 12, 50, 12, 59, 14, 144,
-        21, 146, 24, 147, 12, 145, 154, 70, 22, 70, 17, 151, 10, 151, 25, 151,
-        187, 70, 13, 151, 11, 151, 20, 151, 19, 151, 9, 151, 8, 151, 169, 70,
-        78, 224, 51, 120, 149, 28, 45, 43, 32, 208, 7, 216, 1, 43, 19, 208,
-        66, 211, 3, 43, 18, 208, 42, 43, 63, 209, 19, 224, 61, 43, 28, 208,
-        5, 216, 9, 154, 50, 43, 8, 191, 50, 70, 9, 146, 53, 224, 74, 43, 26,
-        208, 221, 43, 49, 209, 30, 224, 8, 150, 46, 224, 179, 120, 1, 39, 12,
-        147, 42, 224, 177, 28, 19, 145, 20, 146, 38, 224, 32, 70, 49, 70, 42,
-        70, 69, 240, 95, 218, 131, 70, 31, 224, 32, 70, 49, 70, 42, 70, 69,
-        240, 46, 218, 13, 144, 24, 224, 32, 70, 49, 70, 42, 70, 68, 240, 159,
-        218, 25, 144, 17, 224, 3, 42, 15, 217, 176, 28, 4, 34, 143, 73, 241,
-        247, 211, 251, 17, 155, 0, 40, 8, 191, 43, 70, 17, 147, 10, 155, 8,
-        191, 51, 70, 10, 147, 0, 224, 11, 150, 118, 25, 197, 235, 10, 10, 186,
-        241, 1, 15, 3, 221, 114, 120, 83, 28, 83, 69, 169, 219, 10, 155, 77,
-        70, 67, 177, 187, 241, 0, 15, 5, 209, 32, 70, 25, 70, 17, 154, 69, 240,
-        220, 217, 131, 70, 0, 45, 121, 209, 18, 153, 139, 7, 64, 241, 112, 131,
-        11, 155, 0, 43, 0, 240, 108, 131, 32, 70, 153, 28, 90, 120, 17, 240,
-        46, 254, 49, 144, 0, 40, 0, 240, 99, 131, 3, 124, 0, 43, 64, 240, 95,
-        131, 3, 122, 0, 43, 0, 240, 91, 131, 208, 248, 244, 48, 88, 142, 244,
-        243, 119, 242, 12, 153, 129, 66, 64, 240, 82, 131, 49, 158, 32, 70,
-        49, 70, 14, 240, 118, 216, 0, 40, 73, 208, 48, 70, 65, 70, 15, 154,
-        61, 155, 19, 240, 76, 223, 0, 40, 65, 208, 62, 155, 214, 248, 240, 144,
-        61, 154, 1, 147, 60, 155, 0, 146, 32, 70, 3, 241, 16, 2, 65, 70, 1,
-        35, 205, 248, 8, 144, 28, 240, 92, 217, 0, 40, 49, 209, 185, 248, 48,
-        48, 27, 177, 35, 104, 147, 248, 73, 49, 91, 179, 33, 106, 212, 248,
-        116, 52, 80, 49, 0, 34, 155, 120, 9, 241, 56, 0, 35, 240, 189, 253,
-        62, 153, 48, 70, 0, 145, 15, 154, 65, 70, 61, 155, 15, 240, 234, 248,
-        0, 35, 0, 147, 1, 147, 50, 124, 32, 70, 195, 235, 2, 14, 222, 241, 0,
-        2, 66, 235, 14, 2, 2, 146, 3, 147, 4, 147, 125, 34, 49, 70, 6, 241,
-        188, 3, 20, 240, 57, 217, 1, 34, 11, 146, 3, 224, 11, 149, 1, 224, 0,
-        35, 11, 147, 78, 179, 53, 70, 1, 224, 0, 33, 11, 145, 26, 154, 60, 155,
-        18, 244, 64, 79, 12, 191, 79, 240, 0, 10, 79, 240, 1, 10, 3, 241, 10,
-        9, 32, 70, 41, 70, 74, 70, 83, 70, 38, 240, 182, 255, 6, 70, 0, 187,
-        43, 124, 0, 43, 64, 240, 228, 130, 32, 70, 41, 70, 74, 70, 83, 70, 39,
-        240, 93, 248, 6, 70, 0, 40, 0, 240, 218, 130, 32, 70, 49, 70, 90, 240,
-        176, 218, 13, 224, 148, 248, 114, 50, 0, 43, 0, 240, 208, 130, 60, 154,
-        32, 70, 2, 241, 10, 1, 49, 170, 90, 240, 219, 218, 6, 70, 16, 177, 115,
-        104, 216, 7, 32, 212, 9, 155, 35, 177, 88, 120, 153, 28, 28, 240, 198,
-        216, 88, 185, 8, 153, 97, 177, 72, 120, 2, 49, 28, 240, 191, 216, 16,
-        241, 0, 10, 24, 191, 79, 240, 1, 10, 4, 224, 79, 240, 1, 10, 1, 224,
-        221, 248, 32, 160, 102, 177, 186, 241, 0, 15, 7, 209, 115, 104, 67,
-        240, 1, 3, 115, 96, 4, 224, 79, 240, 0, 10, 1, 224, 79, 240, 1, 10,
-        205, 177, 171, 121, 243, 185, 43, 122, 235, 177, 213, 248, 244, 48,
-        91, 142, 8, 147, 3, 244, 96, 83, 163, 245, 192, 82, 83, 66, 67, 235,
-        2, 3, 8, 152, 9, 147, 244, 243, 168, 241, 12, 154, 129, 26, 72, 66,
-        64, 235, 1, 0, 10, 144, 10, 224, 9, 149, 8, 149, 10, 149, 6, 224, 0,
-        191, 82, 179, 3, 0, 0, 35, 9, 147, 8, 147, 10, 147, 180, 248, 114, 50,
-        0, 43, 0, 240, 133, 128, 35, 106, 91, 125, 219, 177, 221, 248, 48, 224,
-        212, 248, 108, 4, 190, 241, 14, 15, 140, 191, 79, 244, 64, 66, 0, 34,
-        78, 244, 128, 81, 221, 248, 72, 224, 17, 67, 14, 240, 32, 3, 211, 241,
-        1, 3, 56, 191, 0, 35, 1, 147, 19, 154, 20, 155, 205, 248, 0, 160, 84,
-        240, 228, 218, 35, 104, 147, 248, 79, 48, 155, 7, 18, 208, 12, 154,
-        212, 248, 112, 4, 14, 42, 140, 191, 79, 244, 64, 67, 0, 35, 66, 244,
-        128, 81, 9, 154, 25, 67, 1, 146, 91, 70, 13, 154, 205, 248, 0, 160,
-        84, 240, 254, 223, 148, 248, 114, 50, 0, 43, 73, 208, 0, 33, 12, 34,
-        46, 168, 242, 243, 215, 246, 152, 75, 13, 241, 116, 9, 46, 147, 151,
-        75, 0, 33, 36, 34, 72, 70, 47, 147, 48, 148, 242, 243, 203, 246, 13,
-        241, 152, 12, 12, 155, 189, 248, 88, 224, 96, 70, 0, 33, 32, 34, 141,
-        248, 120, 48, 173, 248, 122, 224, 205, 248, 28, 192, 29, 150, 141, 248,
-        124, 160, 242, 243, 184, 246, 61, 155, 15, 153, 41, 147, 35, 104, 60,
-        154, 147, 248, 79, 48, 39, 145, 3, 240, 3, 3, 14, 153, 40, 146, 141,
-        248, 176, 48, 21, 154, 24, 155, 221, 248, 64, 224, 221, 248, 28, 192,
-        43, 145, 1, 146, 2, 147, 212, 248, 124, 6, 0, 33, 144, 34, 46, 171,
-        205, 248, 180, 144, 205, 248, 152, 128, 141, 248, 168, 224, 205, 248,
-        0, 192, 67, 240, 10, 219, 148, 248, 112, 50, 0, 43, 0, 240, 235, 129,
-        10, 153, 0, 41, 0, 240, 231, 129, 35, 104, 147, 248, 79, 32, 144, 7,
-        0, 240, 135, 128, 13, 154, 0, 42, 0, 240, 131, 128, 187, 241, 0, 15,
-        127, 208, 147, 248, 173, 48, 51, 177, 212, 248, 124, 1, 41, 70, 64,
-        240, 2, 218, 0, 40, 117, 209, 13, 155, 32, 70, 90, 120, 25, 120, 25,
-        240, 166, 219, 221, 248, 32, 224, 3, 70, 30, 244, 64, 79, 12, 191, 0,
-        34, 1, 34, 10, 50, 84, 248, 34, 32, 17, 146, 213, 248, 244, 32, 98,
-        177, 210, 136, 18, 240, 32, 2, 8, 208, 155, 248, 0, 32, 18, 240, 2,
-        2, 3, 208, 13, 153, 74, 120, 194, 243, 128, 2, 10, 146, 111, 185, 221,
-        248, 64, 224, 218, 178, 114, 69, 8, 208, 24, 70, 7, 147, 244, 243, 191,
-        240, 16, 153, 7, 155, 136, 66, 64, 240, 158, 129, 213, 248, 244, 32,
-        0, 42, 44, 208, 24, 70, 7, 147, 244, 243, 178, 240, 129, 70, 8, 152,
-        244, 243, 174, 240, 129, 69, 7, 155, 33, 209, 213, 248, 244, 32, 82,
-        142, 154, 66, 47, 208, 0, 46, 45, 208, 42, 122, 90, 179, 32, 70, 17,
-        153, 42, 70, 26, 240, 75, 218, 255, 40, 7, 70, 0, 240, 125, 129, 221,
-        248, 40, 224, 32, 70, 41, 70, 58, 70, 95, 250, 142, 243, 249, 247, 109,
-        254, 192, 177, 32, 70, 41, 70, 58, 70, 31, 240, 120, 219, 18, 224, 143,
-        177, 24, 70, 7, 147, 244, 243, 132, 240, 12, 153, 7, 155, 136, 66, 0,
-        240, 99, 129, 3, 244, 96, 83, 179, 245, 128, 95, 3, 208, 179, 245, 192,
-        95, 64, 240, 90, 129, 63, 154, 1, 35, 19, 112, 35, 104, 213, 248, 4,
-        113, 147, 248, 79, 48, 153, 7, 23, 208, 182, 177, 187, 241, 0, 15, 6,
-        208, 25, 155, 32, 70, 0, 147, 49, 70, 90, 70, 13, 155, 10, 224, 43,
-        124, 83, 185, 115, 104, 218, 3, 7, 213, 205, 248, 0, 176, 32, 70, 49,
-        70, 90, 70, 91, 70, 13, 240, 76, 219, 43, 124, 0, 43, 102, 208, 60,
-        153, 61, 154, 0, 145, 1, 146, 15, 155, 32, 70, 41, 70, 66, 70, 12, 240,
-        19, 217, 123, 122, 27, 177, 40, 70, 0, 33, 29, 240, 157, 222, 123, 123,
-        59, 185, 40, 70, 249, 247, 150, 253, 24, 177, 40, 70, 1, 33, 30, 240,
-        107, 217, 123, 123, 59, 179, 27, 155, 14, 154, 195, 243, 192, 17, 40,
-        70, 61, 155, 17, 240, 123, 223, 212, 248, 28, 55, 26, 104, 34, 177,
-        147, 248, 8, 144, 185, 241, 0, 15, 7, 208, 40, 70, 0, 33, 17, 224, 0,
-        191, 37, 206, 129, 0, 41, 206, 129, 0, 246, 243, 168, 247, 212, 248,
-        28, 55, 26, 105, 130, 26, 178, 245, 122, 127, 5, 217, 1, 34, 26, 114,
-        40, 70, 73, 70, 30, 240, 65, 217, 35, 106, 91, 125, 51, 177, 221, 248,
-        72, 224, 32, 70, 206, 243, 128, 33, 30, 240, 199, 222, 212, 248, 92,
-        1, 8, 153, 62, 240, 250, 221, 0, 40, 81, 208, 8, 153, 212, 248, 92,
-        1, 62, 240, 227, 216, 35, 106, 24, 105, 23, 240, 199, 251, 8, 153, 136,
-        66, 69, 209, 0, 33, 32, 70, 10, 70, 26, 240, 161, 218, 63, 224, 186,
-        241, 0, 15, 3, 209, 18, 154, 194, 243, 64, 19, 0, 224, 1, 35, 219, 178,
-        62, 177, 114, 104, 19, 177, 66, 240, 4, 2, 1, 224, 34, 240, 4, 2, 114,
-        96, 34, 106, 82, 125, 74, 177, 1, 147, 212, 248, 108, 4, 41, 70, 19,
-        154, 20, 155, 205, 248, 0, 160, 84, 240, 149, 217, 35, 104, 147, 248,
-        79, 48, 155, 7, 10, 208, 9, 155, 212, 248, 112, 4, 1, 147, 41, 70, 13,
-        154, 91, 70, 205, 248, 0, 160, 84, 240, 183, 222, 11, 153, 113, 185,
-        148, 248, 114, 50, 91, 185, 212, 248, 108, 50, 157, 66, 7, 209, 40,
-        70, 249, 247, 9, 253, 24, 177, 32, 70, 61, 153, 17, 240, 50, 220, 0,
-        33, 12, 34, 46, 168, 242, 243, 43, 245, 70, 75, 13, 241, 116, 9, 46,
-        147, 69, 75, 0, 33, 36, 34, 72, 70, 47, 147, 48, 148, 242, 243, 31,
-        245, 12, 154, 189, 248, 88, 48, 29, 150, 38, 174, 0, 33, 141, 248, 120,
-        32, 48, 70, 32, 34, 173, 248, 122, 48, 141, 248, 124, 160, 242, 243,
-        15, 245, 61, 155, 15, 153, 41, 147, 35, 104, 60, 154, 147, 248, 79,
-        48, 39, 145, 3, 240, 3, 3, 14, 153, 40, 146, 141, 248, 176, 48, 21,
-        154, 24, 155, 221, 248, 64, 224, 43, 145, 1, 146, 2, 147, 128, 34, 46,
-        171, 212, 248, 124, 6, 41, 70, 205, 248, 180, 144, 205, 248, 152, 128,
-        141, 248, 168, 224, 0, 150, 67, 240, 100, 217, 187, 120, 1, 59, 219,
-        178, 1, 43, 19, 216, 171, 121, 139, 185, 42, 124, 122, 177, 213, 248,
-        4, 33, 146, 248, 108, 32, 2, 42, 9, 209, 79, 240, 255, 50, 1, 146, 32,
-        70, 41, 70, 5, 241, 188, 2, 0, 147, 28, 240, 79, 223, 14, 153, 17, 240,
-        64, 127, 1, 209, 8, 70, 2, 224, 14, 152, 35, 240, 38, 250, 0, 240, 127,
-        0, 2, 40, 10, 208, 4, 40, 8, 208, 11, 40, 6, 208, 160, 241, 22, 12,
-        220, 241, 0, 0, 64, 235, 12, 0, 0, 224, 1, 32, 1, 144, 184, 248, 4,
-        0, 184, 248, 6, 16, 128, 11, 2, 144, 1, 32, 0, 34, 3, 144, 152, 249,
-        28, 48, 32, 70, 9, 10, 0, 146, 4, 149, 41, 240, 74, 251, 4, 224, 0,
-        34, 11, 146, 42, 229, 0, 38, 57, 229, 51, 176, 189, 232, 240, 143, 0,
-        191, 37, 206, 129, 0, 41, 206, 129, 0, 45, 233, 240, 79, 145, 249, 21,
-        48, 159, 176, 0, 37, 4, 70, 136, 70, 28, 149, 29, 149, 115, 177, 17,
-        240, 95, 223, 88, 177, 35, 104, 184, 248, 28, 32, 211, 248, 136, 48,
-        170, 70, 211, 248, 200, 17, 138, 24, 195, 248, 200, 33, 237, 227, 184,
-        248, 2, 48, 96, 104, 3, 240, 7, 3, 5, 43, 9, 144, 8, 147, 0, 242, 226,
-        131, 99, 105, 8, 153, 83, 248, 33, 0, 0, 40, 0, 240, 219, 131, 152,
-        248, 24, 32, 2, 42, 7, 146, 0, 240, 210, 131, 100, 75, 2, 33, 219, 107,
-        152, 71, 129, 70, 56, 185, 32, 70, 8, 153, 11, 240, 17, 217, 129, 70,
-        0, 40, 0, 240, 199, 131, 32, 70, 73, 70, 15, 170, 250, 247, 227, 255,
-        35, 104, 147, 248, 156, 48, 1, 43, 6, 208, 184, 248, 2, 32, 189, 248,
-        64, 48, 154, 66, 64, 240, 188, 131, 185, 248, 14, 48, 84, 78, 3, 240,
-        7, 3, 243, 92, 83, 77, 73, 70, 235, 92, 15, 170, 10, 147, 22, 155, 11,
-        147, 24, 136, 28, 171, 12, 144, 0, 147, 32, 70, 29, 171, 249, 247, 241,
-        255, 35, 104, 147, 248, 79, 48, 155, 7, 23, 208, 15, 168, 249, 247,
-        76, 252, 56, 177, 35, 104, 211, 248, 136, 48, 211, 248, 164, 34, 1,
-        50, 195, 248, 164, 34, 15, 168, 249, 247, 82, 252, 56, 177, 35, 104,
-        211, 248, 136, 48, 211, 248, 172, 34, 1, 50, 195, 248, 172, 34, 217,
-        248, 24, 48, 93, 5, 83, 213, 15, 173, 32, 70, 41, 70, 250, 247, 149,
-        255, 0, 149, 0, 187, 67, 70, 212, 248, 52, 1, 28, 153, 74, 70, 8, 240,
-        24, 254, 35, 104, 147, 248, 229, 48, 0, 43, 64, 208, 28, 153, 0, 41,
-        61, 208, 189, 248, 72, 0, 184, 248, 2, 32, 0, 144, 189, 248, 70, 48,
-        212, 248, 228, 6, 90, 240, 181, 216, 212, 248, 96, 1, 28, 153, 10, 154,
-        38, 240, 23, 255, 43, 224, 67, 70, 212, 248, 52, 1, 28, 153, 74, 70,
-        8, 240, 249, 253, 35, 104, 130, 70, 147, 248, 229, 48, 147, 177, 28,
-        153, 129, 177, 189, 248, 72, 0, 184, 248, 2, 32, 0, 144, 189, 248, 70,
-        48, 212, 248, 228, 6, 90, 240, 149, 216, 212, 248, 96, 1, 28, 153, 10,
-        154, 38, 240, 247, 254, 29, 152, 0, 40, 0, 240, 55, 131, 131, 121, 0,
-        43, 64, 240, 51, 131, 8, 241, 8, 1, 82, 240, 109, 221, 45, 227, 32,
-        70, 15, 169, 217, 248, 52, 112, 249, 247, 5, 252, 184, 248, 28, 96,
-        255, 14, 7, 240, 1, 7, 13, 144, 184, 248, 26, 80, 230, 177, 35, 104,
-        211, 248, 136, 48, 218, 104, 1, 58, 146, 25, 218, 96, 28, 155, 155,
-        177, 103, 177, 211, 248, 60, 34, 1, 58, 146, 25, 195, 248, 60, 34, 11,
-        224, 208, 134, 135, 0, 138, 182, 135, 0, 84, 194, 135, 0, 211, 248,
-        72, 34, 1, 58, 146, 25, 195, 248, 72, 34, 53, 177, 35, 104, 211, 248,
-        136, 48, 218, 104, 1, 58, 82, 25, 218, 96, 12, 153, 9, 152, 1, 244,
-        128, 106, 218, 241, 1, 10, 73, 70, 56, 191, 79, 240, 0, 10, 245, 247,
-        188, 248, 217, 248, 24, 48, 152, 249, 25, 32, 195, 243, 192, 107, 0,
-        42, 121, 208, 35, 104, 211, 248, 136, 48, 211, 248, 168, 33, 1, 50,
-        195, 248, 168, 33, 211, 248, 200, 33, 1, 58, 146, 25, 195, 248, 200,
-        33, 28, 155, 43, 177, 26, 105, 26, 177, 210, 104, 209, 107, 1, 49, 209,
-        99, 1, 46, 5, 221, 212, 248, 124, 84, 1, 61, 173, 25, 196, 248, 124,
-        84, 186, 241, 0, 15, 66, 208, 34, 104, 210, 248, 136, 32, 210, 248,
-        216, 17, 1, 49, 194, 248, 216, 17, 43, 177, 26, 105, 26, 177, 210, 104,
-        81, 107, 1, 49, 81, 99, 212, 248, 124, 36, 114, 177, 34, 104, 210, 248,
-        136, 32, 210, 248, 180, 17, 1, 49, 194, 248, 180, 17, 43, 177, 27, 105,
-        27, 177, 219, 104, 218, 106, 1, 50, 218, 98, 212, 248, 124, 52, 1, 43,
-        15, 217, 35, 104, 211, 248, 136, 48, 211, 248, 184, 33, 1, 50, 195,
-        248, 184, 33, 28, 155, 43, 177, 27, 105, 27, 177, 219, 104, 26, 107,
-        1, 50, 26, 99, 28, 155, 91, 177, 47, 177, 211, 248, 56, 34, 1, 50, 195,
-        248, 56, 34, 4, 224, 211, 248, 68, 34, 1, 50, 195, 248, 68, 34, 28,
-        155, 19, 177, 34, 104, 146, 106, 154, 98, 29, 155, 0, 43, 0, 240, 157,
-        129, 154, 121, 0, 42, 64, 240, 136, 130, 29, 124, 0, 45, 0, 240, 133,
-        130, 211, 248, 252, 48, 21, 70, 154, 113, 127, 226, 19, 244, 130, 83,
-        63, 208, 35, 104, 211, 248, 136, 48, 211, 248, 168, 33, 1, 50, 195,
-        248, 168, 33, 28, 155, 43, 177, 26, 105, 26, 177, 210, 104, 209, 107,
-        1, 49, 209, 99, 186, 241, 0, 15, 28, 208, 34, 104, 210, 248, 136, 32,
-        210, 248, 216, 17, 1, 49, 194, 248, 216, 17, 155, 177, 26, 105, 0, 42,
-        0, 240, 83, 130, 210, 104, 81, 107, 1, 49, 81, 99, 77, 226, 211, 248,
-        56, 34, 1, 50, 195, 248, 56, 34, 4, 224, 211, 248, 68, 34, 1, 50, 195,
-        248, 68, 34, 28, 154, 0, 42, 0, 240, 91, 129, 29, 155, 0, 43, 0, 240,
-        97, 129, 157, 121, 0, 45, 64, 240, 97, 129, 35, 104, 155, 106, 147,
-        98, 93, 225, 7, 154, 3, 42, 0, 240, 93, 129, 4, 42, 8, 209, 34, 104,
-        210, 248, 136, 32, 210, 248, 16, 18, 1, 49, 194, 248, 16, 18, 81, 225,
-        7, 152, 5, 40, 35, 209, 35, 104, 90, 107, 211, 248, 140, 16, 58, 177,
-        185, 248, 14, 32, 157, 72, 2, 240, 7, 2, 130, 92, 156, 72, 130, 92,
-        20, 50, 1, 235, 194, 1, 74, 104, 211, 248, 136, 48, 1, 50, 74, 96, 211,
-        248, 160, 34, 180, 248, 36, 85, 1, 50, 195, 248, 160, 34, 0, 45, 0,
-        240, 53, 129, 32, 70, 254, 247, 88, 252, 0, 37, 47, 225, 7, 153, 1,
-        41, 35, 209, 29, 155, 171, 177, 155, 121, 155, 177, 28, 155, 139, 177,
-        26, 125, 208, 7, 3, 212, 147, 248, 36, 48, 153, 7, 12, 213, 32, 70,
-        73, 70, 66, 70, 83, 70, 12, 240, 43, 249, 7, 70, 0, 40, 0, 240, 25,
-        129, 2, 224, 7, 159, 0, 224, 1, 39, 32, 70, 8, 241, 20, 1, 17, 240,
-        42, 221, 0, 37, 46, 70, 171, 70, 22, 225, 7, 154, 6, 42, 0, 240, 0,
-        129, 184, 248, 6, 32, 50, 177, 34, 104, 210, 248, 136, 32, 145, 107,
-        1, 49, 145, 99, 245, 224, 25, 155, 27, 120, 218, 7, 60, 213, 126, 177,
-        35, 104, 211, 248, 136, 48, 211, 248, 168, 33, 1, 50, 195, 248, 168,
-        33, 28, 155, 43, 177, 27, 105, 27, 177, 219, 104, 218, 107, 1, 50, 218,
-        99, 186, 241, 0, 15, 0, 240, 233, 128, 35, 104, 211, 248, 136, 48, 211,
-        248, 216, 33, 1, 50, 195, 248, 216, 33, 28, 155, 43, 177, 27, 105, 27,
-        177, 219, 104, 90, 107, 1, 50, 90, 99, 0, 46, 0, 240, 216, 128, 35,
-        104, 28, 157, 211, 248, 136, 48, 211, 248, 172, 33, 1, 50, 195, 248,
-        172, 33, 0, 45, 0, 240, 154, 129, 45, 105, 0, 45, 0, 240, 150, 129,
-        235, 104, 154, 107, 1, 50, 154, 99, 143, 225, 29, 155, 0, 43, 62, 208,
-        154, 121, 0, 42, 59, 209, 27, 124, 0, 43, 56, 208, 11, 152, 3, 124,
-        219, 7, 52, 213, 62, 177, 35, 104, 211, 248, 136, 48, 211, 248, 168,
-        33, 1, 50, 195, 248, 168, 33, 186, 241, 0, 15, 0, 240, 167, 128, 35,
-        104, 211, 248, 136, 48, 211, 248, 216, 33, 1, 50, 195, 248, 216, 33,
-        28, 155, 43, 177, 27, 105, 27, 177, 219, 104, 90, 107, 1, 50, 90, 99,
-        0, 46, 0, 240, 150, 128, 35, 104, 28, 157, 211, 248, 136, 48, 211, 248,
-        172, 33, 1, 50, 195, 248, 172, 33, 0, 45, 0, 240, 88, 129, 43, 105,
-        0, 43, 0, 240, 78, 129, 219, 104, 154, 107, 1, 50, 154, 99, 72, 225,
-        13, 154, 180, 248, 90, 52, 26, 177, 157, 66, 3, 218, 180, 248, 92, 52,
-        158, 66, 74, 219, 35, 104, 211, 248, 136, 48, 211, 248, 200, 81, 173,
-        25, 195, 248, 200, 81, 186, 241, 0, 15, 109, 208, 211, 248, 176, 33,
-        212, 248, 116, 20, 1, 50, 195, 248, 176, 33, 145, 248, 29, 49, 155,
-        177, 32, 70, 1, 245, 130, 113, 41, 240, 193, 249, 212, 248, 116, 52,
-        1, 34, 131, 248, 40, 33, 212, 248, 116, 52, 160, 104, 211, 248, 48,
-        17, 211, 248, 36, 33, 0, 35, 7, 240, 216, 221, 28, 155, 131, 177, 47,
-        177, 211, 248, 64, 34, 1, 50, 195, 248, 64, 34, 21, 225, 211, 248, 76,
-        34, 1, 50, 195, 248, 76, 34, 15, 225, 219, 104, 154, 106, 1, 50, 154,
-        98, 0, 38, 2, 35, 141, 232, 72, 0, 32, 70, 29, 153, 20, 34, 25, 155,
-        2, 150, 3, 150, 4, 150, 1, 37, 19, 240, 7, 219, 47, 224, 35, 104, 0,
-        37, 211, 248, 136, 48, 46, 70, 218, 105, 1, 39, 1, 50, 218, 97, 13,
-        231, 29, 70, 237, 224, 1, 38, 21, 70, 55, 70, 147, 70, 31, 224, 0, 191,
-        138, 182, 135, 0, 84, 194, 135, 0, 1, 38, 29, 70, 55, 70, 6, 224, 0,
-        37, 1, 38, 55, 70, 249, 230, 29, 70, 30, 70, 1, 39, 155, 70, 13, 224,
-        46, 70, 1, 39, 10, 224, 5, 70, 6, 70, 131, 70, 6, 224, 85, 70, 205,
-        224, 53, 70, 203, 224, 1, 37, 86, 70, 47, 70, 180, 248, 36, 53, 67,
-        177, 212, 248, 40, 53, 43, 177, 7, 155, 5, 43, 2, 208, 32, 70, 254,
-        247, 24, 251, 187, 241, 0, 15, 78, 208, 28, 155, 0, 43, 75, 208, 15,
-        168, 249, 247, 81, 249, 157, 248, 70, 48, 131, 70, 3, 240, 3, 3, 2,
-        59, 219, 178, 1, 43, 4, 216, 32, 70, 15, 169, 250, 247, 10, 253, 0,
-        224, 255, 32, 8, 153, 3, 41, 10, 216, 87, 74, 83, 92, 4, 235, 67, 3,
-        179, 248, 58, 34, 19, 9, 3, 240, 15, 3, 18, 11, 3, 224, 180, 248, 94,
-        52, 180, 248, 96, 36, 0, 146, 0, 34, 3, 146, 189, 248, 68, 32, 1, 144,
-        194, 243, 0, 50, 4, 146, 212, 248, 96, 1, 28, 153, 66, 70, 205, 248,
-        8, 176, 38, 240, 113, 250, 35, 104, 147, 248, 229, 48, 147, 177, 28,
-        153, 129, 177, 189, 248, 72, 0, 184, 248, 2, 32, 0, 144, 189, 248, 70,
-        48, 212, 248, 228, 6, 89, 240, 177, 221, 212, 248, 96, 1, 28, 153, 10,
-        154, 38, 240, 19, 252, 32, 70, 8, 153, 1, 34, 253, 247, 111, 254, 221,
-        248, 116, 176, 187, 241, 0, 15, 23, 208, 8, 241, 20, 1, 32, 70, 30,
-        240, 14, 222, 1, 70, 88, 70, 30, 240, 186, 222, 12, 152, 0, 240, 252,
-        3, 8, 43, 1, 208, 136, 43, 7, 209, 186, 241, 0, 15, 4, 208, 29, 152,
-        8, 241, 8, 1, 82, 240, 115, 218, 28, 153, 161, 177, 11, 125, 216, 7,
-        17, 212, 29, 155, 123, 177, 154, 121, 106, 185, 26, 124, 90, 177, 26,
-        122, 74, 177, 211, 248, 252, 48, 91, 121, 43, 185, 32, 70, 66, 70, 51,
-        70, 0, 149, 48, 240, 22, 222, 127, 177, 8, 241, 20, 1, 32, 70, 30, 240,
-        222, 221, 73, 70, 2, 70, 212, 248, 120, 4, 81, 240, 48, 220, 9, 152,
-        73, 70, 1, 34, 246, 247, 59, 255, 186, 241, 0, 15, 9, 208, 79, 240,
-        0, 10, 196, 248, 124, 164, 4, 224, 79, 240, 0, 10, 1, 224, 79, 240,
-        1, 10, 80, 70, 31, 176, 189, 232, 240, 143, 9, 152, 73, 70, 1, 34, 246,
-        247, 37, 255, 243, 231, 0, 47, 127, 244, 175, 173, 179, 229, 213, 248,
-        120, 49, 1, 51, 197, 248, 120, 49, 0, 37, 1, 38, 55, 70, 51, 231, 211,
-        248, 92, 33, 1, 50, 195, 248, 92, 33, 27, 105, 0, 43, 127, 244, 231,
-        174, 233, 230, 0, 191, 84, 194, 135, 0, 247, 181, 5, 70, 8, 70, 12,
-        70, 209, 248, 252, 96, 209, 248, 244, 112, 19, 240, 226, 216, 43, 104,
-        147, 248, 173, 48, 43, 177, 213, 248, 92, 1, 121, 142, 62, 240, 255,
-        216, 40, 185, 213, 248, 92, 1, 121, 142, 62, 240, 101, 217, 32, 177,
-        213, 248, 92, 1, 121, 142, 62, 240, 203, 217, 40, 70, 24, 240, 220,
-        218, 179, 107, 9, 43, 5, 216, 79, 240, 79, 82, 154, 64, 1, 213, 2, 35,
-        0, 224, 1, 35, 148, 248, 117, 35, 90, 177, 1, 43, 9, 209, 212, 248,
-        248, 32, 81, 104, 2, 41, 4, 209, 146, 104, 18, 177, 132, 248, 118, 51,
-        13, 224, 148, 248, 155, 19, 0, 147, 40, 70, 25, 177, 0, 33, 4, 245,
-        104, 114, 1, 224, 4, 241, 216, 2, 35, 70, 252, 247, 11, 251, 0, 34,
-        1, 35, 134, 248, 137, 48, 40, 70, 33, 70, 19, 70, 0, 146, 71, 240, 199,
-        218, 32, 70, 3, 176, 189, 232, 240, 64, 71, 240, 43, 154, 45, 233, 240,
-        79, 6, 70, 137, 176, 79, 240, 0, 8, 214, 248, 104, 50, 83, 248, 8, 80,
-        0, 45, 0, 240, 51, 129, 171, 121, 0, 43, 64, 240, 47, 129, 43, 122,
-        0, 43, 0, 240, 43, 129, 213, 248, 108, 35, 43, 124, 213, 248, 252, 64,
-        213, 248, 244, 176, 7, 146, 0, 43, 0, 240, 218, 128, 5, 241, 188, 7,
-        41, 70, 58, 70, 48, 70, 38, 240, 18, 248, 129, 70, 246, 243, 243, 241,
-        212, 248, 220, 48, 195, 26, 179, 245, 72, 127, 4, 211, 1, 35, 196, 248,
-        220, 0, 6, 147, 1, 224, 0, 34, 6, 146, 227, 106, 59, 177, 148, 248,
-        60, 48, 35, 177, 6, 155, 19, 177, 35, 108, 1, 51, 35, 100, 148, 248,
-        92, 48, 179, 177, 185, 241, 0, 15, 19, 208, 51, 104, 154, 106, 217,
-        248, 44, 48, 211, 26, 10, 43, 12, 217, 99, 109, 43, 185, 187, 249, 42,
-        48, 19, 241, 50, 15, 184, 191, 99, 101, 99, 109, 19, 177, 40, 70, 12,
-        240, 18, 249, 161, 121, 0, 41, 72, 208, 187, 248, 46, 160, 212, 248,
-        0, 144, 149, 248, 117, 195, 79, 244, 122, 115, 79, 234, 138, 42, 213,
-        248, 4, 33, 186, 251, 243, 250, 180, 248, 152, 0, 3, 251, 9, 249, 188,
-        241, 0, 15, 2, 208, 169, 245, 122, 121, 1, 224, 79, 234, 89, 9, 79,
-        244, 250, 115, 3, 251, 1, 161, 129, 69, 40, 191, 129, 70, 185, 235,
-        65, 15, 27, 216, 19, 122, 75, 177, 83, 120, 59, 185, 56, 70, 244, 247,
-        114, 253, 24, 185, 40, 70, 1, 33, 29, 240, 53, 219, 148, 248, 200, 48,
-        99, 185, 148, 248, 228, 48, 75, 185, 176, 104, 212, 248, 196, 16, 79,
-        234, 74, 2, 7, 240, 184, 219, 1, 35, 132, 248, 200, 48, 163, 121, 79,
-        244, 122, 114, 83, 67, 75, 69, 2, 210, 0, 35, 132, 248, 138, 48, 163,
-        121, 5, 43, 5, 217, 148, 248, 137, 48, 19, 185, 48, 70, 12, 240, 131,
-        219, 148, 248, 6, 160, 186, 241, 0, 15, 24, 209, 148, 248, 137, 48,
-        171, 177, 5, 241, 216, 9, 73, 70, 6, 34, 132, 248, 137, 160, 56, 70,
-        240, 247, 252, 250, 73, 70, 6, 34, 88, 70, 240, 247, 247, 250, 48, 70,
-        1, 33, 58, 70, 43, 70, 205, 248, 0, 160, 252, 247, 45, 250, 162, 121,
-        35, 104, 154, 66, 15, 217, 148, 248, 137, 48, 99, 185, 48, 70, 41, 70,
-        45, 240, 86, 221, 56, 177, 213, 248, 248, 48, 91, 104, 27, 185, 48,
-        70, 41, 70, 255, 247, 197, 254, 99, 106, 27, 177, 6, 154, 10, 177, 1,
-        59, 99, 98, 163, 106, 11, 177, 1, 59, 163, 98, 214, 248, 168, 52, 83,
-        185, 214, 248, 104, 49, 11, 177, 155, 121, 43, 185, 212, 248, 204, 16,
-        17, 177, 40, 70, 47, 240, 35, 223, 43, 124, 235, 185, 162, 121, 35,
-        104, 154, 66, 25, 217, 148, 248, 137, 144, 185, 241, 0, 15, 20, 209,
-        48, 70, 41, 70, 9, 240, 103, 250, 1, 39, 48, 70, 41, 70, 15, 34, 75,
-        70, 141, 232, 128, 2, 205, 248, 8, 144, 205, 248, 12, 144, 205, 248,
-        16, 144, 19, 240, 139, 216, 132, 248, 137, 112, 7, 154, 19, 104, 115,
-        185, 163, 121, 34, 104, 147, 66, 10, 216, 50, 104, 146, 248, 49, 32,
-        34, 177, 213, 248, 248, 32, 82, 104, 3, 42, 1, 208, 1, 51, 163, 113,
-        148, 248, 80, 48, 131, 177, 224, 108, 35, 70, 0, 34, 9, 224, 179, 248,
-        104, 16, 33, 177, 1, 57, 137, 178, 163, 248, 104, 16, 33, 185, 1, 50,
-        10, 51, 130, 66, 243, 219, 6, 224, 8, 241, 4, 8, 184, 241, 32, 15, 127,
-        244, 192, 174, 3, 224, 0, 35, 132, 248, 80, 48, 244, 231, 9, 176, 189,
-        232, 240, 143, 45, 233, 243, 65, 4, 70, 13, 70, 208, 248, 0, 128, 208,
-        248, 4, 97, 19, 240, 23, 219, 163, 121, 0, 43, 64, 240, 138, 128, 35,
-        124, 35, 185, 212, 248, 148, 51, 88, 7, 64, 241, 131, 128, 133, 185,
-        51, 127, 0, 43, 116, 208, 32, 70, 41, 70, 28, 240, 96, 220, 111, 224,
-        161, 121, 49, 185, 35, 124, 35, 177, 35, 122, 19, 177, 32, 70, 82, 240,
-        76, 216, 41, 70, 32, 70, 253, 247, 192, 251, 32, 70, 26, 240, 199, 220,
-        1, 70, 32, 70, 28, 240, 169, 223, 216, 248, 0, 48, 27, 126, 0, 43, 96,
-        208, 35, 122, 0, 43, 93, 208, 32, 70, 25, 240, 76, 222, 0, 40, 88, 208,
-        182, 122, 35, 122, 0, 46, 20, 191, 130, 38, 2, 38, 75, 177, 39, 124,
-        71, 177, 4, 241, 188, 0, 244, 247, 97, 252, 7, 28, 24, 191, 1, 39, 0,
-        224, 1, 39, 216, 248, 108, 50, 156, 66, 24, 191, 1, 39, 212, 248, 148,
-        51, 89, 7, 2, 213, 0, 45, 8, 191, 1, 39, 152, 248, 176, 53, 216, 248,
-        128, 1, 0, 43, 24, 191, 1, 39, 32, 177, 33, 70, 84, 240, 17, 219, 194,
-        7, 20, 212, 159, 185, 216, 248, 104, 49, 4, 241, 188, 2, 35, 177, 155,
-        121, 19, 177, 47, 28, 24, 191, 1, 39, 7, 35, 0, 147, 255, 178, 64, 70,
-        33, 70, 0, 35, 1, 151, 16, 240, 57, 223, 24, 185, 32, 70, 49, 70, 10,
-        240, 228, 223, 41, 70, 32, 70, 26, 240, 192, 220, 32, 70, 41, 70, 2,
-        176, 189, 232, 240, 65, 18, 240, 51, 154, 0, 35, 134, 248, 108, 48,
-        115, 96, 216, 248, 0, 48, 27, 126, 0, 43, 134, 209, 142, 231, 2, 176,
-        189, 232, 240, 129, 112, 181, 64, 242, 79, 19, 19, 64, 13, 109, 11,
-        101, 139, 121, 6, 70, 12, 70, 91, 185, 209, 248, 4, 49, 8, 70, 25, 122,
-        255, 247, 85, 255, 35, 122, 27, 185, 32, 70, 1, 33, 19, 240, 112, 218,
-        51, 104, 27, 126, 195, 177, 35, 109, 93, 64, 43, 7, 14, 212, 19, 224,
-        214, 248, 128, 50, 83, 248, 37, 48, 51, 177, 27, 105, 35, 177, 48, 70,
-        41, 70, 34, 70, 20, 240, 106, 252, 1, 53, 0, 224, 0, 37, 51, 104, 211,
-        248, 188, 48, 157, 66, 235, 219, 0, 32, 112, 189, 45, 233, 247, 67,
-        14, 70, 145, 106, 21, 70, 10, 105, 4, 70, 31, 70, 144, 121, 219, 105,
-        157, 248, 40, 128, 157, 249, 44, 144, 27, 136, 232, 185, 232, 127, 64,
-        7, 26, 212, 3, 240, 12, 0, 128, 16, 1, 40, 4, 209, 27, 9, 19, 240, 10,
-        15, 11, 208, 16, 224, 2, 40, 8, 209, 88, 6, 6, 213, 210, 248, 4, 33,
-        18, 120, 1, 42, 7, 209, 26, 7, 5, 213, 32, 70, 42, 70, 1, 35, 0, 150,
-        13, 240, 228, 221, 171, 105, 155, 5, 11, 213, 107, 106, 32, 70, 57,
-        70, 1, 34, 59, 96, 250, 247, 177, 249, 32, 70, 41, 70, 58, 70, 29, 240,
-        83, 217, 4, 46, 12, 191, 186, 136, 79, 246, 255, 114, 184, 241, 0, 15,
-        7, 208, 227, 105, 6, 241, 12, 1, 3, 235, 65, 3, 153, 136, 73, 68, 153,
-        128, 79, 246, 255, 115, 154, 66, 3, 208, 32, 105, 168, 33, 52, 240,
-        249, 219, 99, 105, 41, 70, 83, 248, 38, 0, 10, 75, 66, 70, 155, 106,
-        152, 71, 0, 40, 11, 218, 184, 241, 0, 15, 8, 208, 227, 105, 12, 54,
-        3, 235, 70, 6, 179, 136, 201, 235, 3, 9, 166, 248, 4, 144, 189, 232,
-        254, 131, 0, 191, 208, 134, 135, 0, 2, 41, 248, 181, 4, 70, 14, 70,
-        21, 70, 210, 248, 4, 113, 54, 216, 58, 120, 203, 178, 154, 66, 53, 208,
-        59, 112, 3, 104, 27, 126, 75, 177, 40, 70, 81, 240, 133, 223, 213, 248,
-        4, 49, 219, 139, 19, 177, 40, 70, 81, 240, 216, 222, 123, 127, 11, 177,
-        118, 177, 19, 224, 2, 46, 11, 209, 171, 121, 75, 185, 43, 124, 27, 185,
-        213, 248, 148, 51, 91, 7, 3, 213, 40, 70, 33, 240, 228, 251, 5, 224,
-        49, 28, 40, 70, 24, 191, 1, 33, 255, 247, 143, 254, 40, 70, 26, 240,
-        129, 219, 1, 70, 40, 70, 249, 247, 204, 250, 32, 70, 57, 120, 8, 240,
-        126, 255, 0, 32, 248, 189, 79, 240, 255, 48, 248, 189, 0, 32, 248, 189,
-        112, 181, 3, 104, 0, 38, 128, 248, 35, 98, 147, 248, 63, 48, 4, 70,
-        179, 177, 212, 248, 104, 50, 157, 89, 125, 177, 169, 121, 105, 185,
-        43, 122, 91, 177, 43, 121, 75, 177, 40, 70, 255, 247, 103, 254, 40,
-        70, 1, 33, 29, 240, 216, 216, 1, 35, 132, 248, 228, 53, 4, 54, 32, 46,
-        232, 209, 32, 70, 29, 240, 237, 218, 227, 105, 128, 34, 152, 106, 0,
-        33, 241, 243, 27, 245, 1, 33, 212, 248, 120, 4, 21, 240, 134, 248, 32,
-        105, 51, 240, 113, 222, 212, 248, 120, 4, 0, 33, 21, 240, 126, 248,
-        32, 105, 0, 33, 51, 240, 40, 217, 212, 248, 52, 1, 8, 240, 108, 248,
-        0, 35, 196, 248, 124, 52, 112, 189, 45, 233, 240, 79, 217, 176, 0, 35,
-        139, 70, 103, 153, 82, 147, 83, 147, 4, 70, 145, 70, 221, 248, 136,
-        129, 100, 157, 101, 159, 16, 240, 139, 250, 208, 248, 252, 48, 6, 70,
-        9, 147, 208, 248, 4, 49, 8, 147, 187, 249, 6, 48, 0, 43, 33, 218, 25,
-        240, 1, 15, 187, 248, 4, 16, 187, 248, 8, 32, 13, 208, 102, 155, 0,
-        151, 3, 147, 1, 149, 2, 151, 73, 0, 32, 105, 1, 49, 43, 70, 14, 240,
-        163, 253, 128, 70, 1, 240, 116, 184, 99, 155, 73, 0, 141, 232, 168,
-        0, 102, 155, 3, 147, 32, 105, 67, 70, 14, 240, 150, 253, 128, 70, 1,
-        240, 103, 184, 99, 155, 3, 43, 13, 217, 4, 34, 82, 168, 65, 70, 240,
-        247, 101, 248, 99, 155, 7, 43, 5, 217, 83, 168, 8, 241, 4, 1, 4, 34,
-        240, 247, 92, 248, 221, 248, 72, 161, 26, 241, 0, 3, 24, 191, 1, 35,
-        185, 241, 211, 15, 95, 250, 131, 252, 0, 240, 157, 133, 118, 216, 185,
-        241, 147, 15, 0, 240, 103, 131, 54, 216, 185, 241, 78, 15, 0, 240, 10,
-        131, 22, 216, 185, 241, 56, 15, 0, 240, 117, 129, 8, 216, 185, 241,
-        4, 15, 0, 240, 32, 131, 185, 241, 5, 15, 64, 240, 155, 135, 45, 227,
-        185, 241, 57, 15, 0, 240, 164, 129, 185, 241, 61, 15, 64, 240, 146,
-        135, 117, 226, 185, 241, 89, 15, 0, 240, 243, 128, 8, 216, 185, 241,
-        79, 15, 0, 240, 240, 130, 185, 241, 88, 15, 64, 240, 132, 135, 208,
-        224, 185, 241, 93, 15, 0, 240, 27, 129, 185, 241, 94, 15, 0, 240, 37,
-        131, 185, 241, 92, 15, 64, 240, 119, 135, 6, 225, 185, 241, 200, 15,
-        0, 240, 225, 132, 26, 216, 185, 241, 162, 15, 0, 240, 151, 131, 8, 216,
-        185, 241, 160, 15, 0, 240, 190, 131, 185, 241, 161, 15, 64, 240, 100,
-        135, 200, 227, 185, 241, 197, 15, 0, 240, 111, 132, 185, 241, 198, 15,
-        0, 240, 196, 132, 185, 241, 163, 15, 64, 240, 87, 135, 134, 227, 185,
-        241, 203, 15, 0, 240, 224, 132, 9, 216, 185, 241, 201, 15, 0, 240, 195,
-        132, 185, 241, 202, 15, 64, 240, 73, 135, 0, 240, 206, 188, 185, 241,
-        205, 15, 0, 240, 249, 132, 192, 240, 224, 132, 185, 241, 206, 15, 64,
-        240, 61, 135, 0, 240, 10, 189, 64, 242, 18, 34, 145, 69, 0, 240, 218,
-        133, 59, 216, 185, 245, 193, 127, 0, 240, 154, 133, 24, 216, 185, 241,
-        235, 15, 0, 240, 179, 131, 8, 216, 185, 241, 212, 15, 0, 240, 61, 133,
-        185, 241, 234, 15, 64, 240, 35, 135, 158, 227, 185, 245, 136, 127, 0,
-        240, 119, 133, 64, 242, 17, 19, 153, 69, 64, 240, 25, 135, 0, 240, 118,
-        189, 185, 245, 234, 127, 0, 240, 232, 128, 10, 216, 185, 245, 232, 127,
-        0, 240, 127, 133, 64, 242, 209, 19, 153, 69, 64, 240, 9, 135, 0, 240,
-        140, 189, 185, 245, 236, 127, 0, 240, 13, 131, 185, 245, 242, 127, 0,
-        240, 169, 131, 64, 242, 213, 19, 153, 69, 64, 240, 250, 134, 6, 225,
-        64, 242, 41, 34, 145, 69, 0, 240, 52, 134, 33, 216, 64, 242, 23, 35,
-        153, 69, 0, 240, 221, 133, 11, 216, 64, 242, 19, 35, 153, 69, 0, 240,
-        151, 133, 64, 242, 22, 35, 153, 69, 64, 240, 227, 134, 0, 240, 231,
-        189, 64, 242, 35, 35, 153, 69, 0, 240, 21, 134, 185, 245, 10, 127, 0,
-        240, 73, 134, 64, 242, 34, 35, 153, 69, 64, 240, 211, 134, 0, 240, 2,
-        190, 185, 245, 12, 127, 0, 240, 248, 133, 11, 216, 64, 242, 45, 35,
-        153, 69, 0, 240, 62, 134, 64, 242, 46, 35, 153, 69, 64, 240, 194, 134,
-        0, 240, 99, 190, 64, 242, 50, 34, 145, 69, 0, 240, 180, 134, 192, 240,
-        197, 133, 64, 242, 51, 34, 145, 69, 64, 240, 180, 134, 0, 240, 165,
-        190, 35, 106, 87, 170, 24, 105, 86, 169, 3, 50, 22, 240, 88, 251, 128,
-        70, 0, 40, 64, 240, 62, 135, 157, 248, 95, 49, 157, 248, 88, 33, 0,
-        43, 20, 191, 79, 240, 0, 67, 0, 35, 19, 67, 43, 96, 0, 240, 49, 191,
-        180, 248, 72, 20, 96, 104, 1, 244, 96, 81, 161, 245, 192, 85, 105, 66,
-        65, 235, 5, 1, 33, 240, 82, 252, 5, 70, 0, 40, 0, 240, 141, 134, 42,
-        70, 212, 248, 92, 1, 180, 248, 72, 20, 17, 240, 100, 249, 127, 33, 40,
-        70, 33, 240, 28, 253, 35, 106, 79, 250, 138, 241, 24, 105, 79, 234,
-        218, 114, 43, 70, 22, 240, 115, 252, 41, 70, 128, 70, 96, 104, 33, 240,
-        67, 252, 0, 240, 6, 191, 182, 248, 90, 48, 79, 240, 0, 8, 32, 43, 8,
-        191, 79, 244, 128, 35, 43, 96, 0, 240, 251, 190, 179, 121, 219, 185,
-        48, 70, 26, 240, 130, 217, 189, 248, 72, 17, 4, 70, 166, 248, 90, 16,
-        48, 70, 26, 240, 122, 217, 132, 66, 4, 208, 8, 155, 48, 70, 25, 122,
-        255, 247, 126, 252, 214, 248, 8, 49, 211, 248, 220, 64, 100, 185, 48,
-        70, 47, 240, 7, 217, 160, 70, 12, 224, 150, 248, 4, 128, 184, 241, 0,
-        15, 5, 209, 166, 248, 90, 160, 4, 224, 79, 240, 0, 8, 1, 224, 111, 240,
-        22, 8, 82, 155, 179, 245, 128, 47, 64, 240, 203, 134, 32, 33, 166, 248,
-        90, 16, 0, 240, 198, 190, 79, 240, 255, 51, 84, 147, 12, 224, 99, 155,
-        4, 43, 64, 242, 44, 134, 4, 34, 84, 168, 65, 70, 239, 247, 191, 254,
-        152, 248, 4, 32, 221, 42, 23, 209, 56, 70, 246, 247, 118, 249, 4, 70,
-        0, 40, 0, 240, 31, 134, 33, 70, 58, 70, 84, 155, 48, 70, 53, 240, 232,
-        223, 33, 70, 128, 70, 58, 70, 40, 70, 239, 247, 168, 254, 32, 70, 246,
-        247, 102, 249, 0, 240, 157, 190, 49, 70, 32, 70, 53, 240, 59, 219, 1,
-        70, 0, 40, 0, 240, 9, 134, 66, 120, 2, 50, 151, 66, 192, 242, 7, 134,
-        40, 70, 239, 247, 147, 254, 79, 240, 0, 8, 0, 240, 137, 190, 79, 240,
-        0, 8, 13, 47, 141, 248, 95, 129, 141, 248, 88, 129, 64, 243, 250, 133,
-        43, 123, 221, 43, 50, 208, 64, 242, 213, 19, 153, 69, 46, 209, 41, 29,
-        84, 168, 4, 34, 5, 241, 12, 9, 239, 247, 120, 254, 35, 70, 79, 240,
-        8, 10, 76, 70, 69, 70, 177, 70, 64, 70, 30, 70, 22, 224, 10, 241, 6,
-        10, 87, 69, 192, 242, 104, 134, 99, 120, 154, 68, 87, 69, 192, 242,
-        102, 134, 86, 171, 0, 147, 87, 171, 34, 70, 3, 51, 48, 70, 73, 70, 53,
-        240, 216, 219, 99, 120, 1, 53, 6, 51, 228, 24, 84, 155, 157, 66, 126,
-        218, 0, 40, 227, 208, 128, 70, 0, 240, 74, 190, 16, 47, 64, 243, 196,
-        133, 56, 70, 246, 247, 8, 249, 129, 70, 0, 40, 0, 240, 192, 133, 41,
-        70, 58, 70, 239, 247, 66, 254, 162, 70, 9, 241, 4, 4, 167, 241, 4, 8,
-        32, 70, 65, 70, 84, 170, 85, 171, 99, 240, 129, 222, 5, 30, 82, 219,
-        235, 28, 187, 66, 82, 218, 157, 248, 95, 49, 43, 185, 84, 155, 0, 43,
-        2, 221, 1, 35, 141, 248, 95, 49, 157, 248, 88, 49, 43, 185, 85, 155,
-        0, 43, 2, 221, 1, 35, 141, 248, 88, 49, 72, 70, 155, 73, 241, 243, 0,
-        243, 40, 185, 48, 70, 33, 70, 66, 70, 53, 240, 44, 223, 9, 224, 72,
-        70, 150, 73, 241, 243, 245, 242, 64, 185, 48, 70, 33, 70, 66, 70, 53,
-        240, 45, 223, 128, 70, 96, 177, 84, 70, 2, 224, 84, 70, 111, 240, 1,
-        8, 51, 124, 59, 187, 24, 241, 30, 15, 8, 191, 79, 240, 0, 8, 33, 224,
-        111, 240, 3, 3, 91, 27, 255, 24, 27, 208, 41, 29, 72, 70, 73, 68, 58,
-        70, 241, 243, 37, 242, 16, 47, 19, 221, 72, 70, 130, 73, 241, 243, 207,
-        242, 0, 40, 167, 208, 72, 70, 128, 73, 241, 243, 201, 242, 0, 40, 161,
-        208, 6, 224, 84, 70, 168, 70, 4, 224, 84, 70, 111, 240, 13, 8, 0, 224,
-        84, 70, 72, 70, 246, 247, 152, 248, 2, 224, 52, 70, 128, 70, 78, 70,
-        184, 241, 0, 15, 64, 240, 201, 133, 51, 121, 0, 43, 0, 240, 197, 133,
-        157, 248, 95, 49, 27, 177, 32, 70, 49, 70, 18, 240, 198, 220, 157, 248,
-        88, 49, 0, 43, 0, 240, 185, 133, 32, 70, 49, 70, 1, 34, 18, 240, 4,
-        221, 0, 240, 178, 189, 164, 34, 10, 168, 41, 70, 239, 247, 179, 253,
-        10, 155, 3, 43, 0, 242, 44, 133, 157, 248, 196, 16, 17, 240, 1, 1, 64,
-        240, 41, 133, 11, 159, 63, 185, 32, 70, 49, 70, 10, 170, 69, 240, 70,
-        219, 184, 70, 0, 240, 153, 189, 80, 168, 8, 34, 86, 145, 241, 243, 242,
-        241, 43, 155, 51, 177, 45, 155, 189, 248, 184, 16, 80, 147, 173, 248,
-        68, 17, 80, 171, 150, 248, 80, 35, 98, 179, 182, 248, 90, 32, 42, 185,
-        178, 110, 1, 50, 2, 209, 50, 109, 208, 7, 35, 212, 214, 248, 84, 115,
-        58, 120, 250, 177, 151, 248, 1, 128, 184, 241, 0, 15, 24, 209, 49, 168,
-        243, 247, 183, 255, 4, 28, 24, 191, 1, 36, 80, 154, 7, 235, 196, 3,
-        90, 96, 189, 248, 68, 33, 10, 169, 26, 129, 164, 34, 2, 251, 4, 112,
-        20, 48, 239, 247, 104, 253, 63, 25, 1, 35, 187, 112, 0, 240, 93, 189,
-        0, 34, 58, 112, 39, 154, 4, 147, 0, 146, 38, 154, 86, 171, 1, 146, 12,
-        170, 2, 146, 49, 170, 3, 146, 5, 147, 32, 70, 49, 70, 11, 154, 10, 155,
-        20, 240, 116, 249, 128, 70, 0, 40, 64, 240, 70, 133, 86, 153, 0, 41,
-        0, 240, 66, 133, 138, 121, 10, 155, 154, 66, 0, 240, 61, 133, 40, 70,
-        6, 49, 4, 34, 239, 247, 62, 253, 0, 240, 54, 189, 180, 248, 74, 52,
-        79, 240, 0, 8, 43, 96, 0, 240, 47, 189, 31, 250, 138, 250, 170, 245,
-        128, 114, 146, 178, 64, 246, 42, 3, 154, 66, 0, 242, 174, 132, 164,
-        248, 74, 164, 0, 37, 41, 70, 32, 70, 82, 70, 1, 53, 11, 240, 50, 220,
-        6, 45, 247, 209, 79, 240, 0, 8, 0, 240, 22, 189, 182, 249, 84, 48, 3,
-        43, 6, 208, 182, 249, 86, 32, 42, 185, 0, 51, 24, 191, 1, 35, 2, 224,
-        3, 35, 0, 224, 2, 35, 43, 96, 79, 240, 0, 8, 0, 240, 3, 189, 186, 241,
-        1, 15, 8, 216, 0, 34, 166, 248, 84, 160, 166, 248, 86, 32, 79, 240,
-        0, 8, 0, 240, 247, 188, 0, 35, 1, 33, 166, 248, 84, 48, 166, 248, 86,
-        16, 79, 240, 0, 8, 0, 240, 237, 188, 212, 248, 92, 1, 60, 240, 221,
-        219, 0, 240, 1, 0, 40, 96, 79, 240, 0, 8, 0, 240, 226, 188, 41, 49,
-        136, 0, 31, 96, 136, 0, 35, 104, 32, 70, 211, 248, 136, 80, 28, 240,
-        2, 223, 213, 248, 156, 32, 213, 248, 192, 49, 240, 104, 211, 24, 197,
-        248, 156, 48, 213, 248, 160, 32, 213, 248, 212, 49, 0, 36, 211, 24,
-        197, 248, 160, 48, 213, 248, 164, 32, 213, 248, 196, 49, 197, 248, 180,
-        66, 211, 24, 197, 248, 164, 48, 197, 248, 220, 65, 197, 248, 216, 65,
-        197, 248, 212, 65, 197, 248, 88, 65, 197, 248, 208, 65, 197, 248, 204,
-        65, 172, 100, 44, 100, 197, 248, 200, 65, 197, 248, 196, 65, 197, 248,
-        192, 65, 197, 248, 216, 64, 197, 248, 76, 67, 197, 248, 188, 65, 197,
-        248, 184, 65, 197, 248, 180, 65, 236, 97, 44, 97, 197, 248, 176, 65,
-        197, 248, 172, 65, 197, 248, 168, 65, 108, 96, 0, 40, 0, 240, 33, 132,
-        20, 48, 33, 70, 72, 34, 241, 243, 238, 240, 160, 70, 0, 240, 141, 188,
-        35, 104, 211, 248, 136, 112, 99, 126, 19, 177, 32, 70, 28, 240, 175,
-        222, 79, 244, 84, 114, 56, 70, 0, 33, 241, 243, 221, 240, 240, 104,
-        10, 34, 79, 244, 84, 115, 58, 128, 123, 128, 32, 177, 20, 48, 0, 33,
-        72, 34, 241, 243, 209, 240, 79, 240, 0, 8, 197, 248, 0, 128, 0, 240,
-        109, 188, 148, 249, 32, 50, 79, 240, 0, 8, 43, 96, 0, 240, 102, 188,
-        10, 241, 1, 3, 1, 43, 3, 217, 186, 241, 1, 15, 64, 240, 236, 131, 35,
-        106, 24, 105, 22, 240, 50, 253, 65, 7, 64, 241, 232, 131, 82, 155, 90,
-        28, 148, 248, 32, 34, 82, 178, 2, 208, 1, 50, 7, 209, 1, 224, 1, 50,
-        4, 208, 34, 104, 18, 126, 0, 42, 64, 240, 219, 131, 132, 248, 32, 50,
-        79, 240, 0, 8, 0, 240, 65, 188, 180, 248, 197, 50, 79, 240, 0, 8, 195,
-        243, 64, 18, 3, 240, 64, 3, 0, 43, 20, 191, 2, 35, 0, 35, 19, 67, 43,
-        96, 0, 240, 49, 188, 186, 241, 3, 15, 0, 243, 196, 131, 35, 106, 24,
-        105, 22, 240, 1, 253, 67, 7, 64, 241, 192, 131, 32, 70, 82, 153, 12,
-        240, 122, 216, 35, 106, 79, 240, 0, 8, 24, 105, 22, 240, 244, 252, 0,
-        240, 26, 188, 148, 249, 196, 50, 79, 240, 0, 8, 88, 28, 24, 191, 2,
-        51, 43, 96, 0, 240, 16, 188, 35, 106, 24, 105, 22, 240, 228, 252, 1,
-        7, 10, 212, 35, 106, 24, 105, 22, 240, 222, 252, 0, 240, 1, 0, 0, 40,
-        12, 191, 3, 32, 4, 32, 0, 224, 12, 32, 82, 155, 90, 28, 7, 208, 1, 43,
-        64, 243, 149, 131, 131, 66, 0, 243, 149, 131, 2, 59, 82, 147, 82, 155,
-        79, 240, 0, 8, 132, 248, 196, 50, 236, 227, 79, 240, 0, 8, 197, 248,
-        0, 128, 148, 248, 188, 114, 205, 248, 64, 129, 1, 47, 24, 208, 3, 211,
-        2, 47, 64, 240, 223, 131, 57, 224, 80, 174, 0, 150, 212, 248, 92, 1,
-        41, 70, 1, 35, 79, 244, 128, 82, 60, 240, 138, 222, 0, 150, 212, 248,
-        92, 1, 41, 70, 79, 244, 128, 82, 67, 70, 60, 240, 129, 222, 201, 227,
-        80, 174, 0, 150, 212, 248, 92, 1, 41, 70, 59, 70, 79, 244, 128, 82,
-        60, 240, 118, 222, 0, 150, 212, 248, 92, 1, 41, 70, 59, 70, 79, 244,
-        192, 82, 60, 240, 109, 222, 0, 150, 212, 248, 92, 1, 41, 70, 67, 70,
-        79, 244, 128, 82, 60, 240, 100, 222, 0, 150, 212, 248, 92, 1, 41, 70,
-        79, 244, 192, 82, 67, 70, 60, 240, 91, 222, 163, 227, 80, 174, 0, 150,
-        212, 248, 92, 1, 41, 70, 1, 35, 79, 244, 128, 82, 60, 240, 80, 222,
-        0, 150, 212, 248, 92, 1, 41, 70, 67, 70, 79, 244, 128, 82, 60, 240,
-        71, 222, 0, 150, 212, 248, 92, 1, 41, 70, 79, 244, 192, 82, 67, 70,
-        60, 240, 62, 222, 134, 227, 32, 34, 69, 168, 65, 70, 239, 247, 136,
-        251, 72, 155, 69, 157, 180, 51, 179, 245, 128, 79, 0, 242, 30, 131,
-        237, 178, 1, 45, 1, 208, 6, 45, 45, 209, 35, 104, 147, 248, 63, 48,
-        0, 43, 64, 240, 22, 131, 35, 106, 91, 108, 0, 43, 0, 240, 20, 131, 74,
-        168, 3, 48, 243, 247, 171, 253, 16, 177, 34, 104, 4, 50, 1, 224, 74,
-        170, 3, 50, 72, 155, 73, 169, 0, 147, 32, 70, 1, 49, 0, 35, 251, 247,
-        11, 254, 6, 70, 0, 40, 0, 240, 1, 131, 212, 248, 92, 1, 180, 248, 72,
-        20, 61, 240, 35, 216, 48, 177, 0, 33, 32, 70, 10, 70, 24, 240, 215,
-        220, 0, 224, 0, 38, 32, 105, 69, 169, 50, 70, 14, 240, 74, 254, 128,
-        70, 16, 185, 2, 45, 64, 240, 61, 131, 212, 248, 92, 1, 180, 248, 72,
-        20, 61, 240, 11, 216, 0, 40, 0, 240, 52, 131, 32, 70, 1, 33, 0, 34,
-        24, 240, 189, 220, 45, 227, 212, 248, 16, 54, 79, 240, 0, 8, 43, 96,
-        39, 227, 35, 104, 79, 240, 0, 8, 211, 248, 128, 48, 43, 96, 32, 227,
-        35, 104, 187, 248, 8, 32, 195, 248, 128, 160, 102, 155, 0, 151, 3, 147,
-        1, 149, 2, 151, 32, 105, 87, 33, 43, 70, 14, 240, 62, 248, 128, 70,
-        15, 227, 35, 104, 79, 240, 0, 8, 211, 248, 132, 48, 43, 96, 8, 227,
-        35, 104, 187, 248, 8, 32, 195, 248, 132, 160, 102, 155, 0, 151, 3, 147,
-        1, 149, 2, 151, 32, 105, 89, 33, 43, 70, 14, 240, 38, 248, 128, 70,
-        247, 226, 79, 240, 0, 8, 133, 248, 0, 128, 133, 248, 1, 128, 180, 248,
-        174, 1, 253, 247, 10, 253, 176, 235, 8, 0, 24, 191, 1, 32, 0, 241, 10,
-        3, 84, 248, 35, 48, 147, 249, 4, 49, 155, 16, 43, 84, 224, 226, 180,
-        248, 174, 1, 253, 247, 249, 252, 0, 48, 24, 191, 1, 32, 10, 48, 84,
-        248, 32, 48, 35, 98, 152, 248, 0, 32, 79, 240, 0, 8, 131, 248, 4, 33,
-        36, 106, 148, 249, 4, 1, 9, 240, 163, 223, 132, 248, 4, 1, 199, 226,
-        35, 104, 65, 70, 211, 248, 220, 0, 243, 247, 18, 253, 6, 70, 0, 40,
-        0, 240, 109, 130, 240, 243, 206, 247, 67, 28, 159, 66, 4, 70, 192, 240,
-        105, 130, 40, 70, 49, 70, 34, 70, 79, 240, 0, 8, 240, 243, 238, 247,
-        5, 248, 4, 128, 172, 226, 77, 168, 41, 70, 12, 34, 239, 247, 174, 250,
-        189, 248, 52, 49, 0, 43, 64, 240, 88, 130, 78, 155, 216, 7, 0, 241,
-        87, 130, 79, 152, 193, 7, 0, 241, 86, 130, 0, 43, 64, 240, 86, 130,
-        245, 247, 90, 253, 6, 70, 0, 40, 0, 240, 83, 130, 5, 241, 12, 1, 79,
-        154, 239, 247, 147, 250, 32, 105, 77, 169, 50, 70, 167, 241, 12, 3,
-        14, 240, 214, 252, 128, 70, 48, 70, 245, 247, 73, 253, 128, 226, 99,
-        155, 11, 43, 64, 242, 65, 130, 11, 47, 64, 243, 65, 130, 77, 168, 65,
-        70, 12, 34, 239, 247, 123, 250, 189, 248, 52, 49, 0, 43, 64, 240, 58,
-        130, 78, 155, 0, 43, 64, 240, 57, 130, 79, 155, 19, 240, 1, 8, 64, 240,
-        55, 130, 179, 245, 64, 127, 0, 242, 54, 130, 79, 244, 64, 112, 245,
-        247, 35, 253, 6, 70, 0, 40, 0, 240, 49, 130, 65, 70, 79, 244, 64, 114,
-        240, 243, 180, 246, 32, 105, 77, 169, 50, 70, 167, 241, 12, 3, 14, 240,
-        237, 252, 128, 70, 80, 185, 77, 169, 12, 34, 40, 70, 239, 247, 78, 250,
-        5, 241, 12, 0, 49, 70, 79, 154, 239, 247, 72, 250, 48, 70, 245, 247,
-        6, 253, 61, 226, 8, 153, 79, 240, 0, 8, 203, 137, 43, 96, 55, 226, 8,
-        155, 48, 70, 163, 248, 14, 160, 1, 33, 25, 240, 15, 221, 79, 240, 0,
-        8, 45, 226, 32, 70, 41, 70, 58, 70, 103, 155, 248, 247, 124, 254, 128,
-        70, 37, 226, 35, 104, 211, 248, 216, 0, 245, 247, 49, 255, 32, 185,
-        79, 240, 0, 8, 197, 248, 0, 128, 26, 226, 35, 104, 79, 240, 0, 8, 211,
-        248, 216, 0, 245, 247, 27, 255, 40, 96, 17, 226, 35, 104, 211, 248,
-        216, 0, 205, 248, 28, 192, 245, 247, 27, 255, 221, 248, 28, 192, 0,
-        40, 0, 240, 223, 129, 99, 126, 0, 43, 0, 240, 221, 129, 35, 104, 1,
-        33, 211, 248, 216, 0, 98, 70, 245, 247, 179, 254, 35, 104, 79, 240,
-        0, 8, 211, 248, 216, 0, 251, 243, 106, 247, 242, 225, 212, 248, 16,
-        54, 79, 240, 0, 8, 163, 245, 128, 66, 83, 66, 67, 235, 2, 3, 43, 96,
-        231, 225, 186, 241, 0, 15, 22, 209, 212, 248, 16, 54, 179, 245, 128,
-        79, 64, 240, 189, 129, 180, 248, 72, 23, 32, 70, 164, 248, 88, 20, 180,
-        248, 74, 39, 32, 33, 29, 240, 59, 222, 64, 242, 204, 99, 196, 248, 16,
-        54, 79, 240, 0, 8, 205, 225, 186, 241, 1, 15, 64, 240, 171, 129, 212,
-        248, 16, 38, 64, 242, 204, 99, 154, 66, 64, 240, 167, 129, 180, 248,
-        88, 36, 32, 33, 164, 248, 72, 39, 32, 70, 25, 240, 151, 223, 68, 246,
-        32, 99, 164, 248, 74, 7, 164, 248, 88, 52, 32, 70, 32, 33, 68, 246,
-        32, 98, 29, 240, 21, 222, 79, 244, 128, 67, 196, 248, 16, 54, 79, 240,
-        0, 8, 167, 225, 31, 250, 138, 242, 35, 104, 164, 248, 92, 39, 147, 248,
-        32, 128, 184, 241, 0, 15, 0, 240, 157, 129, 148, 248, 94, 135, 184,
-        241, 0, 15, 64, 240, 126, 129, 32, 70, 180, 248, 64, 24, 29, 240, 248,
-        221, 144, 225, 180, 248, 92, 55, 79, 240, 0, 8, 43, 96, 138, 225, 186,
-        245, 0, 79, 4, 219, 79, 246, 255, 115, 154, 69, 64, 240, 109, 129, 35,
-        104, 164, 248, 68, 168, 211, 248, 216, 0, 251, 243, 182, 245, 0, 40,
-        0, 240, 102, 129, 180, 248, 66, 24, 0, 41, 0, 240, 99, 129, 32, 70,
-        180, 248, 68, 40, 29, 240, 213, 221, 79, 240, 0, 8, 107, 225, 180, 248,
-        68, 56, 79, 240, 0, 8, 43, 96, 101, 225, 35, 105, 65, 70, 216, 111,
-        42, 70, 246, 247, 94, 252, 128, 70, 93, 225, 35, 105, 65, 70, 216, 111,
-        246, 247, 183, 251, 128, 70, 86, 225, 186, 241, 2, 15, 0, 242, 68, 129,
-        186, 241, 0, 15, 23, 208, 150, 248, 155, 51, 0, 43, 64, 240, 63, 129,
-        32, 70, 161, 73, 1, 34, 23, 240, 102, 223, 128, 70, 0, 40, 64, 240,
-        66, 129, 82, 155, 49, 70, 134, 248, 155, 51, 212, 248, 188, 6, 39, 240,
-        119, 251, 128, 70, 55, 225, 134, 248, 155, 163, 32, 70, 151, 73, 82,
-        70, 23, 240, 81, 223, 214, 248, 156, 3, 0, 40, 0, 240, 35, 129, 245,
-        247, 241, 251, 208, 70, 198, 248, 156, 163, 37, 225, 150, 248, 155,
-        51, 79, 240, 0, 8, 43, 96, 31, 225, 214, 248, 156, 3, 32, 177, 245,
-        247, 226, 251, 0, 35, 198, 248, 156, 51, 82, 168, 41, 70, 4, 34, 239,
-        247, 25, 249, 82, 155, 0, 43, 0, 240, 11, 129, 100, 43, 1, 221, 100,
-        35, 82, 147, 82, 155, 6, 36, 92, 67, 4, 52, 32, 70, 245, 247, 200, 251,
-        198, 248, 156, 3, 0, 40, 0, 240, 253, 128, 34, 70, 41, 70, 239, 247,
-        1, 249, 214, 248, 156, 51, 82, 154, 79, 240, 0, 8, 26, 96, 243, 224,
-        103, 153, 51, 170, 32, 70, 253, 247, 123, 249, 51, 155, 1, 33, 171,
-        96, 52, 155, 41, 128, 43, 97, 53, 155, 0, 33, 171, 97, 54, 155, 176,
-        34, 43, 98, 55, 155, 106, 128, 171, 98, 56, 155, 233, 96, 43, 99, 57,
-        155, 105, 97, 171, 99, 58, 155, 233, 97, 43, 100, 59, 155, 105, 98,
-        171, 100, 60, 155, 233, 98, 43, 101, 61, 155, 105, 99, 233, 99, 105,
-        100, 233, 100, 105, 101, 171, 101, 62, 155, 0, 34, 43, 102, 63, 155,
-        233, 101, 171, 102, 64, 155, 105, 102, 43, 103, 65, 155, 233, 102, 171,
-        103, 66, 155, 105, 103, 197, 248, 128, 48, 67, 155, 233, 103, 197, 248,
-        136, 48, 68, 155, 197, 248, 132, 16, 197, 248, 144, 48, 0, 35, 197,
-        248, 140, 16, 197, 248, 148, 16, 197, 233, 38, 35, 197, 233, 40, 35,
-        197, 233, 42, 35, 136, 70, 163, 224, 9, 153, 79, 240, 0, 8, 129, 248,
-        228, 48, 157, 224, 9, 154, 79, 240, 0, 8, 146, 248, 228, 48, 43, 96,
-        150, 224, 111, 240, 22, 8, 147, 224, 128, 70, 145, 224, 111, 240, 13,
-        8, 142, 224, 111, 240, 26, 8, 139, 224, 111, 240, 29, 8, 136, 224, 111,
-        240, 13, 8, 133, 224, 111, 240, 13, 8, 130, 224, 111, 240, 13, 8, 127,
-        224, 111, 240, 26, 8, 124, 224, 111, 240, 7, 8, 121, 224, 111, 240,
-        1, 8, 118, 224, 111, 240, 28, 8, 115, 224, 128, 70, 113, 224, 111, 240,
-        28, 8, 110, 224, 111, 240, 22, 8, 107, 224, 111, 240, 4, 8, 104, 224,
-        111, 240, 28, 8, 101, 224, 111, 240, 22, 8, 98, 224, 111, 240, 28, 8,
-        95, 224, 111, 240, 28, 8, 92, 224, 111, 240, 23, 8, 89, 224, 111, 240,
-        27, 8, 86, 224, 79, 240, 255, 56, 83, 224, 79, 240, 255, 56, 80, 224,
-        111, 240, 29, 8, 77, 224, 111, 240, 13, 8, 74, 224, 111, 240, 1, 8,
-        71, 224, 111, 240, 1, 8, 68, 224, 111, 240, 1, 8, 65, 224, 111, 240,
-        1, 8, 62, 224, 111, 240, 26, 8, 59, 224, 111, 240, 13, 8, 56, 224, 111,
-        240, 13, 8, 53, 224, 111, 240, 1, 8, 50, 224, 111, 240, 1, 8, 47, 224,
-        111, 240, 1, 8, 44, 224, 111, 240, 1, 8, 41, 224, 111, 240, 26, 8, 38,
-        224, 128, 70, 36, 224, 111, 240, 10, 8, 33, 224, 79, 240, 0, 8, 30,
-        224, 79, 240, 0, 8, 27, 224, 79, 240, 0, 8, 24, 224, 79, 240, 0, 8,
-        21, 224, 111, 240, 1, 8, 18, 224, 128, 70, 16, 224, 136, 70, 14, 224,
-        111, 240, 1, 8, 11, 224, 79, 240, 0, 8, 8, 224, 128, 70, 6, 224, 0,
-        191, 233, 79, 136, 0, 152, 70, 1, 224, 111, 240, 26, 8, 64, 70, 89,
-        176, 189, 232, 240, 143, 111, 240, 13, 8, 248, 231, 111, 240, 13, 8,
-        245, 231, 45, 233, 247, 67, 10, 159, 6, 70, 12, 70, 145, 70, 29, 70,
-        27, 185, 3, 106, 157, 105, 23, 185, 47, 105, 0, 47, 96, 208, 163, 104,
-        105, 104, 61, 74, 180, 248, 14, 128, 27, 136, 10, 64, 8, 240, 7, 8,
-        3, 240, 252, 3, 50, 177, 50, 104, 82, 107, 26, 177, 56, 74, 18, 248,
-        8, 32, 0, 224, 3, 34, 165, 98, 151, 248, 68, 16, 208, 43, 132, 248,
-        33, 16, 11, 208, 160, 43, 9, 208, 192, 43, 7, 208, 80, 43, 1, 209, 59,
-        124, 27, 177, 163, 105, 67, 240, 2, 3, 163, 97, 1, 146, 157, 248, 44,
-        32, 13, 155, 0, 50, 0, 147, 24, 191, 1, 34, 12, 155, 48, 70, 33, 70,
-        12, 240, 118, 218, 186, 121, 38, 75, 26, 185, 215, 248, 148, 35, 81,
-        7, 18, 213, 149, 248, 231, 32, 122, 177, 162, 105, 146, 7, 12, 212,
-        19, 248, 8, 32, 13, 42, 1, 220, 1, 50, 0, 224, 15, 34, 48, 70, 33, 70,
-        10, 240, 97, 248, 152, 177, 36, 224, 19, 248, 8, 48, 9, 241, 4, 1, 13,
-        43, 1, 220, 1, 51, 0, 224, 15, 35, 48, 70, 34, 70, 248, 247, 118, 252,
-        32, 177, 48, 70, 73, 70, 253, 247, 1, 250, 17, 224, 1, 34, 112, 104,
-        33, 70, 245, 247, 124, 250, 51, 104, 211, 248, 136, 48, 26, 106, 1,
-        50, 26, 98, 43, 105, 59, 177, 219, 104, 26, 106, 1, 50, 26, 98, 2, 224,
-        1, 32, 189, 232, 254, 131, 213, 248, 92, 49, 0, 32, 1, 51, 197, 248,
-        92, 49, 246, 231, 0, 191, 64, 0, 1, 0, 138, 182, 135, 0, 72, 194, 135,
-        0, 127, 181, 20, 70, 146, 104, 5, 70, 19, 121, 14, 70, 219, 7, 11, 212,
-        4, 50, 36, 240, 219, 251, 3, 70, 56, 177, 144, 248, 36, 32, 18, 240,
-        2, 2, 8, 191, 19, 70, 0, 224, 0, 35, 162, 127, 0, 150, 34, 240, 15,
-        2, 66, 240, 3, 2, 162, 119, 0, 34, 1, 146, 2, 146, 3, 146, 40, 70, 33,
-        70, 213, 248, 164, 37, 255, 247, 72, 255, 0, 40, 12, 191, 79, 240, 255,
-        48, 0, 32, 4, 176, 112, 189, 56, 181, 5, 70, 8, 70, 12, 70, 86, 240,
-        105, 220, 227, 121, 1, 70, 2, 43, 6, 209, 98, 105, 34, 177, 40, 70,
-        255, 247, 196, 255, 0, 35, 99, 97, 56, 189, 0, 0, 45, 233, 240, 79,
-        0, 43, 179, 176, 7, 147, 12, 191, 4, 35, 10, 35, 9, 147, 7, 155, 22,
-        105, 13, 241, 40, 9, 24, 191, 32, 35, 20, 175, 4, 70, 136, 70, 147,
-        70, 0, 33, 40, 34, 72, 70, 6, 147, 214, 248, 248, 80, 13, 241, 176,
-        10, 240, 243, 101, 243, 56, 70, 0, 33, 40, 34, 240, 243, 96, 243, 0,
-        33, 12, 34, 80, 70, 240, 243, 91, 243, 43, 107, 32, 70, 141, 232, 8,
-        4, 49, 70, 6, 154, 235, 106, 45, 151, 205, 248, 176, 144, 9, 240, 33,
-        220, 7, 70, 0, 40, 64, 240, 237, 128, 184, 248, 6, 48, 218, 7, 10, 213,
-        33, 106, 75, 125, 59, 177, 10, 109, 11, 168, 84, 49, 10, 146, 238, 247,
-        230, 254, 20, 151, 8, 224, 20, 171, 0, 147, 32, 70, 49, 70, 8, 241,
-        56, 2, 10, 171, 25, 240, 163, 219, 235, 106, 131, 177, 38, 168, 0, 33,
-        24, 34, 240, 243, 44, 243, 235, 106, 43, 148, 38, 147, 43, 107, 39,
-        147, 103, 75, 41, 147, 103, 75, 40, 147, 103, 75, 42, 147, 38, 171,
-        30, 175, 0, 33, 32, 34, 56, 70, 8, 147, 240, 243, 25, 243, 10, 171,
-        0, 33, 8, 34, 32, 147, 47, 168, 20, 171, 33, 147, 205, 248, 120, 176,
-        205, 248, 124, 128, 240, 243, 12, 243, 35, 104, 49, 70, 147, 248, 79,
-        32, 50, 171, 18, 240, 3, 2, 24, 191, 219, 248, 4, 32, 212, 248, 124,
-        6, 24, 191, 194, 243, 0, 66, 3, 248, 12, 45, 0, 147, 6, 154, 8, 155,
-        48, 151, 64, 240, 69, 223, 9, 155, 6, 153, 0, 235, 3, 10, 49, 171, 2,
-        147, 32, 70, 66, 70, 6, 241, 194, 3, 141, 232, 0, 5, 22, 240, 21, 221,
-        7, 70, 48, 185, 32, 70, 57, 70, 182, 248, 26, 33, 44, 240, 105, 218,
-        128, 224, 32, 70, 49, 70, 66, 70, 221, 248, 196, 144, 16, 240, 95, 223,
-        169, 248, 0, 0, 107, 140, 169, 248, 2, 48, 49, 155, 4, 51, 49, 147,
-        7, 155, 19, 185, 170, 241, 4, 10, 19, 224, 5, 241, 36, 9, 72, 70, 243,
-        247, 171, 248, 16, 185, 49, 152, 73, 70, 2, 224, 49, 152, 6, 241, 216,
-        1, 6, 34, 238, 247, 99, 254, 49, 155, 170, 241, 10, 10, 6, 51, 49, 147,
-        47, 171, 0, 147, 49, 155, 212, 248, 124, 6, 1, 147, 49, 70, 6, 154,
-        8, 155, 205, 248, 8, 160, 64, 240, 103, 222, 129, 70, 40, 177, 96, 104,
-        57, 70, 1, 34, 245, 247, 62, 249, 66, 224, 49, 155, 0, 144, 1, 144,
-        2, 144, 3, 147, 32, 70, 49, 70, 87, 34, 75, 70, 205, 248, 16, 160, 17,
-        240, 34, 220, 104, 107, 24, 177, 245, 247, 249, 248, 197, 248, 52, 144,
-        7, 155, 35, 177, 49, 155, 10, 241, 6, 10, 6, 59, 49, 147, 49, 155, 10,
-        241, 4, 10, 4, 59, 49, 147, 7, 155, 80, 70, 133, 248, 60, 48, 245, 247,
-        226, 248, 104, 99, 8, 185, 168, 99, 5, 224, 49, 153, 82, 70, 238, 247,
-        28, 254, 197, 248, 56, 160, 184, 248, 98, 48, 0, 150, 195, 243, 64,
-        19, 1, 147, 0, 35, 2, 147, 3, 147, 57, 70, 32, 70, 212, 248, 164, 37,
-        91, 70, 255, 247, 14, 254, 0, 40, 8, 191, 0, 39, 0, 224, 0, 39, 56,
-        70, 51, 176, 189, 232, 240, 143, 0, 191, 9, 205, 129, 0, 25, 205, 129,
-        0, 57, 205, 129, 0, 45, 233, 240, 79, 149, 176, 5, 70, 140, 70, 7, 146,
-        221, 248, 128, 160, 33, 156, 6, 104, 155, 70, 0, 43, 0, 240, 166, 128,
-        186, 241, 0, 15, 28, 209, 30, 154, 1, 42, 27, 209, 31, 154, 147, 30,
-        1, 43, 23, 216, 3, 42, 21, 209, 0, 44, 64, 240, 156, 128, 131, 110,
-        89, 28, 5, 208, 0, 235, 131, 3, 220, 110, 0, 44, 64, 240, 147, 128,
-        48, 70, 0, 33, 181, 248, 26, 33, 44, 240, 14, 221, 0, 39, 134, 224,
-        0, 36, 0, 224, 84, 70, 79, 240, 176, 8, 6, 39, 9, 171, 24, 70, 0, 33,
-        32, 34, 205, 248, 20, 192, 6, 147, 240, 243, 21, 242, 30, 154, 13, 241,
-        68, 9, 9, 146, 31, 154, 72, 70, 10, 146, 34, 154, 0, 33, 12, 146, 8,
-        34, 205, 248, 44, 176, 240, 243, 6, 242, 6, 155, 205, 248, 0, 144, 18,
-        147, 41, 70, 176, 34, 0, 35, 214, 248, 124, 6, 64, 240, 75, 222, 7,
-        155, 0, 235, 7, 9, 221, 248, 20, 192, 141, 232, 8, 2, 19, 171, 2, 147,
-        48, 70, 65, 70, 98, 70, 5, 241, 194, 3, 22, 240, 25, 220, 7, 70, 0,
-        40, 74, 208, 124, 177, 0, 35, 0, 147, 1, 147, 34, 70, 19, 155, 48, 70,
-        41, 70, 68, 240, 28, 218, 148, 249, 14, 48, 19, 154, 195, 235, 9, 9,
-        210, 24, 19, 146, 221, 248, 76, 128, 30, 154, 41, 70, 168, 248, 0, 32,
-        31, 155, 17, 170, 168, 248, 2, 48, 8, 241, 6, 3, 168, 248, 4, 160, 141,
-        232, 12, 0, 19, 147, 169, 241, 6, 3, 2, 147, 214, 248, 124, 6, 176,
-        34, 0, 35, 64, 240, 123, 221, 186, 241, 0, 15, 4, 209, 189, 248, 52,
-        48, 11, 177, 168, 248, 4, 48, 171, 121, 19, 177, 235, 104, 218, 104,
-        1, 224, 214, 248, 164, 37, 157, 248, 140, 48, 57, 70, 1, 147, 0, 35,
-        3, 147, 48, 70, 91, 70, 0, 149, 2, 148, 255, 247, 78, 253, 0, 40, 8,
-        191, 0, 39, 0, 224, 31, 70, 56, 70, 21, 176, 189, 232, 240, 143, 148,
-        249, 14, 112, 68, 242, 176, 8, 6, 55, 116, 231, 0, 0, 45, 233, 240,
-        79, 3, 104, 135, 176, 147, 248, 63, 48, 4, 70, 198, 104, 19, 177, 176,
-        248, 70, 84, 2, 224, 11, 240, 48, 218, 5, 70, 35, 106, 212, 248, 56,
-        35, 0, 33, 32, 70, 3, 241, 28, 10, 179, 248, 8, 144, 211, 248, 0, 128,
-        2, 241, 56, 11, 22, 240, 242, 220, 5, 244, 96, 83, 179, 245, 32, 95,
-        8, 208, 179, 245, 192, 95, 7, 208, 179, 245, 128, 95, 20, 191, 10, 35,
-        20, 35, 2, 224, 160, 35, 0, 224, 40, 35, 0, 39, 255, 34, 3, 147, 212,
-        248, 116, 52, 1, 146, 2, 144, 0, 151, 27, 121, 88, 70, 4, 147, 81, 70,
-        74, 70, 67, 70, 33, 240, 31, 249, 59, 70, 41, 70, 58, 70, 32, 105, 14,
-        240, 243, 251, 32, 70, 12, 240, 64, 220, 86, 33, 32, 105, 50, 240, 238,
-        217, 212, 248, 180, 49, 64, 0, 187, 66, 196, 248, 252, 2, 6, 218, 32,
-        105, 178, 33, 50, 240, 227, 217, 64, 0, 196, 248, 0, 3, 32, 70, 251,
-        247, 240, 253, 148, 248, 16, 50, 51, 185, 32, 105, 76, 33, 50, 240,
-        214, 217, 192, 9, 132, 248, 16, 2, 32, 70, 25, 240, 6, 220, 79, 240,
-        0, 8, 32, 70, 67, 240, 221, 220, 71, 70, 12, 224, 212, 248, 168, 50,
-        67, 68, 219, 106, 35, 177, 212, 248, 172, 34, 82, 248, 39, 0, 152, 71,
-        1, 55, 8, 241, 56, 8, 35, 104, 147, 248, 184, 48, 159, 66, 237, 219,
-        0, 39, 212, 248, 104, 50, 83, 248, 7, 128, 184, 241, 0, 15, 5, 208,
-        64, 70, 27, 240, 6, 217, 64, 70, 26, 240, 227, 222, 4, 55, 32, 47, 239,
-        209, 32, 70, 41, 70, 9, 240, 28, 218, 116, 33, 32, 70, 180, 248, 88,
-        35, 29, 240, 252, 216, 148, 248, 21, 34, 66, 242, 16, 115, 0, 42, 12,
-        191, 26, 70, 79, 244, 188, 98, 130, 33, 32, 70, 29, 240, 239, 216, 35,
-        106, 148, 248, 21, 18, 24, 105, 21, 240, 91, 255, 32, 70, 38, 240, 161,
-        252, 35, 104, 65, 242, 107, 1, 211, 248, 216, 48, 26, 107, 138, 66,
-        23, 209, 219, 107, 68, 242, 49, 50, 147, 66, 35, 208, 68, 242, 96, 50,
-        147, 66, 28, 208, 74, 246, 196, 18, 147, 66, 24, 208, 74, 246, 6, 34,
-        147, 66, 20, 208, 68, 242, 82, 50, 147, 66, 20, 191, 7, 34, 1, 34, 14,
-        224, 65, 242, 228, 65, 138, 66, 19, 209, 155, 106, 64, 242, 39, 82,
-        147, 66, 7, 208, 64, 242, 198, 82, 147, 66, 10, 209, 2, 224, 1, 34,
-        0, 37, 1, 224, 5, 34, 1, 37, 32, 70, 120, 73, 23, 240, 105, 218, 0,
-        224, 0, 37, 119, 73, 42, 70, 32, 70, 23, 240, 98, 218, 35, 104, 68,
-        242, 49, 50, 211, 248, 216, 48, 217, 107, 145, 66, 19, 209, 153, 106,
-        64, 242, 198, 82, 145, 66, 14, 209, 218, 106, 65, 242, 2, 35, 154, 66,
-        9, 209, 108, 73, 5, 34, 32, 70, 23, 240, 75, 218, 32, 70, 106, 73, 5,
-        34, 23, 240, 70, 218, 212, 248, 56, 1, 34, 240, 38, 218, 35, 104, 147,
-        248, 79, 32, 145, 7, 8, 208, 212, 248, 116, 36, 179, 248, 204, 48, 32,
-        70, 83, 133, 1, 33, 38, 240, 26, 248, 32, 70, 251, 247, 224, 253, 35,
-        104, 91, 107, 203, 177, 182, 248, 136, 54, 0, 37, 155, 178, 67, 240,
-        4, 3, 166, 248, 136, 54, 212, 248, 104, 50, 89, 89, 81, 177, 35, 104,
-        91, 107, 59, 177, 209, 248, 204, 32, 18, 240, 2, 2, 2, 209, 32, 70,
-        22, 240, 19, 217, 4, 53, 32, 45, 237, 209, 32, 70, 15, 240, 207, 218,
-        212, 248, 176, 17, 97, 185, 32, 70, 25, 240, 199, 217, 5, 4, 196, 248,
-        176, 81, 32, 70, 2, 33, 25, 240, 192, 217, 40, 67, 196, 248, 176, 1,
-        15, 33, 212, 248, 52, 1, 6, 240, 48, 254, 32, 70, 22, 240, 39, 217,
-        32, 70, 8, 240, 170, 220, 180, 248, 36, 21, 32, 70, 252, 247, 29, 250,
-        32, 70, 252, 247, 77, 252, 227, 104, 61, 74, 0, 38, 132, 248, 52, 96,
-        37, 70, 195, 248, 220, 35, 32, 70, 6, 245, 64, 113, 25, 240, 157, 217,
-        181, 248, 58, 50, 26, 7, 6, 209, 35, 240, 15, 3, 0, 240, 15, 2, 19,
-        67, 165, 248, 58, 50, 181, 248, 58, 50, 19, 240, 240, 15, 6, 209, 35,
-        240, 240, 3, 0, 240, 240, 2, 19, 67, 165, 248, 58, 50, 181, 248, 58,
-        50, 19, 244, 112, 111, 6, 209, 35, 244, 112, 99, 0, 244, 112, 98, 19,
-        67, 165, 248, 58, 50, 181, 248, 58, 50, 26, 11, 8, 209, 27, 5, 32, 244,
-        126, 96, 27, 13, 32, 240, 31, 0, 24, 67, 165, 248, 58, 2, 2, 54, 2,
-        53, 8, 46, 198, 209, 35, 104, 32, 70, 147, 249, 82, 16, 10, 240, 151,
-        223, 148, 248, 116, 50, 3, 240, 2, 3, 132, 248, 116, 50, 35, 104, 26,
-        126, 98, 177, 147, 248, 47, 48, 51, 177, 0, 35, 132, 248, 114, 50, 212,
-        248, 8, 5, 38, 240, 146, 218, 32, 70, 14, 240, 25, 223, 0, 37, 212,
-        248, 104, 50, 88, 89, 24, 177, 131, 121, 11, 185, 43, 240, 142, 220,
-        4, 53, 32, 45, 244, 209, 212, 248, 104, 1, 4, 33, 86, 240, 64, 216,
-        0, 35, 132, 248, 42, 56, 7, 176, 189, 232, 240, 143, 74, 217, 3, 0,
-        244, 75, 136, 0, 102, 12, 4, 0, 123, 12, 4, 0, 128, 150, 152, 0, 45,
-        233, 240, 79, 139, 70, 17, 136, 139, 176, 20, 70, 219, 248, 0, 32, 5,
-        145, 1, 240, 252, 8, 20, 153, 9, 146, 219, 138, 14, 104, 5, 153, 19,
-        244, 64, 79, 193, 243, 129, 1, 12, 191, 0, 35, 1, 35, 1, 41, 7, 70,
-        21, 157, 6, 147, 7, 145, 2, 221, 2, 41, 99, 209, 76, 224, 5, 154, 18,
-        244, 64, 127, 7, 208, 184, 241, 80, 15, 0, 240, 106, 129, 184, 241,
-        164, 15, 87, 209, 51, 224, 184, 241, 132, 15, 48, 208, 13, 216, 184,
-        241, 16, 15, 87, 208, 3, 216, 184, 241, 0, 15, 83, 208, 89, 225, 184,
-        241, 32, 15, 79, 208, 184, 241, 48, 15, 8, 224, 184, 241, 164, 15, 30,
-        208, 7, 216, 184, 241, 148, 15, 26, 208, 184, 241, 160, 15, 64, 240,
-        73, 129, 64, 224, 184, 241, 192, 15, 61, 208, 184, 241, 208, 15, 64,
-        240, 65, 129, 32, 70, 41, 70, 11, 240, 185, 217, 0, 40, 64, 240, 58,
-        129, 56, 70, 33, 70, 42, 70, 11, 240, 155, 217, 0, 40, 64, 240, 50,
-        129, 9, 155, 99, 187, 9, 171, 0, 147, 56, 70, 33, 29, 4, 241, 10, 2,
-        6, 155, 35, 240, 109, 255, 6, 70, 33, 224, 5, 155, 19, 244, 64, 117,
-        0, 240, 39, 129, 181, 245, 64, 127, 25, 209, 226, 185, 6, 155, 33, 29,
-        4, 241, 10, 2, 205, 248, 0, 176, 35, 240, 90, 255, 219, 248, 0, 48,
-        6, 70, 9, 147, 15, 224, 59, 104, 1, 37, 211, 248, 136, 48, 218, 109,
-        1, 50, 218, 101, 13, 225, 79, 240, 2, 10, 6, 37, 6, 224, 79, 240, 3,
-        10, 7, 37, 2, 224, 79, 240, 4, 10, 1, 37, 9, 153, 57, 177, 70, 185,
-        56, 70, 4, 241, 10, 2, 6, 155, 35, 240, 55, 255, 6, 70, 0, 46, 71, 208,
-        9, 152, 130, 121, 18, 187, 3, 124, 27, 187, 2, 122, 10, 179, 184, 241,
-        148, 15, 32, 208, 184, 241, 132, 15, 29, 208, 184, 241, 208, 15, 29,
-        209, 176, 248, 190, 48, 97, 138, 34, 138, 89, 64, 176, 248, 188, 48,
-        90, 64, 10, 67, 176, 248, 192, 48, 161, 138, 75, 64, 19, 67, 31, 250,
-        131, 249, 217, 241, 1, 9, 56, 191, 79, 240, 0, 9, 8, 224, 79, 240, 0,
-        9, 5, 224, 145, 70, 3, 224, 79, 240, 1, 9, 0, 224, 153, 70, 208, 248,
-        204, 48, 19, 244, 0, 3, 22, 208, 184, 241, 148, 15, 21, 208, 184, 241,
-        132, 15, 18, 208, 184, 241, 208, 15, 17, 209, 188, 48, 6, 34, 4, 241,
-        16, 1, 238, 247, 94, 250, 208, 241, 1, 0, 56, 191, 0, 32, 7, 224, 48,
-        70, 177, 70, 4, 224, 24, 70, 2, 224, 1, 32, 0, 224, 0, 32, 186, 241,
-        4, 15, 8, 209, 0, 46, 0, 240, 147, 128, 214, 248, 164, 49, 217, 7, 0,
-        241, 149, 128, 140, 224, 126, 177, 150, 248, 36, 48, 19, 240, 2, 2,
-        64, 240, 141, 128, 0, 40, 64, 240, 140, 128, 185, 241, 0, 15, 64, 240,
-        138, 128, 218, 7, 4, 213, 95, 224, 184, 241, 192, 15, 0, 240, 134, 128,
-        35, 121, 216, 7, 116, 212, 30, 177, 150, 248, 36, 48, 89, 7, 111, 212,
-        59, 106, 6, 153, 91, 104, 153, 66, 106, 209, 5, 154, 2, 244, 64, 115,
-        179, 245, 128, 127, 2, 209, 4, 241, 4, 8, 12, 224, 179, 245, 0, 127,
-        2, 209, 4, 241, 10, 8, 6, 224, 7, 155, 1, 43, 20, 191, 4, 241, 16, 8,
-        79, 240, 0, 8, 9, 155, 99, 185, 6, 155, 56, 70, 33, 29, 4, 241, 10,
-        2, 205, 248, 0, 176, 35, 240, 151, 254, 219, 248, 0, 48, 6, 70, 9, 147,
-        9, 155, 59, 177, 3, 241, 194, 2, 184, 241, 0, 15, 11, 209, 3, 241, 188,
-        8, 8, 224, 34, 29, 184, 241, 0, 15, 1, 209, 4, 241, 10, 8, 215, 248,
-        108, 50, 9, 147, 14, 185, 59, 106, 158, 105, 10, 52, 1, 146, 9, 153,
-        50, 70, 35, 70, 56, 70, 205, 248, 0, 128, 2, 149, 26, 240, 6, 216, 0,
-        34, 56, 70, 9, 153, 35, 70, 0, 149, 1, 146, 44, 240, 146, 219, 27, 224,
-        186, 241, 3, 15, 37, 209, 34, 121, 210, 7, 21, 212, 27, 7, 19, 212,
-        59, 106, 6, 153, 91, 104, 153, 66, 14, 209, 49, 105, 56, 70, 1, 241,
-        188, 3, 0, 147, 1, 241, 194, 3, 1, 147, 50, 70, 4, 241, 10, 3, 9, 145,
-        2, 149, 26, 240, 57, 216, 59, 104, 211, 248, 136, 48, 26, 111, 1, 50,
-        26, 103, 6, 224, 0, 37, 4, 224, 21, 70, 2, 224, 5, 70, 0, 224, 77, 70,
-        20, 154, 40, 70, 22, 96, 11, 176, 189, 232, 240, 143, 45, 233, 240,
-        71, 4, 70, 164, 176, 144, 70, 154, 70, 13, 70, 0, 41, 98, 208, 209,
-        248, 88, 51, 0, 43, 94, 208, 5, 175, 15, 174, 51, 70, 58, 70, 13, 241,
-        100, 9, 22, 240, 116, 218, 0, 33, 32, 34, 72, 70, 239, 243, 245, 245,
-        35, 106, 0, 33, 101, 51, 8, 34, 33, 168, 25, 147, 205, 248, 104, 128,
-        141, 248, 108, 160, 28, 151, 29, 150, 239, 243, 231, 245, 35, 104, 205,
-        248, 136, 144, 147, 248, 79, 48, 19, 240, 3, 3, 7, 208, 213, 248, 204,
-        48, 3, 244, 128, 83, 211, 241, 1, 3, 56, 191, 0, 35, 36, 174, 6, 248,
-        12, 61, 41, 70, 64, 34, 0, 35, 212, 248, 124, 6, 0, 150, 64, 240, 28,
-        218, 45, 155, 1, 144, 0, 147, 35, 171, 2, 147, 128, 70, 64, 33, 32,
-        70, 44, 154, 5, 241, 194, 3, 21, 240, 237, 223, 7, 70, 200, 177, 35,
-        155, 212, 248, 124, 6, 1, 147, 41, 70, 0, 35, 64, 34, 0, 150, 205, 248,
-        8, 128, 64, 240, 111, 217, 3, 70, 40, 177, 96, 104, 57, 70, 1, 34, 244,
-        247, 70, 252, 5, 224, 32, 70, 57, 70, 212, 248, 164, 37, 26, 240, 17,
-        216, 36, 176, 189, 232, 240, 135, 45, 233, 240, 79, 145, 176, 221, 248,
-        108, 160, 8, 145, 81, 70, 144, 70, 31, 70, 26, 158, 4, 70, 69, 240,
-        3, 216, 28, 153, 11, 144, 80, 70, 32, 240, 0, 252, 0, 46, 9, 144, 64,
-        243, 218, 128, 8, 155, 1, 46, 61, 120, 20, 191, 151, 248, 1, 176, 79,
-        240, 0, 11, 19, 177, 211, 248, 16, 144, 12, 224, 32, 70, 8, 241, 16,
-        1, 14, 240, 76, 251, 129, 70, 40, 185, 32, 70, 8, 241, 4, 1, 14, 240,
-        27, 251, 129, 70, 4, 45, 6, 208, 1, 216, 1, 45, 2, 224, 10, 45, 1, 208,
-        127, 45, 48, 209, 8, 241, 10, 3, 10, 147, 0, 35, 0, 147, 1, 147, 2,
-        147, 59, 34, 32, 70, 73, 70, 10, 155, 3, 151, 4, 150, 16, 240, 231,
-        222, 4, 45, 5, 209, 171, 241, 32, 3, 1, 43, 1, 216, 7, 45, 27, 224,
-        13, 241, 48, 12, 99, 70, 32, 70, 81, 70, 28, 154, 205, 248, 28, 192,
-        249, 247, 229, 252, 0, 35, 221, 248, 28, 192, 0, 147, 1, 147, 2, 147,
-        32, 70, 73, 70, 75, 34, 10, 155, 3, 151, 4, 150, 205, 248, 20, 192,
-        16, 240, 215, 222, 7, 45, 62, 208, 7, 216, 4, 45, 73, 208, 0, 242, 134,
-        128, 133, 177, 1, 45, 97, 209, 78, 224, 11, 45, 4, 216, 10, 45, 125,
-        210, 8, 45, 90, 209, 122, 224, 21, 45, 120, 208, 127, 45, 31, 208, 17,
-        45, 83, 209, 18, 224, 35, 104, 147, 248, 173, 48, 0, 43, 110, 208, 1,
-        46, 96, 208, 11, 155, 212, 248, 116, 1, 0, 147, 9, 155, 65, 70, 1, 147,
-        58, 70, 51, 70, 29, 240, 228, 218, 96, 224, 185, 241, 0, 15, 3, 208,
-        35, 104, 91, 107, 0, 43, 89, 208, 66, 46, 75, 221, 86, 224, 9, 155,
-        32, 70, 2, 147, 73, 70, 66, 70, 59, 70, 141, 232, 64, 4, 246, 247, 103,
-        253, 75, 224, 35, 104, 147, 248, 79, 48, 153, 7, 70, 208, 32, 70, 89,
-        70, 8, 154, 67, 70, 0, 151, 1, 150, 9, 240, 241, 223, 61, 224, 9, 155,
-        32, 70, 2, 147, 73, 70, 66, 70, 59, 70, 141, 232, 64, 4, 10, 240, 70,
-        216, 50, 224, 35, 104, 147, 248, 176, 48, 0, 43, 45, 208, 187, 241,
-        4, 15, 42, 209, 2, 46, 40, 221, 212, 248, 144, 1, 73, 70, 186, 28, 179,
-        30, 29, 240, 216, 221, 32, 224, 5, 240, 127, 3, 3, 43, 7, 209, 32, 70,
-        8, 153, 66, 70, 59, 70, 0, 150, 32, 240, 214, 217, 20, 224, 42, 6, 18,
-        212, 32, 70, 65, 70, 58, 70, 51, 70, 25, 240, 123, 218, 11, 224, 32,
-        70, 65, 70, 58, 70, 51, 70, 25, 240, 116, 218, 35, 104, 211, 248, 136,
-        48, 26, 111, 1, 50, 26, 103, 0, 32, 17, 176, 189, 232, 240, 143, 45,
-        233, 240, 65, 144, 248, 144, 87, 134, 176, 4, 70, 29, 177, 0, 35, 128,
-        248, 144, 55, 1, 37, 35, 104, 26, 126, 42, 185, 0, 45, 0, 240, 25, 130,
-        32, 70, 2, 33, 19, 226, 32, 105, 63, 240, 57, 223, 24, 177, 160, 104,
-        246, 247, 58, 249, 7, 226, 34, 105, 210, 248, 68, 49, 131, 177, 33,
-        104, 7, 43, 136, 191, 0, 35, 209, 248, 136, 16, 202, 51, 1, 235, 131,
-        3, 89, 104, 1, 49, 89, 96, 194, 248, 68, 1, 32, 70, 21, 240, 23, 222,
-        35, 105, 211, 248, 136, 48, 179, 248, 208, 52, 90, 6, 2, 213, 32, 70,
-        21, 240, 13, 222, 163, 126, 0, 43, 64, 240, 229, 129, 32, 70, 15, 240,
-        68, 219, 35, 106, 32, 70, 211, 248, 16, 128, 212, 248, 108, 50, 211,
-        248, 0, 33, 158, 121, 23, 124, 16, 240, 122, 217, 3, 28, 24, 191, 1,
-        35, 64, 70, 121, 178, 50, 70, 22, 240, 234, 252, 148, 248, 116, 54,
-        171, 177, 35, 105, 211, 248, 136, 48, 211, 248, 36, 97, 22, 240, 64,
-        6, 13, 209, 32, 70, 27, 240, 124, 221, 35, 106, 132, 248, 116, 102,
-        24, 105, 49, 70, 50, 70, 21, 240, 42, 255, 32, 70, 21, 240, 39, 221,
-        35, 104, 32, 70, 154, 106, 1, 50, 154, 98, 16, 240, 82, 217, 24, 185,
-        212, 248, 116, 52, 131, 248, 41, 1, 32, 70, 38, 240, 111, 252, 35, 106,
-        24, 105, 20, 240, 191, 255, 1, 70, 32, 70, 68, 240, 28, 222, 35, 106,
-        24, 105, 20, 240, 199, 255, 1, 70, 32, 70, 18, 240, 44, 255, 35, 104,
-        147, 249, 62, 48, 123, 177, 212, 248, 36, 1, 3, 169, 0, 34, 86, 240,
-        122, 219, 1, 224, 0, 35, 195, 97, 212, 248, 36, 1, 3, 169, 35, 240,
-        246, 251, 0, 40, 246, 209, 148, 248, 216, 49, 75, 177, 32, 70, 10, 240,
-        2, 222, 40, 177, 148, 248, 232, 49, 19, 177, 1, 59, 132, 248, 232, 49,
-        32, 70, 24, 240, 126, 219, 32, 70, 11, 240, 197, 221, 32, 70, 24, 240,
-        210, 219, 148, 248, 216, 49, 19, 177, 32, 70, 22, 240, 20, 222, 35,
-        104, 222, 110, 0, 46, 64, 240, 97, 129, 32, 70, 14, 240, 207, 254, 32,
-        70, 50, 240, 121, 217, 35, 104, 147, 248, 47, 32, 194, 177, 147, 248,
-        48, 48, 171, 177, 32, 70, 16, 240, 29, 216, 136, 177, 212, 248, 104,
-        34, 147, 89, 43, 177, 153, 121, 25, 177, 89, 121, 9, 177, 27, 121, 27,
-        177, 4, 54, 32, 46, 244, 209, 3, 224, 212, 248, 8, 5, 37, 240, 128,
-        222, 212, 248, 24, 53, 27, 104, 163, 177, 32, 70, 27, 240, 133, 217,
-        212, 248, 24, 53, 90, 104, 27, 104, 178, 251, 243, 241, 3, 251, 17,
-        35, 19, 185, 32, 70, 9, 240, 39, 218, 212, 248, 24, 53, 90, 104, 1,
-        50, 90, 96, 10, 224, 35, 104, 154, 106, 30, 35, 178, 251, 243, 241,
-        3, 251, 17, 35, 19, 185, 32, 70, 27, 240, 104, 217, 148, 248, 112, 50,
-        67, 177, 148, 248, 224, 52, 1, 59, 219, 178, 2, 43, 2, 216, 32, 70,
-        9, 240, 198, 223, 0, 38, 212, 248, 104, 50, 83, 248, 6, 128, 184, 241,
-        0, 15, 39, 208, 152, 248, 6, 48, 35, 187, 152, 248, 8, 48, 11, 179,
-        216, 248, 4, 49, 155, 122, 235, 177, 64, 70, 24, 240, 169, 217, 200,
-        177, 152, 248, 16, 48, 179, 177, 216, 248, 4, 49, 155, 122, 147, 177,
-        152, 248, 8, 48, 123, 177, 8, 241, 188, 7, 56, 70, 242, 247, 81, 249,
-        3, 70, 64, 185, 79, 240, 255, 50, 0, 144, 1, 146, 32, 70, 65, 70, 58,
-        70, 25, 240, 220, 221, 4, 54, 32, 46, 205, 209, 32, 70, 253, 247, 69,
-        251, 35, 106, 91, 125, 179, 177, 35, 104, 154, 106, 60, 35, 178, 251,
-        243, 246, 3, 251, 22, 38, 118, 185, 212, 248, 104, 50, 152, 89, 56,
-        177, 131, 121, 43, 185, 3, 122, 27, 177, 3, 124, 11, 185, 11, 240, 205,
-        221, 4, 54, 32, 46, 240, 209, 32, 70, 247, 247, 78, 255, 32, 185, 212,
-        248, 8, 5, 37, 240, 36, 219, 32, 177, 35, 106, 32, 33, 24, 105, 0, 34,
-        3, 224, 35, 106, 32, 33, 24, 105, 1, 34, 20, 240, 248, 248, 0, 39, 212,
-        248, 104, 50, 222, 89, 198, 177, 51, 122, 179, 177, 35, 104, 147, 248,
-        79, 48, 155, 7, 17, 208, 214, 248, 92, 51, 27, 120, 107, 177, 179, 121,
-        19, 185, 48, 70, 10, 240, 101, 217, 179, 121, 27, 185, 214, 248, 92,
-        51, 27, 121, 19, 177, 48, 70, 10, 240, 78, 217, 4, 55, 32, 47, 223,
-        209, 0, 39, 212, 248, 104, 50, 222, 89, 22, 179, 214, 248, 136, 48,
-        19, 177, 1, 59, 198, 248, 136, 48, 214, 248, 140, 128, 184, 241, 0,
-        15, 4, 208, 8, 241, 255, 51, 198, 248, 140, 48, 18, 224, 179, 121, 131,
-        177, 51, 109, 152, 7, 13, 213, 150, 248, 132, 48, 83, 177, 243, 243,
-        244, 244, 214, 248, 144, 16, 44, 240, 46, 216, 24, 177, 198, 248, 136,
-        128, 134, 248, 132, 128, 4, 55, 32, 47, 213, 209, 180, 248, 60, 55,
-        27, 177, 1, 59, 164, 248, 60, 55, 2, 224, 32, 70, 21, 240, 160, 221,
-        0, 39, 62, 70, 11, 224, 212, 248, 168, 50, 219, 25, 91, 106, 35, 177,
-        212, 248, 172, 34, 82, 248, 38, 0, 152, 71, 1, 54, 56, 55, 35, 104,
-        147, 248, 184, 48, 158, 66, 238, 219, 0, 39, 212, 248, 104, 50, 222,
-        89, 6, 179, 179, 121, 243, 185, 51, 122, 227, 177, 150, 248, 66, 51,
-        217, 7, 4, 213, 32, 70, 49, 70, 150, 248, 64, 35, 5, 224, 154, 7, 5,
-        213, 150, 248, 65, 35, 32, 70, 49, 70, 22, 240, 54, 223, 148, 248, 228,
-        53, 67, 177, 51, 121, 51, 177, 214, 248, 4, 49, 32, 70, 25, 120, 50,
-        70, 253, 247, 20, 253, 4, 55, 32, 47, 215, 209, 0, 35, 132, 248, 228,
-        53, 32, 70, 36, 240, 14, 255, 212, 248, 108, 50, 83, 177, 211, 248,
-        4, 33, 58, 177, 18, 120, 42, 185, 27, 122, 27, 177, 160, 104, 2, 33,
-        4, 240, 107, 223, 32, 70, 14, 240, 110, 219, 37, 177, 32, 70, 2, 33,
-        0, 34, 28, 240, 16, 217, 6, 176, 189, 232, 240, 129, 45, 233, 240, 79,
-        139, 176, 7, 147, 221, 248, 80, 128, 0, 35, 141, 248, 39, 48, 21, 158,
-        221, 248, 28, 160, 184, 248, 4, 80, 22, 153, 154, 66, 24, 191, 146,
-        70, 145, 70, 5, 240, 3, 5, 242, 136, 6, 57, 2, 45, 4, 70, 16, 70, 7,
-        209, 18, 178, 154, 66, 4, 218, 16, 240, 12, 15, 20, 191, 0, 35, 1, 35,
-        27, 185, 6, 241, 30, 5, 28, 39, 2, 224, 6, 241, 34, 5, 32, 39, 207,
-        27, 11, 47, 64, 243, 8, 129, 179, 29, 212, 248, 112, 7, 6, 147, 36,
-        240, 52, 250, 35, 104, 147, 248, 21, 49, 115, 177, 148, 248, 1, 55,
-        91, 185, 212, 248, 92, 1, 59, 240, 29, 218, 48, 177, 32, 70, 65, 70,
-        6, 154, 43, 70, 0, 151, 8, 240, 209, 222, 212, 248, 104, 49, 75, 177,
-        155, 121, 59, 177, 32, 70, 65, 70, 50, 70, 6, 155, 141, 232, 160, 0,
-        249, 247, 208, 250, 6, 155, 32, 70, 141, 232, 168, 0, 13, 241, 39, 3,
-        3, 147, 73, 70, 51, 70, 66, 70, 252, 247, 98, 249, 212, 248, 108, 50,
-        153, 69, 78, 209, 148, 248, 144, 55, 0, 43, 74, 208, 148, 248, 46, 50,
-        59, 177, 160, 104, 212, 248, 236, 17, 4, 240, 108, 222, 0, 35, 132,
-        248, 46, 50, 148, 248, 184, 55, 59, 177, 160, 104, 212, 248, 180, 23,
-        4, 240, 97, 222, 0, 35, 132, 248, 184, 55, 148, 248, 160, 55, 79, 240,
-        0, 11, 1, 43, 5, 209, 32, 70, 255, 247, 75, 253, 132, 248, 208, 183,
-        23, 224, 79, 240, 1, 12, 132, 248, 208, 199, 32, 70, 2, 33, 90, 70,
-        132, 248, 144, 183, 205, 248, 20, 192, 28, 240, 117, 216, 160, 104,
-        212, 248, 180, 23, 13, 34, 91, 70, 4, 240, 24, 222, 221, 248, 20, 192,
-        132, 248, 184, 199, 212, 248, 236, 17, 32, 70, 212, 248, 8, 176, 5,
-        145, 15, 240, 66, 216, 1, 35, 2, 70, 5, 153, 88, 70, 4, 240, 6, 222,
-        1, 35, 132, 248, 46, 50, 157, 248, 39, 48, 91, 177, 157, 248, 92, 48,
-        67, 177, 6, 155, 32, 70, 141, 232, 168, 0, 73, 70, 66, 70, 51, 70, 14,
-        240, 54, 217, 107, 137, 217, 7, 58, 213, 212, 248, 124, 1, 41, 70, 58,
-        70, 60, 240, 63, 221, 0, 40, 50, 209, 148, 248, 1, 55, 1, 43, 46, 208,
-        184, 248, 22, 48, 19, 244, 64, 79, 95, 250, 131, 251, 21, 209, 5, 241,
-        12, 0, 167, 241, 12, 1, 3, 34, 242, 247, 67, 248, 248, 177, 67, 120,
-        235, 177, 131, 120, 91, 69, 26, 209, 34, 106, 16, 105, 5, 147, 19, 240,
-        220, 255, 5, 155, 192, 178, 131, 66, 12, 224, 35, 106, 24, 105, 19,
-        240, 212, 255, 192, 178, 131, 69, 10, 209, 32, 70, 41, 70, 58, 70, 9,
-        240, 132, 222, 131, 69, 3, 209, 212, 248, 104, 1, 85, 240, 2, 220, 7,
-        155, 59, 185, 6, 241, 22, 1, 32, 70, 13, 240, 106, 255, 1, 70, 8, 185,
-        10, 224, 7, 153, 139, 121, 59, 185, 32, 70, 42, 70, 43, 70, 141, 232,
-        128, 1, 2, 150, 11, 240, 161, 218, 185, 241, 0, 15, 29, 208, 218, 248,
-        248, 48, 155, 104, 15, 43, 24, 209, 43, 70, 80, 70, 65, 70, 50, 70,
-        27, 240, 97, 219, 80, 70, 0, 33, 10, 240, 99, 251, 35, 104, 147, 248,
-        47, 48, 35, 177, 212, 248, 8, 5, 37, 240, 9, 220, 5, 224, 218, 248,
-        4, 49, 80, 70, 25, 122, 253, 247, 123, 250, 11, 176, 189, 232, 240,
-        143, 112, 181, 144, 248, 46, 50, 0, 37, 4, 70, 128, 248, 184, 87, 51,
-        177, 128, 104, 212, 248, 236, 17, 4, 240, 150, 221, 132, 248, 46, 82,
-        32, 70, 255, 247, 135, 252, 0, 35, 132, 248, 208, 55, 32, 70, 166, 104,
-        212, 248, 236, 81, 14, 240, 152, 223, 1, 35, 2, 70, 41, 70, 48, 70,
-        4, 240, 92, 221, 1, 35, 132, 248, 46, 50, 112, 189, 45, 233, 240, 79,
-        139, 137, 137, 176, 13, 43, 6, 70, 15, 70, 146, 70, 13, 217, 16, 224,
-        151, 75, 250, 138, 27, 104, 57, 70, 83, 248, 34, 64, 0, 35, 251, 130,
-        112, 104, 1, 34, 243, 247, 160, 255, 39, 70, 0, 47, 240, 209, 1, 32,
-        167, 225, 67, 104, 17, 70, 7, 147, 13, 240, 147, 254, 48, 70, 81, 70,
-        215, 248, 8, 176, 13, 240, 141, 254, 5, 70, 186, 241, 0, 15, 1, 209,
-        208, 248, 12, 160, 51, 104, 147, 248, 176, 48, 43, 177, 214, 248, 144,
-        1, 41, 70, 58, 70, 29, 240, 212, 217, 154, 248, 4, 48, 2, 43, 5, 209,
-        218, 248, 16, 64, 20, 241, 20, 8, 31, 209, 0, 224, 0, 36, 43, 121, 0,
-        43, 0, 240, 134, 128, 171, 121, 67, 185, 5, 241, 188, 0, 241, 247, 181,
-        254, 24, 177, 125, 224, 71, 70, 0, 32, 112, 225, 170, 121, 26, 177,
-        217, 70, 79, 240, 0, 8, 9, 224, 43, 124, 27, 177, 5, 241, 188, 9, 144,
-        70, 3, 224, 217, 70, 152, 70, 0, 224, 193, 70, 213, 248, 244, 48, 91,
-        142, 3, 244, 64, 67, 163, 245, 64, 64, 67, 66, 67, 235, 0, 3, 6, 147,
-        184, 241, 0, 15, 46, 209, 171, 121, 99, 179, 153, 248, 0, 48, 217, 7,
-        40, 213, 187, 248, 12, 48, 26, 10, 66, 234, 3, 35, 27, 178, 6, 43, 32,
-        209, 187, 105, 218, 5, 29, 213, 48, 70, 41, 70, 11, 241, 6, 2, 6, 155,
-        35, 240, 188, 248, 4, 70, 160, 177, 8, 35, 1, 147, 48, 70, 41, 70, 12,
-        34, 4, 241, 20, 3, 205, 248, 0, 128, 205, 248, 8, 128, 205, 248, 12,
-        128, 205, 248, 16, 128, 16, 240, 15, 218, 48, 70, 33, 70, 86, 240, 9,
-        220, 187, 105, 35, 244, 128, 115, 187, 97, 184, 241, 0, 15, 15, 209,
-        43, 124, 107, 177, 153, 248, 0, 48, 219, 7, 9, 212, 48, 70, 41, 70,
-        74, 70, 6, 155, 35, 240, 146, 248, 4, 70, 0, 40, 63, 209, 22, 224, 153,
-        248, 0, 48, 216, 7, 25, 213, 213, 248, 204, 48, 89, 5, 14, 212, 213,
-        248, 244, 48, 91, 142, 3, 244, 64, 67, 163, 245, 64, 66, 83, 66, 67,
-        235, 2, 3, 14, 51, 5, 235, 131, 3, 92, 104, 60, 187, 51, 104, 211, 248,
-        136, 48, 90, 106, 1, 50, 90, 98, 123, 231, 252, 185, 48, 70, 41, 70,
-        74, 70, 6, 155, 35, 240, 105, 248, 4, 70, 184, 185, 48, 70, 41, 70,
-        74, 70, 6, 155, 35, 240, 20, 249, 4, 70, 88, 185, 51, 104, 211, 248,
-        136, 48, 26, 106, 1, 50, 26, 98, 218, 248, 32, 48, 1, 51, 202, 248,
-        32, 48, 94, 231, 48, 70, 33, 70, 86, 240, 93, 219, 48, 70, 57, 70, 34,
-        70, 247, 247, 20, 250, 128, 70, 0, 40, 63, 244, 82, 175, 149, 248, 37,
-        51, 187, 185, 42, 109, 64, 242, 55, 19, 19, 64, 147, 177, 83, 6, 16,
-        212, 131, 105, 217, 6, 13, 212, 0, 43, 11, 219, 227, 104, 75, 185, 171,
-        110, 90, 28, 63, 244, 60, 175, 5, 235, 131, 3, 219, 110, 0, 43, 63,
-        244, 54, 175, 149, 248, 68, 48, 200, 248, 40, 64, 136, 248, 33, 48,
-        216, 248, 24, 48, 155, 5, 30, 212, 99, 104, 19, 240, 64, 3, 7, 208,
-        184, 248, 14, 48, 10, 74, 3, 240, 7, 3, 211, 92, 9, 74, 211, 92, 166,
-        51, 86, 248, 35, 144, 185, 241, 0, 15, 14, 208, 48, 70, 65, 70, 74,
-        70, 247, 247, 99, 248, 8, 224, 0, 191, 32, 7, 0, 0, 138, 182, 135, 0,
-        84, 194, 135, 0, 79, 240, 0, 9, 216, 248, 24, 48, 67, 240, 128, 67,
-        200, 248, 24, 48, 213, 248, 4, 49, 147, 248, 72, 48, 83, 177, 65, 70,
-        112, 104, 241, 247, 5, 253, 0, 33, 0, 144, 1, 34, 40, 70, 11, 70, 79,
-        240, 218, 217, 184, 248, 14, 48, 53, 74, 3, 240, 7, 3, 18, 248, 3, 176,
-        212, 248, 52, 49, 26, 122, 7, 42, 6, 209, 29, 104, 88, 104, 33, 70,
-        66, 70, 91, 70, 168, 71, 33, 224, 46, 75, 69, 70, 234, 138, 27, 104,
-        83, 248, 34, 128, 0, 35, 235, 130, 235, 137, 35, 244, 128, 83, 235,
-        129, 184, 241, 0, 15, 7, 208, 48, 70, 33, 70, 42, 70, 67, 70, 205, 248,
-        0, 144, 22, 240, 18, 222, 212, 248, 52, 49, 33, 70, 31, 104, 88, 104,
-        42, 70, 91, 70, 184, 71, 184, 241, 0, 15, 221, 209, 48, 70, 218, 248,
-        12, 16, 251, 247, 163, 253, 0, 32, 46, 224, 25, 75, 250, 138, 27, 104,
-        83, 248, 34, 64, 0, 35, 251, 130, 251, 137, 50, 104, 35, 244, 128, 83,
-        27, 4, 81, 107, 27, 12, 251, 129, 169, 177, 18, 73, 3, 240, 7, 3, 203,
-        92, 17, 73, 210, 248, 140, 32, 205, 92, 7, 152, 4, 53, 2, 235, 197,
-        5, 107, 104, 57, 70, 1, 51, 107, 96, 213, 248, 8, 128, 241, 247, 158,
-        252, 64, 68, 168, 96, 7, 152, 57, 70, 1, 34, 243, 247, 247, 253, 39,
-        70, 1, 32, 0, 47, 208, 209, 9, 176, 189, 232, 240, 143, 72, 194, 135,
-        0, 32, 7, 0, 0, 138, 182, 135, 0, 84, 194, 135, 0, 45, 233, 240, 79,
-        141, 176, 22, 156, 7, 146, 212, 248, 8, 128, 155, 70, 184, 248, 12,
-        48, 208, 248, 4, 144, 26, 10, 66, 234, 3, 35, 14, 105, 155, 178, 5,
-        70, 15, 70, 72, 70, 33, 70, 4, 147, 241, 247, 112, 252, 5, 144, 4, 152,
-        176, 245, 1, 79, 53, 209, 30, 177, 150, 248, 37, 51, 0, 43, 73, 209,
-        213, 248, 84, 50, 0, 43, 69, 208, 184, 248, 14, 48, 26, 10, 66, 234,
-        3, 34, 146, 178, 19, 5, 27, 13, 0, 43, 59, 209, 227, 137, 65, 70, 35,
-        240, 7, 3, 67, 234, 82, 50, 226, 129, 8, 168, 12, 34, 237, 247, 185,
-        250, 163, 104, 162, 137, 3, 241, 4, 8, 4, 58, 162, 129, 196, 248, 8,
-        128, 27, 138, 33, 70, 26, 10, 66, 234, 3, 35, 155, 178, 72, 70, 4, 147,
-        241, 247, 59, 252, 8, 169, 5, 144, 12, 34, 64, 70, 237, 247, 161, 250,
-        4, 153, 72, 246, 108, 3, 153, 66, 19, 209, 0, 34, 64, 70, 5, 153, 19,
-        70, 239, 247, 244, 253, 30, 48, 11, 208, 0, 34, 72, 70, 33, 70, 243,
-        247, 131, 253, 43, 104, 211, 248, 136, 48, 26, 111, 1, 50, 26, 103,
-        29, 225, 152, 248, 0, 48, 3, 240, 1, 3, 6, 147, 179, 121, 0, 43, 0,
-        240, 153, 128, 6, 154, 40, 70, 0, 146, 49, 70, 58, 70, 35, 70, 8, 240,
-        241, 216, 0, 40, 64, 240, 10, 129, 7, 155, 19, 185, 214, 248, 12, 160,
-        0, 224, 130, 70, 150, 248, 59, 48, 216, 7, 0, 241, 131, 128, 7, 152,
-        0, 40, 127, 209, 6, 153, 81, 179, 153, 7, 4, 213, 88, 70, 241, 247,
-        145, 252, 0, 40, 118, 208, 214, 248, 204, 48, 154, 4, 19, 213, 88, 70,
-        241, 247, 136, 252, 120, 185, 150, 248, 69, 48, 99, 185, 213, 248, 8,
-        50, 75, 185, 43, 104, 147, 248, 44, 48, 43, 185, 48, 70, 89, 70, 50,
-        240, 1, 223, 0, 40, 88, 209, 33, 70, 72, 70, 243, 247, 83, 253, 1, 70,
-        0, 40, 87, 208, 40, 70, 82, 70, 13, 240, 192, 219, 82, 224, 182, 248,
-        196, 48, 184, 248, 2, 32, 184, 248, 0, 16, 90, 64, 182, 248, 194, 48,
-        75, 64, 26, 67, 184, 248, 4, 16, 182, 248, 198, 48, 75, 64, 19, 67,
-        155, 178, 0, 43, 62, 208, 40, 70, 49, 70, 66, 70, 34, 240, 156, 254,
-        0, 40, 55, 208, 144, 248, 36, 48, 155, 7, 51, 213, 43, 104, 90, 107,
-        202, 177, 226, 137, 87, 73, 2, 240, 7, 2, 138, 92, 86, 73, 211, 248,
-        140, 48, 138, 92, 72, 70, 16, 50, 3, 235, 194, 2, 81, 104, 19, 29, 1,
-        49, 81, 96, 33, 70, 210, 248, 8, 176, 3, 147, 241, 247, 148, 251, 3,
-        155, 88, 68, 88, 96, 43, 104, 147, 248, 44, 48, 99, 177, 33, 70, 72,
-        70, 243, 247, 7, 253, 1, 70, 48, 177, 40, 70, 82, 70, 13, 240, 117,
-        219, 79, 240, 0, 9, 7, 224, 40, 70, 33, 70, 82, 70, 13, 240, 109, 219,
-        123, 224, 79, 240, 1, 9, 42, 104, 5, 152, 210, 248, 136, 48, 25, 108,
-        1, 49, 25, 100, 89, 108, 9, 24, 89, 100, 213, 248, 8, 53, 19, 177, 89,
-        105, 1, 49, 89, 97, 215, 248, 248, 48, 19, 185, 57, 105, 201, 104, 0,
-        224, 25, 70, 8, 108, 1, 48, 8, 100, 11, 185, 59, 105, 219, 104, 89,
-        108, 5, 152, 9, 24, 89, 100, 83, 107, 139, 177, 227, 137, 44, 73, 3,
-        240, 7, 3, 203, 92, 43, 73, 210, 248, 140, 32, 203, 92, 8, 51, 2, 235,
-        195, 3, 90, 104, 1, 50, 90, 96, 154, 104, 130, 24, 154, 96, 4, 153,
-        72, 246, 142, 3, 153, 66, 3, 208, 72, 246, 180, 3, 153, 66, 7, 209,
-        40, 70, 33, 70, 58, 70, 51, 70, 205, 248, 0, 128, 15, 240, 254, 222,
-        43, 104, 90, 107, 26, 185, 147, 248, 79, 48, 152, 7, 6, 208, 225, 137,
-        17, 240, 7, 1, 2, 209, 32, 70, 241, 247, 226, 251, 6, 154, 210, 185,
-        215, 248, 164, 49, 153, 4, 22, 213, 185, 241, 0, 15, 19, 208, 178, 121,
-        213, 248, 96, 22, 56, 105, 0, 42, 20, 191, 24, 34, 0, 34, 139, 24, 136,
-        80, 226, 137, 10, 73, 2, 240, 7, 2, 154, 129, 138, 92, 9, 73, 95, 96,
-        138, 92, 26, 117, 251, 105, 40, 70, 1, 51, 251, 97, 49, 70, 58, 70,
-        35, 70, 25, 240, 184, 216, 13, 176, 189, 232, 240, 143, 0, 191, 138,
-        182, 135, 0, 84, 194, 135, 0, 45, 233, 240, 79, 194, 104, 147, 176,
-        210, 248, 128, 33, 0, 35, 15, 146, 208, 248, 96, 38, 4, 70, 19, 99,
-        146, 248, 52, 32, 173, 248, 68, 48, 213, 26, 106, 66, 66, 235, 5, 2,
-        1, 37, 14, 145, 141, 248, 71, 32, 12, 149, 8, 147, 154, 70, 7, 147,
-        9, 147, 31, 70, 11, 145, 231, 225, 158, 104, 15, 154, 49, 138, 178,
-        97, 212, 248, 200, 5, 17, 240, 4, 2, 14, 153, 24, 191, 2, 34, 18, 24,
-        136, 104, 128, 24, 136, 96, 153, 137, 211, 248, 8, 128, 138, 26, 154,
-        129, 65, 70, 48, 70, 31, 240, 244, 251, 14, 153, 131, 70, 141, 104,
-        139, 137, 175, 29, 6, 59, 26, 32, 139, 129, 173, 248, 66, 0, 143, 96,
-        96, 104, 10, 151, 241, 247, 175, 250, 13, 144, 115, 138, 216, 7, 4,
-        212, 96, 104, 14, 153, 4, 34, 243, 243, 86, 243, 235, 136, 212, 248,
-        96, 38, 19, 244, 128, 115, 24, 191, 24, 35, 210, 24, 87, 104, 14, 155,
-        13, 152, 159, 98, 215, 248, 96, 49, 57, 70, 1, 51, 199, 248, 96, 49,
-        7, 146, 241, 233, 100, 35, 18, 24, 67, 241, 0, 3, 193, 233, 0, 35, 152,
-        248, 1, 32, 152, 248, 0, 48, 215, 248, 16, 160, 19, 67, 152, 248, 2,
-        32, 26, 67, 7, 208, 212, 248, 96, 1, 89, 70, 114, 138, 34, 240, 173,
-        254, 199, 248, 108, 177, 154, 248, 6, 48, 0, 43, 86, 209, 218, 248,
-        252, 32, 49, 70, 147, 113, 35, 105, 211, 248, 148, 48, 88, 106, 20,
-        240, 27, 249, 32, 70, 49, 70, 67, 240, 155, 223, 128, 70, 152, 177,
-        65, 70, 150, 249, 29, 32, 1, 35, 80, 70, 67, 240, 242, 223, 49, 70,
-        212, 248, 172, 38, 32, 70, 67, 240, 48, 223, 129, 70, 73, 70, 80, 70,
-        1, 34, 68, 240, 52, 216, 0, 224, 129, 70, 14, 155, 12, 153, 131, 248,
-        35, 128, 131, 248, 34, 144, 81, 179, 27, 240, 64, 127, 88, 70, 1, 208,
-        31, 240, 99, 250, 0, 240, 127, 2, 2, 42, 9, 208, 4, 42, 7, 208, 11,
-        42, 5, 208, 162, 241, 22, 1, 74, 66, 66, 235, 1, 2, 0, 224, 1, 34, 79,
-        240, 0, 8, 241, 136, 150, 249, 28, 48, 205, 248, 0, 128, 1, 146, 178,
-        136, 32, 70, 146, 11, 2, 146, 9, 10, 66, 70, 205, 248, 12, 128, 205,
-        248, 16, 160, 37, 240, 134, 251, 205, 248, 48, 128, 235, 136, 223, 248,
-        164, 131, 19, 244, 128, 79, 8, 209, 218, 248, 80, 32, 64, 242, 55, 19,
-        19, 64, 147, 177, 154, 248, 88, 48, 123, 177, 7, 155, 10, 154, 1, 147,
-        13, 241, 66, 3, 0, 146, 2, 147, 32, 70, 57, 70, 14, 154, 51, 70, 246,
-        247, 124, 249, 0, 40, 64, 240, 215, 128, 7, 152, 41, 127, 130, 137,
-        104, 127, 7, 235, 66, 3, 65, 234, 0, 33, 163, 248, 180, 16, 14, 155,
-        216, 248, 0, 16, 216, 138, 2, 240, 7, 2, 81, 248, 32, 176, 217, 137,
-        212, 248, 56, 1, 33, 240, 7, 1, 10, 67, 218, 129, 177, 136, 58, 70,
-        1, 240, 3, 1, 10, 155, 6, 240, 61, 249, 14, 153, 139, 105, 138, 104,
-        19, 240, 128, 15, 189, 248, 66, 48, 21, 208, 210, 24, 138, 96, 138,
-        137, 212, 248, 48, 1, 211, 26, 139, 129, 13, 241, 71, 3, 141, 232, 136,
-        0, 0, 35, 2, 147, 14, 169, 7, 154, 17, 171, 6, 240, 137, 254, 0, 40,
-        64, 240, 154, 128, 147, 224, 2, 235, 3, 9, 211, 92, 170, 43, 51, 209,
-        153, 248, 1, 48, 170, 43, 47, 209, 153, 248, 2, 48, 3, 43, 43, 209,
-        153, 248, 3, 48, 67, 187, 153, 248, 4, 48, 43, 187, 153, 248, 5, 48,
-        75, 185, 185, 248, 6, 48, 32, 70, 25, 10, 65, 234, 3, 33, 137, 178,
-        245, 247, 120, 252, 104, 177, 153, 248, 5, 48, 248, 43, 20, 209, 185,
-        248, 6, 48, 32, 70, 25, 10, 65, 234, 3, 33, 137, 178, 245, 247, 106,
-        252, 80, 177, 14, 154, 189, 248, 66, 16, 147, 104, 144, 137, 6, 57,
-        91, 24, 65, 26, 147, 96, 145, 129, 18, 224, 14, 154, 189, 248, 66, 16,
-        144, 137, 161, 241, 14, 14, 147, 104, 65, 26, 137, 178, 115, 68, 206,
-        235, 0, 14, 8, 10, 64, 234, 1, 33, 147, 96, 162, 248, 12, 224, 153,
-        129, 234, 136, 210, 5, 11, 212, 233, 138, 217, 128, 42, 139, 26, 129,
-        104, 139, 88, 129, 233, 137, 153, 128, 170, 137, 90, 128, 109, 137,
-        10, 224, 40, 138, 216, 128, 105, 138, 25, 129, 170, 138, 90, 129, 104,
-        139, 152, 128, 41, 139, 89, 128, 237, 138, 29, 128, 157, 248, 71, 32,
-        98, 177, 154, 137, 8, 42, 6, 208, 77, 246, 134, 81, 85, 26, 106, 66,
-        66, 235, 5, 2, 0, 224, 1, 34, 141, 248, 71, 32, 1, 147, 15, 171, 2,
-        147, 189, 248, 66, 48, 10, 157, 3, 147, 32, 70, 81, 70, 14, 154, 51,
-        70, 0, 149, 246, 247, 40, 249, 144, 185, 14, 155, 9, 157, 218, 137,
-        13, 152, 66, 244, 128, 82, 218, 129, 189, 248, 68, 48, 45, 24, 1, 51,
-        173, 248, 68, 48, 9, 149, 14, 157, 205, 248, 56, 176, 8, 149, 57, 224,
-        14, 157, 216, 248, 0, 32, 235, 138, 8, 152, 82, 248, 35, 48, 32, 177,
-        3, 177, 27, 136, 8, 153, 203, 130, 0, 224, 11, 147, 234, 138, 216, 248,
-        0, 48, 7, 152, 83, 248, 34, 48, 0, 34, 14, 147, 235, 137, 234, 130,
-        35, 244, 128, 83, 235, 129, 35, 104, 2, 125, 211, 248, 140, 48, 12,
-        50, 3, 235, 194, 2, 81, 104, 1, 49, 81, 96, 6, 125, 41, 70, 12, 54,
-        3, 235, 198, 6, 96, 104, 214, 248, 8, 128, 241, 247, 249, 248, 64, 68,
-        176, 96, 41, 70, 96, 104, 0, 34, 243, 247, 82, 250, 11, 157, 0, 45,
-        0, 240, 160, 128, 14, 155, 0, 43, 127, 244, 20, 174, 157, 248, 71, 80,
-        184, 70, 11, 158, 0, 45, 115, 208, 32, 104, 189, 248, 68, 16, 208, 248,
-        136, 32, 9, 159, 210, 248, 24, 51, 194, 248, 28, 19, 139, 66, 44, 191,
-        194, 248, 24, 51, 194, 248, 24, 19, 19, 108, 208, 248, 140, 80, 91,
-        24, 19, 100, 83, 108, 219, 25, 7, 159, 83, 100, 59, 125, 8, 51, 5, 235,
-        195, 3, 95, 104, 207, 25, 95, 96, 7, 159, 59, 125, 9, 159, 8, 51, 5,
-        235, 195, 3, 157, 104, 125, 25, 157, 96, 212, 248, 8, 53, 19, 177, 93,
-        105, 109, 24, 93, 97, 218, 248, 12, 48, 9, 159, 29, 108, 128, 106, 109,
-        24, 29, 100, 93, 108, 237, 25, 93, 100, 200, 248, 40, 0, 210, 248, 12,
-        3, 65, 24, 194, 248, 12, 19, 160, 104, 153, 104, 50, 70, 1, 35, 244,
-        247, 24, 255, 78, 224, 41, 75, 242, 138, 27, 104, 0, 32, 83, 248, 34,
-        112, 240, 130, 96, 104, 49, 70, 241, 247, 146, 248, 142, 40, 22, 216,
-        175, 177, 96, 104, 57, 70, 241, 247, 139, 248, 142, 40, 15, 216, 32,
-        70, 49, 70, 58, 70, 245, 247, 104, 254, 72, 177, 243, 137, 96, 104,
-        35, 244, 128, 83, 243, 129, 49, 70, 0, 34, 243, 247, 218, 249, 6, 224,
-        29, 177, 49, 136, 233, 130, 53, 70, 1, 224, 53, 70, 176, 70, 62, 70,
-        0, 224, 168, 70, 0, 46, 207, 209, 67, 70, 26, 224, 16, 74, 217, 138,
-        18, 104, 32, 70, 82, 248, 33, 80, 0, 34, 218, 130, 218, 137, 34, 244,
-        128, 82, 218, 129, 34, 104, 210, 248, 136, 32, 210, 248, 16, 19, 1,
-        49, 194, 248, 16, 19, 0, 147, 153, 106, 0, 34, 155, 104, 255, 247, 201,
-        251, 43, 70, 0, 43, 226, 209, 19, 176, 189, 232, 240, 143, 0, 191, 32,
-        7, 0, 0, 45, 233, 240, 79, 147, 139, 14, 105, 141, 176, 7, 70, 13, 70,
-        20, 70, 208, 248, 4, 160, 195, 243, 128, 43, 46, 177, 150, 248, 37,
-        35, 0, 42, 24, 191, 79, 240, 0, 11, 148, 248, 42, 32, 18, 177, 148,
-        248, 34, 128, 0, 224, 144, 70, 148, 248, 44, 32, 226, 185, 25, 5, 26,
-        213, 59, 104, 211, 248, 136, 48, 211, 248, 76, 35, 1, 50, 195, 248,
-        76, 35, 213, 248, 52, 34, 1, 50, 197, 248, 52, 34, 5, 235, 72, 2, 178,
-        248, 180, 16, 180, 248, 126, 32, 145, 66, 5, 209, 211, 248, 188, 33,
-        1, 50, 195, 248, 188, 33, 2, 227, 179, 121, 43, 187, 214, 248, 4, 145,
-        153, 248, 12, 48, 131, 177, 148, 248, 44, 48, 107, 185, 187, 241, 0,
-        15, 10, 209, 149, 248, 218, 32, 99, 106, 82, 250, 3, 243, 218, 7, 3,
-        212, 48, 70, 161, 139, 10, 240, 8, 222, 59, 104, 91, 107, 99, 177, 153,
-        248, 28, 48, 75, 177, 148, 248, 42, 48, 51, 177, 148, 248, 40, 48, 27,
-        177, 48, 70, 0, 33, 25, 240, 96, 216, 35, 140, 19, 240, 4, 2, 64, 240,
-        214, 130, 163, 139, 3, 244, 128, 67, 99, 99, 150, 248, 37, 19, 9, 177,
-        162, 99, 35, 224, 59, 185, 50, 109, 64, 242, 55, 19, 19, 64, 235, 177,
-        150, 248, 88, 48, 211, 177, 0, 35, 163, 99, 56, 70, 35, 70, 81, 70,
-        42, 70, 205, 248, 0, 128, 87, 240, 61, 216, 99, 107, 64, 185, 0, 43,
-        0, 240, 181, 130, 213, 248, 116, 49, 1, 51, 197, 248, 116, 49, 174,
-        226, 35, 177, 213, 248, 112, 49, 1, 51, 197, 248, 112, 49, 148, 248,
-        44, 48, 67, 185, 8, 241, 88, 3, 180, 248, 126, 0, 5, 235, 67, 3, 154,
-        136, 152, 128, 0, 224, 0, 34, 148, 248, 44, 48, 0, 43, 64, 240, 73,
-        129, 180, 248, 126, 0, 8, 241, 28, 9, 16, 240, 15, 3, 64, 240, 154,
-        128, 5, 235, 137, 9, 217, 248, 4, 16, 121, 177, 26, 70, 80, 70, 2, 147,
-        243, 247, 240, 248, 2, 155, 5, 235, 136, 2, 194, 248, 148, 48, 8, 241,
-        78, 2, 201, 248, 4, 48, 69, 248, 34, 48, 187, 241, 0, 15, 0, 240, 40,
-        129, 212, 248, 20, 224, 8, 241, 28, 9, 227, 104, 5, 235, 137, 9, 201,
-        248, 4, 224, 3, 147, 222, 248, 8, 48, 222, 248, 4, 0, 90, 13, 190, 248,
-        6, 192, 82, 5, 192, 243, 20, 0, 16, 24, 57, 104, 190, 248, 12, 32, 204,
-        243, 74, 28, 12, 241, 1, 12, 3, 235, 2, 14, 201, 105, 132, 68, 206,
-        235, 12, 14, 27, 26, 137, 104, 115, 68, 154, 24, 138, 66, 48, 218, 80,
-        70, 243, 247, 148, 248, 201, 248, 4, 0, 0, 40, 0, 240, 70, 130, 98,
-        105, 128, 104, 145, 104, 83, 104, 33, 240, 127, 78, 46, 244, 96, 14,
-        146, 137, 195, 243, 20, 3, 195, 235, 14, 3, 201, 26, 154, 24, 236, 247,
-        172, 253, 97, 105, 139, 104, 74, 104, 35, 240, 127, 67, 35, 244, 96,
-        3, 194, 243, 20, 2, 154, 26, 217, 248, 4, 48, 152, 104, 128, 24, 152,
-        96, 152, 137, 130, 26, 154, 129, 136, 137, 0, 34, 152, 129, 80, 70,
-        243, 247, 136, 248, 58, 104, 3, 153, 210, 105, 5, 235, 136, 3, 146,
-        104, 165, 72, 82, 26, 215, 248, 200, 21, 6, 58, 82, 26, 195, 248, 148,
-        32, 97, 104, 8, 34, 236, 247, 111, 253, 107, 104, 16, 185, 67, 240,
-        8, 3, 1, 224, 35, 240, 8, 3, 107, 96, 156, 72, 97, 104, 8, 34, 236,
-        247, 98, 253, 171, 104, 16, 185, 67, 240, 32, 3, 1, 224, 35, 240, 32,
-        3, 171, 96, 166, 224, 5, 235, 137, 1, 73, 104, 33, 185, 150, 248, 37,
-        195, 188, 241, 0, 15, 60, 208, 80, 64, 32, 240, 15, 0, 32, 185, 2, 240,
-        15, 2, 1, 50, 147, 66, 19, 208, 0, 34, 80, 70, 243, 247, 74, 248, 8,
-        241, 28, 2, 0, 35, 5, 235, 130, 2, 83, 96, 8, 241, 36, 2, 5, 235, 130,
-        2, 8, 241, 78, 8, 83, 96, 69, 248, 40, 48, 31, 224, 150, 248, 37, 147,
-        185, 241, 0, 15, 123, 209, 8, 241, 36, 12, 5, 235, 140, 12, 163, 104,
-        220, 248, 4, 32, 147, 66, 32, 217, 80, 70, 74, 70, 205, 248, 8, 192,
-        243, 247, 38, 248, 221, 248, 8, 192, 5, 235, 136, 3, 8, 241, 78, 8,
-        195, 248, 116, 144, 204, 248, 4, 144, 69, 248, 40, 144, 59, 104, 211,
-        248, 136, 48, 26, 110, 1, 50, 26, 102, 43, 105, 0, 43, 0, 240, 165,
-        129, 219, 104, 90, 109, 1, 50, 90, 101, 159, 225, 12, 241, 4, 2, 141,
-        232, 8, 4, 56, 70, 99, 104, 205, 248, 8, 192, 7, 240, 37, 218, 80, 70,
-        97, 105, 74, 70, 242, 247, 252, 255, 221, 248, 8, 192, 187, 241, 0,
-        15, 61, 209, 8, 241, 28, 3, 5, 235, 131, 3, 90, 104, 98, 97, 195, 248,
-        4, 176, 8, 241, 78, 3, 69, 248, 35, 176, 147, 104, 146, 137, 3, 241,
-        24, 1, 204, 248, 4, 176, 97, 96, 162, 241, 24, 1, 161, 96, 148, 248,
-        41, 16, 35, 96, 226, 96, 33, 177, 3, 241, 30, 1, 30, 58, 97, 96, 162,
-        96, 148, 248, 42, 32, 58, 177, 98, 104, 132, 248, 34, 128, 2, 50, 98,
-        96, 162, 104, 2, 58, 162, 96, 26, 120, 91, 120, 66, 234, 3, 35, 163,
-        131, 99, 107, 91, 177, 163, 107, 75, 177, 147, 249, 14, 32, 97, 104,
-        138, 24, 98, 96, 147, 249, 14, 48, 162, 104, 211, 26, 163, 96, 163,
-        107, 99, 177, 27, 122, 4, 43, 4, 209, 56, 70, 33, 70, 86, 240, 98, 223,
-        4, 224, 11, 43, 2, 209, 32, 70, 13, 240, 212, 220, 187, 241, 0, 15,
-        64, 240, 89, 129, 98, 105, 147, 105, 91, 6, 24, 213, 150, 248, 37, 51,
-        0, 43, 64, 240, 50, 129, 179, 121, 43, 185, 212, 248, 128, 16, 48, 70,
-        24, 49, 78, 240, 165, 218, 99, 105, 155, 105, 24, 6, 64, 241, 37, 129,
-        215, 248, 48, 1, 41, 70, 34, 70, 33, 240, 22, 216, 59, 225, 35, 104,
-        152, 136, 217, 136, 173, 248, 16, 0, 173, 248, 18, 16, 24, 137, 89,
-        137, 173, 248, 20, 0, 173, 248, 24, 16, 152, 137, 217, 137, 173, 248,
-        26, 0, 173, 248, 28, 16, 24, 138, 89, 138, 173, 248, 32, 0, 173, 248,
-        34, 16, 152, 138, 148, 248, 41, 16, 173, 248, 36, 0, 65, 177, 25, 139,
-        88, 139, 155, 139, 173, 248, 40, 16, 173, 248, 42, 0, 173, 248, 44,
-        48, 163, 139, 19, 244, 128, 127, 3, 244, 0, 115, 4, 209, 4, 169, 97,
-        103, 35, 177, 8, 171, 5, 224, 8, 169, 97, 103, 11, 185, 6, 171, 0, 224,
-        10, 171, 97, 104, 35, 103, 147, 104, 56, 70, 195, 235, 1, 8, 6, 240,
-        44, 221, 99, 105, 153, 137, 144, 177, 7, 41, 64, 242, 215, 128, 154,
-        104, 168, 241, 6, 8, 66, 68, 200, 235, 1, 8, 154, 96, 163, 248, 12,
-        128, 226, 102, 22, 224, 0, 191, 84, 251, 135, 0, 87, 179, 3, 0, 13,
-        41, 64, 242, 196, 128, 154, 104, 168, 241, 14, 8, 66, 68, 200, 235,
-        1, 8, 154, 96, 163, 248, 12, 128, 35, 137, 226, 102, 25, 10, 65, 234,
-        3, 35, 147, 129, 163, 107, 107, 177, 27, 122, 1, 43, 10, 208, 3, 43,
-        8, 208, 56, 70, 81, 70, 42, 70, 35, 70, 86, 240, 225, 219, 0, 40, 0,
-        240, 165, 128, 163, 107, 51, 177, 27, 122, 2, 43, 3, 209, 56, 70, 33,
-        70, 86, 240, 185, 222, 150, 248, 80, 51, 155, 177, 227, 110, 155, 137,
-        26, 10, 66, 234, 3, 35, 90, 74, 27, 178, 147, 66, 10, 209, 56, 70, 97,
-        105, 6, 34, 0, 35, 245, 247, 253, 249, 24, 177, 56, 70, 49, 70, 50,
-        240, 178, 220, 98, 111, 227, 110, 17, 136, 25, 128, 80, 136, 88, 128,
-        145, 136, 153, 128, 33, 111, 8, 136, 216, 128, 72, 136, 24, 129, 137,
-        136, 89, 129, 97, 105, 148, 248, 34, 224, 200, 137, 14, 240, 7, 14,
-        32, 240, 7, 0, 78, 234, 0, 0, 200, 129, 17, 120, 201, 7, 11, 213, 57,
-        104, 209, 248, 136, 16, 209, 248, 208, 1, 1, 48, 193, 248, 208, 1, 241,
-        104, 136, 109, 1, 48, 136, 101, 150, 248, 89, 16, 89, 177, 149, 248,
-        36, 16, 200, 6, 7, 212, 153, 137, 8, 10, 64, 234, 1, 33, 56, 72, 9,
-        178, 129, 66, 76, 209, 215, 248, 156, 17, 113, 92, 113, 177, 149, 248,
-        36, 16, 201, 6, 10, 212, 155, 137, 25, 10, 65, 234, 3, 35, 49, 73, 27,
-        178, 139, 66, 2, 208, 38, 57, 139, 66, 57, 209, 179, 121, 235, 185,
-        146, 248, 0, 128, 24, 240, 1, 8, 24, 209, 214, 248, 4, 49, 48, 70, 147,
-        248, 116, 32, 1, 50, 131, 248, 116, 32, 212, 248, 128, 16, 24, 49, 78,
-        240, 161, 217, 97, 105, 80, 70, 240, 247, 45, 253, 1, 33, 3, 70, 66,
-        70, 48, 70, 205, 248, 0, 128, 78, 240, 1, 218, 213, 248, 164, 49, 219,
-        7, 11, 213, 148, 248, 41, 48, 67, 185, 227, 110, 155, 137, 26, 10, 66,
-        234, 3, 35, 23, 74, 27, 178, 147, 66, 9, 209, 99, 105, 148, 248, 41,
-        32, 0, 147, 56, 70, 41, 70, 99, 111, 255, 247, 132, 248, 29, 224, 59,
-        104, 90, 107, 170, 177, 97, 105, 16, 72, 202, 137, 211, 248, 140, 48,
-        2, 240, 7, 2, 130, 92, 13, 72, 133, 92, 80, 70, 12, 53, 3, 235, 197,
-        5, 107, 104, 174, 104, 1, 51, 107, 96, 240, 247, 244, 252, 128, 25,
-        168, 96, 80, 70, 97, 105, 0, 34, 242, 247, 77, 254, 13, 176, 189, 232,
-        240, 143, 142, 136, 255, 255, 180, 136, 255, 255, 138, 182, 135, 0,
-        84, 194, 135, 0, 45, 233, 240, 79, 0, 38, 177, 176, 46, 150, 47, 150,
-        178, 248, 22, 160, 152, 70, 18, 147, 155, 137, 4, 70, 33, 43, 15, 70,
-        21, 70, 27, 150, 141, 248, 86, 96, 22, 150, 141, 248, 95, 96, 141, 248,
-        92, 96, 141, 248, 148, 96, 141, 248, 96, 96, 141, 248, 99, 96, 19, 146,
-        45, 146, 36, 150, 1, 216, 3, 104, 81, 224, 216, 248, 8, 176, 16, 70,
-        89, 70, 30, 240, 239, 253, 35, 106, 9, 144, 200, 248, 44, 0, 9, 153,
-        32, 70, 211, 248, 16, 144, 245, 247, 239, 249, 1, 70, 72, 70, 19, 240,
-        155, 251, 11, 241, 6, 3, 13, 147, 187, 248, 6, 48, 26, 70, 173, 248,
-        80, 48, 2, 240, 12, 0, 25, 70, 2, 240, 240, 3, 2, 244, 64, 114, 162,
-        245, 64, 126, 128, 8, 27, 9, 222, 241, 0, 2, 66, 235, 14, 2, 2, 40,
-        8, 191, 222, 8, 246, 178, 173, 248, 82, 0, 173, 248, 84, 48, 141, 248,
-        93, 32, 141, 248, 94, 96, 168, 136, 0, 240, 3, 0, 2, 40, 4, 209, 9,
-        178, 0, 41, 1, 218, 219, 8, 0, 224, 0, 35, 217, 178, 141, 248, 95, 16,
-        0, 42, 20, 191, 40, 35, 34, 35, 6, 177, 2, 51, 1, 177, 4, 51, 18, 153,
-        137, 137, 153, 66, 6, 210, 35, 104, 211, 248, 136, 48, 90, 110, 1, 50,
-        90, 102, 206, 227, 155, 248, 10, 48, 3, 240, 1, 3, 141, 248, 96, 48,
-        11, 241, 30, 3, 14, 147, 18, 177, 11, 241, 36, 3, 14, 147, 0, 35, 141,
-        248, 97, 48, 78, 177, 14, 155, 90, 120, 27, 120, 67, 234, 2, 34, 219,
-        9, 10, 146, 141, 248, 97, 48, 0, 224, 10, 150, 65, 70, 56, 70, 240,
-        247, 71, 252, 18, 153, 11, 144, 139, 104, 56, 70, 6, 51, 139, 96, 139,
-        137, 6, 59, 139, 129, 157, 248, 97, 48, 27, 177, 238, 243, 71, 246,
-        1, 70, 56, 70, 4, 34, 242, 243, 228, 244, 26, 244, 64, 79, 157, 248,
-        93, 32, 12, 191, 0, 33, 1, 33, 0, 35, 8, 145, 47, 147, 2, 187, 189,
-        248, 80, 48, 13, 153, 19, 244, 64, 127, 9, 209, 1, 241, 16, 6, 32, 70,
-        10, 49, 8, 154, 47, 171, 85, 240, 43, 219, 46, 144, 5, 224, 216, 5,
-        1, 213, 14, 29, 1, 224, 1, 241, 10, 6, 47, 155, 35, 185, 32, 70, 49,
-        70, 12, 240, 164, 252, 47, 144, 47, 155, 0, 51, 24, 191, 1, 35, 141,
-        248, 100, 48, 47, 155, 19, 241, 0, 9, 157, 248, 96, 48, 24, 191, 79,
-        240, 1, 9, 67, 185, 13, 153, 32, 70, 4, 49, 12, 240, 101, 252, 6, 28,
-        24, 191, 1, 38, 0, 224, 0, 38, 212, 248, 8, 50, 27, 185, 35, 104, 147,
-        248, 44, 48, 107, 179, 35, 104, 147, 248, 63, 32, 0, 42, 8, 191, 79,
-        240, 0, 9, 126, 187, 189, 248, 80, 32, 210, 5, 6, 212, 157, 248, 96,
-        32, 26, 177, 185, 241, 0, 15, 64, 240, 71, 131, 157, 248, 93, 32, 18,
-        177, 157, 248, 96, 32, 58, 187, 147, 248, 44, 48, 0, 43, 0, 240, 26,
-        131, 185, 241, 0, 15, 4, 209, 32, 70, 41, 70, 67, 240, 251, 216, 17,
-        227, 47, 155, 155, 121, 0, 43, 64, 240, 13, 131, 79, 240, 1, 10, 20,
-        224, 157, 248, 96, 48, 27, 185, 0, 46, 0, 240, 4, 131, 2, 224, 0, 46,
-        0, 240, 34, 131, 157, 248, 93, 48, 43, 185, 185, 241, 0, 15, 0, 240,
-        249, 130, 154, 70, 1, 224, 79, 240, 0, 10, 157, 248, 94, 48, 67, 179,
-        157, 248, 97, 48, 131, 177, 47, 155, 35, 177, 147, 248, 37, 51, 0, 43,
-        64, 240, 232, 130, 148, 248, 18, 50, 0, 43, 0, 240, 227, 130, 18, 155,
-        154, 105, 66, 240, 64, 2, 154, 97, 10, 154, 111, 73, 2, 240, 7, 3, 110,
-        74, 141, 248, 86, 48, 210, 92, 141, 248, 148, 48, 138, 92, 10, 153,
-        22, 146, 1, 240, 16, 2, 18, 17, 141, 248, 92, 32, 14, 154, 2, 50, 14,
-        146, 18, 155, 217, 137, 152, 137, 17, 244, 0, 82, 24, 191, 179, 248,
-        80, 32, 14, 153, 155, 104, 130, 24, 195, 235, 1, 9, 16, 146, 65, 70,
-        201, 235, 2, 2, 56, 70, 15, 146, 240, 247, 104, 251, 13, 154, 201, 235,
-        0, 0, 17, 144, 147, 125, 209, 125, 67, 234, 1, 35, 173, 248, 178, 48,
-        186, 241, 0, 15, 92, 209, 46, 171, 0, 147, 16, 155, 32, 70, 1, 147,
-        47, 169, 43, 70, 253, 247, 104, 254, 0, 40, 64, 240, 155, 130, 189,
-        226, 47, 153, 0, 41, 0, 240, 150, 130, 13, 154, 32, 70, 10, 50, 8, 155,
-        33, 240, 48, 254, 46, 144, 40, 187, 47, 155, 27, 124, 19, 179, 180,
-        70, 209, 70, 212, 248, 104, 34, 82, 248, 9, 96, 174, 177, 178, 121,
-        154, 185, 50, 122, 138, 177, 214, 248, 204, 32, 19, 2, 13, 212, 13,
-        152, 214, 248, 244, 16, 16, 48, 6, 34, 205, 248, 28, 192, 236, 247,
-        128, 249, 221, 248, 28, 192, 8, 185, 50, 124, 138, 185, 9, 241, 4, 9,
-        185, 241, 32, 15, 223, 209, 102, 70, 46, 155, 155, 185, 13, 154, 47,
-        153, 32, 70, 10, 50, 8, 155, 33, 240, 178, 254, 1, 70, 46, 144, 48,
-        185, 35, 104, 211, 248, 136, 48, 218, 110, 1, 50, 218, 102, 84, 226,
-        32, 70, 85, 240, 0, 217, 47, 155, 211, 248, 204, 48, 195, 243, 192,
-        83, 141, 248, 99, 48, 115, 226, 189, 248, 80, 48, 19, 244, 64, 127,
-        4, 209, 47, 155, 27, 124, 0, 43, 58, 209, 6, 224, 157, 248, 93, 48,
-        27, 185, 47, 155, 27, 124, 0, 43, 50, 208, 32, 70, 47, 153, 10, 50,
-        8, 155, 33, 240, 134, 254, 46, 144, 24, 185, 47, 226, 46, 155, 27, 105,
-        47, 147, 30, 177, 35, 104, 154, 106, 46, 155, 154, 98, 47, 155, 211,
-        248, 252, 32, 8, 146, 186, 241, 0, 15, 38, 209, 157, 248, 93, 32, 26,
-        187, 157, 248, 96, 32, 26, 177, 189, 248, 80, 32, 208, 5, 16, 212, 153,
-        121, 189, 248, 80, 32, 17, 177, 209, 5, 10, 213, 21, 224, 27, 124, 2,
-        244, 64, 114, 0, 43, 20, 191, 79, 244, 0, 115, 0, 35, 154, 66, 11, 208,
-        35, 104, 211, 248, 136, 48, 154, 109, 1, 50, 154, 101, 254, 225, 0,
-        191, 84, 194, 135, 0, 138, 182, 135, 0, 32, 70, 41, 70, 66, 240, 222,
-        223, 0, 35, 136, 248, 35, 0, 129, 70, 47, 152, 136, 248, 34, 48, 131,
-        121, 195, 185, 157, 248, 99, 48, 171, 185, 185, 241, 0, 15, 18, 208,
-        73, 70, 149, 249, 29, 32, 51, 70, 67, 240, 41, 216, 41, 70, 212, 248,
-        172, 38, 32, 70, 66, 240, 103, 223, 50, 70, 1, 70, 136, 248, 34, 0,
-        47, 152, 67, 240, 106, 216, 46, 155, 147, 248, 162, 33, 42, 185, 157,
-        248, 99, 32, 18, 185, 211, 248, 4, 33, 82, 179, 185, 241, 0, 15, 39,
-        208, 211, 248, 0, 17, 211, 248, 252, 32, 66, 248, 33, 144, 212, 248,
-        116, 36, 81, 121, 17, 240, 1, 0, 211, 248, 0, 17, 24, 191, 149, 249,
-        31, 0, 3, 235, 129, 1, 193, 248, 172, 1, 82, 121, 82, 16, 18, 240, 1,
-        1, 211, 248, 0, 33, 24, 191, 149, 249, 32, 16, 3, 235, 130, 2, 194,
-        248, 204, 17, 211, 248, 0, 33, 1, 50, 2, 240, 7, 2, 195, 248, 0, 33,
-        157, 248, 93, 32, 47, 155, 18, 177, 179, 248, 90, 48, 84, 224, 154,
-        121, 50, 185, 211, 248, 72, 35, 0, 42, 67, 208, 146, 123, 210, 7, 64,
-        213, 46, 153, 177, 248, 68, 32, 173, 248, 156, 32, 74, 104, 80, 6, 43,
-        213, 157, 248, 94, 0, 64, 179, 189, 248, 178, 0, 0, 7, 36, 209, 145,
-        248, 231, 0, 8, 179, 8, 125, 192, 7, 30, 212, 189, 248, 80, 0, 192,
-        4, 26, 213, 144, 3, 24, 213, 145, 248, 217, 0, 22, 154, 80, 250, 2,
-        242, 210, 7, 17, 213, 211, 248, 72, 51, 75, 177, 155, 123, 216, 7, 6,
-        213, 157, 248, 92, 48, 27, 177, 32, 70, 7, 240, 53, 252, 32, 177, 32,
-        70, 46, 153, 22, 154, 36, 240, 55, 222, 189, 248, 80, 48, 19, 244, 128,
-        95, 46, 155, 90, 104, 20, 191, 66, 244, 0, 50, 34, 244, 0, 50, 90, 96,
-        12, 224, 46, 154, 178, 248, 68, 32, 173, 248, 156, 32, 26, 124, 42,
-        185, 179, 248, 90, 48, 218, 7, 1, 213, 173, 248, 156, 48, 47, 155, 154,
-        121, 82, 185, 27, 124, 67, 177, 157, 248, 96, 48, 43, 185, 186, 241,
-        0, 15, 2, 209, 8, 155, 131, 248, 6, 160, 157, 248, 96, 48, 251, 177,
-        47, 153, 139, 121, 0, 43, 64, 240, 43, 129, 11, 124, 67, 177, 13, 152,
-        194, 49, 16, 48, 6, 34, 236, 247, 48, 248, 0, 40, 0, 240, 32, 129, 13,
-        152, 4, 48, 240, 247, 110, 250, 80, 185, 47, 152, 144, 248, 69, 48,
-        51, 185, 13, 153, 4, 49, 49, 240, 237, 220, 0, 40, 64, 240, 16, 129,
-        9, 153, 189, 248, 178, 32, 13, 155, 200, 248, 44, 16, 168, 248, 28,
-        32, 27, 124, 46, 153, 19, 240, 1, 15, 11, 158, 79, 240, 0, 7, 7, 208,
-        209, 248, 100, 49, 1, 51, 193, 248, 100, 49, 241, 233, 102, 35, 6, 224,
-        209, 248, 96, 49, 1, 51, 193, 248, 96, 49, 241, 233, 100, 35, 146, 25,
-        67, 235, 7, 3, 193, 233, 0, 35, 157, 248, 96, 48, 155, 185, 155, 248,
-        0, 48, 155, 248, 1, 32, 26, 67, 155, 248, 2, 48, 19, 67, 10, 208, 216,
-        248, 44, 16, 212, 248, 96, 1, 106, 138, 33, 240, 191, 253, 46, 155,
-        9, 153, 195, 248, 108, 17, 155, 249, 3, 48, 0, 43, 7, 218, 35, 104,
-        211, 248, 136, 48, 211, 248, 168, 34, 1, 50, 195, 248, 168, 34, 155,
-        248, 3, 48, 19, 240, 48, 15, 7, 208, 35, 104, 211, 248, 136, 48, 211,
-        248, 176, 34, 1, 50, 195, 248, 176, 34, 157, 248, 96, 48, 0, 43, 113,
-        209, 216, 248, 44, 0, 35, 104, 16, 240, 64, 127, 211, 248, 136, 96,
-        1, 209, 192, 178, 1, 224, 30, 240, 128, 249, 22, 40, 58, 208, 12, 216,
-        11, 40, 37, 208, 4, 216, 2, 40, 22, 208, 4, 40, 91, 209, 25, 224, 12,
-        40, 35, 208, 18, 40, 86, 209, 38, 224, 48, 40, 60, 208, 4, 216, 24,
-        40, 45, 208, 36, 40, 78, 209, 48, 224, 96, 40, 64, 208, 108, 40, 68,
-        208, 72, 40, 71, 209, 53, 224, 214, 248, 56, 50, 1, 51, 198, 248, 56,
-        50, 64, 224, 214, 248, 60, 50, 1, 51, 198, 248, 60, 50, 58, 224, 214,
-        248, 64, 50, 1, 51, 198, 248, 64, 50, 52, 224, 214, 248, 68, 50, 1,
-        51, 198, 248, 68, 50, 46, 224, 214, 248, 72, 50, 1, 51, 198, 248, 72,
-        50, 40, 224, 214, 248, 76, 50, 1, 51, 198, 248, 76, 50, 34, 224, 214,
-        248, 80, 50, 1, 51, 198, 248, 80, 50, 28, 224, 214, 248, 84, 50, 1,
-        51, 198, 248, 84, 50, 22, 224, 214, 248, 88, 50, 1, 51, 198, 248, 88,
-        50, 16, 224, 214, 248, 92, 50, 1, 51, 198, 248, 92, 50, 10, 224, 214,
-        248, 96, 50, 1, 51, 198, 248, 96, 50, 4, 224, 214, 248, 100, 50, 1,
-        51, 198, 248, 100, 50, 157, 248, 96, 48, 27, 177, 47, 152, 13, 169,
-        245, 247, 56, 248, 157, 248, 96, 48, 51, 187, 216, 248, 44, 0, 16, 240,
-        64, 127, 1, 208, 30, 240, 9, 249, 0, 240, 127, 0, 2, 40, 10, 208, 4,
-        40, 8, 208, 11, 40, 6, 208, 160, 241, 22, 14, 222, 241, 0, 0, 64, 235,
-        14, 0, 0, 224, 1, 32, 0, 34, 233, 136, 149, 249, 28, 48, 0, 146, 1,
-        144, 168, 136, 9, 10, 128, 11, 2, 144, 47, 152, 3, 146, 4, 144, 32,
-        70, 36, 240, 47, 250, 46, 153, 75, 104, 88, 3, 11, 213, 157, 248, 96,
-        48, 67, 185, 186, 241, 0, 15, 5, 209, 212, 248, 56, 1, 13, 170, 5, 240,
-        150, 248, 51, 224, 32, 70, 13, 170, 255, 247, 109, 248, 46, 224, 35,
-        104, 90, 107, 194, 177, 157, 248, 96, 32, 170, 185, 18, 153, 21, 72,
-        202, 137, 211, 248, 140, 48, 2, 240, 7, 2, 130, 92, 18, 72, 132, 92,
-        56, 70, 12, 52, 3, 235, 196, 4, 99, 104, 165, 104, 1, 51, 99, 96, 240,
-        247, 154, 248, 64, 25, 160, 96, 56, 70, 18, 153, 0, 34, 242, 247, 243,
-        249, 12, 224, 178, 70, 230, 228, 189, 248, 80, 48, 19, 244, 64, 127,
-        63, 244, 60, 173, 47, 155, 0, 43, 127, 244, 165, 173, 160, 229, 49,
-        176, 189, 232, 240, 143, 138, 182, 135, 0, 84, 194, 135, 0, 208, 248,
-        96, 54, 0, 34, 45, 233, 240, 71, 142, 104, 71, 104, 26, 99, 208, 248,
-        200, 53, 13, 70, 242, 24, 138, 96, 137, 137, 4, 70, 203, 26, 155, 178,
-        171, 129, 49, 138, 73, 7, 7, 213, 1, 43, 1, 216, 3, 104, 79, 224, 2,
-        50, 2, 59, 170, 96, 171, 129, 35, 106, 181, 248, 14, 144, 26, 137, 25,
-        244, 0, 89, 24, 191, 181, 248, 80, 144, 12, 42, 213, 248, 8, 128, 181,
-        248, 12, 160, 13, 216, 179, 249, 8, 48, 79, 244, 40, 2, 154, 64, 7,
-        213, 179, 136, 217, 5, 4, 213, 35, 244, 128, 115, 27, 4, 27, 12, 179,
-        128, 179, 136, 19, 244, 68, 127, 64, 240, 146, 128, 212, 248, 8, 50,
-        195, 177, 212, 248, 220, 6, 72, 240, 128, 217, 152, 177, 115, 138, 32,
-        70, 19, 240, 1, 3, 49, 70, 42, 70, 2, 208, 9, 240, 130, 216, 1, 224,
-        247, 247, 107, 249, 212, 248, 8, 50, 35, 177, 35, 104, 147, 248, 63,
-        48, 0, 43, 124, 208, 51, 138, 218, 7, 114, 212, 209, 68, 185, 241, 7,
-        15, 5, 217, 184, 248, 6, 144, 25, 244, 0, 111, 7, 209, 14, 224, 35,
-        104, 211, 248, 136, 48, 90, 110, 1, 50, 90, 102, 97, 224, 35, 104, 211,
-        248, 136, 48, 211, 248, 148, 33, 1, 50, 195, 248, 148, 33, 182, 248,
-        18, 160, 26, 240, 1, 10, 33, 209, 9, 240, 12, 3, 155, 16, 2, 43, 0,
-        208, 187, 185, 8, 241, 16, 0, 240, 247, 162, 248, 24, 185, 152, 248,
-        16, 48, 219, 7, 6, 213, 35, 104, 211, 248, 136, 48, 90, 111, 1, 50,
-        90, 103, 62, 224, 35, 104, 211, 248, 136, 48, 211, 248, 204, 33, 1,
-        50, 195, 248, 204, 33, 212, 248, 48, 1, 5, 240, 206, 251, 171, 105,
-        19, 240, 128, 3, 21, 209, 186, 241, 0, 15, 11, 208, 148, 248, 18, 34,
-        0, 42, 39, 208, 212, 248, 48, 1, 49, 70, 42, 70, 189, 232, 240, 71,
-        5, 240, 205, 187, 9, 240, 12, 9, 79, 234, 169, 9, 185, 241, 2, 15, 7,
-        209, 32, 70, 57, 70, 50, 70, 43, 70, 189, 232, 240, 71, 255, 247, 220,
-        186, 185, 241, 1, 15, 7, 216, 32, 70, 57, 70, 50, 70, 43, 70, 189, 232,
-        240, 71, 9, 240, 99, 159, 35, 104, 211, 248, 136, 48, 26, 111, 1, 50,
-        26, 103, 56, 70, 41, 70, 0, 34, 189, 232, 240, 71, 242, 247, 6, 185,
-        189, 232, 240, 135, 56, 181, 5, 70, 0, 36, 213, 248, 104, 50, 83, 248,
-        36, 32, 74, 177, 210, 248, 4, 49, 40, 70, 25, 120, 43, 25, 131, 248,
-        43, 24, 0, 33, 251, 247, 206, 252, 1, 52, 8, 44, 237, 209, 56, 189,
-        56, 181, 5, 70, 0, 36, 213, 248, 104, 50, 83, 248, 36, 32, 42, 177,
-        43, 25, 40, 70, 147, 248, 43, 24, 251, 247, 188, 252, 1, 52, 8, 44,
-        241, 209, 56, 189, 45, 233, 240, 67, 0, 35, 133, 176, 1, 147, 13, 155,
-        5, 70, 3, 43, 22, 70, 14, 159, 221, 248, 60, 128, 4, 104, 4, 217, 1,
-        168, 12, 153, 4, 34, 235, 247, 213, 253, 221, 248, 4, 144, 3, 46, 0,
-        242, 129, 128, 223, 232, 6, 240, 2, 18, 58, 64, 4, 53, 40, 70, 237,
-        243, 212, 242, 1, 48, 128, 69, 108, 217, 56, 70, 41, 70, 8, 241, 255,
-        50, 237, 243, 247, 242, 45, 224, 1, 54, 0, 224, 0, 38, 70, 69, 2, 218,
-        187, 93, 0, 43, 247, 209, 3, 46, 94, 220, 0, 33, 4, 34, 3, 168, 237,
-        243, 7, 242, 3, 168, 57, 70, 50, 70, 237, 243, 226, 242, 0, 46, 85,
-        208, 32, 70, 3, 169, 2, 170, 56, 240, 169, 221, 6, 70, 0, 40, 77, 209,
-        32, 70, 12, 240, 250, 254, 0, 40, 75, 208, 40, 29, 3, 169, 3, 34, 237,
-        243, 206, 242, 48, 70, 73, 224, 35, 104, 147, 248, 175, 48, 59, 96,
-        0, 32, 67, 224, 32, 70, 12, 240, 232, 254, 0, 40, 57, 208, 212, 248,
-        104, 18, 0, 35, 202, 88, 34, 177, 144, 121, 16, 185, 18, 122, 0, 42,
-        50, 209, 4, 51, 32, 43, 245, 209, 51, 224, 131, 121, 19, 177, 4, 33,
-        83, 240, 80, 218, 25, 241, 0, 3, 34, 104, 24, 191, 1, 35, 146, 248,
-        175, 128, 111, 122, 130, 248, 175, 48, 107, 114, 43, 177, 212, 248,
-        92, 1, 41, 29, 57, 240, 249, 218, 3, 224, 212, 248, 140, 1, 57, 240,
-        208, 222, 32, 177, 35, 104, 131, 248, 175, 128, 111, 114, 15, 224, 40,
-        114, 13, 224, 111, 240, 13, 0, 10, 224, 111, 240, 14, 0, 7, 224, 111,
-        240, 1, 0, 4, 224, 111, 240, 22, 0, 1, 224, 111, 240, 27, 0, 5, 176,
-        189, 232, 240, 131, 212, 248, 104, 1, 0, 40, 199, 209, 203, 231, 45,
-        233, 255, 65, 145, 232, 12, 0, 82, 104, 4, 104, 210, 248, 4, 128, 0,
-        34, 141, 248, 15, 32, 34, 104, 14, 70, 146, 248, 173, 32, 0, 42, 81,
-        208, 211, 248, 204, 112, 23, 244, 128, 71, 76, 209, 96, 104, 57, 70,
-        29, 240, 79, 250, 5, 70, 144, 177, 35, 106, 184, 248, 50, 16, 0, 151,
-        24, 105, 13, 241, 15, 2, 43, 70, 18, 240, 64, 249, 40, 70, 29, 240,
-        48, 251, 41, 70, 199, 178, 96, 104, 29, 240, 73, 250, 0, 224, 7, 70,
-        35, 106, 24, 105, 20, 240, 237, 249, 5, 70, 212, 248, 92, 1, 56, 240,
-        247, 219, 16, 240, 1, 15, 157, 248, 15, 48, 14, 208, 34, 106, 4, 51,
-        146, 248, 4, 33, 211, 24, 237, 24, 109, 178, 0, 45, 184, 191, 3, 53,
-        173, 16, 141, 248, 12, 80, 191, 24, 8, 224, 4, 51, 237, 24, 109, 178,
-        0, 45, 184, 191, 3, 53, 173, 16, 141, 248, 12, 80, 127, 178, 0, 47,
-        184, 191, 3, 55, 191, 16, 33, 32, 3, 169, 2, 34, 179, 105, 141, 248,
-        13, 112, 237, 243, 77, 246, 0, 32, 4, 176, 189, 232, 240, 129, 16, 181,
-        68, 104, 12, 25, 224, 104, 24, 177, 241, 247, 149, 255, 0, 35, 227,
-        96, 32, 70, 0, 33, 20, 34, 189, 232, 16, 64, 237, 243, 35, 177, 64,
-        104, 8, 181, 8, 24, 20, 34, 0, 33, 237, 243, 28, 241, 0, 32, 8, 189,
-        56, 181, 3, 104, 76, 104, 27, 104, 147, 248, 176, 48, 91, 177, 69, 104,
-        96, 89, 72, 177, 32, 70, 107, 33, 49, 240, 234, 221, 96, 81, 24, 177,
-        64, 120, 2, 48, 56, 189, 24, 70, 56, 189, 0, 0, 248, 181, 20, 70, 57,
-        179, 50, 179, 13, 125, 21, 240, 1, 5, 34, 209, 147, 127, 35, 240, 15,
-        3, 67, 240, 12, 3, 147, 119, 6, 104, 142, 25, 1, 224, 37, 70, 60, 70,
-        12, 75, 226, 138, 27, 104, 83, 248, 34, 112, 0, 35, 227, 130, 243, 137,
-        1, 51, 243, 129, 227, 137, 3, 240, 7, 3, 4, 59, 3, 43, 2, 216, 241,
-        243, 231, 242, 112, 97, 13, 177, 35, 136, 235, 130, 0, 47, 229, 209,
-        248, 189, 32, 7, 0, 0, 45, 233, 248, 79, 177, 248, 90, 160, 131, 70,
-        80, 70, 13, 70, 20, 70, 152, 70, 15, 109, 238, 243, 188, 245, 0, 40,
-        0, 240, 197, 128, 64, 242, 55, 19, 59, 64, 0, 43, 0, 240, 191, 128,
-        213, 248, 244, 48, 147, 249, 52, 48, 0, 43, 56, 209, 184, 241, 23, 15,
-        64, 243, 181, 128, 24, 34, 32, 70, 91, 73, 235, 247, 90, 252, 120, 7,
-        11, 213, 213, 248, 244, 48, 147, 248, 112, 32, 4, 42, 3, 208, 147, 248,
-        132, 48, 4, 43, 1, 209, 4, 35, 20, 224, 185, 7, 1, 213, 2, 35, 16, 224,
-        171, 110, 90, 28, 12, 208, 5, 235, 131, 3, 219, 110, 67, 177, 27, 122,
-        1, 43, 6, 208, 3, 43, 1, 209, 5, 35, 2, 224, 4, 43, 0, 208, 1, 35, 99,
-        116, 227, 114, 0, 35, 227, 117, 41, 70, 88, 70, 4, 241, 24, 2, 2, 35,
-        29, 240, 134, 217, 22, 37, 125, 224, 184, 241, 13, 15, 124, 221, 221,
-        35, 32, 70, 3, 34, 0, 248, 2, 59, 62, 73, 235, 247, 31, 252, 79, 240,
-        1, 9, 0, 35, 227, 113, 3, 34, 58, 73, 132, 248, 5, 144, 132, 248, 6,
-        144, 4, 241, 8, 0, 235, 247, 17, 252, 88, 70, 41, 70, 26, 240, 41, 216,
-        23, 240, 4, 3, 168, 241, 14, 6, 224, 114, 13, 208, 3, 46, 90, 221, 4,
-        241, 14, 0, 47, 73, 3, 34, 235, 247, 255, 251, 4, 35, 99, 116, 168,
-        241, 18, 6, 16, 37, 1, 224, 153, 70, 12, 37, 184, 7, 18, 213, 3, 46,
-        72, 221, 79, 234, 137, 7, 224, 25, 14, 48, 37, 73, 3, 34, 235, 247,
-        235, 251, 231, 25, 2, 35, 9, 241, 1, 9, 123, 116, 31, 250, 137, 249,
-        4, 53, 4, 62, 0, 35, 1, 46, 132, 248, 12, 144, 99, 115, 49, 221, 4,
-        241, 12, 3, 3, 235, 137, 9, 179, 30, 26, 240, 2, 2, 9, 241, 2, 7, 1,
-        209, 2, 53, 10, 224, 3, 43, 35, 221, 3, 34, 184, 28, 19, 73, 235, 247,
-        201, 251, 1, 34, 122, 113, 6, 53, 179, 31, 26, 240, 4, 15, 22, 70, 15,
-        208, 3, 43, 20, 221, 7, 235, 130, 8, 8, 241, 2, 0, 11, 73, 3, 34, 235,
-        247, 183, 251, 1, 54, 2, 35, 136, 248, 5, 48, 182, 178, 4, 53, 0, 35,
-        137, 248, 2, 96, 123, 112, 101, 112, 2, 53, 100, 25, 32, 70, 189, 232,
-        248, 143, 0, 191, 32, 220, 3, 0, 110, 179, 3, 0, 45, 233, 240, 79, 177,
-        248, 90, 176, 133, 176, 2, 144, 88, 70, 1, 145, 20, 70, 30, 70, 209,
-        248, 80, 160, 239, 247, 236, 255, 0, 40, 0, 240, 181, 128, 64, 242,
-        55, 19, 10, 234, 3, 3, 0, 43, 0, 240, 174, 128, 9, 46, 64, 243, 171,
-        128, 48, 35, 35, 112, 1, 35, 163, 112, 3, 34, 0, 35, 187, 245, 0, 95,
-        166, 241, 10, 7, 227, 112, 81, 73, 4, 241, 4, 0, 4, 209, 235, 247, 118,
-        251, 7, 35, 227, 113, 6, 224, 235, 247, 113, 251, 2, 152, 1, 153, 25,
-        240, 137, 223, 224, 113, 26, 240, 4, 5, 16, 208, 3, 47, 64, 243, 138,
-        128, 4, 241, 10, 0, 69, 73, 3, 34, 235, 247, 96, 251, 4, 35, 99, 115,
-        166, 241, 14, 7, 1, 37, 79, 240, 12, 9, 1, 224, 79, 240, 8, 9, 26, 240,
-        2, 15, 16, 208, 3, 47, 116, 221, 174, 0, 160, 25, 10, 48, 58, 73, 3,
-        34, 235, 247, 74, 251, 166, 25, 2, 35, 1, 53, 115, 115, 173, 178, 9,
-        241, 4, 9, 4, 63, 0, 35, 1, 47, 37, 114, 99, 114, 96, 221, 4, 241, 8,
-        2, 2, 235, 133, 2, 3, 146, 2, 241, 2, 8, 190, 30, 27, 240, 64, 2, 9,
-        241, 2, 5, 17, 208, 26, 244, 128, 111, 16, 209, 3, 46, 78, 221, 8, 241,
-        2, 0, 40, 73, 3, 34, 235, 247, 37, 251, 1, 35, 136, 248, 5, 48, 9, 241,
-        6, 5, 190, 31, 1, 224, 23, 70, 0, 224, 31, 70, 27, 240, 128, 15, 19,
-        208, 26, 244, 128, 111, 16, 209, 3, 46, 54, 221, 8, 235, 135, 9, 9,
-        241, 2, 0, 27, 73, 3, 34, 235, 247, 11, 251, 1, 55, 2, 35, 137, 248,
-        5, 48, 191, 178, 4, 53, 4, 62, 27, 244, 0, 95, 16, 208, 3, 46, 34, 221,
-        8, 235, 135, 9, 9, 241, 2, 0, 17, 73, 3, 34, 235, 247, 247, 250, 1,
-        55, 7, 35, 137, 248, 5, 48, 191, 178, 4, 53, 4, 62, 3, 155, 159, 112,
-        0, 35, 1, 46, 136, 248, 1, 48, 12, 221, 8, 235, 135, 8, 2, 35, 2, 152,
-        1, 153, 8, 241, 2, 2, 29, 240, 58, 216, 171, 28, 4, 53, 99, 112, 100,
-        25, 32, 70, 5, 176, 189, 232, 240, 143, 118, 179, 3, 0, 45, 233, 247,
-        79, 31, 70, 146, 248, 1, 128, 20, 70, 186, 104, 177, 248, 90, 48, 34,
-        244, 192, 98, 184, 241, 1, 15, 6, 70, 13, 70, 1, 147, 186, 96, 64, 242,
-        149, 128, 148, 248, 3, 192, 162, 120, 66, 234, 12, 34, 1, 42, 64, 240,
-        141, 128, 168, 241, 2, 2, 210, 178, 3, 42, 13, 216, 91, 6, 64, 241,
-        133, 128, 4, 34, 29, 240, 134, 218, 0, 40, 127, 208, 64, 35, 167, 248,
-        68, 48, 4, 35, 187, 100, 119, 224, 4, 241, 4, 9, 72, 70, 61, 73, 3,
-        34, 235, 247, 142, 250, 130, 70, 0, 40, 111, 209, 48, 70, 41, 70, 226,
-        121, 29, 240, 111, 218, 0, 40, 104, 208, 7, 241, 72, 11, 72, 70, 89,
-        70, 238, 243, 155, 243, 168, 241, 6, 3, 219, 178, 1, 43, 16, 216, 1,
-        155, 90, 6, 90, 213, 48, 70, 41, 70, 4, 34, 29, 240, 90, 218, 0, 40,
-        83, 208, 64, 35, 167, 248, 68, 48, 4, 35, 187, 100, 80, 70, 77, 224,
-        98, 122, 35, 122, 67, 234, 2, 35, 1, 43, 70, 209, 4, 241, 10, 9, 72,
-        70, 35, 73, 3, 34, 235, 247, 91, 250, 0, 40, 61, 209, 48, 70, 41, 70,
-        98, 123, 29, 240, 61, 218, 0, 40, 54, 208, 168, 241, 12, 8, 72, 70,
-        89, 70, 95, 250, 136, 248, 238, 243, 103, 243, 184, 241, 1, 15, 4, 216,
-        1, 155, 91, 6, 40, 213, 64, 35, 34, 224, 226, 123, 163, 123, 67, 234,
-        2, 35, 1, 43, 32, 209, 4, 241, 16, 0, 17, 73, 3, 34, 235, 247, 54, 250,
-        200, 185, 227, 124, 1, 43, 3, 209, 1, 155, 19, 240, 64, 15, 4, 224,
-        2, 43, 16, 209, 1, 155, 19, 240, 128, 15, 12, 208, 4, 241, 16, 0, 1,
-        169, 0, 34, 239, 247, 243, 253, 40, 177, 189, 248, 4, 48, 167, 248,
-        68, 48, 0, 32, 0, 224, 12, 32, 189, 232, 254, 143, 0, 191, 118, 179,
-        3, 0, 45, 233, 240, 71, 221, 248, 32, 144, 6, 70, 12, 70, 23, 70, 9,
-        157, 185, 241, 0, 15, 21, 208, 35, 185, 177, 248, 90, 128, 200, 243,
-        0, 24, 1, 224, 79, 240, 1, 8, 184, 241, 0, 15, 5, 208, 48, 70, 73, 70,
-        22, 240, 248, 216, 79, 240, 1, 8, 72, 70, 41, 70, 237, 243, 22, 241,
-        12, 224, 41, 70, 17, 72, 237, 243, 17, 241, 48, 70, 33, 70, 7, 241,
-        131, 2, 43, 29, 28, 240, 150, 222, 79, 240, 1, 8, 180, 248, 90, 0, 239,
-        247, 50, 254, 128, 177, 184, 241, 0, 15, 13, 208, 0, 35, 8, 147, 180,
-        248, 90, 48, 214, 248, 200, 6, 9, 147, 33, 70, 58, 70, 43, 70, 189,
-        232, 240, 71, 28, 240, 207, 188, 189, 232, 240, 135, 74, 195, 135, 0,
-        144, 248, 116, 2, 0, 240, 2, 0, 208, 241, 1, 0, 56, 191, 0, 32, 112,
-        71, 48, 181, 141, 104, 67, 104, 44, 5, 203, 88, 12, 213, 177, 248, 114,
-        64, 34, 9, 2, 240, 3, 2, 3, 58, 24, 191, 1, 34, 164, 8, 4, 240, 3, 4,
-        3, 60, 7, 224, 145, 248, 99, 32, 145, 248, 98, 64, 0, 50, 24, 191, 1,
-        34, 0, 52, 73, 104, 24, 191, 1, 36, 201, 5, 10, 213, 105, 7, 8, 212,
-        66, 185, 2, 104, 18, 104, 210, 105, 82, 105, 11, 42, 168, 191, 11, 34,
-        13, 224, 34, 177, 2, 104, 18, 104, 210, 105, 146, 105, 7, 224, 2, 104,
-        18, 104, 210, 105, 12, 177, 82, 105, 1, 224, 210, 248, 188, 32, 90,
-        113, 90, 121, 0, 241, 208, 1, 128, 248, 222, 35, 2, 70, 178, 248, 240,
-        66, 180, 245, 122, 127, 132, 191, 144, 248, 222, 67, 92, 113, 52, 50,
-        138, 66, 244, 209, 144, 248, 40, 32, 81, 178, 1, 49, 24, 191, 90, 113,
-        89, 121, 144, 248, 226, 35, 145, 66, 56, 191, 10, 70, 217, 104, 154,
-        113, 57, 177, 79, 244, 200, 100, 177, 251, 244, 241, 138, 66, 40, 191,
-        10, 70, 154, 113, 153, 121, 144, 248, 61, 35, 145, 66, 56, 191, 10,
-        70, 154, 113, 48, 189, 48, 181, 0, 34, 52, 33, 81, 67, 0, 36, 1, 245,
-        60, 113, 67, 24, 68, 82, 0, 33, 92, 24, 1, 49, 255, 37, 31, 41, 165,
-        112, 249, 209, 1, 50, 0, 33, 4, 42, 25, 99, 153, 98, 89, 132, 89, 98,
-        233, 209, 48, 189, 128, 248, 196, 19, 112, 71, 208, 248, 0, 50, 90,
-        104, 192, 248, 0, 34, 0, 34, 90, 96, 24, 70, 112, 71, 208, 248, 4, 50,
-        35, 185, 79, 240, 255, 50, 10, 128, 24, 70, 112, 71, 26, 136, 10, 128,
-        90, 104, 208, 248, 0, 18, 89, 96, 192, 248, 0, 50, 192, 248, 4, 34,
-        1, 32, 112, 71, 112, 181, 4, 70, 13, 70, 22, 70, 255, 247, 221, 255,
-        212, 248, 4, 50, 0, 34, 5, 128, 14, 224, 25, 136, 141, 66, 4, 217, 105,
-        26, 137, 178, 177, 66, 4, 217, 8, 224, 73, 27, 137, 178, 177, 66, 4,
-        217, 89, 104, 26, 70, 11, 70, 0, 43, 238, 209, 18, 185, 196, 248, 4,
-        2, 0, 224, 80, 96, 67, 96, 112, 189, 247, 181, 79, 240, 255, 51, 12,
-        70, 209, 248, 244, 96, 143, 120, 131, 131, 2, 169, 0, 35, 5, 70, 33,
-        248, 2, 61, 4, 241, 252, 0, 255, 247, 184, 255, 48, 177, 189, 248, 6,
-        48, 1, 32, 67, 244, 128, 83, 171, 131, 10, 224, 96, 55, 6, 235, 71,
-        6, 242, 136, 19, 5, 27, 13, 1, 50, 171, 131, 242, 128, 164, 248, 92,
-        48, 254, 189, 3, 104, 27, 104, 147, 248, 156, 48, 1, 43, 17, 209, 36,
-        35, 3, 251, 1, 1, 177, 248, 92, 50, 177, 248, 94, 2, 131, 66, 195, 235,
-        0, 0, 1, 210, 1, 56, 112, 71, 145, 248, 98, 50, 1, 59, 24, 24, 112,
-        71, 0, 32, 112, 71, 45, 233, 240, 65, 23, 70, 10, 104, 4, 70, 210, 248,
-        248, 48, 14, 70, 11, 185, 19, 105, 219, 104, 221, 104, 79, 244, 0, 114,
-        41, 70, 32, 70, 249, 247, 125, 248, 35, 104, 241, 138, 183, 248, 84,
-        32, 219, 105, 138, 24, 91, 107, 40, 177, 154, 66, 14, 220, 32, 70, 41,
-        70, 0, 34, 4, 224, 154, 66, 8, 219, 32, 70, 41, 70, 1, 34, 79, 244,
-        0, 115, 189, 232, 240, 65, 249, 247, 229, 184, 189, 232, 240, 129, 31,
-        181, 3, 104, 4, 70, 1, 169, 211, 248, 36, 1, 0, 34, 83, 240, 96, 220,
-        5, 224, 75, 104, 91, 3, 2, 213, 32, 70, 255, 247, 190, 254, 35, 104,
-        1, 169, 211, 248, 36, 1, 32, 240, 215, 252, 1, 70, 0, 40, 240, 209,
-        31, 189, 48, 181, 3, 104, 133, 176, 4, 70, 1, 169, 211, 248, 36, 1,
-        0, 34, 83, 240, 69, 220, 0, 37, 6, 224, 67, 104, 90, 3, 3, 213, 99,
-        104, 195, 88, 219, 138, 237, 24, 35, 104, 1, 169, 211, 248, 36, 1, 32,
-        240, 186, 252, 0, 40, 240, 209, 40, 70, 5, 176, 48, 189, 147, 105, 112,
-        181, 91, 5, 5, 70, 57, 213, 0, 41, 55, 208, 75, 104, 91, 3, 52, 213,
-        67, 104, 203, 88, 209, 137, 1, 240, 7, 1, 54, 49, 83, 248, 33, 64, 0,
-        44, 42, 208, 3, 104, 150, 139, 152, 104, 2, 240, 38, 222, 54, 5, 54,
-        13, 1, 7, 16, 213, 180, 248, 84, 48, 4, 241, 252, 0, 1, 59, 164, 248,
-        84, 48, 49, 70, 98, 120, 255, 247, 17, 255, 180, 248, 248, 48, 1, 51,
-        164, 248, 248, 48, 112, 189, 149, 248, 225, 83, 4, 241, 67, 0, 1, 61,
-        53, 64, 41, 70, 237, 243, 48, 243, 48, 177, 4, 241, 75, 0, 41, 70, 189,
-        232, 112, 64, 237, 243, 80, 182, 112, 189, 16, 181, 79, 244, 0, 114,
-        0, 33, 4, 70, 236, 243, 126, 244, 0, 34, 1, 35, 4, 235, 195, 0, 1, 51,
-        161, 24, 8, 50, 64, 43, 72, 96, 247, 209, 0, 35, 196, 248, 0, 66, 196,
-        248, 4, 50, 16, 189, 248, 181, 36, 35, 83, 67, 3, 245, 22, 118, 132,
-        25, 5, 70, 0, 104, 226, 122, 3, 104, 147, 248, 156, 48, 1, 43, 27, 209,
-        163, 136, 180, 248, 2, 192, 0, 42, 20, 191, 79, 244, 128, 66, 0, 34,
-        156, 69, 231, 136, 1, 209, 174, 91, 1, 224, 94, 28, 182, 178, 190, 66,
-        27, 208, 10, 67, 146, 178, 89, 0, 25, 240, 82, 220, 166, 128, 40, 104,
-        33, 137, 50, 70, 25, 240, 76, 220, 213, 248, 80, 50, 0, 32, 211, 248,
-        152, 32, 1, 50, 195, 248, 152, 32, 211, 248, 160, 32, 1, 50, 195, 248,
-        160, 32, 227, 105, 1, 51, 227, 97, 248, 189, 79, 240, 255, 48, 248,
-        189, 45, 233, 247, 79, 146, 248, 241, 48, 4, 70, 22, 70, 0, 43, 71,
-        208, 208, 248, 52, 49, 211, 248, 252, 83, 0, 45, 65, 208, 224, 33, 21,
-        240, 157, 221, 234, 33, 131, 70, 32, 70, 21, 240, 152, 221, 226, 33,
-        130, 70, 32, 70, 21, 240, 147, 221, 79, 244, 141, 113, 129, 70, 32,
-        70, 21, 240, 141, 221, 79, 244, 154, 113, 128, 70, 32, 70, 21, 240,
-        135, 221, 79, 244, 136, 113, 7, 70, 32, 70, 21, 240, 129, 221, 64, 242,
-        218, 97, 3, 70, 32, 70, 1, 147, 21, 240, 122, 221, 32, 70, 79, 244,
-        219, 97, 21, 240, 117, 221, 150, 248, 241, 32, 1, 155, 1, 42, 6, 217,
-        226, 104, 178, 248, 70, 21, 178, 248, 104, 21, 178, 248, 34, 37, 165,
-        248, 0, 176, 165, 248, 2, 160, 165, 248, 4, 144, 165, 248, 6, 128, 47,
-        129, 107, 129, 232, 96, 189, 232, 254, 143, 0, 35, 45, 233, 240, 65,
-        5, 70, 12, 70, 11, 112, 11, 224, 212, 248, 244, 16, 163, 120, 209, 248,
-        52, 1, 15, 79, 3, 240, 7, 3, 70, 109, 251, 92, 128, 109, 176, 71, 5,
-        241, 16, 0, 161, 120, 237, 243, 68, 244, 2, 70, 0, 40, 235, 209, 213,
-        248, 56, 49, 42, 104, 24, 104, 210, 248, 248, 48, 11, 185, 19, 105,
-        219, 104, 217, 104, 0, 34, 79, 244, 0, 115, 189, 232, 240, 65, 248,
-        247, 152, 191, 72, 194, 135, 0, 56, 181, 208, 248, 0, 68, 13, 70, 225,
-        66, 5, 208, 8, 89, 24, 177, 241, 247, 15, 250, 0, 35, 43, 81, 56, 189,
-        0, 181, 143, 176, 1, 170, 244, 247, 43, 255, 189, 248, 52, 0, 15, 176,
-        0, 189, 45, 233, 240, 79, 178, 248, 2, 128, 143, 176, 7, 70, 13, 70,
-        22, 70, 4, 104, 178, 248, 4, 176, 8, 240, 7, 8, 79, 240, 0, 9, 44, 224,
-        32, 70, 41, 70, 1, 170, 244, 247, 18, 255, 215, 248, 80, 50, 96, 104,
-        154, 110, 41, 70, 1, 50, 154, 102, 1, 34, 189, 248, 10, 160, 241, 247,
-        21, 250, 35, 104, 147, 248, 156, 32, 1, 42, 4, 208, 10, 244, 192, 106,
-        186, 245, 192, 111, 8, 224, 9, 241, 1, 9, 32, 70, 65, 70, 31, 250, 137,
-        249, 248, 247, 242, 248, 217, 69, 9, 208, 99, 105, 2, 33, 83, 248, 40,
-        0, 18, 75, 219, 107, 152, 71, 5, 70, 0, 45, 208, 209, 35, 104, 147,
-        248, 156, 48, 1, 43, 5, 208, 32, 70, 65, 70, 151, 248, 46, 32, 248,
-        247, 219, 248, 150, 249, 25, 48, 59, 185, 12, 224, 1, 61, 1, 32, 237,
-        178, 240, 243, 181, 246, 13, 185, 5, 224, 11, 37, 227, 104, 211, 248,
-        112, 49, 218, 7, 242, 213, 15, 176, 189, 232, 240, 143, 208, 134, 135,
-        0, 52, 35, 75, 67, 45, 233, 240, 65, 3, 245, 60, 115, 197, 24, 105,
-        126, 144, 249, 222, 35, 79, 244, 225, 102, 145, 66, 184, 191, 10, 70,
-        210, 178, 114, 67, 27, 79, 193, 90, 215, 248, 208, 97, 100, 35, 81,
-        26, 182, 251, 243, 246, 78, 67, 182, 251, 242, 246, 94, 67, 79, 240,
-        255, 52, 46, 99, 246, 9, 23, 44, 4, 208, 1, 52, 102, 44, 2, 221, 189,
-        232, 240, 129, 87, 36, 20, 35, 3, 251, 4, 115, 91, 104, 219, 9, 179,
-        66, 240, 217, 181, 248, 0, 128, 79, 244, 225, 98, 3, 251, 8, 248, 155,
-        27, 83, 67, 32, 70, 184, 251, 243, 248, 28, 240, 161, 222, 8, 241, 1,
-        8, 40, 24, 184, 241, 255, 15, 40, 191, 79, 240, 255, 8, 128, 248, 2,
-        128, 216, 231, 172, 240, 135, 0, 45, 233, 247, 79, 79, 240, 52, 8, 8,
-        251, 1, 248, 15, 70, 73, 0, 236, 49, 208, 248, 52, 81, 6, 70, 21, 240,
-        96, 220, 8, 245, 60, 120, 5, 235, 8, 4, 180, 248, 34, 160, 202, 235,
-        0, 10, 31, 250, 138, 250, 186, 241, 0, 15, 0, 240, 136, 128, 213, 248,
-        236, 50, 96, 132, 0, 43, 0, 240, 133, 128, 7, 241, 220, 3, 106, 107,
-        54, 248, 19, 48, 214, 248, 84, 150, 1, 146, 9, 251, 3, 242, 1, 152,
-        130, 66, 119, 217, 50, 104, 146, 248, 156, 32, 1, 42, 9, 209, 48, 70,
-        250, 33, 213, 248, 80, 178, 0, 147, 21, 240, 51, 220, 0, 155, 203, 248,
-        0, 0, 213, 248, 80, 34, 225, 106, 16, 104, 98, 106, 82, 68, 9, 42, 98,
-        98, 97, 217, 65, 26, 213, 248, 236, 98, 177, 251, 242, 242, 178, 66,
-        8, 217, 65, 242, 135, 51, 153, 66, 79, 240, 0, 3, 86, 217, 224, 98,
-        99, 98, 83, 224, 149, 248, 222, 195, 98, 126, 79, 250, 140, 246, 178,
-        66, 184, 191, 22, 70, 246, 178, 79, 244, 225, 106, 10, 251, 6, 246,
-        53, 248, 8, 16, 177, 66, 1, 219, 224, 98, 54, 224, 9, 251, 3, 243, 1,
-        152, 27, 26, 155, 178, 153, 66, 25, 210, 1, 245, 122, 113, 137, 178,
-        153, 66, 56, 191, 11, 70, 37, 248, 8, 48, 40, 70, 255, 247, 119, 253,
-        24, 74, 53, 248, 8, 16, 210, 248, 208, 33, 100, 35, 113, 26, 178, 251,
-        243, 242, 74, 67, 178, 251, 246, 246, 115, 67, 35, 99, 17, 224, 1, 42,
-        15, 217, 255, 42, 4, 209, 12, 241, 255, 60, 132, 248, 25, 192, 1, 224,
-        1, 58, 98, 118, 40, 70, 57, 70, 255, 247, 28, 255, 40, 70, 255, 247,
-        86, 253, 213, 248, 80, 50, 27, 104, 227, 98, 0, 32, 96, 98, 7, 224,
-        79, 240, 255, 48, 4, 224, 1, 32, 2, 224, 0, 32, 0, 224, 24, 70, 189,
-        232, 254, 143, 172, 240, 135, 0, 45, 233, 240, 65, 4, 70, 0, 43, 59,
-        208, 194, 243, 192, 23, 206, 9, 1, 240, 127, 5, 30, 74, 20, 33, 55,
-        177, 1, 251, 5, 34, 14, 177, 210, 104, 8, 224, 146, 104, 6, 224, 30,
-        177, 1, 251, 5, 34, 82, 104, 1, 224, 105, 67, 82, 88, 79, 234, 146,
-        40, 219, 8, 31, 250, 136, 248, 40, 70, 3, 251, 8, 248, 28, 240, 191,
-        221, 6, 235, 64, 2, 7, 235, 66, 2, 14, 50, 227, 124, 84, 248, 34, 32,
-        31, 250, 136, 248, 83, 67, 152, 69, 18, 211, 40, 70, 28, 240, 175, 221,
-        6, 235, 64, 6, 7, 235, 70, 7, 14, 55, 84, 248, 39, 48, 224, 124, 88,
-        67, 128, 178, 189, 232, 240, 129, 79, 246, 255, 112, 189, 232, 240,
-        129, 64, 70, 189, 232, 240, 129, 172, 240, 135, 0, 112, 181, 5, 121,
-        1, 35, 197, 241, 16, 5, 19, 250, 5, 245, 6, 70, 79, 240, 255, 52, 23,
-        44, 3, 208, 1, 52, 102, 44, 1, 221, 54, 224, 87, 36, 32, 70, 28, 240,
-        134, 221, 0, 35, 124, 48, 38, 248, 16, 48, 51, 121, 5, 43, 238, 216,
-        164, 241, 12, 3, 3, 43, 7, 216, 32, 70, 28, 240, 120, 221, 22, 75, 124,
-        48, 211, 248, 168, 49, 24, 224, 164, 241, 21, 3, 1, 43, 7, 216, 32,
-        70, 28, 240, 108, 221, 16, 75, 124, 48, 211, 248, 208, 49, 12, 224,
-        164, 241, 87, 3, 15, 43, 210, 216, 32, 70, 28, 240, 96, 221, 10, 75,
-        20, 34, 2, 251, 4, 51, 91, 104, 124, 48, 1, 59, 91, 25, 179, 251, 245,
-        243, 38, 248, 16, 48, 194, 231, 4, 75, 211, 248, 216, 49, 1, 59, 91,
-        25, 179, 251, 245, 245, 53, 129, 112, 189, 172, 240, 135, 0, 45, 233,
-        240, 65, 4, 70, 142, 10, 79, 240, 255, 53, 23, 45, 4, 208, 1, 53, 102,
-        45, 2, 221, 189, 232, 240, 129, 87, 37, 20, 35, 107, 67, 23, 74, 40,
-        70, 215, 24, 82, 248, 3, 128, 28, 240, 49, 221, 8, 251, 6, 248, 4, 235,
-        0, 16, 79, 234, 216, 3, 131, 99, 40, 70, 215, 248, 4, 128, 28, 240,
-        37, 221, 8, 251, 6, 248, 4, 235, 0, 16, 79, 234, 216, 3, 3, 100, 40,
-        70, 215, 248, 8, 128, 28, 240, 25, 221, 8, 251, 6, 248, 4, 235, 0, 16,
-        79, 234, 216, 3, 195, 99, 40, 70, 255, 104, 28, 240, 14, 221, 119, 67,
-        4, 235, 0, 16, 255, 8, 71, 100, 197, 231, 172, 240, 135, 0, 56, 181,
-        149, 105, 145, 98, 69, 244, 128, 117, 37, 244, 0, 69, 149, 97, 157,
-        248, 16, 80, 53, 177, 19, 240, 113, 223, 208, 241, 1, 0, 56, 191, 0,
-        32, 56, 189, 17, 70, 26, 70, 1, 35, 6, 240, 7, 248, 208, 241, 1, 0,
-        56, 191, 0, 32, 56, 189, 45, 233, 240, 79, 20, 70, 210, 248, 244, 144,
-        146, 248, 2, 160, 2, 104, 187, 176, 21, 104, 7, 70, 7, 149, 152, 70,
-        0, 43, 0, 240, 46, 129, 9, 235, 74, 3, 180, 248, 92, 96, 179, 248, 198,
-        48, 246, 67, 158, 25, 54, 5, 53, 13, 5, 235, 8, 6, 2, 149, 180, 248,
-        96, 0, 180, 248, 248, 80, 69, 25, 174, 66, 13, 221, 101, 120, 133, 66,
-        0, 242, 24, 129, 180, 248, 84, 0, 0, 40, 64, 240, 19, 129, 1, 59, 27,
-        5, 27, 13, 164, 248, 92, 48, 16, 49, 82, 104, 184, 241, 1, 15, 148,
-        191, 0, 37, 1, 37, 4, 145, 5, 146, 6, 149, 0, 45, 0, 240, 148, 128,
-        95, 250, 136, 245, 8, 168, 1, 33, 79, 244, 128, 98, 3, 149, 0, 38, 237,
-        243, 17, 241, 163, 70, 127, 224, 4, 152, 81, 70, 237, 243, 117, 241,
-        133, 137, 4, 70, 142, 45, 87, 220, 0, 46, 85, 208, 178, 137, 119, 75,
-        81, 28, 11, 64, 3, 241, 64, 14, 115, 104, 176, 104, 241, 136, 195, 243,
-        20, 3, 3, 235, 81, 19, 65, 13, 73, 5, 1, 51, 128, 24, 194, 235, 14,
-        14, 91, 24, 31, 250, 142, 254, 27, 26, 49, 70, 5, 152, 114, 68, 206,
-        235, 3, 3, 240, 243, 247, 246, 6, 70, 0, 40, 52, 208, 128, 104, 179,
-        137, 192, 48, 192, 59, 176, 96, 179, 129, 161, 104, 42, 70, 234, 247,
-        110, 252, 50, 70, 181, 129, 7, 152, 33, 70, 244, 247, 82, 249, 226,
-        137, 243, 137, 2, 240, 7, 2, 35, 240, 7, 3, 19, 67, 243, 129, 92, 75,
-        162, 138, 27, 104, 83, 248, 34, 48, 3, 177, 27, 136, 0, 32, 179, 130,
-        1, 34, 160, 130, 33, 70, 5, 152, 240, 247, 69, 255, 179, 127, 3, 240,
-        15, 3, 12, 43, 6, 209, 59, 104, 73, 70, 211, 248, 104, 7, 50, 70, 254,
-        247, 153, 255, 52, 70, 0, 38, 8, 168, 0, 33, 34, 70, 237, 243, 106,
-        241, 206, 185, 75, 75, 38, 70, 25, 104, 19, 224, 112, 104, 178, 104,
-        243, 136, 192, 243, 20, 0, 0, 235, 83, 16, 83, 13, 1, 48, 91, 5, 195,
-        24, 176, 137, 18, 24, 155, 26, 179, 245, 0, 127, 4, 220, 179, 138, 81,
-        248, 35, 96, 0, 46, 233, 209, 3, 157, 107, 30, 219, 178, 255, 43, 3,
-        147, 127, 244, 121, 175, 92, 70, 0, 38, 67, 70, 53, 70, 176, 70, 78,
-        70, 153, 70, 6, 152, 16, 177, 8, 168, 0, 33, 1, 224, 4, 152, 81, 70,
-        237, 243, 226, 240, 131, 70, 0, 40, 55, 208, 131, 105, 1, 53, 67, 244,
-        128, 99, 131, 97, 33, 70, 173, 178, 255, 247, 239, 250, 24, 177, 8,
-        241, 1, 8, 31, 250, 136, 248, 187, 248, 28, 48, 58, 104, 27, 5, 27,
-        13, 144, 104, 1, 147, 2, 240, 196, 217, 16, 240, 8, 15, 1, 155, 5, 208,
-        187, 248, 28, 32, 66, 244, 0, 82, 171, 248, 28, 32, 151, 248, 225, 19,
-        4, 241, 67, 0, 1, 57, 25, 64, 237, 243, 2, 242, 214, 248, 52, 49, 10,
-        240, 7, 14, 211, 248, 84, 192, 152, 109, 26, 75, 49, 70, 90, 70, 19,
-        248, 14, 48, 224, 71, 77, 69, 187, 209, 180, 248, 84, 48, 70, 70, 235,
-        24, 164, 248, 84, 48, 59, 104, 152, 104, 2, 240, 153, 217, 1, 7, 11,
-        213, 180, 248, 248, 48, 67, 69, 3, 216, 0, 34, 164, 248, 248, 32, 3,
-        224, 200, 235, 3, 3, 164, 248, 248, 48, 180, 248, 96, 48, 2, 152, 27,
-        26, 246, 24, 118, 27, 164, 248, 96, 96, 2, 224, 29, 70, 0, 224, 0, 37,
-        40, 70, 59, 176, 189, 232, 240, 143, 0, 191, 254, 255, 1, 0, 32, 7,
-        0, 0, 72, 194, 135, 0, 45, 233, 248, 67, 144, 232, 8, 2, 27, 104, 6,
-        70, 211, 248, 28, 128, 12, 70, 233, 177, 143, 104, 23, 240, 8, 7, 28,
-        209, 79, 244, 160, 112, 240, 247, 78, 254, 5, 70, 200, 177, 57, 70,
-        79, 244, 160, 114, 235, 243, 225, 247, 68, 248, 9, 80, 5, 241, 16, 0,
-        44, 96, 197, 248, 56, 97, 8, 33, 216, 248, 108, 32, 236, 243, 233, 247,
-        56, 70, 189, 232, 248, 131, 8, 70, 189, 232, 248, 131, 0, 32, 189, 232,
-        248, 131, 111, 240, 26, 0, 189, 232, 248, 131, 112, 181, 4, 70, 208,
-        248, 0, 100, 12, 32, 13, 70, 240, 243, 204, 245, 112, 177, 168, 81,
-        128, 232, 48, 0, 148, 248, 192, 51, 35, 177, 255, 35, 3, 114, 67, 129,
-        0, 32, 112, 189, 3, 114, 67, 129, 24, 70, 112, 189, 111, 240, 26, 0,
-        112, 189, 45, 233, 243, 71, 23, 70, 2, 122, 5, 70, 14, 70, 208, 248,
-        0, 144, 209, 248, 0, 128, 10, 177, 0, 43, 81, 208, 235, 25, 156, 122,
-        0, 44, 78, 208, 152, 248, 18, 49, 149, 248, 39, 32, 3, 240, 28, 3, 155,
-        8, 147, 66, 56, 191, 19, 70, 51, 113, 48, 70, 255, 247, 152, 253, 152,
-        248, 18, 49, 79, 244, 0, 82, 3, 240, 3, 3, 18, 250, 3, 243, 243, 96,
-        152, 248, 18, 49, 40, 70, 3, 240, 3, 3, 13, 51, 134, 248, 61, 49, 65,
-        70, 7, 241, 54, 10, 255, 247, 73, 249, 86, 248, 42, 64, 60, 185, 79,
-        244, 65, 112, 240, 247, 215, 253, 4, 70, 8, 179, 70, 248, 42, 0, 0,
-        33, 79, 244, 65, 114, 32, 70, 235, 243, 103, 247, 2, 35, 35, 112, 0,
-        35, 167, 112, 196, 248, 244, 128, 132, 248, 237, 48, 170, 124, 235,
-        124, 0, 146, 149, 248, 47, 32, 72, 70, 1, 146, 65, 70, 58, 70, 3, 240,
-        194, 249, 213, 248, 80, 50, 26, 109, 1, 50, 26, 101, 0, 224, 28, 70,
-        32, 70, 189, 232, 252, 135, 45, 233, 240, 79, 4, 70, 0, 104, 152, 70,
-        3, 104, 133, 176, 93, 105, 148, 248, 196, 51, 139, 70, 22, 70, 35, 185,
-        144, 248, 132, 55, 0, 43, 0, 240, 37, 129, 49, 70, 21, 240, 241, 220,
-        8, 40, 64, 240, 31, 129, 40, 70, 49, 70, 238, 247, 106, 252, 49, 70,
-        5, 70, 32, 104, 21, 240, 211, 220, 3, 120, 7, 70, 3, 240, 15, 3, 155,
-        0, 3, 241, 22, 2, 149, 66, 192, 240, 12, 129, 66, 122, 6, 42, 64, 240,
-        8, 129, 197, 24, 106, 123, 210, 6, 45, 213, 130, 120, 193, 120, 18,
-        2, 82, 24, 41, 123, 146, 178, 9, 9, 3, 235, 129, 3, 154, 66, 34, 209,
-        212, 248, 200, 51, 1, 51, 196, 248, 200, 51, 148, 248, 216, 51, 27,
-        177, 243, 127, 67, 240, 2, 3, 243, 119, 107, 123, 16, 43, 10, 209, 243,
-        127, 67, 240, 32, 3, 243, 119, 148, 248, 196, 51, 212, 248, 212, 35,
-        154, 66, 9, 211, 219, 224, 35, 104, 147, 248, 132, 55, 35, 177, 243,
-        127, 67, 240, 32, 3, 243, 119, 213, 224, 243, 127, 153, 6, 64, 241,
-        210, 128, 148, 248, 196, 51, 0, 43, 0, 240, 205, 128, 42, 122, 107,
-        122, 18, 6, 27, 4, 210, 24, 171, 122, 27, 2, 210, 24, 235, 122, 211,
-        24, 2, 147, 12, 35, 3, 251, 8, 179, 211, 248, 28, 144, 185, 241, 0,
-        15, 68, 208, 153, 248, 31, 48, 154, 6, 64, 213, 217, 248, 24, 48, 91,
-        6, 60, 212, 73, 70, 32, 104, 21, 240, 107, 220, 6, 120, 185, 248, 28,
-        144, 6, 240, 15, 6, 0, 235, 134, 6, 25, 244, 128, 95, 150, 248, 8, 192,
-        113, 122, 178, 122, 243, 122, 64, 240, 158, 128, 9, 4, 79, 234, 12,
-        108, 97, 68, 18, 2, 138, 24, 2, 153, 211, 24, 153, 66, 30, 217, 12,
-        48, 7, 241, 12, 1, 8, 34, 234, 247, 54, 250, 184, 185, 48, 70, 41, 70,
-        4, 34, 234, 247, 48, 250, 136, 185, 65, 70, 11, 241, 16, 0, 236, 243,
-        47, 247, 35, 104, 1, 70, 27, 104, 1, 34, 88, 105, 240, 247, 42, 253,
-        212, 248, 204, 51, 1, 51, 196, 248, 204, 51, 93, 224, 12, 35, 3, 251,
-        8, 179, 148, 248, 216, 35, 25, 140, 145, 66, 105, 210, 79, 240, 0, 10,
-        193, 70, 158, 105, 168, 70, 205, 248, 4, 160, 37, 70, 89, 224, 243,
-        127, 156, 6, 77, 213, 179, 105, 88, 6, 74, 212, 49, 70, 40, 104, 21,
-        240, 23, 220, 4, 120, 4, 240, 15, 4, 0, 235, 132, 4, 225, 122, 34, 122,
-        3, 145, 177, 139, 99, 122, 1, 244, 128, 81, 137, 178, 148, 248, 10,
-        192, 0, 41, 72, 209, 27, 4, 18, 6, 210, 24, 79, 234, 12, 44, 3, 155,
-        98, 68, 210, 24, 2, 155, 147, 66, 42, 217, 12, 48, 7, 241, 12, 1, 8,
-        34, 234, 247, 224, 249, 24, 187, 32, 70, 65, 70, 4, 34, 234, 247, 218,
-        249, 232, 185, 44, 70, 11, 241, 16, 0, 73, 70, 186, 241, 0, 15, 2, 209,
-        236, 243, 185, 246, 2, 224, 82, 70, 238, 247, 143, 251, 1, 70, 8, 179,
-        35, 104, 1, 34, 27, 104, 88, 105, 240, 247, 203, 252, 212, 248, 208,
-        51, 1, 51, 196, 248, 208, 51, 212, 248, 212, 51, 1, 51, 16, 224, 10,
-        75, 1, 153, 242, 138, 27, 104, 1, 49, 178, 70, 83, 248, 34, 96, 1, 145,
-        38, 177, 149, 248, 216, 51, 1, 154, 154, 66, 159, 219, 44, 70, 0, 35,
-        196, 248, 212, 51, 5, 176, 189, 232, 240, 143, 32, 7, 0, 0, 8, 177,
-        144, 248, 223, 3, 112, 71, 128, 248, 39, 16, 112, 71, 193, 116, 112,
-        71, 192, 124, 112, 71, 144, 248, 225, 3, 112, 71, 208, 248, 0, 52, 203,
-        88, 152, 122, 112, 71, 0, 0, 45, 233, 255, 71, 4, 70, 0, 104, 13, 70,
-        3, 146, 152, 70, 12, 158, 254, 247, 184, 255, 3, 154, 0, 40, 100, 208,
-        19, 120, 1, 43, 92, 209, 146, 248, 2, 160, 12, 35, 3, 251, 10, 83, 24,
-        140, 0, 40, 89, 208, 178, 248, 96, 16, 149, 248, 6, 192, 178, 248, 248,
-        48, 132, 69, 56, 191, 96, 70, 203, 24, 152, 66, 184, 191, 3, 70, 40,
-        104, 155, 178, 208, 248, 248, 16, 146, 248, 1, 144, 178, 248, 84, 112,
-        9, 185, 1, 105, 201, 104, 34, 72, 10, 240, 7, 10, 201, 104, 16, 248,
-        10, 0, 79, 240, 12, 10, 10, 251, 0, 16, 176, 248, 22, 160, 129, 138,
-        193, 235, 10, 1, 137, 178, 153, 66, 42, 217, 0, 43, 42, 208, 94, 185,
-        148, 248, 48, 0, 184, 66, 7, 216, 225, 69, 56, 191, 204, 70, 99, 69,
-        2, 208, 184, 241, 0, 15, 31, 208, 141, 232, 66, 0, 32, 70, 41, 70, 255,
-        247, 93, 252, 134, 185, 148, 248, 48, 48, 187, 66, 4, 217, 212, 248,
-        80, 50, 218, 106, 18, 24, 218, 98, 171, 121, 131, 66, 4, 209, 212, 248,
-        80, 50, 26, 107, 18, 24, 26, 99, 0, 48, 24, 191, 1, 32, 4, 224, 0, 32,
-        2, 224, 24, 70, 0, 224, 64, 70, 4, 176, 189, 232, 240, 135, 0, 191,
-        72, 194, 135, 0, 19, 181, 0, 36, 0, 148, 255, 247, 131, 255, 28, 189,
-        45, 233, 240, 71, 83, 120, 4, 70, 13, 70, 22, 70, 0, 43, 69, 208, 178,
-        248, 92, 144, 178, 248, 90, 48, 9, 241, 1, 9, 144, 248, 225, 131, 195,
-        235, 9, 9, 79, 234, 9, 89, 8, 241, 255, 56, 79, 234, 25, 89, 8, 234,
-        3, 8, 0, 39, 10, 224, 148, 248, 225, 51, 8, 241, 1, 8, 1, 59, 1, 55,
-        8, 234, 3, 8, 191, 178, 31, 250, 136, 248, 79, 69, 12, 208, 6, 241,
-        67, 0, 65, 70, 236, 243, 240, 243, 48, 185, 6, 241, 75, 0, 65, 70, 236,
-        243, 234, 243, 0, 40, 229, 208, 182, 248, 90, 48, 251, 24, 27, 5, 27,
-        13, 166, 248, 90, 48, 182, 248, 96, 48, 251, 24, 166, 248, 96, 48, 23,
-        177, 1, 35, 134, 248, 236, 48, 32, 70, 41, 70, 50, 70, 0, 35, 189, 232,
-        240, 71, 255, 247, 172, 191, 189, 232, 240, 135, 255, 247, 174, 191,
-        45, 233, 248, 67, 0, 35, 137, 7, 208, 248, 52, 81, 6, 70, 20, 70, 130,
-        248, 234, 48, 54, 213, 178, 248, 90, 112, 39, 224, 149, 248, 225, 131,
-        4, 241, 75, 9, 8, 241, 255, 56, 7, 234, 8, 8, 72, 70, 65, 70, 236, 243,
-        178, 243, 184, 177, 72, 70, 65, 70, 4, 241, 67, 9, 236, 243, 81, 243,
-        72, 70, 65, 70, 236, 243, 167, 243, 96, 177, 72, 70, 65, 70, 236, 243,
-        72, 243, 4, 235, 8, 3, 0, 34, 218, 112, 180, 248, 84, 48, 1, 59, 164,
-        248, 84, 48, 1, 55, 63, 5, 63, 13, 180, 248, 98, 48, 187, 66, 211, 209,
-        212, 248, 244, 32, 107, 104, 40, 70, 209, 88, 34, 70, 255, 247, 188,
-        255, 212, 248, 244, 32, 107, 104, 48, 70, 209, 88, 34, 70, 254, 247,
-        182, 255, 214, 248, 52, 1, 33, 70, 0, 34, 189, 232, 248, 67, 0, 240,
-        0, 184, 45, 233, 240, 65, 0, 35, 129, 248, 237, 48, 145, 248, 234, 48,
-        134, 176, 5, 70, 12, 70, 0, 43, 64, 240, 141, 128, 11, 120, 1, 43, 64,
-        240, 137, 128, 145, 248, 238, 48, 49, 43, 0, 242, 132, 128, 25, 43,
-        6, 209, 26, 35, 129, 248, 238, 48, 3, 35, 129, 248, 237, 48, 122, 224,
-        177, 248, 90, 96, 66, 187, 144, 248, 225, 51, 79, 240, 255, 55, 1, 59,
-        30, 64, 144, 70, 14, 224, 49, 70, 4, 241, 75, 0, 236, 243, 75, 243,
-        149, 248, 225, 51, 1, 54, 1, 59, 0, 40, 24, 191, 71, 70, 30, 64, 8,
-        241, 1, 8, 98, 120, 180, 248, 96, 48, 211, 26, 152, 69, 234, 219, 120,
-        28, 3, 209, 0, 35, 132, 248, 238, 48, 84, 224, 180, 248, 90, 96, 1,
-        54, 246, 25, 54, 5, 54, 13, 107, 122, 0, 43, 48, 209, 0, 147, 13, 241,
-        23, 3, 2, 147, 162, 120, 51, 70, 1, 39, 40, 104, 212, 248, 244, 16,
-        1, 151, 2, 240, 117, 255, 157, 248, 23, 48, 128, 70, 11, 177, 4, 35,
-        21, 224, 16, 185, 132, 248, 237, 112, 52, 224, 43, 104, 27, 73, 211,
-        248, 120, 4, 34, 70, 59, 70, 14, 240, 183, 255, 43, 104, 23, 73, 211,
-        248, 120, 4, 34, 70, 67, 70, 75, 240, 23, 216, 24, 177, 2, 35, 132,
-        248, 237, 48, 31, 224, 213, 248, 80, 50, 154, 109, 1, 50, 154, 101,
-        148, 248, 238, 48, 164, 248, 98, 96, 1, 51, 132, 248, 238, 48, 1, 35,
-        132, 248, 234, 48, 164, 248, 86, 96, 107, 122, 1, 43, 11, 209, 42, 104,
-        7, 73, 210, 248, 120, 4, 34, 70, 14, 240, 143, 255, 40, 104, 2, 33,
-        34, 70, 255, 247, 20, 255, 6, 176, 189, 232, 240, 129, 0, 191, 193,
-        128, 1, 0, 45, 233, 248, 67, 157, 248, 32, 192, 5, 70, 12, 70, 22, 70,
-        188, 241, 0, 15, 14, 208, 177, 248, 94, 48, 211, 26, 27, 5, 27, 13,
-        179, 245, 0, 111, 128, 242, 203, 128, 86, 28, 54, 5, 54, 13, 161, 248,
-        94, 96, 210, 224, 144, 248, 225, 115, 122, 30, 50, 64, 138, 24, 208,
-        120, 0, 40, 71, 209, 177, 248, 94, 32, 178, 66, 61, 208, 183, 26, 63,
-        5, 63, 13, 1, 33, 183, 245, 0, 111, 25, 96, 4, 217, 213, 248, 80, 50,
-        154, 108, 82, 24, 11, 224, 180, 248, 90, 48, 97, 120, 243, 26, 27, 5,
-        27, 13, 139, 66, 213, 248, 80, 50, 4, 219, 154, 108, 1, 50, 154, 100,
-        189, 232, 248, 131, 25, 108, 128, 70, 201, 25, 25, 100, 149, 248, 225,
-        147, 9, 241, 255, 57, 9, 234, 2, 9, 15, 224, 73, 70, 4, 241, 75, 0,
-        236, 243, 177, 245, 149, 248, 225, 51, 9, 241, 1, 9, 1, 59, 9, 234,
-        3, 9, 8, 241, 1, 8, 31, 250, 137, 249, 184, 69, 237, 211, 40, 70, 33,
-        70, 0, 34, 255, 247, 253, 254, 1, 54, 54, 5, 54, 13, 164, 248, 94, 96,
-        130, 224, 177, 248, 232, 16, 169, 177, 180, 248, 228, 48, 3, 241, 48,
-        2, 4, 235, 66, 2, 144, 136, 176, 66, 12, 209, 162, 248, 4, 192, 149,
-        248, 225, 35, 1, 51, 1, 58, 19, 64, 1, 57, 164, 248, 228, 48, 164, 248,
-        232, 16, 102, 224, 180, 248, 228, 32, 0, 35, 10, 224, 4, 235, 66, 0,
-        176, 248, 100, 0, 176, 66, 39, 208, 1, 50, 120, 30, 2, 64, 1, 51, 146,
-        178, 139, 66, 242, 211, 76, 224, 149, 248, 225, 19, 4, 241, 75, 0, 1,
-        57, 25, 64, 236, 243, 102, 245, 213, 248, 80, 50, 0, 33, 90, 108, 1,
-        50, 90, 100, 180, 248, 228, 48, 4, 235, 67, 2, 162, 248, 100, 16, 149,
-        248, 225, 35, 1, 51, 1, 58, 19, 64, 164, 248, 228, 48, 180, 248, 232,
-        48, 1, 59, 164, 248, 232, 48, 180, 248, 228, 48, 4, 235, 67, 3, 179,
-        248, 100, 48, 179, 66, 215, 209, 33, 70, 0, 34, 40, 70, 255, 247, 159,
-        254, 180, 248, 228, 48, 0, 33, 4, 235, 67, 2, 162, 248, 100, 16, 149,
-        248, 225, 35, 1, 51, 1, 58, 19, 64, 164, 248, 228, 48, 180, 248, 232,
-        48, 1, 59, 164, 248, 232, 48, 19, 224, 149, 248, 225, 19, 4, 241, 75,
-        0, 1, 57, 49, 64, 236, 243, 37, 245, 7, 224, 1, 32, 189, 232, 248, 131,
-        213, 248, 80, 50, 154, 108, 1, 50, 154, 100, 0, 32, 189, 232, 248, 131,
-        35, 120, 3, 43, 232, 208, 1, 32, 189, 232, 248, 131, 16, 181, 157, 248,
-        8, 64, 2, 148, 189, 232, 16, 64, 255, 247, 9, 191, 0, 0, 45, 233, 240,
-        79, 171, 176, 15, 70, 5, 70, 146, 70, 4, 104, 0, 33, 37, 168, 11, 34,
-        9, 147, 221, 248, 208, 176, 221, 248, 212, 144, 235, 243, 47, 243, 231,
-        177, 123, 104, 91, 3, 25, 213, 107, 104, 251, 88, 30, 147, 186, 248,
-        14, 48, 30, 152, 3, 240, 7, 3, 21, 147, 221, 248, 84, 192, 54, 51, 80,
-        248, 35, 96, 5, 235, 12, 3, 147, 248, 23, 192, 219, 127, 205, 248, 128,
-        192, 33, 147, 22, 177, 51, 120, 2, 43, 7, 209, 40, 70, 81, 70, 9, 154,
-        0, 35, 254, 247, 113, 255, 0, 240, 11, 188, 0, 33, 8, 34, 40, 168, 235,
-        243, 4, 243, 9, 152, 57, 105, 67, 136, 144, 248, 24, 128, 3, 240, 7,
-        3, 26, 147, 218, 248, 24, 48, 34, 145, 195, 243, 192, 99, 13, 147, 35,
-        104, 147, 248, 156, 32, 1, 42, 58, 208, 144, 249, 25, 48, 0, 43, 0,
-        240, 181, 128, 13, 154, 184, 241, 6, 15, 8, 191, 0, 34, 13, 146, 131,
-        136, 11, 240, 30, 2, 27, 9, 27, 147, 3, 140, 141, 248, 164, 144, 27,
-        11, 67, 234, 194, 3, 141, 248, 160, 48, 79, 234, 27, 35, 141, 248, 161,
-        48, 79, 234, 27, 67, 141, 248, 162, 48, 79, 234, 25, 35, 141, 248, 165,
-        48, 79, 234, 25, 67, 79, 234, 25, 105, 79, 234, 27, 107, 141, 248, 167,
-        144, 79, 240, 0, 9, 141, 248, 163, 176, 141, 248, 166, 48, 205, 248,
-        48, 144, 205, 248, 68, 144, 205, 248, 44, 144, 205, 248, 88, 144, 117,
-        224, 182, 248, 90, 192, 9, 152, 205, 248, 108, 192, 128, 136, 9, 153,
-        22, 144, 8, 140, 11, 240, 30, 3, 0, 11, 64, 234, 195, 0, 79, 234, 27,
-        33, 79, 234, 27, 67, 201, 178, 219, 178, 79, 234, 27, 107, 141, 248,
-        160, 0, 141, 248, 161, 16, 141, 248, 162, 48, 141, 248, 163, 176, 40,
-        185, 33, 185, 27, 185, 27, 241, 0, 2, 24, 191, 1, 34, 79, 234, 25, 35,
-        219, 178, 17, 147, 79, 234, 25, 67, 219, 178, 12, 147, 213, 248, 80,
-        50, 95, 250, 137, 252, 217, 104, 17, 152, 1, 49, 217, 96, 213, 248,
-        80, 50, 79, 234, 25, 105, 211, 248, 136, 16, 205, 248, 44, 192, 97,
-        68, 195, 248, 136, 16, 211, 248, 144, 16, 9, 24, 195, 248, 144, 16,
-        12, 152, 211, 248, 140, 16, 9, 24, 195, 248, 140, 16, 211, 248, 148,
-        16, 17, 152, 73, 68, 195, 248, 148, 16, 35, 104, 17, 153, 211, 248,
-        136, 48, 1, 235, 9, 14, 211, 248, 168, 17, 192, 235, 12, 11, 113, 68,
-        195, 248, 168, 17, 211, 248, 216, 17, 12, 152, 113, 68, 195, 248, 216,
-        17, 201, 235, 0, 1, 11, 235, 1, 0, 217, 104, 9, 24, 217, 96, 215, 248,
-        56, 50, 215, 248, 60, 18, 115, 68, 8, 24, 199, 248, 56, 50, 199, 248,
-        60, 2, 114, 177, 35, 104, 147, 248, 156, 48, 1, 43, 17, 208, 1, 33,
-        16, 145, 10, 145, 102, 224, 153, 70, 12, 147, 17, 147, 11, 147, 22,
-        147, 27, 147, 213, 248, 80, 50, 26, 110, 1, 50, 26, 102, 0, 34, 16,
-        146, 0, 224, 16, 147, 184, 241, 0, 15, 64, 208, 213, 248, 232, 50, 8,
-        241, 180, 2, 83, 248, 34, 16, 1, 49, 184, 241, 4, 15, 67, 248, 34, 16,
-        10, 209, 35, 104, 211, 248, 136, 48, 211, 248, 16, 34, 1, 50, 195, 248,
-        16, 34, 0, 35, 13, 147, 60, 224, 184, 241, 5, 15, 14, 209, 35, 104,
-        211, 248, 136, 48, 211, 248, 160, 34, 1, 50, 195, 248, 160, 34, 180,
-        248, 36, 53, 75, 179, 32, 70, 247, 247, 206, 251, 10, 224, 184, 241,
-        3, 15, 32, 70, 11, 209, 178, 75, 221, 248, 84, 192, 19, 248, 12, 16,
-        254, 247, 1, 255, 1, 32, 0, 33, 10, 144, 13, 145, 27, 224, 66, 70, 81,
-        70, 22, 240, 238, 221, 1, 34, 10, 146, 0, 35, 15, 224, 9, 152, 195,
-        136, 115, 177, 35, 104, 1, 33, 211, 248, 136, 48, 10, 145, 154, 107,
-        205, 248, 52, 128, 1, 50, 154, 99, 5, 224, 1, 34, 10, 146, 13, 147,
-        1, 224, 1, 35, 10, 147, 180, 248, 36, 53, 0, 43, 0, 240, 42, 130, 212,
-        248, 40, 53, 0, 43, 0, 240, 37, 130, 184, 241, 5, 15, 0, 240, 33, 130,
-        32, 70, 247, 247, 156, 251, 28, 226, 218, 248, 8, 176, 14, 152, 187,
-        248, 0, 192, 205, 248, 140, 192, 187, 248, 140, 48, 27, 9, 18, 147,
-        0, 40, 64, 240, 174, 128, 155, 248, 112, 48, 34, 104, 3, 240, 127, 3,
-        15, 147, 146, 248, 156, 32, 155, 248, 115, 48, 217, 9, 1, 42, 20, 145,
-        64, 240, 159, 128, 187, 248, 76, 192, 24, 6, 205, 248, 100, 192, 22,
-        213, 213, 248, 80, 50, 221, 248, 44, 192, 26, 106, 98, 68, 26, 98, 213,
-        248, 232, 50, 99, 177, 15, 152, 27, 240, 50, 221, 213, 248, 232, 50,
-        86, 48, 3, 235, 128, 3, 90, 104, 221, 248, 44, 192, 98, 68, 90, 96,
-        155, 248, 115, 48, 19, 240, 48, 15, 22, 208, 213, 248, 80, 50, 221,
-        248, 44, 192, 90, 106, 98, 68, 90, 98, 213, 248, 232, 50, 99, 177, 15,
-        152, 27, 240, 22, 221, 213, 248, 232, 50, 118, 48, 83, 248, 32, 32,
-        221, 248, 44, 192, 98, 68, 67, 248, 32, 32, 213, 248, 232, 50, 195,
-        177, 15, 152, 27, 240, 6, 221, 213, 248, 232, 50, 44, 48, 83, 248, 32,
-        32, 221, 248, 44, 192, 98, 68, 67, 248, 32, 32, 15, 152, 27, 240, 249,
-        220, 213, 248, 232, 50, 148, 48, 3, 235, 128, 3, 90, 104, 17, 152, 18,
-        24, 90, 96, 187, 248, 20, 48, 153, 7, 69, 208, 155, 248, 54, 128, 213,
-        248, 232, 50, 8, 240, 127, 8, 91, 177, 64, 70, 27, 240, 226, 220, 213,
-        248, 232, 50, 44, 48, 83, 248, 32, 32, 12, 153, 82, 24, 67, 248, 32,
-        32, 155, 249, 57, 48, 0, 43, 20, 218, 213, 248, 80, 50, 12, 152, 26,
-        106, 18, 24, 26, 98, 213, 248, 232, 50, 91, 177, 64, 70, 27, 240, 201,
-        220, 213, 248, 232, 50, 86, 48, 3, 235, 128, 3, 90, 104, 12, 153, 82,
-        24, 90, 96, 155, 248, 57, 48, 19, 240, 48, 15, 20, 208, 213, 248, 80,
-        50, 12, 152, 90, 106, 18, 24, 90, 98, 213, 248, 232, 50, 91, 177, 64,
-        70, 27, 240, 175, 220, 213, 248, 232, 50, 118, 48, 83, 248, 32, 32,
-        12, 153, 82, 24, 67, 248, 32, 32, 35, 104, 149, 248, 225, 131, 147,
-        248, 156, 48, 18, 154, 8, 241, 255, 56, 1, 43, 8, 234, 2, 8, 3, 208,
-        6, 235, 8, 3, 219, 120, 24, 147, 182, 248, 90, 48, 221, 248, 72, 192,
-        114, 120, 195, 235, 12, 3, 27, 5, 27, 13, 147, 66, 128, 242, 5, 129,
-        6, 241, 67, 12, 96, 70, 65, 70, 205, 248, 76, 192, 235, 243, 128, 247,
-        16, 152, 32, 185, 35, 104, 147, 248, 156, 48, 1, 43, 70, 209, 35, 104,
-        147, 248, 156, 48, 1, 43, 1, 209, 14, 153, 6, 224, 18, 154, 221, 248,
-        108, 192, 204, 235, 2, 1, 9, 5, 9, 13, 63, 41, 54, 216, 40, 168, 235,
-        243, 102, 247, 0, 40, 49, 208, 19, 152, 65, 70, 235, 243, 96, 247, 184,
-        177, 19, 152, 65, 70, 6, 241, 75, 11, 235, 243, 255, 246, 88, 70, 65,
-        70, 235, 243, 85, 247, 24, 177, 88, 70, 65, 70, 235, 243, 246, 246,
-        6, 235, 8, 3, 0, 34, 218, 112, 182, 248, 84, 48, 1, 59, 166, 248, 84,
-        48, 2, 34, 212, 248, 120, 4, 81, 70, 74, 240, 43, 220, 221, 248, 92,
-        192, 12, 241, 1, 3, 219, 178, 23, 147, 35, 104, 147, 248, 156, 48, 1,
-        43, 64, 240, 178, 128, 178, 224, 138, 182, 135, 0, 10, 152, 202, 248,
-        40, 112, 0, 40, 49, 208, 35, 104, 147, 248, 156, 48, 1, 43, 44, 209,
-        43, 104, 147, 248, 1, 198, 28, 240, 8, 12, 38, 209, 185, 241, 1, 15,
-        35, 209, 32, 70, 57, 70, 82, 70, 9, 155, 205, 248, 0, 192, 205, 248,
-        32, 192, 254, 247, 17, 255, 221, 248, 32, 192, 10, 144, 0, 40, 64, 240,
-        144, 128, 6, 235, 8, 3, 216, 112, 182, 248, 84, 48, 19, 152, 1, 59,
-        166, 248, 84, 48, 65, 70, 235, 243, 3, 247, 0, 40, 0, 240, 131, 128,
-        19, 152, 65, 70, 235, 243, 162, 246, 125, 224, 35, 104, 147, 248, 156,
-        48, 1, 43, 62, 208, 10, 153, 0, 41, 59, 208, 221, 248, 96, 192, 32,
-        152, 132, 69, 54, 218, 185, 241, 0, 15, 2, 208, 185, 241, 3, 15, 48,
-        209, 187, 248, 118, 48, 67, 244, 0, 99, 171, 248, 118, 48, 6, 235, 8,
-        3, 218, 120, 221, 248, 72, 192, 1, 50, 218, 112, 182, 248, 230, 48,
-        21, 153, 6, 235, 67, 2, 162, 248, 100, 192, 149, 248, 225, 35, 1, 51,
-        1, 58, 19, 64, 166, 248, 230, 48, 182, 248, 232, 48, 1, 51, 166, 248,
-        232, 48, 215, 248, 52, 49, 211, 248, 84, 192, 152, 109, 147, 75, 91,
-        92, 13, 43, 1, 220, 1, 51, 0, 224, 15, 35, 57, 70, 82, 70, 224, 71,
-        0, 35, 58, 224, 160, 104, 1, 240, 140, 217, 2, 7, 21, 213, 31, 154,
-        154, 185, 6, 235, 8, 3, 218, 112, 182, 248, 84, 48, 6, 241, 252, 0,
-        1, 59, 166, 248, 84, 48, 18, 153, 114, 120, 254, 247, 116, 250, 182,
-        248, 248, 48, 1, 51, 166, 248, 248, 48, 6, 224, 6, 241, 75, 0, 65, 70,
-        236, 243, 191, 241, 1, 35, 29, 147, 35, 104, 211, 248, 136, 48, 211,
-        248, 176, 33, 1, 50, 195, 248, 176, 33, 215, 248, 64, 50, 1, 51, 199,
-        248, 64, 50, 215, 248, 92, 49, 1, 51, 199, 248, 92, 49, 1, 35, 4, 224,
-        16, 147, 2, 224, 99, 70, 0, 224, 75, 70, 14, 152, 66, 28, 210, 178,
-        14, 146, 35, 177, 96, 104, 81, 70, 1, 34, 239, 247, 108, 254, 35, 104,
-        147, 248, 156, 32, 1, 42, 20, 209, 213, 248, 80, 50, 32, 70, 211, 248,
-        160, 16, 1, 57, 195, 248, 160, 16, 211, 248, 156, 16, 1, 49, 195, 248,
-        156, 16, 26, 153, 246, 247, 70, 253, 14, 153, 221, 248, 88, 192, 97,
-        69, 5, 224, 221, 248, 140, 192, 12, 244, 192, 99, 179, 245, 192, 111,
-        37, 208, 99, 105, 221, 248, 104, 192, 2, 33, 83, 248, 44, 0, 88, 75,
-        219, 107, 152, 71, 130, 70, 0, 40, 127, 244, 228, 173, 23, 224, 73,
-        35, 67, 250, 8, 243, 79, 246, 255, 124, 0, 32, 3, 240, 1, 3, 205, 248,
-        100, 192, 79, 240, 255, 60, 205, 248, 112, 144, 31, 147, 205, 248, 96,
-        192, 14, 144, 23, 144, 29, 144, 20, 144, 15, 144, 193, 70, 202, 229,
-        35, 104, 221, 248, 112, 144, 147, 248, 156, 48, 1, 43, 4, 208, 213,
-        248, 232, 50, 26, 110, 1, 50, 26, 102, 29, 153, 33, 177, 40, 70, 49,
-        70, 0, 34, 255, 247, 158, 250, 35, 104, 147, 248, 156, 48, 1, 43, 42,
-        209, 11, 154, 12, 152, 19, 24, 17, 209, 13, 153, 0, 41, 64, 208, 15,
-        154, 20, 152, 0, 147, 1, 147, 2, 147, 3, 147, 4, 146, 6, 147, 5, 144,
-        212, 248, 96, 1, 57, 70, 25, 154, 22, 155, 17, 224, 17, 153, 12, 154,
-        0, 145, 15, 152, 20, 153, 0, 35, 1, 146, 3, 147, 5, 145, 6, 147, 205,
-        248, 8, 144, 4, 144, 212, 248, 96, 1, 25, 154, 11, 155, 57, 70, 31,
-        240, 231, 248, 28, 224, 13, 154, 210, 177, 14, 155, 16, 152, 221, 248,
-        96, 192, 0, 147, 128, 240, 1, 3, 1, 147, 33, 152, 95, 250, 140, 243,
-        15, 153, 20, 154, 2, 147, 0, 35, 4, 147, 5, 145, 6, 146, 7, 147, 3,
-        144, 212, 248, 96, 1, 57, 70, 9, 154, 23, 155, 31, 240, 239, 248, 35,
-        104, 147, 248, 156, 48, 1, 43, 5, 208, 32, 70, 26, 153, 149, 248, 46,
-        32, 246, 247, 169, 252, 187, 104, 3, 244, 128, 83, 79, 234, 19, 56,
-        43, 177, 148, 248, 116, 130, 72, 240, 2, 3, 132, 248, 116, 50, 40, 70,
-        30, 153, 50, 70, 255, 247, 225, 249, 187, 104, 32, 70, 219, 4, 9, 155,
-        72, 191, 132, 248, 116, 130, 3, 241, 20, 1, 23, 240, 54, 220, 1, 70,
-        34, 152, 23, 240, 226, 220, 43, 176, 189, 232, 240, 143, 0, 191, 72,
-        194, 135, 0, 208, 134, 135, 0, 45, 233, 240, 71, 4, 70, 153, 70, 0,
-        41, 0, 240, 134, 128, 75, 104, 91, 3, 64, 241, 130, 128, 67, 104, 206,
-        88, 211, 137, 3, 240, 7, 3, 54, 51, 86, 248, 35, 80, 0, 45, 119, 208,
-        43, 120, 2, 43, 116, 208, 17, 70, 0, 104, 254, 247, 55, 251, 181, 248,
-        90, 48, 106, 120, 195, 26, 27, 5, 27, 13, 147, 66, 128, 70, 103, 218,
-        148, 248, 225, 115, 5, 241, 67, 10, 1, 63, 7, 64, 191, 178, 80, 70,
-        57, 70, 235, 243, 104, 245, 0, 40, 90, 208, 153, 249, 25, 48, 251, 177,
-        80, 70, 57, 70, 5, 241, 75, 8, 235, 243, 3, 245, 64, 70, 57, 70, 235,
-        243, 89, 245, 24, 177, 64, 70, 57, 70, 235, 243, 250, 244, 0, 35, 239,
-        25, 251, 112, 181, 248, 84, 48, 213, 248, 244, 32, 1, 59, 165, 248,
-        84, 48, 99, 104, 32, 70, 209, 88, 42, 70, 255, 247, 118, 249, 48, 224,
-        212, 248, 80, 50, 218, 108, 1, 50, 218, 100, 35, 104, 27, 104, 147,
-        248, 47, 48, 27, 177, 153, 248, 24, 48, 1, 43, 10, 208, 5, 241, 75,
-        0, 57, 70, 236, 243, 88, 240, 32, 70, 41, 70, 0, 34, 255, 247, 177,
-        249, 23, 224, 239, 25, 251, 120, 1, 51, 251, 112, 181, 248, 230, 48,
-        5, 235, 67, 2, 162, 248, 100, 128, 148, 248, 225, 35, 1, 51, 1, 58,
-        19, 64, 165, 248, 230, 48, 181, 248, 232, 48, 1, 51, 165, 248, 232,
-        48, 189, 232, 240, 135, 32, 104, 49, 70, 42, 70, 189, 232, 240, 71,
-        254, 247, 63, 185, 189, 232, 240, 135, 45, 233, 240, 65, 13, 70, 20,
-        70, 17, 70, 26, 70, 30, 70, 157, 248, 24, 112, 254, 247, 50, 249, 40,
-        70, 33, 70, 50, 70, 59, 70, 189, 232, 240, 65, 255, 247, 210, 184, 45,
-        233, 240, 79, 7, 70, 13, 105, 154, 70, 215, 248, 0, 52, 137, 176, 85,
-        248, 3, 192, 0, 32, 156, 249, 8, 144, 14, 70, 20, 70, 7, 144, 61, 104,
-        211, 137, 185, 241, 0, 15, 0, 240, 3, 129, 188, 248, 10, 144, 3, 240,
-        7, 3, 73, 250, 3, 249, 25, 240, 1, 9, 4, 209, 248, 224, 129, 70, 246,
-        224, 193, 70, 244, 224, 146, 248, 31, 128, 24, 240, 8, 8, 246, 209,
-        7, 168, 0, 144, 40, 70, 23, 240, 200, 221, 7, 154, 0, 42, 240, 209,
-        227, 137, 3, 240, 7, 3, 4, 147, 163, 105, 153, 5, 8, 212, 115, 74, 4,
-        152, 115, 73, 18, 92, 138, 92, 166, 50, 85, 248, 34, 144, 0, 224, 145,
-        70, 122, 104, 4, 153, 178, 88, 3, 146, 3, 152, 1, 241, 54, 2, 80, 248,
-        34, 128, 184, 241, 0, 15, 12, 209, 218, 6, 0, 241, 200, 128, 67, 70,
-        56, 70, 3, 153, 4, 154, 254, 247, 80, 254, 128, 70, 0, 40, 0, 240, 190,
-        128, 152, 248, 0, 48, 1, 43, 64, 240, 185, 128, 205, 248, 20, 128, 79,
-        240, 0, 11, 176, 70, 46, 70, 223, 248, 120, 161, 226, 138, 218, 248,
-        0, 48, 0, 33, 83, 248, 34, 80, 225, 130, 112, 104, 33, 70, 237, 247,
-        29, 251, 142, 40, 5, 216, 56, 70, 3, 153, 34, 70, 4, 155, 254, 247,
-        143, 254, 163, 139, 3, 244, 128, 83, 155, 178, 0, 43, 24, 191, 79, 240,
-        1, 11, 59, 104, 147, 248, 132, 55, 51, 177, 227, 127, 3, 240, 32, 3,
-        0, 43, 24, 191, 79, 240, 1, 11, 0, 35, 0, 147, 3, 155, 48, 70, 3, 241,
-        16, 1, 34, 70, 4, 155, 18, 240, 142, 221, 184, 185, 170, 70, 53, 70,
-        70, 70, 221, 248, 20, 128, 186, 241, 0, 15, 1, 208, 186, 248, 0, 160,
-        164, 248, 22, 160, 57, 70, 67, 70, 40, 70, 3, 154, 205, 248, 0, 176,
-        79, 240, 0, 8, 255, 247, 62, 255, 33, 70, 49, 224, 227, 137, 35, 244,
-        128, 83, 227, 129, 77, 177, 34, 70, 48, 70, 65, 70, 43, 70, 205, 248,
-        0, 144, 44, 70, 18, 240, 15, 220, 165, 231, 221, 248, 20, 128, 48, 70,
-        57, 70, 3, 154, 67, 70, 205, 248, 0, 176, 255, 247, 35, 255, 80, 224,
-        44, 72, 202, 138, 3, 104, 83, 248, 34, 144, 0, 35, 203, 130, 203, 137,
-        104, 104, 35, 244, 128, 83, 203, 129, 1, 34, 239, 247, 22, 252, 51,
-        105, 27, 177, 219, 104, 26, 106, 1, 50, 26, 98, 8, 241, 1, 8, 73, 70,
-        0, 41, 229, 209, 184, 241, 0, 15, 51, 208, 43, 104, 211, 248, 136, 48,
-        26, 106, 66, 68, 26, 98, 215, 248, 80, 50, 218, 107, 66, 68, 218, 99,
-        214, 248, 92, 49, 67, 68, 198, 248, 92, 49, 34, 224, 21, 75, 226, 138,
-        27, 104, 0, 32, 83, 248, 34, 128, 227, 137, 224, 130, 35, 244, 128,
-        83, 227, 129, 184, 241, 0, 15, 7, 208, 56, 70, 49, 70, 34, 70, 67, 70,
-        205, 248, 0, 144, 18, 240, 191, 219, 214, 248, 52, 49, 34, 70, 93, 109,
-        152, 109, 49, 70, 83, 70, 168, 71, 68, 70, 0, 224, 47, 70, 0, 44, 220,
-        209, 9, 176, 189, 232, 240, 143, 0, 191, 138, 182, 135, 0, 84, 194,
-        135, 0, 32, 7, 0, 0, 36, 35, 3, 251, 1, 3, 1, 34, 131, 248, 100, 34,
-        112, 71, 0, 0, 45, 233, 240, 79, 208, 248, 0, 128, 245, 176, 216, 248,
-        4, 112, 37, 145, 17, 104, 5, 70, 28, 146, 0, 36, 97, 170, 64, 70, 21,
-        147, 11, 151, 115, 148, 112, 145, 243, 247, 159, 248, 112, 155, 218,
-        137, 155, 106, 2, 240, 7, 2, 15, 146, 15, 159, 165, 74, 8, 147, 210,
-        93, 9, 146, 9, 159, 52, 34, 122, 67, 2, 245, 60, 114, 175, 24, 16, 151,
-        31, 105, 107, 104, 35, 151, 8, 159, 42, 146, 251, 88, 15, 159, 20, 147,
-        7, 241, 54, 3, 20, 159, 87, 248, 35, 176, 15, 159, 235, 25, 219, 127,
-        9, 159, 31, 147, 36, 35, 3, 251, 7, 83, 3, 245, 22, 115, 7, 147, 216,
-        248, 0, 48, 147, 248, 156, 48, 1, 43, 45, 209, 40, 70, 57, 70, 253,
-        247, 154, 255, 3, 70, 213, 248, 232, 34, 11, 43, 40, 191, 11, 35, 74,
-        51, 2, 235, 131, 3, 90, 104, 19, 144, 1, 50, 90, 96, 0, 40, 0, 240,
-        136, 134, 152, 248, 74, 54, 11, 152, 112, 153, 19, 177, 235, 243, 41,
-        246, 1, 224, 237, 247, 14, 250, 216, 248, 28, 48, 9, 159, 3, 235, 135,
-        3, 91, 104, 27, 104, 131, 66, 7, 216, 213, 248, 80, 50, 90, 105, 1,
-        50, 90, 97, 0, 240, 110, 190, 19, 148, 9, 159, 121, 75, 219, 93, 35,
-        159, 41, 147, 215, 248, 68, 51, 41, 159, 3, 235, 71, 3, 155, 139, 12,
-        147, 12, 159, 184, 248, 192, 50, 39, 177, 27, 177, 159, 66, 40, 191,
-        31, 70, 3, 224, 12, 159, 0, 43, 24, 191, 31, 70, 12, 151, 31, 159, 79,
-        240, 0, 9, 63, 2, 44, 151, 12, 159, 43, 70, 255, 8, 45, 151, 79, 240,
-        255, 55, 69, 70, 205, 248, 160, 144, 205, 248, 156, 144, 205, 248, 56,
-        144, 205, 248, 152, 144, 205, 248, 72, 144, 205, 248, 104, 144, 205,
-        248, 68, 144, 205, 248, 136, 144, 202, 70, 205, 248, 100, 144, 205,
-        248, 120, 144, 205, 248, 132, 144, 205, 248, 96, 144, 205, 248, 24,
-        144, 205, 248, 92, 144, 205, 248, 116, 144, 205, 248, 88, 144, 13, 151,
-        205, 248, 172, 144, 152, 70, 0, 240, 134, 188, 140, 139, 136, 105, 36,
-        5, 36, 13, 16, 240, 4, 0, 4, 208, 40, 70, 113, 170, 18, 240, 193, 220,
-        17, 224, 43, 104, 147, 248, 156, 48, 1, 43, 5, 209, 213, 248, 96, 1,
-        8, 153, 41, 154, 30, 240, 127, 253, 0, 144, 112, 169, 40, 70, 114, 170,
-        113, 171, 245, 247, 20, 251, 10, 144, 10, 159, 111, 179, 67, 70, 16,
-        55, 168, 70, 29, 70, 211, 248, 80, 50, 8, 209, 90, 107, 28, 159, 1,
-        50, 90, 99, 112, 155, 0, 38, 59, 96, 0, 240, 94, 188, 154, 107, 1, 50,
-        154, 99, 187, 248, 94, 48, 163, 66, 17, 209, 149, 248, 225, 19, 11,
-        241, 75, 0, 1, 57, 33, 64, 1, 52, 36, 5, 235, 243, 238, 245, 36, 13,
-        40, 70, 89, 70, 0, 34, 254, 247, 70, 255, 171, 248, 94, 64, 28, 159,
-        0, 38, 62, 96, 0, 240, 64, 188, 112, 155, 156, 104, 152, 248, 225, 51,
-        180, 248, 140, 96, 1, 59, 54, 9, 51, 64, 4, 241, 122, 0, 27, 147, 237,
-        247, 239, 249, 8, 179, 67, 70, 168, 70, 29, 70, 211, 248, 80, 50, 187,
-        248, 94, 64, 218, 107, 1, 50, 180, 66, 218, 99, 14, 209, 1, 52, 11,
-        241, 75, 0, 27, 153, 36, 5, 235, 243, 191, 245, 36, 13, 40, 70, 89,
-        70, 10, 154, 254, 247, 23, 255, 171, 248, 94, 64, 11, 152, 112, 153,
-        1, 34, 239, 247, 132, 250, 0, 38, 31, 224, 112, 155, 154, 139, 2, 244,
-        128, 81, 137, 178, 33, 177, 34, 244, 128, 82, 1, 32, 154, 131, 43, 144,
-        155, 105, 223, 5, 27, 212, 43, 153, 64, 70, 0, 145, 50, 70, 89, 70,
-        115, 171, 255, 247, 135, 248, 144, 185, 67, 70, 6, 70, 112, 153, 11,
-        152, 1, 34, 168, 70, 29, 70, 239, 247, 98, 250, 28, 159, 62, 96, 79,
-        240, 255, 55, 10, 151, 232, 227, 138, 182, 135, 0, 84, 194, 135, 0,
-        112, 155, 27, 153, 154, 105, 79, 246, 255, 22, 208, 5, 68, 191, 34,
-        244, 128, 114, 154, 97, 11, 241, 67, 0, 235, 243, 80, 242, 35, 136,
-        30, 64, 163, 138, 3, 240, 3, 3, 211, 241, 1, 3, 56, 191, 0, 35, 32,
-        147, 0, 35, 132, 248, 72, 48, 132, 248, 73, 48, 43, 104, 147, 248, 156,
-        48, 1, 43, 45, 208, 13, 159, 1, 55, 9, 209, 27, 159, 11, 235, 7, 3,
-        219, 120, 13, 147, 112, 155, 155, 105, 195, 243, 64, 51, 23, 147, 13,
-        159, 207, 177, 31, 152, 135, 66, 4, 218, 23, 159, 167, 177, 152, 248,
-        45, 48, 155, 177, 32, 159, 231, 177, 67, 70, 168, 70, 29, 70, 79, 242,
-        249, 19, 51, 64, 67, 240, 8, 3, 35, 128, 99, 136, 1, 38, 67, 244, 128,
-        83, 99, 128, 29, 150, 153, 227, 1, 39, 1, 224, 1, 39, 23, 151, 22, 151,
-        32, 159, 63, 177, 148, 248, 59, 112, 148, 248, 58, 48, 63, 2, 6, 224,
-        1, 39, 29, 151, 148, 248, 56, 112, 148, 248, 55, 48, 63, 2, 112, 153,
-        255, 24, 138, 105, 191, 178, 18, 244, 0, 98, 33, 208, 155, 248, 0, 48,
-        3, 43, 4, 208, 27, 177, 8, 152, 144, 248, 231, 48, 35, 179, 67, 70,
-        168, 70, 29, 70, 186, 177, 8, 153, 145, 248, 231, 48, 35, 185, 155,
-        248, 0, 48, 3, 43, 0, 208, 115, 185, 148, 248, 115, 48, 132, 248, 113,
-        112, 35, 240, 8, 3, 63, 10, 132, 248, 115, 48, 132, 248, 114, 112, 2,
-        224, 67, 70, 168, 70, 29, 70, 38, 244, 96, 102, 38, 240, 6, 6, 54, 4,
-        54, 12, 38, 128, 1, 38, 80, 227, 27, 154, 11, 235, 2, 3, 219, 120, 35,
-        177, 216, 248, 80, 50, 218, 104, 1, 50, 218, 96, 148, 248, 51, 48, 11,
-        152, 36, 147, 149, 248, 74, 54, 43, 177, 235, 243, 119, 244, 24, 153,
-        9, 24, 24, 145, 4, 224, 237, 247, 89, 248, 24, 154, 18, 24, 24, 146,
-        43, 104, 147, 248, 156, 48, 1, 43, 64, 240, 205, 128, 7, 152, 8, 153,
-        3, 105, 153, 66, 3, 209, 3, 125, 15, 154, 147, 66, 9, 208, 7, 152, 15,
-        153, 8, 155, 1, 117, 3, 97, 9, 153, 64, 70, 4, 34, 255, 247, 197, 253,
-        148, 248, 115, 32, 7, 152, 66, 240, 8, 2, 132, 248, 115, 32, 148, 248,
-        112, 48, 129, 126, 153, 66, 4, 209, 193, 126, 2, 240, 240, 2, 138, 66,
-        11, 208, 7, 153, 64, 70, 139, 118, 148, 248, 115, 48, 0, 34, 35, 240,
-        15, 3, 203, 118, 9, 153, 255, 247, 168, 253, 180, 248, 76, 48, 31, 250,
-        131, 249, 27, 178, 0, 43, 13, 218, 64, 70, 9, 153, 1, 34, 255, 247,
-        156, 253, 0, 35, 0, 147, 213, 248, 96, 1, 8, 153, 74, 70, 1, 35, 30,
-        240, 31, 252, 180, 248, 140, 48, 148, 248, 112, 160, 164, 248, 74, 48,
-        20, 154, 147, 75, 10, 240, 127, 10, 146, 248, 5, 144, 20, 34, 2, 251,
-        10, 51, 16, 152, 90, 104, 3, 107, 70, 244, 0, 118, 154, 66, 18, 211,
-        3, 136, 80, 70, 155, 8, 164, 248, 72, 48, 26, 240, 72, 222, 16, 153,
-        8, 24, 131, 120, 75, 69, 6, 210, 80, 70, 26, 240, 64, 222, 16, 154,
-        16, 24, 144, 248, 2, 144, 12, 155, 64, 70, 148, 248, 112, 16, 148, 248,
-        115, 32, 254, 247, 80, 248, 164, 248, 82, 0, 32, 155, 83, 185, 64, 70,
-        148, 248, 54, 16, 148, 248, 57, 32, 12, 155, 254, 247, 68, 248, 164,
-        248, 84, 0, 4, 224, 0, 35, 132, 248, 84, 48, 132, 248, 85, 48, 79, 234,
-        9, 35, 67, 234, 9, 9, 164, 248, 80, 144, 112, 154, 15, 152, 146, 105,
-        18, 244, 0, 95, 8, 235, 0, 2, 10, 208, 210, 125, 66, 244, 128, 114,
-        164, 248, 64, 32, 152, 248, 45, 32, 19, 67, 164, 248, 80, 48, 4, 224,
-        211, 125, 44, 153, 11, 67, 164, 248, 64, 48, 43, 104, 147, 248, 156,
-        48, 1, 43, 9, 209, 36, 154, 42, 177, 83, 28, 3, 55, 3, 235, 151, 7,
-        191, 0, 0, 224, 4, 55, 191, 178, 7, 152, 3, 123, 99, 177, 195, 122,
-        211, 241, 1, 3, 56, 191, 0, 35, 195, 114, 0, 35, 3, 115, 216, 248, 80,
-        50, 218, 110, 1, 50, 218, 102, 64, 70, 57, 70, 9, 154, 253, 247, 204,
-        253, 48, 224, 6, 153, 177, 185, 4, 241, 94, 2, 39, 146, 180, 248, 94,
-        48, 70, 244, 2, 118, 3, 240, 252, 3, 180, 43, 4, 209, 1, 35, 70, 240,
-        4, 6, 34, 147, 11, 224, 196, 43, 9, 209, 1, 32, 70, 244, 0, 102, 17,
-        144, 4, 224, 70, 244, 128, 99, 79, 242, 243, 86, 30, 64, 3, 55, 79,
-        246, 252, 115, 59, 64, 36, 159, 11, 152, 122, 28, 30, 159, 3, 235, 130,
-        3, 255, 24, 112, 153, 30, 151, 236, 247, 72, 255, 33, 159, 56, 24, 128,
-        178, 33, 144, 38, 128, 6, 152, 112, 154, 47, 171, 67, 248, 32, 32, 43,
-        104, 1, 48, 147, 248, 156, 48, 6, 144, 1, 43, 0, 240, 97, 129, 1, 40,
-        64, 240, 94, 129, 22, 159, 39, 177, 148, 248, 112, 160, 148, 248, 115,
-        96, 178, 224, 27, 159, 148, 248, 54, 160, 11, 235, 7, 3, 219, 120, 31,
-        159, 148, 248, 57, 96, 187, 66, 64, 242, 167, 128, 152, 248, 84, 50,
-        0, 43, 0, 240, 162, 128, 148, 248, 112, 48, 83, 69, 0, 240, 157, 128,
-        6, 240, 207, 6, 132, 248, 57, 96, 83, 70, 213, 248, 96, 1, 8, 153, 180,
-        248, 76, 32, 30, 240, 99, 251, 163, 137, 199, 178, 3, 240, 7, 3, 2,
-        59, 32, 244, 224, 41, 3, 43, 8, 216, 223, 232, 3, 240, 2, 2, 5, 5, 73,
-        244, 128, 57, 1, 224, 73, 244, 0, 57, 9, 244, 224, 35, 179, 245, 0,
-        63, 6, 209, 181, 248, 72, 52, 3, 244, 96, 83, 179, 245, 128, 95, 9,
-        208, 25, 240, 64, 127, 10, 209, 9, 240, 127, 3, 22, 43, 6, 216, 12,
-        74, 154, 64, 3, 213, 41, 244, 224, 41, 73, 244, 128, 57, 31, 47, 4,
-        216, 7, 47, 140, 191, 0, 35, 1, 35, 14, 224, 32, 47, 10, 208, 167, 241,
-        78, 3, 14, 43, 140, 191, 0, 35, 1, 35, 4, 224, 172, 240, 135, 0, 0,
-        2, 16, 40, 1, 35, 219, 178, 0, 43, 55, 208, 213, 248, 116, 4, 41, 244,
-        128, 25, 131, 120, 41, 244, 64, 121, 1, 43, 4, 217, 42, 106, 146, 249,
-        77, 32, 1, 42, 20, 208, 9, 240, 64, 114, 178, 241, 128, 127, 29, 209,
-        1, 43, 27, 217, 43, 106, 147, 249, 77, 48, 1, 51, 22, 209, 8, 153, 75,
-        104, 89, 0, 18, 213, 14, 48, 2, 33, 235, 243, 10, 240, 104, 177, 6,
-        240, 207, 6, 70, 240, 16, 6, 132, 248, 57, 96, 216, 248, 80, 50, 73,
-        244, 128, 25, 154, 106, 1, 50, 154, 98, 6, 224, 213, 248, 116, 52, 27,
-        123, 1, 43, 8, 191, 73, 244, 128, 121, 149, 249, 32, 50, 40, 70, 1,
-        43, 8, 191, 73, 244, 0, 9, 73, 70, 181, 248, 72, 36, 17, 240, 212, 222,
-        42, 240, 127, 10, 71, 234, 10, 10, 1, 39, 160, 129, 132, 248, 54, 160,
-        40, 151, 20, 152, 79, 234, 218, 23, 10, 240, 127, 10, 208, 248, 12,
-        144, 80, 70, 26, 240, 215, 220, 246, 9, 7, 235, 64, 3, 6, 235, 67, 3,
-        14, 51, 88, 248, 35, 48, 153, 69, 3, 210, 20, 153, 201, 104, 25, 145,
-        10, 224, 80, 70, 26, 240, 198, 220, 7, 235, 64, 3, 6, 235, 67, 3, 14,
-        51, 88, 248, 35, 48, 25, 147, 12, 154, 202, 177, 147, 75, 20, 34, 54,
-        177, 2, 251, 10, 51, 15, 177, 219, 104, 9, 224, 155, 104, 7, 224, 31,
-        177, 2, 251, 10, 51, 91, 104, 2, 224, 2, 251, 10, 242, 155, 88, 45,
-        159, 155, 10, 123, 67, 25, 159, 159, 66, 40, 191, 31, 70, 25, 151, 148,
-        248, 112, 32, 2, 240, 127, 3, 67, 240, 128, 119, 26, 151, 18, 6, 32,
-        159, 68, 191, 67, 240, 129, 115, 26, 147, 148, 248, 54, 48, 39, 177,
-        5, 34, 179, 251, 242, 243, 18, 147, 9, 224, 3, 240, 127, 2, 66, 240,
-        128, 119, 18, 151, 31, 6, 68, 191, 66, 240, 129, 114, 18, 146, 34, 159,
-        23, 185, 17, 159, 0, 47, 64, 208, 26, 153, 0, 34, 35, 152, 19, 240,
-        103, 220, 18, 153, 38, 144, 0, 34, 35, 152, 19, 240, 97, 220, 40, 159,
-        14, 144, 0, 47, 49, 208, 14, 153, 181, 248, 72, 36, 40, 70, 148, 248,
-        51, 144, 17, 240, 81, 222, 32, 130, 39, 159, 110, 174, 59, 136, 17,
-        159, 40, 70, 0, 47, 12, 191, 20, 34, 14, 34, 14, 153, 0, 150, 11, 240,
-        85, 222, 6, 34, 49, 70, 4, 241, 46, 0, 232, 247, 87, 252, 14, 159, 162,
-        138, 79, 246, 207, 115, 23, 240, 64, 113, 132, 248, 51, 144, 2, 234,
-        3, 3, 6, 209, 7, 240, 127, 2, 22, 42, 2, 216, 88, 72, 144, 64, 0, 212,
-        1, 33, 67, 234, 1, 17, 161, 130, 43, 104, 147, 248, 156, 48, 1, 43,
-        31, 208, 81, 75, 20, 34, 2, 251, 10, 51, 16, 159, 90, 104, 59, 107,
-        154, 66, 8, 211, 80, 70, 26, 240, 44, 220, 56, 24, 131, 120, 6, 152,
-        152, 66, 0, 240, 176, 128, 23, 159, 47, 177, 152, 248, 45, 48, 6, 152,
-        152, 66, 0, 240, 168, 128, 20, 159, 6, 152, 123, 121, 152, 66, 13, 209,
-        161, 224, 6, 153, 19, 159, 185, 66, 8, 211, 64, 70, 9, 153, 253, 247,
-        40, 251, 0, 40, 0, 240, 151, 128, 63, 24, 19, 151, 6, 152, 50, 40, 0,
-        240, 145, 128, 21, 159, 37, 152, 12, 35, 3, 251, 7, 2, 152, 248, 44,
-        16, 210, 104, 112, 146, 73, 177, 66, 185, 254, 7, 6, 213, 39, 240, 1,
-        7, 3, 251, 7, 3, 219, 104, 21, 151, 112, 147, 112, 153, 0, 41, 107,
-        208, 139, 105, 88, 5, 92, 213, 139, 106, 8, 159, 187, 66, 88, 209, 203,
-        137, 15, 159, 3, 240, 7, 3, 187, 66, 82, 209, 149, 248, 74, 54, 11,
-        152, 19, 177, 235, 243, 155, 241, 1, 224, 236, 247, 128, 253, 235, 105,
-        113, 154, 24, 159, 3, 235, 130, 3, 91, 104, 192, 25, 27, 104, 131, 66,
-        5, 216, 216, 248, 80, 50, 90, 105, 1, 50, 90, 97, 67, 224, 43, 104,
-        147, 248, 156, 48, 1, 43, 41, 208, 11, 152, 112, 153, 236, 247, 89,
-        253, 20, 159, 59, 48, 59, 137, 30, 159, 128, 178, 152, 66, 44, 191,
-        63, 24, 255, 24, 59, 70, 25, 159, 187, 66, 45, 216, 112, 155, 152, 248,
-        225, 35, 155, 139, 1, 58, 27, 5, 27, 13, 19, 64, 152, 248, 44, 32, 91,
-        68, 219, 120, 50, 177, 31, 159, 187, 66, 52, 191, 29, 159, 22, 159,
-        47, 177, 25, 224, 13, 159, 159, 66, 1, 208, 112, 146, 22, 224, 37, 159,
-        21, 153, 56, 29, 235, 243, 112, 240, 112, 144, 15, 224, 172, 240, 135,
-        0, 0, 2, 16, 40, 43, 104, 147, 248, 156, 48, 1, 43, 4, 209, 64, 70,
-        9, 153, 4, 34, 255, 247, 180, 250, 0, 35, 112, 147, 112, 153, 0, 41,
-        127, 244, 118, 171, 67, 70, 14, 70, 168, 70, 10, 145, 29, 70, 6, 152,
-        0, 40, 0, 240, 98, 129, 3, 224, 67, 70, 0, 38, 168, 70, 29, 70, 213,
-        248, 80, 50, 6, 153, 90, 104, 82, 24, 90, 96, 216, 248, 0, 32, 146,
-        248, 156, 32, 1, 42, 0, 240, 31, 129, 26, 104, 213, 248, 232, 66, 1,
-        50, 26, 96, 68, 177, 80, 70, 26, 240, 92, 219, 44, 48, 84, 248, 32,
-        48, 1, 51, 68, 248, 32, 48, 6, 155, 90, 30, 47, 171, 83, 248, 34, 48,
-        79, 246, 255, 18, 155, 104, 25, 136, 10, 64, 66, 244, 192, 98, 0, 33,
-        26, 128, 147, 248, 51, 32, 131, 248, 51, 16, 153, 138, 30, 159, 146,
-        0, 137, 7, 194, 235, 7, 2, 5, 209, 147, 248, 59, 16, 147, 248, 58, 48,
-        9, 2, 4, 224, 147, 248, 56, 16, 147, 248, 55, 48, 9, 2, 203, 24, 155,
-        178, 223, 28, 39, 240, 3, 7, 223, 27, 47, 155, 215, 25, 156, 104, 59,
-        10, 132, 248, 114, 48, 148, 248, 115, 48, 132, 248, 113, 112, 67, 240,
-        8, 3, 132, 248, 115, 48, 227, 143, 67, 177, 64, 70, 26, 153, 58, 70,
-        11, 240, 113, 219, 79, 240, 4, 9, 224, 135, 1, 224, 79, 240, 2, 9, 180,
-        248, 64, 48, 75, 177, 64, 70, 18, 153, 58, 70, 11, 240, 99, 219, 164,
-        248, 64, 0, 4, 32, 7, 144, 1, 224, 2, 33, 7, 145, 143, 75, 20, 34, 2,
-        251, 10, 51, 16, 152, 90, 104, 3, 107, 154, 66, 9, 211, 42, 153, 33,
-        154, 104, 90, 130, 66, 56, 191, 16, 70, 128, 8, 164, 248, 72, 0, 4,
-        224, 0, 35, 132, 248, 72, 48, 132, 248, 73, 48, 180, 248, 2, 176, 34,
-        155, 31, 250, 139, 252, 11, 185, 17, 152, 72, 179, 204, 243, 128, 51,
-        141, 232, 8, 2, 17, 153, 79, 240, 1, 9, 38, 154, 26, 155, 64, 70, 205,
-        248, 20, 192, 2, 151, 205, 248, 12, 144, 11, 240, 235, 220, 164, 248,
-        96, 0, 7, 153, 31, 250, 139, 251, 79, 234, 219, 51, 0, 147, 1, 145,
-        18, 155, 64, 70, 17, 153, 14, 154, 2, 151, 205, 248, 12, 144, 11, 240,
-        217, 220, 180, 248, 96, 48, 160, 134, 227, 128, 160, 133, 221, 248,
-        20, 192, 29, 159, 119, 179, 213, 248, 80, 50, 6, 152, 154, 105, 76,
-        244, 128, 92, 18, 24, 154, 97, 218, 105, 1, 50, 218, 97, 148, 248, 115,
-        48, 164, 248, 2, 192, 67, 240, 8, 3, 132, 248, 115, 48, 148, 248, 57,
-        48, 67, 240, 8, 3, 31, 6, 132, 248, 57, 48, 16, 213, 213, 248, 80, 50,
-        26, 106, 1, 50, 26, 98, 213, 248, 232, 114, 71, 177, 80, 70, 26, 240,
-        144, 218, 86, 48, 7, 235, 128, 7, 123, 104, 1, 51, 123, 96, 148, 248,
-        57, 48, 22, 224, 148, 249, 115, 48, 0, 43, 16, 218, 213, 248, 80, 50,
-        26, 106, 1, 50, 26, 98, 213, 248, 232, 114, 71, 177, 80, 70, 26, 240,
-        120, 218, 86, 48, 7, 235, 128, 7, 123, 104, 1, 51, 123, 96, 148, 248,
-        115, 48, 19, 240, 48, 15, 16, 208, 213, 248, 80, 50, 90, 106, 1, 50,
-        90, 98, 213, 248, 232, 114, 71, 177, 80, 70, 26, 240, 98, 218, 118,
-        48, 87, 248, 32, 48, 1, 51, 71, 248, 32, 48, 13, 159, 39, 177, 213,
-        248, 80, 50, 26, 105, 1, 50, 26, 97, 180, 248, 76, 48, 154, 178, 27,
-        178, 0, 43, 8, 218, 13, 159, 8, 153, 251, 178, 0, 147, 216, 248, 96,
-        1, 1, 35, 30, 240, 0, 248, 216, 248, 0, 48, 147, 248, 156, 48, 1, 43,
-        4, 208, 46, 175, 0, 36, 221, 248, 24, 144, 35, 224, 46, 172, 0, 39,
-        10, 224, 1, 35, 0, 147, 1, 147, 64, 70, 113, 153, 84, 248, 4, 47, 97,
-        171, 248, 247, 146, 248, 1, 55, 6, 154, 151, 66, 241, 209, 19, 224,
-        9, 241, 255, 51, 224, 26, 67, 66, 67, 235, 0, 3, 0, 147, 149, 249, 46,
-        48, 64, 70, 1, 147, 113, 153, 87, 248, 4, 47, 97, 171, 248, 247, 124,
-        248, 1, 52, 76, 69, 235, 209, 0, 46, 43, 208, 112, 155, 155, 104, 179,
-        248, 76, 48, 154, 178, 27, 178, 0, 43, 6, 218, 0, 35, 0, 147, 216, 248,
-        96, 1, 8, 153, 29, 240, 190, 255, 213, 248, 80, 50, 64, 70, 154, 104,
-        113, 153, 1, 50, 154, 96, 1, 35, 0, 147, 1, 147, 112, 154, 97, 171,
-        248, 247, 90, 248, 216, 248, 0, 48, 147, 248, 156, 48, 1, 43, 8, 209,
-        40, 70, 9, 153, 2, 34, 255, 247, 25, 249, 2, 224, 111, 240, 15, 7, 10,
-        151, 10, 152, 117, 176, 189, 232, 240, 143, 0, 191, 172, 240, 135, 0,
-        45, 233, 240, 71, 208, 248, 0, 144, 20, 104, 6, 70, 144, 70, 217, 248,
-        4, 192, 0, 44, 59, 208, 165, 106, 111, 104, 23, 244, 128, 39, 14, 209,
-        208, 248, 80, 50, 33, 70, 154, 110, 96, 70, 1, 50, 154, 102, 1, 34,
-        238, 247, 190, 252, 200, 248, 0, 112, 56, 70, 189, 232, 240, 135, 71,
-        104, 239, 89, 229, 137, 5, 240, 7, 5, 54, 53, 87, 248, 37, 80, 21, 177,
-        47, 120, 2, 47, 20, 209, 214, 248, 80, 50, 154, 110, 1, 50, 154, 102,
-        37, 177, 181, 248, 84, 48, 1, 59, 165, 248, 84, 48, 96, 70, 33, 70,
-        1, 34, 238, 247, 157, 252, 0, 32, 200, 248, 0, 0, 189, 232, 240, 135,
-        153, 248, 116, 66, 52, 185, 189, 232, 240, 71, 255, 247, 207, 184, 32,
-        70, 189, 232, 240, 135, 111, 240, 15, 0, 189, 232, 240, 135, 254, 247,
-        246, 190, 45, 233, 240, 79, 6, 104, 137, 70, 49, 104, 31, 70, 145, 248,
-        156, 48, 133, 176, 1, 43, 4, 70, 144, 70, 26, 209, 122, 136, 36, 35,
-        2, 240, 7, 2, 90, 67, 2, 245, 22, 114, 131, 24, 52, 248, 2, 224, 184,
-        136, 218, 136, 93, 136, 130, 24, 146, 178, 170, 66, 218, 128, 5, 217,
-        14, 241, 255, 62, 197, 235, 14, 5, 82, 25, 218, 128, 218, 105, 16, 26,
-        216, 97, 185, 241, 0, 15, 20, 208, 217, 248, 4, 48, 88, 3, 16, 213,
-        99, 104, 89, 248, 3, 176, 184, 248, 14, 48, 3, 240, 7, 3, 54, 51, 91,
-        248, 35, 160, 186, 241, 0, 15, 3, 208, 154, 248, 0, 48, 2, 43, 7, 209,
-        32, 70, 65, 70, 58, 70, 0, 35, 253, 247, 12, 250, 0, 32, 47, 224, 151,
-        249, 25, 48, 211, 177, 139, 106, 11, 37, 201, 248, 40, 48, 13, 224,
-        1, 61, 1, 32, 237, 178, 238, 243, 5, 241, 61, 185, 32, 70, 65, 70, 58,
-        70, 43, 70, 253, 247, 246, 249, 1, 32, 25, 224, 243, 104, 211, 248,
-        112, 33, 209, 7, 236, 213, 211, 248, 116, 49, 0, 224, 26, 70, 141, 232,
-        12, 0, 0, 37, 32, 70, 73, 70, 66, 70, 59, 70, 2, 149, 3, 149, 254, 247,
-        58, 250, 48, 70, 89, 70, 82, 70, 253, 247, 75, 248, 40, 70, 5, 176,
-        189, 232, 240, 143, 0, 0, 45, 233, 248, 67, 67, 126, 5, 70, 35, 185,
-        33, 73, 33, 72, 233, 243, 141, 245, 58, 224, 32, 72, 30, 73, 233, 243,
-        136, 245, 43, 104, 147, 248, 156, 48, 1, 43, 36, 209, 213, 248, 52,
-        65, 0, 38, 27, 72, 49, 70, 180, 248, 94, 34, 180, 248, 92, 50, 233,
-        243, 120, 245, 0, 39, 180, 248, 88, 130, 11, 224, 79, 234, 73, 1, 40,
-        70, 18, 240, 199, 222, 57, 70, 3, 70, 74, 70, 18, 72, 233, 243, 105,
-        245, 1, 55, 180, 248, 90, 50, 7, 235, 8, 9, 153, 69, 237, 221, 1, 54,
-        36, 52, 4, 46, 221, 209, 213, 248, 52, 49, 11, 72, 211, 248, 80, 50,
-        211, 248, 160, 16, 211, 248, 152, 32, 211, 248, 156, 48, 233, 243, 81,
-        245, 0, 32, 189, 232, 248, 131, 215, 222, 3, 0, 49, 221, 3, 0, 142,
-        31, 136, 0, 62, 221, 3, 0, 88, 221, 3, 0, 115, 221, 3, 0, 45, 233, 247,
-        67, 152, 70, 67, 104, 7, 42, 5, 70, 207, 88, 7, 217, 208, 248, 80, 50,
-        211, 248, 164, 32, 1, 50, 195, 248, 164, 32, 108, 224, 54, 50, 87, 248,
-        34, 64, 0, 44, 103, 208, 148, 248, 234, 96, 3, 35, 35, 112, 46, 179,
-        40, 224, 4, 241, 75, 9, 72, 70, 49, 70, 234, 243, 157, 243, 176, 177,
-        72, 70, 49, 70, 4, 241, 67, 9, 234, 243, 60, 243, 72, 70, 49, 70, 234,
-        243, 146, 243, 88, 177, 72, 70, 49, 70, 234, 243, 51, 243, 163, 25,
-        0, 34, 218, 112, 180, 248, 84, 48, 1, 59, 164, 248, 84, 48, 40, 70,
-        57, 70, 34, 70, 253, 247, 178, 255, 1, 54, 182, 178, 149, 248, 225,
-        51, 179, 66, 214, 216, 180, 248, 84, 48, 27, 177, 184, 241, 0, 15, 4,
-        209, 49, 224, 43, 104, 152, 104, 255, 243, 71, 246, 212, 248, 244, 32,
-        107, 104, 214, 88, 162, 120, 0, 35, 54, 50, 70, 248, 34, 48, 41, 104,
-        162, 120, 0, 147, 1, 147, 72, 104, 1, 35, 6, 241, 16, 1, 234, 243, 198,
-        245, 43, 104, 34, 70, 211, 248, 120, 4, 12, 73, 1, 35, 12, 240, 254,
-        255, 32, 70, 238, 247, 24, 251, 50, 104, 40, 104, 210, 248, 248, 48,
-        11, 185, 19, 105, 219, 104, 217, 104, 0, 34, 79, 244, 0, 115, 3, 176,
-        189, 232, 240, 67, 246, 247, 133, 184, 3, 176, 189, 232, 240, 131, 193,
-        128, 1, 0, 240, 181, 3, 104, 133, 176, 4, 70, 1, 169, 211, 248, 36,
-        1, 0, 34, 80, 240, 252, 219, 24, 224, 107, 104, 91, 3, 21, 213, 99,
-        104, 0, 38, 239, 88, 215, 248, 216, 32, 82, 177, 19, 120, 1, 43, 7,
-        209, 178, 248, 84, 32, 34, 177, 32, 70, 41, 70, 50, 70, 255, 247, 95,
-        255, 1, 54, 246, 178, 4, 55, 8, 46, 236, 209, 35, 104, 1, 169, 211,
-        248, 36, 1, 29, 240, 96, 252, 5, 70, 0, 40, 221, 209, 5, 176, 240, 189,
-        67, 104, 247, 181, 207, 88, 5, 70, 14, 70, 0, 36, 34, 70, 1, 52, 1,
-        35, 40, 70, 49, 70, 228, 178, 255, 247, 65, 255, 8, 44, 245, 209, 42,
-        104, 0, 35, 0, 147, 80, 104, 7, 241, 16, 1, 1, 34, 234, 243, 76, 244,
-        254, 189, 255, 247, 228, 191, 48, 181, 3, 104, 133, 176, 4, 70, 1, 169,
-        211, 248, 36, 1, 0, 34, 80, 240, 177, 219, 6, 224, 107, 104, 90, 3,
-        3, 213, 32, 70, 41, 70, 255, 247, 210, 255, 35, 104, 1, 169, 211, 248,
-        36, 1, 29, 240, 39, 252, 5, 70, 0, 40, 239, 209, 32, 70, 252, 247, 108,
-        254, 40, 70, 5, 176, 48, 189, 112, 181, 68, 104, 13, 70, 225, 66, 8,
-        208, 14, 89, 54, 177, 255, 247, 186, 255, 48, 70, 238, 247, 139, 250,
-        0, 35, 43, 81, 112, 189, 0, 0, 45, 233, 240, 79, 67, 104, 133, 176,
-        81, 248, 3, 160, 146, 249, 0, 48, 5, 70, 0, 43, 14, 70, 208, 248, 0,
-        144, 2, 218, 208, 248, 80, 50, 40, 224, 148, 121, 83, 121, 209, 120,
-        67, 234, 4, 35, 3, 240, 60, 8, 79, 234, 152, 8, 184, 241, 7, 15, 16,
-        121, 25, 216, 8, 241, 54, 2, 90, 248, 34, 64, 164, 177, 34, 120, 2,
-        42, 17, 209, 81, 234, 0, 33, 10, 209, 168, 124, 195, 243, 64, 2, 144,
-        66, 5, 209, 155, 9, 149, 248, 225, 3, 218, 178, 144, 66, 13, 210, 80,
-        70, 33, 70, 253, 247, 8, 248, 213, 248, 80, 50, 211, 248, 164, 32, 1,
-        50, 195, 248, 164, 32, 5, 176, 189, 232, 240, 143, 99, 112, 164, 248,
-        96, 32, 164, 248, 248, 16, 4, 241, 252, 0, 252, 247, 78, 255, 6, 235,
-        72, 3, 179, 248, 198, 48, 1, 34, 27, 5, 27, 13, 164, 248, 90, 48, 164,
-        248, 94, 48, 1, 59, 27, 5, 34, 112, 27, 13, 164, 248, 92, 48, 164, 248,
-        88, 48, 213, 248, 80, 50, 40, 70, 89, 109, 137, 24, 89, 101, 33, 70,
-        253, 247, 223, 254, 214, 248, 248, 48, 11, 185, 51, 105, 219, 104, 218,
-        104, 12, 32, 19, 29, 2, 147, 46, 75, 47, 70, 19, 248, 8, 16, 77, 70,
-        0, 251, 1, 34, 146, 138, 79, 240, 0, 11, 3, 146, 161, 70, 68, 224, 223,
-        248, 160, 224, 2, 152, 30, 248, 8, 16, 234, 243, 24, 244, 4, 70, 0,
-        40, 61, 208, 131, 105, 89, 0, 5, 213, 130, 106, 150, 66, 2, 209, 19,
-        244, 128, 99, 9, 208, 223, 248, 120, 224, 40, 70, 2, 153, 34, 70, 30,
-        248, 8, 48, 241, 247, 16, 252, 7, 224, 0, 147, 40, 70, 10, 241, 16,
-        1, 34, 70, 67, 70, 17, 240, 78, 219, 208, 185, 1, 34, 104, 104, 33,
-        70, 238, 247, 18, 250, 43, 104, 211, 248, 136, 48, 26, 106, 1, 50, 26,
-        98, 215, 248, 80, 50, 218, 107, 1, 50, 218, 99, 51, 105, 27, 177, 219,
-        104, 26, 106, 1, 50, 26, 98, 214, 248, 92, 49, 1, 51, 198, 248, 92,
-        49, 11, 241, 1, 11, 31, 250, 139, 251, 3, 155, 155, 69, 183, 209, 56,
-        70, 81, 70, 74, 70, 0, 35, 5, 176, 189, 232, 240, 79, 253, 247, 206,
-        189, 72, 194, 135, 0, 208, 248, 80, 50, 218, 109, 1, 50, 218, 101, 112,
-        71, 16, 181, 67, 104, 4, 70, 200, 88, 211, 120, 3, 240, 60, 3, 155,
-        8, 7, 43, 7, 217, 212, 248, 80, 50, 211, 248, 164, 32, 1, 50, 195, 248,
-        164, 32, 16, 189, 146, 249, 0, 32, 0, 42, 15, 218, 54, 51, 80, 248,
-        35, 16, 33, 177, 11, 120, 2, 43, 1, 209, 252, 247, 75, 255, 212, 248,
-        80, 50, 211, 248, 164, 32, 1, 50, 195, 248, 164, 32, 16, 189, 1, 32,
-        112, 71, 45, 233, 243, 65, 4, 104, 0, 34, 35, 104, 6, 70, 131, 248,
-        66, 32, 144, 248, 221, 131, 13, 70, 79, 250, 136, 243, 179, 241, 255,
-        63, 8, 191, 79, 240, 2, 8, 225, 177, 35, 104, 147, 248, 79, 112, 23,
-        240, 3, 7, 44, 208, 255, 247, 227, 255, 104, 179, 184, 241, 2, 15, 16,
-        209, 79, 244, 0, 114, 3, 35, 0, 147, 32, 70, 19, 70, 4, 33, 16, 240,
-        129, 223, 35, 104, 64, 34, 163, 248, 96, 32, 79, 240, 1, 8, 64, 39,
-        6, 224, 35, 104, 6, 34, 79, 240, 0, 8, 163, 248, 96, 32, 71, 70, 35,
-        104, 147, 248, 66, 48, 171, 66, 18, 208, 214, 248, 80, 2, 0, 33, 188,
-        34, 233, 243, 221, 242, 35, 104, 131, 248, 66, 80, 8, 224, 111, 240,
-        22, 5, 184, 70, 5, 224, 111, 240, 22, 5, 7, 70, 128, 70, 0, 224, 0,
-        37, 35, 104, 147, 248, 156, 32, 66, 69, 13, 208, 131, 248, 156, 128,
-        3, 35, 0, 147, 32, 70, 2, 33, 64, 34, 59, 70, 16, 240, 74, 223, 32,
-        70, 1, 33, 9, 240, 54, 222, 40, 70, 189, 232, 252, 129, 45, 233, 240,
-        65, 30, 70, 67, 104, 4, 70, 81, 248, 3, 128, 21, 70, 152, 248, 4, 112,
-        0, 47, 51, 208, 0, 104, 46, 240, 54, 216, 2, 40, 52, 220, 5, 47, 15,
-        216, 35, 104, 147, 248, 17, 50, 91, 177, 5, 244, 224, 35, 179, 245,
-        0, 63, 6, 209, 235, 178, 23, 43, 3, 220, 124, 51, 56, 248, 19, 0, 128,
-        185, 1, 35, 199, 241, 16, 7, 19, 250, 7, 247, 21, 240, 64, 127, 1, 209,
-        232, 178, 2, 224, 40, 70, 25, 240, 229, 255, 125, 30, 40, 24, 176, 251,
-        247, 240, 6, 155, 176, 66, 24, 128, 10, 221, 134, 27, 240, 28, 72, 191,
-        176, 29, 128, 16, 192, 178, 189, 232, 240, 129, 56, 70, 189, 232, 240,
-        129, 0, 32, 189, 232, 240, 129, 6, 39, 218, 231, 19, 181, 8, 34, 4,
-        70, 0, 33, 104, 70, 233, 243, 106, 242, 33, 104, 6, 34, 4, 49, 104,
-        70, 231, 247, 12, 254, 32, 70, 72, 33, 8, 34, 107, 70, 22, 240, 106,
-        218, 28, 189, 0, 0, 45, 233, 240, 65, 208, 248, 232, 34, 0, 37, 7, 70,
-        14, 70, 168, 70, 43, 70, 210, 248, 176, 16, 4, 50, 0, 41, 24, 191, 152,
-        70, 1, 51, 24, 43, 13, 68, 245, 209, 40, 240, 7, 8, 48, 70, 24, 73,
-        8, 241, 7, 8, 233, 243, 185, 244, 5, 187, 34, 224, 215, 248, 232, 50,
-        4, 241, 44, 2, 83, 248, 34, 32, 100, 35, 83, 67, 48, 70, 179, 251, 245,
-        243, 16, 73, 233, 243, 169, 244, 16, 75, 35, 64, 0, 43, 3, 218, 1, 59,
-        99, 240, 7, 3, 1, 51, 7, 43, 5, 209, 68, 69, 3, 208, 48, 70, 10, 73,
-        233, 243, 153, 244, 1, 52, 0, 224, 0, 36, 68, 69, 220, 221, 48, 70,
-        7, 73, 233, 243, 144, 244, 0, 32, 189, 232, 240, 129, 0, 191, 171, 221,
-        3, 0, 181, 221, 3, 0, 7, 0, 0, 128, 192, 221, 3, 0, 236, 252, 135, 0,
-        45, 233, 247, 79, 59, 75, 208, 248, 0, 128, 130, 70, 24, 104, 216, 248,
-        0, 48, 139, 70, 147, 248, 156, 48, 1, 144, 1, 43, 104, 209, 186, 248,
-        16, 48, 67, 185, 157, 248, 7, 16, 157, 248, 5, 32, 141, 248, 7, 48,
-        138, 24, 141, 248, 5, 32, 154, 248, 12, 48, 91, 185, 154, 248, 11, 48,
-        67, 185, 157, 248, 4, 16, 157, 248, 5, 32, 141, 248, 4, 48, 138, 24,
-        141, 248, 5, 32, 64, 70, 210, 33, 18, 240, 90, 219, 0, 241, 50, 7, 127,
-        0, 4, 70, 191, 178, 0, 38, 1, 35, 179, 64, 19, 234, 11, 15, 45, 208,
-        36, 35, 115, 67, 3, 245, 22, 115, 10, 235, 3, 5, 42, 248, 3, 64, 1,
-        171, 243, 92, 98, 30, 154, 24, 171, 114, 106, 128, 64, 70, 57, 70, 34,
-        70, 172, 128, 236, 128, 22, 240, 196, 217, 7, 241, 4, 9, 64, 70, 185,
-        28, 106, 136, 22, 240, 189, 217, 64, 70, 73, 70, 170, 136, 22, 240,
-        184, 217, 64, 70, 185, 29, 234, 136, 22, 240, 179, 217, 64, 70, 7, 241,
-        8, 1, 0, 34, 22, 240, 173, 217, 165, 248, 8, 144, 1, 171, 243, 92, 1,
-        54, 228, 24, 10, 55, 4, 46, 164, 178, 196, 209, 218, 248, 80, 50, 0,
-        34, 195, 248, 160, 32, 195, 248, 156, 32, 195, 248, 152, 32, 189, 232,
-        254, 143, 122, 179, 3, 0, 16, 181, 0, 33, 4, 70, 188, 34, 208, 248,
-        80, 2, 233, 243, 134, 241, 212, 248, 232, 2, 192, 179, 0, 33, 48, 34,
-        233, 243, 127, 241, 212, 248, 232, 2, 0, 33, 48, 34, 48, 48, 233, 243,
-        120, 241, 212, 248, 232, 2, 0, 33, 48, 34, 96, 48, 233, 243, 113, 241,
-        212, 248, 232, 2, 0, 33, 40, 34, 0, 245, 52, 112, 233, 243, 105, 241,
-        212, 248, 232, 2, 0, 33, 124, 34, 176, 48, 233, 243, 98, 241, 212, 248,
-        232, 2, 0, 33, 124, 34, 0, 245, 174, 112, 233, 243, 90, 241, 212, 248,
-        232, 2, 0, 33, 124, 34, 0, 245, 236, 112, 233, 243, 82, 241, 212, 248,
-        232, 2, 0, 33, 0, 245, 21, 112, 124, 34, 233, 243, 74, 241, 0, 33, 35,
-        104, 196, 248, 200, 19, 196, 248, 204, 19, 196, 248, 208, 19, 91, 126,
-        195, 177, 212, 248, 232, 2, 32, 177, 0, 245, 150, 112, 48, 34, 233,
-        243, 56, 241, 32, 104, 3, 104, 147, 248, 156, 48, 1, 43, 10, 209, 232,
-        33, 0, 34, 22, 240, 54, 217, 32, 104, 250, 33, 0, 34, 189, 232, 16,
-        64, 22, 240, 47, 153, 16, 189, 247, 181, 29, 70, 0, 35, 4, 70, 15, 70,
-        22, 70, 255, 247, 2, 252, 189, 248, 32, 48, 50, 70, 0, 147, 32, 104,
-        43, 70, 57, 70, 25, 240, 161, 223, 212, 248, 80, 50, 211, 248, 168,
-        32, 1, 50, 195, 248, 168, 32, 254, 189, 45, 233, 240, 79, 7, 104, 11,
-        70, 135, 176, 6, 70, 147, 70, 215, 248, 36, 1, 3, 169, 26, 70, 80, 240,
-        108, 216, 58, 224, 99, 104, 90, 3, 55, 213, 148, 248, 36, 48, 155, 7,
-        51, 213, 215, 248, 52, 49, 0, 37, 91, 104, 84, 248, 3, 160, 208, 70,
-        75, 250, 5, 243, 216, 7, 95, 250, 133, 249, 33, 213, 216, 248, 216,
-        48, 147, 177, 27, 120, 1, 59, 219, 178, 1, 43, 7, 216, 39, 35, 0, 147,
-        48, 70, 33, 70, 74, 70, 1, 35, 255, 247, 181, 255, 48, 70, 33, 70, 74,
-        70, 0, 35, 255, 247, 185, 251, 51, 104, 10, 241, 16, 1, 26, 104, 0,
-        35, 0, 147, 1, 147, 80, 105, 1, 35, 42, 70, 234, 243, 213, 241, 1, 53,
-        8, 45, 8, 241, 4, 8, 210, 209, 215, 248, 36, 1, 3, 169, 29, 240, 175,
-        248, 4, 70, 0, 40, 188, 209, 7, 176, 189, 232, 240, 143, 48, 181, 208,
-        248, 0, 84, 144, 248, 192, 67, 77, 89, 180, 177, 1, 42, 4, 209, 105,
-        137, 219, 178, 11, 67, 107, 129, 48, 189, 108, 137, 226, 178, 34, 234,
-        3, 2, 149, 249, 8, 48, 106, 129, 1, 51, 6, 209, 98, 64, 210, 178, 26,
-        177, 189, 232, 48, 64, 255, 247, 142, 191, 48, 189, 16, 181, 144, 248,
-        192, 51, 208, 248, 0, 68, 12, 89, 115, 177, 148, 249, 8, 48, 1, 42,
-        8, 191, 79, 240, 255, 50, 147, 66, 6, 208, 34, 114, 34, 185, 255, 34,
-        189, 232, 16, 64, 255, 247, 119, 191, 16, 189, 0, 0, 45, 233, 240, 79,
-        208, 248, 0, 128, 137, 176, 5, 70, 5, 169, 216, 248, 36, 1, 0, 34, 79,
-        240, 0, 11, 79, 240, 224, 223, 218, 70, 230, 224, 115, 104, 3, 244,
-        128, 50, 0, 42, 24, 191, 79, 240, 1, 11, 89, 3, 64, 241, 221, 128, 216,
-        248, 52, 49, 0, 39, 91, 104, 86, 248, 3, 144, 205, 248, 12, 144, 3,
-        154, 210, 248, 216, 64, 0, 44, 0, 240, 199, 128, 35, 120, 3, 43, 0,
-        242, 195, 128, 223, 232, 3, 240, 173, 2, 120, 149, 1, 35, 40, 70, 73,
-        70, 34, 70, 253, 247, 202, 250, 148, 248, 237, 48, 0, 43, 49, 208, 1,
-        43, 41, 209, 163, 120, 12, 34, 2, 251, 3, 147, 103, 74, 27, 140, 17,
-        104, 155, 8, 0, 41, 1, 220, 8, 33, 17, 96, 18, 104, 79, 240, 0, 10,
-        147, 66, 168, 191, 19, 70, 20, 224, 161, 120, 9, 241, 16, 0, 2, 147,
-        234, 243, 171, 240, 216, 248, 0, 32, 1, 70, 80, 105, 1, 34, 237, 247,
-        194, 254, 213, 248, 80, 34, 2, 155, 209, 107, 10, 241, 1, 10, 1, 49,
-        209, 99, 154, 69, 232, 219, 40, 70, 33, 70, 0, 34, 253, 247, 63, 251,
-        128, 224, 148, 248, 238, 32, 49, 42, 8, 217, 39, 35, 0, 147, 40, 70,
-        49, 70, 58, 70, 1, 35, 255, 247, 228, 254, 115, 224, 148, 248, 236,
-        32, 34, 177, 132, 248, 236, 48, 132, 248, 241, 48, 107, 224, 180, 248,
-        84, 48, 35, 177, 148, 248, 241, 48, 1, 51, 132, 248, 241, 48, 64, 70,
-        49, 70, 34, 70, 252, 247, 196, 251, 148, 248, 241, 48, 2, 43, 90, 209,
-        213, 248, 80, 50, 40, 70, 90, 110, 49, 70, 1, 50, 90, 102, 39, 35, 0,
-        147, 58, 70, 1, 35, 255, 247, 189, 254, 40, 70, 49, 70, 58, 70, 1, 35,
-        255, 247, 193, 250, 70, 224, 148, 248, 239, 48, 90, 28, 3, 43, 132,
-        248, 239, 32, 4, 221, 72, 70, 33, 70, 252, 247, 243, 251, 60, 224, 170,
-        124, 235, 124, 0, 146, 149, 248, 47, 32, 64, 70, 1, 146, 49, 70, 58,
-        70, 0, 240, 51, 250, 213, 248, 80, 50, 26, 109, 1, 50, 26, 101, 43,
-        224, 148, 248, 240, 48, 90, 28, 1, 43, 132, 248, 240, 32, 9, 217, 213,
-        248, 80, 50, 40, 70, 90, 110, 49, 70, 1, 50, 90, 102, 58, 70, 1, 35,
-        3, 224, 40, 70, 49, 70, 58, 70, 0, 35, 255, 247, 140, 250, 19, 224,
-        148, 248, 242, 48, 90, 28, 59, 43, 132, 248, 242, 32, 12, 217, 40, 70,
-        73, 70, 58, 70, 0, 35, 252, 247, 237, 255, 40, 177, 4, 35, 128, 248,
-        239, 48, 1, 224, 79, 240, 1, 10, 1, 55, 3, 155, 255, 178, 4, 51, 8,
-        47, 3, 147, 127, 244, 43, 175, 216, 248, 36, 1, 5, 169, 28, 240, 118,
-        255, 6, 70, 0, 40, 127, 244, 16, 175, 149, 248, 224, 51, 43, 177, 187,
-        241, 0, 15, 3, 208, 138, 240, 1, 11, 0, 224, 155, 70, 133, 248, 223,
-        179, 0, 32, 9, 176, 189, 232, 240, 143, 184, 17, 4, 0, 45, 233, 255,
-        71, 0, 35, 3, 147, 13, 155, 4, 70, 3, 43, 144, 70, 12, 158, 14, 159,
-        4, 217, 3, 168, 49, 70, 4, 34, 231, 247, 8, 251, 212, 248, 0, 144, 17,
-        153, 72, 70, 221, 248, 12, 160, 7, 240, 241, 252, 5, 70, 184, 241, 75,
-        15, 0, 242, 101, 129, 223, 232, 24, 240, 76, 0, 81, 0, 87, 0, 98, 0,
-        109, 0, 113, 0, 99, 1, 123, 0, 99, 1, 174, 0, 219, 0, 221, 0, 99, 1,
-        99, 1, 240, 0, 243, 0, 99, 1, 99, 1, 254, 0, 1, 1, 99, 1, 99, 1, 99,
-        1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99,
-        1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99,
-        1, 99, 1, 99, 1, 99, 1, 230, 0, 224, 0, 237, 0, 233, 0, 5, 1, 99, 1,
-        10, 1, 13, 1, 99, 1, 99, 1, 31, 1, 34, 1, 99, 1, 99, 1, 99, 1, 99, 1,
-        99, 1, 99, 1, 42, 1, 45, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1,
-        99, 1, 99, 1, 49, 1, 67, 1, 217, 248, 0, 48, 147, 248, 66, 48, 29, 224,
-        32, 70, 157, 248, 12, 16, 255, 247, 220, 251, 18, 225, 51, 120, 7, 43,
-        0, 242, 2, 129, 228, 24, 163, 122, 56, 70, 115, 112, 49, 70, 2, 34,
-        221, 224, 59, 120, 7, 43, 0, 242, 247, 128, 228, 24, 123, 120, 0, 51,
-        24, 191, 1, 35, 163, 114, 234, 224, 148, 248, 39, 48, 59, 96, 230, 224,
-        3, 155, 7, 43, 0, 243, 241, 128, 4, 43, 64, 243, 238, 128, 132, 248,
-        39, 48, 220, 224, 217, 248, 0, 48, 147, 248, 66, 32, 0, 42, 0, 240,
-        219, 128, 147, 248, 67, 48, 0, 43, 0, 240, 214, 128, 187, 121, 7, 43,
-        0, 242, 210, 128, 72, 70, 41, 70, 58, 70, 28, 240, 229, 254, 0, 40,
-        0, 240, 205, 128, 99, 104, 193, 88, 0, 41, 0, 240, 203, 128, 67, 104,
-        91, 3, 64, 241, 199, 128, 186, 121, 2, 241, 54, 3, 81, 248, 35, 48,
-        0, 43, 64, 240, 182, 128, 32, 70, 1, 35, 252, 247, 252, 254, 0, 40,
-        12, 191, 79, 240, 255, 48, 0, 32, 187, 224, 217, 248, 0, 48, 147, 248,
-        66, 32, 0, 42, 0, 240, 168, 128, 147, 248, 67, 48, 0, 43, 0, 240, 163,
-        128, 187, 121, 7, 43, 0, 242, 159, 128, 41, 70, 72, 70, 58, 70, 28,
-        240, 178, 254, 1, 70, 0, 40, 0, 240, 153, 128, 99, 104, 195, 88, 0,
-        43, 0, 240, 151, 128, 67, 104, 88, 3, 64, 241, 147, 128, 251, 121, 37,
-        32, 0, 51, 186, 121, 24, 191, 1, 35, 0, 144, 32, 70, 255, 247, 81, 253,
-        124, 224, 35, 122, 145, 231, 3, 155, 35, 114, 119, 224, 32, 70, 157,
-        248, 12, 16, 252, 247, 192, 248, 113, 224, 148, 248, 196, 51, 133, 231,
-        3, 155, 132, 248, 216, 51, 106, 224, 148, 248, 216, 51, 126, 231, 148,
-        249, 40, 48, 123, 231, 3, 155, 0, 43, 111, 208, 11, 43, 109, 220, 132,
-        248, 40, 48, 32, 70, 252, 247, 87, 249, 89, 224, 153, 248, 190, 50,
-        109, 231, 3, 155, 137, 248, 190, 50, 82, 224, 217, 248, 0, 48, 147,
-        248, 156, 48, 100, 231, 148, 249, 221, 51, 97, 231, 3, 155, 90, 28,
-        3, 42, 84, 216, 79, 240, 48, 65, 145, 64, 80, 213, 132, 248, 221, 51,
-        217, 248, 0, 48, 32, 70, 147, 248, 66, 16, 255, 247, 20, 251, 56, 224,
-        148, 248, 224, 51, 76, 231, 26, 241, 0, 10, 24, 191, 79, 240, 1, 10,
-        132, 248, 224, 163, 45, 224, 148, 248, 226, 51, 65, 231, 3, 155, 132,
-        248, 226, 51, 38, 224, 212, 248, 0, 52, 0, 33, 196, 88, 6, 34, 48, 70,
-        232, 243, 24, 246, 35, 122, 56, 70, 51, 112, 100, 137, 49, 70, 180,
-        128, 6, 34, 231, 247, 183, 249, 20, 224, 190, 136, 122, 136, 6, 234,
-        2, 3, 219, 178, 34, 234, 6, 6, 246, 178, 35, 177, 32, 70, 41, 70, 1,
-        34, 255, 247, 71, 253, 182, 177, 32, 70, 41, 70, 0, 34, 51, 70, 255,
-        247, 64, 253, 0, 32, 15, 224, 111, 240, 24, 0, 12, 224, 111, 240, 1,
-        0, 9, 224, 111, 240, 29, 0, 6, 224, 111, 240, 22, 0, 3, 224, 111, 240,
-        28, 0, 0, 224, 48, 70, 4, 176, 189, 232, 240, 135, 27, 6, 16, 181, 4,
-        70, 7, 213, 208, 248, 80, 50, 211, 248, 164, 32, 1, 50, 195, 248, 164,
-        32, 16, 189, 0, 35, 255, 247, 185, 248, 212, 248, 80, 50, 211, 248,
-        172, 32, 1, 50, 195, 248, 172, 32, 16, 189, 1, 41, 208, 248, 52, 49,
-        1, 209, 32, 34, 1, 224, 79, 244, 128, 114, 163, 248, 228, 35, 112, 71,
-        1, 35, 252, 247, 250, 184, 0, 35, 252, 247, 247, 184, 55, 181, 0, 35,
-        1, 147, 7, 155, 4, 70, 3, 43, 21, 70, 4, 217, 1, 168, 6, 153, 4, 34,
-        231, 247, 87, 249, 7, 45, 9, 209, 212, 248, 52, 1, 255, 247, 27, 252,
-        212, 248, 56, 1, 0, 240, 42, 254, 0, 32, 1, 224, 111, 240, 22, 0, 62,
-        189, 56, 181, 4, 70, 13, 70, 208, 248, 52, 1, 255, 247, 61, 251, 212,
-        248, 56, 1, 41, 70, 0, 240, 254, 252, 0, 32, 56, 189, 45, 233, 240,
-        67, 144, 248, 116, 114, 135, 176, 5, 70, 12, 70, 22, 70, 153, 70, 0,
-        47, 112, 209, 11, 105, 1, 241, 20, 8, 3, 241, 188, 2, 0, 146, 9, 34,
-        1, 146, 5, 170, 2, 146, 208, 33, 66, 70, 194, 51, 14, 240, 166, 223,
-        1, 70, 0, 40, 97, 208, 5, 155, 3, 34, 26, 112, 95, 112, 149, 248, 62,
-        35, 154, 112, 58, 185, 181, 248, 62, 35, 1, 50, 165, 248, 62, 35, 154,
-        120, 1, 50, 154, 112, 178, 0, 2, 240, 60, 2, 66, 234, 137, 25, 157,
-        248, 56, 32, 82, 0, 2, 240, 2, 2, 73, 234, 2, 9, 157, 248, 60, 32, 31,
-        250, 137, 249, 131, 248, 3, 144, 90, 113, 79, 234, 25, 41, 0, 34, 154,
-        113, 131, 248, 4, 144, 4, 235, 70, 2, 178, 248, 198, 32, 18, 1, 146,
-        178, 218, 113, 18, 10, 26, 114, 203, 137, 6, 240, 7, 2, 35, 240, 7,
-        3, 19, 67, 203, 129, 212, 248, 248, 48, 11, 185, 35, 105, 219, 104,
-        218, 104, 40, 70, 35, 70, 18, 240, 160, 223, 33, 105, 143, 121, 247,
-        185, 8, 124, 232, 177, 209, 248, 4, 49, 24, 120, 200, 177, 14, 75, 14,
-        74, 155, 93, 148, 248, 218, 0, 211, 92, 24, 65, 16, 240, 1, 0, 15, 208,
-        40, 70, 66, 70, 59, 70, 0, 151, 1, 150, 18, 240, 148, 223, 56, 70, 6,
-        224, 111, 240, 24, 0, 3, 224, 111, 240, 26, 0, 0, 224, 0, 32, 7, 176,
-        189, 232, 240, 131, 138, 182, 135, 0, 84, 194, 135, 0, 45, 233, 255,
-        71, 144, 248, 116, 162, 153, 70, 6, 70, 13, 70, 23, 70, 14, 155, 186,
-        241, 0, 15, 3, 208, 1, 34, 26, 112, 0, 36, 78, 224, 131, 248, 0, 160,
-        20, 33, 14, 240, 249, 222, 4, 70, 0, 40, 70, 208, 208, 248, 8, 128,
-        111, 240, 123, 3, 136, 248, 0, 48, 5, 241, 20, 1, 6, 34, 136, 248, 1,
-        160, 136, 248, 2, 160, 136, 248, 3, 160, 8, 241, 4, 0, 231, 247, 133,
-        248, 41, 105, 6, 34, 8, 241, 10, 0, 194, 49, 231, 247, 126, 248, 189,
-        248, 48, 32, 79, 242, 1, 3, 2, 240, 1, 2, 66, 234, 7, 50, 19, 64, 67,
-        240, 4, 3, 79, 234, 9, 25, 168, 248, 16, 48, 168, 248, 18, 144, 227,
-        137, 7, 240, 7, 7, 35, 240, 7, 3, 31, 67, 213, 248, 248, 48, 231, 129,
-        11, 185, 43, 105, 219, 104, 3, 33, 0, 34, 141, 232, 6, 0, 157, 248,
-        52, 32, 33, 70, 2, 146, 218, 104, 48, 70, 43, 70, 245, 247, 140, 251,
-        0, 40, 8, 191, 0, 36, 32, 70, 4, 176, 189, 232, 240, 135, 48, 181, 133,
-        176, 4, 70, 10, 70, 208, 248, 36, 1, 1, 169, 79, 240, 8, 220, 12, 224,
-        107, 104, 88, 3, 9, 213, 212, 248, 52, 1, 41, 70, 255, 247, 40, 248,
-        212, 248, 56, 1, 41, 70, 25, 240, 176, 219, 212, 248, 36, 1, 1, 169,
-        28, 240, 121, 252, 5, 70, 0, 40, 234, 209, 5, 176, 48, 189, 45, 233,
-        240, 79, 1, 235, 130, 3, 91, 104, 167, 176, 4, 70, 136, 70, 145, 70,
-        14, 104, 0, 43, 96, 208, 208, 248, 56, 33, 0, 39, 146, 248, 42, 80,
-        218, 136, 1, 61, 21, 64, 73, 224, 153, 120, 1, 57, 153, 112, 33, 104,
-        145, 248, 213, 16, 49, 185, 41, 72, 0, 104, 80, 248, 34, 112, 42, 29,
-        35, 248, 18, 16, 1, 34, 26, 113, 218, 136, 1, 50, 18, 5, 18, 13, 218,
-        128, 34, 104, 146, 248, 213, 32, 34, 177, 90, 25, 0, 33, 130, 248, 136,
-        16, 35, 224, 123, 106, 32, 70, 0, 147, 49, 70, 59, 70, 3, 170, 26, 240,
-        199, 216, 214, 248, 16, 160, 214, 248, 48, 176, 6, 241, 20, 1, 6, 34,
-        36, 168, 230, 247, 231, 255, 32, 70, 49, 70, 3, 170, 250, 247, 46, 249,
-        32, 70, 81, 70, 36, 170, 91, 70, 28, 240, 92, 252, 216, 177, 176, 66,
-        25, 209, 8, 235, 137, 3, 91, 104, 171, 177, 212, 248, 56, 33, 1, 53,
-        146, 248, 42, 32, 1, 58, 21, 64, 173, 178, 42, 29, 51, 248, 18, 32,
-        0, 42, 176, 209, 33, 104, 145, 248, 213, 16, 33, 177, 89, 25, 145, 248,
-        136, 16, 1, 41, 167, 208, 39, 176, 189, 232, 240, 143, 32, 7, 0, 0,
-        45, 233, 240, 71, 31, 70, 1, 235, 130, 3, 144, 70, 90, 104, 166, 176,
-        5, 70, 14, 70, 12, 104, 0, 42, 91, 209, 92, 224, 213, 248, 56, 49, 208,
-        136, 147, 248, 42, 16, 1, 57, 1, 64, 8, 29, 50, 248, 16, 192, 188, 241,
-        0, 15, 9, 209, 40, 104, 144, 248, 213, 0, 0, 40, 59, 208, 80, 24, 144,
-        248, 136, 0, 1, 40, 54, 209, 147, 120, 1, 59, 147, 112, 43, 104, 147,
-        248, 213, 0, 32, 177, 81, 24, 0, 35, 129, 248, 136, 48, 46, 224, 30,
-        75, 4, 49, 27, 104, 83, 248, 44, 48, 34, 248, 17, 0, 90, 106, 40, 70,
-        0, 146, 33, 70, 3, 170, 26, 240, 81, 216, 212, 248, 16, 144, 212, 248,
-        48, 160, 4, 241, 20, 1, 6, 34, 36, 168, 230, 247, 113, 255, 40, 70,
-        33, 70, 3, 170, 250, 247, 184, 248, 40, 70, 73, 70, 36, 170, 83, 70,
-        28, 240, 230, 251, 168, 177, 160, 66, 19, 209, 6, 235, 136, 3, 90, 104,
-        34, 185, 14, 224, 155, 105, 217, 105, 1, 49, 217, 97, 1, 35, 19, 113,
-        211, 136, 1, 63, 1, 51, 27, 5, 27, 13, 211, 128, 191, 178, 0, 47, 162,
-        209, 38, 176, 189, 232, 240, 135, 32, 7, 0, 0, 1, 235, 130, 3, 45, 233,
-        240, 67, 94, 104, 5, 70, 12, 70, 23, 70, 0, 46, 47, 208, 3, 104, 147,
-        248, 213, 48, 27, 177, 75, 107, 147, 248, 42, 48, 35, 224, 208, 248,
-        56, 33, 241, 136, 146, 248, 42, 192, 8, 70, 12, 241, 255, 56, 31, 250,
-        136, 248, 10, 70, 14, 224, 2, 234, 8, 9, 9, 241, 4, 9, 54, 248, 25,
-        144, 1, 51, 185, 241, 0, 15, 24, 191, 16, 70, 1, 50, 18, 5, 155, 178,
-        18, 13, 99, 69, 238, 211, 67, 26, 27, 5, 27, 13, 40, 70, 33, 70, 58,
-        70, 1, 51, 189, 232, 240, 67, 255, 247, 86, 191, 189, 232, 240, 131,
-        2, 41, 112, 181, 4, 70, 29, 70, 115, 209, 19, 248, 5, 44, 19, 248, 6,
-        60, 26, 67, 21, 248, 4, 60, 19, 67, 131, 105, 101, 208, 26, 104, 1,
-        50, 26, 96, 90, 104, 1, 50, 90, 96, 21, 248, 3, 44, 18, 7, 2, 212, 154,
-        104, 1, 50, 154, 96, 230, 105, 166, 177, 21, 248, 6, 12, 0, 240, 127,
-        0, 32, 40, 7, 221, 160, 241, 87, 3, 1, 43, 3, 217, 160, 241, 99, 3,
-        3, 43, 6, 216, 24, 240, 220, 222, 86, 248, 32, 48, 1, 51, 70, 248, 32,
-        48, 21, 249, 3, 60, 0, 43, 27, 218, 163, 105, 230, 105, 26, 105, 1,
-        50, 26, 97, 174, 177, 21, 248, 6, 12, 0, 240, 127, 0, 32, 40, 7, 221,
-        160, 241, 87, 3, 1, 43, 3, 217, 160, 241, 99, 3, 3, 43, 7, 216, 24,
-        240, 189, 222, 30, 48, 6, 235, 128, 6, 115, 104, 1, 51, 115, 96, 21,
-        248, 3, 60, 19, 240, 48, 15, 36, 208, 163, 105, 228, 105, 90, 105, 1,
-        50, 90, 97, 244, 177, 21, 248, 6, 12, 0, 240, 127, 0, 32, 40, 7, 221,
-        160, 241, 87, 3, 1, 43, 3, 217, 160, 241, 99, 3, 3, 43, 16, 216, 24,
-        240, 156, 222, 62, 48, 84, 248, 32, 48, 1, 51, 68, 248, 32, 48, 112,
-        189, 90, 104, 1, 50, 90, 96, 112, 189, 131, 105, 218, 104, 1, 50, 218,
-        96, 112, 189, 45, 233, 240, 79, 19, 140, 137, 176, 8, 43, 6, 70, 136,
-        70, 21, 70, 146, 248, 34, 160, 4, 104, 1, 208, 32, 70, 38, 224, 67,
-        104, 210, 248, 0, 144, 81, 248, 3, 176, 147, 105, 66, 70, 153, 136,
-        75, 70, 1, 240, 3, 1, 255, 247, 103, 255, 11, 235, 138, 3, 95, 104,
-        199, 185, 171, 105, 155, 136, 3, 240, 3, 3, 2, 43, 12, 209, 25, 248,
-        3, 60, 27, 7, 8, 213, 11, 235, 74, 3, 1, 34, 131, 248, 36, 32, 179,
-        105, 154, 105, 1, 50, 154, 97, 32, 70, 65, 70, 42, 70, 249, 247, 165,
-        255, 90, 225, 216, 248, 4, 48, 216, 3, 18, 212, 171, 105, 155, 136,
-        3, 240, 3, 3, 2, 43, 12, 209, 25, 248, 3, 60, 25, 7, 8, 213, 11, 235,
-        74, 3, 1, 34, 131, 248, 36, 32, 179, 105, 154, 105, 1, 50, 154, 97,
-        181, 248, 126, 48, 26, 7, 64, 240, 46, 129, 150, 248, 42, 144, 250,
-        136, 27, 9, 9, 241, 255, 57, 147, 66, 9, 234, 3, 9, 69, 209, 1, 34,
-        155, 24, 27, 5, 58, 113, 27, 13, 251, 128, 216, 248, 48, 48, 6, 168,
-        8, 241, 20, 1, 6, 34, 4, 147, 216, 248, 16, 96, 230, 247, 33, 254, 35,
-        104, 147, 248, 213, 48, 131, 185, 32, 70, 65, 70, 42, 70, 249, 247,
-        100, 255, 32, 70, 49, 70, 6, 170, 4, 155, 28, 240, 146, 250, 0, 40,
-        0, 240, 18, 129, 64, 69, 64, 240, 15, 129, 35, 104, 147, 248, 213, 96,
-        30, 177, 190, 120, 0, 54, 24, 191, 1, 38, 32, 70, 89, 70, 82, 70, 255,
-        247, 211, 253, 35, 104, 147, 248, 213, 48, 0, 43, 0, 240, 252, 128,
-        0, 46, 152, 208, 0, 35, 0, 147, 1, 147, 2, 147, 32, 70, 57, 70, 106,
-        105, 75, 70, 26, 240, 189, 218, 141, 231, 155, 26, 27, 5, 122, 120,
-        27, 13, 147, 66, 15, 210, 9, 241, 4, 1, 55, 248, 17, 16, 105, 185, 33,
-        104, 145, 248, 213, 16, 217, 177, 7, 235, 9, 1, 145, 248, 136, 16, 1,
-        41, 21, 209, 2, 224, 179, 245, 0, 111, 17, 217, 0, 34, 96, 104, 105,
-        105, 237, 247, 194, 248, 35, 104, 211, 248, 136, 48, 211, 248, 188,
-        33, 1, 50, 195, 248, 188, 33, 179, 105, 90, 106, 1, 50, 90, 98, 195,
-        224, 185, 120, 209, 241, 1, 0, 56, 191, 0, 32, 147, 66, 4, 144, 102,
-        211, 194, 241, 1, 2, 155, 24, 155, 178, 32, 70, 89, 70, 82, 70, 5, 147,
-        255, 247, 245, 253, 11, 235, 138, 3, 95, 104, 135, 179, 35, 104, 147,
-        248, 213, 48, 171, 177, 7, 235, 9, 3, 1, 34, 131, 248, 136, 32, 105,
-        105, 96, 104, 238, 247, 164, 254, 107, 105, 9, 241, 4, 2, 25, 138, 39,
-        248, 18, 16, 218, 137, 111, 234, 66, 66, 111, 234, 82, 66, 218, 129,
-        8, 224, 107, 105, 9, 241, 4, 2, 24, 136, 39, 248, 18, 0, 213, 248, 128,
-        32, 90, 98, 187, 120, 1, 51, 187, 112, 150, 248, 41, 48, 59, 185, 1,
-        35, 134, 248, 41, 48, 160, 104, 113, 105, 100, 34, 253, 243, 16, 246,
-        32, 70, 89, 70, 82, 70, 255, 247, 73, 253, 35, 104, 147, 248, 213, 48,
-        203, 177, 123, 120, 5, 153, 139, 66, 79, 240, 0, 3, 4, 210, 4, 154,
-        141, 232, 12, 0, 1, 35, 2, 224, 4, 152, 141, 232, 9, 0, 2, 147, 32,
-        70, 57, 70, 106, 105, 75, 70, 26, 240, 44, 218, 32, 70, 65, 70, 42,
-        70, 249, 247, 163, 254, 179, 105, 218, 106, 1, 50, 218, 98, 84, 224,
-        1, 49, 185, 112, 35, 104, 147, 248, 213, 48, 35, 179, 7, 235, 9, 3,
-        1, 34, 131, 248, 136, 32, 96, 104, 105, 105, 238, 247, 73, 254, 106,
-        105, 9, 241, 4, 3, 17, 138, 32, 70, 39, 248, 19, 16, 211, 137, 57, 70,
-        111, 234, 67, 67, 111, 234, 83, 67, 211, 129, 4, 155, 0, 147, 0, 35,
-        1, 147, 2, 147, 75, 70, 26, 240, 253, 217, 32, 70, 65, 70, 42, 70, 249,
-        247, 116, 254, 8, 224, 107, 105, 213, 248, 128, 32, 24, 136, 9, 241,
-        4, 9, 39, 248, 25, 0, 90, 98, 150, 248, 41, 48, 59, 185, 1, 35, 134,
-        248, 41, 48, 160, 104, 113, 105, 100, 34, 253, 243, 169, 245, 179, 105,
-        26, 106, 1, 50, 26, 98, 16, 224, 96, 104, 105, 105, 0, 34, 236, 247,
-        253, 255, 179, 105, 48, 70, 90, 108, 65, 70, 1, 50, 90, 100, 1, 35,
-        0, 147, 82, 70, 0, 35, 26, 240, 171, 218, 9, 176, 189, 232, 240, 143,
-        45, 233, 240, 67, 31, 70, 3, 104, 133, 176, 147, 248, 213, 64, 5, 70,
-        14, 70, 145, 70, 157, 248, 48, 128, 36, 177, 64, 104, 180, 33, 236,
-        247, 187, 255, 4, 70, 40, 70, 57, 70, 66, 70, 255, 247, 153, 253, 43,
-        104, 147, 248, 213, 48, 0, 43, 46, 208, 12, 179, 0, 35, 0, 147, 1, 147,
-        1, 35, 2, 147, 40, 70, 79, 246, 255, 115, 73, 70, 34, 70, 26, 240, 161,
-        217, 163, 104, 180, 51, 163, 96, 163, 137, 180, 59, 163, 129, 51, 105,
-        147, 248, 68, 48, 132, 248, 33, 48, 214, 248, 248, 48, 168, 104, 11,
-        185, 51, 105, 219, 104, 153, 104, 34, 70, 1, 35, 238, 247, 201, 252,
-        1, 35, 12, 147, 213, 248, 56, 1, 57, 104, 66, 70, 0, 35, 5, 176, 189,
-        232, 240, 67, 26, 240, 93, 154, 5, 176, 189, 232, 240, 131, 45, 233,
-        240, 71, 5, 104, 134, 176, 43, 104, 4, 70, 27, 126, 59, 185, 144, 248,
-        41, 32, 1, 42, 89, 209, 128, 248, 41, 48, 168, 104, 82, 224, 213, 248,
-        36, 1, 3, 169, 0, 34, 79, 240, 90, 216, 79, 240, 0, 10, 54, 224, 115,
-        104, 90, 3, 51, 213, 99, 104, 0, 39, 86, 248, 3, 128, 193, 70, 89, 248,
-        4, 47, 58, 179, 147, 120, 17, 121, 0, 43, 24, 191, 79, 240, 1, 10, 25,
-        177, 0, 35, 19, 113, 211, 112, 28, 224, 219, 177, 209, 120, 1, 49, 201,
-        178, 209, 112, 115, 104, 19, 244, 128, 127, 20, 191, 224, 137, 32, 138,
-        79, 240, 100, 3, 176, 251, 243, 243, 153, 66, 9, 211, 163, 105, 40,
-        70, 153, 106, 1, 49, 153, 98, 49, 70, 67, 70, 0, 151, 255, 247, 104,
-        255, 79, 240, 1, 10, 1, 55, 255, 178, 8, 47, 208, 209, 213, 248, 36,
-        1, 3, 169, 28, 240, 159, 248, 6, 70, 0, 40, 192, 209, 186, 241, 0, 15,
-        10, 209, 148, 248, 41, 48, 1, 43, 6, 209, 35, 104, 132, 248, 41, 160,
-        152, 104, 97, 105, 253, 243, 2, 245, 6, 176, 189, 232, 240, 135, 208,
-        248, 56, 49, 155, 105, 216, 106, 112, 71, 248, 181, 194, 105, 0, 35,
-        7, 70, 13, 70, 30, 70, 209, 88, 4, 51, 96, 43, 14, 68, 250, 209, 40,
-        70, 17, 73, 232, 243, 255, 242, 198, 177, 0, 36, 251, 105, 40, 70, 83,
-        248, 36, 32, 100, 35, 83, 67, 13, 73, 179, 251, 246, 243, 232, 243,
-        242, 242, 4, 240, 7, 3, 7, 43, 5, 209, 23, 44, 3, 208, 40, 70, 8, 73,
-        232, 243, 232, 242, 1, 52, 24, 44, 231, 209, 40, 70, 5, 73, 232, 243,
-        225, 242, 0, 32, 248, 189, 0, 191, 17, 223, 3, 0, 181, 221, 3, 0, 192,
-        221, 3, 0, 236, 252, 135, 0, 45, 233, 240, 79, 67, 104, 21, 70, 203,
-        88, 135, 176, 14, 70, 3, 147, 11, 105, 233, 121, 47, 121, 4, 145, 41,
-        122, 66, 107, 5, 145, 233, 120, 4, 70, 65, 234, 7, 39, 7, 240, 60, 10,
-        79, 234, 154, 10, 186, 241, 7, 15, 154, 88, 104, 121, 149, 248, 6, 144,
-        161, 122, 4, 217, 163, 105, 90, 108, 1, 50, 90, 100, 187, 224, 64, 234,
-        9, 41, 137, 69, 40, 191, 137, 70, 146, 249, 8, 16, 33, 177, 82, 137,
-        66, 250, 10, 242, 210, 7, 9, 212, 171, 120, 32, 104, 49, 70, 37, 34,
-        205, 248, 0, 144, 1, 151, 26, 240, 16, 218, 164, 224, 32, 104, 2, 104,
-        146, 248, 66, 16, 97, 177, 146, 248, 67, 32, 74, 177, 27, 124, 19, 177,
-        115, 104, 219, 3, 4, 213, 4, 235, 10, 3, 147, 248, 32, 48, 51, 185,
-        171, 120, 205, 248, 0, 144, 1, 151, 49, 70, 37, 34, 50, 224, 34, 122,
-        199, 243, 64, 3, 154, 66, 6, 208, 171, 120, 205, 248, 0, 144, 1, 151,
-        49, 70, 38, 34, 38, 224, 82, 70, 32, 70, 49, 70, 24, 240, 199, 222,
-        216, 32, 236, 247, 92, 254, 34, 104, 128, 70, 19, 104, 147, 248, 213,
-        48, 43, 177, 80, 104, 180, 33, 236, 247, 102, 254, 131, 70, 0, 224,
-        155, 70, 184, 241, 0, 15, 7, 208, 35, 104, 27, 104, 147, 248, 213, 48,
-        131, 177, 187, 241, 0, 15, 13, 209, 171, 120, 32, 104, 205, 248, 0,
-        144, 1, 151, 49, 70, 1, 34, 26, 240, 193, 217, 163, 105, 154, 107, 1,
-        50, 154, 99, 81, 224, 64, 70, 0, 33, 216, 34, 231, 243, 203, 247, 32,
-        104, 3, 104, 147, 248, 213, 48, 11, 177, 200, 248, 204, 176, 187, 9,
-        219, 178, 148, 248, 9, 176, 19, 177, 91, 69, 56, 191, 155, 70, 7, 240,
-        43, 249, 32, 177, 88, 69, 56, 191, 131, 70, 95, 250, 139, 251, 3, 154,
-        4, 153, 2, 235, 138, 3, 5, 154, 195, 248, 4, 128, 65, 234, 2, 35, 27,
-        9, 168, 248, 6, 48, 1, 35, 136, 248, 1, 176, 136, 248, 0, 48, 35, 104,
-        7, 240, 63, 7, 27, 104, 71, 234, 139, 23, 147, 248, 213, 48, 35, 177,
-        32, 70, 25, 240, 39, 221, 168, 248, 200, 0, 163, 105, 32, 104, 90, 107,
-        49, 70, 1, 50, 90, 99, 79, 246, 254, 114, 58, 64, 171, 120, 1, 146,
-        0, 34, 205, 248, 0, 144, 26, 240, 113, 217, 163, 105, 154, 107, 1, 50,
-        154, 99, 99, 138, 1, 51, 99, 130, 7, 176, 189, 232, 240, 143, 16, 181,
-        0, 33, 4, 70, 80, 34, 128, 105, 231, 243, 116, 247, 224, 105, 120, 177,
-        0, 33, 124, 34, 231, 243, 110, 247, 224, 105, 0, 33, 124, 34, 124, 48,
-        231, 243, 104, 247, 224, 105, 0, 33, 248, 48, 124, 34, 231, 243, 98,
-        247, 32, 104, 3, 104, 147, 248, 156, 48, 1, 43, 8, 209, 67, 126, 51,
-        177, 79, 244, 170, 113, 0, 34, 189, 232, 16, 64, 20, 240, 91, 159, 16,
-        189, 248, 181, 12, 38, 78, 67, 7, 110, 4, 70, 189, 25, 105, 104, 33,
-        177, 67, 104, 0, 34, 88, 105, 236, 247, 225, 253, 0, 35, 187, 81, 171,
-        96, 107, 96, 227, 110, 26, 109, 1, 50, 26, 101, 248, 189, 16, 181, 0,
-        33, 4, 70, 255, 247, 229, 255, 32, 70, 1, 33, 255, 247, 225, 255, 0,
-        32, 16, 189, 55, 181, 0, 35, 1, 147, 7, 155, 5, 70, 3, 43, 20, 70, 4,
-        217, 1, 168, 6, 153, 4, 34, 230, 247, 204, 250, 24, 44, 43, 104, 11,
-        209, 27, 104, 2, 169, 147, 248, 68, 48, 8, 152, 65, 248, 4, 61, 10,
-        154, 230, 247, 191, 250, 0, 32, 1, 224, 111, 240, 22, 0, 62, 189, 147,
-        137, 45, 233, 240, 65, 45, 43, 4, 70, 136, 70, 21, 70, 7, 110, 6, 216,
-        67, 104, 211, 248, 136, 48, 90, 110, 1, 50, 90, 102, 34, 224, 150, 104,
-        50, 70, 50, 248, 6, 31, 26, 240, 188, 219, 32, 185, 227, 110, 90, 107,
-        1, 50, 90, 99, 22, 224, 6, 241, 16, 0, 234, 247, 216, 252, 16, 185,
-        51, 124, 219, 7, 6, 213, 99, 104, 211, 248, 136, 48, 90, 111, 1, 50,
-        90, 103, 7, 224, 12, 35, 3, 251, 8, 119, 1, 32, 125, 96, 189, 96, 189,
-        232, 240, 129, 227, 110, 0, 32, 154, 108, 1, 50, 154, 100, 189, 232,
-        240, 129, 0, 32, 112, 71, 3, 110, 16, 181, 27, 104, 4, 70, 19, 177,
-        0, 33, 255, 247, 124, 255, 35, 110, 219, 104, 43, 177, 32, 70, 1, 33,
-        189, 232, 16, 64, 255, 247, 115, 191, 16, 189, 45, 233, 247, 79, 215,
-        137, 1, 147, 67, 104, 23, 244, 0, 87, 5, 70, 139, 70, 20, 70, 211, 248,
-        20, 160, 44, 209, 3, 104, 145, 137, 27, 104, 219, 105, 155, 110, 153,
-        66, 37, 218, 147, 104, 82, 104, 35, 240, 127, 67, 194, 243, 20, 8, 35,
-        244, 96, 3, 200, 235, 3, 8, 80, 70, 65, 68, 236, 247, 28, 253, 6, 70,
-        168, 177, 128, 104, 179, 137, 64, 68, 200, 235, 3, 3, 176, 96, 179,
-        129, 161, 104, 162, 137, 200, 241, 0, 3, 201, 24, 192, 24, 66, 68, 230,
-        247, 56, 250, 33, 70, 80, 70, 58, 70, 236, 247, 39, 253, 52, 70, 187,
-        248, 2, 144, 187, 248, 18, 16, 12, 38, 235, 110, 6, 251, 9, 246, 218,
-        106, 1, 240, 6, 1, 47, 110, 73, 16, 1, 50, 2, 41, 218, 98, 7, 235, 6,
-        8, 186, 89, 23, 208, 3, 41, 46, 208, 1, 41, 9, 209, 50, 177, 154, 107,
-        40, 70, 1, 50, 154, 99, 73, 70, 255, 247, 24, 255, 1, 35, 43, 224, 1,
-        42, 9, 209, 163, 137, 14, 43, 15, 217, 216, 248, 8, 48, 33, 136, 153,
-        130, 21, 224, 1, 42, 3, 208, 154, 107, 1, 50, 154, 99, 71, 224, 3, 35,
-        187, 81, 163, 137, 17, 43, 6, 216, 107, 104, 211, 248, 136, 48, 90,
-        110, 1, 50, 90, 102, 59, 224, 216, 248, 8, 48, 34, 136, 154, 130, 200,
-        248, 8, 64, 15, 224, 50, 177, 154, 107, 40, 70, 1, 50, 154, 99, 73,
-        70, 255, 247, 235, 254, 3, 35, 187, 81, 40, 70, 73, 70, 34, 70, 255,
-        247, 36, 255, 32, 179, 187, 89, 79, 240, 0, 4, 3, 43, 42, 209, 216,
-        248, 4, 48, 200, 248, 8, 64, 154, 105, 200, 248, 4, 64, 66, 240, 128,
-        2, 188, 81, 154, 97, 106, 104, 210, 248, 136, 16, 209, 248, 204, 1,
-        1, 48, 193, 248, 204, 1, 233, 110, 8, 107, 1, 48, 8, 99, 1, 153, 1,
-        41, 17, 208, 81, 105, 40, 104, 90, 70, 249, 247, 107, 254, 10, 224,
-        40, 70, 73, 70, 255, 247, 186, 254, 80, 70, 33, 70, 0, 34, 236, 247,
-        163, 252, 0, 35, 0, 224, 35, 70, 24, 70, 189, 232, 254, 143, 0, 0, 45,
-        233, 240, 79, 137, 176, 5, 147, 3, 104, 14, 104, 3, 147, 67, 104, 4,
-        70, 95, 105, 2, 145, 56, 70, 49, 70, 6, 146, 234, 247, 44, 251, 4, 56,
-        1, 144, 178, 70, 53, 70, 79, 240, 0, 8, 161, 70, 209, 224, 137, 76,
-        170, 138, 35, 104, 83, 248, 34, 48, 35, 185, 56, 70, 41, 70, 4, 34,
-        236, 243, 201, 243, 184, 241, 100, 15, 0, 240, 198, 128, 213, 248, 8,
-        192, 232, 137, 188, 248, 12, 48, 16, 244, 0, 80, 12, 241, 14, 12, 20,
-        191, 181, 248, 80, 32, 2, 70, 28, 240, 3, 15, 169, 137, 5, 208, 76,
-        70, 227, 110, 26, 108, 1, 50, 26, 100, 195, 224, 82, 24, 79, 234, 19,
-        44, 146, 178, 76, 234, 3, 35, 4, 146, 181, 248, 20, 192, 34, 104, 14,
-        51, 82, 248, 44, 32, 155, 178, 42, 177, 112, 74, 3, 241, 3, 12, 12,
-        234, 2, 2, 0, 224, 26, 70, 221, 248, 16, 192, 148, 69, 5, 208, 76, 70,
-        227, 110, 218, 107, 1, 50, 218, 99, 163, 224, 48, 177, 181, 248, 80,
-        32, 26, 177, 91, 26, 165, 248, 80, 48, 0, 224, 171, 129, 3, 152, 57,
-        70, 42, 70, 240, 247, 60, 248, 171, 104, 25, 136, 88, 136, 179, 248,
-        4, 176, 64, 234, 1, 2, 91, 234, 2, 2, 0, 145, 0, 240, 138, 128, 18,
-        154, 17, 120, 0, 41, 56, 208, 3, 153, 209, 248, 96, 38, 210, 248, 48,
-        192, 188, 241, 0, 15, 0, 209, 19, 99, 147, 248, 0, 192, 28, 240, 1,
-        12, 205, 248, 28, 192, 29, 209, 18, 107, 0, 153, 178, 248, 2, 192, 128,
-        234, 12, 12, 16, 136, 72, 64, 76, 234, 0, 0, 178, 248, 4, 192, 139,
-        234, 12, 12, 64, 234, 12, 0, 128, 178, 112, 185, 155, 137, 8, 43, 14,
-        208, 77, 246, 134, 92, 204, 235, 3, 1, 209, 241, 0, 12, 76, 235, 1,
-        12, 7, 224, 79, 240, 0, 12, 4, 224, 221, 248, 28, 192, 1, 224, 79, 240,
-        1, 12, 18, 155, 131, 248, 0, 192, 34, 104, 171, 138, 82, 248, 35, 48,
-        184, 241, 0, 15, 30, 208, 11, 177, 25, 136, 0, 224, 25, 70, 177, 130,
-        79, 240, 0, 12, 186, 248, 22, 16, 165, 248, 20, 192, 82, 248, 33, 32,
-        2, 177, 18, 136, 41, 136, 234, 130, 170, 248, 22, 16, 234, 137, 241,
-        137, 34, 240, 7, 2, 1, 240, 7, 1, 10, 67, 6, 153, 234, 129, 74, 104,
-        170, 70, 170, 98, 2, 154, 1, 153, 21, 96, 221, 248, 16, 192, 234, 137,
-        204, 235, 1, 1, 66, 244, 128, 82, 234, 129, 8, 241, 1, 8, 1, 145, 29,
-        70, 0, 45, 127, 244, 43, 175, 1, 155, 76, 70, 35, 177, 227, 110, 90,
-        108, 1, 50, 90, 100, 12, 224, 37, 177, 56, 70, 41, 70, 1, 154, 236,
-        247, 161, 251, 5, 153, 0, 32, 11, 136, 152, 68, 161, 248, 0, 128, 38,
-        224, 20, 77, 178, 138, 43, 104, 83, 248, 34, 16, 41, 177, 0, 34, 56,
-        70, 236, 247, 144, 251, 0, 34, 178, 130, 86, 69, 16, 209, 21, 224, 226,
-        138, 83, 248, 34, 48, 3, 177, 27, 136, 0, 34, 243, 130, 56, 70, 33,
-        70, 236, 247, 128, 251, 84, 69, 2, 209, 2, 155, 30, 96, 5, 224, 43,
-        104, 242, 138, 83, 248, 34, 64, 0, 44, 233, 209, 79, 240, 255, 48, 9,
-        176, 189, 232, 240, 143, 32, 7, 0, 0, 252, 255, 1, 0, 16, 181, 11, 70,
-        9, 105, 134, 176, 0, 106, 153, 177, 138, 121, 138, 177, 147, 248, 36,
-        32, 146, 7, 13, 213, 208, 248, 124, 34, 82, 177, 0, 34, 8, 36, 141,
-        232, 20, 0, 2, 146, 3, 146, 4, 146, 20, 51, 12, 34, 8, 240, 68, 222,
-        6, 176, 16, 189, 45, 233, 240, 79, 177, 176, 221, 248, 244, 128, 155,
-        70, 0, 35, 15, 146, 47, 147, 8, 241, 56, 2, 58, 155, 10, 146, 91, 136,
-        209, 248, 244, 32, 14, 147, 187, 248, 0, 48, 11, 146, 3, 240, 252, 3,
-        163, 241, 32, 2, 83, 66, 67, 235, 2, 3, 129, 70, 12, 70, 60, 158, 5,
-        106, 7, 147, 43, 177, 58, 155, 79, 240, 48, 10, 4, 51, 9, 147, 3, 224,
-        7, 154, 79, 240, 16, 10, 9, 146, 0, 33, 40, 34, 17, 168, 231, 243, 132,
-        244, 27, 168, 0, 33, 40, 34, 231, 243, 127, 244, 213, 248, 92, 51, 43,
-        177, 17, 168, 5, 245, 87, 113, 40, 34, 230, 247, 30, 248, 11, 155, 13,
-        241, 68, 12, 3, 241, 56, 7, 27, 170, 99, 70, 0, 146, 40, 70, 58, 70,
-        33, 70, 205, 248, 24, 192, 16, 240, 215, 220, 213, 248, 116, 52, 57,
-        70, 155, 120, 37, 175, 0, 34, 10, 152, 24, 240, 84, 250, 56, 70, 0,
-        33, 32, 34, 231, 243, 89, 244, 8, 241, 77, 3, 38, 147, 184, 248, 104,
-        48, 221, 248, 24, 192, 41, 147, 27, 171, 40, 147, 45, 171, 24, 70, 0,
-        33, 8, 34, 205, 248, 156, 192, 6, 147, 37, 150, 231, 243, 69, 244, 114,
-        104, 6, 155, 194, 243, 0, 66, 0, 147, 141, 248, 180, 32, 33, 70, 82,
-        70, 0, 35, 213, 248, 124, 6, 46, 151, 56, 240, 134, 216, 130, 29, 12,
-        146, 11, 241, 10, 3, 8, 147, 12, 155, 4, 241, 188, 2, 1, 147, 47, 171,
-        13, 146, 0, 146, 2, 147, 7, 70, 81, 70, 40, 70, 8, 154, 4, 241, 194,
-        3, 13, 240, 79, 222, 132, 70, 24, 185, 17, 34, 168, 248, 104, 32, 187,
-        224, 47, 155, 0, 34, 1, 33, 25, 112, 90, 112, 42, 106, 18, 104, 2, 42,
-        4, 209, 148, 249, 24, 33, 10, 185, 33, 34, 26, 112, 33, 109, 64, 242,
-        55, 18, 10, 64, 50, 177, 148, 248, 88, 32, 26, 177, 26, 136, 66, 240,
-        16, 2, 26, 128, 149, 248, 98, 36, 50, 177, 42, 106, 82, 125, 26, 177,
-        26, 136, 66, 244, 128, 98, 26, 128, 184, 248, 104, 32, 33, 70, 90, 128,
-        184, 248, 32, 32, 154, 128, 47, 155, 45, 170, 6, 51, 141, 232, 140,
-        0, 47, 147, 213, 248, 124, 6, 82, 70, 0, 35, 205, 248, 24, 192, 55,
-        240, 160, 223, 221, 248, 24, 192, 0, 40, 109, 209, 0, 148, 152, 248,
-        24, 32, 227, 104, 2, 144, 3, 144, 1, 146, 218, 104, 40, 70, 51, 70,
-        97, 70, 246, 247, 125, 255, 47, 155, 6, 59, 47, 147, 184, 248, 104,
-        48, 0, 43, 106, 209, 184, 248, 32, 48, 49, 70, 166, 248, 220, 48, 40,
-        70, 78, 240, 248, 222, 11, 154, 2, 33, 146, 248, 96, 48, 14, 154, 48,
-        70, 147, 66, 56, 191, 19, 70, 166, 248, 10, 49, 78, 240, 67, 221, 212,
-        248, 204, 48, 27, 3, 9, 213, 40, 70, 33, 70, 8, 240, 37, 220, 1, 40,
-        3, 209, 40, 70, 33, 70, 43, 240, 7, 218, 43, 104, 155, 106, 243, 98,
-        7, 155, 83, 177, 13, 152, 9, 153, 6, 34, 229, 247, 50, 255, 32, 177,
-        72, 70, 8, 153, 226, 104, 28, 240, 53, 220, 72, 70, 8, 153, 226, 104,
-        28, 240, 104, 217, 43, 104, 147, 248, 79, 48, 19, 240, 3, 3, 7, 208,
-        212, 248, 204, 48, 223, 4, 90, 191, 115, 104, 195, 243, 0, 67, 0, 35,
-        127, 34, 141, 232, 12, 0, 0, 34, 19, 70, 10, 152, 6, 241, 76, 1, 24,
-        240, 200, 250, 40, 70, 49, 70, 27, 240, 116, 253, 40, 70, 33, 70, 1,
-        34, 6, 240, 43, 253, 12, 159, 59, 155, 58, 154, 1, 147, 47, 155, 0,
-        146, 2, 147, 72, 70, 33, 70, 15, 154, 91, 70, 3, 151, 4, 150, 205, 248,
-        20, 128, 27, 240, 134, 220, 5, 224, 72, 70, 33, 70, 90, 70, 67, 70,
-        26, 240, 17, 222, 49, 176, 189, 232, 240, 143, 247, 181, 30, 70, 83,
-        104, 20, 70, 35, 244, 0, 83, 83, 96, 17, 240, 254, 2, 5, 70, 8, 209,
-        1, 104, 208, 248, 248, 52, 143, 106, 161, 106, 121, 26, 153, 66, 0,
-        217, 75, 185, 0, 35, 196, 248, 236, 48, 212, 248, 168, 49, 19, 179,
-        42, 104, 146, 106, 154, 98, 30, 224, 212, 248, 236, 48, 208, 248, 0,
-        21, 1, 51, 139, 66, 196, 248, 236, 48, 3, 210, 1, 35, 128, 248, 252,
-        52, 17, 224, 148, 248, 36, 48, 217, 7, 7, 213, 4, 35, 0, 147, 33, 105,
-        4, 241, 20, 3, 1, 146, 36, 240, 113, 216, 40, 70, 33, 70, 78, 240, 167,
-        222, 0, 35, 179, 98, 254, 189, 45, 233, 240, 67, 4, 106, 137, 176, 0,
-        35, 32, 70, 21, 153, 221, 248, 68, 128, 22, 70, 221, 248, 64, 144, 18,
-        159, 5, 147, 6, 147, 7, 147, 6, 240, 159, 248, 184, 241, 3, 15, 5, 70,
-        13, 217, 4, 34, 6, 168, 73, 70, 229, 247, 165, 254, 184, 241, 7, 15,
-        5, 217, 7, 168, 9, 241, 4, 1, 4, 34, 229, 247, 156, 254, 78, 46, 6,
-        154, 14, 208, 5, 216, 12, 46, 17, 208, 13, 46, 64, 240, 203, 128, 34,
-        224, 80, 46, 0, 240, 160, 128, 6, 211, 81, 46, 64, 240, 195, 128, 167,
-        224, 212, 248, 0, 53, 15, 224, 196, 248, 0, 37, 185, 224, 184, 241,
-        3, 15, 20, 217, 0, 42, 5, 219, 17, 70, 32, 70, 5, 170, 6, 240, 86, 248,
-        5, 70, 21, 177, 43, 121, 59, 96, 170, 224, 5, 155, 30, 51, 64, 240,
-        167, 128, 61, 96, 164, 224, 19, 155, 7, 43, 2, 220, 111, 240, 13, 3,
-        157, 224, 7, 158, 3, 46, 6, 208, 166, 241, 2, 12, 220, 241, 0, 6, 70,
-        235, 12, 6, 0, 224, 0, 38, 0, 42, 57, 219, 17, 70, 32, 70, 5, 170, 6,
-        240, 51, 248, 7, 155, 5, 70, 0, 43, 48, 221, 224, 185, 5, 155, 30, 51,
-        44, 209, 42, 70, 43, 70, 134, 240, 1, 6, 32, 70, 6, 153, 0, 150, 43,
-        240, 112, 216, 5, 70, 24, 185, 111, 240, 26, 3, 5, 147, 29, 224, 32,
-        70, 41, 70, 6, 240, 226, 249, 5, 144, 184, 177, 32, 70, 41, 70, 43,
-        240, 98, 218, 106, 224, 3, 43, 2, 209, 131, 121, 43, 177, 13, 224, 2,
-        43, 11, 209, 131, 121, 1, 43, 8, 209, 170, 121, 32, 70, 210, 241, 1,
-        2, 41, 70, 56, 191, 0, 34, 43, 240, 42, 219, 7, 155, 3, 43, 84, 208,
-        2, 43, 82, 208, 53, 185, 5, 154, 30, 50, 78, 209, 0, 43, 76, 209, 5,
-        149, 74, 224, 0, 43, 28, 221, 43, 121, 0, 43, 69, 209, 35, 104, 219,
-        110, 152, 7, 2, 208, 111, 240, 8, 3, 61, 224, 170, 121, 42, 177, 32,
-        70, 41, 70, 5, 240, 172, 255, 5, 144, 54, 224, 43, 126, 32, 70, 0, 146,
-        1, 146, 2, 146, 41, 70, 5, 241, 25, 2, 36, 240, 217, 217, 43, 224, 107,
-        121, 75, 179, 32, 70, 41, 70, 43, 240, 182, 216, 36, 224, 171, 121,
-        251, 177, 5, 245, 88, 112, 1, 48, 12, 33, 232, 243, 225, 240, 0, 48,
-        24, 191, 1, 32, 56, 96, 23, 224, 171, 121, 147, 177, 12, 33, 0, 50,
-        40, 70, 24, 191, 1, 34, 43, 240, 69, 219, 43, 121, 99, 177, 32, 70,
-        41, 70, 8, 240, 213, 220, 32, 70, 41, 70, 1, 34, 8, 240, 24, 221, 2,
-        224, 111, 240, 5, 3, 5, 147, 5, 152, 1, 224, 111, 240, 22, 0, 9, 176,
-        189, 232, 240, 131, 56, 181, 4, 106, 10, 114, 32, 70, 13, 70, 42, 240,
-        10, 218, 132, 248, 114, 2, 40, 70, 29, 240, 193, 217, 32, 70, 242, 247,
-        63, 255, 148, 248, 114, 34, 1, 42, 3, 216, 32, 105, 1, 33, 40, 240,
-        116, 223, 212, 248, 112, 34, 35, 104, 18, 240, 255, 31, 12, 191, 0,
-        34, 1, 34, 131, 248, 63, 32, 212, 248, 112, 34, 35, 104, 18, 240, 255,
-        31, 12, 191, 0, 34, 1, 34, 131, 248, 63, 32, 212, 248, 120, 1, 89, 240,
-        92, 219, 1, 70, 212, 248, 92, 1, 189, 232, 56, 64, 7, 240, 251, 184,
-        0, 0, 240, 181, 5, 106, 135, 176, 12, 70, 6, 70, 3, 169, 213, 248, 36,
-        1, 34, 70, 78, 240, 69, 217, 0, 39, 8, 224, 146, 248, 36, 48, 152, 7,
-        4, 213, 40, 70, 17, 70, 78, 240, 91, 221, 1, 55, 213, 248, 36, 1, 3,
-        169, 27, 240, 185, 249, 2, 70, 0, 40, 238, 209, 63, 177, 3, 35, 0, 147,
-        1, 144, 33, 70, 40, 70, 16, 75, 35, 240, 15, 223, 0, 34, 48, 70, 33,
-        70, 255, 247, 157, 255, 40, 70, 0, 33, 14, 240, 124, 221, 4, 35, 0,
-        33, 4, 241, 194, 2, 0, 147, 40, 70, 35, 70, 241, 247, 145, 252, 48,
-        70, 28, 240, 34, 219, 4, 241, 188, 0, 0, 33, 6, 34, 231, 243, 162, 241,
-        0, 32, 7, 176, 240, 189, 0, 191, 236, 125, 135, 0, 45, 233, 255, 65,
-        4, 106, 5, 70, 35, 104, 147, 248, 47, 48, 11, 185, 0, 38, 62, 224, 35,
-        106, 24, 105, 11, 240, 106, 255, 6, 70, 40, 187, 43, 138, 27, 179, 32,
-        70, 42, 240, 125, 217, 0, 40, 30, 221, 234, 33, 32, 70, 16, 240, 255,
-        218, 181, 248, 110, 48, 131, 66, 18, 209, 181, 248, 108, 48, 42, 138,
-        1, 51, 155, 178, 154, 66, 165, 248, 108, 48, 11, 216, 32, 70, 165, 248,
-        108, 96, 165, 248, 110, 96, 13, 240, 15, 219, 79, 240, 255, 48, 182,
-        224, 165, 248, 108, 96, 165, 248, 110, 0, 212, 248, 36, 1, 1, 169, 0,
-        34, 78, 240, 204, 216, 3, 224, 67, 104, 35, 240, 32, 3, 67, 96, 212,
-        248, 36, 1, 1, 169, 27, 240, 70, 249, 0, 40, 244, 209, 190, 231, 212,
-        248, 104, 50, 159, 89, 0, 47, 46, 208, 187, 121, 99, 179, 59, 121, 83,
-        179, 215, 248, 92, 51, 27, 120, 51, 179, 215, 248, 244, 48, 91, 142,
-        3, 244, 96, 83, 179, 245, 128, 95, 30, 209, 212, 248, 112, 4, 57, 70,
-        73, 240, 71, 217, 128, 70, 24, 177, 56, 70, 29, 240, 100, 219, 19, 224,
-        215, 248, 92, 51, 34, 104, 145, 106, 154, 104, 138, 26, 153, 138, 91,
-        139, 75, 67, 154, 66, 8, 217, 56, 70, 1, 33, 29, 240, 92, 219, 56, 70,
-        65, 70, 66, 70, 29, 240, 209, 218, 4, 54, 32, 46, 200, 209, 35, 104,
-        147, 248, 47, 32, 0, 42, 72, 208, 212, 248, 104, 33, 10, 177, 146, 121,
-        138, 187, 32, 70, 30, 240, 39, 220, 34, 104, 212, 248, 244, 52, 145,
-        106, 210, 248, 40, 1, 78, 30, 48, 26, 176, 251, 243, 246, 3, 251, 22,
-        0, 177, 251, 243, 246, 3, 251, 22, 17, 136, 66, 2, 217, 1, 33, 132,
-        248, 252, 20, 0, 33, 194, 248, 40, 17, 43, 177, 146, 106, 178, 251,
-        243, 241, 3, 251, 17, 35, 67, 177, 212, 248, 80, 1, 16, 177, 69, 240,
-        181, 220, 16, 185, 148, 248, 252, 52, 91, 177, 40, 70, 27, 240, 10,
-        221, 0, 35, 132, 248, 252, 52, 4, 224, 211, 248, 40, 33, 1, 50, 195,
-        248, 40, 33, 149, 248, 81, 48, 27, 177, 40, 70, 2, 33, 28, 240, 190,
-        216, 149, 248, 80, 48, 19, 177, 171, 109, 1, 51, 171, 101, 0, 37, 212,
-        248, 104, 50, 94, 89, 142, 177, 179, 121, 123, 177, 51, 121, 107, 177,
-        32, 70, 49, 70, 8, 240, 113, 219, 64, 177, 32, 70, 49, 70, 8, 240, 102,
-        219, 32, 70, 49, 70, 1, 34, 8, 240, 169, 219, 4, 53, 32, 45, 230, 209,
-        0, 32, 4, 176, 189, 232, 240, 129, 45, 233, 240, 71, 3, 104, 14, 70,
-        147, 248, 79, 48, 7, 70, 153, 7, 104, 208, 208, 248, 104, 49, 19, 177,
-        155, 121, 0, 43, 98, 209, 244, 104, 0, 44, 95, 209, 51, 104, 219, 105,
-        27, 121, 67, 244, 128, 85, 14, 43, 140, 191, 79, 244, 64, 67, 0, 35,
-        29, 67, 215, 248, 104, 50, 83, 248, 4, 128, 184, 241, 0, 15, 74, 208,
-        152, 248, 6, 48, 0, 43, 70, 208, 152, 248, 4, 48, 0, 43, 66, 208, 216,
-        248, 244, 48, 179, 248, 50, 144, 216, 248, 92, 51, 27, 120, 0, 43, 57,
-        208, 72, 70, 232, 243, 242, 242, 130, 70, 40, 70, 232, 243, 238, 242,
-        192, 235, 10, 0, 0, 40, 5, 218, 40, 70, 232, 243, 231, 242, 130, 70,
-        72, 70, 4, 224, 72, 70, 232, 243, 225, 242, 130, 70, 40, 70, 232, 243,
-        221, 242, 192, 235, 10, 10, 186, 241, 3, 15, 212, 191, 79, 240, 0, 10,
-        79, 240, 1, 10, 186, 241, 0, 15, 21, 209, 64, 70, 241, 104, 29, 240,
-        133, 217, 128, 177, 64, 70, 81, 70, 29, 240, 134, 218, 9, 244, 96, 89,
-        64, 70, 29, 240, 121, 218, 185, 245, 128, 95, 4, 208, 1, 33, 64, 70,
-        10, 70, 29, 240, 243, 217, 4, 52, 32, 44, 170, 209, 0, 32, 189, 232,
-        240, 135, 0, 0, 45, 233, 240, 79, 255, 176, 9, 147, 3, 111, 128, 70,
-        203, 88, 13, 70, 8, 146, 6, 106, 108, 34, 42, 168, 0, 33, 137, 156,
-        13, 147, 231, 243, 41, 240, 136, 155, 8, 152, 46, 147, 157, 248, 40,
-        50, 9, 154, 141, 248, 192, 48, 180, 248, 220, 48, 44, 144, 45, 146,
-        205, 248, 168, 128, 43, 149, 47, 148, 35, 185, 32, 105, 43, 240, 139,
-        216, 164, 248, 220, 0, 180, 248, 220, 0, 213, 248, 244, 32, 173, 248,
-        200, 0, 12, 146, 0, 33, 40, 34, 69, 168, 231, 243, 7, 240, 8, 155, 9,
-        152, 31, 136, 0, 136, 7, 240, 252, 7, 167, 241, 32, 2, 87, 66, 71, 235,
-        2, 7, 123, 1, 11, 147, 148, 248, 36, 48, 173, 248, 40, 0, 3, 240, 3,
-        3, 3, 43, 31, 250, 128, 251, 3, 209, 163, 104, 155, 5, 0, 241, 7, 130,
-        214, 248, 104, 49, 27, 177, 155, 121, 0, 43, 64, 240, 29, 130, 51, 104,
-        147, 248, 47, 48, 171, 177, 43, 109, 152, 7, 18, 213, 149, 248, 132,
-        48, 123, 177, 235, 243, 225, 241, 213, 248, 144, 16, 35, 240, 27, 221,
-        0, 40, 0, 240, 16, 130, 0, 35, 197, 248, 136, 48, 197, 248, 140, 48,
-        133, 248, 132, 48, 39, 177, 136, 152, 9, 40, 64, 242, 254, 129, 9, 224,
-        136, 154, 3, 42, 64, 242, 249, 129, 9, 155, 162, 241, 4, 10, 3, 241,
-        4, 9, 5, 224, 9, 152, 136, 154, 0, 241, 10, 9, 162, 241, 10, 10, 0,
-        39, 186, 241, 1, 15, 164, 248, 68, 112, 167, 100, 205, 248, 216, 144,
-        205, 248, 220, 160, 205, 248, 208, 144, 64, 243, 223, 129, 153, 248,
-        1, 48, 2, 51, 154, 69, 192, 242, 217, 129, 57, 70, 12, 34, 123, 168,
-        230, 243, 156, 247, 166, 75, 57, 70, 123, 147, 166, 75, 36, 34, 124,
-        147, 99, 171, 24, 70, 7, 147, 125, 150, 230, 243, 144, 247, 79, 170,
-        13, 245, 216, 124, 100, 146, 89, 170, 101, 146, 96, 70, 57, 70, 32,
-        34, 205, 248, 24, 192, 99, 148, 173, 248, 172, 113, 230, 243, 128, 247,
-        7, 155, 221, 248, 24, 192, 115, 147, 51, 104, 41, 70, 147, 248, 79,
-        48, 205, 248, 0, 192, 3, 240, 3, 3, 205, 248, 4, 144, 205, 248, 8, 160,
-        141, 248, 200, 49, 214, 248, 124, 6, 11, 154, 123, 171, 55, 240, 224,
-        219, 0, 40, 64, 240, 157, 129, 189, 248, 40, 0, 189, 248, 172, 49, 164,
-        248, 8, 1, 212, 248, 240, 0, 11, 147, 72, 177, 65, 120, 2, 49, 232,
-        243, 11, 243, 193, 27, 209, 241, 0, 10, 74, 235, 1, 10, 0, 224, 130,
-        70, 48, 70, 79, 169, 89, 170, 69, 171, 141, 248, 202, 160, 8, 240, 56,
-        220, 0, 40, 64, 240, 100, 129, 150, 248, 12, 37, 157, 248, 40, 49, 154,
-        66, 64, 240, 93, 129, 148, 248, 36, 48, 154, 7, 11, 213, 148, 248, 231,
-        48, 35, 177, 48, 70, 33, 70, 1, 34, 0, 240, 17, 251, 32, 70, 254, 33,
-        77, 240, 96, 222, 149, 249, 68, 16, 0, 41, 192, 242, 74, 129, 148, 248,
-        36, 48, 219, 7, 64, 241, 69, 129, 4, 241, 32, 0, 231, 243, 194, 245,
-        0, 40, 0, 240, 62, 129, 51, 104, 147, 248, 173, 48, 75, 177, 214, 248,
-        116, 1, 20, 240, 149, 220, 2, 40, 3, 209, 27, 244, 128, 127, 0, 240,
-        44, 129, 109, 34, 14, 168, 0, 33, 230, 243, 10, 247, 0, 35, 221, 248,
-        20, 225, 26, 70, 18, 224, 126, 168, 193, 24, 17, 248, 224, 28, 1, 240,
-        127, 1, 108, 41, 9, 216, 89, 72, 64, 92, 48, 177, 14, 175, 64, 178,
-        121, 84, 50, 234, 32, 2, 40, 191, 1, 34, 1, 51, 115, 69, 234, 209, 97,
-        104, 51, 106, 33, 240, 7, 1, 97, 96, 88, 125, 18, 241, 0, 12, 24, 191,
-        79, 240, 1, 12, 24, 177, 18, 185, 65, 240, 1, 1, 97, 96, 91, 125, 51,
-        177, 27, 244, 128, 111, 3, 209, 99, 104, 67, 240, 2, 3, 99, 96, 27,
-        240, 32, 2, 10, 146, 3, 208, 99, 104, 67, 240, 4, 3, 99, 96, 12, 155,
-        154, 107, 0, 35, 13, 224, 12, 152, 193, 24, 145, 248, 60, 16, 15, 6,
-        6, 213, 1, 240, 127, 1, 14, 168, 65, 92, 0, 41, 0, 240, 221, 128, 1,
-        51, 147, 66, 239, 209, 51, 104, 147, 248, 79, 48, 152, 7, 46, 208, 102,
-        153, 97, 179, 74, 120, 48, 70, 2, 50, 205, 248, 24, 192, 57, 240, 183,
-        216, 79, 240, 0, 9, 7, 70, 33, 70, 48, 70, 58, 70, 75, 70, 205, 248,
-        0, 144, 241, 247, 8, 251, 221, 248, 24, 192, 191, 177, 74, 168, 1, 48,
-        249, 28, 16, 34, 229, 247, 65, 250, 74, 171, 6, 235, 9, 2, 146, 248,
-        229, 34, 19, 248, 1, 31, 17, 64, 145, 66, 64, 240, 173, 128, 9, 241,
-        1, 9, 185, 241, 16, 15, 240, 209, 79, 240, 2, 12, 13, 154, 148, 69,
-        192, 240, 162, 128, 181, 248, 90, 32, 34, 177, 41, 109, 64, 242, 55,
-        19, 11, 64, 19, 185, 43, 109, 89, 6, 12, 213, 180, 248, 68, 48, 35,
-        177, 161, 108, 64, 242, 55, 19, 11, 64, 35, 185, 43, 109, 19, 240, 65,
-        15, 0, 240, 140, 128, 27, 240, 16, 15, 31, 208, 41, 109, 64, 242, 55,
-        19, 11, 64, 211, 185, 75, 6, 2, 213, 186, 241, 0, 15, 21, 208, 48, 70,
-        8, 158, 0, 35, 1, 34, 0, 147, 1, 146, 2, 147, 3, 147, 4, 147, 41, 70,
-        23, 34, 6, 241, 10, 3, 7, 240, 221, 223, 110, 224, 189, 134, 131, 0,
-        109, 136, 131, 0, 224, 248, 135, 0, 234, 177, 42, 109, 64, 242, 55,
-        19, 19, 64, 195, 177, 215, 7, 22, 213, 148, 248, 230, 48, 1, 43, 18,
-        209, 180, 248, 68, 48, 123, 177, 5, 241, 188, 3, 0, 147, 5, 241, 194,
-        3, 1, 147, 2, 39, 48, 70, 41, 70, 34, 70, 4, 241, 20, 3, 2, 151, 16,
-        240, 232, 223, 80, 224, 51, 104, 147, 248, 48, 48, 75, 185, 51, 106,
-        27, 104, 2, 43, 5, 209, 149, 249, 24, 49, 19, 185, 10, 152, 0, 40, 61,
-        208, 51, 106, 27, 104, 2, 43, 5, 209, 152, 248, 0, 48, 19, 177, 27,
-        244, 128, 111, 53, 208, 48, 70, 7, 240, 48, 219, 216, 248, 48, 48, 152,
-        66, 48, 210, 48, 70, 41, 70, 7, 240, 126, 222, 213, 248, 128, 48, 152,
-        66, 40, 210, 11, 154, 69, 169, 173, 248, 16, 33, 56, 168, 40, 34, 229,
-        247, 162, 249, 1, 35, 141, 248, 208, 49, 4, 241, 20, 1, 0, 35, 6, 34,
-        117, 168, 173, 248, 210, 49, 42, 175, 229, 247, 149, 249, 48, 70, 41,
-        70, 116, 170, 35, 70, 0, 151, 27, 240, 52, 216, 34, 224, 30, 39, 10,
-        224, 22, 39, 8, 224, 18, 39, 6, 224, 12, 39, 4, 224, 19, 39, 2, 224,
-        25, 39, 0, 224, 17, 39, 9, 158, 42, 171, 0, 150, 136, 158, 3, 147, 64,
-        70, 41, 70, 116, 170, 8, 155, 173, 248, 16, 113, 1, 150, 2, 148, 255,
-        247, 21, 249, 5, 224, 64, 70, 41, 70, 8, 154, 42, 171, 26, 240, 122,
-        216, 127, 176, 189, 232, 240, 143, 0, 191, 2, 75, 0, 240, 15, 0, 83,
-        248, 32, 0, 112, 71, 160, 49, 4, 0, 56, 181, 208, 248, 4, 53, 145, 248,
-        218, 0, 12, 70, 157, 105, 56, 177, 255, 247, 238, 255, 1, 70, 96, 25,
-        189, 232, 56, 64, 231, 243, 20, 182, 56, 189, 56, 181, 208, 248, 4,
-        53, 145, 248, 218, 0, 12, 70, 15, 40, 157, 105, 10, 208, 192, 67, 0,
-        240, 15, 0, 255, 247, 217, 255, 1, 70, 96, 25, 189, 232, 56, 64, 231,
-        243, 255, 181, 0, 32, 56, 189, 112, 181, 20, 70, 209, 248, 248, 32,
-        5, 70, 10, 185, 10, 105, 210, 104, 9, 125, 210, 104, 201, 7, 213, 248,
-        4, 5, 3, 212, 65, 104, 9, 177, 1, 57, 65, 96, 161, 105, 40, 70, 33,
-        240, 1, 1, 161, 97, 17, 29, 34, 70, 238, 247, 255, 253, 6, 70, 48, 185,
-        104, 104, 33, 70, 1, 34, 235, 247, 9, 252, 48, 70, 112, 189, 1, 32,
-        112, 189, 45, 233, 240, 65, 208, 248, 4, 53, 10, 105, 159, 105, 146,
-        249, 68, 32, 27, 104, 79, 244, 136, 116, 177, 248, 220, 80, 4, 251,
-        2, 52, 145, 248, 218, 48, 173, 4, 128, 70, 14, 70, 207, 25, 173, 12,
-        11, 177, 15, 43, 1, 209, 248, 136, 1, 224, 255, 247, 167, 255, 0, 40,
-        151, 248, 203, 48, 20, 221, 0, 43, 84, 209, 32, 70, 41, 70, 231, 243,
-        12, 247, 180, 248, 252, 48, 157, 66, 0, 211, 11, 185, 164, 248, 252,
-        80, 180, 248, 254, 48, 171, 66, 56, 191, 164, 248, 254, 80, 1, 35, 52,
-        224, 0, 43, 63, 208, 32, 70, 41, 70, 231, 243, 117, 243, 212, 248, 4,
-        49, 35, 185, 164, 248, 254, 48, 164, 248, 252, 48, 37, 224, 180, 248,
-        254, 48, 171, 66, 11, 209, 5, 224, 32, 70, 41, 70, 231, 243, 190, 243,
-        0, 40, 37, 209, 1, 61, 173, 178, 0, 45, 245, 209, 30, 224, 180, 248,
-        252, 48, 171, 66, 17, 209, 1, 53, 9, 224, 32, 70, 41, 70, 231, 243,
-        173, 243, 16, 177, 164, 248, 252, 80, 7, 224, 1, 53, 173, 178, 216,
-        248, 0, 48, 219, 105, 27, 105, 157, 66, 239, 219, 0, 35, 135, 248, 203,
-        48, 49, 105, 64, 70, 189, 232, 240, 65, 7, 240, 160, 159, 164, 248,
-        252, 80, 164, 248, 254, 80, 241, 231, 189, 232, 240, 129, 56, 181, 208,
-        248, 4, 53, 5, 70, 155, 105, 12, 70, 203, 24, 147, 248, 220, 48, 19,
-        185, 255, 247, 45, 255, 40, 185, 40, 70, 33, 70, 189, 232, 56, 64, 29,
-        240, 176, 152, 148, 248, 218, 0, 255, 247, 26, 255, 33, 70, 2, 70, 32,
-        35, 40, 70, 29, 240, 124, 218, 40, 185, 40, 70, 33, 70, 189, 232, 56,
-        64, 29, 240, 247, 152, 56, 189, 11, 104, 10, 121, 25, 105, 137, 121,
-        65, 177, 145, 7, 6, 213, 147, 248, 36, 32, 146, 7, 2, 212, 25, 70, 255,
-        247, 83, 191, 112, 71, 45, 233, 240, 79, 208, 248, 4, 117, 133, 176,
-        187, 105, 128, 70, 205, 24, 234, 136, 12, 70, 0, 42, 76, 208, 49, 248,
-        3, 176, 79, 240, 0, 10, 11, 241, 255, 54, 60, 224, 49, 70, 40, 70, 231,
-        243, 34, 245, 131, 105, 2, 70, 217, 7, 11, 212, 67, 240, 1, 3, 131,
-        97, 185, 241, 0, 15, 8, 191, 129, 70, 49, 70, 40, 70, 231, 243, 105,
-        245, 29, 224, 123, 104, 11, 177, 1, 59, 123, 96, 251, 104, 1, 51, 251,
-        96, 4, 241, 20, 3, 147, 232, 3, 0, 35, 105, 2, 144, 173, 248, 12, 16,
-        64, 70, 33, 70, 1, 147, 29, 240, 24, 218, 1, 155, 64, 70, 25, 70, 2,
-        170, 26, 240, 158, 252, 16, 185, 21, 224, 79, 240, 0, 9, 12, 35, 3,
-        251, 11, 83, 83, 68, 83, 248, 4, 60, 75, 69, 197, 209, 1, 62, 170, 241,
-        12, 10, 114, 28, 240, 209, 149, 248, 203, 48, 27, 177, 64, 70, 33, 70,
-        255, 247, 249, 254, 5, 176, 189, 232, 240, 143, 45, 233, 243, 65, 5,
-        70, 213, 248, 4, 101, 12, 70, 183, 105, 1, 241, 20, 3, 147, 232, 3,
-        0, 212, 248, 16, 128, 0, 144, 173, 248, 4, 16, 231, 25, 24, 224, 35,
-        125, 219, 7, 3, 212, 115, 104, 11, 177, 1, 59, 115, 96, 139, 105, 104,
-        104, 35, 240, 1, 3, 139, 97, 1, 34, 235, 247, 218, 250, 157, 248, 0,
-        48, 216, 7, 5, 212, 40, 70, 65, 70, 106, 70, 26, 240, 89, 252, 128,
-        177, 0, 33, 56, 70, 231, 243, 198, 243, 1, 70, 0, 40, 223, 209, 180,
-        248, 220, 48, 51, 177, 151, 248, 203, 48, 27, 177, 40, 70, 33, 70, 255,
-        247, 186, 254, 189, 232, 252, 129, 45, 233, 255, 71, 208, 248, 4, 53,
-        146, 70, 158, 105, 15, 105, 142, 25, 150, 248, 221, 32, 4, 70, 13, 70,
-        211, 248, 0, 192, 151, 248, 68, 144, 0, 42, 115, 209, 79, 244, 136,
-        126, 79, 250, 137, 249, 14, 251, 9, 201, 79, 240, 1, 8, 134, 248, 221,
-        128, 217, 248, 4, 225, 14, 241, 255, 62, 201, 248, 4, 225, 211, 248,
-        28, 224, 14, 241, 255, 62, 195, 248, 28, 224, 129, 248, 231, 32, 3,
-        34, 19, 240, 170, 216, 217, 248, 4, 49, 35, 187, 215, 248, 204, 48,
-        19, 244, 128, 99, 31, 209, 215, 248, 244, 32, 82, 142, 2, 244, 64, 66,
-        162, 245, 64, 64, 66, 66, 66, 235, 0, 2, 14, 50, 7, 235, 130, 2, 82,
-        104, 130, 248, 231, 48, 227, 105, 179, 249, 36, 48, 91, 177, 148, 248,
-        117, 50, 67, 185, 64, 34, 0, 147, 132, 248, 117, 130, 32, 70, 65, 70,
-        19, 70, 14, 240, 86, 216, 79, 240, 0, 8, 32, 70, 41, 70, 134, 248, 200,
-        128, 134, 248, 202, 128, 28, 240, 238, 223, 198, 248, 208, 128, 5, 241,
-        20, 3, 147, 232, 3, 0, 2, 144, 173, 248, 12, 16, 186, 241, 0, 15, 9,
-        209, 32, 70, 41, 70, 79, 246, 255, 114, 0, 35, 29, 240, 89, 217, 0,
-        40, 246, 209, 3, 224, 32, 70, 41, 70, 255, 247, 73, 255, 157, 248, 8,
-        48, 217, 7, 5, 212, 32, 70, 57, 70, 2, 170, 26, 240, 195, 251, 16, 177,
-        0, 35, 134, 248, 221, 48, 189, 232, 255, 135, 45, 233, 240, 65, 141,
-        106, 7, 70, 149, 248, 36, 0, 11, 70, 16, 240, 2, 0, 148, 70, 3, 209,
-        42, 105, 18, 124, 0, 42, 46, 209, 215, 248, 4, 69, 152, 105, 166, 105,
-        16, 244, 128, 96, 46, 68, 182, 248, 6, 128, 6, 209, 34, 105, 144, 69,
-        3, 221, 97, 104, 98, 105, 145, 66, 29, 216, 26, 70, 56, 70, 49, 70,
-        99, 70, 238, 247, 254, 251, 176, 177, 243, 136, 200, 235, 3, 8, 184,
-        241, 1, 15, 2, 209, 99, 104, 1, 51, 99, 96, 181, 248, 220, 48, 51, 177,
-        150, 248, 203, 48, 51, 185, 56, 70, 41, 70, 255, 247, 246, 253, 1, 32,
-        189, 232, 240, 129, 1, 32, 189, 232, 240, 129, 210, 248, 24, 192, 248,
-        181, 28, 240, 2, 15, 7, 70, 13, 70, 20, 70, 208, 248, 4, 101, 5, 208,
-        209, 248, 52, 1, 68, 106, 128, 106, 160, 71, 248, 189, 17, 70, 26, 70,
-        255, 247, 171, 255, 128, 185, 179, 104, 56, 70, 1, 51, 179, 96, 179,
-        105, 41, 70, 235, 24, 211, 248, 216, 32, 1, 50, 195, 248, 216, 32, 34,
-        70, 189, 232, 248, 64, 29, 240, 202, 152, 248, 189, 45, 233, 248, 67,
-        12, 136, 12, 39, 1, 60, 7, 251, 4, 23, 129, 70, 13, 70, 144, 70, 8,
-        55, 30, 224, 40, 70, 33, 70, 231, 243, 159, 243, 131, 106, 2, 70, 152,
-        69, 2, 209, 131, 105, 155, 7, 7, 213, 40, 70, 33, 70, 0, 46, 8, 191,
-        22, 70, 231, 243, 231, 243, 6, 224, 72, 70, 65, 70, 35, 70, 255, 247,
-        180, 255, 0, 224, 0, 38, 59, 104, 179, 66, 226, 209, 1, 60, 12, 63,
-        96, 28, 247, 209, 189, 232, 248, 131, 208, 248, 4, 53, 112, 181, 158,
-        105, 5, 70, 12, 70, 3, 34, 142, 25, 18, 240, 138, 223, 40, 70, 33, 70,
-        29, 240, 86, 219, 1, 35, 134, 248, 245, 48, 112, 189, 195, 105, 48,
-        181, 179, 249, 30, 32, 179, 249, 28, 80, 133, 176, 173, 24, 179, 249,
-        32, 32, 179, 249, 34, 48, 173, 24, 237, 24, 4, 70, 90, 209, 144, 248,
-        116, 50, 41, 70, 35, 240, 8, 3, 128, 248, 116, 50, 111, 240, 63, 2,
-        0, 105, 40, 240, 90, 218, 212, 248, 104, 50, 89, 89, 193, 177, 209,
-        248, 204, 48, 91, 5, 20, 212, 209, 248, 244, 48, 91, 142, 3, 244, 64,
-        67, 163, 245, 64, 64, 67, 66, 67, 235, 0, 3, 14, 51, 1, 235, 131, 3,
-        91, 104, 43, 177, 147, 248, 231, 48, 19, 177, 32, 70, 28, 240, 25, 223,
-        4, 53, 32, 45, 223, 209, 212, 248, 36, 1, 1, 169, 0, 34, 77, 240, 26,
-        218, 23, 224, 149, 248, 231, 48, 163, 177, 43, 125, 218, 7, 17, 212,
-        212, 248, 4, 53, 155, 105, 235, 24, 147, 248, 245, 48, 27, 185, 32,
-        70, 41, 70, 255, 247, 154, 255, 149, 248, 232, 32, 26, 185, 32, 70,
-        41, 70, 255, 247, 116, 254, 212, 248, 36, 1, 1, 169, 26, 240, 128, 250,
-        5, 70, 0, 40, 223, 209, 212, 248, 164, 21, 33, 177, 75, 137, 19, 177,
-        32, 70, 243, 247, 160, 248, 5, 176, 48, 189, 115, 181, 10, 105, 4, 70,
-        147, 121, 13, 70, 19, 185, 19, 124, 0, 43, 95, 209, 212, 248, 4, 53,
-        146, 249, 68, 16, 24, 104, 79, 244, 136, 118, 6, 251, 1, 1, 209, 248,
-        4, 1, 1, 48, 193, 248, 4, 1, 216, 105, 1, 48, 216, 97, 1, 32, 133, 248,
-        231, 0, 133, 248, 232, 0, 158, 105, 0, 32, 174, 25, 165, 248, 228, 0,
-        134, 248, 202, 0, 209, 248, 4, 17, 1, 41, 31, 209, 210, 248, 204, 48,
-        19, 244, 128, 99, 26, 209, 210, 248, 244, 0, 64, 142, 0, 244, 64, 64,
-        160, 245, 64, 76, 220, 241, 0, 0, 64, 235, 12, 0, 14, 48, 2, 235, 128,
-        2, 82, 104, 130, 248, 231, 16, 148, 248, 117, 34, 50, 177, 132, 248,
-        117, 50, 32, 70, 64, 34, 0, 147, 13, 240, 195, 222, 227, 105, 179, 249,
-        30, 32, 179, 249, 28, 16, 137, 24, 179, 249, 32, 32, 137, 24, 179, 249,
-        34, 32, 139, 24, 0, 43, 9, 221, 148, 248, 116, 50, 67, 240, 8, 3, 132,
-        248, 116, 50, 0, 35, 134, 248, 245, 48, 6, 224, 32, 70, 41, 70, 2, 176,
-        189, 232, 112, 64, 255, 247, 24, 191, 2, 176, 112, 189, 255, 247, 189,
-        190, 45, 233, 248, 67, 5, 70, 137, 70, 22, 70, 79, 240, 0, 8, 213, 248,
-        104, 50, 83, 248, 8, 112, 103, 177, 187, 121, 11, 177, 59, 121, 11,
-        185, 59, 124, 51, 185, 40, 70, 57, 70, 74, 70, 26, 240, 35, 250, 4,
-        70, 40, 185, 8, 241, 4, 8, 184, 241, 32, 15, 232, 209, 5, 224, 144,
-        248, 36, 48, 152, 7, 13, 212, 59, 124, 91, 177, 149, 248, 116, 34, 40,
-        105, 2, 240, 8, 2, 0, 42, 20, 191, 32, 34, 160, 34, 73, 70, 82, 178,
-        56, 224, 213, 248, 4, 53, 155, 105, 227, 24, 182, 177, 147, 248, 244,
-        32, 22, 240, 2, 15, 20, 191, 66, 240, 1, 2, 34, 240, 1, 2, 131, 248,
-        244, 32, 148, 248, 231, 48, 35, 185, 40, 70, 33, 70, 255, 247, 75, 255,
-        22, 224, 1, 35, 132, 248, 232, 48, 18, 224, 147, 248, 244, 48, 217,
-        7, 14, 212, 149, 248, 116, 50, 26, 7, 2, 213, 132, 248, 232, 96, 7,
-        224, 148, 248, 231, 48, 35, 177, 40, 70, 33, 70, 50, 70, 255, 247, 149,
-        253, 149, 248, 116, 50, 40, 105, 27, 7, 88, 191, 102, 240, 127, 6, 4,
-        241, 20, 1, 50, 70, 40, 240, 48, 217, 0, 32, 189, 232, 248, 131, 208,
-        248, 4, 53, 247, 181, 156, 105, 6, 70, 12, 25, 212, 248, 212, 48, 13,
-        70, 23, 70, 0, 43, 84, 209, 148, 248, 201, 48, 90, 7, 80, 212, 67, 240,
-        4, 3, 132, 248, 201, 48, 227, 136, 19, 177, 255, 247, 234, 251, 216,
-        185, 2, 35, 0, 147, 48, 70, 0, 35, 41, 105, 5, 241, 20, 2, 1, 147, 16,
-        240, 0, 220, 16, 185, 132, 248, 200, 0, 8, 224, 131, 127, 35, 240, 48,
-        3, 67, 240, 32, 3, 131, 119, 1, 35, 132, 248, 200, 48, 148, 248, 201,
-        48, 35, 240, 1, 3, 13, 224, 148, 248, 200, 48, 107, 177, 43, 125, 216,
-        7, 10, 212, 148, 248, 201, 48, 217, 7, 33, 213, 58, 5, 31, 212, 67,
-        240, 2, 3, 132, 248, 201, 48, 26, 224, 48, 70, 41, 70, 255, 247, 167,
-        251, 0, 40, 10, 221, 149, 248, 218, 0, 192, 67, 0, 240, 15, 0, 255,
-        247, 150, 251, 41, 70, 2, 70, 48, 70, 3, 224, 48, 70, 41, 70, 79, 246,
-        255, 114, 0, 35, 3, 176, 189, 232, 240, 64, 28, 240, 240, 158, 3, 176,
-        240, 189, 45, 233, 240, 79, 145, 176, 1, 147, 178, 248, 2, 144, 178,
-        248, 32, 128, 142, 106, 79, 234, 89, 25, 5, 70, 12, 70, 147, 70, 9,
-        240, 15, 9, 8, 244, 127, 72, 208, 248, 4, 165, 22, 177, 150, 248, 231,
-        48, 43, 185, 40, 70, 6, 241, 20, 1, 2, 34, 255, 247, 16, 255, 33, 70,
-        3, 170, 40, 70, 238, 247, 174, 252, 213, 248, 4, 21, 10, 155, 143, 105,
-        26, 136, 247, 25, 151, 248, 202, 16, 1, 187, 185, 241, 0, 15, 2, 209,
-        184, 241, 0, 15, 26, 208, 2, 240, 12, 2, 4, 42, 22, 208, 189, 248, 18,
-        32, 2, 240, 16, 2, 146, 178, 18, 177, 187, 248, 4, 32, 1, 224, 218,
-        138, 18, 9, 73, 234, 2, 18, 218, 130, 9, 154, 19, 136, 162, 248, 78,
-        128, 35, 240, 16, 3, 27, 4, 27, 12, 19, 128, 1, 155, 43, 185, 185, 241,
-        0, 15, 5, 209, 184, 241, 0, 15, 2, 209, 1, 35, 135, 248, 202, 48, 34,
-        74, 22, 179, 150, 248, 231, 48, 251, 177, 51, 125, 216, 7, 28, 212,
-        163, 105, 153, 7, 25, 212, 227, 137, 3, 240, 7, 3, 210, 92, 13, 42,
-        1, 220, 1, 50, 0, 224, 15, 34, 40, 70, 33, 70, 255, 247, 59, 253, 64,
-        187, 218, 248, 8, 48, 1, 32, 1, 51, 202, 248, 8, 48, 215, 248, 216,
-        48, 1, 51, 199, 248, 216, 48, 29, 224, 227, 127, 67, 240, 1, 3, 227,
-        119, 214, 248, 248, 48, 11, 185, 51, 105, 219, 104, 217, 104, 227, 137,
-        4, 49, 3, 240, 7, 3, 211, 92, 13, 43, 1, 220, 1, 51, 0, 224, 15, 35,
-        40, 70, 34, 70, 238, 247, 58, 249, 208, 241, 1, 0, 56, 191, 0, 32, 0,
-        224, 0, 32, 17, 176, 189, 232, 240, 143, 72, 194, 135, 0, 248, 181,
-        208, 248, 4, 53, 0, 36, 159, 105, 37, 70, 207, 25, 1, 38, 166, 64, 240,
-        178, 255, 247, 218, 250, 1, 70, 56, 70, 231, 243, 2, 241, 8, 177, 53,
-        67, 237, 178, 1, 52, 4, 44, 240, 209, 40, 70, 248, 189, 3, 106, 211,
-        248, 16, 33, 154, 177, 209, 248, 252, 48, 179, 249, 210, 0, 217, 106,
-        2, 235, 0, 18, 208, 137, 80, 177, 146, 137, 66, 177, 74, 67, 130, 66,
-        40, 191, 2, 70, 88, 106, 218, 98, 65, 26, 138, 24, 90, 98, 112, 71,
-        56, 181, 177, 248, 90, 0, 12, 70, 21, 70, 233, 247, 80, 248, 248, 177,
-        149, 248, 131, 0, 16, 240, 1, 0, 26, 208, 0, 35, 149, 248, 138, 16,
-        24, 70, 16, 224, 234, 24, 146, 248, 139, 32, 1, 42, 4, 209, 180, 248,
-        90, 0, 192, 243, 128, 16, 5, 224, 2, 42, 4, 191, 180, 248, 90, 0, 192,
-        243, 192, 16, 1, 51, 139, 66, 2, 218, 0, 40, 234, 208, 1, 32, 56, 189,
-        45, 233, 247, 79, 76, 141, 156, 70, 79, 246, 56, 115, 0, 44, 8, 191,
-        28, 70, 36, 178, 177, 248, 50, 144, 111, 240, 199, 3, 4, 234, 228, 116,
-        156, 66, 184, 191, 28, 70, 9, 244, 64, 73, 144, 248, 12, 49, 185, 245,
-        64, 79, 20, 191, 79, 240, 2, 9, 79, 240, 1, 9, 75, 69, 5, 70, 14, 70,
-        208, 248, 8, 161, 164, 178, 14, 209, 0, 42, 46, 208, 144, 248, 13, 49,
-        83, 177, 34, 178, 65, 50, 7, 219, 91, 178, 228, 24, 36, 178, 4, 234,
-        228, 116, 164, 178, 0, 224, 2, 179, 213, 248, 244, 48, 91, 142, 3, 244,
-        64, 67, 179, 245, 64, 79, 20, 191, 2, 35, 1, 35, 75, 69, 20, 208, 213,
-        248, 252, 32, 146, 248, 216, 48, 123, 177, 146, 249, 209, 16, 34, 178,
-        145, 66, 10, 220, 91, 178, 228, 24, 36, 178, 4, 234, 228, 116, 111,
-        240, 199, 2, 148, 66, 184, 191, 20, 70, 164, 178, 79, 240, 0, 8, 87,
-        70, 195, 70, 41, 224, 59, 120, 2, 43, 14, 208, 3, 43, 15, 208, 1, 43,
-        22, 209, 99, 70, 40, 70, 49, 70, 34, 178, 205, 248, 4, 192, 31, 240,
-        200, 220, 221, 248, 4, 192, 12, 224, 150, 248, 186, 0, 9, 224, 154,
-        248, 224, 0, 48, 177, 192, 235, 9, 3, 88, 66, 64, 235, 3, 0, 0, 224,
-        0, 32, 187, 120, 1, 34, 18, 250, 3, 243, 1, 59, 24, 64, 123, 120, 147,
-        68, 152, 64, 4, 55, 128, 68, 218, 248, 20, 48, 155, 69, 209, 219, 67,
-        185, 40, 70, 49, 70, 34, 178, 99, 70, 3, 176, 189, 232, 240, 79, 31,
-        240, 159, 156, 64, 70, 3, 176, 189, 232, 240, 143, 45, 233, 247, 79,
-        208, 248, 0, 160, 7, 70, 1, 145, 208, 248, 252, 96, 21, 70, 218, 248,
-        204, 68, 79, 240, 0, 11, 67, 224, 115, 107, 11, 43, 10, 209, 160, 104,
-        7, 241, 188, 1, 6, 34, 228, 247, 49, 251, 24, 185, 40, 70, 33, 240,
-        92, 220, 6, 224, 56, 70, 161, 104, 1, 34, 43, 29, 255, 247, 71, 255,
-        40, 96, 1, 155, 67, 179, 150, 248, 61, 48, 43, 179, 243, 108, 27, 179,
-        177, 70, 79, 240, 0, 8, 28, 224, 10, 33, 1, 251, 8, 97, 160, 104, 98,
-        49, 6, 34, 228, 247, 18, 251, 120, 185, 162, 104, 185, 248, 96, 48,
-        80, 142, 0, 147, 231, 243, 15, 242, 0, 155, 131, 66, 5, 209, 185, 248,
-        104, 48, 19, 177, 40, 70, 33, 240, 48, 220, 8, 241, 1, 8, 9, 241, 10,
-        9, 243, 108, 152, 69, 223, 219, 11, 241, 1, 11, 8, 53, 4, 52, 218, 248,
-        204, 52, 27, 104, 155, 69, 182, 219, 189, 232, 254, 143, 45, 233, 248,
-        67, 4, 70, 136, 70, 6, 104, 208, 248, 240, 112, 0, 37, 26, 224, 170,
-        28, 83, 248, 34, 144, 184, 241, 0, 15, 11, 208, 153, 248, 8, 48, 58,
-        122, 154, 66, 14, 209, 9, 241, 9, 0, 7, 241, 9, 1, 228, 247, 213, 250,
-        56, 185, 74, 70, 214, 248, 200, 6, 33, 70, 146, 248, 131, 48, 70, 240,
-        63, 219, 1, 53, 214, 248, 16, 51, 26, 104, 149, 66, 223, 211, 148, 248,
-        92, 48, 27, 185, 180, 248, 90, 48, 154, 6, 6, 213, 214, 248, 200, 6,
-        33, 70, 189, 232, 248, 67, 70, 240, 217, 154, 189, 232, 248, 131, 248,
-        181, 4, 104, 7, 122, 1, 114, 35, 104, 5, 70, 147, 249, 82, 48, 14, 70,
-        51, 177, 49, 185, 208, 248, 92, 3, 16, 48, 12, 240, 125, 221, 4, 224,
-        25, 177, 32, 70, 0, 33, 5, 240, 72, 250, 47, 114, 40, 70, 22, 185, 15,
-        240, 54, 218, 3, 224, 148, 248, 38, 18, 16, 240, 215, 223, 46, 114,
-        0, 33, 212, 248, 104, 34, 132, 248, 112, 18, 132, 248, 115, 18, 83,
-        88, 123, 177, 152, 121, 104, 185, 24, 122, 88, 177, 148, 248, 112, 2,
-        1, 48, 132, 248, 112, 2, 27, 124, 35, 185, 148, 248, 115, 50, 1, 51,
-        132, 248, 115, 50, 4, 49, 32, 41, 234, 209, 212, 248, 112, 34, 35, 104,
-        18, 240, 255, 31, 12, 191, 0, 34, 1, 34, 131, 248, 63, 32, 34, 104,
-        35, 106, 146, 248, 63, 32, 24, 105, 210, 241, 1, 2, 56, 191, 0, 34,
-        10, 240, 155, 252, 32, 70, 17, 240, 126, 220, 132, 248, 113, 2, 40,
-        70, 27, 240, 121, 222, 40, 70, 241, 247, 180, 251, 40, 70, 14, 240,
-        239, 220, 1, 70, 40, 70, 237, 247, 58, 252, 32, 70, 41, 70, 50, 70,
-        5, 240, 114, 248, 35, 104, 147, 248, 173, 48, 83, 177, 148, 248, 114,
-        50, 59, 177, 148, 248, 112, 50, 35, 185, 32, 70, 189, 232, 248, 64,
-        33, 240, 239, 154, 248, 189, 16, 181, 208, 248, 252, 48, 1, 104, 147,
-        248, 81, 32, 234, 185, 208, 248, 244, 0, 176, 249, 42, 64, 88, 109,
-        36, 26, 147, 248, 92, 0, 0, 44, 184, 191, 100, 66, 132, 66, 16, 219,
-        1, 32, 131, 248, 81, 0, 131, 248, 61, 32, 90, 98, 10, 106, 210, 248,
-        240, 0, 10, 48, 194, 248, 240, 0, 210, 248, 244, 0, 5, 56, 194, 248,
-        244, 0, 147, 248, 81, 32, 18, 179, 179, 248, 88, 32, 179, 248, 90, 0,
-        1, 50, 146, 178, 144, 66, 163, 248, 88, 32, 24, 210, 0, 34, 131, 248,
-        81, 32, 90, 101, 163, 248, 88, 32, 11, 106, 211, 248, 240, 16, 211,
-        248, 252, 32, 145, 66, 11, 221, 211, 248, 244, 32, 211, 248, 0, 1, 130,
-        66, 5, 210, 10, 57, 5, 50, 195, 248, 240, 16, 195, 248, 244, 32, 16,
-        189, 45, 233, 240, 67, 135, 176, 13, 70, 7, 70, 22, 70, 255, 247, 225,
-        253, 4, 70, 181, 248, 90, 0, 231, 243, 93, 243, 48, 177, 150, 248, 111,
-        48, 218, 7, 2, 213, 6, 241, 111, 4, 42, 224, 181, 248, 90, 0, 232, 247,
-        39, 254, 56, 177, 150, 248, 131, 48, 219, 7, 3, 213, 20, 177, 6, 241,
-        131, 4, 29, 224, 181, 248, 90, 48, 179, 245, 128, 111, 2, 208, 179,
-        245, 0, 111, 6, 209, 150, 248, 151, 48, 220, 7, 2, 213, 6, 241, 151,
-        4, 14, 224, 0, 35, 8, 34, 0, 147, 1, 146, 2, 147, 3, 147, 4, 147, 56,
-        70, 41, 70, 23, 34, 51, 70, 6, 240, 172, 223, 1, 36, 201, 224, 32, 70,
-        29, 240, 121, 249, 43, 109, 0, 234, 3, 8, 213, 248, 140, 48, 83, 177,
-        234, 243, 25, 240, 213, 248, 144, 16, 34, 240, 83, 219, 1, 40, 2, 209,
-        0, 35, 197, 248, 140, 48, 24, 240, 4, 15, 29, 208, 163, 120, 97, 120,
-        1, 43, 4, 209, 227, 120, 19, 185, 4, 41, 0, 240, 163, 128, 4, 41, 5,
-        209, 32, 70, 88, 240, 143, 217, 0, 40, 64, 240, 159, 128, 213, 248,
-        140, 144, 185, 241, 0, 15, 64, 240, 133, 128, 99, 120, 0, 43, 0, 240,
-        129, 128, 32, 70, 4, 33, 91, 224, 24, 240, 2, 15, 20, 208, 213, 248,
-        140, 48, 0, 43, 118, 209, 163, 120, 98, 120, 1, 43, 3, 209, 227, 120,
-        11, 185, 2, 42, 126, 208, 0, 42, 108, 208, 32, 70, 2, 33, 88, 240, 106,
-        217, 0, 40, 122, 209, 101, 224, 24, 240, 1, 9, 69, 208, 213, 248, 140,
-        48, 0, 43, 94, 209, 181, 248, 90, 48, 8, 43, 90, 209, 163, 120, 1, 43,
-        6, 209, 227, 120, 35, 185, 98, 120, 8, 58, 210, 178, 2, 42, 96, 217,
-        99, 120, 155, 177, 32, 70, 9, 33, 88, 240, 76, 217, 129, 70, 0, 40,
-        91, 209, 32, 70, 8, 33, 88, 240, 69, 217, 128, 70, 0, 40, 86, 209, 32,
-        70, 10, 33, 88, 240, 62, 217, 0, 40, 76, 209, 163, 120, 1, 43, 9, 209,
-        148, 248, 3, 144, 185, 241, 0, 15, 4, 209, 99, 120, 1, 43, 69, 208,
-        5, 43, 67, 208, 99, 120, 0, 43, 42, 208, 32, 70, 5, 33, 88, 240, 40,
-        217, 129, 70, 0, 40, 55, 209, 32, 70, 1, 33, 88, 240, 33, 217, 0, 40,
-        51, 209, 28, 224, 24, 244, 128, 127, 9, 208, 32, 70, 11, 33, 88, 240,
-        23, 217, 75, 70, 160, 177, 98, 120, 11, 42, 17, 209, 37, 224, 213, 248,
-        140, 48, 99, 185, 163, 120, 1, 43, 9, 209, 148, 248, 3, 144, 185, 241,
-        0, 15, 4, 209, 99, 120, 1, 43, 23, 208, 5, 43, 21, 208, 0, 35, 150,
-        248, 50, 32, 0, 147, 1, 36, 2, 146, 3, 147, 4, 147, 56, 70, 41, 70,
-        23, 34, 51, 70, 1, 148, 6, 240, 232, 222, 6, 224, 28, 70, 4, 224, 68,
-        70, 2, 224, 0, 36, 0, 224, 76, 70, 32, 70, 7, 176, 189, 232, 240, 131,
-        45, 233, 240, 79, 6, 104, 4, 70, 214, 248, 204, 52, 208, 248, 252, 0,
-        135, 176, 3, 144, 24, 104, 15, 70, 192, 0, 1, 146, 234, 243, 74, 243,
-        5, 70, 0, 40, 0, 240, 232, 128, 32, 70, 57, 70, 42, 70, 214, 248, 204,
-        148, 255, 247, 128, 253, 32, 70, 41, 70, 33, 240, 119, 216, 0, 47, 0,
-        240, 215, 128, 212, 248, 244, 32, 32, 70, 2, 146, 6, 240, 204, 221,
-        40, 177, 32, 70, 2, 153, 0, 34, 4, 171, 255, 247, 213, 252, 128, 70,
-        32, 70, 6, 240, 193, 221, 56, 177, 3, 152, 67, 107, 1, 43, 3, 209, 51,
-        106, 211, 248, 244, 176, 6, 224, 32, 70, 6, 240, 181, 221, 0, 35, 4,
-        147, 152, 70, 155, 70, 214, 248, 204, 52, 27, 104, 3, 241, 1, 10, 9,
-        235, 138, 10, 95, 30, 35, 70, 84, 70, 194, 70, 152, 70, 35, 224, 84,
-        248, 4, 9, 8, 241, 188, 1, 6, 34, 228, 247, 140, 248, 208, 185, 99,
-        104, 88, 142, 230, 243, 108, 247, 2, 154, 3, 70, 80, 142, 0, 147, 230,
-        243, 102, 247, 0, 155, 131, 66, 13, 209, 5, 235, 199, 3, 91, 104, 68,
-        70, 85, 248, 55, 128, 2, 55, 4, 147, 89, 248, 39, 48, 179, 249, 42,
-        48, 1, 147, 4, 224, 1, 63, 0, 47, 217, 218, 68, 70, 208, 70, 3, 152,
-        67, 107, 154, 31, 1, 42, 1, 217, 11, 43, 2, 209, 0, 35, 4, 147, 152,
-        70, 48, 70, 33, 70, 0, 34, 35, 240, 225, 223, 120, 185, 51, 106, 1,
-        154, 211, 248, 240, 48, 154, 66, 9, 220, 187, 241, 10, 15, 6, 217, 211,
-        26, 155, 68, 187, 241, 10, 15, 184, 191, 79, 240, 10, 11, 214, 248,
-        204, 52, 0, 39, 27, 104, 17, 224, 85, 248, 55, 16, 11, 235, 8, 2, 145,
-        66, 10, 217, 79, 240, 0, 8, 205, 248, 4, 176, 194, 70, 179, 70, 38,
-        70, 76, 70, 169, 70, 61, 70, 65, 224, 1, 55, 159, 66, 235, 219, 240,
-        231, 48, 70, 6, 240, 63, 221, 24, 179, 4, 235, 133, 3, 67, 68, 153,
-        104, 2, 152, 74, 142, 67, 142, 2, 244, 64, 66, 3, 244, 64, 67, 178,
-        245, 64, 79, 20, 191, 2, 34, 1, 34, 179, 245, 64, 79, 20, 191, 2, 35,
-        1, 35, 154, 66, 12, 209, 0, 34, 6, 171, 67, 248, 4, 45, 48, 70, 255,
-        247, 48, 252, 1, 154, 4, 155, 211, 24, 5, 154, 154, 66, 18, 217, 9,
-        235, 197, 3, 83, 248, 24, 48, 10, 241, 2, 2, 73, 248, 58, 48, 4, 235,
-        133, 3, 67, 68, 84, 248, 34, 16, 152, 104, 10, 241, 1, 10, 68, 248,
-        34, 0, 153, 96, 1, 55, 8, 241, 4, 8, 219, 248, 204, 52, 27, 104, 159,
-        66, 188, 219, 94, 70, 77, 70, 198, 248, 208, 164, 40, 70, 234, 247,
-        187, 250, 7, 176, 189, 232, 240, 143, 240, 181, 4, 106, 209, 248, 252,
-        48, 212, 248, 16, 81, 0, 45, 81, 208, 209, 248, 0, 17, 179, 248, 210,
-        96, 209, 248, 16, 192, 194, 185, 144, 248, 8, 118, 212, 248, 240, 16,
-        121, 24, 140, 69, 49, 178, 3, 219, 0, 41, 1, 221, 113, 30, 13, 224,
-        5, 235, 1, 23, 151, 249, 2, 112, 23, 241, 128, 15, 55, 208, 188, 69,
-        53, 218, 2, 41, 51, 220, 113, 28, 0, 224, 0, 33, 163, 248, 210, 16,
-        9, 178, 14, 1, 169, 25, 173, 93, 94, 106, 21, 240, 2, 15, 147, 248,
-        191, 80, 20, 191, 101, 240, 127, 5, 5, 240, 127, 5, 131, 248, 191, 80,
-        145, 249, 1, 80, 196, 248, 240, 80, 145, 249, 3, 80, 196, 248, 244,
-        80, 220, 106, 77, 137, 52, 27, 44, 25, 205, 136, 131, 248, 140, 80,
-        13, 137, 73, 137, 29, 99, 217, 98, 36, 234, 228, 113, 89, 98, 58, 177,
-        2, 104, 210, 105, 210, 248, 248, 32, 145, 66, 44, 191, 89, 98, 90, 98,
-        240, 189, 45, 233, 247, 79, 137, 70, 208, 248, 104, 18, 5, 70, 20, 70,
-        0, 35, 202, 88, 10, 177, 162, 66, 3, 208, 4, 51, 32, 43, 248, 209, 51,
-        225, 212, 248, 248, 128, 212, 248, 252, 112, 216, 248, 4, 96, 212, 248,
-        240, 48, 183, 248, 218, 32, 22, 241, 255, 54, 1, 147, 24, 191, 1, 38,
-        50, 177, 136, 73, 40, 70, 12, 240, 146, 221, 0, 33, 167, 248, 218, 16,
-        123, 106, 10, 43, 56, 191, 10, 35, 123, 98, 185, 241, 0, 15, 7, 209,
-        215, 248, 204, 0, 208, 177, 234, 247, 41, 250, 199, 248, 204, 144, 21,
-        224, 46, 177, 185, 241, 4, 15, 2, 209, 0, 35, 135, 248, 189, 48, 1,
-        154, 146, 249, 52, 48, 1, 43, 2, 208, 185, 241, 12, 15, 6, 208, 185,
-        241, 4, 15, 0, 240, 250, 128, 32, 70, 73, 70, 241, 224, 180, 248, 90,
-        48, 19, 240, 96, 15, 3, 208, 32, 70, 0, 33, 255, 247, 68, 252, 212,
-        248, 8, 49, 107, 177, 211, 248, 220, 48, 83, 177, 32, 70, 213, 248,
-        16, 19, 213, 248, 204, 36, 30, 240, 175, 222, 64, 177, 32, 70, 1, 33,
-        215, 224, 213, 248, 16, 3, 213, 248, 204, 20, 6, 240, 253, 220, 213,
-        248, 204, 180, 219, 248, 0, 48, 197, 248, 208, 52, 0, 43, 87, 208, 35,
-        122, 3, 177, 94, 185, 7, 241, 154, 0, 0, 33, 28, 34, 229, 243, 118,
-        243, 0, 35, 135, 248, 182, 48, 135, 248, 61, 48, 251, 100, 79, 240,
-        0, 9, 75, 70, 202, 70, 30, 224, 219, 248, 8, 32, 80, 142, 0, 244, 64,
-        66, 178, 245, 64, 79, 2, 209, 1, 51, 219, 178, 3, 224, 10, 241, 1, 10,
-        95, 250, 138, 250, 151, 248, 182, 32, 66, 185, 0, 147, 230, 243, 208,
-        245, 1, 70, 7, 241, 154, 0, 230, 243, 27, 245, 0, 155, 9, 241, 1, 9,
-        11, 241, 4, 11, 213, 248, 204, 36, 18, 104, 145, 69, 219, 211, 186,
-        241, 1, 15, 1, 216, 1, 43, 1, 217, 1, 35, 1, 224, 35, 122, 11, 185,
-        135, 248, 188, 48, 40, 70, 33, 70, 35, 240, 202, 221, 78, 177, 216,
-        248, 12, 48, 25, 7, 5, 212, 212, 248, 0, 49, 32, 70, 1, 33, 26, 105,
-        2, 224, 0, 33, 32, 70, 10, 70, 255, 247, 218, 253, 10, 224, 78, 177,
-        151, 248, 61, 32, 50, 177, 250, 108, 34, 177, 135, 248, 61, 48, 135,
-        248, 60, 48, 123, 98, 216, 248, 12, 48, 213, 248, 208, 36, 35, 240,
-        8, 3, 200, 248, 12, 48, 210, 177, 40, 70, 1, 33, 34, 70, 79, 240, 255,
-        51, 53, 240, 144, 221, 46, 177, 213, 248, 204, 52, 32, 70, 25, 104,
-        32, 240, 245, 220, 32, 70, 0, 240, 86, 248, 40, 70, 0, 33, 34, 70, 79,
-        240, 255, 51, 3, 176, 189, 232, 240, 79, 53, 240, 124, 157, 1, 153,
-        145, 249, 52, 32, 1, 42, 27, 208, 149, 248, 164, 148, 185, 241, 0, 15,
-        22, 209, 10, 122, 162, 177, 73, 70, 4, 241, 188, 0, 6, 34, 229, 243,
-        230, 242, 40, 70, 33, 70, 1, 240, 242, 250, 0, 40, 47, 208, 1, 33, 32,
-        70, 74, 70, 11, 70, 3, 176, 189, 232, 240, 79, 32, 240, 21, 157, 70,
-        177, 151, 248, 60, 48, 147, 177, 251, 106, 131, 177, 32, 70, 32, 240,
-        228, 220, 12, 224, 149, 248, 215, 33, 74, 177, 154, 7, 7, 213, 32, 70,
-        3, 176, 189, 232, 240, 79, 29, 240, 14, 157, 70, 108, 136, 0, 216, 248,
-        12, 48, 32, 70, 91, 7, 4, 213, 3, 176, 189, 232, 240, 79, 32, 240, 42,
-        158, 3, 33, 3, 176, 189, 232, 240, 79, 29, 240, 76, 158, 3, 176, 189,
-        232, 240, 143, 0, 191, 45, 233, 240, 79, 5, 104, 6, 70, 208, 248, 248,
-        160, 208, 248, 8, 129, 208, 248, 240, 176, 149, 176, 40, 70, 16, 240,
-        128, 222, 40, 70, 49, 70, 30, 240, 96, 221, 211, 225, 213, 248, 204,
-        36, 1, 51, 82, 248, 35, 64, 40, 70, 99, 142, 3, 244, 64, 66, 162, 245,
-        64, 76, 220, 241, 0, 2, 66, 235, 12, 2, 10, 50, 85, 248, 34, 112, 50,
-        70, 57, 70, 12, 240, 171, 222, 255, 40, 0, 240, 182, 129, 96, 142, 230,
-        243, 247, 244, 64, 244, 128, 80, 31, 250, 128, 249, 96, 142, 230, 243,
-        240, 244, 14, 40, 140, 191, 79, 244, 64, 65, 0, 33, 73, 234, 1, 1, 48,
-        70, 31, 240, 156, 222, 0, 40, 0, 240, 159, 129, 79, 240, 0, 9, 213,
-        248, 104, 50, 83, 248, 9, 16, 105, 177, 139, 121, 91, 185, 11, 122,
-        75, 177, 177, 66, 7, 208, 32, 70, 188, 49, 6, 34, 227, 247, 236, 253,
-        0, 40, 0, 240, 138, 129, 9, 241, 4, 9, 185, 241, 32, 15, 231, 209, 230,
-        225, 211, 248, 220, 48, 0, 43, 100, 208, 0, 35, 166, 248, 84, 48, 148,
-        248, 186, 0, 79, 240, 12, 9, 9, 251, 0, 128, 226, 136, 28, 48, 2, 240,
-        128, 2, 210, 241, 1, 2, 56, 191, 0, 34, 18, 169, 232, 247, 156, 249,
-        189, 248, 72, 48, 17, 169, 166, 248, 90, 48, 148, 248, 186, 0, 9, 251,
-        0, 128, 32, 48, 230, 243, 220, 246, 17, 155, 43, 187, 148, 248, 186,
-        48, 4, 34, 9, 251, 3, 137, 19, 168, 9, 241, 36, 1, 227, 247, 198, 253,
-        19, 168, 152, 73, 4, 34, 227, 247, 174, 253, 72, 185, 148, 248, 185,
-        48, 163, 241, 8, 2, 210, 178, 2, 42, 64, 242, 70, 129, 141, 248, 79,
-        48, 19, 168, 17, 169, 230, 243, 188, 246, 48, 185, 12, 35, 0, 144, 1,
-        147, 148, 248, 50, 48, 2, 147, 18, 225, 17, 171, 0, 147, 4, 35, 1, 147,
-        1, 35, 2, 147, 243, 104, 0, 34, 3, 147, 135, 73, 19, 70, 40, 70, 237,
-        247, 200, 248, 7, 35, 0, 147, 0, 35, 1, 147, 148, 248, 186, 32, 40,
-        70, 2, 146, 3, 147, 4, 147, 49, 70, 24, 34, 35, 70, 6, 240, 115, 219,
-        180, 248, 98, 48, 216, 6, 10, 213, 50, 109, 64, 242, 55, 19, 19, 64,
-        43, 185, 150, 248, 124, 48, 19, 185, 0, 147, 1, 34, 73, 224, 32, 70,
-        231, 247, 173, 255, 129, 70, 24, 177, 0, 35, 0, 147, 2, 34, 64, 224,
-        213, 248, 104, 6, 49, 70, 34, 70, 58, 240, 241, 221, 1, 40, 3, 209,
-        205, 248, 0, 144, 3, 35, 90, 224, 4, 40, 3, 209, 205, 248, 0, 144, 1,
-        144, 85, 224, 43, 104, 147, 248, 173, 48, 195, 177, 213, 248, 116, 1,
-        18, 240, 51, 223, 2, 40, 18, 209, 148, 249, 52, 48, 123, 177, 180, 248,
-        98, 144, 25, 244, 128, 121, 10, 209, 121, 104, 213, 248, 92, 1, 48,
-        240, 68, 220, 129, 7, 3, 213, 205, 248, 0, 144, 6, 35, 55, 224, 43,
-        104, 147, 248, 173, 48, 147, 177, 148, 249, 52, 48, 123, 177, 213, 248,
-        124, 1, 161, 110, 180, 248, 108, 32, 50, 240, 34, 221, 56, 177, 0, 35,
-        0, 147, 6, 34, 1, 146, 148, 248, 50, 32, 2, 146, 180, 224, 43, 104,
-        147, 248, 173, 48, 115, 177, 148, 249, 52, 144, 185, 241, 0, 15, 9,
-        209, 213, 248, 92, 1, 97, 142, 49, 240, 29, 218, 24, 177, 205, 248,
-        0, 144, 7, 35, 13, 224, 148, 249, 52, 144, 185, 241, 0, 15, 17, 209,
-        213, 248, 92, 1, 97, 142, 49, 240, 122, 218, 88, 177, 205, 248, 0, 144,
-        5, 35, 1, 147, 148, 248, 50, 48, 205, 248, 12, 144, 2, 147, 205, 248,
-        16, 144, 140, 224, 182, 248, 90, 48, 99, 177, 50, 109, 64, 242, 55,
-        19, 19, 64, 59, 177, 40, 70, 49, 70, 34, 70, 255, 247, 244, 250, 0,
-        40, 64, 240, 131, 128, 59, 104, 2, 43, 9, 209, 122, 125, 58, 185, 255,
-        35, 0, 147, 1, 146, 4, 241, 56, 0, 7, 169, 1, 35, 11, 224, 49, 70, 40,
-        70, 11, 240, 186, 220, 255, 35, 0, 34, 0, 147, 1, 144, 7, 169, 4, 241,
-        56, 0, 19, 70, 22, 240, 128, 248, 43, 106, 80, 55, 147, 248, 236, 16,
-        17, 240, 2, 1, 17, 208, 97, 142, 1, 244, 96, 81, 177, 245, 32, 95, 8,
-        208, 177, 245, 192, 95, 7, 208, 177, 245, 128, 95, 20, 191, 10, 33,
-        20, 33, 2, 224, 160, 33, 0, 224, 40, 33, 56, 70, 22, 240, 216, 248,
-        213, 248, 116, 52, 7, 168, 57, 70, 0, 34, 155, 120, 21, 240, 4, 255,
-        16, 185, 0, 144, 9, 35, 24, 224, 157, 248, 48, 32, 149, 248, 12, 53,
-        154, 66, 57, 209, 148, 249, 52, 48, 195, 185, 98, 142, 40, 70, 2, 244,
-        64, 66, 4, 241, 56, 1, 178, 245, 64, 79, 20, 191, 2, 34, 1, 34, 31,
-        240, 200, 220, 80, 185, 0, 144, 10, 35, 1, 147, 2, 144, 3, 144, 4, 144,
-        27, 224, 138, 179, 3, 0, 32, 77, 136, 0, 43, 104, 147, 248, 48, 48,
-        27, 179, 40, 70, 49, 70, 34, 70, 25, 240, 3, 249, 232, 177, 144, 248,
-        36, 48, 154, 7, 25, 213, 67, 104, 19, 244, 128, 83, 21, 209, 13, 34,
-        0, 147, 1, 146, 2, 147, 3, 147, 4, 147, 40, 70, 49, 70, 23, 34, 35,
-        70, 6, 240, 88, 218, 213, 248, 208, 52, 1, 59, 197, 248, 208, 52, 213,
-        248, 208, 52, 0, 43, 127, 244, 39, 174, 213, 248, 208, 52, 243, 177,
-        0, 34, 138, 248, 30, 32, 213, 248, 208, 52, 213, 248, 204, 20, 88, 30,
-        1, 51, 81, 248, 35, 48, 218, 248, 4, 16, 197, 248, 208, 4, 1, 41, 9,
-        208, 0, 146, 1, 146, 2, 146, 3, 146, 4, 146, 40, 70, 49, 70, 32, 34,
-        6, 240, 48, 218, 48, 70, 34, 240, 3, 220, 60, 224, 51, 122, 147, 177,
-        150, 248, 118, 35, 34, 177, 48, 70, 1, 33, 29, 240, 49, 220, 34, 224,
-        155, 249, 52, 48, 1, 33, 211, 241, 1, 3, 48, 70, 56, 191, 0, 35, 0,
-        240, 252, 250, 23, 224, 149, 248, 215, 49, 59, 177, 218, 248, 12, 48,
-        155, 7, 3, 208, 48, 70, 29, 240, 203, 218, 28, 224, 155, 249, 52, 48,
-        0, 34, 194, 235, 3, 14, 1, 33, 222, 241, 0, 3, 48, 70, 67, 235, 14,
-        3, 32, 240, 175, 218, 149, 248, 116, 50, 48, 70, 35, 240, 4, 3, 133,
-        248, 116, 50, 32, 240, 80, 218, 5, 224, 214, 248, 8, 49, 0, 43, 127,
-        244, 20, 174, 123, 230, 21, 176, 189, 232, 240, 143, 45, 233, 240, 79,
-        137, 176, 6, 147, 18, 155, 6, 41, 4, 70, 15, 70, 146, 70, 7, 147, 6,
-        104, 208, 248, 248, 128, 208, 248, 240, 144, 0, 240, 194, 128, 216,
-        248, 8, 48, 24, 43, 0, 242, 189, 128, 124, 73, 153, 64, 64, 241, 185,
-        128, 74, 177, 48, 70, 33, 70, 25, 240, 99, 248, 5, 70, 32, 177, 12,
-        33, 75, 240, 108, 223, 0, 224, 21, 70, 2, 47, 0, 240, 224, 128, 48,
-        70, 33, 70, 30, 240, 247, 218, 0, 47, 56, 209, 40, 70, 9, 33, 136, 248,
-        73, 112, 76, 240, 183, 217, 107, 104, 185, 248, 98, 32, 35, 240, 4,
-        3, 144, 6, 107, 96, 68, 191, 67, 240, 4, 3, 107, 96, 107, 104, 32, 70,
-        67, 244, 128, 83, 107, 96, 11, 33, 0, 240, 40, 250, 35, 122, 33, 70,
-        0, 147, 42, 70, 48, 70, 75, 70, 31, 240, 34, 216, 33, 70, 5, 70, 48,
-        70, 30, 240, 207, 218, 69, 177, 214, 248, 120, 4, 92, 73, 180, 248,
-        26, 33, 43, 70, 68, 240, 180, 219, 115, 224, 176, 104, 216, 248, 0,
-        16, 79, 244, 155, 114, 43, 70, 250, 243, 53, 244, 111, 224, 5, 47, 79,
-        240, 0, 11, 2, 209, 136, 248, 73, 176, 103, 224, 1, 47, 99, 209, 163,
-        110, 40, 70, 89, 28, 28, 191, 4, 235, 131, 3, 211, 248, 108, 176, 1,
-        33, 75, 240, 20, 223, 0, 35, 136, 248, 73, 48, 180, 249, 86, 48, 0,
-        43, 83, 208, 212, 248, 236, 48, 0, 43, 79, 209, 6, 155, 13, 43, 76,
-        209, 185, 248, 98, 48, 218, 6, 72, 213, 35, 109, 219, 7, 69, 213, 187,
-        241, 0, 15, 66, 208, 155, 248, 8, 48, 1, 43, 1, 208, 3, 43, 60, 209,
-        214, 248, 208, 36, 214, 248, 204, 52, 2, 50, 79, 240, 1, 9, 83, 248,
-        34, 112, 32, 70, 8, 33, 196, 248, 236, 144, 0, 240, 199, 249, 212, 248,
-        236, 48, 32, 70, 141, 232, 8, 2, 0, 35, 2, 147, 3, 147, 4, 147, 183,
-        248, 98, 48, 5, 241, 20, 1, 195, 243, 64, 19, 5, 147, 58, 70, 43, 70,
-        244, 247, 79, 253, 3, 70, 72, 177, 214, 248, 120, 4, 41, 73, 180, 248,
-        26, 33, 9, 176, 189, 232, 240, 79, 68, 240, 73, 155, 176, 104, 216,
-        248, 0, 16, 79, 244, 155, 114, 9, 176, 189, 232, 240, 79, 250, 243,
-        201, 179, 0, 37, 2, 224, 93, 70, 0, 224, 1, 37, 212, 248, 252, 48, 147,
-        248, 60, 48, 43, 177, 39, 185, 32, 70, 81, 70, 3, 240, 161, 255, 104,
-        185, 6, 155, 48, 70, 1, 147, 7, 155, 33, 70, 2, 147, 0, 35, 3, 147,
-        4, 147, 3, 34, 83, 70, 0, 151, 6, 240, 251, 216, 0, 45, 25, 208, 5,
-        47, 1, 208, 2, 47, 11, 209, 152, 248, 30, 32, 152, 248, 28, 48, 154,
-        66, 5, 210, 32, 70, 9, 176, 189, 232, 240, 79, 31, 240, 71, 155, 32,
-        70, 9, 176, 189, 232, 240, 79, 255, 247, 169, 188, 0, 35, 136, 248,
-        73, 48, 201, 231, 9, 176, 189, 232, 240, 143, 128, 0, 160, 0, 41, 250,
-        131, 0, 229, 0, 132, 0, 45, 233, 240, 79, 155, 70, 5, 104, 208, 248,
-        240, 48, 137, 176, 4, 147, 43, 104, 4, 70, 147, 248, 63, 48, 5, 145,
-        144, 70, 208, 248, 248, 96, 208, 248, 244, 112, 0, 43, 0, 240, 61, 129,
-        3, 122, 0, 43, 0, 240, 57, 129, 3, 124, 6, 168, 19, 177, 4, 241, 216,
-        1, 0, 224, 57, 70, 6, 34, 227, 247, 205, 250, 40, 105, 53, 240, 204,
-        217, 160, 177, 32, 70, 0, 33, 254, 247, 252, 255, 32, 70, 1, 33, 33,
-        240, 247, 219, 35, 124, 32, 70, 211, 241, 1, 3, 56, 191, 0, 35, 0, 147,
-        0, 33, 6, 170, 8, 35, 33, 240, 43, 221, 19, 225, 35, 124, 0, 43, 0,
-        240, 149, 128, 179, 104, 35, 177, 16, 43, 2, 208, 32, 70, 32, 240, 201,
-        219, 6, 174, 50, 70, 33, 70, 40, 70, 24, 240, 31, 255, 79, 240, 0, 10,
-        81, 70, 129, 70, 132, 248, 148, 160, 32, 70, 17, 240, 166, 220, 81,
-        70, 32, 70, 13, 240, 110, 221, 32, 70, 81, 70, 5, 240, 228, 218, 5,
-        155, 0, 43, 100, 208, 4, 241, 188, 0, 231, 247, 201, 252, 0, 40, 94,
-        209, 213, 248, 92, 1, 121, 142, 48, 240, 128, 223, 48, 185, 213, 248,
-        92, 1, 121, 142, 48, 240, 230, 223, 0, 40, 41, 208, 184, 241, 0, 15,
-        78, 209, 213, 248, 92, 1, 121, 142, 48, 240, 66, 223, 0, 40, 71, 209,
-        43, 106, 126, 142, 24, 105, 9, 240, 19, 253, 134, 66, 64, 209, 4, 241,
-        194, 2, 1, 146, 8, 34, 6, 171, 2, 146, 40, 70, 33, 70, 74, 70, 0, 147,
-        15, 240, 205, 216, 3, 70, 0, 40, 49, 208, 213, 248, 120, 4, 96, 73,
-        66, 70, 68, 240, 98, 218, 6, 28, 24, 191, 1, 38, 40, 224, 43, 106, 183,
-        248, 50, 160, 24, 105, 9, 240, 242, 252, 130, 69, 31, 209, 4, 241, 194,
-        3, 1, 147, 8, 35, 2, 147, 40, 70, 51, 70, 33, 70, 74, 70, 0, 150, 15,
-        240, 172, 216, 6, 70, 136, 177, 184, 241, 0, 15, 14, 208, 213, 248,
-        120, 4, 65, 70, 90, 70, 51, 70, 68, 240, 62, 218, 48, 185, 148, 248,
-        68, 48, 128, 70, 134, 248, 33, 48, 1, 38, 0, 224, 1, 38, 185, 241, 0,
-        15, 15, 208, 72, 70, 14, 33, 75, 240, 172, 221, 73, 70, 40, 70, 14,
-        240, 228, 219, 79, 240, 0, 9, 4, 224, 32, 70, 11, 240, 42, 221, 1, 38,
-        177, 70, 33, 70, 1, 34, 40, 70, 3, 240, 204, 251, 32, 70, 0, 33, 254,
-        247, 68, 255, 43, 104, 147, 248, 63, 48, 43, 185, 149, 249, 99, 36,
-        1, 50, 8, 191, 133, 248, 98, 52, 213, 248, 108, 4, 33, 70, 70, 240,
-        174, 216, 43, 104, 147, 248, 79, 48, 155, 7, 4, 208, 213, 248, 112,
-        4, 33, 70, 70, 240, 204, 221, 4, 241, 188, 10, 80, 70, 231, 247, 45,
-        252, 1, 70, 48, 185, 32, 70, 6, 170, 8, 35, 205, 248, 0, 144, 33, 240,
-        92, 220, 149, 248, 114, 50, 32, 70, 59, 185, 213, 248, 108, 50, 156,
-        66, 3, 209, 49, 70, 33, 240, 17, 219, 4, 224, 6, 240, 242, 218, 32,
-        70, 5, 240, 171, 222, 184, 110, 40, 177, 233, 247, 146, 252, 0, 35,
-        187, 102, 167, 248, 108, 48, 2, 35, 0, 38, 0, 147, 40, 70, 0, 33, 6,
-        170, 35, 70, 239, 247, 2, 249, 33, 70, 50, 70, 51, 70, 40, 70, 0, 150,
-        58, 240, 193, 216, 32, 70, 58, 240, 40, 216, 40, 70, 33, 70, 50, 70,
-        51, 70, 39, 240, 20, 222, 40, 70, 13, 240, 147, 221, 184, 241, 0, 15,
-        3, 208, 40, 70, 49, 70, 90, 70, 192, 71, 0, 33, 6, 34, 4, 152, 228,
-        243, 253, 245, 80, 70, 0, 33, 6, 34, 228, 243, 248, 245, 0, 32, 1, 224,
-        79, 240, 255, 48, 9, 176, 189, 232, 240, 143, 0, 191, 105, 216, 131,
-        0, 45, 233, 240, 71, 208, 248, 248, 96, 5, 70, 214, 248, 8, 128, 15,
-        70, 65, 69, 4, 104, 82, 208, 3, 41, 10, 209, 212, 248, 28, 151, 232,
-        243, 229, 247, 212, 248, 28, 55, 0, 34, 201, 248, 12, 0, 90, 96, 26,
-        114, 183, 96, 184, 241, 0, 15, 4, 209, 40, 124, 57, 70, 29, 240, 50,
-        216, 40, 185, 40, 124, 65, 70, 29, 240, 45, 216, 40, 177, 39, 185, 32,
-        70, 189, 232, 240, 71, 16, 240, 164, 153, 184, 241, 0, 15, 4, 208, 40,
-        124, 65, 70, 29, 240, 31, 216, 104, 177, 35, 106, 1, 33, 24, 105, 10,
-        70, 9, 240, 128, 251, 114, 104, 32, 70, 41, 70, 1, 35, 189, 232, 240,
-        71, 29, 240, 228, 153, 39, 177, 40, 124, 57, 70, 29, 240, 11, 216, 168,
-        177, 41, 70, 32, 70, 29, 240, 70, 218, 5, 70, 120, 185, 32, 70, 212,
-        248, 204, 20, 5, 240, 249, 222, 35, 106, 1, 33, 24, 105, 42, 70, 9,
-        240, 97, 251, 32, 70, 189, 232, 240, 71, 29, 240, 34, 154, 189, 232,
-        240, 135, 45, 233, 240, 79, 5, 70, 137, 176, 23, 70, 154, 70, 4, 104,
-        208, 248, 248, 144, 208, 248, 252, 128, 14, 70, 97, 177, 1, 41, 10,
-        209, 208, 248, 244, 48, 41, 70, 90, 142, 32, 70, 23, 35, 31, 240, 197,
-        217, 0, 40, 64, 240, 136, 128, 32, 70, 212, 248, 204, 20, 5, 240, 205,
-        222, 35, 104, 147, 248, 49, 48, 67, 177, 217, 248, 4, 48, 163, 241,
-        3, 2, 210, 241, 0, 11, 75, 235, 2, 11, 0, 224, 155, 70, 0, 33, 201,
-        248, 4, 16, 40, 70, 255, 247, 109, 255, 1, 46, 26, 209, 213, 248, 244,
-        144, 185, 248, 50, 48, 7, 147, 35, 106, 24, 105, 9, 240, 158, 251, 7,
-        155, 152, 66, 9, 208, 32, 70, 16, 240, 132, 222, 32, 70, 7, 153, 15,
-        240, 82, 219, 32, 70, 10, 240, 51, 222, 32, 70, 9, 241, 56, 1, 13, 240,
-        68, 221, 35, 104, 147, 248, 47, 32, 50, 177, 147, 248, 48, 48, 27, 177,
-        212, 248, 8, 5, 26, 240, 243, 223, 32, 70, 0, 33, 42, 70, 79, 240, 255,
-        51, 52, 240, 176, 223, 182, 185, 40, 70, 57, 70, 3, 240, 76, 253, 136,
-        185, 32, 70, 41, 70, 125, 34, 59, 70, 0, 150, 1, 150, 205, 248, 8, 160,
-        3, 150, 4, 150, 5, 240, 168, 222, 5, 245, 104, 112, 57, 70, 6, 34, 227,
-        247, 188, 248, 0, 150, 216, 248, 52, 48, 79, 240, 0, 9, 1, 147, 32,
-        70, 59, 70, 41, 70, 19, 34, 205, 248, 8, 160, 205, 248, 12, 144, 205,
-        248, 16, 144, 5, 240, 144, 222, 35, 104, 147, 248, 49, 48, 139, 177,
-        187, 241, 0, 15, 14, 208, 110, 177, 3, 35, 0, 147, 32, 70, 43, 70, 73,
-        70, 5, 241, 216, 2, 238, 247, 215, 255, 1, 35, 136, 248, 137, 48, 136,
-        248, 6, 48, 9, 176, 189, 232, 240, 143, 45, 233, 243, 65, 5, 104, 208,
-        248, 248, 48, 149, 248, 116, 34, 208, 248, 252, 128, 34, 240, 4, 2,
-        208, 248, 240, 96, 133, 248, 116, 34, 91, 104, 0, 39, 1, 43, 4, 70,
-        200, 248, 84, 112, 8, 209, 216, 248, 204, 0, 200, 248, 52, 112, 24,
-        177, 233, 247, 53, 251, 200, 248, 204, 112, 182, 249, 42, 48, 0, 39,
-        200, 248, 72, 48, 40, 70, 136, 248, 189, 112, 136, 248, 182, 112, 16,
-        240, 248, 221, 59, 70, 49, 70, 34, 70, 40, 70, 4, 240, 140, 221, 40,
-        70, 10, 240, 165, 221, 32, 70, 1, 33, 254, 247, 144, 253, 43, 104, 91,
-        107, 91, 177, 212, 248, 204, 48, 3, 244, 129, 115, 179, 245, 128, 127,
-        4, 209, 40, 70, 33, 70, 1, 34, 10, 240, 96, 221, 43, 104, 147, 248,
-        79, 32, 145, 7, 5, 208, 147, 249, 82, 48, 19, 177, 32, 70, 11, 240,
-        229, 218, 0, 35, 4, 241, 188, 2, 0, 147, 40, 70, 35, 70, 1, 33, 238,
-        247, 116, 255, 32, 70, 13, 33, 255, 247, 156, 254, 212, 248, 248, 48,
-        40, 70, 90, 104, 33, 70, 155, 104, 39, 240, 138, 220, 150, 249, 52,
-        48, 27, 177, 32, 70, 14, 33, 255, 247, 141, 254, 32, 70, 31, 240, 96,
-        222, 50, 122, 32, 70, 6, 241, 9, 1, 40, 240, 44, 218, 213, 248, 204,
-        52, 32, 70, 25, 104, 31, 240, 92, 222, 40, 70, 33, 70, 1, 34, 2, 176,
-        189, 232, 240, 65, 255, 247, 21, 184, 247, 181, 5, 104, 4, 70, 14, 70,
-        8, 70, 12, 33, 75, 240, 142, 219, 40, 70, 33, 70, 29, 240, 30, 223,
-        35, 124, 235, 177, 35, 122, 219, 177, 212, 248, 244, 48, 40, 70, 91,
-        142, 33, 70, 3, 244, 64, 67, 163, 245, 64, 71, 123, 66, 67, 235, 7,
-        3, 4, 241, 216, 2, 24, 240, 108, 252, 7, 70, 72, 177, 176, 66, 20, 191,
-        19, 33, 18, 33, 75, 240, 110, 219, 40, 70, 57, 70, 14, 240, 166, 217,
-        0, 33, 32, 70, 15, 240, 56, 221, 0, 33, 32, 70, 17, 240, 228, 217, 2,
-        33, 48, 70, 75, 240, 186, 221, 180, 248, 90, 48, 32, 70, 166, 248, 68,
-        48, 255, 247, 60, 255, 115, 104, 79, 240, 3, 1, 19, 244, 128, 63, 7,
-        209, 179, 108, 2, 43, 4, 209, 1, 34, 0, 145, 40, 70, 19, 70, 4, 224,
-        0, 145, 40, 70, 3, 33, 1, 34, 0, 35, 12, 240, 154, 216, 115, 104, 218,
-        3, 17, 212, 43, 104, 211, 248, 216, 48, 155, 105, 155, 0, 3, 213, 213,
-        248, 180, 49, 152, 0, 7, 212, 2, 33, 40, 70, 79, 244, 128, 114, 0, 35,
-        0, 145, 12, 240, 133, 216, 254, 189, 45, 233, 240, 79, 203, 136, 139,
-        176, 155, 6, 5, 70, 14, 70, 4, 104, 208, 248, 248, 128, 208, 248, 252,
-        176, 208, 248, 240, 160, 65, 213, 3, 109, 152, 7, 18, 213, 90, 7, 11,
-        213, 1, 241, 111, 0, 4, 33, 86, 240, 121, 223, 200, 185, 6, 241, 131,
-        0, 4, 33, 86, 240, 115, 223, 152, 185, 148, 248, 49, 53, 19, 240, 2,
-        15, 13, 224, 219, 7, 12, 213, 145, 248, 111, 48, 216, 7, 8, 212, 145,
-        248, 131, 48, 217, 7, 4, 212, 148, 248, 49, 53, 19, 240, 1, 15, 2, 209,
-        149, 248, 37, 51, 203, 177, 243, 136, 112, 142, 35, 244, 102, 99, 243,
-        128, 229, 243, 54, 246, 64, 244, 128, 80, 135, 178, 112, 142, 229, 243,
-        48, 246, 182, 248, 190, 48, 14, 40, 140, 191, 79, 244, 64, 64, 0, 32,
-        7, 67, 35, 240, 10, 3, 119, 134, 166, 248, 190, 48, 32, 70, 41, 70,
-        114, 142, 22, 35, 30, 240, 241, 223, 0, 40, 64, 240, 201, 129, 115,
-        142, 32, 70, 19, 244, 64, 79, 12, 191, 0, 34, 1, 34, 10, 50, 84, 248,
-        34, 112, 42, 70, 57, 70, 11, 240, 186, 223, 255, 40, 129, 70, 0, 240,
-        183, 129, 148, 248, 116, 50, 67, 240, 4, 3, 132, 248, 116, 50, 35, 106,
-        24, 105, 9, 240, 210, 249, 72, 69, 39, 208, 35, 106, 24, 105, 9, 240,
-        204, 249, 229, 243, 246, 245, 3, 70, 72, 70, 6, 147, 229, 243, 241,
-        245, 6, 155, 131, 66, 9, 209, 35, 106, 24, 105, 9, 240, 190, 249, 9,
-        244, 96, 83, 0, 244, 96, 80, 152, 66, 15, 220, 73, 70, 212, 248, 92,
-        1, 47, 240, 203, 222, 32, 70, 16, 240, 156, 220, 32, 70, 73, 70, 15,
-        240, 106, 217, 32, 70, 10, 240, 75, 220, 15, 224, 212, 248, 92, 1, 73,
-        70, 48, 240, 203, 219, 72, 177, 212, 248, 92, 1, 73, 70, 47, 240, 181,
-        222, 0, 33, 32, 70, 10, 70, 12, 240, 122, 216, 7, 241, 80, 3, 80, 70,
-        49, 70, 79, 244, 146, 114, 9, 147, 226, 247, 233, 254, 59, 104, 170,
-        248, 50, 144, 2, 43, 7, 209, 151, 248, 21, 144, 217, 241, 1, 9, 56,
-        191, 79, 240, 0, 9, 1, 224, 79, 240, 0, 9, 243, 136, 19, 240, 32, 3,
-        13, 208, 35, 104, 147, 248, 79, 48, 19, 240, 3, 3, 7, 208, 213, 248,
-        204, 48, 3, 244, 128, 83, 211, 241, 1, 3, 56, 191, 0, 35, 219, 178,
-        8, 147, 10, 241, 56, 3, 7, 147, 8, 155, 7, 152, 185, 241, 0, 15, 24,
-        191, 0, 35, 255, 34, 141, 232, 12, 0, 1, 70, 0, 34, 75, 70, 21, 240,
-        91, 250, 212, 248, 116, 52, 7, 152, 9, 153, 1, 34, 155, 120, 21, 240,
-        251, 248, 0, 40, 44, 209, 58, 137, 63, 104, 185, 241, 0, 15, 5, 209,
-        32, 70, 73, 70, 6, 146, 10, 240, 119, 222, 6, 154, 186, 248, 50, 48,
-        3, 244, 96, 83, 179, 245, 32, 95, 8, 208, 179, 245, 192, 95, 7, 208,
-        179, 245, 128, 95, 20, 191, 10, 35, 20, 35, 2, 224, 160, 35, 0, 224,
-        40, 35, 255, 33, 1, 145, 2, 144, 205, 248, 0, 144, 3, 147, 212, 248,
-        116, 52, 7, 152, 27, 121, 9, 153, 4, 147, 59, 70, 21, 240, 162, 250,
-        32, 70, 7, 153, 13, 240, 216, 218, 150, 249, 52, 32, 32, 70, 0, 50,
-        41, 70, 24, 191, 1, 34, 3, 240, 44, 248, 150, 249, 52, 48, 163, 185,
-        40, 70, 49, 70, 30, 240, 192, 217, 40, 70, 14, 33, 255, 247, 208, 252,
-        41, 70, 32, 70, 40, 240, 218, 221, 32, 70, 41, 70, 216, 248, 4, 32,
-        216, 248, 8, 48, 39, 240, 186, 218, 212, 224, 32, 70, 41, 70, 50, 70,
-        24, 240, 137, 251, 7, 70, 56, 185, 32, 70, 41, 70, 66, 70, 11, 176,
-        189, 232, 240, 79, 30, 240, 36, 159, 8, 155, 67, 179, 218, 248, 104,
-        48, 186, 248, 108, 144, 12, 51, 169, 241, 12, 9, 25, 70, 74, 70, 32,
-        70, 6, 147, 54, 240, 183, 220, 6, 155, 74, 70, 25, 70, 130, 70, 32,
-        70, 54, 240, 134, 220, 34, 104, 132, 70, 146, 249, 82, 0, 6, 155, 64,
-        177, 32, 70, 25, 70, 74, 70, 205, 248, 24, 192, 53, 240, 215, 220, 221,
-        248, 24, 192, 0, 144, 57, 70, 32, 70, 82, 70, 99, 70, 10, 224, 67, 104,
-        218, 3, 9, 213, 243, 136, 155, 6, 6, 212, 8, 155, 32, 70, 0, 147, 57,
-        70, 26, 70, 238, 247, 208, 254, 123, 104, 0, 34, 67, 244, 128, 83, 123,
-        96, 127, 35, 0, 147, 8, 155, 7, 152, 1, 147, 7, 241, 76, 1, 19, 70,
-        21, 240, 169, 249, 32, 70, 57, 70, 24, 240, 85, 252, 32, 70, 41, 70,
-        29, 240, 25, 221, 151, 248, 36, 144, 25, 240, 12, 9, 106, 209, 181,
-        249, 84, 48, 12, 33, 197, 248, 236, 48, 56, 70, 7, 147, 75, 240, 211,
-        219, 216, 248, 4, 48, 2, 43, 33, 209, 219, 248, 52, 48, 9, 59, 1, 43,
-        28, 216, 218, 70, 163, 70, 84, 70, 20, 224, 10, 32, 0, 251, 9, 64, 213,
-        248, 244, 16, 98, 48, 6, 34, 226, 247, 196, 253, 48, 185, 79, 244, 150,
-        115, 170, 248, 104, 48, 1, 35, 132, 248, 80, 48, 9, 241, 1, 9, 10, 241,
-        10, 10, 227, 108, 153, 69, 231, 211, 92, 70, 40, 70, 8, 33, 255, 247,
-        45, 252, 7, 155, 79, 240, 0, 9, 79, 240, 1, 10, 0, 147, 205, 248, 4,
-        160, 205, 248, 8, 144, 205, 248, 12, 144, 205, 248, 16, 144, 182, 248,
-        98, 48, 50, 70, 195, 243, 64, 19, 5, 147, 7, 241, 20, 1, 59, 70, 40,
-        70, 243, 247, 175, 255, 81, 70, 6, 70, 32, 70, 3, 240, 57, 253, 160,
-        104, 216, 248, 0, 16, 79, 244, 150, 114, 75, 70, 249, 243, 50, 246,
-        70, 177, 212, 248, 120, 4, 14, 73, 181, 248, 26, 33, 51, 70, 67, 240,
-        159, 221, 13, 224, 160, 104, 216, 248, 0, 16, 79, 244, 155, 114, 51,
-        70, 4, 224, 0, 34, 160, 104, 216, 248, 0, 16, 19, 70, 249, 243, 26,
-        246, 152, 248, 30, 48, 1, 51, 136, 248, 30, 48, 11, 176, 189, 232, 240,
-        143, 229, 0, 132, 0, 45, 233, 240, 79, 137, 176, 6, 147, 19, 155, 6,
-        41, 5, 70, 14, 70, 146, 70, 157, 248, 72, 176, 7, 147, 4, 104, 208,
-        248, 248, 112, 0, 240, 131, 128, 0, 41, 98, 209, 187, 241, 0, 15, 13,
-        209, 32, 70, 41, 70, 40, 240, 216, 220, 186, 241, 0, 15, 9, 208, 5,
-        245, 104, 112, 81, 70, 6, 34, 226, 247, 87, 253, 2, 224, 1, 35, 128,
-        248, 234, 51, 148, 248, 114, 50, 0, 43, 102, 208, 79, 240, 0, 8, 212,
-        248, 104, 50, 83, 248, 8, 144, 185, 241, 0, 15, 18, 208, 153, 248, 6,
-        48, 123, 177, 153, 248, 4, 48, 99, 177, 35, 106, 24, 105, 8, 240, 226,
-        255, 217, 248, 244, 48, 91, 142, 131, 66, 3, 208, 32, 70, 73, 70, 25,
-        240, 51, 221, 8, 241, 4, 8, 184, 241, 32, 15, 224, 209, 184, 70, 79,
-        240, 0, 9, 47, 70, 212, 248, 104, 50, 83, 248, 9, 80, 165, 177, 171,
-        121, 147, 177, 43, 121, 131, 177, 235, 104, 0, 34, 217, 104, 32, 70,
-        79, 244, 128, 115, 240, 247, 87, 253, 35, 106, 24, 105, 8, 240, 187,
-        255, 41, 70, 2, 70, 32, 70, 75, 240, 64, 220, 9, 241, 4, 9, 185, 241,
-        32, 15, 224, 209, 212, 248, 8, 5, 61, 70, 71, 70, 26, 240, 29, 220,
-        29, 224, 187, 104, 11, 59, 1, 43, 25, 216, 58, 177, 32, 70, 41, 70,
-        24, 240, 119, 249, 16, 177, 12, 33, 75, 240, 129, 216, 2, 46, 9, 208,
-        32, 70, 41, 70, 29, 240, 15, 220, 5, 46, 8, 216, 79, 240, 200, 67, 179,
-        64, 4, 213, 79, 240, 1, 8, 3, 224, 152, 70, 1, 224, 79, 240, 0, 8, 6,
-        155, 0, 150, 1, 147, 7, 155, 32, 70, 2, 147, 59, 108, 41, 70, 3, 147,
-        123, 108, 187, 241, 0, 15, 12, 191, 7, 34, 9, 34, 4, 147, 83, 70, 5,
-        240, 183, 218, 184, 241, 0, 15, 19, 208, 5, 46, 1, 208, 2, 46, 9, 209,
-        186, 127, 59, 127, 154, 66, 5, 210, 40, 70, 9, 176, 189, 232, 240, 79,
-        30, 240, 4, 157, 40, 70, 9, 176, 189, 232, 240, 79, 254, 247, 102, 190,
-        9, 176, 189, 232, 240, 143, 0, 0, 45, 233, 240, 79, 154, 70, 19, 136,
-        208, 248, 248, 80, 161, 176, 3, 240, 252, 3, 8, 147, 171, 104, 148,
-        70, 11, 59, 186, 248, 2, 32, 1, 43, 4, 70, 139, 70, 42, 159, 6, 104,
-        208, 248, 240, 128, 173, 248, 40, 32, 31, 250, 130, 249, 11, 216, 12,
-        241, 16, 0, 65, 70, 6, 34, 205, 248, 24, 192, 226, 247, 128, 252, 221,
-        248, 24, 192, 3, 70, 96, 177, 8, 154, 32, 70, 178, 241, 16, 3, 24, 191,
-        1, 35, 0, 147, 0, 35, 1, 147, 6, 33, 12, 241, 10, 2, 59, 224, 40, 108,
-        32, 177, 7, 147, 232, 247, 62, 255, 7, 155, 107, 100, 56, 70, 232, 247,
-        54, 255, 40, 100, 32, 177, 111, 100, 81, 70, 58, 70, 226, 247, 113,
-        252, 185, 241, 11, 15, 16, 209, 107, 104, 1, 43, 19, 208, 171, 104,
-        12, 43, 16, 208, 0, 35, 0, 147, 33, 70, 48, 70, 90, 70, 67, 70, 30,
-        240, 204, 216, 32, 70, 12, 33, 118, 224, 185, 241, 0, 15, 22, 208, 185,
-        241, 30, 15, 19, 208, 107, 104, 32, 70, 19, 241, 255, 51, 24, 191, 1,
-        35, 0, 147, 152, 249, 52, 48, 66, 70, 211, 241, 1, 3, 56, 191, 0, 35,
-        1, 147, 1, 33, 75, 70, 255, 247, 202, 254, 162, 224, 51, 104, 167, 241,
-        6, 12, 155, 106, 0, 39, 203, 248, 44, 48, 10, 241, 6, 3, 9, 147, 3,
-        147, 48, 70, 59, 70, 33, 70, 88, 34, 205, 248, 16, 192, 205, 248, 24,
-        192, 0, 151, 1, 151, 2, 151, 5, 240, 17, 218, 57, 70, 12, 34, 29, 168,
-        228, 243, 126, 240, 68, 75, 57, 70, 29, 147, 68, 75, 36, 34, 30, 147,
-        12, 171, 24, 70, 7, 147, 31, 150, 228, 243, 114, 240, 189, 248, 40,
-        32, 13, 241, 84, 9, 57, 70, 173, 248, 52, 32, 72, 70, 32, 34, 205, 248,
-        48, 176, 228, 243, 101, 240, 7, 155, 221, 248, 24, 192, 28, 147, 9,
-        155, 205, 248, 0, 144, 1, 147, 205, 248, 8, 192, 214, 248, 124, 6, 33,
-        70, 8, 154, 29, 171, 52, 240, 204, 220, 7, 70, 0, 40, 88, 209, 189,
-        248, 52, 48, 30, 43, 17, 209, 17, 155, 48, 70, 235, 100, 33, 70, 29,
-        240, 13, 219, 234, 108, 176, 104, 41, 104, 30, 50, 59, 70, 249, 243,
-        126, 244, 32, 70, 25, 33, 255, 247, 78, 250, 66, 224, 186, 248, 4, 32,
-        32, 70, 164, 248, 214, 32, 166, 248, 60, 35, 106, 104, 57, 70, 18, 241,
-        255, 50, 24, 191, 1, 34, 0, 146, 152, 249, 52, 32, 210, 241, 1, 2, 56,
-        191, 0, 34, 1, 146, 66, 70, 255, 247, 81, 254, 32, 70, 89, 70, 255,
-        247, 187, 251, 214, 248, 108, 50, 156, 66, 34, 208, 180, 248, 90, 48,
-        251, 185, 35, 109, 217, 7, 28, 213, 163, 110, 90, 28, 25, 208, 4, 235,
-        131, 3, 218, 110, 170, 177, 17, 122, 1, 41, 1, 208, 3, 41, 16, 209,
-        80, 137, 211, 121, 141, 232, 3, 0, 2, 241, 20, 1, 2, 145, 0, 33, 4,
-        145, 5, 145, 205, 248, 12, 128, 48, 70, 33, 70, 18, 105, 6, 240, 196,
-        255, 33, 176, 189, 232, 240, 143, 0, 191, 49, 195, 131, 0, 185, 208,
-        131, 0, 240, 181, 209, 176, 12, 70, 79, 244, 146, 114, 209, 248, 240,
-        16, 5, 70, 7, 168, 226, 247, 141, 251, 7, 168, 4, 241, 188, 1, 6, 34,
-        226, 247, 135, 251, 7, 168, 230, 247, 194, 253, 96, 177, 40, 70, 7,
-        169, 6, 34, 10, 240, 128, 220, 157, 248, 28, 48, 67, 240, 2, 3, 35,
-        240, 1, 3, 141, 248, 28, 48, 5, 245, 82, 118, 48, 70, 230, 247, 175,
-        253, 32, 185, 7, 168, 49, 70, 6, 34, 226, 247, 107, 251, 0, 33, 32,
-        34, 13, 241, 37, 0, 141, 248, 80, 16, 227, 243, 187, 247, 34, 126, 13,
-        241, 37, 0, 141, 248, 36, 32, 4, 241, 25, 1, 31, 42, 136, 191, 32, 34,
-        226, 247, 87, 251, 189, 248, 78, 48, 19, 244, 64, 79, 12, 191, 0, 34,
-        1, 34, 3, 244, 96, 83, 10, 50, 179, 245, 192, 95, 85, 248, 34, 96, 29,
-        209, 43, 104, 147, 248, 79, 48, 153, 7, 10, 208, 213, 248, 92, 1, 113,
-        104, 47, 240, 54, 218, 2, 7, 3, 212, 150, 248, 236, 48, 155, 7, 13,
-        212, 189, 248, 78, 0, 229, 243, 6, 242, 64, 244, 128, 83, 14, 40, 140,
-        191, 79, 244, 64, 64, 0, 32, 24, 67, 173, 248, 78, 0, 213, 248, 92,
-        1, 189, 248, 78, 16, 48, 240, 132, 217, 48, 177, 213, 248, 92, 1, 189,
-        248, 78, 16, 47, 240, 235, 223, 160, 177, 1, 34, 213, 248, 92, 1, 189,
-        248, 78, 16, 19, 70, 47, 240, 114, 223, 255, 40, 8, 209, 32, 70, 3,
-        33, 7, 170, 1, 35, 31, 240, 162, 217, 79, 240, 255, 48, 137, 224, 173,
-        248, 78, 0, 43, 106, 147, 248, 236, 16, 17, 240, 2, 1, 18, 208, 189,
-        248, 78, 16, 1, 244, 96, 81, 177, 245, 32, 95, 8, 208, 177, 245, 192,
-        95, 7, 208, 177, 245, 128, 95, 20, 191, 10, 33, 20, 33, 2, 224, 160,
-        33, 0, 224, 40, 33, 21, 168, 20, 240, 5, 255, 34, 109, 64, 242, 55,
-        19, 19, 64, 67, 177, 148, 248, 88, 48, 43, 177, 189, 248, 126, 48, 67,
-        240, 16, 3, 173, 248, 126, 48, 189, 248, 126, 48, 0, 34, 67, 240, 2,
-        3, 173, 248, 126, 48, 212, 248, 244, 48, 173, 248, 76, 32, 26, 134,
-        212, 248, 240, 48, 40, 70, 26, 134, 16, 240, 93, 216, 34, 70, 7, 169,
-        1, 35, 40, 70, 3, 240, 241, 223, 40, 70, 10, 240, 10, 216, 212, 248,
-        252, 48, 1, 38, 158, 113, 212, 248, 252, 48, 32, 70, 131, 248, 137,
-        96, 49, 70, 253, 247, 237, 255, 40, 70, 33, 70, 40, 240, 42, 218, 43,
-        104, 91, 107, 99, 177, 212, 248, 204, 48, 152, 7, 8, 212, 67, 244, 128,
-        115, 196, 248, 204, 48, 40, 70, 33, 70, 50, 70, 9, 240, 184, 223, 212,
-        248, 248, 48, 40, 70, 90, 104, 33, 70, 155, 104, 38, 240, 250, 222,
-        0, 38, 1, 39, 40, 70, 33, 70, 2, 34, 7, 171, 0, 150, 1, 150, 2, 151,
-        3, 150, 4, 150, 5, 240, 115, 216, 40, 70, 57, 70, 7, 170, 35, 70, 0,
-        150, 238, 247, 196, 249, 32, 70, 49, 70, 7, 170, 59, 70, 31, 240, 22,
-        217, 48, 70, 81, 176, 240, 189, 45, 233, 240, 79, 208, 248, 248, 96,
-        208, 248, 4, 113, 208, 248, 240, 160, 139, 176, 155, 70, 7, 150, 6,
-        151, 4, 70, 5, 104, 208, 248, 244, 96, 16, 240, 207, 216, 154, 249,
-        52, 144, 20, 154, 185, 241, 1, 15, 11, 241, 12, 7, 162, 241, 12, 8,
-        26, 209, 56, 70, 65, 70, 5, 34, 230, 247, 94, 253, 120, 177, 194, 120,
-        134, 248, 96, 32, 213, 248, 108, 50, 156, 66, 3, 209, 40, 70, 18, 33,
-        16, 240, 176, 222, 32, 70, 1, 33, 16, 240, 88, 220, 26, 224, 32, 70,
-        73, 70, 14, 240, 163, 223, 21, 224, 43, 104, 91, 107, 115, 177, 212,
-        248, 204, 48, 155, 7, 10, 212, 56, 70, 65, 70, 10, 240, 127, 216, 40,
-        177, 212, 248, 204, 48, 67, 244, 128, 115, 196, 248, 204, 48, 40, 70,
-        33, 70, 33, 240, 206, 217, 20, 155, 182, 248, 108, 32, 0, 147, 8, 171,
-        1, 147, 9, 171, 2, 147, 40, 70, 91, 70, 177, 110, 30, 240, 11, 223,
-        8, 155, 75, 177, 176, 110, 8, 177, 232, 247, 222, 252, 8, 155, 189,
-        248, 36, 32, 179, 102, 166, 248, 108, 32, 43, 104, 147, 248, 173, 32,
-        26, 177, 212, 248, 204, 32, 86, 4, 2, 213, 147, 248, 175, 48, 83, 177,
-        154, 249, 52, 48, 1, 43, 6, 209, 213, 248, 140, 1, 33, 70, 58, 70, 67,
-        70, 48, 240, 139, 218, 163, 121, 19, 185, 1, 35, 133, 248, 160, 55,
-        212, 248, 4, 49, 219, 139, 51, 177, 6, 158, 51, 120, 2, 43, 2, 209,
-        32, 70, 67, 240, 179, 223, 32, 70, 12, 240, 116, 220, 32, 177, 32, 70,
-        1, 33, 241, 247, 122, 255, 9, 224, 6, 159, 59, 120, 2, 43, 2, 209, 32,
-        70, 19, 240, 23, 252, 32, 70, 239, 247, 38, 251, 7, 158, 179, 104, 179,
-        177, 0, 38, 0, 150, 1, 150, 154, 249, 52, 48, 33, 70, 152, 27, 67, 66,
-        67, 235, 0, 3, 2, 147, 40, 70, 1, 34, 4, 241, 188, 3, 3, 150, 4, 150,
-        4, 240, 174, 223, 32, 70, 49, 70, 28, 240, 184, 217, 40, 70, 26, 240,
-        159, 254, 11, 176, 189, 232, 240, 143, 139, 30, 1, 43, 45, 233, 240,
-        71, 7, 70, 137, 70, 5, 104, 208, 248, 248, 128, 208, 248, 252, 64, 7,
-        216, 0, 33, 16, 240, 187, 219, 0, 35, 99, 98, 56, 70, 4, 240, 128, 222,
-        227, 106, 0, 43, 0, 240, 197, 128, 224, 108, 1, 40, 18, 217, 169, 241,
-        9, 3, 1, 43, 14, 216, 0, 34, 33, 70, 19, 70, 177, 248, 104, 96, 6, 177,
-        1, 50, 1, 51, 10, 49, 131, 66, 247, 209, 154, 66, 99, 209, 189, 232,
-        240, 135, 185, 241, 1, 15, 94, 209, 215, 248, 0, 49, 30, 105, 43, 106,
-        211, 248, 16, 49, 35, 177, 40, 70, 57, 70, 0, 34, 254, 247, 138, 249,
-        162, 108, 148, 248, 191, 48, 145, 27, 153, 66, 8, 220, 148, 248, 61,
-        16, 0, 41, 0, 240, 177, 128, 178, 26, 154, 66, 64, 243, 173, 128, 216,
-        248, 4, 48, 2, 43, 11, 209, 213, 248, 104, 49, 27, 177, 155, 121, 0,
-        43, 64, 240, 172, 128, 216, 248, 8, 48, 14, 43, 0, 240, 167, 128, 0,
-        35, 132, 248, 61, 48, 99, 98, 166, 100, 150, 224, 148, 248, 60, 16,
-        0, 41, 0, 240, 156, 128, 97, 107, 1, 41, 64, 240, 152, 128, 149, 248,
-        8, 22, 211, 26, 139, 66, 192, 242, 146, 128, 216, 248, 4, 48, 2, 43,
-        11, 209, 213, 248, 104, 49, 67, 177, 155, 121, 51, 177, 102, 106, 56,
-        70, 31, 240, 96, 218, 0, 35, 102, 98, 99, 99, 0, 35, 132, 248, 60, 48,
-        43, 106, 211, 248, 16, 49, 0, 43, 121, 208, 40, 70, 57, 70, 1, 34, 189,
-        232, 240, 71, 254, 247, 55, 185, 99, 107, 9, 59, 1, 43, 25, 216, 98,
-        105, 163, 105, 154, 66, 21, 217, 216, 248, 4, 48, 2, 43, 7, 209, 213,
-        248, 104, 49, 35, 177, 155, 121, 19, 177, 56, 70, 31, 240, 58, 218,
-        0, 35, 132, 248, 61, 48, 132, 248, 60, 48, 99, 98, 99, 97, 99, 99, 189,
-        232, 240, 135, 99, 106, 0, 43, 81, 209, 33, 108, 34, 107, 148, 248,
-        61, 80, 145, 66, 166, 143, 4, 210, 213, 241, 1, 5, 56, 191, 0, 37, 2,
-        224, 132, 248, 61, 48, 1, 37, 216, 248, 4, 48, 2, 43, 3, 209, 216, 248,
-        8, 48, 14, 43, 58, 209, 0, 34, 56, 70, 73, 70, 19, 70, 34, 240, 16,
-        216, 0, 40, 50, 209, 226, 106, 1, 35, 132, 248, 60, 48, 98, 98, 13,
-        185, 0, 46, 42, 209, 99, 100, 0, 35, 35, 100, 189, 232, 240, 135, 185,
-        241, 1, 15, 8, 191, 215, 248, 0, 49, 42, 106, 8, 191, 27, 105, 210,
-        248, 240, 32, 24, 191, 111, 240, 199, 3, 147, 66, 22, 218, 99, 106,
-        163, 185, 98, 121, 146, 185, 35, 107, 56, 70, 99, 98, 1, 33, 19, 70,
-        189, 232, 240, 71, 33, 240, 229, 159, 215, 248, 0, 49, 26, 105, 43,
-        106, 211, 248, 240, 48, 154, 66, 191, 246, 96, 175, 140, 231, 189, 232,
-        240, 135, 0, 0, 45, 233, 240, 65, 5, 104, 142, 176, 43, 104, 4, 70,
-        27, 126, 208, 248, 248, 128, 208, 248, 240, 96, 0, 43, 0, 240, 154,
-        128, 0, 33, 40, 70, 3, 240, 59, 248, 40, 105, 51, 240, 165, 223, 1,
-        70, 24, 177, 168, 104, 234, 247, 165, 249, 140, 224, 43, 104, 147, 248,
-        49, 48, 139, 177, 216, 248, 4, 48, 3, 43, 13, 209, 216, 248, 8, 48,
-        18, 43, 3, 209, 32, 70, 28, 240, 246, 216, 124, 224, 19, 43, 3, 209,
-        200, 248, 4, 0, 32, 70, 116, 224, 216, 248, 8, 112, 24, 47, 12, 216,
-        59, 75, 187, 64, 9, 213, 180, 249, 84, 48, 32, 70, 0, 147, 2, 33, 50,
-        70, 0, 35, 254, 247, 113, 252, 101, 224, 167, 241, 11, 3, 1, 43, 20,
-        216, 216, 248, 4, 48, 32, 70, 19, 241, 255, 51, 24, 191, 1, 35, 0, 147,
-        150, 249, 52, 48, 50, 70, 211, 241, 1, 3, 56, 191, 0, 35, 1, 147, 2,
-        33, 0, 35, 255, 247, 228, 250, 76, 224, 239, 185, 213, 248, 200, 52,
-        0, 43, 71, 208, 163, 121, 0, 43, 68, 209, 99, 121, 0, 43, 65, 208, 35,
-        122, 0, 43, 62, 209, 34, 126, 4, 241, 25, 1, 6, 168, 5, 146, 226, 247,
-        72, 248, 40, 70, 33, 70, 6, 170, 5, 155, 0, 151, 1, 151, 2, 151, 32,
-        240, 33, 220, 45, 224, 6, 47, 14, 209, 32, 70, 7, 33, 254, 247, 162,
-        254, 213, 248, 208, 36, 213, 248, 204, 52, 2, 50, 32, 70, 83, 248, 34,
-        16, 255, 247, 140, 248, 28, 224, 25, 47, 26, 209, 40, 70, 33, 70, 50,
-        70, 23, 240, 162, 252, 7, 70, 152, 177, 168, 104, 216, 248, 0, 16, 79,
-        244, 155, 114, 0, 35, 249, 243, 178, 240, 0, 35, 0, 147, 33, 70, 40,
-        70, 58, 70, 51, 70, 29, 240, 128, 220, 32, 70, 11, 33, 254, 247, 122,
-        254, 14, 176, 189, 232, 240, 129, 0, 191, 128, 0, 160, 0, 112, 71, 0,
-        0, 112, 181, 12, 70, 25, 179, 145, 248, 172, 48, 3, 179, 145, 248, 55,
-        49, 235, 185, 209, 248, 64, 81, 173, 185, 13, 78, 72, 105, 214, 248,
-        200, 48, 152, 71, 3, 40, 9, 217, 13, 224, 212, 248, 64, 49, 19, 185,
-        196, 248, 64, 1, 1, 224, 3, 136, 235, 130, 5, 70, 51, 111, 96, 105,
-        152, 71, 0, 40, 241, 209, 96, 105, 16, 177, 1, 75, 91, 111, 152, 71,
-        112, 189, 208, 134, 135, 0, 208, 248, 148, 48, 24, 106, 4, 75, 152,
-        66, 12, 191, 79, 244, 22, 96, 79, 244, 150, 112, 112, 71, 0, 191, 80,
-        32, 8, 0, 11, 104, 210, 43, 7, 216, 130, 111, 80, 139, 40, 177, 0, 235,
-        67, 0, 8, 96, 1, 32, 112, 71, 0, 32, 112, 71, 0, 0, 45, 233, 248, 67,
-        12, 70, 208, 248, 136, 144, 6, 70, 1, 70, 35, 70, 0, 34, 10, 224, 221,
-        7, 5, 213, 77, 105, 29, 185, 1, 37, 149, 64, 36, 234, 5, 4, 1, 50, 91,
-        8, 4, 49, 0, 43, 242, 209, 7, 70, 37, 70, 21, 224, 234, 7, 17, 213,
-        17, 75, 120, 105, 27, 106, 152, 71, 65, 246, 65, 120, 2, 224, 10, 32,
-        231, 243, 98, 247, 217, 248, 80, 49, 19, 244, 127, 79, 2, 208, 184,
-        241, 1, 8, 244, 209, 109, 8, 4, 55, 0, 45, 231, 209, 7, 224, 227, 7,
-        3, 213, 5, 75, 112, 105, 91, 106, 152, 71, 100, 8, 4, 54, 0, 44, 245,
-        209, 189, 232, 248, 131, 0, 191, 208, 134, 135, 0, 16, 181, 4, 70, 192,
-        111, 10, 70, 1, 107, 65, 242, 107, 3, 153, 66, 20, 209, 131, 106, 163,
-        245, 153, 115, 24, 43, 15, 216, 8, 73, 153, 64, 12, 213, 90, 185, 4,
-        33, 2, 35, 238, 243, 66, 243, 4, 33, 224, 111, 10, 70, 2, 35, 189, 232,
-        16, 64, 238, 243, 32, 179, 16, 189, 0, 191, 128, 64, 0, 192, 8, 181,
-        192, 111, 238, 243, 230, 240, 2, 40, 150, 191, 2, 75, 79, 240, 255,
-        48, 24, 86, 8, 189, 0, 191, 163, 223, 3, 0, 79, 240, 255, 48, 112, 71,
-        3, 104, 45, 233, 240, 65, 79, 244, 64, 65, 4, 70, 0, 34, 211, 248, 116,
-        100, 208, 248, 136, 112, 37, 240, 8, 218, 163, 111, 27, 105, 19, 177,
-        32, 70, 35, 240, 246, 221, 37, 109, 150, 248, 28, 49, 21, 240, 2, 5,
-        24, 191, 79, 244, 0, 117, 59, 179, 214, 248, 32, 49, 35, 187, 150, 248,
-        232, 16, 1, 34, 224, 111, 238, 243, 172, 242, 150, 248, 88, 17, 255,
-        41, 3, 208, 224, 111, 1, 34, 238, 243, 164, 242, 150, 248, 232, 48,
-        150, 248, 88, 33, 1, 33, 17, 250, 3, 243, 255, 42, 2, 208, 17, 250,
-        2, 242, 19, 67, 183, 248, 158, 4, 67, 234, 5, 2, 3, 67, 66, 234, 5,
-        1, 167, 248, 158, 52, 21, 70, 0, 224, 41, 70, 224, 111, 42, 70, 0, 35,
-        189, 232, 240, 65, 238, 243, 157, 178, 208, 248, 136, 48, 211, 248,
-        52, 1, 112, 71, 56, 181, 208, 248, 68, 49, 4, 70, 208, 248, 136, 80,
-        243, 185, 208, 248, 240, 48, 1, 59, 192, 248, 240, 48, 195, 185, 213,
-        248, 32, 49, 3, 104, 147, 248, 42, 56, 11, 177, 3, 33, 0, 224, 1, 33,
-        10, 70, 37, 240, 171, 217, 1, 35, 197, 248, 40, 49, 213, 248, 32, 49,
-        213, 248, 40, 49, 32, 70, 4, 33, 189, 232, 56, 64, 38, 240, 0, 155,
-        56, 189, 208, 248, 136, 48, 211, 248, 128, 1, 1, 177, 8, 96, 18, 177,
-        211, 248, 132, 49, 19, 96, 112, 71, 45, 233, 240, 79, 153, 70, 3, 104,
-        133, 176, 27, 104, 4, 70, 140, 70, 147, 248, 62, 160, 26, 177, 219,
-        105, 211, 248, 64, 176, 1, 224, 79, 240, 255, 59, 79, 240, 0, 8, 67,
-        70, 71, 70, 70, 70, 69, 70, 212, 248, 64, 33, 82, 177, 78, 73, 208,
-        138, 9, 104, 2, 146, 81, 248, 32, 16, 196, 248, 64, 17, 0, 33, 209,
-        130, 13, 224, 4, 235, 140, 2, 80, 105, 72, 74, 1, 147, 205, 248, 0,
-        192, 18, 111, 144, 71, 1, 155, 2, 144, 221, 248, 0, 192, 40, 179, 2,
-        154, 146, 104, 162, 248, 2, 192, 186, 241, 0, 15, 17, 208, 154, 178,
-        32, 104, 2, 169, 1, 147, 205, 248, 0, 192, 12, 240, 204, 222, 1, 155,
-        221, 248, 0, 192, 40, 185, 14, 185, 178, 70, 2, 224, 168, 70, 130, 70,
-        6, 70, 2, 154, 58, 177, 1, 51, 30, 177, 17, 136, 241, 130, 22, 70, 1,
-        224, 22, 70, 21, 70, 1, 55, 95, 69, 189, 211, 4, 235, 140, 3, 88, 105,
-        46, 75, 91, 111, 152, 71, 184, 241, 0, 15, 4, 208, 32, 104, 65, 70,
-        244, 247, 2, 253, 8, 224, 186, 241, 0, 15, 5, 208, 37, 177, 32, 104,
-        41, 70, 244, 247, 249, 252, 58, 224, 32, 70, 3, 169, 0, 34, 255, 247,
-        128, 255, 49, 224, 32, 75, 234, 138, 27, 104, 83, 248, 34, 96, 0, 35,
-        235, 130, 35, 104, 173, 104, 27, 104, 41, 70, 211, 248, 136, 48, 211,
-        248, 20, 35, 1, 50, 195, 248, 20, 35, 3, 155, 171, 97, 212, 248, 148,
-        48, 88, 106, 8, 240, 127, 254, 235, 138, 19, 244, 0, 98, 3, 244, 255,
-        97, 24, 191, 79, 244, 64, 66, 3, 244, 128, 83, 66, 234, 209, 2, 0, 43,
-        12, 191, 79, 244, 128, 83, 79, 244, 192, 83, 19, 67, 235, 130, 32, 104,
-        2, 153, 245, 247, 57, 255, 53, 70, 2, 149, 0, 45, 202, 209, 217, 248,
-        0, 48, 95, 69, 59, 68, 201, 248, 0, 48, 52, 191, 0, 32, 1, 32, 5, 176,
-        189, 232, 240, 143, 0, 191, 32, 7, 0, 0, 208, 134, 135, 0, 56, 181,
-        3, 104, 4, 70, 27, 104, 147, 248, 32, 80, 0, 45, 36, 209, 192, 111,
-        233, 247, 89, 249, 1, 33, 32, 70, 38, 240, 221, 216, 224, 111, 237,
-        243, 180, 247, 41, 70, 32, 70, 35, 240, 62, 223, 224, 111, 238, 243,
-        65, 242, 32, 70, 35, 240, 114, 220, 212, 248, 148, 48, 88, 106, 7, 240,
-        195, 253, 35, 104, 132, 248, 118, 80, 27, 104, 1, 34, 131, 248, 32,
-        32, 224, 111, 189, 232, 56, 64, 233, 247, 1, 184, 56, 189, 208, 248,
-        148, 48, 112, 181, 4, 70, 0, 43, 45, 208, 40, 32, 231, 243, 157, 245,
-        0, 37, 180, 248, 18, 97, 2, 224, 10, 32, 231, 243, 150, 245, 64, 33,
-        32, 70, 37, 240, 204, 218, 4, 40, 5, 208, 64, 33, 32, 70, 37, 240, 198,
-        218, 7, 40, 5, 209, 10, 61, 6, 241, 19, 3, 91, 25, 9, 43, 234, 216,
-        64, 33, 32, 70, 37, 240, 186, 218, 4, 40, 1, 208, 7, 40, 3, 209, 3,
-        35, 196, 248, 68, 49, 112, 189, 32, 70, 64, 33, 189, 232, 112, 64, 37,
-        240, 172, 154, 112, 189, 144, 248, 172, 32, 160, 248, 160, 16, 58, 177,
-        3, 104, 211, 248, 116, 52, 147, 248, 28, 49, 11, 185, 36, 240, 214,
-        152, 112, 71, 45, 233, 240, 65, 4, 70, 0, 104, 13, 70, 208, 248, 116,
-        100, 157, 248, 24, 16, 150, 248, 28, 1, 157, 248, 28, 112, 0, 40, 115,
-        208, 10, 177, 134, 248, 172, 80, 9, 177, 134, 248, 69, 49, 148, 248,
-        10, 49, 0, 43, 105, 208, 142, 33, 32, 70, 37, 240, 128, 218, 65, 0,
-        137, 178, 1, 241, 78, 8, 76, 49, 1, 45, 148, 191, 0, 35, 1, 35, 1, 61,
-        237, 178, 214, 248, 32, 33, 1, 45, 134, 248, 29, 49, 134, 248, 72, 49,
-        150, 248, 172, 48, 140, 191, 0, 37, 1, 37, 1, 42, 31, 250, 136, 248,
-        137, 178, 134, 248, 74, 81, 134, 248, 69, 49, 24, 208, 2, 211, 2, 42,
-        41, 209, 31, 224, 1, 34, 32, 70, 38, 240, 6, 216, 150, 248, 232, 48,
-        150, 248, 88, 33, 21, 250, 3, 243, 255, 42, 219, 178, 134, 248, 176,
-        48, 25, 208, 133, 240, 1, 1, 17, 250, 2, 242, 19, 67, 17, 224, 32, 70,
-        2, 34, 37, 240, 241, 223, 21, 177, 150, 248, 46, 49, 9, 224, 150, 248,
-        44, 49, 6, 224, 32, 70, 37, 240, 231, 223, 150, 248, 232, 48, 21, 250,
-        3, 243, 134, 248, 176, 48, 32, 70, 65, 70, 150, 248, 176, 32, 37, 240,
-        219, 223, 143, 177, 212, 248, 136, 48, 211, 248, 88, 33, 208, 7, 11,
-        212, 179, 248, 182, 54, 217, 7, 7, 212, 35, 104, 41, 70, 27, 106, 24,
-        105, 189, 232, 240, 65, 8, 240, 110, 187, 189, 232, 240, 129, 112, 181,
-        4, 70, 208, 248, 136, 0, 0, 34, 7, 33, 212, 248, 216, 48, 13, 10, 51,
-        248, 18, 48, 206, 178, 203, 24, 155, 178, 1, 59, 70, 234, 3, 38, 5,
-        240, 3, 5, 3, 244, 64, 115, 29, 67, 111, 234, 66, 99, 111, 234, 83,
-        67, 160, 248, 64, 53, 160, 248, 32, 101, 160, 248, 44, 85, 160, 248,
-        64, 53, 212, 248, 216, 48, 51, 248, 18, 80, 1, 50, 73, 25, 6, 42, 137,
-        178, 218, 209, 32, 70, 152, 33, 90, 136, 37, 240, 150, 223, 212, 248,
-        216, 48, 32, 70, 154, 33, 154, 136, 37, 240, 143, 223, 212, 248, 216,
-        48, 32, 70, 218, 136, 27, 136, 156, 33, 67, 234, 2, 34, 146, 178, 37,
-        240, 132, 223, 212, 248, 216, 48, 32, 70, 90, 137, 27, 137, 158, 33,
-        67, 234, 2, 34, 146, 178, 37, 240, 121, 223, 32, 70, 189, 232, 112,
-        64, 35, 240, 74, 157, 112, 181, 146, 33, 4, 70, 133, 111, 6, 104, 37,
-        240, 191, 217, 163, 111, 64, 0, 104, 131, 90, 139, 0, 42, 69, 208, 26,
-        106, 114, 177, 218, 127, 98, 177, 0, 37, 163, 111, 32, 70, 89, 139,
-        27, 106, 73, 25, 90, 91, 2, 53, 37, 240, 89, 223, 236, 45, 244, 209,
-        47, 224, 1, 34, 218, 119, 214, 248, 68, 54, 0, 43, 46, 208, 0, 37, 29,
-        224, 3, 235, 133, 3, 218, 136, 178, 245, 122, 127, 11, 211, 161, 111,
-        73, 106, 145, 177, 162, 245, 122, 114, 146, 178, 7, 42, 13, 216, 27,
-        137, 33, 248, 18, 48, 9, 224, 210, 42, 7, 216, 161, 111, 32, 70, 73,
-        139, 1, 235, 66, 1, 26, 137, 37, 240, 50, 223, 1, 53, 173, 178, 214,
-        248, 68, 54, 154, 136, 170, 66, 220, 216, 26, 120, 18, 177, 162, 111,
-        91, 136, 19, 129, 32, 70, 189, 232, 112, 64, 35, 240, 91, 154, 112,
-        189, 3, 104, 112, 181, 142, 33, 211, 248, 116, 84, 4, 70, 37, 240, 106,
-        217, 149, 248, 28, 33, 70, 0, 182, 178, 0, 42, 59, 208, 213, 248, 32,
-        49, 6, 241, 80, 1, 148, 54, 1, 43, 137, 178, 182, 178, 28, 208, 2, 211,
-        2, 43, 56, 209, 34, 224, 149, 248, 232, 32, 1, 32, 16, 250, 2, 242,
-        149, 248, 88, 49, 146, 178, 255, 43, 3, 208, 16, 250, 3, 243, 26, 67,
-        146, 178, 32, 70, 37, 240, 244, 222, 149, 248, 232, 48, 1, 34, 154,
-        64, 32, 70, 49, 70, 146, 178, 26, 224, 32, 70, 181, 248, 42, 33, 37,
-        240, 231, 222, 32, 70, 49, 70, 181, 248, 44, 33, 16, 224, 149, 248,
-        232, 48, 1, 34, 154, 64, 32, 70, 146, 178, 37, 240, 218, 222, 32, 70,
-        49, 70, 0, 34, 4, 224, 76, 54, 79, 246, 254, 113, 32, 70, 49, 64, 189,
-        232, 112, 64, 37, 240, 205, 158, 112, 189, 208, 248, 148, 16, 16, 181,
-        8, 49, 4, 70, 36, 240, 53, 216, 3, 73, 32, 70, 189, 232, 16, 64, 36,
-        240, 23, 152, 0, 191, 204, 205, 3, 0, 45, 233, 240, 65, 23, 70, 4, 70,
-        13, 70, 189, 248, 24, 32, 157, 248, 28, 96, 152, 70, 59, 177, 3, 104,
-        12, 49, 219, 105, 3, 235, 65, 3, 153, 136, 113, 24, 153, 128, 79, 246,
-        255, 115, 154, 66, 3, 208, 32, 70, 168, 33, 37, 240, 161, 222, 4, 235,
-        133, 3, 88, 105, 9, 75, 57, 70, 66, 70, 155, 106, 152, 71, 0, 40, 10,
-        218, 184, 241, 0, 15, 7, 208, 35, 104, 12, 53, 219, 105, 3, 235, 69,
-        5, 171, 136, 158, 27, 174, 128, 189, 232, 240, 129, 208, 134, 135, 0,
-        208, 248, 240, 48, 112, 181, 1, 51, 1, 43, 4, 70, 208, 248, 136, 80,
-        192, 248, 240, 48, 65, 216, 3, 104, 147, 248, 42, 56, 91, 177, 2, 33,
-        0, 34, 36, 240, 143, 222, 32, 70, 64, 242, 35, 17, 0, 34, 189, 232,
-        112, 64, 37, 240, 95, 158, 4, 33, 37, 240, 244, 223, 213, 248, 32, 49,
-        1, 51, 36, 208, 213, 248, 40, 33, 81, 28, 32, 208, 18, 240, 1, 2, 1,
-        208, 4, 35, 20, 224, 32, 70, 1, 33, 36, 240, 115, 222, 66, 242, 109,
-        6, 2, 224, 10, 32, 231, 243, 107, 243, 213, 248, 40, 49, 219, 7, 1,
-        212, 1, 62, 246, 209, 213, 248, 40, 49, 216, 7, 3, 212, 5, 35, 196,
-        248, 68, 49, 112, 189, 213, 248, 32, 49, 1, 51, 5, 209, 35, 104, 152,
-        104, 189, 232, 112, 64, 233, 247, 148, 188, 112, 189, 112, 181, 4, 70,
-        13, 70, 22, 70, 255, 247, 172, 255, 32, 70, 41, 70, 255, 247, 192, 251,
-        32, 70, 35, 240, 233, 219, 35, 104, 26, 104, 146, 248, 156, 32, 1, 42,
-        4, 209, 211, 248, 52, 1, 41, 70, 249, 247, 194, 253, 32, 70, 255, 247,
-        117, 252, 32, 104, 41, 70, 50, 70, 239, 247, 4, 252, 32, 70, 41, 70,
-        189, 232, 112, 64, 35, 240, 8, 155, 45, 233, 240, 65, 144, 248, 9, 113,
-        4, 70, 13, 70, 22, 70, 152, 70, 23, 185, 57, 70, 35, 240, 160, 220,
-        212, 248, 148, 48, 214, 241, 1, 1, 88, 106, 164, 248, 188, 80, 56, 191,
-        0, 33, 7, 240, 47, 251, 148, 248, 172, 48, 131, 185, 148, 248, 10, 49,
-        51, 177, 212, 248, 148, 48, 65, 70, 88, 106, 42, 70, 8, 240, 222, 248,
-        212, 248, 148, 48, 41, 70, 88, 106, 7, 240, 223, 253, 86, 224, 180,
-        248, 70, 48, 68, 242, 192, 50, 147, 66, 62, 208, 26, 216, 68, 242, 174,
-        50, 147, 66, 57, 208, 10, 216, 68, 242, 163, 50, 147, 66, 52, 208, 68,
-        242, 171, 50, 147, 66, 48, 208, 68, 242, 160, 50, 36, 224, 68, 242,
-        183, 50, 147, 66, 41, 208, 68, 242, 186, 50, 147, 66, 37, 208, 68, 242,
-        177, 50, 25, 224, 68, 242, 223, 50, 147, 66, 30, 208, 10, 216, 68, 242,
-        214, 50, 147, 66, 25, 208, 68, 242, 217, 50, 147, 66, 21, 208, 68, 242,
-        211, 50, 9, 224, 68, 242, 233, 50, 147, 66, 14, 208, 68, 242, 236, 50,
-        147, 66, 10, 208, 68, 242, 227, 50, 147, 66, 6, 208, 212, 248, 148,
-        48, 88, 106, 7, 240, 158, 253, 133, 66, 5, 208, 212, 248, 148, 48, 41,
-        70, 88, 106, 8, 240, 228, 253, 212, 248, 148, 48, 65, 70, 88, 106, 42,
-        70, 8, 240, 133, 248, 32, 70, 49, 70, 0, 34, 36, 240, 38, 222, 47, 185,
-        32, 70, 2, 33, 189, 232, 240, 65, 35, 240, 35, 156, 189, 232, 240, 129,
-        0, 0, 45, 233, 240, 79, 159, 176, 221, 248, 160, 128, 31, 70, 0, 35,
-        184, 241, 3, 15, 4, 70, 14, 70, 41, 157, 221, 248, 168, 144, 27, 147,
-        28, 147, 12, 217, 4, 34, 27, 168, 57, 70, 225, 247, 196, 250, 184, 241,
-        7, 15, 4, 217, 28, 168, 57, 29, 4, 34, 225, 247, 188, 250, 51, 31, 27,
-        154, 136, 43, 0, 242, 198, 132, 223, 232, 19, 240, 155, 0, 137, 0, 190,
-        0, 183, 0, 204, 0, 197, 0, 218, 0, 211, 0, 227, 0, 196, 4, 231, 0, 196,
-        4, 14, 1, 196, 4, 43, 1, 196, 4, 202, 4, 202, 4, 202, 4, 202, 4, 196,
-        4, 196, 4, 196, 4, 196, 4, 196, 4, 196, 4, 196, 4, 196, 4, 93, 1, 77,
-        1, 196, 4, 196, 4, 196, 4, 42, 2, 124, 1, 109, 1, 196, 4, 196, 4, 196,
-        4, 196, 4, 196, 4, 196, 4, 196, 4, 196, 4, 196, 4, 196, 4, 196, 4, 196,
-        4, 196, 4, 196, 4, 196, 4, 196, 4, 196, 4, 196, 4, 196, 4, 196, 4, 196,
-        4, 196, 4, 196, 4, 196, 4, 196, 4, 79, 2, 196, 4, 79, 2, 163, 3, 217,
-        3, 22, 4, 196, 4, 118, 3, 196, 4, 239, 2, 196, 4, 196, 4, 134, 2, 164,
-        2, 196, 4, 196, 4, 196, 4, 98, 4, 196, 4, 101, 4, 196, 4, 196, 4, 225,
-        0, 196, 4, 225, 0, 235, 0, 196, 4, 250, 0, 253, 0, 31, 4, 196, 4, 179,
-        2, 196, 4, 196, 4, 104, 4, 134, 4, 196, 4, 138, 4, 196, 4, 141, 4, 144,
-        4, 163, 4, 196, 4, 196, 4, 196, 4, 196, 4, 196, 4, 202, 4, 167, 4, 196,
-        4, 196, 4, 196, 4, 196, 4, 250, 2, 72, 3, 179, 4, 176, 4, 196, 4, 196,
-        4, 202, 4, 202, 4, 196, 4, 196, 4, 196, 4, 196, 4, 196, 4, 196, 4, 150,
-        1, 145, 1, 157, 1, 152, 1, 164, 1, 159, 1, 173, 1, 167, 1, 3, 1, 151,
-        232, 96, 0, 0, 34, 41, 70, 2, 35, 224, 111, 237, 243, 192, 245, 41,
-        70, 42, 70, 224, 111, 2, 35, 237, 243, 246, 245, 224, 111, 41, 70, 50,
-        70, 44, 224, 185, 241, 11, 15, 64, 243, 28, 132, 0, 33, 10, 70, 2, 35,
-        224, 111, 237, 243, 172, 245, 0, 33, 10, 70, 7, 70, 2, 35, 224, 111,
-        237, 243, 199, 245, 0, 33, 6, 70, 10, 70, 224, 111, 2, 35, 237, 243,
-        218, 245, 47, 96, 110, 96, 168, 96, 41, 224, 224, 111, 79, 240, 255,
-        49, 2, 35, 237, 243, 148, 245, 34, 224, 0, 33, 224, 111, 10, 70, 2,
-        35, 237, 243, 141, 245, 26, 224, 224, 111, 79, 240, 255, 49, 2, 35,
-        237, 243, 168, 245, 20, 224, 0, 33, 224, 111, 10, 70, 2, 35, 237, 243,
-        161, 245, 12, 224, 224, 111, 79, 240, 255, 49, 2, 35, 237, 243, 180,
-        245, 6, 224, 0, 33, 224, 111, 10, 70, 2, 35, 237, 243, 173, 245, 40,
-        96, 0, 39, 235, 227, 224, 111, 237, 243, 133, 245, 248, 231, 212, 248,
-        128, 0, 172, 73, 2, 224, 212, 248, 128, 0, 171, 73, 229, 247, 15, 252,
-        32, 177, 0, 33, 10, 70, 229, 247, 144, 251, 233, 231, 79, 240, 255,
-        51, 43, 96, 201, 227, 148, 248, 28, 49, 183, 227, 0, 50, 24, 191, 1,
-        34, 132, 248, 28, 33, 221, 231, 28, 155, 75, 69, 0, 243, 180, 131, 17,
-        70, 32, 70, 26, 70, 43, 70, 34, 240, 82, 223, 159, 227, 0, 35, 29, 147,
-        35, 104, 152, 104, 248, 243, 235, 242, 128, 70, 224, 111, 237, 243,
-        161, 245, 6, 70, 32, 185, 224, 111, 1, 33, 29, 170, 237, 243, 208, 245,
-        224, 111, 228, 247, 93, 254, 0, 40, 0, 240, 191, 129, 27, 153, 42, 70,
-        75, 70, 229, 247, 79, 248, 27, 224, 0, 35, 29, 147, 35, 104, 152, 104,
-        248, 243, 206, 242, 128, 70, 224, 111, 237, 243, 132, 245, 6, 70, 32,
-        185, 224, 111, 1, 33, 29, 170, 237, 243, 179, 245, 224, 111, 228, 247,
-        64, 254, 0, 40, 0, 240, 162, 129, 27, 153, 42, 70, 75, 70, 229, 247,
-        60, 248, 0, 40, 212, 191, 111, 240, 13, 7, 0, 39, 152, 225, 184, 241,
-        7, 15, 64, 242, 106, 131, 0, 42, 192, 242, 106, 131, 2, 35, 0, 147,
-        17, 70, 224, 111, 1, 34, 28, 155, 237, 243, 171, 245, 131, 231, 184,
-        241, 3, 15, 64, 242, 90, 131, 0, 42, 192, 242, 90, 131, 2, 35, 0, 147,
-        17, 70, 0, 34, 224, 111, 19, 70, 237, 243, 155, 245, 114, 231, 184,
-        241, 11, 15, 64, 242, 74, 131, 0, 42, 192, 242, 74, 131, 28, 155, 0,
-        43, 172, 191, 111, 240, 22, 7, 111, 240, 1, 7, 82, 227, 184, 241, 7,
-        15, 64, 242, 59, 131, 0, 42, 192, 242, 59, 131, 28, 155, 0, 43, 192,
-        242, 55, 131, 0, 39, 0, 151, 17, 70, 224, 111, 26, 70, 59, 70, 237,
-        243, 132, 245, 40, 96, 61, 227, 0, 42, 192, 242, 42, 131, 89, 75, 20,
-        224, 88, 75, 12, 224, 0, 42, 192, 242, 35, 131, 86, 75, 13, 224, 85,
-        75, 5, 224, 0, 42, 192, 242, 28, 131, 84, 75, 6, 224, 83, 75, 27, 104,
-        13, 227, 0, 42, 192, 242, 20, 131, 81, 75, 26, 96, 51, 231, 148, 248,
-        172, 96, 0, 46, 64, 240, 15, 131, 79, 244, 240, 113, 79, 240, 255, 50,
-        51, 70, 224, 111, 232, 247, 27, 248, 79, 244, 122, 112, 231, 243, 189,
-        240, 79, 244, 204, 97, 79, 240, 255, 50, 6, 35, 224, 111, 232, 247,
-        15, 248, 64, 242, 100, 97, 50, 70, 51, 70, 224, 111, 232, 247, 8, 248,
-        79, 244, 204, 97, 79, 240, 255, 50, 6, 35, 128, 70, 224, 111, 231, 247,
-        255, 255, 58, 75, 64, 242, 100, 97, 27, 104, 79, 240, 255, 50, 224,
-        111, 231, 247, 246, 255, 224, 111, 230, 247, 205, 253, 53, 75, 31, 104,
-        33, 224, 231, 247, 238, 255, 48, 75, 24, 104, 231, 243, 144, 240, 0,
-        34, 44, 33, 19, 70, 224, 111, 231, 247, 228, 255, 79, 244, 240, 113,
-        79, 240, 255, 50, 16, 35, 224, 111, 231, 247, 220, 255, 38, 75, 24,
-        104, 231, 243, 126, 240, 0, 34, 44, 33, 224, 111, 19, 70, 231, 247,
-        210, 255, 0, 5, 88, 191, 1, 54, 1, 63, 0, 35, 0, 47, 224, 111, 79, 244,
-        240, 113, 79, 240, 255, 50, 213, 220, 231, 247, 196, 255, 79, 244, 122,
-        112, 231, 243, 102, 240, 79, 244, 204, 97, 79, 240, 255, 50, 6, 35,
-        224, 111, 231, 247, 184, 255, 64, 242, 100, 97, 79, 240, 255, 50, 67,
-        70, 224, 111, 231, 247, 176, 255, 224, 111, 230, 247, 135, 253, 46,
-        96, 182, 230, 148, 248, 172, 48, 37, 104, 0, 43, 0, 240, 154, 130, 168,
-        104, 248, 243, 204, 241, 6, 70, 224, 111, 232, 247, 119, 250, 49, 70,
-        7, 70, 168, 104, 248, 243, 203, 241, 212, 248, 148, 48, 88, 106, 8,
-        240, 54, 251, 140, 226, 0, 191, 173, 86, 136, 0, 181, 86, 136, 0, 212,
-        17, 4, 0, 188, 17, 4, 0, 208, 17, 4, 0, 148, 19, 4, 0, 35, 104, 79,
-        240, 0, 9, 152, 104, 205, 248, 116, 144, 248, 243, 168, 241, 65, 46,
-        5, 70, 10, 209, 205, 248, 0, 144, 1, 33, 58, 70, 224, 111, 40, 250,
-        1, 243, 228, 247, 137, 253, 7, 70, 28, 224, 224, 111, 237, 243, 81,
-        244, 6, 70, 32, 185, 224, 111, 1, 33, 29, 170, 237, 243, 128, 244, 224,
-        111, 228, 247, 13, 253, 48, 177, 57, 70, 79, 234, 88, 2, 228, 247, 252,
-        254, 7, 70, 1, 224, 111, 240, 29, 7, 38, 185, 224, 111, 49, 70, 29,
-        170, 237, 243, 109, 244, 35, 104, 41, 70, 152, 104, 216, 225, 35, 104,
-        152, 104, 248, 243, 117, 241, 0, 35, 6, 70, 224, 111, 29, 147, 237,
-        243, 41, 244, 5, 70, 80, 185, 224, 111, 1, 33, 29, 170, 237, 243, 88,
-        244, 224, 111, 237, 243, 31, 244, 0, 40, 0, 240, 39, 130, 224, 111,
-        1, 33, 58, 70, 67, 70, 228, 247, 144, 254, 196, 224, 35, 104, 152, 104,
-        248, 243, 87, 241, 6, 70, 224, 111, 228, 247, 157, 254, 35, 104, 40,
-        96, 49, 70, 152, 104, 248, 243, 85, 241, 45, 230, 0, 35, 29, 147, 35,
-        104, 152, 104, 248, 243, 70, 241, 128, 70, 224, 111, 237, 243, 250,
-        243, 0, 40, 64, 240, 22, 129, 224, 111, 237, 243, 246, 243, 6, 70, 32,
-        185, 224, 111, 1, 33, 29, 170, 237, 243, 37, 244, 224, 111, 228, 247,
-        178, 252, 130, 70, 160, 177, 59, 104, 79, 240, 0, 9, 79, 234, 3, 27,
-        79, 70, 7, 235, 11, 1, 80, 70, 228, 247, 136, 252, 184, 64, 1, 55, 16,
-        47, 73, 234, 0, 9, 244, 209, 197, 248, 0, 144, 0, 39, 1, 224, 111, 240,
-        29, 7, 0, 46, 64, 240, 115, 129, 224, 111, 49, 70, 29, 170, 237, 243,
-        1, 244, 108, 225, 32, 70, 255, 247, 101, 248, 40, 96, 176, 241, 255,
-        63, 12, 191, 79, 240, 255, 55, 0, 39, 212, 225, 0, 35, 29, 147, 35,
-        104, 152, 104, 248, 243, 255, 240, 5, 144, 224, 111, 237, 243, 179,
-        243, 0, 40, 59, 209, 224, 111, 237, 243, 176, 243, 6, 70, 32, 185, 224,
-        111, 1, 33, 29, 170, 237, 243, 223, 243, 224, 111, 228, 247, 108, 252,
-        131, 70, 24, 179, 27, 155, 221, 248, 112, 160, 0, 39, 26, 224, 87, 69,
-        3, 209, 21, 224, 79, 240, 0, 8, 193, 70, 249, 24, 88, 70, 4, 147, 228,
-        247, 61, 252, 192, 178, 0, 250, 8, 240, 8, 241, 1, 8, 64, 234, 9, 9,
-        1, 55, 184, 241, 8, 15, 95, 250, 137, 249, 4, 155, 230, 209, 5, 248,
-        1, 155, 87, 69, 229, 211, 0, 39, 1, 224, 111, 240, 29, 7, 62, 185, 224,
-        111, 49, 70, 29, 170, 237, 243, 174, 243, 1, 224, 111, 240, 29, 7, 35,
-        104, 5, 153, 152, 104, 22, 225, 0, 35, 29, 147, 35, 104, 152, 104, 248,
-        243, 177, 240, 6, 70, 224, 111, 237, 243, 101, 243, 0, 40, 64, 240,
-        187, 128, 224, 111, 237, 243, 97, 243, 5, 70, 32, 185, 224, 111, 1,
-        33, 29, 170, 237, 243, 144, 243, 224, 111, 228, 247, 29, 252, 56, 177,
-        27, 153, 28, 154, 7, 241, 8, 3, 228, 247, 17, 252, 7, 70, 1, 224, 111,
-        240, 29, 7, 0, 45, 64, 240, 162, 128, 224, 111, 41, 70, 29, 170, 237,
-        243, 122, 243, 155, 224, 41, 70, 16, 34, 224, 111, 231, 247, 60, 254,
-        40, 70, 226, 243, 67, 244, 6, 70, 40, 177, 43, 24, 19, 248, 1, 60, 47,
-        43, 8, 191, 70, 30, 0, 36, 16, 33, 151, 74, 35, 70, 23, 168, 226, 243,
-        230, 243, 23, 168, 231, 247, 104, 251, 1, 70, 96, 177, 40, 70, 50, 70,
-        224, 247, 12, 255, 7, 70, 48, 185, 40, 70, 16, 33, 143, 74, 35, 70,
-        226, 243, 213, 243, 47, 225, 1, 52, 10, 44, 228, 209, 61, 229, 35, 104,
-        152, 104, 248, 243, 88, 240, 128, 70, 224, 111, 237, 243, 24, 243, 232,
-        177, 224, 111, 237, 243, 48, 243, 6, 70, 24, 185, 224, 111, 1, 33, 237,
-        243, 70, 244, 43, 104, 224, 111, 0, 147, 107, 104, 8, 53, 1, 147, 0,
-        35, 2, 149, 3, 147, 65, 104, 212, 248, 136, 32, 163, 104, 226, 243,
-        239, 242, 0, 40, 20, 191, 79, 240, 255, 55, 0, 39, 136, 224, 224, 111,
-        237, 243, 234, 242, 56, 185, 224, 111, 1, 33, 5, 241, 8, 2, 43, 29,
-        228, 247, 228, 251, 132, 224, 111, 240, 29, 7, 130, 224, 35, 104, 152,
-        104, 248, 243, 34, 240, 6, 70, 224, 111, 237, 243, 226, 242, 0, 179,
-        224, 111, 237, 243, 250, 242, 5, 70, 24, 185, 224, 111, 1, 33, 237,
-        243, 16, 244, 59, 104, 224, 111, 0, 147, 123, 104, 8, 55, 2, 151, 1,
-        147, 65, 104, 212, 248, 136, 32, 163, 104, 228, 247, 57, 254, 0, 40,
-        20, 191, 79, 240, 255, 55, 0, 39, 157, 185, 224, 111, 41, 70, 237, 243,
-        249, 243, 14, 224, 224, 111, 237, 243, 177, 242, 64, 185, 121, 104,
-        7, 241, 8, 2, 224, 111, 1, 35, 228, 247, 177, 253, 7, 70, 1, 224, 111,
-        240, 29, 7, 35, 104, 49, 70, 152, 104, 72, 224, 224, 111, 121, 104,
-        7, 241, 8, 2, 0, 35, 228, 247, 162, 253, 192, 178, 192, 228, 35, 104,
-        152, 104, 247, 243, 220, 247, 128, 70, 224, 111, 237, 243, 156, 242,
-        0, 40, 47, 208, 224, 111, 237, 243, 179, 242, 6, 70, 24, 185, 224, 111,
-        1, 33, 237, 243, 201, 243, 64, 34, 224, 111, 0, 35, 1, 146, 7, 170,
-        0, 147, 2, 146, 3, 147, 163, 104, 65, 104, 212, 248, 136, 32, 226, 243,
-        115, 242, 2, 35, 43, 96, 7, 70, 112, 185, 3, 70, 7, 170, 153, 90, 79,
-        246, 253, 114, 1, 57, 137, 178, 145, 66, 2, 216, 0, 35, 43, 96, 2, 224,
-        2, 51, 64, 43, 241, 209, 62, 185, 224, 111, 49, 70, 237, 243, 163, 243,
-        2, 224, 1, 35, 43, 96, 7, 70, 35, 104, 65, 70, 152, 104, 247, 243, 166,
-        247, 108, 224, 212, 248, 92, 49, 79, 224, 212, 248, 96, 49, 76, 224,
-        41, 70, 16, 34, 23, 168, 224, 247, 72, 254, 24, 158, 12, 54, 48, 70,
-        231, 247, 1, 249, 4, 70, 0, 40, 81, 208, 41, 70, 50, 70, 224, 247, 60,
-        254, 35, 136, 32, 70, 27, 11, 1, 43, 4, 208, 231, 247, 246, 248, 79,
-        240, 255, 55, 75, 224, 231, 247, 241, 248, 67, 224, 35, 104, 147, 248,
-        0, 54, 42, 224, 79, 244, 176, 99, 39, 224, 180, 248, 30, 49, 36, 224,
-        151, 178, 1, 47, 54, 216, 3, 35, 164, 248, 30, 113, 32, 70, 0, 147,
-        2, 33, 32, 34, 31, 177, 19, 70, 36, 240, 239, 216, 65, 228, 59, 70,
-        36, 240, 235, 216, 43, 224, 32, 70, 34, 240, 147, 221, 56, 228, 83,
-        28, 2, 43, 34, 216, 32, 70, 81, 178, 36, 240, 47, 220, 7, 70, 30, 224,
-        196, 248, 56, 33, 45, 228, 212, 248, 56, 49, 43, 96, 41, 228, 166, 223,
-        3, 0, 176, 223, 3, 0, 111, 240, 13, 7, 16, 224, 111, 240, 1, 7, 13,
-        224, 111, 240, 4, 7, 10, 224, 111, 240, 29, 7, 7, 224, 111, 240, 26,
-        7, 4, 224, 111, 240, 22, 7, 1, 224, 111, 240, 28, 7, 56, 70, 31, 176,
-        189, 232, 240, 143, 248, 181, 208, 248, 152, 48, 4, 70, 94, 106, 208,
-        248, 156, 48, 13, 70, 95, 106, 190, 66, 4, 208, 215, 241, 1, 7, 56,
-        191, 0, 39, 0, 224, 1, 39, 24, 42, 2, 208, 26, 42, 21, 209, 5, 224,
-        224, 111, 41, 70, 189, 232, 248, 64, 231, 247, 246, 188, 30, 177, 48,
-        70, 41, 70, 8, 240, 132, 248, 7, 177, 62, 185, 212, 248, 156, 48, 41,
-        70, 88, 106, 189, 232, 248, 64, 8, 240, 122, 184, 248, 189, 45, 233,
-        255, 65, 23, 70, 138, 104, 4, 70, 147, 66, 13, 70, 60, 219, 192, 111,
-        236, 243, 55, 247, 1, 40, 128, 70, 22, 208, 2, 40, 55, 209, 35, 104,
-        152, 104, 247, 243, 236, 246, 171, 104, 106, 136, 1, 33, 203, 64, 6,
-        70, 0, 146, 224, 111, 58, 70, 228, 247, 207, 250, 35, 104, 5, 70, 49,
-        70, 152, 104, 247, 243, 228, 246, 36, 224, 224, 111, 237, 243, 184,
-        241, 6, 70, 24, 185, 224, 111, 65, 70, 237, 243, 206, 242, 107, 104,
-        224, 111, 0, 147, 171, 104, 2, 151, 1, 147, 65, 104, 212, 248, 136,
-        32, 163, 104, 228, 247, 248, 252, 0, 40, 20, 191, 79, 240, 255, 53,
-        0, 37, 78, 185, 224, 111, 49, 70, 237, 243, 184, 242, 4, 224, 111, 240,
-        13, 5, 1, 224, 111, 240, 29, 5, 40, 70, 4, 176, 189, 232, 240, 129,
-        45, 233, 240, 67, 153, 70, 3, 104, 133, 176, 5, 70, 152, 104, 12, 70,
-        144, 70, 247, 243, 167, 246, 0, 38, 2, 35, 7, 70, 35, 128, 102, 96,
-        232, 111, 236, 243, 225, 246, 1, 40, 2, 208, 2, 40, 64, 209, 46, 224,
-        163, 104, 32, 128, 102, 96, 27, 177, 1, 51, 35, 240, 1, 3, 1, 224, 79,
-        244, 64, 115, 153, 69, 163, 96, 56, 219, 232, 111, 237, 243, 106, 241,
-        6, 70, 24, 185, 232, 111, 1, 33, 237, 243, 128, 242, 0, 35, 0, 147,
-        162, 104, 232, 111, 1, 146, 3, 147, 205, 248, 8, 128, 65, 104, 213,
-        248, 136, 32, 171, 104, 226, 243, 42, 241, 0, 40, 20, 191, 79, 240,
-        255, 52, 0, 36, 238, 185, 232, 111, 49, 70, 237, 243, 104, 242, 24,
-        224, 35, 70, 67, 248, 8, 159, 232, 111, 1, 33, 66, 70, 228, 247, 29,
-        250, 163, 104, 91, 0, 163, 96, 16, 241, 30, 15, 20, 191, 4, 70, 0, 36,
-        7, 224, 38, 128, 102, 96, 166, 96, 111, 240, 29, 4, 1, 224, 111, 240,
-        13, 4, 43, 104, 57, 70, 152, 104, 247, 243, 85, 246, 32, 70, 5, 176,
-        189, 232, 240, 131, 0, 0, 45, 233, 243, 71, 14, 104, 208, 248, 148,
-        48, 95, 250, 134, 248, 93, 106, 8, 241, 255, 51, 4, 70, 15, 70, 145,
-        70, 198, 243, 0, 38, 7, 43, 0, 242, 84, 129, 223, 232, 19, 240, 150,
-        0, 35, 1, 82, 1, 8, 0, 8, 0, 150, 0, 82, 1, 126, 0, 220, 33, 0, 34,
-        36, 240, 140, 223, 32, 70, 222, 33, 0, 34, 36, 240, 135, 223, 40, 70,
-        128, 33, 1, 34, 6, 240, 248, 254, 86, 185, 3, 35, 16, 34, 0, 147, 32,
-        70, 2, 33, 19, 70, 35, 240, 163, 223, 177, 70, 178, 70, 21, 224, 32,
-        33, 79, 244, 228, 114, 32, 104, 234, 247, 132, 249, 32, 104, 6, 33,
-        3, 104, 12, 34, 211, 248, 136, 48, 211, 248, 140, 162, 234, 247, 122,
-        249, 35, 104, 27, 104, 211, 248, 136, 48, 211, 248, 208, 144, 64, 242,
-        2, 66, 32, 70, 216, 33, 184, 241, 4, 15, 8, 191, 2, 34, 36, 240, 86,
-        223, 32, 70, 7, 241, 17, 1, 34, 240, 21, 221, 0, 46, 0, 240, 10, 129,
-        0, 38, 79, 244, 122, 112, 230, 243, 97, 244, 184, 241, 4, 15, 32, 104,
-        12, 209, 50, 33, 92, 34, 234, 247, 85, 249, 35, 104, 27, 104, 211, 248,
-        136, 48, 211, 248, 32, 49, 202, 235, 3, 3, 11, 224, 6, 33, 12, 34, 234,
-        247, 72, 249, 35, 104, 27, 104, 211, 248, 136, 48, 211, 248, 208, 48,
-        201, 235, 3, 3, 186, 104, 147, 66, 3, 210, 123, 104, 1, 54, 158, 66,
-        215, 211, 40, 70, 128, 33, 0, 34, 6, 240, 150, 254, 32, 70, 216, 33,
-        0, 34, 36, 240, 27, 223, 16, 224, 216, 33, 0, 34, 36, 240, 22, 223,
-        3, 35, 0, 147, 32, 70, 2, 33, 16, 34, 0, 35, 35, 240, 56, 223, 40, 70,
-        128, 33, 0, 34, 6, 240, 127, 254, 32, 70, 4, 241, 252, 1, 34, 240, 200,
-        220, 0, 38, 189, 224, 74, 104, 64, 242, 217, 51, 15, 58, 154, 66, 7,
-        217, 128, 104, 73, 70, 1, 34, 230, 247, 61, 255, 111, 240, 28, 6, 175,
-        224, 128, 33, 1, 34, 40, 70, 6, 240, 101, 254, 32, 70, 255, 247, 100,
-        248, 184, 241, 1, 15, 40, 70, 3, 209, 65, 70, 7, 240, 174, 252, 2, 224,
-        1, 33, 7, 240, 173, 252, 186, 104, 98, 177, 32, 70, 220, 33, 146, 178,
-        36, 240, 218, 222, 122, 137, 32, 70, 222, 33, 36, 240, 213, 222, 64,
-        242, 1, 18, 0, 224, 1, 34, 32, 70, 216, 33, 36, 240, 205, 222, 123,
-        104, 79, 246, 252, 114, 219, 0, 124, 59, 32, 70, 218, 33, 26, 64, 36,
-        240, 195, 222, 46, 177, 79, 240, 0, 81, 32, 70, 10, 70, 35, 240, 214,
-        222, 35, 104, 27, 106, 24, 105, 9, 240, 229, 248, 48, 177, 35, 104,
-        148, 248, 77, 17, 27, 106, 24, 105, 9, 240, 223, 248, 32, 70, 254, 247,
-        2, 253, 79, 246, 255, 115, 1, 33, 0, 147, 32, 70, 74, 70, 11, 70, 1,
-        145, 254, 247, 230, 255, 0, 46, 91, 208, 79, 244, 122, 112, 230, 243,
-        180, 243, 216, 33, 32, 70, 36, 240, 234, 216, 16, 240, 1, 6, 244, 209,
-        32, 70, 255, 247, 10, 248, 50, 70, 32, 70, 79, 240, 0, 81, 35, 240,
-        166, 222, 32, 70, 254, 247, 223, 252, 40, 70, 1, 33, 7, 240, 81, 252,
-        50, 70, 40, 70, 128, 33, 6, 240, 246, 253, 31, 75, 2, 33, 160, 105,
-        219, 107, 152, 71, 1, 34, 1, 70, 160, 104, 230, 247, 188, 254, 48, 224,
-        216, 33, 36, 240, 196, 216, 195, 7, 31, 213, 32, 70, 254, 247, 229,
-        255, 32, 70, 220, 33, 1, 34, 36, 240, 104, 222, 32, 70, 222, 33, 0,
-        34, 36, 240, 99, 222, 32, 70, 216, 33, 64, 242, 1, 18, 36, 240, 93,
-        222, 32, 70, 254, 247, 176, 252, 79, 244, 122, 112, 230, 243, 110, 243,
-        216, 33, 32, 70, 36, 240, 164, 216, 198, 7, 245, 212, 40, 70, 1, 33,
-        7, 240, 24, 252, 40, 70, 128, 33, 0, 34, 6, 240, 189, 253, 65, 231,
-        111, 240, 22, 6, 48, 70, 189, 232, 252, 135, 0, 191, 208, 134, 135,
-        0, 45, 233, 240, 71, 154, 70, 131, 111, 4, 70, 95, 139, 13, 70, 22,
-        70, 208, 248, 136, 144, 15, 179, 7, 241, 8, 1, 36, 240, 129, 216, 128,
-        70, 216, 177, 35, 109, 216, 7, 17, 213, 99, 109, 25, 6, 14, 212, 227,
-        111, 154, 105, 146, 0, 2, 213, 218, 105, 208, 7, 4, 213, 219, 105, 217,
-        7, 1, 212, 90, 7, 2, 213, 227, 110, 155, 0, 70, 212, 32, 70, 7, 241,
-        144, 1, 36, 240, 101, 216, 4, 40, 63, 216, 163, 111, 154, 127, 1, 50,
-        154, 119, 163, 111, 154, 127, 5, 42, 2, 216, 179, 248, 28, 128, 3, 224,
-        5, 34, 154, 119, 79, 240, 0, 8, 163, 111, 32, 70, 163, 248, 28, 128,
-        7, 241, 248, 1, 165, 248, 0, 128, 36, 240, 74, 216, 217, 248, 32, 49,
-        170, 248, 0, 0, 152, 7, 26, 213, 163, 111, 185, 248, 194, 6, 154, 125,
-        128, 178, 79, 246, 255, 113, 42, 177, 136, 66, 16, 209, 0, 34, 154,
-        117, 163, 111, 1, 224, 136, 66, 1, 209, 218, 117, 8, 224, 218, 125,
-        1, 50, 210, 178, 4, 42, 218, 117, 2, 217, 163, 111, 1, 34, 154, 117,
-        163, 111, 0, 32, 155, 125, 51, 112, 189, 232, 240, 135, 163, 111, 0,
-        34, 154, 119, 202, 231, 240, 181, 8, 41, 135, 176, 4, 70, 13, 70, 0,
-        243, 238, 128, 25, 209, 3, 109, 219, 7, 17, 213, 67, 109, 29, 6, 14,
-        212, 195, 111, 154, 105, 144, 0, 2, 213, 218, 105, 209, 7, 4, 213, 219,
-        105, 218, 7, 1, 212, 91, 7, 2, 213, 227, 110, 157, 0, 6, 212, 101, 109,
-        21, 240, 128, 5, 2, 209, 10, 224, 9, 185, 8, 224, 1, 37, 163, 111, 91,
-        104, 2, 43, 3, 221, 35, 111, 152, 0, 64, 241, 203, 128, 0, 33, 3, 168,
-        10, 34, 225, 243, 69, 247, 163, 111, 0, 33, 25, 129, 148, 248, 172,
-        112, 47, 177, 212, 248, 136, 32, 210, 248, 32, 113, 7, 240, 1, 7, 189,
-        248, 12, 32, 0, 45, 79, 208, 66, 240, 16, 2, 173, 248, 12, 32, 90, 104,
-        2, 42, 34, 109, 18, 209, 18, 244, 128, 79, 189, 248, 14, 32, 8, 208,
-        66, 244, 128, 114, 173, 248, 14, 32, 48, 34, 218, 96, 32, 34, 26, 97,
-        61, 224, 34, 244, 128, 114, 173, 248, 14, 32, 56, 224, 5, 45, 1, 209,
-        8, 33, 8, 224, 3, 45, 1, 209, 136, 33, 4, 224, 4, 45, 12, 191, 79, 244,
-        132, 113, 20, 33, 25, 129, 209, 7, 21, 213, 98, 109, 18, 6, 18, 212,
-        226, 111, 145, 105, 142, 0, 2, 213, 209, 105, 200, 7, 4, 213, 210, 105,
-        209, 7, 1, 212, 82, 7, 6, 213, 226, 110, 150, 0, 3, 213, 26, 137, 66,
-        240, 64, 2, 12, 224, 90, 104, 4, 42, 6, 209, 189, 248, 16, 48, 67, 244,
-        0, 83, 173, 248, 16, 48, 8, 224, 26, 137, 66, 240, 1, 2, 26, 129, 3,
-        224, 34, 240, 16, 2, 173, 248, 12, 32, 163, 111, 29, 96, 148, 248, 172,
-        48, 27, 177, 23, 177, 32, 70, 254, 247, 166, 254, 2, 38, 189, 248, 12,
-        48, 32, 70, 0, 33, 16, 34, 0, 150, 35, 240, 79, 221, 189, 248, 14, 48,
-        32, 70, 1, 33, 79, 244, 128, 114, 0, 150, 35, 240, 70, 221, 189, 248,
-        16, 48, 32, 70, 49, 70, 79, 244, 0, 82, 0, 150, 35, 240, 61, 221, 32,
-        70, 34, 240, 74, 216, 148, 248, 172, 48, 27, 177, 23, 177, 32, 70, 254,
-        247, 95, 251, 212, 248, 148, 48, 41, 70, 88, 106, 8, 240, 56, 255, 32,
-        109, 16, 240, 1, 0, 45, 208, 101, 109, 21, 240, 128, 5, 40, 209, 227,
-        111, 216, 105, 16, 240, 4, 0, 36, 208, 224, 110, 16, 240, 0, 80, 32,
-        208, 35, 104, 79, 244, 112, 2, 27, 104, 64, 246, 116, 81, 211, 248,
-        216, 0, 19, 70, 236, 243, 57, 245, 35, 104, 64, 246, 100, 81, 26, 104,
-        163, 111, 210, 248, 216, 0, 27, 104, 79, 244, 112, 2, 27, 5, 236, 243,
-        44, 245, 40, 70, 6, 224, 111, 240, 1, 0, 3, 224, 111, 240, 2, 0, 0,
-        224, 0, 32, 7, 176, 240, 189, 0, 0, 45, 233, 240, 67, 135, 176, 4, 70,
-        208, 248, 136, 80, 6, 104, 0, 33, 12, 34, 2, 168, 225, 243, 108, 246,
-        0, 39, 79, 240, 255, 49, 101, 74, 13, 241, 24, 9, 32, 70, 73, 248, 4,
-        125, 35, 240, 209, 220, 32, 70, 34, 240, 224, 216, 32, 70, 36, 240,
-        37, 220, 79, 244, 0, 56, 32, 70, 254, 247, 177, 250, 205, 248, 0, 128,
-        4, 35, 36, 33, 48, 105, 74, 70, 35, 240, 176, 217, 58, 70, 57, 70, 224,
-        111, 236, 243, 221, 243, 86, 73, 32, 70, 34, 240, 243, 221, 32, 70,
-        254, 247, 210, 252, 2, 169, 32, 70, 34, 240, 118, 219, 128, 33, 8, 34,
-        32, 70, 36, 240, 143, 220, 10, 34, 92, 33, 32, 70, 36, 240, 138, 220,
-        32, 70, 212, 248, 32, 17, 34, 240, 15, 218, 74, 74, 32, 70, 74, 73,
-        35, 240, 154, 220, 79, 240, 0, 67, 197, 248, 136, 49, 79, 240, 0, 115,
-        197, 248, 140, 49, 79, 244, 128, 67, 197, 248, 40, 49, 79, 244, 128,
-        51, 107, 98, 1, 33, 32, 70, 35, 240, 125, 220, 224, 111, 236, 243, 76,
-        243, 164, 248, 18, 1, 165, 248, 168, 6, 22, 33, 32, 70, 180, 248, 72,
-        32, 36, 240, 96, 220, 192, 33, 32, 70, 180, 248, 108, 32, 36, 240, 90,
-        220, 194, 33, 32, 70, 180, 248, 110, 32, 36, 240, 84, 220, 24, 33, 32,
-        70, 2, 35, 4, 241, 164, 2, 205, 248, 0, 128, 35, 240, 163, 217, 2, 35,
-        32, 70, 28, 33, 4, 241, 166, 2, 205, 248, 0, 128, 35, 240, 154, 217,
-        150, 248, 64, 54, 19, 177, 134, 248, 64, 118, 7, 224, 205, 248, 0, 128,
-        48, 105, 36, 33, 74, 70, 4, 35, 35, 240, 140, 217, 32, 70, 68, 33, 180,
-        248, 168, 32, 36, 240, 46, 220, 32, 70, 70, 33, 180, 248, 170, 32, 36,
-        240, 40, 220, 181, 248, 136, 54, 27, 5, 27, 13, 165, 248, 136, 54, 1,
-        35, 165, 248, 156, 54, 0, 37, 181, 99, 99, 25, 88, 105, 16, 177, 22,
-        75, 91, 104, 152, 71, 4, 53, 24, 45, 246, 209, 19, 77, 96, 105, 171,
-        109, 152, 71, 107, 111, 96, 105, 152, 71, 0, 33, 32, 70, 36, 240, 55,
-        217, 32, 70, 254, 247, 146, 252, 163, 111, 32, 70, 89, 139, 79, 244,
-        128, 114, 204, 49, 36, 240, 254, 219, 79, 244, 216, 99, 196, 248, 40,
-        49, 48, 70, 34, 240, 83, 220, 7, 176, 189, 232, 240, 131, 4, 4, 0, 4,
-        4, 189, 3, 0, 0, 0, 2, 64, 0, 0, 6, 64, 208, 134, 135, 0, 115, 181,
-        27, 74, 4, 70, 81, 104, 16, 104, 107, 70, 3, 195, 0, 37, 29, 248, 5,
-        16, 32, 70, 34, 240, 59, 217, 0, 241, 18, 6, 49, 70, 32, 70, 35, 240,
-        41, 222, 1, 53, 2, 70, 49, 70, 32, 70, 36, 240, 209, 219, 8, 45, 236,
-        209, 32, 70, 34, 240, 174, 221, 168, 177, 163, 111, 34, 33, 32, 70,
-        29, 126, 35, 240, 23, 222, 79, 246, 63, 67, 3, 64, 1, 45, 20, 191, 128,
-        37, 64, 37, 32, 70, 34, 33, 67, 234, 5, 2, 2, 176, 189, 232, 112, 64,
-        36, 240, 181, 155, 2, 176, 112, 189, 0, 191, 170, 179, 3, 0, 45, 233,
-        248, 67, 144, 248, 9, 113, 4, 70, 14, 70, 145, 70, 5, 104, 23, 185,
-        57, 70, 34, 240, 60, 218, 168, 104, 247, 243, 61, 242, 6, 244, 64, 65,
-        161, 245, 64, 78, 222, 241, 0, 1, 65, 235, 14, 1, 128, 70, 32, 70, 36,
-        240, 243, 220, 212, 248, 148, 48, 49, 70, 88, 106, 6, 240, 132, 251,
-        212, 248, 148, 48, 164, 248, 188, 96, 88, 106, 6, 240, 197, 248, 32,
-        70, 255, 247, 183, 254, 32, 70, 254, 247, 98, 252, 1, 33, 196, 248,
-        240, 16, 185, 241, 0, 15, 3, 208, 32, 70, 10, 70, 35, 240, 12, 220,
-        35, 109, 217, 7, 7, 213, 148, 248, 88, 17, 40, 70, 1, 177, 1, 33, 64,
-        34, 1, 240, 34, 248, 32, 70, 0, 33, 36, 240, 151, 216, 32, 70, 49, 70,
-        0, 34, 33, 240, 24, 222, 168, 104, 65, 70, 247, 243, 4, 242, 212, 248,
-        244, 48, 67, 240, 4, 3, 196, 248, 244, 48, 31, 185, 32, 70, 2, 33, 34,
-        240, 237, 217, 0, 35, 132, 248, 55, 49, 189, 232, 248, 131, 55, 181,
-        177, 245, 122, 127, 4, 70, 1, 145, 21, 70, 9, 219, 131, 111, 91, 106,
-        243, 177, 161, 245, 122, 113, 6, 41, 29, 220, 35, 248, 17, 32, 21, 224,
-        144, 248, 172, 48, 67, 185, 130, 111, 18, 106, 138, 177, 117, 41, 18,
-        220, 34, 248, 17, 80, 24, 70, 19, 224, 1, 169, 254, 247, 178, 248, 104,
-        177, 32, 70, 189, 248, 4, 16, 170, 178, 36, 240, 41, 219, 0, 32, 7,
-        224, 79, 240, 255, 48, 4, 224, 111, 240, 20, 0, 1, 224, 111, 240, 1,
-        0, 62, 189, 19, 181, 177, 245, 122, 127, 4, 70, 1, 145, 6, 219, 131,
-        111, 91, 106, 195, 177, 161, 245, 122, 113, 6, 41, 6, 224, 144, 248,
-        172, 48, 59, 185, 131, 111, 27, 106, 139, 177, 117, 41, 15, 220, 51,
-        248, 17, 0, 14, 224, 1, 169, 254, 247, 133, 248, 64, 177, 32, 70, 189,
-        248, 4, 16, 35, 240, 79, 221, 4, 224, 79, 240, 255, 48, 1, 224, 64,
-        246, 173, 48, 28, 189, 56, 181, 4, 70, 144, 248, 172, 0, 0, 40, 36,
-        208, 35, 104, 24, 105, 49, 240, 64, 223, 5, 70, 16, 177, 0, 35, 227,
-        101, 13, 224, 35, 104, 152, 104, 247, 243, 127, 241, 32, 70, 41, 70,
-        34, 240, 119, 217, 148, 248, 8, 49, 19, 185, 32, 70, 33, 240, 171, 222,
-        32, 70, 0, 33, 254, 247, 167, 248, 32, 70, 34, 240, 184, 221, 212, 248,
-        148, 48, 88, 106, 189, 232, 56, 64, 6, 240, 127, 184, 56, 189, 45, 233,
-        240, 65, 196, 111, 23, 70, 8, 34, 6, 70, 13, 70, 152, 70, 64, 246, 116,
-        81, 19, 70, 32, 70, 236, 243, 14, 243, 32, 70, 64, 246, 100, 81, 8,
-        34, 37, 177, 21, 244, 64, 79, 1, 209, 19, 70, 0, 224, 0, 35, 236, 243,
-        1, 243, 51, 109, 216, 7, 93, 213, 115, 109, 25, 6, 90, 212, 243, 111,
-        154, 105, 146, 0, 2, 213, 218, 105, 208, 7, 4, 213, 219, 105, 217, 7,
-        1, 212, 90, 7, 78, 213, 243, 110, 155, 0, 75, 213, 0, 47, 73, 209, 184,
-        241, 0, 15, 70, 209, 0, 45, 55, 208, 21, 244, 64, 66, 99, 105, 38, 209,
-        34, 43, 32, 73, 204, 191, 12, 35, 0, 35, 234, 178, 216, 191, 15, 33,
-        32, 70, 154, 64, 5, 244, 96, 85, 1, 35, 236, 243, 46, 242, 181, 245,
-        192, 95, 99, 105, 9, 209, 24, 73, 34, 43, 32, 70, 216, 191, 112, 33,
-        204, 191, 79, 244, 32, 98, 80, 34, 30, 224, 19, 73, 34, 43, 32, 70,
-        216, 191, 112, 33, 204, 191, 79, 244, 0, 114, 16, 34, 20, 224, 178,
-        245, 64, 79, 9, 209, 34, 43, 2, 220, 15, 33, 10, 70, 2, 224, 9, 73,
-        79, 244, 112, 66, 32, 70, 7, 224, 97, 105, 6, 75, 32, 70, 34, 41, 204,
-        191, 25, 70, 15, 33, 0, 34, 1, 35, 189, 232, 240, 65, 236, 243, 252,
-        177, 189, 232, 240, 129, 0, 240, 85, 85, 0, 14, 85, 85, 56, 181, 3,
-        109, 4, 70, 218, 7, 116, 213, 67, 109, 27, 6, 113, 212, 195, 111, 154,
-        105, 144, 0, 2, 213, 218, 105, 209, 7, 4, 213, 219, 105, 218, 7, 1,
-        212, 88, 7, 101, 213, 227, 110, 153, 0, 98, 213, 212, 248, 136, 48,
-        79, 244, 150, 117, 179, 248, 180, 38, 146, 178, 66, 240, 3, 2, 163,
-        248, 180, 38, 212, 248, 136, 32, 178, 248, 184, 54, 35, 240, 192, 3,
-        27, 4, 27, 12, 162, 248, 184, 54, 35, 109, 218, 7, 25, 213, 99, 109,
-        27, 6, 22, 212, 227, 111, 219, 105, 88, 7, 18, 213, 227, 110, 153, 0,
-        15, 213, 212, 248, 136, 48, 1, 33, 163, 248, 240, 22, 212, 248, 136,
-        48, 179, 248, 242, 38, 146, 178, 19, 10, 3, 240, 15, 3, 2, 240, 63,
-        2, 19, 224, 212, 248, 136, 48, 0, 34, 163, 248, 240, 38, 212, 248, 136,
-        48, 1, 33, 179, 248, 242, 38, 163, 248, 240, 22, 212, 248, 136, 48,
-        194, 243, 5, 18, 179, 248, 242, 54, 195, 243, 3, 19, 4, 42, 5, 209,
-        35, 177, 100, 32, 229, 243, 253, 246, 1, 61, 198, 209, 79, 244, 251,
-        117, 4, 224, 1, 61, 8, 208, 10, 32, 229, 243, 243, 246, 212, 248, 136,
-        48, 179, 248, 182, 38, 210, 7, 244, 212, 179, 248, 184, 38, 146, 178,
-        66, 240, 192, 2, 163, 248, 184, 38, 56, 189, 0, 0, 3, 105, 0, 34, 131,
-        248, 77, 33, 202, 178, 17, 240, 64, 113, 11, 209, 11, 72, 2, 240, 127,
-        1, 65, 86, 0, 41, 15, 218, 47, 42, 13, 217, 1, 34, 131, 248, 77, 33,
-        112, 71, 177, 241, 128, 127, 6, 209, 2, 240, 15, 2, 2, 42, 2, 217, 1,
-        34, 131, 248, 77, 33, 112, 71, 0, 191, 224, 248, 135, 0, 48, 181, 135,
-        176, 4, 70, 13, 70, 3, 168, 0, 33, 10, 34, 225, 243, 75, 243, 148, 248,
-        172, 48, 51, 177, 212, 248, 136, 32, 210, 248, 32, 33, 2, 240, 1, 2,
-        0, 224, 26, 70, 189, 248, 12, 16, 1, 45, 12, 191, 65, 240, 2, 1, 33,
-        240, 2, 1, 173, 248, 12, 16, 155, 177, 146, 177, 32, 70, 254, 247, 255,
-        250, 2, 34, 32, 70, 189, 248, 12, 48, 0, 33, 0, 146, 35, 240, 169, 217,
-        148, 248, 172, 0, 48, 177, 32, 70, 253, 247, 207, 255, 0, 32, 1, 224,
-        79, 240, 255, 48, 7, 176, 48, 189, 208, 248, 40, 49, 112, 181, 6, 70,
-        88, 104, 230, 243, 34, 241, 4, 70, 0, 40, 92, 208, 192, 32, 230, 243,
-        28, 241, 224, 100, 0, 40, 86, 208, 80, 32, 230, 243, 22, 241, 196, 248,
-        248, 0, 0, 40, 79, 208, 244, 32, 230, 243, 15, 241, 196, 248, 252, 0,
-        0, 40, 72, 208, 4, 32, 230, 243, 8, 241, 196, 248, 108, 3, 0, 40, 65,
-        208, 84, 32, 230, 243, 1, 241, 5, 70, 196, 248, 0, 1, 208, 179, 32,
-        32, 230, 243, 250, 240, 40, 96, 168, 179, 212, 248, 0, 81, 8, 35, 235,
-        129, 107, 135, 16, 32, 230, 243, 240, 240, 232, 98, 88, 179, 79, 244,
-        146, 112, 230, 243, 234, 240, 196, 248, 244, 0, 32, 179, 79, 244, 146,
-        112, 230, 243, 227, 240, 196, 248, 240, 0, 232, 177, 120, 32, 230, 243,
-        221, 240, 196, 248, 4, 1, 184, 177, 44, 32, 230, 243, 215, 240, 196,
-        248, 68, 3, 136, 177, 32, 32, 230, 243, 209, 240, 196, 248, 88, 3, 88,
-        177, 32, 32, 230, 243, 203, 240, 196, 248, 92, 3, 40, 177, 20, 32, 230,
-        243, 197, 240, 196, 248, 112, 3, 32, 185, 33, 70, 48, 70, 36, 240, 0,
-        222, 0, 36, 32, 70, 112, 189, 139, 121, 43, 177, 144, 248, 114, 34,
-        58, 185, 144, 248, 115, 34, 34, 185, 1, 34, 74, 113, 35, 177, 37, 240,
-        194, 157, 79, 240, 255, 48, 112, 71, 24, 70, 112, 71, 16, 181, 0, 50,
-        11, 124, 24, 191, 1, 34, 154, 66, 12, 70, 10, 116, 3, 208, 3, 33, 226,
-        104, 235, 247, 221, 250, 163, 121, 123, 185, 35, 124, 59, 185, 212,
-        248, 204, 48, 19, 240, 24, 15, 2, 209, 67, 240, 96, 3, 3, 224, 212,
-        248, 204, 48, 35, 240, 96, 3, 196, 248, 204, 48, 0, 32, 16, 189, 7,
-        41, 4, 217, 111, 240, 28, 3, 19, 96, 0, 32, 112, 71, 208, 248, 104,
-        50, 83, 248, 33, 0, 0, 40, 12, 191, 111, 240, 29, 3, 0, 35, 19, 96,
-        112, 71, 208, 248, 108, 2, 112, 71, 9, 185, 255, 247, 250, 191, 11,
-        121, 1, 43, 2, 208, 2, 43, 5, 209, 1, 224, 8, 105, 112, 71, 11, 105,
-        24, 105, 112, 71, 0, 32, 112, 71, 112, 181, 4, 70, 8, 70, 13, 70, 228,
-        247, 55, 248, 0, 187, 43, 120, 19, 240, 1, 3, 29, 209, 212, 248, 104,
-        34, 208, 88, 152, 177, 105, 136, 176, 248, 196, 64, 176, 248, 194, 96,
-        76, 64, 41, 136, 113, 64, 12, 67, 176, 248, 198, 96, 169, 136, 113,
-        64, 33, 67, 137, 178, 25, 185, 208, 248, 204, 16, 9, 6, 5, 213, 4, 51,
-        32, 43, 230, 209, 0, 32, 112, 189, 0, 32, 112, 189, 112, 181, 4, 70,
-        8, 70, 13, 70, 228, 247, 13, 248, 224, 185, 43, 120, 19, 240, 1, 3,
-        25, 209, 212, 248, 104, 34, 208, 88, 120, 177, 105, 136, 176, 248, 190,
-        64, 176, 248, 188, 96, 76, 64, 41, 136, 113, 64, 12, 67, 176, 248, 192,
-        96, 169, 136, 113, 64, 33, 67, 137, 178, 41, 177, 4, 51, 32, 43, 234,
-        209, 0, 32, 112, 189, 0, 32, 112, 189, 248, 181, 4, 70, 8, 70, 13, 70,
-        227, 247, 231, 255, 232, 185, 43, 120, 19, 240, 1, 3, 26, 209, 212,
-        248, 104, 18, 200, 88, 128, 177, 130, 121, 114, 185, 208, 248, 240,
-        32, 110, 136, 84, 136, 47, 136, 102, 64, 20, 136, 146, 136, 124, 64,
-        52, 67, 174, 136, 114, 64, 34, 67, 146, 178, 42, 177, 4, 51, 32, 43,
-        233, 209, 0, 32, 248, 189, 0, 32, 248, 189, 45, 233, 240, 65, 128, 70,
-        15, 70, 22, 70, 0, 37, 216, 248, 104, 50, 92, 89, 92, 177, 0, 46, 9,
-        221, 35, 126, 158, 66, 6, 209, 56, 70, 4, 241, 25, 1, 50, 70, 223, 247,
-        96, 253, 24, 177, 4, 53, 32, 45, 236, 209, 0, 36, 32, 70, 189, 232,
-        240, 129, 16, 181, 208, 248, 104, 34, 0, 35, 208, 88, 24, 177, 176,
-        248, 26, 65, 140, 66, 3, 208, 4, 51, 32, 43, 246, 209, 0, 32, 16, 189,
-        209, 248, 204, 48, 112, 181, 67, 240, 96, 3, 26, 3, 193, 248, 204, 48,
-        68, 191, 35, 240, 32, 3, 193, 248, 204, 48, 3, 104, 209, 248, 68, 99,
-        219, 105, 5, 70, 27, 105, 12, 70, 193, 248, 128, 48, 1, 35, 139, 113,
-        11, 116, 0, 35, 129, 248, 80, 51, 38, 177, 24, 32, 229, 243, 160, 247,
-        176, 97, 248, 177, 40, 70, 33, 70, 36, 240, 44, 223, 212, 248, 32, 51,
-        107, 185, 212, 248, 204, 48, 152, 0, 9, 213, 200, 32, 229, 243, 144,
-        247, 196, 248, 32, 3, 112, 177, 16, 33, 128, 34, 226, 243, 145, 241,
-        32, 70, 2, 33, 1, 34, 37, 240, 140, 218, 40, 70, 33, 70, 189, 232, 112,
-        64, 36, 240, 30, 156, 111, 240, 26, 0, 112, 189, 0, 0, 45, 233, 240,
-        71, 209, 248, 252, 96, 0, 36, 209, 248, 248, 144, 128, 70, 209, 248,
-        4, 113, 13, 70, 140, 113, 244, 34, 33, 70, 48, 70, 225, 243, 93, 241,
-        33, 70, 80, 34, 72, 70, 225, 243, 88, 241, 33, 70, 120, 34, 56, 70,
-        225, 243, 83, 241, 8, 35, 51, 96, 70, 35, 51, 99, 120, 35, 166, 248,
-        90, 48, 3, 35, 134, 248, 140, 48, 7, 35, 134, 248, 191, 48, 6, 35, 134,
-        248, 136, 64, 134, 248, 183, 48, 216, 248, 0, 48, 79, 240, 10, 10, 219,
-        105, 116, 98, 179, 248, 216, 48, 198, 248, 44, 160, 166, 248, 152, 48,
-        191, 35, 134, 248, 209, 48, 216, 248, 8, 0, 58, 73, 42, 70, 35, 70,
-        246, 243, 21, 246, 201, 248, 0, 0, 0, 40, 99, 208, 79, 244, 122, 115,
-        137, 248, 28, 64, 201, 248, 20, 160, 169, 248, 34, 160, 201, 248, 24,
-        48, 228, 32, 229, 243, 38, 247, 197, 248, 8, 1, 0, 40, 78, 208, 128,
-        248, 224, 64, 216, 248, 8, 0, 44, 73, 42, 70, 35, 70, 246, 243, 247,
-        245, 184, 97, 0, 40, 70, 208, 216, 248, 8, 0, 40, 73, 42, 70, 35, 70,
-        246, 243, 237, 245, 56, 97, 0, 40, 60, 208, 216, 248, 8, 0, 36, 73,
-        42, 70, 35, 70, 246, 243, 227, 245, 198, 248, 196, 0, 0, 40, 49, 208,
-        216, 248, 208, 5, 49, 240, 53, 216, 248, 99, 0, 40, 42, 208, 216, 248,
-        208, 5, 49, 240, 46, 216, 184, 99, 0, 40, 39, 208, 200, 35, 187, 98,
-        251, 98, 1, 35, 135, 248, 111, 48, 64, 70, 41, 70, 167, 248, 114, 64,
-        135, 248, 110, 64, 135, 248, 112, 64, 36, 240, 117, 222, 213, 248, 68,
-        51, 15, 34, 131, 248, 36, 32, 40, 70, 2, 33, 34, 70, 37, 240, 225, 217,
-        64, 70, 41, 70, 189, 232, 240, 71, 36, 240, 115, 155, 111, 240, 26,
-        0, 189, 232, 240, 135, 111, 240, 21, 0, 189, 232, 240, 135, 111, 240,
-        21, 0, 189, 232, 240, 135, 0, 191, 245, 0, 2, 0, 145, 66, 130, 0, 17,
-        200, 130, 0, 165, 33, 132, 0, 139, 121, 11, 177, 255, 247, 250, 190,
-        255, 247, 62, 191, 45, 233, 240, 67, 4, 104, 137, 176, 0, 35, 32, 70,
-        21, 153, 221, 248, 68, 144, 23, 70, 221, 248, 64, 128, 18, 157, 6, 147,
-        7, 147, 255, 247, 52, 254, 185, 241, 3, 15, 6, 70, 13, 217, 4, 34, 6,
-        168, 65, 70, 223, 247, 58, 252, 185, 241, 7, 15, 5, 217, 7, 168, 8,
-        241, 4, 1, 4, 34, 223, 247, 49, 252, 23, 177, 3, 47, 78, 209, 62, 224,
-        19, 155, 15, 43, 77, 217, 16, 34, 65, 70, 2, 168, 223, 247, 37, 252,
-        32, 70, 37, 240, 178, 216, 6, 70, 1, 48, 69, 208, 3, 155, 32, 70, 3,
-        240, 1, 2, 153, 7, 84, 191, 59, 70, 4, 171, 0, 146, 49, 70, 0, 34, 36,
-        240, 60, 222, 7, 70, 0, 40, 57, 208, 32, 70, 57, 70, 255, 247, 177,
-        255, 128, 70, 16, 177, 32, 70, 57, 70, 34, 224, 117, 179, 46, 118, 251,
-        104, 58, 104, 153, 104, 144, 104, 246, 243, 54, 245, 15, 34, 1, 70,
-        5, 241, 8, 0, 225, 243, 48, 241, 133, 248, 23, 128, 168, 28, 7, 241,
-        194, 1, 6, 34, 223, 247, 240, 251, 64, 70, 24, 224, 150, 249, 68, 0,
-        168, 177, 115, 121, 27, 177, 32, 70, 49, 70, 36, 240, 171, 222, 32,
-        70, 49, 70, 37, 240, 13, 216, 0, 32, 9, 224, 111, 240, 22, 0, 6, 224,
-        111, 240, 13, 0, 3, 224, 111, 240, 21, 0, 0, 224, 40, 70, 9, 176, 189,
-        232, 240, 131, 45, 233, 248, 79, 21, 70, 0, 34, 42, 96, 12, 70, 155,
-        70, 26, 96, 128, 70, 79, 240, 64, 10, 145, 70, 23, 70, 216, 248, 32,
-        97, 0, 46, 54, 208, 22, 240, 64, 127, 243, 178, 31, 208, 163, 241, 87,
-        2, 1, 42, 3, 217, 163, 241, 99, 1, 3, 41, 12, 216, 166, 50, 4, 235,
-        130, 2, 81, 104, 216, 248, 36, 49, 203, 24, 187, 66, 83, 96, 24, 217,
-        46, 96, 31, 70, 21, 224, 23, 43, 27, 216, 108, 51, 4, 235, 131, 3, 89,
-        104, 216, 248, 36, 33, 138, 24, 90, 96, 6, 224, 84, 248, 35, 16, 216,
-        248, 36, 33, 138, 24, 68, 248, 35, 32, 186, 66, 132, 191, 46, 96, 23,
-        70, 48, 70, 17, 240, 67, 253, 72, 69, 132, 191, 203, 248, 0, 96, 129,
-        70, 186, 241, 1, 10, 8, 241, 8, 8, 191, 209, 189, 232, 248, 143, 240,
-        181, 144, 248, 155, 51, 35, 179, 208, 248, 156, 67, 12, 177, 32, 104,
-        200, 185, 19, 241, 255, 48, 24, 191, 1, 32, 240, 189, 37, 29, 175, 90,
-        78, 136, 173, 24, 126, 64, 111, 136, 141, 136, 6, 50, 125, 64, 46, 67,
-        6, 37, 5, 251, 3, 69, 15, 136, 173, 136, 125, 64, 53, 67, 173, 178,
-        77, 177, 1, 51, 1, 224, 2, 34, 0, 35, 131, 66, 230, 219, 0, 32, 240,
-        189, 24, 70, 240, 189, 1, 32, 240, 189, 0, 35, 131, 135, 0, 32, 112,
-        71, 112, 71, 0, 32, 112, 71, 0, 32, 112, 71, 0, 32, 112, 71, 0, 40,
-        12, 191, 79, 240, 255, 48, 0, 32, 112, 71, 56, 181, 4, 108, 13, 70,
-        8, 89, 24, 177, 229, 247, 255, 253, 0, 35, 43, 81, 56, 189, 112, 181,
-        145, 248, 111, 32, 3, 70, 140, 143, 146, 177, 208, 248, 108, 82, 213,
-        248, 0, 97, 85, 178, 54, 105, 174, 66, 10, 218, 145, 248, 112, 80, 61,
-        185, 1, 35, 128, 34, 129, 248, 112, 48, 4, 241, 206, 1, 19, 70, 17,
-        224, 211, 248, 108, 2, 82, 178, 208, 248, 0, 1, 0, 105, 144, 66, 13,
-        219, 145, 248, 112, 32, 82, 177, 0, 34, 129, 248, 112, 32, 24, 70, 4,
-        241, 206, 1, 128, 35, 189, 232, 112, 64, 13, 240, 244, 157, 112, 189,
-        112, 181, 4, 70, 0, 105, 254, 247, 231, 255, 5, 70, 32, 105, 212, 248,
-        164, 97, 33, 240, 144, 223, 48, 97, 32, 105, 212, 248, 164, 97, 33,
-        240, 58, 223, 48, 102, 40, 70, 112, 189, 45, 233, 240, 65, 4, 70, 22,
-        70, 31, 70, 13, 70, 0, 41, 0, 240, 131, 128, 248, 247, 169, 254, 212,
-        248, 164, 49, 128, 70, 147, 248, 102, 16, 147, 248, 108, 32, 0, 41,
-        110, 209, 0, 42, 108, 209, 153, 136, 66, 242, 14, 114, 1, 57, 137, 178,
-        145, 66, 45, 216, 32, 105, 64, 242, 234, 49, 255, 247, 101, 250, 144,
-        177, 32, 105, 79, 244, 123, 113, 255, 247, 95, 250, 212, 248, 164, 49,
-        154, 136, 65, 246, 75, 83, 154, 66, 4, 217, 32, 105, 64, 242, 237, 49,
-        255, 247, 83, 250, 197, 178, 0, 224, 5, 70, 32, 105, 64, 242, 235, 49,
-        255, 247, 75, 250, 1, 35, 48, 177, 59, 112, 212, 248, 164, 49, 0, 34,
-        131, 248, 110, 32, 28, 224, 56, 112, 212, 248, 164, 33, 130, 248, 110,
-        48, 22, 224, 91, 141, 19, 240, 2, 3, 6, 208, 32, 105, 64, 242, 238,
-        49, 255, 247, 51, 250, 197, 178, 11, 224, 51, 112, 59, 112, 212, 248,
-        164, 33, 1, 35, 130, 248, 108, 48, 212, 248, 164, 33, 130, 248, 110,
-        48, 0, 224, 61, 185, 0, 35, 51, 112, 212, 248, 164, 49, 1, 34, 131,
-        248, 108, 32, 26, 224, 212, 248, 164, 49, 147, 248, 109, 32, 2, 42,
-        7, 217, 1, 34, 131, 248, 102, 32, 212, 248, 164, 49, 131, 248, 103,
-        80, 1, 224, 0, 35, 51, 112, 212, 248, 164, 49, 147, 248, 109, 32, 1,
-        50, 131, 248, 109, 32, 2, 224, 10, 177, 0, 35, 51, 112, 212, 248, 164,
-        49, 195, 248, 104, 128, 189, 232, 240, 129, 208, 248, 164, 49, 147,
-        248, 102, 32, 42, 185, 219, 110, 19, 240, 255, 31, 13, 209, 189, 232,
-        240, 129, 2, 34, 19, 70, 17, 240, 180, 218, 212, 248, 164, 49, 131,
-        248, 102, 80, 212, 248, 164, 49, 131, 248, 103, 80, 212, 248, 164, 33,
-        0, 35, 130, 248, 108, 48, 212, 248, 164, 33, 130, 248, 110, 48, 212,
-        248, 164, 33, 130, 248, 109, 48, 189, 232, 240, 129, 112, 181, 4, 70,
-        0, 105, 33, 240, 162, 222, 5, 70, 32, 105, 212, 248, 164, 97, 33, 240,
-        122, 222, 48, 102, 40, 70, 112, 189, 208, 248, 164, 49, 147, 248, 102,
-        0, 8, 177, 147, 248, 103, 0, 112, 71, 11, 70, 208, 248, 164, 17, 16,
-        181, 0, 41, 49, 208, 82, 177, 90, 28, 1, 209, 0, 34, 4, 224, 11, 177,
-        26, 7, 44, 208, 11, 131, 1, 34, 129, 248, 44, 32, 145, 248, 44, 32,
-        194, 185, 179, 241, 255, 63, 20, 209, 4, 104, 212, 248, 128, 48, 19,
-        244, 128, 3, 14, 208, 3, 105, 155, 111, 27, 126, 3, 43, 8, 209, 212,
-        248, 132, 48, 3, 244, 0, 3, 0, 43, 12, 191, 1, 35, 2, 35, 0, 224, 19,
-        70, 11, 131, 66, 126, 106, 177, 0, 105, 64, 242, 242, 97, 154, 178,
-        35, 240, 167, 220, 0, 32, 16, 189, 79, 240, 255, 48, 16, 189, 111, 240,
-        1, 0, 16, 189, 16, 70, 16, 189, 0, 0, 247, 181, 4, 70, 37, 240, 206,
-        219, 2, 40, 125, 221, 32, 70, 37, 240, 103, 219, 0, 40, 120, 208, 32,
-        105, 33, 240, 32, 222, 35, 104, 7, 70, 218, 110, 212, 248, 108, 82,
-        0, 42, 110, 209, 27, 126, 0, 43, 107, 208, 148, 248, 216, 49, 35, 177,
-        32, 70, 8, 240, 84, 216, 0, 40, 99, 209, 212, 248, 164, 49, 222, 121,
-        78, 177, 212, 248, 108, 50, 211, 248, 0, 49, 27, 105, 91, 66, 179, 66,
-        204, 191, 8, 38, 0, 38, 7, 240, 4, 3, 0, 43, 24, 191, 8, 38, 171, 121,
-        23, 240, 16, 7, 24, 191, 79, 244, 0, 119, 43, 187, 213, 248, 244, 48,
-        147, 249, 52, 48, 3, 179, 43, 122, 243, 177, 43, 124, 35, 177, 5, 241,
-        188, 0, 227, 247, 229, 251, 184, 185, 148, 248, 113, 50, 1, 43, 19,
-        209, 148, 248, 114, 50, 35, 177, 212, 248, 8, 5, 22, 240, 223, 221,
-        88, 185, 181, 248, 90, 48, 163, 177, 42, 109, 64, 242, 55, 19, 19, 64,
-        123, 177, 149, 248, 92, 48, 235, 177, 11, 224, 148, 248, 113, 50, 99,
-        177, 212, 248, 112, 34, 16, 75, 19, 64, 179, 245, 128, 127, 17, 209,
-        43, 124, 123, 177, 71, 234, 6, 3, 155, 178, 12, 224, 148, 248, 114,
-        50, 75, 177, 212, 248, 8, 5, 22, 240, 187, 221, 0, 40, 20, 191, 51,
-        70, 0, 35, 0, 224, 51, 70, 2, 33, 32, 70, 79, 244, 2, 114, 0, 145, 8,
-        240, 76, 218, 254, 189, 0, 191, 0, 255, 255, 0, 115, 181, 4, 104, 5,
-        70, 32, 70, 37, 240, 226, 218, 212, 248, 164, 49, 6, 70, 147, 248, 62,
-        32, 1, 50, 131, 248, 62, 32, 0, 40, 64, 208, 35, 106, 27, 104, 2, 43,
-        60, 209, 1, 40, 3, 209, 32, 70, 41, 70, 255, 247, 17, 254, 32, 70, 37,
-        240, 229, 219, 212, 248, 164, 49, 218, 122, 114, 177, 212, 248, 108,
-        18, 209, 248, 0, 17, 9, 105, 73, 66, 145, 66, 6, 221, 114, 30, 1, 42,
-        30, 217, 94, 115, 32, 70, 1, 33, 14, 224, 154, 122, 122, 177, 212, 248,
-        108, 18, 209, 248, 0, 17, 9, 105, 73, 66, 145, 66, 7, 218, 4, 46, 14,
-        208, 94, 115, 32, 70, 4, 33, 255, 247, 26, 254, 8, 224, 89, 123, 49,
-        177, 32, 70, 255, 247, 20, 254, 212, 248, 164, 49, 0, 34, 90, 115, 32,
-        70, 212, 248, 108, 18, 1, 34, 255, 247, 39, 255, 35, 106, 27, 104, 2,
-        43, 80, 209, 1, 35, 141, 248, 6, 48, 141, 248, 7, 48, 94, 179, 4, 46,
-        41, 208, 35, 104, 147, 248, 66, 32, 42, 179, 147, 248, 67, 32, 18, 179,
-        212, 248, 104, 33, 10, 177, 146, 121, 234, 185, 147, 248, 63, 48, 211,
-        177, 212, 248, 164, 49, 66, 242, 14, 114, 153, 136, 1, 57, 137, 178,
-        145, 66, 4, 217, 91, 141, 19, 185, 149, 248, 93, 16, 41, 177, 1, 62,
-        1, 46, 9, 216, 32, 70, 1, 33, 0, 224, 32, 70, 13, 241, 7, 2, 13, 241,
-        6, 3, 255, 247, 232, 253, 157, 248, 7, 16, 157, 248, 6, 48, 161, 241,
-        1, 0, 65, 66, 163, 241, 1, 14, 65, 235, 0, 1, 222, 241, 0, 3, 67, 235,
-        14, 3, 2, 34, 141, 248, 6, 48, 32, 70, 19, 70, 141, 248, 7, 16, 17,
-        240, 31, 217, 32, 70, 157, 248, 6, 16, 2, 34, 1, 35, 17, 240, 24, 217,
-        35, 106, 40, 70, 25, 104, 38, 240, 73, 216, 0, 32, 124, 189, 56, 181,
-        67, 126, 208, 248, 164, 65, 171, 177, 4, 241, 42, 3, 0, 105, 33, 29,
-        162, 29, 254, 247, 29, 253, 163, 121, 99, 185, 148, 248, 56, 80, 77,
-        185, 4, 241, 45, 0, 41, 70, 8, 34, 224, 243, 250, 244, 132, 248, 56,
-        80, 132, 248, 57, 80, 56, 189, 248, 181, 67, 126, 4, 70, 13, 70, 23,
-        70, 187, 177, 146, 33, 0, 105, 34, 240, 147, 221, 70, 0, 182, 178, 164,
-        54, 32, 105, 49, 70, 34, 240, 140, 221, 21, 177, 64, 234, 7, 2, 1, 224,
-        32, 234, 7, 2, 32, 105, 146, 178, 49, 70, 189, 232, 248, 64, 35, 240,
-        45, 155, 248, 189, 56, 181, 131, 143, 4, 70, 5, 104, 43, 185, 40, 105,
-        146, 33, 34, 240, 117, 221, 64, 0, 160, 135, 40, 70, 1, 33, 79, 244,
-        128, 114, 255, 247, 208, 255, 0, 32, 56, 189, 1, 41, 0, 105, 24, 191,
-        0, 33, 255, 247, 105, 185, 2, 104, 1, 70, 210, 248, 112, 49, 210, 248,
-        196, 6, 3, 245, 198, 114, 3, 245, 206, 115, 23, 240, 174, 186, 111,
-        240, 22, 0, 112, 71, 56, 181, 5, 70, 0, 36, 6, 72, 41, 70, 0, 25, 224,
-        243, 50, 245, 32, 177, 4, 52, 40, 44, 246, 209, 0, 32, 56, 189, 1, 32,
-        56, 189, 87, 224, 3, 0, 67, 104, 112, 181, 4, 70, 211, 177, 131, 105,
-        75, 185, 18, 224, 163, 105, 91, 25, 88, 104, 8, 177, 229, 247, 248,
-        250, 1, 54, 12, 53, 1, 224, 0, 37, 46, 70, 35, 106, 158, 66, 241, 211,
-        160, 105, 229, 247, 237, 250, 0, 35, 163, 97, 96, 104, 229, 247, 232,
-        250, 0, 35, 99, 96, 112, 189, 45, 233, 247, 79, 30, 70, 3, 104, 4, 70,
-        1, 147, 139, 7, 139, 70, 21, 70, 102, 213, 255, 247, 212, 255, 19, 46,
-        64, 242, 228, 128, 107, 104, 158, 66, 192, 240, 224, 128, 40, 70, 114,
-        73, 4, 34, 222, 247, 249, 255, 7, 70, 0, 40, 64, 240, 219, 128, 105,
-        104, 5, 241, 12, 0, 12, 57, 79, 240, 255, 50, 225, 243, 220, 242, 171,
-        104, 192, 67, 131, 66, 64, 240, 198, 128, 104, 104, 160, 96, 229, 247,
-        181, 250, 96, 96, 0, 40, 0, 240, 192, 128, 41, 70, 162, 104, 222, 247,
-        239, 255, 99, 104, 12, 32, 27, 105, 88, 67, 224, 97, 229, 247, 166,
-        250, 160, 97, 0, 40, 0, 240, 177, 128, 163, 104, 39, 98, 184, 70, 170,
-        70, 50, 70, 30, 224, 20, 32, 0, 251, 8, 17, 209, 248, 24, 144, 153,
-        69, 192, 240, 169, 128, 163, 105, 205, 105, 73, 105, 222, 25, 217, 81,
-        181, 96, 40, 70, 0, 146, 229, 247, 138, 250, 12, 55, 112, 96, 0, 154,
-        0, 40, 0, 240, 147, 128, 33, 106, 5, 235, 9, 3, 1, 49, 33, 98, 8, 241,
-        1, 8, 97, 104, 8, 105, 128, 69, 220, 211, 0, 35, 227, 96, 35, 97, 79,
-        240, 255, 51, 85, 70, 22, 70, 99, 97, 99, 104, 0, 43, 126, 208, 227,
-        104, 243, 24, 152, 70, 69, 224, 33, 105, 35, 106, 153, 66, 59, 210,
-        103, 104, 20, 35, 3, 251, 1, 119, 224, 104, 186, 105, 130, 66, 4, 217,
-        23, 26, 190, 66, 56, 191, 55, 70, 47, 224, 212, 248, 24, 224, 79, 240,
-        12, 12, 255, 105, 12, 251, 1, 225, 2, 235, 7, 10, 208, 69, 52, 191,
-        193, 70, 209, 70, 192, 235, 9, 7, 130, 26, 72, 104, 41, 70, 128, 24,
-        58, 70, 0, 147, 222, 247, 132, 255, 40, 70, 57, 70, 98, 105, 225, 243,
-        91, 242, 209, 69, 96, 97, 0, 155, 15, 211, 34, 105, 97, 104, 192, 67,
-        3, 251, 2, 19, 27, 106, 96, 97, 131, 66, 66, 209, 1, 50, 79, 240, 255,
-        51, 34, 97, 99, 97, 0, 224, 55, 70, 227, 104, 237, 25, 219, 25, 227,
-        96, 246, 27, 0, 46, 183, 209, 27, 240, 4, 15, 39, 208, 34, 105, 35,
-        106, 154, 66, 47, 209, 96, 104, 229, 247, 27, 250, 1, 155, 102, 96,
-        211, 248, 92, 1, 161, 105, 34, 106, 12, 155, 152, 71, 55, 70, 5, 70,
-        7, 224, 163, 105, 155, 25, 88, 104, 8, 177, 229, 247, 10, 250, 1, 55,
-        12, 54, 35, 106, 159, 66, 244, 211, 160, 105, 229, 247, 2, 250, 0, 35,
-        1, 45, 163, 97, 4, 217, 32, 70, 255, 247, 246, 254, 0, 224, 1, 37, 40,
-        70, 189, 232, 254, 143, 4, 37, 245, 231, 5, 37, 243, 231, 2, 37, 241,
-        231, 6, 37, 239, 231, 3, 37, 237, 231, 0, 191, 56, 224, 3, 0, 240, 181,
-        137, 176, 15, 158, 0, 35, 3, 46, 4, 70, 23, 70, 14, 157, 7, 147, 4,
-        217, 7, 168, 41, 70, 4, 34, 222, 247, 25, 255, 5, 47, 2, 208, 6, 47,
-        38, 209, 31, 224, 15, 46, 9, 217, 41, 70, 16, 34, 3, 168, 222, 247,
-        13, 255, 189, 248, 12, 16, 11, 11, 1, 43, 3, 208, 2, 35, 196, 248, 48,
-        49, 12, 224, 12, 75, 212, 248, 52, 1, 0, 147, 5, 241, 12, 2, 4, 155,
-        255, 247, 215, 254, 1, 40, 196, 248, 48, 1, 6, 217, 79, 240, 255, 48,
-        7, 224, 212, 248, 48, 33, 16, 155, 26, 96, 0, 32, 1, 224, 111, 240,
-        22, 0, 9, 176, 240, 189, 209, 59, 2, 0, 1, 240, 84, 191, 247, 181, 0,
-        35, 22, 70, 2, 170, 15, 120, 66, 248, 4, 61, 12, 75, 5, 70, 0, 47, 20,
-        191, 15, 70, 31, 70, 56, 70, 49, 70, 255, 247, 237, 255, 4, 70, 64,
-        185, 5, 241, 8, 0, 57, 70, 3, 34, 224, 243, 5, 244, 238, 96, 32, 70,
-        1, 224, 111, 240, 1, 0, 254, 189, 0, 191, 162, 153, 136, 0, 1, 240,
-        65, 191, 247, 181, 6, 70, 21, 70, 31, 70, 2, 170, 0, 35, 12, 70, 66,
-        248, 4, 61, 241, 104, 8, 48, 255, 247, 205, 255, 6, 70, 80, 185, 33,
-        70, 58, 70, 1, 152, 255, 247, 234, 255, 33, 70, 6, 70, 4, 34, 40, 70,
-        224, 243, 224, 243, 214, 241, 1, 0, 56, 191, 0, 32, 254, 189, 7, 181,
-        0, 35, 2, 170, 66, 248, 4, 61, 208, 248, 92, 49, 3, 241, 8, 0, 217,
-        104, 255, 247, 175, 255, 208, 241, 1, 0, 56, 191, 0, 32, 14, 189, 1,
-        240, 237, 190, 45, 233, 248, 67, 208, 248, 12, 144, 7, 70, 8, 70, 14,
-        70, 21, 70, 28, 70, 221, 248, 32, 128, 224, 243, 143, 243, 3, 40, 37,
-        216, 49, 70, 40, 70, 4, 34, 224, 243, 180, 243, 0, 35, 35, 96, 7, 241,
-        8, 0, 49, 70, 224, 243, 89, 243, 16, 185, 196, 248, 0, 144, 5, 224,
-        56, 70, 49, 70, 42, 70, 35, 70, 255, 247, 169, 255, 40, 70, 33, 104,
-        66, 70, 255, 247, 212, 255, 80, 177, 35, 104, 67, 177, 0, 33, 40, 70,
-        66, 70, 33, 96, 189, 232, 248, 67, 255, 247, 201, 191, 1, 32, 189, 232,
-        248, 131, 240, 181, 75, 104, 159, 176, 6, 70, 12, 70, 19, 185, 3, 106,
-        27, 104, 139, 96, 161, 104, 75, 30, 1, 43, 0, 242, 138, 128, 51, 106,
-        26, 104, 145, 66, 2, 208, 0, 32, 224, 96, 132, 224, 24, 105, 14, 170,
-        5, 240, 3, 250, 26, 168, 1, 240, 179, 248, 232, 177, 0, 37, 35, 224,
-        26, 152, 21, 169, 44, 240, 47, 216, 3, 70, 176, 185, 161, 104, 21, 168,
-        1, 41, 24, 191, 25, 70, 106, 70, 7, 171, 44, 240, 112, 218, 0, 35, 14,
-        170, 29, 248, 3, 16, 154, 92, 17, 66, 1, 208, 1, 53, 4, 224, 1, 51,
-        28, 43, 244, 209, 0, 224, 5, 70, 26, 168, 28, 169, 27, 170, 1, 240,
-        103, 254, 0, 40, 219, 208, 5, 53, 35, 104, 173, 0, 157, 66, 3, 217,
-        37, 96, 111, 240, 13, 0, 77, 224, 26, 168, 1, 240, 128, 248, 0, 40,
-        66, 209, 173, 248, 116, 0, 5, 70, 54, 224, 26, 152, 21, 169, 43, 240,
-        249, 223, 3, 70, 0, 40, 47, 209, 161, 104, 21, 168, 1, 41, 24, 191,
-        25, 70, 106, 70, 7, 171, 44, 240, 57, 218, 0, 35, 14, 170, 29, 248,
-        3, 16, 154, 92, 17, 66, 28, 208, 48, 70, 28, 169, 43, 240, 182, 217,
-        208, 177, 28, 168, 29, 169, 2, 34, 222, 247, 207, 253, 160, 177, 175,
-        0, 4, 241, 16, 0, 192, 25, 28, 169, 2, 34, 224, 243, 17, 243, 231, 25,
-        0, 35, 187, 116, 29, 168, 28, 169, 2, 34, 222, 247, 209, 253, 1, 53,
-        2, 224, 1, 51, 28, 43, 217, 209, 26, 168, 28, 169, 27, 170, 1, 240,
-        23, 254, 0, 40, 193, 208, 0, 224, 0, 37, 229, 96, 0, 32, 1, 224, 111,
-        240, 12, 0, 31, 176, 240, 189, 45, 233, 240, 71, 68, 104, 234, 176,
-        129, 70, 16, 70, 15, 70, 21, 70, 16, 240, 184, 250, 100, 168, 1, 240,
-        45, 248, 0, 40, 64, 240, 21, 129, 7, 244, 64, 67, 163, 245, 64, 70,
-        115, 66, 67, 235, 6, 3, 10, 51, 72, 70, 57, 70, 84, 248, 35, 96, 44,
-        240, 254, 219, 128, 185, 35, 104, 147, 248, 175, 48, 0, 43, 0, 240,
-        0, 129, 212, 248, 136, 1, 13, 240, 179, 219, 104, 170, 1, 70, 32, 70,
-        43, 240, 148, 221, 24, 177, 244, 224, 217, 248, 16, 48, 104, 147, 127,
-        35, 101, 147, 150, 248, 6, 49, 150, 248, 4, 129, 134, 248, 5, 49, 153,
-        248, 245, 32, 10, 177, 91, 178, 101, 147, 9, 241, 28, 0, 114, 73, 224,
-        243, 91, 242, 24, 185, 127, 35, 134, 248, 5, 49, 101, 147, 95, 169,
-        104, 152, 43, 240, 104, 223, 1, 70, 0, 40, 64, 240, 211, 128, 105, 170,
-        95, 168, 3, 50, 43, 240, 27, 223, 0, 40, 64, 240, 203, 128, 153, 248,
-        244, 16, 254, 178, 113, 177, 157, 249, 167, 49, 0, 43, 7, 218, 1, 46,
-        7, 208, 166, 241, 13, 0, 65, 66, 65, 235, 0, 1, 2, 224, 1, 70, 0, 224,
-        49, 70, 32, 105, 33, 240, 164, 223, 35, 104, 147, 248, 47, 32, 138,
-        177, 147, 248, 48, 48, 115, 185, 180, 248, 72, 4, 225, 243, 19, 244,
-        1, 34, 1, 70, 212, 248, 92, 1, 43, 240, 55, 223, 193, 178, 212, 248,
-        120, 1, 82, 240, 70, 219, 7, 244, 96, 83, 179, 245, 128, 95, 79, 250,
-        136, 248, 37, 209, 100, 171, 0, 33, 1, 147, 50, 70, 5, 172, 95, 168,
-        67, 70, 100, 145, 0, 145, 2, 148, 42, 240, 237, 222, 6, 70, 0, 40, 64,
-        240, 136, 128, 35, 70, 49, 70, 1, 34, 40, 70, 16, 240, 200, 250, 35,
-        29, 0, 147, 49, 70, 50, 70, 1, 35, 40, 70, 16, 240, 211, 250, 12, 52,
-        1, 34, 0, 146, 1, 148, 40, 70, 49, 70, 51, 70, 111, 224, 179, 245, 192,
-        95, 110, 209, 0, 33, 1, 36, 13, 245, 200, 122, 13, 241, 20, 9, 95, 168,
-        50, 70, 67, 70, 0, 145, 100, 148, 205, 248, 4, 160, 205, 248, 8, 144,
-        42, 240, 191, 222, 1, 70, 0, 40, 90, 209, 7, 244, 124, 87, 183, 245,
-        200, 95, 20, 191, 39, 70, 2, 39, 141, 232, 128, 4, 67, 70, 13, 241,
-        200, 10, 95, 168, 50, 70, 205, 248, 8, 160, 42, 240, 170, 222, 128,
-        70, 0, 40, 69, 209, 9, 241, 4, 6, 33, 70, 66, 70, 35, 70, 40, 70, 0,
-        150, 16, 240, 150, 250, 33, 70, 66, 70, 35, 70, 40, 70, 0, 150, 16,
-        240, 143, 250, 9, 241, 12, 3, 1, 147, 33, 70, 34, 70, 67, 70, 40, 70,
-        0, 148, 16, 240, 174, 250, 65, 70, 34, 70, 83, 70, 40, 70, 16, 240,
-        108, 250, 51, 175, 65, 70, 66, 70, 35, 70, 40, 70, 53, 174, 0, 151,
-        16, 240, 118, 250, 65, 70, 34, 70, 67, 70, 40, 70, 0, 148, 1, 150, 16,
-        240, 151, 250, 3, 33, 34, 70, 83, 70, 40, 70, 16, 240, 85, 250, 3, 33,
-        66, 70, 35, 70, 40, 70, 0, 151, 16, 240, 97, 250, 141, 232, 80, 0, 40,
-        70, 3, 33, 34, 70, 67, 70, 16, 240, 130, 250, 106, 176, 189, 232, 240,
-        135, 235, 156, 136, 0, 248, 181, 70, 104, 5, 70, 115, 126, 15, 70, 91,
-        179, 182, 248, 72, 20, 3, 104, 1, 244, 96, 81, 161, 245, 192, 94, 222,
-        241, 0, 1, 88, 105, 65, 235, 14, 1, 16, 240, 165, 249, 4, 70, 240, 177,
-        34, 70, 40, 70, 182, 248, 72, 20, 255, 247, 186, 254, 121, 178, 32,
-        70, 16, 240, 135, 250, 33, 70, 40, 70, 255, 247, 21, 252, 51, 106, 33,
-        70, 24, 105, 182, 248, 72, 36, 5, 240, 3, 250, 43, 104, 33, 70, 88,
-        105, 16, 240, 151, 249, 0, 32, 248, 189, 111, 240, 10, 0, 248, 189,
-        79, 240, 255, 48, 248, 189, 248, 181, 144, 232, 136, 0, 14, 70, 1, 244,
-        96, 81, 161, 245, 192, 92, 220, 241, 0, 1, 5, 70, 65, 235, 12, 1, 88,
-        105, 16, 240, 113, 249, 4, 70, 0, 40, 36, 208, 34, 70, 49, 70, 40, 70,
-        255, 247, 134, 254, 215, 248, 120, 1, 82, 240, 6, 218, 65, 178, 32,
-        70, 16, 240, 79, 250, 33, 70, 40, 70, 255, 247, 221, 251, 49, 70, 40,
-        70, 63, 105, 44, 240, 255, 216, 2, 28, 49, 70, 56, 70, 35, 70, 24, 191,
-        1, 34, 253, 247, 195, 248, 43, 104, 33, 70, 88, 105, 189, 232, 248,
-        64, 16, 240, 87, 185, 248, 189, 45, 233, 240, 79, 141, 176, 221, 248,
-        88, 128, 0, 39, 4, 70, 69, 104, 138, 70, 147, 70, 192, 248, 16, 128,
-        4, 34, 57, 70, 4, 241, 28, 6, 9, 168, 153, 70, 10, 151, 224, 243, 100,
-        240, 3, 34, 49, 70, 9, 168, 224, 243, 63, 241, 3, 34, 81, 70, 48, 70,
-        224, 243, 58, 241, 3, 34, 89, 70, 4, 241, 20, 0, 224, 243, 52, 241,
-        4, 169, 196, 248, 24, 144, 64, 70, 43, 240, 240, 221, 57, 70, 13, 241,
-        47, 2, 4, 168, 43, 240, 166, 221, 57, 70, 10, 170, 4, 168, 0, 240, 185,
-        255, 10, 153, 43, 106, 17, 240, 64, 1, 24, 105, 24, 191, 1, 33, 7, 240,
-        198, 248, 157, 248, 47, 48, 219, 6, 10, 213, 181, 248, 174, 1, 236,
-        247, 240, 253, 40, 177, 4, 168, 1, 33, 13, 241, 47, 2, 43, 240, 137,
-        221, 157, 248, 47, 16, 17, 240, 16, 1, 8, 208, 40, 70, 0, 33, 234, 247,
-        228, 253, 213, 248, 116, 52, 1, 34, 26, 116, 6, 224, 213, 248, 116,
-        52, 25, 116, 213, 248, 112, 4, 66, 240, 90, 216, 169, 106, 40, 70, 21,
-        240, 141, 253, 233, 106, 40, 70, 21, 240, 137, 253, 65, 70, 32, 70,
-        42, 240, 170, 222, 9, 168, 224, 243, 187, 240, 1, 40, 27, 217, 48, 70,
-        224, 243, 182, 240, 9, 169, 2, 70, 48, 70, 224, 243, 185, 240, 144,
-        177, 181, 248, 72, 20, 32, 70, 42, 240, 233, 221, 48, 70, 224, 243,
-        168, 240, 0, 34, 1, 48, 3, 144, 47, 33, 40, 70, 19, 70, 0, 146, 1, 146,
-        2, 150, 7, 240, 117, 219, 13, 176, 189, 232, 240, 143, 45, 233, 243,
-        65, 69, 104, 6, 70, 23, 70, 40, 70, 1, 170, 12, 70, 43, 240, 138, 219,
-        128, 70, 184, 177, 1, 63, 24, 73, 58, 70, 32, 70, 224, 243, 180, 240,
-        40, 70, 33, 70, 1, 170, 43, 240, 125, 219, 128, 70, 80, 177, 19, 73,
-        58, 70, 32, 70, 224, 243, 168, 240, 40, 70, 33, 70, 1, 170, 43, 240,
-        113, 219, 128, 70, 213, 248, 140, 1, 33, 70, 44, 240, 209, 220, 32,
-        70, 255, 247, 12, 251, 24, 177, 213, 248, 136, 1, 33, 70, 2, 224, 213,
-        248, 136, 1, 7, 73, 13, 240, 242, 217, 48, 70, 33, 70, 44, 240, 232,
-        216, 64, 70, 189, 232, 252, 129, 0, 191, 146, 153, 136, 0, 154, 206,
-        135, 0, 41, 155, 136, 0, 1, 42, 247, 181, 4, 70, 88, 217, 75, 105, 4,
-        43, 85, 209, 11, 105, 154, 120, 88, 120, 18, 4, 66, 234, 0, 34, 24,
-        120, 219, 120, 2, 67, 66, 234, 3, 98, 74, 246, 166, 19, 154, 66, 72,
-        209, 212, 248, 156, 48, 0, 38, 77, 104, 143, 104, 78, 96, 99, 177, 48,
-        70, 0, 240, 158, 253, 212, 248, 156, 0, 228, 247, 231, 253, 196, 248,
-        164, 96, 196, 248, 156, 96, 196, 248, 160, 96, 212, 248, 148, 0, 8,
-        177, 228, 247, 220, 253, 69, 177, 40, 70, 0, 240, 129, 253, 0, 40, 44,
-        208, 40, 70, 228, 247, 211, 253, 9, 37, 23, 72, 0, 240, 120, 253, 0,
-        35, 196, 248, 152, 48, 196, 248, 148, 48, 4, 241, 20, 0, 161, 105, 106,
-        70, 255, 247, 113, 252, 8, 185, 0, 155, 0, 224, 0, 35, 35, 97, 0, 33,
-        4, 34, 1, 168, 223, 243, 81, 247, 4, 241, 8, 1, 3, 34, 1, 168, 224,
-        243, 43, 240, 32, 70, 1, 169, 4, 34, 255, 247, 96, 255, 2, 224, 7, 37,
-        0, 224, 8, 37, 40, 70, 254, 189, 196, 248, 148, 80, 196, 248, 152, 112,
-        5, 70, 216, 231, 136, 226, 3, 0, 1, 244, 96, 83, 179, 245, 0, 95, 112,
-        181, 6, 70, 0, 241, 196, 5, 204, 178, 27, 209, 6, 44, 1, 217, 161, 31,
-        0, 224, 0, 33, 40, 70, 224, 243, 110, 245, 2, 44, 1, 217, 161, 30, 0,
-        224, 0, 33, 40, 70, 224, 243, 102, 245, 221, 44, 1, 216, 161, 28, 0,
-        224, 0, 33, 40, 70, 224, 243, 94, 245, 217, 44, 16, 216, 161, 29, 15,
-        224, 179, 245, 192, 95, 14, 209, 2, 44, 1, 217, 161, 30, 0, 224, 0,
-        33, 40, 70, 224, 243, 79, 245, 221, 44, 1, 216, 161, 28, 0, 224, 0,
-        33, 40, 70, 1, 224, 40, 70, 33, 70, 224, 243, 68, 245, 48, 70, 189,
-        232, 112, 64, 43, 240, 131, 152, 0, 0, 31, 181, 12, 70, 22, 75, 208,
-        248, 148, 16, 0, 41, 8, 191, 25, 70, 1, 241, 14, 0, 177, 249, 10, 32,
-        177, 249, 12, 48, 0, 144, 1, 241, 34, 0, 52, 49, 1, 144, 2, 145, 32,
-        70, 14, 73, 224, 243, 86, 241, 1, 240, 130, 250, 2, 70, 24, 177, 32,
-        70, 11, 73, 224, 243, 78, 241, 4, 32, 0, 33, 1, 240, 124, 250, 2, 70,
-        48, 177, 7, 73, 32, 70, 4, 176, 189, 232, 16, 64, 224, 243, 65, 177,
-        4, 176, 16, 189, 0, 191, 136, 226, 3, 0, 96, 156, 136, 0, 133, 156,
-        136, 0, 152, 156, 136, 0, 16, 181, 16, 248, 1, 59, 12, 70, 35, 177,
-        17, 248, 1, 43, 10, 177, 147, 66, 246, 208, 32, 120, 24, 26, 16, 189,
-        11, 224, 75, 30, 75, 64, 33, 234, 3, 1, 91, 8, 3, 234, 0, 2, 64, 8,
-        32, 234, 3, 0, 16, 67, 73, 8, 0, 41, 241, 209, 112, 71, 1, 224, 0, 248,
-        1, 27, 18, 241, 255, 50, 250, 210, 112, 71, 2, 75, 84, 34, 2, 251, 0,
-        48, 112, 71, 0, 191, 224, 49, 4, 0, 0, 72, 112, 71, 140, 50, 4, 0, 16,
-        181, 12, 70, 255, 247, 240, 255, 3, 104, 35, 177, 27, 89, 35, 177, 64,
-        104, 24, 24, 16, 189, 24, 70, 16, 189, 24, 70, 16, 189, 16, 181, 12,
-        70, 33, 177, 255, 247, 224, 255, 64, 104, 32, 24, 16, 189, 8, 70, 16,
-        189, 1, 56, 17, 177, 192, 243, 128, 115, 11, 96, 18, 177, 32, 240, 64,
-        64, 16, 96, 112, 71, 72, 177, 1, 41, 12, 191, 79, 240, 128, 65, 0, 33,
-        34, 240, 64, 66, 10, 67, 1, 50, 2, 96, 112, 71, 2, 224, 3, 120, 1, 51,
-        192, 24, 17, 241, 255, 49, 249, 210, 112, 71, 45, 233, 243, 65, 14,
-        70, 5, 70, 20, 70, 16, 70, 0, 33, 44, 34, 255, 247, 172, 255, 3, 46,
-        116, 216, 223, 232, 6, 240, 2, 10, 17, 25, 40, 104, 105, 70, 1, 170,
-        255, 247, 205, 255, 0, 37, 1, 39, 21, 224, 104, 104, 105, 70, 1, 170,
-        255, 247, 197, 255, 1, 37, 5, 224, 168, 104, 105, 70, 1, 170, 255, 247,
-        190, 255, 0, 37, 47, 70, 6, 224, 232, 104, 105, 70, 1, 170, 255, 247,
-        182, 255, 1, 37, 0, 39, 1, 155, 64, 242, 255, 50, 147, 66, 75, 208,
-        64, 242, 254, 50, 147, 66, 73, 208, 0, 152, 255, 247, 131, 255, 3, 104,
-        6, 54, 128, 70, 83, 248, 38, 16, 0, 152, 255, 247, 150, 255, 17, 224,
-        31, 177, 195, 120, 0, 235, 67, 0, 4, 48, 3, 70, 19, 248, 1, 27, 64,
-        120, 1, 240, 48, 2, 18, 17, 3, 50, 0, 251, 2, 48, 1, 48, 75, 7, 242,
-        212, 1, 155, 90, 30, 1, 146, 0, 43, 232, 209, 8, 241, 60, 3, 99, 96,
-        5, 241, 8, 3, 8, 235, 195, 8, 8, 241, 4, 3, 163, 96, 32, 96, 16, 33,
-        0, 152, 255, 247, 96, 255, 12, 33, 224, 96, 0, 152, 255, 247, 91, 255,
-        32, 97, 0, 152, 255, 247, 75, 255, 8, 48, 110, 0, 0, 235, 5, 21, 101,
-        97, 0, 152, 255, 247, 67, 255, 1, 54, 8, 48, 0, 235, 198, 6, 166, 97,
-        1, 32, 0, 224, 0, 32, 189, 232, 252, 129, 0, 0, 45, 233, 247, 67, 4,
-        70, 255, 247, 51, 255, 5, 104, 32, 70, 125, 185, 255, 247, 46, 255,
-        133, 96, 32, 70, 255, 247, 42, 255, 5, 97, 32, 70, 255, 247, 38, 255,
-        133, 97, 32, 70, 255, 247, 34, 255, 5, 98, 83, 224, 0, 33, 255, 247,
-        41, 255, 4, 33, 5, 70, 0, 144, 32, 70, 255, 247, 35, 255, 46, 104, 1,
-        144, 118, 185, 3, 104, 0, 43, 64, 208, 11, 224, 1, 32, 255, 247, 13,
-        255, 8, 48, 0, 144, 1, 32, 255, 247, 8, 255, 24, 48, 1, 144, 54, 224,
-        0, 38, 173, 241, 4, 8, 0, 37, 32, 70, 255, 247, 254, 254, 88, 248, 4,
-        127, 0, 235, 5, 19, 8, 51, 151, 232, 3, 0, 131, 232, 3, 0, 6, 177, 84,
-        177, 32, 70, 255, 247, 240, 254, 121, 104, 129, 70, 32, 70, 255, 247,
-        6, 255, 9, 235, 5, 19, 216, 96, 1, 53, 2, 45, 227, 209, 32, 70, 255,
-        247, 226, 254, 11, 74, 0, 241, 16, 3, 146, 232, 3, 0, 131, 232, 3, 0,
-        32, 70, 255, 247, 216, 254, 7, 74, 0, 241, 32, 3, 146, 232, 3, 0, 131,
-        232, 3, 0, 3, 224, 0, 44, 189, 208, 1, 38, 199, 231, 189, 232, 254,
-        131, 32, 225, 3, 0, 172, 224, 3, 0, 10, 104, 3, 70, 72, 104, 2, 235,
-        66, 2, 48, 181, 130, 24, 13, 224, 4, 120, 163, 66, 9, 219, 65, 120,
-        139, 66, 6, 220, 129, 120, 28, 27, 148, 251, 241, 245, 1, 251, 21, 65,
-        25, 177, 3, 48, 144, 66, 239, 209, 0, 32, 48, 189, 6, 201, 1, 235, 65,
-        1, 3, 70, 48, 181, 81, 24, 0, 32, 10, 224, 20, 120, 156, 66, 6, 221,
-        32, 177, 5, 120, 165, 66, 136, 191, 16, 70, 0, 224, 16, 70, 3, 50, 138,
-        66, 242, 209, 48, 189, 45, 233, 248, 79, 10, 159, 13, 70, 20, 70, 152,
-        70, 6, 70, 0, 40, 91, 208, 0, 33, 25, 34, 255, 247, 130, 254, 0, 45,
-        85, 208, 255, 44, 83, 208, 33, 70, 40, 70, 255, 247, 188, 254, 144,
-        248, 0, 176, 4, 70, 131, 68, 72, 224, 20, 248, 1, 63, 255, 43, 31, 209,
-        120, 104, 57, 104, 0, 34, 23, 224, 131, 92, 15, 224, 3, 240, 7, 9, 79,
-        240, 1, 10, 10, 250, 9, 250, 79, 234, 227, 12, 22, 248, 12, 144, 74,
-        234, 9, 9, 6, 248, 12, 144, 173, 120, 91, 25, 133, 24, 149, 248, 1,
-        192, 99, 69, 234, 221, 3, 50, 17, 241, 255, 49, 228, 210, 36, 224, 24,
-        248, 19, 80, 8, 235, 67, 2, 40, 70, 57, 70, 146, 248, 1, 144, 255, 247,
-        136, 255, 200, 177, 1, 33, 5, 240, 7, 2, 17, 250, 2, 242, 235, 16, 241,
-        92, 77, 69, 66, 234, 1, 2, 242, 84, 13, 218, 67, 120, 157, 66, 2, 218,
-        131, 120, 237, 24, 237, 231, 40, 70, 57, 70, 255, 247, 139, 255, 16,
-        177, 5, 120, 77, 69, 229, 221, 92, 69, 180, 209, 189, 232, 248, 143,
-        56, 181, 21, 70, 18, 104, 4, 70, 8, 120, 58, 185, 132, 66, 34, 209,
-        74, 120, 154, 26, 80, 66, 64, 235, 2, 0, 56, 189, 132, 66, 33, 219,
-        75, 120, 156, 66, 25, 220, 41, 70, 255, 247, 83, 255, 3, 224, 24, 70,
-        41, 70, 255, 247, 104, 255, 136, 177, 67, 120, 163, 66, 247, 219, 14,
-        224, 130, 120, 228, 26, 148, 251, 242, 240, 2, 251, 16, 68, 212, 241,
-        1, 0, 56, 191, 0, 32, 56, 189, 16, 70, 56, 189, 0, 32, 56, 189, 3, 120,
-        163, 66, 237, 221, 0, 32, 56, 189, 0, 0, 45, 233, 240, 71, 18, 76, 4,
-        241, 108, 8, 84, 248, 8, 92, 84, 248, 4, 60, 212, 248, 0, 144, 5, 235,
-        3, 10, 255, 247, 243, 253, 5, 240, 3, 7, 127, 0, 3, 35, 187, 64, 174,
-        8, 130, 93, 9, 250, 7, 247, 34, 234, 3, 3, 131, 85, 255, 247, 229, 253,
-        131, 93, 1, 53, 31, 67, 85, 69, 135, 85, 233, 219, 12, 52, 68, 69, 222,
-        209, 189, 232, 240, 135, 188, 224, 3, 0, 248, 181, 6, 70, 8, 70, 13,
-        70, 255, 247, 202, 253, 4, 70, 0, 46, 118, 208, 48, 70, 67, 73, 255,
-        247, 159, 253, 0, 40, 126, 209, 115, 137, 5, 43, 3, 209, 182, 249, 12,
-        32, 1, 42, 5, 208, 7, 59, 155, 178, 5, 43, 115, 216, 1, 39, 0, 224,
-        7, 70, 243, 106, 40, 70, 243, 26, 99, 96, 49, 107, 255, 247, 199, 253,
-        32, 96, 39, 177, 144, 248, 53, 48, 11, 177, 178, 43, 100, 209, 102,
-        99, 31, 177, 67, 107, 3, 240, 1, 3, 0, 224, 59, 70, 227, 98, 163, 98,
-        63, 177, 67, 107, 3, 240, 1, 3, 0, 43, 20, 191, 9, 35, 7, 35, 0, 224,
-        7, 35, 35, 99, 31, 177, 67, 107, 195, 243, 192, 3, 0, 224, 59, 70, 163,
-        99, 71, 179, 67, 107, 216, 6, 37, 213, 8, 33, 40, 70, 255, 247, 142,
-        253, 64, 33, 224, 99, 40, 70, 255, 247, 137, 253, 20, 33, 32, 100, 40,
-        70, 255, 247, 132, 253, 76, 33, 224, 100, 40, 70, 255, 247, 127, 253,
-        35, 104, 32, 101, 91, 107, 153, 6, 9, 213, 88, 33, 40, 70, 255, 247,
-        118, 253, 92, 33, 96, 100, 40, 70, 255, 247, 113, 253, 1, 224, 227,
-        108, 99, 100, 160, 100, 17, 224, 8, 33, 40, 70, 255, 247, 104, 253,
-        20, 33, 6, 70, 40, 70, 255, 247, 99, 253, 230, 99, 96, 100, 224, 100,
-        38, 100, 160, 100, 32, 101, 1, 224, 70, 96, 6, 96, 40, 70, 255, 247,
-        19, 254, 1, 45, 2, 209, 0, 32, 255, 247, 14, 254, 255, 247, 74, 255,
-        0, 32, 248, 189, 1, 32, 248, 189, 1, 32, 248, 189, 164, 203, 135, 0,
-        2, 120, 11, 120, 154, 66, 12, 209, 66, 120, 75, 120, 154, 66, 10, 209,
-        128, 120, 139, 120, 195, 235, 0, 12, 220, 241, 0, 0, 64, 235, 12, 0,
-        112, 71, 0, 32, 112, 71, 0, 32, 112, 71, 2, 120, 11, 120, 154, 66, 6,
-        209, 64, 120, 75, 120, 195, 26, 88, 66, 64, 235, 3, 0, 112, 71, 0, 32,
-        112, 71, 11, 120, 3, 112, 75, 120, 67, 112, 112, 71, 0, 0, 3, 104, 26,
-        120, 26, 185, 91, 120, 11, 185, 1, 75, 3, 96, 112, 71, 40, 225, 3, 0,
-        45, 233, 240, 65, 13, 70, 48, 33, 4, 70, 144, 70, 255, 247, 14, 253,
-        6, 70, 8, 179, 65, 104, 9, 179, 32, 70, 255, 247, 22, 253, 51, 104,
-        12, 38, 7, 70, 6, 251, 3, 6, 4, 70, 0, 224, 12, 52, 180, 66, 5, 210,
-        32, 70, 41, 70, 255, 247, 177, 255, 0, 40, 246, 208, 184, 241, 0, 15,
-        5, 208, 231, 27, 7, 75, 191, 16, 95, 67, 200, 248, 0, 112, 180, 66,
-        40, 191, 0, 36, 2, 224, 4, 70, 0, 224, 12, 70, 32, 70, 189, 232, 240,
-        129, 171, 170, 170, 170, 112, 181, 22, 70, 13, 70, 153, 177, 137, 104,
-        255, 247, 234, 252, 4, 70, 136, 177, 109, 104, 5, 235, 69, 5, 69, 25,
-        0, 224, 3, 52, 172, 66, 8, 210, 48, 70, 33, 70, 255, 247, 154, 255,
-        0, 40, 246, 208, 2, 224, 12, 70, 0, 224, 0, 36, 32, 70, 112, 189, 112,
-        181, 139, 24, 221, 120, 12, 70, 22, 70, 255, 247, 178, 252, 131, 106,
-        75, 177, 227, 121, 198, 241, 4, 6, 118, 0, 19, 250, 6, 246, 6, 244,
-        64, 118, 53, 67, 13, 224, 254, 45, 6, 208, 8, 216, 64, 242, 253, 51,
-        253, 45, 8, 191, 29, 70, 4, 224, 64, 242, 254, 53, 1, 224, 64, 242,
-        255, 53, 40, 70, 112, 189, 8, 181, 0, 34, 255, 247, 217, 255, 64, 242,
-        253, 51, 194, 26, 80, 66, 64, 235, 2, 0, 8, 189, 112, 181, 13, 70, 40,
-        33, 4, 70, 255, 247, 145, 252, 3, 70, 80, 177, 89, 104, 32, 70, 255,
-        247, 154, 252, 6, 70, 32, 70, 255, 247, 123, 252, 0, 107, 0, 251, 5,
-        96, 112, 189, 45, 233, 248, 67, 13, 70, 40, 33, 4, 70, 23, 70, 255,
-        247, 123, 252, 0, 33, 128, 70, 32, 70, 255, 247, 223, 255, 6, 70, 32,
-        70, 255, 247, 102, 252, 208, 248, 48, 144, 134, 177, 0, 36, 9, 224,
-        48, 70, 41, 70, 255, 247, 33, 255, 16, 177, 71, 177, 60, 96, 6, 224,
-        1, 52, 78, 68, 216, 248, 0, 48, 156, 66, 241, 219, 0, 38, 48, 70, 189,
-        232, 248, 131, 45, 233, 240, 65, 68, 124, 7, 70, 4, 240, 1, 4, 32, 70,
-        13, 70, 255, 247, 69, 252, 0, 33, 6, 70, 20, 34, 40, 70, 255, 247, 56,
-        252, 6, 241, 60, 3, 43, 96, 56, 124, 16, 240, 71, 0, 53, 208, 56, 33,
-        255, 247, 30, 252, 56, 33, 71, 30, 32, 70, 255, 247, 60, 252, 3, 70,
-        136, 177, 2, 104, 151, 66, 14, 210, 89, 104, 32, 70, 255, 247, 66, 252,
-        0, 235, 199, 3, 128, 70, 89, 104, 32, 70, 255, 247, 59, 252, 88, 248,
-        55, 48, 168, 96, 107, 96, 179, 107, 187, 177, 32, 70, 60, 33, 255, 247,
-        34, 252, 3, 70, 136, 177, 2, 104, 151, 66, 14, 210, 89, 104, 32, 70,
-        255, 247, 40, 252, 0, 235, 199, 3, 6, 70, 89, 104, 32, 70, 255, 247,
-        33, 252, 86, 248, 55, 48, 40, 97, 235, 96, 189, 232, 240, 129, 45, 233,
-        248, 67, 20, 70, 21, 74, 4, 39, 18, 248, 3, 144, 79, 240, 1, 8, 79,
-        234, 25, 19, 167, 64, 8, 250, 3, 248, 13, 70, 7, 235, 215, 119, 0, 33,
-        2, 34, 6, 70, 95, 250, 136, 248, 127, 16, 255, 247, 224, 251, 95, 234,
-        88, 8, 53, 85, 9, 208, 1, 60, 10, 212, 127, 16, 24, 234, 9, 15, 20,
-        191, 237, 25, 199, 235, 5, 5, 241, 231, 1, 32, 189, 232, 248, 131, 0,
-        32, 189, 232, 248, 131, 0, 191, 119, 225, 3, 0, 16, 181, 255, 247, 205,
-        251, 3, 104, 92, 107, 20, 240, 2, 4, 8, 208, 68, 107, 5, 73, 82, 52,
-        32, 70, 255, 247, 158, 251, 0, 40, 8, 191, 0, 36, 32, 70, 16, 189, 0,
-        191, 246, 203, 135, 0, 16, 181, 4, 70, 255, 247, 182, 251, 0, 104, 32,
-        177, 32, 70, 189, 232, 16, 64, 255, 247, 223, 191, 16, 189, 45, 233,
-        248, 79, 5, 70, 12, 70, 22, 70, 154, 70, 0, 43, 78, 209, 152, 70, 64,
-        70, 255, 247, 162, 251, 195, 106, 83, 177, 3, 104, 67, 177, 91, 107,
-        153, 1, 5, 213, 64, 70, 180, 33, 255, 247, 163, 251, 129, 70, 40, 185,
-        8, 241, 1, 8, 184, 241, 2, 15, 56, 208, 233, 231, 3, 104, 0, 43, 52,
-        208, 64, 70, 217, 248, 4, 16, 255, 247, 162, 251, 217, 248, 0, 48, 7,
-        70, 0, 235, 131, 11, 5, 224, 40, 70, 57, 70, 255, 247, 86, 254, 24,
-        185, 4, 55, 95, 69, 247, 211, 32, 224, 217, 248, 8, 16, 64, 70, 255,
-        247, 142, 251, 123, 136, 249, 136, 3, 235, 67, 2, 130, 24, 203, 26,
-        15, 224, 17, 120, 80, 120, 9, 2, 9, 24, 37, 104, 14, 185, 144, 120,
-        0, 224, 8, 70, 133, 66, 3, 209, 6, 177, 145, 120, 33, 96, 5, 224, 3,
-        50, 19, 241, 255, 51, 236, 210, 79, 240, 1, 10, 80, 70, 189, 232, 248,
-        143, 2, 74, 3, 75, 1, 33, 26, 96, 255, 247, 126, 189, 42, 225, 3, 0,
-        136, 50, 4, 0, 0, 33, 255, 247, 119, 189, 24, 177, 0, 35, 3, 96, 24,
-        70, 112, 71, 1, 32, 112, 71, 56, 177, 0, 35, 127, 34, 3, 96, 131, 96,
-        66, 96, 195, 96, 24, 70, 112, 71, 1, 32, 112, 71, 45, 233, 247, 79,
-        14, 70, 20, 70, 5, 70, 0, 40, 98, 208, 0, 41, 96, 208, 0, 42, 94, 208,
-        0, 104, 16, 185, 0, 144, 1, 144, 6, 224, 105, 70, 1, 170, 255, 247,
-        70, 251, 1, 155, 1, 51, 1, 147, 0, 152, 40, 33, 255, 247, 38, 251, 24,
-        177, 1, 153, 3, 104, 153, 66, 10, 219, 0, 155, 19, 185, 1, 34, 0, 146,
-        240, 231, 0, 177, 0, 104, 1, 144, 79, 240, 255, 52, 56, 224, 0, 152,
-        255, 247, 124, 254, 128, 70, 65, 70, 0, 152, 255, 247, 108, 254, 7,
-        70, 0, 40, 221, 209, 0, 155, 1, 43, 34, 209, 255, 247, 250, 250, 3,
-        104, 243, 177, 40, 33, 56, 70, 255, 247, 0, 251, 57, 70, 130, 70, 56,
-        70, 255, 247, 100, 254, 129, 70, 56, 70, 255, 247, 235, 250, 208, 248,
-        48, 176, 6, 224, 64, 70, 73, 70, 255, 247, 168, 253, 40, 185, 1, 55,
-        217, 68, 218, 248, 0, 48, 159, 66, 244, 219, 218, 248, 0, 48, 159, 66,
-        183, 219, 48, 70, 65, 70, 255, 247, 187, 253, 152, 248, 2, 48, 35, 96,
-        0, 36, 40, 70, 157, 232, 6, 0, 255, 247, 251, 250, 0, 224, 1, 36, 32,
-        70, 189, 232, 254, 143, 127, 181, 12, 70, 1, 144, 21, 70, 48, 179, 42,
-        179, 1, 168, 255, 247, 170, 253, 3, 168, 1, 153, 255, 247, 160, 253,
-        3, 169, 0, 32, 2, 170, 141, 248, 14, 64, 255, 247, 60, 254, 1, 70, 64,
-        185, 3, 169, 1, 32, 2, 170, 255, 247, 53, 254, 1, 70, 128, 177, 1, 38,
-        0, 224, 0, 38, 48, 70, 255, 247, 14, 254, 4, 70, 64, 185, 40, 70, 49,
-        70, 2, 154, 255, 247, 204, 250, 32, 70, 3, 224, 1, 32, 1, 224, 79, 240,
-        255, 48, 4, 176, 112, 189, 0, 0, 45, 233, 243, 71, 14, 70, 0, 41, 75,
-        208, 105, 70, 1, 170, 255, 247, 176, 250, 0, 152, 40, 33, 255, 247,
-        147, 250, 0, 40, 67, 208, 1, 153, 3, 104, 153, 66, 63, 210, 0, 152,
-        255, 247, 243, 253, 0, 36, 128, 70, 37, 70, 223, 248, 124, 160, 0, 159,
-        10, 235, 4, 3, 211, 248, 4, 144, 56, 70, 74, 70, 65, 70, 255, 247, 182,
-        253, 64, 242, 254, 51, 152, 66, 2, 70, 17, 209, 53, 185, 42, 70, 1,
-        32, 65, 70, 255, 247, 237, 253, 5, 70, 48, 177, 74, 70, 1, 32, 41, 70,
-        255, 247, 164, 253, 2, 70, 1, 224, 64, 242, 255, 50, 1, 39, 90, 248,
-        4, 0, 57, 70, 48, 24, 8, 52, 255, 247, 128, 250, 32, 44, 211, 209, 0,
-        152, 255, 247, 76, 250, 195, 106, 11, 177, 152, 248, 8, 48, 51, 116,
-        0, 155, 0, 32, 115, 116, 3, 224, 1, 32, 1, 224, 79, 240, 255, 48, 189,
-        232, 252, 135, 0, 191, 128, 224, 3, 0, 112, 181, 22, 70, 148, 176, 29,
-        70, 0, 40, 61, 208, 1, 41, 59, 216, 11, 185, 18, 185, 54, 224, 2, 185,
-        13, 174, 2, 170, 255, 247, 109, 250, 0, 40, 49, 208, 2, 156, 236, 177,
-        7, 155, 34, 120, 0, 147, 3, 155, 48, 70, 5, 153, 27, 104, 255, 247,
-        135, 251, 2, 155, 40, 70, 154, 120, 7, 155, 6, 153, 0, 147, 3, 155,
-        27, 104, 255, 247, 125, 251, 237, 177, 0, 35, 241, 92, 234, 92, 10,
-        64, 234, 84, 1, 51, 25, 43, 248, 209, 0, 32, 20, 224, 48, 70, 33, 70,
-        34, 70, 35, 70, 0, 148, 255, 247, 107, 251, 40, 70, 33, 70, 34, 70,
-        35, 70, 0, 148, 255, 247, 100, 251, 32, 70, 4, 224, 16, 70, 2, 224,
-        1, 32, 0, 224, 40, 70, 20, 176, 112, 189, 0, 0, 45, 233, 240, 79, 14,
-        70, 157, 176, 20, 70, 5, 70, 0, 40, 0, 240, 234, 128, 0, 42, 0, 240,
-        231, 128, 1, 41, 0, 242, 228, 128, 79, 240, 102, 67, 19, 96, 6, 170,
-        255, 247, 30, 250, 0, 40, 0, 240, 219, 128, 6, 155, 235, 177, 90, 120,
-        2, 240, 3, 2, 1, 42, 2, 208, 2, 42, 8, 209, 3, 224, 34, 104, 66, 240,
-        1, 2, 2, 224, 34, 104, 66, 240, 2, 2, 34, 96, 90, 120, 81, 7, 3, 213,
-        34, 104, 66, 240, 4, 2, 34, 96, 218, 28, 6, 146, 219, 120, 2, 235, 67,
-        2, 1, 50, 6, 146, 40, 70, 0, 46, 20, 191, 3, 33, 2, 33, 17, 170, 255,
-        247, 243, 249, 0, 40, 0, 240, 176, 128, 0, 39, 171, 70, 7, 241, 24,
-        1, 104, 70, 11, 88, 0, 43, 0, 240, 138, 128, 186, 70, 30, 120, 6, 240,
-        73, 5, 1, 45, 9, 208, 8, 45, 10, 208, 72, 45, 11, 208, 9, 45, 12, 191,
-        79, 240, 128, 101, 0, 37, 7, 224, 79, 240, 128, 69, 4, 224, 79, 240,
-        0, 69, 1, 224, 79, 240, 0, 117, 6, 240, 48, 2, 18, 17, 208, 28, 2, 144,
-        26, 177, 34, 104, 66, 240, 16, 2, 34, 96, 90, 120, 2, 51, 3, 146, 67,
-        74, 4, 147, 18, 104, 6, 240, 73, 3, 211, 92, 198, 243, 64, 9, 155, 0,
-        5, 147, 3, 155, 4, 159, 3, 241, 255, 56, 73, 224, 28, 168, 0, 235, 10,
-        3, 83, 248, 80, 60, 5, 154, 185, 120, 152, 88, 255, 247, 161, 249, 59,
-        120, 1, 120, 128, 43, 55, 208, 29, 177, 35, 104, 35, 234, 5, 5, 37,
-        96, 65, 24, 90, 70, 5, 70, 179, 70, 14, 70, 39, 224, 21, 248, 1, 31,
-        0, 146, 1, 145, 255, 247, 89, 249, 1, 153, 0, 154, 139, 8, 195, 92,
-        1, 240, 3, 1, 73, 0, 83, 250, 1, 241, 1, 240, 3, 1, 1, 41, 9, 208, 2,
-        41, 14, 208, 137, 185, 185, 241, 0, 15, 14, 208, 35, 104, 67, 240, 128,
-        83, 9, 224, 185, 241, 0, 15, 7, 208, 35, 104, 67, 240, 0, 99, 2, 224,
-        35, 104, 35, 240, 0, 83, 35, 96, 181, 66, 213, 209, 94, 70, 0, 37, 147,
-        70, 2, 155, 8, 241, 255, 56, 255, 24, 184, 241, 255, 63, 178, 209, 2,
-        154, 3, 152, 4, 153, 0, 251, 2, 19, 114, 7, 63, 245, 120, 175, 87, 70,
-        44, 55, 88, 47, 127, 244, 107, 175, 93, 70, 43, 124, 27, 7, 3, 213,
-        35, 104, 67, 240, 8, 3, 35, 96, 43, 124, 216, 6, 3, 213, 35, 104, 67,
-        240, 32, 3, 35, 96, 40, 124, 16, 240, 32, 0, 6, 208, 35, 104, 0, 32,
-        67, 240, 64, 3, 35, 96, 0, 224, 1, 32, 29, 176, 189, 232, 240, 143,
-        0, 191, 136, 50, 4, 0, 45, 233, 240, 79, 12, 70, 133, 176, 0, 41, 75,
-        208, 2, 169, 3, 170, 255, 247, 17, 249, 2, 152, 40, 33, 255, 247, 244,
-        248, 0, 40, 65, 208, 3, 153, 3, 104, 153, 66, 61, 210, 2, 152, 255,
-        247, 84, 252, 0, 37, 1, 144, 40, 70, 44, 33, 255, 247, 229, 248, 128,
-        70, 72, 179, 40, 70, 216, 248, 4, 16, 255, 247, 237, 248, 24, 179, 6,
-        70, 0, 39, 28, 224, 214, 248, 4, 176, 40, 70, 177, 104, 255, 247, 227,
-        248, 187, 241, 255, 63, 17, 208, 130, 70, 79, 240, 0, 9, 11, 224, 80,
-        70, 1, 153, 255, 247, 129, 251, 10, 241, 3, 10, 16, 177, 32, 70, 49,
-        70, 14, 224, 9, 241, 1, 9, 217, 69, 241, 219, 1, 55, 12, 54, 216, 248,
-        0, 48, 159, 66, 222, 219, 1, 53, 2, 45, 204, 209, 1, 153, 32, 70, 255,
-        247, 140, 251, 0, 32, 0, 224, 1, 32, 5, 176, 189, 232, 240, 143, 45,
-        233, 240, 79, 177, 176, 15, 70, 11, 146, 17, 147, 59, 157, 60, 158,
-        4, 70, 0, 40, 0, 240, 119, 129, 0, 46, 0, 240, 116, 129, 1, 41, 0, 242,
-        113, 129, 0, 45, 0, 240, 110, 129, 42, 104, 1, 42, 0, 242, 106, 129,
-        58, 153, 2, 41, 0, 242, 102, 129, 171, 104, 2, 43, 0, 242, 98, 129,
-        46, 168, 11, 153, 58, 155, 255, 247, 122, 252, 0, 40, 0, 240, 90, 129,
-        47, 185, 43, 104, 51, 177, 157, 248, 184, 32, 3, 146, 4, 224, 0, 35,
-        3, 147, 1, 224, 0, 33, 3, 145, 48, 70, 129, 33, 178, 34, 255, 247, 95,
-        248, 32, 70, 57, 70, 19, 170, 255, 247, 164, 248, 0, 40, 0, 240, 65,
-        129, 19, 155, 51, 177, 218, 28, 19, 146, 219, 120, 2, 235, 67, 2, 1,
-        50, 19, 146, 32, 70, 0, 47, 20, 191, 3, 33, 2, 33, 30, 170, 255, 247,
-        144, 248, 0, 40, 0, 240, 45, 129, 32, 70, 41, 169, 79, 240, 0, 10, 255,
-        247, 245, 251, 205, 248, 24, 160, 6, 153, 44, 35, 75, 67, 19, 170, 212,
-        88, 2, 235, 3, 9, 0, 44, 0, 240, 3, 129, 2, 34, 47, 168, 0, 33, 255,
-        247, 44, 248, 58, 154, 43, 104, 42, 185, 48, 169, 11, 154, 203, 24,
-        3, 248, 4, 44, 4, 224, 1, 43, 4, 191, 11, 155, 141, 248, 189, 48, 79,
-        70, 176, 70, 134, 74, 33, 120, 18, 104, 1, 240, 73, 3, 18, 248, 3, 144,
-        48, 170, 7, 235, 137, 3, 91, 105, 4, 145, 12, 147, 2, 235, 9, 3, 19,
-        248, 4, 60, 5, 147, 1, 240, 48, 3, 27, 17, 217, 28, 9, 145, 35, 177,
-        170, 104, 122, 75, 83, 248, 34, 32, 0, 224, 0, 34, 123, 104, 8, 146,
-        83, 248, 41, 48, 16, 147, 187, 104, 83, 248, 41, 48, 13, 147, 99, 120,
-        2, 52, 89, 30, 14, 147, 15, 148, 7, 145, 38, 70, 176, 224, 115, 120,
-        16, 154, 9, 153, 2, 235, 67, 3, 10, 147, 8, 155, 139, 66, 24, 219, 186,
-        241, 0, 15, 64, 240, 159, 128, 5, 154, 0, 42, 0, 240, 155, 128, 16,
-        70, 10, 153, 12, 154, 235, 104, 255, 247, 174, 249, 0, 40, 0, 240, 146,
-        128, 150, 248, 0, 160, 186, 241, 128, 10, 24, 191, 79, 240, 1, 10, 137,
-        224, 8, 155, 244, 92, 128, 44, 9, 208, 4, 153, 139, 7, 2, 213, 17, 154,
-        164, 26, 228, 178, 107, 104, 156, 66, 200, 191, 220, 178, 5, 155, 0,
-        43, 59, 208, 24, 70, 10, 153, 12, 154, 235, 104, 255, 247, 140, 249,
-        0, 40, 51, 208, 177, 120, 13, 152, 254, 247, 240, 255, 144, 248, 0,
-        192, 41, 70, 132, 68, 131, 70, 82, 70, 101, 70, 31, 224, 3, 155, 27,
-        248, 1, 175, 131, 177, 2, 145, 1, 146, 254, 247, 173, 255, 79, 234,
-        154, 3, 192, 92, 10, 240, 3, 3, 91, 0, 80, 250, 3, 243, 19, 240, 3,
-        15, 2, 153, 1, 154, 10, 208, 24, 249, 10, 48, 19, 241, 127, 15, 3, 208,
-        163, 66, 3, 221, 128, 51, 1, 208, 8, 248, 10, 64, 171, 69, 221, 209,
-        146, 70, 13, 70, 128, 44, 24, 191, 79, 240, 1, 10, 3, 153, 0, 41, 57,
-        208, 185, 241, 0, 15, 54, 209, 8, 70, 122, 105, 10, 153, 75, 70, 255,
-        247, 74, 249, 0, 40, 46, 208, 177, 120, 13, 152, 254, 247, 174, 255,
-        1, 120, 172, 70, 9, 24, 131, 70, 82, 70, 13, 70, 31, 224, 27, 248, 1,
-        175, 1, 146, 205, 248, 8, 192, 254, 247, 109, 255, 79, 234, 154, 3,
-        192, 92, 10, 240, 3, 3, 91, 0, 80, 250, 3, 243, 19, 240, 3, 15, 1, 154,
-        221, 248, 8, 192, 10, 209, 24, 249, 10, 48, 19, 241, 127, 15, 3, 208,
-        163, 66, 3, 221, 128, 51, 1, 208, 8, 248, 10, 64, 171, 69, 221, 209,
-        146, 70, 101, 70, 7, 155, 9, 154, 1, 59, 182, 24, 7, 147, 7, 153, 1,
-        49, 127, 244, 75, 175, 9, 154, 14, 155, 15, 153, 3, 251, 2, 20, 4, 154,
-        80, 7, 63, 245, 19, 175, 70, 70, 6, 155, 1, 51, 2, 43, 6, 147, 127,
-        244, 237, 174, 186, 241, 0, 15, 16, 208, 6, 241, 178, 3, 22, 248, 1,
-        43, 130, 240, 128, 2, 1, 42, 2, 216, 128, 34, 6, 248, 1, 44, 179, 66,
-        244, 216, 0, 32, 3, 224, 1, 32, 1, 224, 79, 240, 255, 48, 49, 176, 189,
-        232, 240, 143, 136, 50, 4, 0, 160, 224, 3, 0, 45, 233, 240, 79, 139,
-        70, 161, 176, 146, 70, 4, 70, 0, 40, 0, 240, 168, 128, 0, 41, 0, 240,
-        165, 128, 0, 42, 0, 240, 162, 128, 8, 70, 25, 34, 0, 33, 254, 247, 247,
-        254, 80, 70, 0, 33, 25, 34, 254, 247, 242, 254, 32, 70, 1, 33, 10, 170,
-        254, 247, 55, 255, 0, 40, 0, 240, 144, 128, 10, 155, 51, 177, 218, 28,
-        10, 146, 219, 120, 2, 235, 67, 2, 1, 50, 10, 146, 32, 70, 3, 33, 21,
-        170, 254, 247, 38, 255, 0, 40, 127, 208, 79, 240, 0, 9, 44, 35, 3, 251,
-        9, 243, 10, 168, 0, 235, 3, 8, 195, 88, 0, 43, 109, 208, 71, 70, 205,
-        248, 36, 144, 25, 120, 185, 70, 1, 240, 73, 2, 1, 145, 56, 73, 1, 152,
-        9, 104, 142, 92, 90, 120, 2, 51, 4, 147, 0, 240, 48, 3, 27, 17, 3, 51,
-        5, 147, 123, 104, 221, 248, 16, 128, 83, 248, 38, 48, 0, 46, 20, 191,
-        81, 70, 89, 70, 7, 147, 7, 235, 134, 3, 91, 105, 2, 241, 255, 60, 6,
-        147, 51, 70, 103, 70, 70, 70, 220, 70, 3, 146, 2, 145, 211, 70, 152,
-        70, 50, 224, 115, 120, 7, 154, 2, 235, 67, 3, 8, 147, 9, 235, 136, 3,
-        91, 105, 93, 104, 51, 120, 128, 43, 35, 208, 6, 155, 211, 248, 0, 160,
-        28, 224, 44, 120, 22, 224, 156, 177, 32, 70, 8, 153, 6, 154, 0, 35,
-        205, 248, 0, 192, 255, 247, 95, 248, 221, 248, 0, 192, 64, 177, 4, 240,
-        7, 2, 1, 33, 145, 64, 2, 152, 227, 16, 194, 92, 10, 67, 194, 84, 171,
-        120, 228, 24, 107, 120, 156, 66, 229, 221, 3, 53, 26, 241, 255, 58,
-        223, 210, 5, 153, 1, 63, 118, 24, 121, 28, 202, 209, 3, 168, 7, 200,
-        0, 251, 2, 19, 1, 154, 218, 70, 82, 7, 79, 70, 227, 70, 150, 212, 221,
-        248, 36, 144, 9, 241, 1, 9, 185, 241, 2, 15, 131, 209, 0, 32, 0, 224,
-        1, 32, 33, 176, 189, 232, 240, 143, 0, 191, 136, 50, 4, 0, 45, 233,
-        240, 67, 23, 70, 141, 176, 30, 70, 32, 179, 1, 41, 34, 216, 11, 179,
-        1, 170, 254, 247, 145, 254, 232, 177, 1, 155, 219, 177, 2, 154, 220,
-        120, 210, 248, 0, 128, 221, 248, 24, 144, 29, 29, 1, 60, 14, 224, 105,
-        120, 56, 70, 8, 235, 65, 1, 74, 70, 0, 35, 255, 247, 11, 248, 1, 60,
-        24, 177, 43, 120, 0, 32, 51, 96, 5, 224, 2, 53, 96, 28, 238, 209, 32,
-        70, 0, 224, 1, 32, 13, 176, 189, 232, 240, 131, 48, 181, 133, 176, 1,
-        144, 13, 70, 20, 70, 8, 179, 2, 179, 1, 168, 255, 247, 13, 249, 3, 168,
-        1, 153, 255, 247, 3, 249, 0, 32, 3, 169, 2, 170, 141, 248, 14, 80, 255,
-        247, 12, 249, 56, 185, 1, 32, 3, 169, 2, 170, 255, 247, 6, 249, 104,
-        177, 1, 33, 0, 224, 0, 33, 64, 104, 67, 28, 9, 208, 32, 70, 2, 154,
-        254, 247, 52, 254, 0, 32, 3, 224, 1, 32, 1, 224, 79, 240, 255, 48, 5,
-        176, 48, 189, 48, 181, 133, 176, 4, 70, 1, 145, 21, 70, 0, 41, 47, 208,
-        0, 42, 45, 208, 1, 168, 255, 247, 221, 248, 32, 70, 3, 170, 2, 169,
-        254, 247, 17, 254, 48, 33, 2, 152, 254, 247, 244, 253, 3, 70, 89, 104,
-        2, 152, 254, 247, 254, 253, 3, 155, 12, 36, 4, 251, 3, 4, 1, 154, 2,
-        152, 33, 70, 255, 247, 4, 249, 2, 70, 40, 177, 131, 120, 255, 43, 16,
-        208, 43, 96, 0, 32, 15, 224, 2, 155, 1, 43, 10, 208, 1, 32, 33, 70,
-        2, 144, 255, 247, 192, 248, 4, 70, 0, 40, 231, 209, 1, 224, 1, 32, 1,
-        224, 79, 240, 255, 48, 5, 176, 48, 189, 1, 32, 255, 247, 3, 186, 0,
-        0, 248, 181, 5, 70, 15, 70, 81, 177, 2, 41, 10, 209, 0, 32, 254, 247,
-        179, 253, 6, 104, 214, 241, 1, 6, 56, 191, 0, 38, 2, 224, 1, 38, 0,
-        224, 0, 38, 48, 70, 254, 247, 167, 253, 2, 47, 66, 107, 45, 216, 3,
-        104, 75, 179, 4, 45, 41, 216, 223, 232, 5, 240, 3, 6, 9, 12, 20, 0,
-        2, 241, 14, 4, 22, 224, 2, 241, 34, 4, 19, 224, 2, 241, 52, 4, 16, 224,
-        92, 107, 20, 240, 2, 4, 24, 208, 2, 241, 82, 4, 12, 73, 9, 224, 92,
-        107, 20, 240, 64, 4, 16, 208, 48, 70, 25, 110, 254, 247, 157, 253, 4,
-        70, 8, 73, 76, 177, 32, 70, 254, 247, 88, 253, 0, 40, 8, 191, 0, 36,
-        2, 224, 28, 70, 0, 224, 0, 36, 32, 70, 248, 189, 0, 191, 246, 203, 135,
-        0, 60, 199, 136, 0, 112, 181, 13, 70, 20, 70, 255, 247, 52, 250, 33,
-        70, 3, 70, 0, 34, 40, 70, 189, 232, 112, 64, 255, 247, 179, 185, 55,
-        181, 2, 171, 67, 248, 4, 29, 5, 70, 20, 70, 25, 70, 1, 34, 0, 35, 255,
-        247, 168, 249, 40, 70, 1, 153, 34, 70, 255, 247, 138, 250, 62, 189,
-        55, 181, 2, 171, 67, 248, 4, 29, 5, 70, 20, 70, 25, 70, 1, 34, 0, 35,
-        255, 247, 151, 249, 40, 70, 1, 153, 34, 70, 255, 247, 21, 255, 62, 189,
-        112, 181, 13, 70, 20, 70, 255, 247, 61, 255, 33, 70, 3, 70, 0, 34, 40,
-        70, 189, 232, 112, 64, 255, 247, 132, 185, 56, 181, 3, 34, 13, 70, 10,
-        73, 4, 70, 222, 243, 129, 244, 16, 185, 32, 70, 8, 73, 7, 224, 32, 70,
-        7, 73, 3, 34, 222, 243, 120, 244, 32, 185, 6, 73, 32, 70, 42, 70, 222,
-        243, 150, 244, 0, 32, 56, 189, 155, 153, 136, 0, 235, 156, 136, 0, 238,
-        156, 136, 0, 242, 156, 136, 0, 45, 233, 240, 79, 137, 176, 221, 248,
-        76, 144, 0, 35, 20, 172, 185, 241, 3, 15, 130, 70, 144, 70, 18, 158,
-        148, 232, 144, 8, 5, 104, 1, 147, 2, 147, 12, 217, 4, 34, 1, 168, 49,
-        70, 220, 247, 61, 255, 185, 241, 7, 15, 4, 217, 2, 168, 49, 29, 4, 34,
-        220, 247, 53, 255, 184, 241, 1, 15, 50, 208, 4, 211, 184, 241, 6, 15,
-        64, 240, 203, 128, 159, 224, 213, 248, 92, 1, 41, 240, 228, 221, 222,
-        243, 50, 244, 8, 63, 1, 48, 135, 66, 192, 240, 194, 128, 213, 248, 92,
-        1, 41, 240, 219, 221, 0, 38, 1, 70, 3, 34, 32, 70, 222, 243, 79, 244,
-        230, 112, 213, 248, 92, 1, 41, 240, 16, 222, 96, 96, 213, 248, 92, 1,
-        41, 240, 201, 221, 7, 70, 213, 248, 92, 1, 41, 240, 196, 221, 222, 243,
-        18, 244, 57, 70, 66, 28, 4, 241, 8, 0, 222, 243, 56, 244, 161, 224,
-        32, 70, 82, 73, 222, 243, 223, 243, 176, 185, 4, 241, 8, 1, 4, 34, 5,
-        168, 220, 247, 244, 254, 163, 121, 98, 121, 27, 4, 67, 234, 2, 35, 34,
-        121, 213, 248, 92, 1, 19, 67, 226, 121, 5, 169, 67, 234, 2, 98, 253,
-        247, 255, 255, 6, 70, 133, 224, 0, 33, 4, 34, 3, 168, 222, 243, 54,
-        243, 33, 70, 3, 47, 180, 191, 58, 70, 3, 34, 3, 168, 222, 243, 14, 244,
-        3, 169, 4, 34, 4, 168, 220, 247, 209, 254, 3, 168, 4, 33, 255, 247,
-        89, 255, 6, 70, 0, 40, 108, 209, 11, 47, 16, 221, 167, 121, 99, 121,
-        63, 4, 71, 234, 3, 39, 35, 121, 5, 168, 31, 67, 227, 121, 4, 241, 8,
-        1, 4, 34, 71, 234, 3, 103, 220, 247, 184, 254, 3, 224, 141, 248, 20,
-        0, 79, 240, 255, 55, 5, 168, 4, 33, 255, 247, 59, 255, 6, 70, 0, 40,
-        78, 209, 157, 248, 20, 48, 213, 248, 92, 1, 27, 185, 3, 169, 42, 240,
-        56, 220, 3, 224, 5, 169, 58, 70, 42, 240, 55, 220, 6, 70, 0, 40, 62,
-        209, 40, 70, 7, 240, 213, 218, 10, 241, 4, 0, 4, 169, 4, 34, 220, 247,
-        147, 254, 213, 248, 136, 1, 0, 40, 49, 208, 11, 240, 177, 220, 46, 224,
-        0, 33, 4, 34, 5, 168, 222, 243, 223, 242, 5, 168, 49, 70, 3, 34, 222,
-        243, 186, 243, 0, 35, 35, 96, 6, 168, 255, 247, 244, 248, 16, 224, 4,
-        168, 5, 169, 2, 34, 222, 243, 139, 243, 80, 185, 35, 104, 11, 241, 255,
-        50, 147, 66, 5, 210, 7, 153, 4, 235, 131, 2, 1, 51, 81, 96, 35, 96,
-        6, 168, 4, 169, 7, 170, 255, 247, 182, 254, 0, 40, 231, 208, 0, 38,
-        4, 224, 111, 240, 22, 6, 1, 224, 111, 240, 13, 6, 48, 70, 9, 176, 189,
-        232, 240, 143, 0, 191, 105, 86, 136, 0, 45, 233, 240, 65, 4, 104, 138,
-        176, 212, 248, 124, 129, 5, 70, 216, 248, 4, 48, 212, 248, 168, 116,
-        198, 88, 35, 104, 27, 126, 0, 43, 0, 240, 229, 128, 32, 105, 46, 240,
-        68, 221, 3, 70, 24, 177, 160, 104, 228, 247, 68, 255, 219, 224, 143,
-        179, 215, 248, 248, 32, 146, 104, 22, 58, 1, 42, 43, 216, 2, 34, 212,
-        248, 116, 1, 57, 70, 12, 240, 39, 216, 1, 33, 79, 240, 255, 51, 32,
-        70, 58, 70, 46, 240, 4, 221, 215, 248, 248, 48, 155, 104, 22, 43, 10,
-        209, 212, 248, 208, 36, 212, 248, 204, 52, 2, 50, 56, 70, 83, 248, 34,
-        16, 249, 247, 119, 254, 183, 224, 215, 248, 240, 48, 1, 33, 147, 249,
-        52, 48, 56, 70, 211, 241, 1, 3, 7, 241, 188, 2, 56, 191, 0, 35, 249,
-        247, 212, 252, 168, 224, 171, 121, 3, 179, 115, 122, 1, 43, 29, 209,
-        212, 248, 36, 1, 7, 169, 42, 70, 69, 240, 194, 217, 15, 224, 2, 125,
-        216, 248, 8, 48, 210, 7, 195, 88, 9, 212, 144, 248, 36, 32, 151, 7,
-        5, 213, 208, 248, 168, 113, 23, 185, 27, 120, 2, 43, 7, 209, 212, 248,
-        36, 1, 7, 169, 18, 240, 48, 250, 0, 40, 232, 209, 1, 39, 171, 121, 0,
-        43, 43, 208, 115, 122, 1, 43, 44, 209, 40, 70, 241, 136, 0, 240, 191,
-        217, 212, 248, 116, 1, 41, 70, 2, 34, 0, 35, 11, 240, 204, 223, 212,
-        248, 36, 1, 7, 169, 42, 70, 69, 240, 146, 217, 14, 224, 216, 248, 8,
-        48, 194, 88, 3, 125, 217, 7, 8, 212, 144, 248, 36, 48, 155, 7, 4, 213,
-        208, 248, 168, 49, 11, 185, 19, 112, 83, 112, 212, 248, 36, 1, 7, 169,
-        18, 240, 1, 250, 0, 40, 233, 209, 24, 224, 115, 121, 11, 177, 51, 105,
-        163, 177, 212, 248, 116, 1, 41, 70, 11, 240, 135, 223, 128, 7, 13, 213,
-        171, 121, 3, 185, 51, 97, 40, 70, 241, 136, 0, 240, 136, 217, 212, 248,
-        116, 1, 41, 70, 2, 34, 0, 35, 11, 240, 149, 223, 171, 121, 59, 179,
-        115, 122, 1, 43, 36, 209, 31, 187, 212, 248, 116, 1, 41, 70, 2, 34,
-        59, 70, 11, 240, 136, 223, 212, 248, 36, 1, 7, 169, 42, 70, 69, 240,
-        78, 217, 14, 224, 216, 248, 8, 48, 194, 88, 3, 125, 217, 7, 8, 212,
-        144, 248, 36, 48, 155, 7, 4, 213, 208, 248, 168, 49, 11, 185, 19, 112,
-        83, 112, 212, 248, 36, 1, 7, 169, 18, 240, 189, 249, 0, 40, 233, 209,
-        171, 121, 3, 177, 103, 177, 50, 29, 3, 146, 1, 34, 0, 35, 4, 146, 32,
-        70, 41, 70, 80, 34, 0, 147, 1, 147, 2, 147, 255, 243, 73, 243, 0, 35,
-        115, 113, 51, 113, 10, 176, 189, 232, 240, 129, 0, 0, 45, 233, 240,
-        79, 135, 176, 31, 70, 16, 155, 7, 241, 2, 9, 163, 241, 2, 8, 208, 248,
-        0, 160, 6, 70, 12, 70, 147, 70, 72, 70, 37, 34, 65, 70, 3, 147, 225,
-        247, 74, 248, 218, 248, 0, 32, 5, 70, 3, 155, 16, 177, 65, 120, 2, 41,
-        10, 216, 210, 248, 136, 32, 80, 70, 17, 111, 1, 49, 17, 103, 89, 70,
-        58, 70, 7, 240, 82, 223, 70, 224, 146, 248, 79, 112, 23, 240, 3, 7,
-        30, 208, 72, 70, 65, 70, 62, 34, 225, 247, 45, 248, 32, 177, 67, 120,
-        1, 43, 1, 209, 135, 120, 19, 224, 53, 34, 6, 171, 3, 248, 1, 45, 1,
-        34, 0, 146, 72, 70, 65, 70, 25, 74, 222, 243, 120, 244, 32, 177, 67,
-        120, 5, 43, 3, 209, 135, 121, 2, 224, 7, 70, 0, 224, 0, 39, 163, 121,
-        3, 187, 35, 122, 243, 177, 11, 241, 16, 0, 4, 241, 188, 1, 6, 34, 220,
-        247, 243, 252, 129, 70, 168, 185, 115, 104, 80, 70, 84, 248, 3, 128,
-        171, 120, 58, 70, 136, 248, 4, 48, 43, 121, 136, 248, 5, 48, 233, 120,
-        4, 240, 136, 222, 136, 248, 8, 144, 168, 248, 6, 0, 33, 70, 48, 70,
-        43, 240, 142, 216, 7, 176, 189, 232, 240, 143, 0, 191, 178, 179, 3,
-        0, 45, 233, 240, 65, 67, 104, 6, 104, 205, 88, 209, 248, 244, 112, 108,
-        121, 60, 185, 150, 248, 116, 50, 35, 240, 2, 3, 134, 248, 116, 50, 189,
-        232, 240, 129, 1, 60, 228, 178, 108, 113, 116, 185, 41, 104, 176, 104,
-        243, 243, 139, 245, 250, 141, 176, 104, 41, 104, 9, 42, 136, 191, 10,
-        34, 35, 70, 189, 232, 240, 65, 243, 243, 90, 181, 189, 232, 240, 129,
-        45, 233, 240, 65, 152, 70, 67, 104, 5, 104, 7, 70, 203, 88, 16, 104,
-        22, 70, 88, 96, 146, 136, 56, 70, 26, 129, 12, 70, 43, 240, 146, 221,
-        184, 241, 0, 15, 4, 208, 32, 70, 113, 136, 0, 240, 143, 216, 12, 224,
-        3, 34, 19, 70, 213, 248, 116, 1, 33, 70, 11, 240, 155, 222, 149, 248,
-        116, 50, 67, 240, 2, 3, 133, 248, 116, 50, 40, 70, 33, 70, 255, 243,
-        155, 243, 40, 70, 33, 70, 1, 34, 189, 232, 240, 65, 255, 243, 220, 179,
-        3, 104, 2, 70, 112, 181, 24, 70, 11, 179, 1, 120, 16, 76, 3, 70, 101,
-        92, 1, 48, 173, 6, 1, 212, 33, 185, 1, 224, 0, 41, 244, 209, 0, 32,
-        0, 224, 24, 70, 29, 70, 19, 248, 1, 27, 102, 92, 22, 240, 32, 15, 1,
-        208, 25, 185, 7, 224, 0, 41, 244, 209, 4, 224, 43, 70, 0, 33, 3, 248,
-        1, 27, 0, 224, 0, 35, 19, 96, 112, 189, 112, 189, 22, 119, 135, 0, 3,
-        70, 2, 73, 0, 104, 2, 74, 229, 247, 92, 191, 34, 227, 3, 0, 169, 89,
-        2, 0, 8, 181, 67, 126, 43, 177, 0, 105, 26, 34, 251, 247, 117, 254,
-        0, 32, 8, 189, 111, 240, 10, 0, 8, 189, 8, 181, 0, 105, 24, 34, 251,
-        247, 107, 254, 0, 32, 8, 189, 0, 0, 56, 181, 4, 70, 13, 70, 8, 70, 7,
-        73, 222, 243, 19, 243, 212, 248, 180, 66, 5, 224, 34, 104, 40, 70, 4,
-        73, 222, 243, 11, 243, 228, 104, 0, 44, 247, 209, 32, 70, 56, 189, 46,
-        227, 3, 0, 68, 78, 136, 0, 248, 181, 3, 104, 14, 70, 211, 248, 220,
-        64, 84, 185, 12, 224, 34, 70, 29, 73, 48, 70, 222, 243, 246, 242, 32,
-        70, 222, 243, 47, 241, 1, 48, 36, 24, 35, 120, 0, 43, 242, 209, 79,
-        244, 128, 80, 226, 247, 216, 254, 5, 70, 0, 179, 79, 244, 128, 81, 227,
-        247, 89, 248, 7, 70, 240, 185, 43, 120, 147, 177, 44, 70, 9, 224, 34,
-        70, 15, 73, 48, 70, 222, 243, 217, 242, 32, 70, 222, 243, 18, 241, 1,
-        48, 36, 24, 99, 27, 179, 245, 128, 95, 2, 218, 35, 120, 0, 43, 238,
-        209, 0, 44, 20, 191, 0, 39, 111, 240, 29, 7, 3, 224, 111, 240, 26, 7,
-        56, 70, 248, 189, 40, 70, 226, 247, 177, 254, 249, 231, 0, 191, 68,
-        78, 136, 0, 248, 181, 12, 70, 23, 70, 208, 248, 180, 98, 111, 240, 22,
-        5, 18, 224, 32, 70, 49, 104, 222, 243, 196, 240, 96, 185, 115, 104,
-        176, 104, 57, 70, 152, 71, 123, 104, 21, 241, 23, 15, 8, 191, 0, 37,
-        51, 177, 0, 40, 24, 191, 5, 70, 246, 104, 0, 46, 234, 209, 1, 224, 111,
-        240, 13, 5, 40, 70, 248, 189, 240, 181, 135, 176, 12, 70, 22, 70, 25,
-        70, 5, 70, 12, 154, 1, 168, 222, 243, 122, 242, 166, 25, 35, 70, 179,
-        66, 26, 70, 65, 208, 17, 120, 1, 51, 0, 41, 248, 209, 68, 224, 33, 70,
-        50, 70, 6, 174, 220, 247, 177, 251, 70, 248, 4, 125, 48, 70, 255, 247,
-        26, 255, 4, 70, 48, 70, 255, 247, 22, 255, 6, 70, 4, 179, 32, 177, 1,
-        168, 29, 73, 34, 70, 222, 243, 112, 242, 33, 70, 40, 70, 1, 170, 255,
-        247, 175, 255, 4, 70, 152, 185, 14, 224, 23, 73, 50, 70, 1, 168, 222,
-        243, 99, 242, 40, 70, 49, 70, 1, 170, 255, 247, 162, 255, 48, 185, 5,
-        168, 255, 247, 248, 254, 6, 70, 0, 46, 238, 209, 0, 224, 4, 70, 56,
-        70, 226, 247, 67, 254, 3, 155, 1, 154, 147, 66, 9, 209, 2, 154, 58,
-        177, 0, 34, 26, 112, 4, 224, 111, 240, 1, 4, 1, 224, 111, 240, 26, 4,
-        32, 70, 7, 176, 240, 189, 22, 27, 1, 54, 48, 70, 226, 247, 42, 254,
-        7, 70, 0, 40, 178, 209, 241, 231, 76, 227, 3, 0, 45, 233, 240, 67, 137,
-        176, 221, 248, 68, 128, 0, 35, 184, 241, 3, 15, 5, 70, 20, 70, 221,
-        248, 64, 144, 18, 158, 19, 159, 7, 147, 4, 217, 7, 168, 73, 70, 4, 34,
-        220, 247, 81, 251, 40, 70, 21, 153, 252, 247, 62, 253, 20, 177, 2, 44,
-        25, 209, 14, 224, 15, 75, 27, 104, 219, 3, 2, 213, 52, 112, 32, 70,
-        19, 224, 40, 70, 73, 70, 66, 70, 51, 70, 0, 151, 255, 247, 113, 255,
-        11, 224, 3, 168, 49, 70, 58, 70, 222, 243, 239, 241, 40, 70, 3, 169,
-        255, 247, 255, 254, 1, 224, 111, 240, 22, 0, 9, 176, 189, 232, 240,
-        131, 0, 191, 8, 7, 0, 0, 56, 181, 139, 120, 28, 29, 162, 66, 48, 211,
-        10, 120, 1, 42, 48, 209, 19, 43, 52, 191, 26, 70, 19, 34, 75, 120, 2,
-        43, 4, 208, 3, 43, 30, 208, 1, 43, 40, 209, 1, 224, 0, 35, 21, 224,
-        0, 35, 7, 224, 204, 24, 37, 121, 144, 248, 35, 64, 1, 51, 44, 67, 128,
-        248, 35, 64, 1, 48, 147, 66, 244, 219, 15, 224, 204, 24, 37, 121, 144,
-        248, 35, 64, 1, 51, 44, 64, 128, 248, 35, 64, 1, 48, 147, 66, 244, 219,
-        3, 224, 36, 48, 4, 49, 220, 247, 244, 250, 0, 32, 56, 189, 111, 240,
-        13, 0, 56, 189, 111, 240, 36, 0, 56, 189, 0, 32, 56, 189, 56, 181, 4,
-        70, 16, 70, 138, 120, 21, 29, 171, 66, 15, 211, 11, 120, 1, 43, 15,
-        209, 19, 42, 40, 191, 19, 34, 19, 35, 130, 112, 195, 112, 4, 241, 36,
-        1, 4, 48, 220, 247, 213, 250, 0, 32, 56, 189, 111, 240, 13, 0, 56, 189,
-        111, 240, 36, 0, 56, 189, 8, 181, 0, 241, 36, 3, 16, 34, 8, 70, 25,
-        70, 220, 247, 197, 250, 0, 32, 8, 189, 56, 181, 16, 34, 4, 70, 36, 48,
-        220, 247, 189, 250, 44, 33, 32, 70, 165, 104, 43, 240, 158, 222, 2,
-        28, 24, 191, 1, 34, 40, 70, 1, 33, 233, 247, 95, 252, 0, 32, 56, 189,
-        0, 0, 45, 233, 240, 79, 133, 176, 155, 70, 16, 157, 14, 155, 4, 70,
-        14, 70, 145, 70, 3, 147, 15, 159, 208, 248, 8, 128, 245, 185, 216, 248,
-        4, 16, 7, 245, 140, 114, 115, 104, 43, 240, 123, 221, 5, 70, 56, 185,
-        32, 70, 49, 70, 42, 70, 5, 176, 189, 232, 240, 79, 43, 240, 25, 157,
-        32, 70, 49, 70, 1, 34, 43, 240, 20, 221, 171, 104, 79, 240, 1, 10, 206,
-        51, 171, 96, 171, 137, 206, 59, 171, 129, 1, 224, 79, 240, 0, 10, 172,
-        104, 73, 70, 6, 34, 4, 241, 6, 9, 32, 70, 220, 247, 119, 250, 89, 70,
-        6, 34, 72, 70, 220, 247, 114, 250, 72, 70, 33, 70, 6, 34, 220, 247,
-        90, 250, 24, 185, 163, 121, 131, 240, 2, 3, 163, 113, 111, 240, 119,
-        3, 35, 115, 108, 35, 79, 240, 0, 9, 99, 115, 79, 240, 1, 11, 111, 240,
-        127, 3, 163, 115, 37, 73, 3, 34, 132, 248, 15, 176, 132, 248, 18, 144,
-        4, 241, 19, 0, 220, 247, 82, 250, 7, 241, 56, 3, 155, 178, 26, 10, 66,
-        234, 3, 35, 35, 130, 132, 248, 22, 144, 132, 248, 23, 176, 4, 241, 24,
-        1, 186, 241, 0, 15, 5, 208, 141, 232, 128, 2, 64, 70, 50, 70, 3, 155,
-        6, 224, 205, 248, 0, 160, 205, 248, 4, 160, 64, 70, 50, 70, 83, 70,
-        43, 240, 115, 219, 79, 240, 0, 9, 7, 241, 74, 3, 72, 52, 171, 129, 4,
-        248, 7, 144, 228, 25, 64, 70, 41, 70, 132, 248, 1, 144, 43, 240, 174,
-        219, 113, 107, 64, 70, 252, 247, 17, 252, 115, 107, 1, 70, 26, 121,
-        64, 70, 2, 42, 12, 191, 26, 105, 74, 70, 43, 70, 8, 240, 99, 217, 0,
-        32, 5, 176, 189, 232, 240, 143, 0, 191, 182, 179, 3, 0, 151, 41, 112,
-        181, 4, 70, 13, 70, 22, 70, 17, 216, 36, 48, 18, 177, 223, 243, 38,
-        240, 1, 224, 222, 243, 161, 244, 44, 45, 11, 209, 1, 33, 50, 28, 160,
-        104, 24, 191, 1, 34, 233, 247, 166, 251, 0, 32, 112, 189, 79, 240, 255,
-        48, 112, 189, 0, 32, 112, 189, 3, 137, 32, 43, 9, 208, 3, 216, 59, 177,
-        16, 43, 15, 209, 4, 224, 48, 43, 2, 208, 128, 43, 10, 209, 2, 224, 3,
-        104, 219, 105, 4, 224, 66, 104, 3, 104, 146, 121, 219, 105, 26, 185,
-        24, 104, 112, 71, 0, 32, 112, 71, 0, 32, 112, 71, 45, 233, 243, 65,
-        176, 248, 18, 128, 135, 138, 198, 138, 132, 121, 128, 68, 199, 25, 134,
-        25, 244, 185, 37, 70, 5, 240, 15, 3, 54, 248, 19, 16, 1, 51, 54, 248,
-        19, 32, 138, 66, 14, 208, 12, 75, 82, 26, 24, 25, 128, 136, 79, 240,
-        12, 14, 0, 144, 146, 178, 8, 235, 1, 0, 227, 88, 14, 251, 1, 113, 46,
-        240, 122, 223, 1, 53, 8, 52, 13, 45, 227, 209, 0, 32, 1, 224, 111, 240,
-        22, 0, 189, 232, 252, 129, 160, 227, 3, 0, 112, 181, 75, 120, 12, 70,
-        4, 43, 15, 217, 0, 37, 29, 75, 6, 38, 6, 251, 5, 54, 160, 28, 49, 70,
-        5, 34, 220, 247, 132, 249, 8, 185, 112, 121, 112, 189, 1, 53, 3, 45,
-        240, 209, 99, 120, 3, 43, 15, 217, 0, 37, 21, 78, 5, 235, 133, 3, 246,
-        24, 160, 28, 49, 70, 4, 34, 220, 247, 113, 249, 8, 185, 48, 121, 112,
-        189, 1, 53, 15, 45, 240, 209, 99, 120, 2, 43, 18, 217, 2, 52, 32, 70,
-        12, 73, 3, 34, 220, 247, 98, 249, 10, 77, 48, 177, 32, 70, 41, 29, 3,
-        34, 220, 247, 91, 249, 48, 185, 1, 32, 5, 235, 128, 5, 232, 120, 112,
-        189, 250, 32, 112, 189, 250, 32, 112, 189, 123, 233, 135, 0, 12, 228,
-        3, 0, 141, 233, 135, 0, 248, 181, 6, 158, 7, 159, 0, 35, 51, 112, 5,
-        70, 59, 96, 12, 70, 49, 177, 74, 120, 2, 42, 3, 217, 137, 120, 226,
-        120, 145, 66, 4, 211, 40, 70, 1, 33, 8, 240, 166, 222, 42, 224, 208,
-        248, 4, 33, 82, 120, 18, 177, 25, 70, 8, 240, 158, 222, 107, 124, 27,
-        185, 40, 70, 225, 120, 21, 240, 252, 219, 163, 120, 59, 96, 35, 121,
-        3, 240, 1, 3, 51, 112, 181, 248, 214, 16, 35, 121, 138, 4, 146, 12,
-        3, 240, 254, 3, 210, 16, 154, 66, 96, 120, 12, 211, 3, 56, 192, 24,
-        130, 66, 10, 210, 164, 24, 227, 26, 88, 121, 1, 240, 7, 1, 8, 65, 0,
-        240, 1, 0, 248, 189, 0, 32, 248, 189, 0, 32, 248, 189, 45, 233, 240,
-        71, 77, 104, 7, 70, 8, 70, 137, 70, 206, 104, 213, 248, 68, 131, 255,
-        247, 30, 255, 4, 70, 238, 177, 115, 120, 24, 43, 26, 208, 7, 43, 24,
-        208, 59, 104, 91, 107, 0, 43, 0, 240, 215, 128, 213, 248, 204, 48, 19,
-        240, 2, 1, 64, 240, 209, 128, 66, 104, 35, 244, 128, 115, 34, 244, 0,
-        18, 34, 240, 64, 2, 66, 96, 197, 248, 204, 48, 1, 34, 230, 247, 98,
-        249, 194, 224, 185, 248, 8, 48, 32, 43, 11, 208, 4, 216, 75, 177, 16,
-        43, 64, 240, 186, 128, 52, 224, 48, 43, 50, 208, 128, 43, 64, 240, 180,
-        128, 138, 224, 99, 104, 35, 244, 0, 19, 35, 240, 64, 3, 99, 96, 59,
-        104, 91, 107, 0, 43, 0, 240, 168, 128, 213, 248, 204, 16, 17, 240, 2,
-        1, 64, 240, 162, 128, 32, 70, 1, 34, 230, 247, 60, 249, 0, 46, 0, 240,
-        155, 128, 99, 104, 67, 240, 64, 3, 99, 96, 152, 248, 39, 48, 0, 43,
-        0, 240, 146, 128, 32, 70, 1, 34, 49, 122, 230, 247, 43, 249, 148, 248,
-        217, 48, 24, 7, 0, 240, 136, 128, 99, 104, 67, 244, 0, 19, 108, 224,
-        98, 104, 213, 248, 4, 145, 34, 240, 64, 2, 98, 96, 213, 248, 204, 32,
-        34, 244, 128, 113, 197, 248, 204, 16, 57, 104, 73, 107, 0, 41, 115,
-        208, 145, 7, 113, 212, 48, 43, 10, 209, 6, 34, 5, 241, 216, 0, 213,
-        248, 240, 16, 220, 247, 130, 248, 0, 48, 24, 191, 1, 32, 0, 224, 1,
-        32, 95, 250, 128, 250, 0, 33, 32, 70, 82, 70, 230, 247, 251, 248, 0,
-        46, 90, 208, 99, 104, 177, 28, 67, 240, 64, 3, 99, 96, 213, 248, 204,
-        48, 64, 70, 67, 244, 128, 115, 197, 248, 204, 48, 114, 120, 220, 247,
-        120, 248, 152, 249, 6, 48, 0, 43, 6, 218, 32, 70, 152, 248, 38, 16,
-        82, 70, 230, 247, 224, 248, 16, 224, 59, 104, 91, 107, 1, 51, 60, 209,
-        97, 104, 202, 5, 57, 213, 17, 240, 128, 97, 6, 209, 1, 35, 137, 248,
-        29, 48, 40, 70, 235, 247, 238, 253, 47, 224, 153, 248, 0, 16, 0, 35,
-        1, 41, 137, 248, 29, 48, 40, 209, 243, 231, 59, 104, 91, 107, 35, 179,
-        213, 248, 204, 48, 3, 244, 129, 115, 179, 245, 128, 127, 29, 209, 60,
-        177, 43, 124, 43, 185, 206, 177, 99, 104, 67, 240, 64, 3, 99, 96, 20,
-        224, 30, 185, 2, 35, 136, 248, 8, 48, 10, 224, 152, 248, 6, 32, 51,
-        122, 83, 64, 27, 7, 9, 208, 64, 70, 177, 28, 24, 34, 220, 247, 49, 248,
-        56, 70, 41, 70, 1, 34, 3, 240, 66, 221, 0, 32, 189, 232, 240, 135, 83,
-        104, 112, 181, 35, 240, 128, 83, 83, 96, 147, 104, 12, 70, 35, 240,
-        254, 99, 147, 96, 75, 120, 21, 70, 67, 177, 136, 28, 0, 33, 222, 243,
-        18, 243, 24, 177, 107, 104, 67, 240, 128, 83, 107, 96, 99, 120, 4, 43,
-        54, 217, 166, 28, 48, 70, 38, 33, 222, 243, 5, 243, 24, 177, 171, 104,
-        67, 244, 128, 19, 171, 96, 48, 70, 39, 33, 222, 243, 252, 242, 24, 177,
-        171, 104, 67, 244, 0, 19, 171, 96, 48, 70, 37, 33, 222, 243, 243, 242,
-        24, 177, 171, 104, 67, 244, 128, 3, 171, 96, 48, 70, 28, 33, 222, 243,
-        234, 242, 24, 177, 171, 104, 67, 244, 0, 3, 171, 96, 48, 70, 20, 33,
-        222, 243, 225, 242, 24, 177, 171, 104, 67, 240, 128, 115, 171, 96, 48,
-        70, 30, 33, 222, 243, 216, 242, 24, 177, 171, 104, 67, 240, 0, 115,
-        171, 96, 99, 120, 7, 43, 10, 217, 160, 28, 62, 33, 222, 243, 204, 242,
-        40, 177, 213, 248, 164, 49, 67, 244, 128, 67, 197, 248, 164, 49, 99,
-        120, 8, 43, 10, 217, 160, 28, 70, 33, 222, 243, 190, 242, 40, 177, 213,
-        248, 164, 49, 67, 240, 32, 3, 197, 248, 164, 49, 99, 120, 8, 43, 10,
-        217, 160, 28, 71, 33, 222, 243, 176, 242, 40, 177, 213, 248, 164, 49,
-        67, 240, 16, 3, 197, 248, 164, 49, 99, 120, 8, 43, 10, 217, 160, 28,
-        70, 33, 222, 243, 162, 242, 40, 177, 213, 248, 164, 49, 67, 240, 32,
-        3, 197, 248, 164, 49, 99, 120, 8, 43, 10, 217, 160, 28, 71, 33, 222,
-        243, 148, 242, 40, 177, 213, 248, 164, 49, 67, 240, 16, 3, 197, 248,
-        164, 49, 112, 189, 248, 181, 208, 248, 240, 48, 4, 70, 13, 70, 152,
-        110, 179, 248, 108, 16, 12, 48, 12, 57, 127, 34, 224, 247, 135, 250,
-        184, 177, 148, 248, 96, 35, 170, 177, 70, 120, 0, 35, 150, 66, 40, 191,
-        22, 70, 26, 70, 10, 224, 231, 24, 193, 24, 151, 248, 97, 115, 137, 120,
-        57, 64, 233, 84, 1, 51, 0, 41, 24, 191, 26, 70, 179, 66, 242, 211, 0,
-        224, 2, 70, 16, 70, 248, 189, 31, 181, 72, 104, 12, 70, 2, 169, 255,
-        247, 209, 255, 2, 70, 96, 177, 227, 105, 127, 32, 0, 147, 2, 169, 163,
-        105, 222, 243, 220, 240, 163, 105, 131, 66, 12, 191, 111, 240, 13, 0,
-        0, 32, 4, 176, 16, 189, 19, 181, 12, 70, 73, 104, 145, 248, 96, 35,
-        218, 177, 35, 137, 32, 43, 2, 208, 176, 43, 0, 208, 43, 185, 33, 70,
-        2, 176, 189, 232, 16, 64, 255, 247, 215, 191, 227, 105, 1, 245, 88,
-        113, 0, 147, 127, 32, 1, 49, 163, 105, 222, 243, 185, 240, 163, 105,
-        131, 66, 20, 191, 0, 32, 111, 240, 13, 0, 0, 224, 16, 70, 2, 176, 16,
-        189, 7, 181, 72, 104, 105, 70, 255, 247, 150, 255, 0, 40, 200, 191,
-        2, 48, 14, 189, 75, 104, 147, 248, 96, 51, 75, 177, 10, 137, 32, 42,
-        2, 208, 176, 42, 0, 208, 10, 185, 255, 247, 235, 191, 152, 28, 112,
-        71, 24, 70, 112, 71, 16, 181, 8, 70, 12, 70, 0, 33, 235, 247, 159, 252,
-        212, 248, 4, 49, 0, 34, 131, 248, 116, 32, 212, 248, 4, 49, 179, 248,
-        114, 32, 2, 177, 218, 98, 32, 70, 13, 240, 54, 249, 212, 248, 4, 49,
-        219, 139, 35, 177, 32, 70, 189, 232, 16, 64, 61, 240, 217, 156, 16,
-        189, 45, 233, 255, 65, 11, 104, 76, 104, 10, 70, 217, 105, 6, 70, 15,
-        104, 161, 121, 212, 248, 4, 81, 212, 248, 68, 131, 0, 41, 64, 240, 135,
-        128, 33, 124, 0, 41, 0, 240, 131, 128, 13, 241, 15, 1, 0, 145, 2, 169,
-        1, 145, 209, 104, 219, 104, 32, 70, 18, 105, 255, 247, 121, 253, 107,
-        108, 0, 43, 116, 209, 0, 40, 53, 208, 43, 120, 2, 43, 4, 209, 48, 70,
-        33, 70, 255, 247, 183, 255, 65, 224, 51, 104, 91, 107, 59, 177, 152,
-        248, 39, 48, 35, 177, 175, 177, 151, 248, 218, 48, 15, 43, 17, 208,
-        43, 122, 35, 177, 48, 70, 33, 70, 7, 240, 147, 221, 47, 224, 79, 240,
-        255, 50, 1, 146, 48, 70, 33, 70, 4, 241, 188, 2, 0, 147, 7, 240, 130,
-        221, 36, 224, 152, 248, 37, 48, 11, 179, 43, 122, 59, 177, 31, 177,
-        123, 104, 35, 240, 0, 99, 123, 96, 32, 70, 253, 243, 182, 246, 32, 70,
-        232, 247, 229, 255, 19, 224, 43, 123, 35, 177, 233, 137, 17, 185, 32,
-        70, 8, 240, 25, 221, 212, 248, 4, 49, 219, 139, 67, 177, 43, 120, 2,
-        43, 5, 209, 43, 106, 1, 43, 2, 209, 32, 70, 61, 240, 74, 220, 214, 248,
-        104, 49, 43, 179, 155, 121, 27, 179, 43, 120, 2, 43, 32, 209, 48, 70,
-        33, 70, 1, 34, 27, 240, 237, 221, 208, 177, 212, 248, 244, 48, 181,
-        248, 114, 32, 219, 141, 48, 70, 219, 8, 154, 66, 44, 191, 234, 98, 235,
-        98, 33, 70, 27, 240, 72, 218, 64, 177, 2, 155, 1, 43, 5, 209, 212, 248,
-        244, 48, 234, 106, 219, 141, 211, 24, 235, 98, 32, 70, 13, 240, 149,
-        248, 0, 32, 4, 176, 189, 232, 240, 129, 0, 0, 45, 233, 247, 67, 5, 105,
-        4, 70, 208, 248, 12, 128, 0, 38, 40, 70, 15, 70, 145, 70, 141, 248,
-        7, 96, 45, 240, 78, 221, 32, 177, 160, 104, 227, 247, 79, 255, 48, 70,
-        250, 224, 174, 109, 50, 1, 4, 213, 213, 248, 148, 48, 88, 106, 2, 240,
-        43, 254, 0, 35, 171, 101, 51, 2, 2, 213, 40, 70, 30, 240, 187, 220,
-        119, 75, 51, 64, 67, 177, 32, 70, 198, 243, 192, 65, 19, 240, 215, 220,
-        32, 70, 65, 70, 9, 240, 243, 219, 176, 7, 12, 213, 35, 104, 147, 248,
-        47, 32, 66, 177, 147, 248, 48, 48, 19, 177, 148, 248, 114, 50, 19, 177,
-        32, 70, 10, 240, 50, 216, 113, 6, 8, 213, 40, 70, 57, 70, 31, 240, 4,
-        218, 24, 177, 171, 109, 67, 240, 64, 3, 171, 101, 178, 0, 17, 213, 40,
-        70, 57, 70, 13, 241, 7, 2, 31, 240, 177, 222, 24, 177, 171, 109, 67,
-        240, 0, 83, 171, 101, 157, 248, 7, 48, 27, 177, 32, 70, 3, 240, 248,
-        219, 173, 224, 179, 6, 6, 213, 212, 248, 28, 49, 200, 248, 36, 49, 0,
-        35, 196, 248, 28, 49, 22, 244, 0, 99, 8, 208, 35, 104, 211, 248, 136,
-        48, 154, 107, 1, 50, 154, 99, 213, 248, 180, 48, 1, 51, 48, 4, 197,
-        248, 180, 48, 10, 213, 40, 70, 0, 33, 58, 70, 75, 70, 249, 247, 20,
-        255, 24, 177, 171, 109, 67, 244, 0, 67, 171, 101, 241, 3, 7, 213, 40,
-        70, 1, 33, 31, 240, 47, 222, 16, 177, 32, 70, 9, 240, 93, 223, 114,
-        3, 4, 213, 213, 248, 148, 48, 88, 106, 2, 240, 182, 253, 179, 4, 4,
-        212, 43, 104, 147, 248, 42, 56, 0, 43, 66, 208, 35, 104, 60, 72, 154,
-        106, 217, 104, 221, 243, 57, 242, 43, 104, 147, 248, 42, 40, 74, 177,
-        179, 248, 40, 40, 32, 70, 1, 50, 163, 248, 40, 40, 239, 247, 159, 255,
-        2, 39, 0, 224, 3, 39, 32, 70, 57, 70, 232, 247, 208, 253, 35, 104, 211,
-        248, 136, 48, 211, 248, 20, 34, 1, 50, 195, 248, 20, 34, 45, 75, 27,
-        104, 1, 43, 15, 209, 132, 248, 213, 49, 132, 248, 95, 55, 32, 70, 4,
-        240, 33, 223, 40, 70, 2, 33, 0, 34, 31, 240, 88, 216, 0, 35, 132, 248,
-        95, 55, 60, 224, 2, 47, 3, 209, 43, 104, 0, 34, 131, 248, 42, 40, 32,
-        70, 3, 240, 125, 219, 2, 47, 2, 209, 32, 70, 239, 247, 132, 255, 213,
-        248, 68, 49, 163, 177, 35, 104, 32, 70, 211, 248, 136, 32, 35, 105,
-        211, 248, 68, 49, 7, 43, 136, 191, 0, 35, 202, 51, 2, 235, 131, 3, 90,
-        104, 1, 50, 90, 96, 0, 35, 197, 248, 68, 49, 3, 240, 96, 219, 0, 46,
-        3, 218, 212, 248, 208, 5, 45, 240, 104, 217, 240, 0, 2, 213, 32, 70,
-        6, 240, 11, 221, 177, 1, 2, 213, 40, 70, 32, 240, 172, 216, 212, 248,
-        164, 21, 75, 137, 19, 177, 32, 70, 233, 247, 194, 255, 168, 109, 0,
-        48, 24, 191, 1, 32, 189, 232, 254, 131, 0, 191, 4, 0, 8, 0, 135, 165,
-        136, 0, 108, 7, 0, 0, 6, 32, 112, 71, 45, 233, 247, 79, 144, 248, 148,
-        66, 5, 70, 14, 70, 23, 70, 180, 185, 19, 109, 19, 240, 8, 8, 19, 209,
-        208, 248, 128, 50, 83, 248, 33, 64, 116, 177, 35, 105, 0, 43, 64, 240,
-        15, 129, 28, 70, 152, 70, 8, 224, 32, 70, 223, 247, 99, 255, 32, 185,
-        148, 248, 12, 128, 1, 224, 0, 36, 160, 70, 3, 46, 11, 217, 43, 104,
-        211, 248, 192, 48, 4, 51, 158, 66, 5, 210, 40, 70, 49, 31, 11, 240,
-        175, 218, 131, 70, 1, 224, 79, 240, 0, 11, 72, 234, 6, 24, 31, 250,
-        136, 248, 31, 250, 136, 249, 68, 179, 213, 248, 108, 50, 159, 66, 0,
-        240, 236, 128, 187, 121, 0, 43, 64, 240, 232, 128, 59, 124, 0, 43, 0,
-        240, 228, 128, 32, 70, 223, 247, 54, 255, 0, 40, 64, 240, 222, 128,
-        59, 24, 219, 110, 83, 177, 26, 105, 66, 177, 27, 123, 2, 43, 0, 240,
-        213, 128, 72, 234, 131, 40, 31, 250, 136, 249, 207, 224, 4, 48, 16,
-        40, 238, 209, 203, 224, 227, 121, 11, 177, 73, 240, 8, 9, 43, 104, 211,
-        248, 200, 48, 158, 66, 4, 210, 40, 70, 49, 70, 74, 70, 10, 240, 45,
-        217, 0, 44, 0, 240, 157, 128, 35, 123, 0, 43, 0, 240, 188, 128, 213,
-        248, 252, 18, 79, 234, 6, 26, 16, 35, 40, 70, 81, 68, 4, 241, 20, 2,
-        254, 243, 7, 247, 213, 248, 180, 49, 0, 43, 67, 218, 35, 122, 2, 43,
-        64, 209, 149, 248, 148, 50, 0, 43, 60, 209, 59, 109, 26, 7, 57, 212,
-        42, 104, 163, 121, 210, 248, 188, 32, 147, 66, 51, 210, 3, 43, 49, 217,
-        11, 43, 47, 216, 3, 46, 10, 221, 32, 70, 223, 247, 228, 254, 48, 185,
-        40, 70, 57, 70, 34, 70, 17, 240, 28, 249, 128, 70, 1, 224, 79, 240,
-        0, 8, 213, 248, 0, 51, 57, 70, 66, 70, 40, 104, 10, 235, 3, 9, 70, 240,
-        71, 216, 34, 24, 73, 70, 40, 70, 20, 50, 8, 35, 254, 243, 208, 246,
-        213, 248, 0, 51, 57, 70, 8, 51, 66, 70, 40, 104, 154, 68, 69, 240, 23,
-        223, 34, 24, 81, 70, 40, 70, 20, 50, 8, 35, 254, 243, 192, 246, 104,
-        224, 35, 122, 11, 43, 101, 209, 43, 104, 147, 248, 177, 48, 0, 43, 96,
-        208, 163, 121, 7, 43, 93, 216, 213, 248, 152, 1, 49, 70, 34, 70, 80,
-        240, 196, 219, 86, 224, 43, 104, 211, 248, 192, 48, 4, 51, 158, 66,
-        45, 210, 35, 122, 2, 43, 36, 209, 79, 240, 14, 9, 9, 251, 6, 249, 79,
-        240, 0, 8, 40, 240, 1, 3, 227, 24, 9, 245, 56, 113, 65, 68, 40, 70,
-        179, 248, 100, 32, 8, 241, 2, 8, 10, 240, 173, 216, 184, 241, 10, 15,
-        239, 209, 9, 245, 58, 113, 40, 70, 2, 49, 180, 248, 136, 32, 10, 240,
-        162, 216, 40, 70, 9, 245, 59, 113, 180, 248, 138, 32, 10, 240, 155,
-        216, 40, 70, 49, 70, 34, 70, 91, 70, 48, 240, 253, 216, 3, 46, 35, 220,
-        40, 70, 48, 240, 92, 217, 58, 124, 3, 70, 58, 185, 183, 248, 90, 32,
-        2, 240, 1, 2, 0, 42, 24, 191, 79, 244, 128, 67, 3, 34, 0, 146, 40, 70,
-        0, 33, 79, 244, 128, 66, 4, 240, 255, 220, 12, 224, 35, 122, 2, 43,
-        127, 244, 244, 174, 238, 230, 35, 122, 11, 43, 127, 244, 52, 175, 46,
-        231, 3, 46, 166, 216, 219, 231, 189, 232, 254, 143, 248, 181, 12, 105,
-        208, 248, 108, 50, 5, 70, 156, 66, 14, 70, 8, 208, 163, 121, 51, 185,
-        35, 124, 35, 177, 33, 70, 189, 232, 248, 64, 48, 240, 126, 153, 242,
-        104, 162, 177, 40, 70, 33, 70, 151, 121, 48, 240, 159, 217, 43, 104,
-        211, 248, 188, 48, 159, 66, 10, 218, 149, 248, 148, 50, 59, 185, 35,
-        109, 25, 7, 4, 212, 40, 70, 57, 70, 34, 70, 48, 240, 85, 220, 213, 248,
-        152, 1, 49, 70, 34, 70, 189, 232, 248, 64, 80, 240, 179, 154, 0, 0,
-        45, 233, 240, 79, 155, 70, 83, 31, 27, 43, 135, 176, 6, 70, 13, 70,
-        146, 70, 0, 242, 60, 130, 160, 74, 154, 64, 64, 241, 56, 130, 187, 241,
-        3, 15, 0, 242, 55, 130, 19, 152, 223, 247, 4, 254, 7, 70, 0, 40, 64,
-        208, 214, 248, 108, 50, 157, 66, 14, 209, 11, 241, 26, 3, 5, 235, 131,
-        3, 90, 104, 34, 185, 6, 235, 139, 2, 210, 248, 132, 34, 90, 96, 95,
-        70, 205, 248, 8, 176, 16, 224, 171, 121, 27, 185, 79, 234, 91, 2, 2,
-        146, 1, 224, 205, 248, 8, 176, 2, 155, 3, 241, 26, 8, 5, 235, 136, 8,
-        216, 248, 4, 64, 52, 177, 167, 121, 79, 240, 0, 9, 205, 248, 4, 144,
-        200, 70, 123, 224, 42, 124, 4, 33, 0, 42, 12, 191, 16, 34, 128, 34,
-        1, 35, 48, 70, 47, 240, 11, 223, 7, 30, 192, 242, 6, 130, 214, 248,
-        128, 50, 161, 70, 83, 248, 39, 48, 1, 148, 200, 248, 4, 48, 160, 70,
-        100, 224, 43, 122, 251, 177, 213, 248, 244, 48, 48, 70, 92, 142, 41,
-        70, 4, 244, 64, 68, 164, 245, 64, 78, 222, 241, 0, 4, 68, 235, 14, 4,
-        19, 154, 35, 70, 16, 240, 239, 255, 128, 70, 192, 185, 48, 70, 41, 70,
-        19, 154, 35, 70, 17, 240, 154, 248, 128, 70, 0, 40, 0, 240, 212, 129,
-        1, 34, 1, 146, 12, 224, 48, 70, 41, 70, 19, 154, 17, 240, 144, 248,
-        128, 70, 0, 40, 0, 240, 200, 129, 1, 35, 1, 147, 0, 224, 1, 151, 216,
-        248, 12, 48, 35, 185, 213, 248, 20, 49, 99, 177, 200, 248, 12, 48, 159,
-        121, 214, 248, 152, 1, 65, 70, 17, 154, 91, 70, 80, 240, 247, 217, 129,
-        70, 136, 177, 1, 224, 79, 240, 1, 9, 48, 70, 41, 70, 16, 154, 19, 155,
-        47, 240, 130, 222, 7, 30, 192, 242, 175, 129, 214, 248, 128, 50, 83,
-        248, 39, 48, 200, 248, 12, 48, 214, 248, 108, 50, 157, 66, 6, 208, 171,
-        121, 35, 185, 48, 70, 41, 70, 58, 70, 47, 240, 2, 223, 214, 248, 160,
-        1, 65, 70, 79, 240, 109, 218, 0, 34, 2, 146, 214, 248, 128, 50, 83,
-        248, 39, 64, 185, 241, 0, 15, 14, 209, 227, 121, 155, 69, 11, 209, 35,
-        105, 154, 69, 8, 209, 18, 152, 4, 241, 20, 1, 82, 70, 219, 247, 247,
-        250, 0, 40, 0, 240, 123, 129, 99, 122, 96, 107, 3, 147, 8, 177, 225,
-        247, 194, 253, 212, 248, 224, 144, 32, 70, 0, 33, 228, 34, 220, 243,
-        82, 247, 196, 248, 224, 144, 185, 241, 0, 15, 8, 208, 51, 104, 72, 70,
-        219, 105, 0, 33, 211, 248, 212, 32, 82, 1, 220, 243, 68, 247, 3, 155,
-        4, 241, 20, 9, 99, 114, 18, 153, 82, 70, 167, 113, 72, 70, 219, 247,
-        226, 250, 95, 250, 138, 243, 35, 97, 6, 34, 132, 248, 7, 176, 32, 70,
-        19, 153, 219, 247, 216, 250, 0, 35, 186, 241, 13, 15, 99, 115, 32, 208,
-        4, 216, 186, 241, 5, 15, 64, 240, 134, 128, 6, 224, 186, 241, 16, 15,
-        66, 208, 186, 241, 32, 15, 126, 209, 35, 224, 1, 35, 35, 114, 35, 115,
-        4, 35, 163, 115, 227, 115, 73, 70, 82, 70, 4, 241, 25, 0, 219, 247,
-        186, 250, 4, 241, 30, 0, 73, 70, 82, 70, 219, 247, 180, 250, 35, 125,
-        12, 224, 3, 35, 35, 114, 4, 35, 35, 115, 163, 115, 227, 115, 35, 125,
-        132, 248, 33, 48, 99, 125, 132, 248, 34, 48, 163, 125, 132, 248, 35,
-        48, 89, 224, 17, 154, 11, 42, 16, 209, 34, 114, 48, 70, 255, 247, 89,
-        253, 18, 35, 163, 115, 16, 35, 32, 115, 227, 115, 72, 70, 18, 153, 82,
-        70, 219, 247, 145, 250, 71, 224, 16, 0, 144, 128, 2, 35, 35, 114, 35,
-        115, 8, 35, 163, 115, 4, 35, 17, 224, 17, 154, 83, 31, 3, 43, 29, 216,
-        223, 232, 3, 240, 14, 14, 2, 2, 181, 248, 90, 48, 8, 43, 64, 240, 240,
-        128, 3, 35, 35, 114, 4, 35, 35, 115, 163, 115, 227, 115, 42, 224, 17,
-        154, 211, 178, 4, 34, 34, 115, 162, 115, 8, 34, 5, 43, 35, 114, 226,
-        115, 1, 209, 2, 35, 29, 224, 3, 35, 27, 224, 4, 35, 35, 114, 3, 35,
-        35, 115, 184, 241, 0, 15, 2, 208, 216, 248, 4, 48, 9, 224, 171, 121,
-        91, 185, 48, 70, 41, 70, 213, 248, 244, 32, 16, 240, 207, 254, 32, 177,
-        67, 104, 88, 5, 1, 213, 5, 35, 35, 115, 8, 35, 163, 115, 227, 115, 1,
-        35, 99, 115, 1, 155, 171, 177, 35, 122, 1, 59, 10, 43, 17, 216, 223,
-        232, 3, 240, 6, 8, 6, 10, 16, 16, 16, 16, 16, 16, 12, 0, 1, 35, 5, 224,
-        2, 35, 3, 224, 4, 35, 1, 224, 79, 244, 128, 115, 200, 248, 72, 48, 19,
-        152, 223, 247, 107, 252, 216, 177, 16, 155, 19, 240, 2, 15, 171, 110,
-        16, 208, 89, 28, 7, 208, 5, 235, 131, 3, 219, 110, 27, 177, 90, 137,
-        34, 240, 2, 2, 90, 129, 99, 137, 2, 154, 67, 240, 2, 3, 170, 102, 99,
-        129, 5, 224, 2, 154, 147, 66, 4, 191, 79, 240, 255, 51, 171, 102, 48,
-        70, 41, 70, 34, 70, 20, 155, 48, 240, 22, 222, 128, 70, 40, 177, 48,
-        70, 33, 70, 47, 240, 186, 222, 71, 70, 123, 224, 35, 122, 2, 43, 43,
-        209, 181, 248, 90, 48, 218, 7, 7, 213, 32, 70, 223, 247, 54, 252, 24,
-        177, 4, 168, 5, 241, 96, 1, 2, 224, 4, 168, 4, 241, 56, 1, 8, 34, 219,
-        247, 237, 249, 4, 155, 4, 241, 64, 0, 73, 70, 5, 241, 194, 2, 234, 243,
-        247, 246, 32, 70, 223, 247, 32, 252, 4, 241, 100, 3, 24, 185, 24, 70,
-        73, 70, 34, 70, 3, 224, 24, 70, 73, 70, 5, 241, 188, 2, 212, 248, 136,
-        48, 234, 243, 229, 246, 48, 70, 57, 70, 42, 70, 49, 240, 46, 216, 214,
-        248, 108, 50, 157, 66, 15, 208, 171, 121, 107, 185, 43, 124, 91, 177,
-        32, 70, 223, 247, 1, 252, 56, 177, 213, 248, 20, 49, 35, 177, 48, 70,
-        153, 121, 42, 70, 49, 240, 26, 216, 171, 121, 235, 185, 213, 248, 204,
-        48, 91, 5, 3, 212, 32, 70, 223, 247, 239, 251, 168, 177, 40, 70, 5,
-        240, 51, 220, 1, 34, 7, 70, 133, 248, 92, 32, 48, 70, 41, 70, 251, 247,
-        183, 255, 79, 185, 40, 70, 5, 240, 39, 220, 40, 177, 213, 248, 4, 49,
-        40, 70, 25, 122, 234, 247, 43, 255, 21, 155, 131, 177, 28, 96, 0, 39,
-        14, 224, 111, 240, 23, 7, 11, 224, 111, 240, 7, 7, 8, 224, 111, 240,
-        29, 7, 5, 224, 79, 70, 3, 224, 111, 240, 28, 7, 0, 224, 21, 159, 56,
-        70, 7, 176, 189, 232, 240, 143, 240, 181, 208, 248, 116, 52, 144, 248,
-        68, 68, 91, 121, 16, 37, 3, 240, 1, 7, 91, 16, 3, 240, 1, 6, 0, 35,
-        26, 70, 39, 177, 0, 235, 68, 12, 188, 249, 196, 195, 98, 68, 38, 177,
-        0, 235, 68, 12, 188, 249, 228, 195, 99, 68, 1, 52, 1, 61, 4, 240, 15,
-        4, 238, 209, 0, 42, 184, 191, 15, 50, 18, 17, 0, 43, 184, 191, 15, 51,
-        27, 17, 10, 112, 75, 112, 240, 189, 112, 181, 0, 35, 138, 176, 193,
-        88, 1, 170, 153, 80, 4, 51, 36, 43, 249, 209, 0, 35, 25, 70, 1, 49,
-        201, 178, 10, 70, 10, 168, 0, 235, 130, 6, 1, 168, 86, 248, 36, 92,
-        28, 88, 1, 50, 210, 178, 165, 66, 212, 191, 70, 248, 36, 92, 70, 248,
-        36, 76, 165, 66, 172, 191, 29, 80, 28, 80, 8, 42, 234, 217, 4, 51, 5,
-        41, 228, 209, 5, 152, 10, 176, 112, 189, 0, 0, 45, 233, 240, 71, 3,
-        104, 6, 70, 27, 126, 13, 70, 0, 43, 61, 208, 8, 70, 16, 34, 31, 73,
-        220, 243, 241, 247, 0, 36, 214, 248, 116, 52, 91, 121, 35, 65, 219,
-        7, 43, 213, 40, 70, 27, 73, 34, 70, 220, 243, 229, 247, 150, 248, 68,
-        132, 79, 240, 16, 10, 0, 39, 8, 235, 4, 25, 9, 245, 240, 121, 6, 235,
-        73, 9, 40, 70, 20, 73, 185, 249, 4, 32, 220, 243, 212, 247, 185, 249,
-        4, 48, 8, 241, 1, 8, 186, 241, 1, 10, 31, 68, 8, 240, 15, 8, 233, 209,
-        13, 73, 40, 70, 220, 243, 198, 247, 58, 30, 184, 191, 15, 50, 40, 70,
-        10, 73, 18, 17, 220, 243, 190, 247, 1, 52, 2, 44, 202, 209, 0, 32, 189,
-        232, 240, 135, 111, 240, 3, 0, 189, 232, 240, 135, 91, 228, 3, 0, 138,
-        228, 3, 0, 147, 228, 3, 0, 156, 186, 135, 0, 152, 228, 3, 0, 112, 181,
-        134, 176, 0, 35, 15, 153, 4, 147, 5, 70, 20, 70, 12, 158, 251, 247,
-        193, 250, 11, 155, 3, 43, 4, 217, 4, 168, 10, 153, 4, 34, 219, 247,
-        200, 248, 20, 177, 6, 44, 44, 209, 38, 224, 12, 34, 33, 70, 1, 168,
-        220, 243, 23, 245, 6, 169, 1, 35, 65, 248, 4, 77, 40, 70, 1, 147, 255,
-        247, 53, 255, 2, 35, 2, 147, 213, 248, 116, 52, 48, 70, 90, 121, 209,
-        7, 72, 191, 157, 248, 20, 32, 1, 169, 72, 191, 141, 248, 12, 32, 91,
-        121, 154, 7, 68, 191, 157, 248, 21, 48, 141, 248, 13, 48, 12, 34, 219,
-        247, 159, 248, 0, 32, 6, 224, 0, 32, 197, 248, 36, 7, 48, 96, 1, 224,
-        111, 240, 22, 0, 6, 176, 112, 189, 56, 181, 4, 70, 13, 70, 241, 177,
-        144, 248, 32, 56, 0, 235, 131, 2, 1, 51, 219, 178, 8, 43, 194, 248,
-        252, 23, 128, 248, 32, 56, 2, 217, 0, 35, 128, 248, 32, 56, 4, 245,
-        254, 96, 12, 48, 255, 247, 36, 255, 0, 40, 8, 191, 40, 70, 196, 248,
-        36, 7, 95, 48, 188, 191, 111, 240, 94, 3, 196, 248, 36, 55, 212, 248,
-        36, 7, 56, 189, 112, 71, 112, 181, 3, 125, 4, 70, 13, 70, 22, 70, 19,
-        177, 0, 104, 229, 247, 145, 248, 32, 70, 41, 70, 50, 70, 189, 232, 112,
-        64, 59, 240, 177, 159, 0, 0, 45, 233, 240, 65, 208, 248, 4, 128, 12,
-        36, 0, 38, 1, 39, 20, 224, 208, 248, 8, 192, 12, 235, 4, 5, 92, 248,
-        4, 192, 140, 69, 10, 209, 213, 248, 4, 192, 148, 69, 6, 209, 1, 54,
-        35, 177, 223, 248, 20, 192, 109, 96, 197, 248, 0, 192, 1, 55, 12, 52,
-        71, 69, 232, 221, 48, 70, 189, 232, 240, 129, 137, 113, 2, 0, 1, 117,
-        112, 71, 1, 41, 3, 70, 10, 208, 208, 248, 252, 32, 162, 248, 216, 19,
-        178, 248, 218, 3, 0, 34, 128, 178, 163, 248, 64, 33, 112, 71, 79, 246,
-        255, 112, 112, 71, 208, 248, 252, 48, 163, 248, 216, 19, 163, 248, 218,
-        35, 112, 71, 208, 248, 252, 32, 0, 35, 162, 248, 216, 51, 178, 248,
-        218, 35, 160, 248, 64, 49, 16, 4, 64, 244, 118, 112, 64, 240, 2, 0,
-        112, 71, 208, 248, 252, 48, 0, 34, 163, 248, 252, 19, 160, 248, 64,
-        33, 179, 248, 254, 3, 128, 178, 112, 71, 208, 248, 252, 48, 65, 234,
-        2, 66, 195, 248, 252, 35, 112, 71, 0, 35, 128, 248, 19, 49, 255, 35,
-        128, 248, 158, 49, 128, 248, 64, 50, 112, 71, 16, 43, 16, 181, 1, 208,
-        56, 43, 49, 209, 114, 177, 208, 248, 200, 38, 210, 248, 144, 2, 8, 96,
-        210, 248, 140, 2, 72, 96, 210, 248, 148, 2, 210, 248, 152, 34, 136,
-        96, 202, 96, 27, 224, 10, 104, 0, 42, 196, 191, 208, 248, 200, 70, 196,
-        248, 144, 34, 74, 104, 0, 42, 196, 191, 208, 248, 200, 70, 196, 248,
-        140, 34, 138, 104, 0, 42, 196, 191, 208, 248, 200, 70, 196, 248, 148,
-        34, 202, 104, 0, 42, 196, 191, 208, 248, 200, 22, 193, 248, 152, 34,
-        56, 43, 20, 191, 0, 32, 111, 240, 22, 0, 16, 189, 111, 240, 13, 0, 16,
-        189, 112, 71, 176, 248, 10, 49, 19, 244, 64, 79, 3, 191, 219, 178, 192,
-        24, 144, 248, 46, 6, 0, 32, 64, 178, 112, 71, 112, 71, 111, 240, 22,
-        0, 112, 71, 131, 107, 27, 127, 0, 43, 20, 191, 111, 240, 22, 0, 111,
-        240, 3, 0, 112, 71, 131, 107, 27, 127, 0, 43, 20, 191, 111, 240, 22,
-        0, 111, 240, 3, 0, 112, 71, 131, 107, 27, 127, 0, 43, 20, 191, 111,
-        240, 22, 0, 111, 240, 3, 0, 112, 71, 0, 32, 8, 96, 112, 71, 111, 240,
-        22, 0, 112, 71, 111, 240, 22, 0, 112, 71, 7, 181, 130, 107, 1, 145,
-        18, 127, 42, 177, 208, 248, 192, 48, 8, 33, 152, 71, 0, 32, 1, 224,
-        111, 240, 3, 0, 14, 189, 0, 32, 112, 71, 0, 32, 112, 71, 111, 240, 22,
-        0, 112, 71, 0, 32, 112, 71, 131, 107, 27, 127, 99, 185, 176, 248, 10,
-        49, 19, 244, 64, 79, 7, 209, 17, 185, 128, 248, 153, 33, 112, 71, 1,
-        41, 8, 191, 128, 248, 154, 33, 112, 71, 0, 32, 112, 71, 64, 242, 231,
-        48, 112, 71, 111, 240, 22, 0, 112, 71, 111, 240, 22, 0, 112, 71, 111,
-        240, 22, 0, 112, 71, 111, 240, 22, 0, 112, 71, 111, 240, 22, 0, 112,
-        71, 111, 240, 22, 0, 112, 71, 111, 240, 22, 0, 112, 71, 111, 240, 22,
-        0, 112, 71, 112, 71, 112, 71, 144, 248, 145, 50, 112, 181, 139, 66,
-        4, 70, 13, 70, 22, 70, 3, 208, 208, 248, 164, 48, 3, 177, 152, 71, 164,
-        248, 148, 98, 132, 248, 145, 82, 112, 189, 111, 240, 22, 0, 112, 71,
-        111, 240, 22, 0, 112, 71, 111, 240, 22, 0, 112, 71, 112, 181, 0, 36,
-        78, 66, 0, 240, 15, 5, 117, 27, 2, 235, 69, 5, 29, 85, 1, 52, 0, 9,
-        10, 44, 244, 209, 89, 122, 157, 249, 16, 32, 138, 26, 90, 114, 112,
-        189, 7, 181, 0, 34, 1, 146, 4, 154, 3, 42, 4, 217, 1, 168, 25, 70, 4,
-        34, 218, 247, 6, 255, 111, 240, 22, 0, 14, 189, 55, 181, 0, 34, 1, 146,
-        6, 154, 4, 70, 3, 42, 13, 70, 4, 217, 1, 168, 25, 70, 4, 34, 218, 247,
-        246, 254, 64, 242, 122, 35, 157, 66, 13, 209, 212, 248, 132, 48, 83,
-        177, 162, 107, 18, 127, 82, 177, 32, 70, 79, 240, 255, 49, 152, 71,
-        7, 155, 24, 96, 0, 32, 4, 224, 111, 240, 22, 0, 1, 224, 111, 240, 3,
-        0, 62, 189, 55, 181, 0, 34, 1, 146, 6, 154, 4, 70, 3, 42, 13, 70, 4,
-        217, 1, 168, 25, 70, 4, 34, 218, 247, 209, 254, 64, 242, 163, 35, 157,
-        66, 33, 208, 8, 216, 64, 242, 126, 35, 157, 66, 18, 208, 64, 242, 127,
-        35, 157, 66, 40, 209, 8, 224, 64, 242, 165, 35, 157, 66, 24, 208, 64,
-        242, 167, 35, 157, 66, 31, 209, 24, 224, 1, 155, 251, 177, 196, 248,
-        116, 49, 23, 224, 212, 248, 116, 49, 2, 169, 65, 248, 4, 61, 7, 152,
-        9, 154, 218, 247, 172, 254, 13, 224, 189, 248, 4, 48, 164, 248, 158,
-        53, 8, 224, 189, 248, 4, 48, 164, 248, 160, 53, 3, 224, 189, 248, 4,
-        48, 164, 248, 162, 53, 0, 32, 4, 224, 111, 240, 22, 0, 1, 224, 111,
-        240, 28, 0, 62, 189, 7, 181, 0, 35, 2, 168, 64, 248, 4, 61, 4, 34, 218,
-        247, 141, 254, 111, 240, 22, 0, 14, 189, 48, 181, 141, 176, 4, 70, 1,
-        145, 8, 168, 17, 70, 12, 34, 29, 70, 218, 247, 128, 254, 1, 171, 3,
-        147, 1, 35, 4, 147, 8, 155, 5, 147, 9, 155, 6, 147, 10, 155, 7, 147,
-        212, 248, 188, 48, 19, 177, 32, 70, 3, 169, 152, 71, 40, 70, 1, 169,
-        4, 34, 218, 247, 107, 254, 0, 32, 13, 176, 48, 189, 16, 181, 140, 176,
-        4, 70, 1, 145, 8, 168, 17, 70, 16, 34, 218, 247, 95, 254, 11, 154, 12,
-        171, 67, 248, 44, 45, 3, 147, 1, 35, 4, 147, 8, 155, 5, 147, 9, 155,
-        6, 147, 10, 155, 7, 147, 212, 248, 184, 48, 19, 177, 32, 70, 3, 169,
-        152, 71, 0, 32, 12, 176, 16, 189, 55, 181, 0, 36, 13, 70, 12, 96, 1,
-        33, 11, 240, 76, 253, 2, 169, 65, 248, 4, 13, 4, 34, 40, 70, 218, 247,
-        59, 254, 32, 70, 62, 189, 56, 181, 208, 248, 200, 54, 4, 70, 147, 248,
-        154, 33, 18, 177, 211, 248, 172, 33, 106, 185, 163, 107, 79, 244, 135,
-        113, 24, 105, 11, 240, 121, 254, 212, 248, 200, 54, 211, 248, 112, 34,
-        195, 248, 112, 2, 130, 26, 13, 224, 0, 34, 131, 248, 154, 33, 208, 248,
-        200, 54, 79, 244, 122, 113, 211, 248, 156, 33, 211, 248, 172, 49, 74,
-        67, 178, 251, 243, 242, 0, 42, 31, 219, 212, 248, 200, 54, 211, 248,
-        136, 18, 179, 248, 116, 82, 1, 245, 156, 112, 3, 235, 64, 0, 196, 136,
-        194, 128, 44, 27, 164, 24, 164, 178, 179, 248, 108, 82, 74, 28, 163,
-        248, 116, 66, 228, 8, 7, 42, 163, 248, 110, 82, 163, 248, 108, 66, 195,
-        248, 136, 34, 2, 221, 0, 34, 195, 248, 136, 34, 56, 189, 16, 181, 4,
-        70, 255, 247, 179, 255, 163, 107, 218, 110, 4, 42, 7, 209, 147, 248,
-        44, 49, 35, 177, 32, 70, 189, 232, 16, 64, 8, 240, 154, 188, 16, 189,
-        16, 181, 144, 248, 58, 49, 4, 70, 83, 177, 176, 249, 80, 49, 1, 51,
-        6, 209, 131, 107, 50, 33, 24, 105, 11, 240, 33, 254, 164, 248, 82, 1,
-        1, 32, 16, 189, 45, 233, 240, 67, 131, 107, 157, 176, 27, 127, 4, 70,
-        13, 70, 144, 70, 0, 43, 97, 208, 163, 107, 222, 33, 24, 105, 11, 240,
-        14, 254, 163, 107, 220, 33, 6, 70, 24, 105, 11, 240, 8, 254, 163, 107,
-        222, 33, 7, 70, 24, 105, 11, 240, 2, 254, 134, 66, 236, 209, 71, 234,
-        6, 70, 163, 107, 0, 150, 0, 38, 141, 248, 102, 96, 24, 105, 142, 33,
-        11, 240, 245, 253, 64, 0, 128, 178, 0, 241, 8, 3, 173, 248, 104, 48,
-        0, 241, 14, 3, 173, 248, 106, 48, 0, 241, 20, 3, 26, 48, 173, 248, 108,
-        48, 173, 248, 110, 0, 1, 150, 163, 107, 24, 105, 26, 171, 153, 91, 11,
-        240, 221, 253, 148, 249, 4, 54, 1, 154, 64, 178, 195, 24, 2, 54, 155,
-        24, 8, 46, 1, 147, 239, 209, 155, 16, 1, 147, 163, 107, 0, 38, 24, 105,
-        202, 33, 2, 150, 11, 240, 202, 253, 13, 241, 10, 7, 129, 70, 163, 107,
-        6, 235, 73, 1, 24, 105, 11, 240, 193, 253, 2, 54, 90, 46, 39, 248, 2,
-        15, 244, 209, 40, 70, 105, 70, 184, 241, 104, 15, 52, 191, 66, 70, 104,
-        34, 218, 247, 99, 253, 0, 32, 1, 224, 111, 240, 3, 0, 29, 176, 189,
-        232, 240, 131, 16, 181, 4, 70, 9, 240, 232, 252, 163, 107, 24, 105,
-        189, 232, 16, 64, 11, 240, 177, 189, 56, 181, 4, 70, 13, 70, 82, 177,
-        0, 35, 192, 248, 104, 49, 160, 248, 108, 49, 7, 240, 216, 254, 16, 177,
-        32, 70, 7, 240, 26, 255, 32, 70, 41, 70, 7, 240, 208, 254, 48, 177,
-        32, 70, 41, 70, 7, 240, 229, 254, 196, 248, 164, 81, 1, 32, 56, 189,
-        10, 240, 194, 189, 45, 233, 240, 67, 145, 176, 24, 175, 30, 70, 151,
-        232, 128, 3, 0, 35, 3, 47, 4, 70, 13, 70, 15, 147, 4, 217, 15, 168,
-        49, 70, 4, 34, 218, 247, 34, 253, 64, 242, 150, 35, 157, 66, 22, 208,
-        10, 216, 64, 242, 146, 35, 157, 66, 90, 208, 181, 245, 37, 127, 87,
-        208, 181, 245, 36, 127, 121, 209, 83, 224, 64, 242, 190, 51, 157, 66,
-        29, 208, 181, 245, 112, 127, 86, 208, 181, 245, 39, 127, 110, 209, 45,
-        224, 47, 47, 116, 217, 48, 34, 104, 70, 49, 70, 218, 247, 0, 253, 189,
-        248, 8, 48, 2, 43, 110, 209, 189, 248, 10, 48, 31, 250, 137, 249, 75,
-        69, 95, 216, 32, 70, 105, 70, 66, 70, 255, 247, 187, 255, 100, 224,
-        47, 47, 93, 217, 48, 34, 104, 70, 49, 70, 218, 247, 233, 252, 189, 248,
-        8, 48, 2, 43, 87, 209, 189, 248, 10, 48, 31, 250, 137, 249, 75, 69,
-        72, 216, 32, 70, 105, 70, 66, 70, 255, 247, 173, 253, 77, 224, 11, 47,
-        70, 217, 12, 34, 12, 168, 49, 70, 218, 247, 210, 252, 189, 248, 48,
-        48, 1, 59, 155, 178, 1, 43, 62, 216, 189, 248, 54, 48, 31, 250, 137,
-        249, 75, 69, 32, 70, 12, 169, 66, 70, 136, 191, 173, 248, 54, 144, 255,
-        247, 149, 253, 50, 224, 163, 107, 26, 127, 58, 187, 91, 127, 0, 43,
-        12, 191, 111, 240, 10, 0, 0, 32, 40, 224, 11, 47, 33, 217, 12, 34, 12,
-        168, 49, 70, 218, 247, 173, 252, 189, 248, 48, 48, 1, 59, 155, 178,
-        1, 43, 25, 216, 189, 248, 54, 48, 31, 250, 137, 249, 75, 69, 32, 70,
-        12, 169, 66, 70, 136, 191, 173, 248, 54, 144, 255, 247, 115, 253, 13,
-        224, 111, 240, 22, 0, 10, 224, 111, 240, 23, 0, 7, 224, 111, 240, 4,
-        0, 4, 224, 111, 240, 13, 0, 1, 224, 111, 240, 1, 0, 17, 176, 189, 232,
-        240, 131, 115, 181, 0, 34, 1, 146, 6, 154, 4, 70, 3, 42, 13, 70, 7,
-        158, 4, 217, 1, 168, 25, 70, 4, 34, 218, 247, 122, 252, 181, 245, 92,
-        127, 18, 208, 64, 242, 113, 51, 157, 66, 28, 209, 1, 153, 75, 28, 212,
-        248, 248, 48, 1, 209, 0, 34, 0, 224, 1, 34, 131, 248, 25, 38, 32, 70,
-        9, 178, 11, 240, 253, 249, 7, 224, 212, 248, 248, 48, 147, 248, 25,
-        6, 32, 177, 147, 248, 26, 54, 51, 96, 0, 32, 5, 224, 79, 240, 255, 51,
-        51, 96, 1, 224, 111, 240, 22, 0, 124, 189, 16, 181, 189, 232, 16, 64,
-        255, 247, 198, 191, 157, 248, 0, 32, 18, 185, 25, 70, 10, 240, 121,
-        188, 26, 70, 10, 240, 77, 188, 16, 181, 28, 70, 8, 240, 254, 253, 32,
-        96, 0, 32, 16, 189, 55, 181, 12, 70, 2, 173, 0, 33, 69, 248, 4, 29,
-        17, 70, 26, 70, 43, 70, 10, 240, 8, 252, 32, 96, 1, 152, 62, 189, 16,
-        181, 12, 70, 10, 240, 44, 252, 32, 96, 0, 32, 16, 189, 240, 181, 31,
-        70, 135, 176, 0, 35, 4, 147, 12, 155, 4, 70, 3, 43, 13, 70, 13, 158,
-        4, 217, 4, 168, 57, 70, 4, 34, 218, 247, 25, 252, 4, 154, 64, 242, 255,
-        32, 17, 28, 24, 191, 1, 33, 133, 66, 203, 178, 0, 240, 145, 129, 124,
-        216, 64, 242, 183, 32, 133, 66, 0, 240, 215, 129, 59, 216, 64, 242,
-        175, 32, 133, 66, 0, 240, 92, 129, 26, 216, 181, 245, 43, 127, 0, 240,
-        98, 129, 10, 216, 64, 242, 161, 35, 157, 66, 0, 240, 214, 129, 64, 242,
-        170, 35, 157, 66, 64, 240, 213, 129, 103, 225, 64, 242, 173, 35, 157,
-        66, 0, 240, 89, 129, 64, 242, 174, 35, 157, 66, 64, 240, 202, 129, 59,
-        225, 181, 245, 45, 127, 0, 240, 162, 129, 10, 216, 64, 242, 178, 35,
-        157, 66, 0, 240, 44, 129, 64, 242, 179, 35, 157, 66, 64, 240, 186, 129,
-        40, 225, 64, 242, 181, 35, 157, 66, 0, 240, 150, 129, 64, 242, 182,
-        35, 157, 66, 64, 240, 175, 129, 150, 225, 181, 245, 54, 127, 0, 240,
-        39, 129, 26, 216, 181, 245, 53, 127, 0, 240, 234, 128, 10, 216, 64,
-        242, 210, 35, 157, 66, 0, 240, 238, 128, 64, 242, 211, 35, 157, 66,
-        64, 240, 154, 129, 235, 224, 64, 242, 213, 35, 157, 66, 0, 240, 220,
-        128, 64, 242, 214, 35, 157, 66, 64, 240, 143, 129, 245, 224, 181, 245,
-        63, 127, 0, 240, 181, 128, 10, 216, 64, 242, 250, 35, 157, 66, 0, 240,
-        133, 128, 64, 242, 251, 35, 157, 66, 64, 240, 127, 129, 152, 224, 64,
-        242, 253, 35, 157, 66, 0, 240, 179, 128, 64, 242, 254, 35, 157, 66,
-        64, 240, 116, 129, 15, 225, 64, 242, 23, 51, 157, 66, 0, 240, 29, 129,
-        52, 216, 181, 245, 67, 127, 0, 240, 101, 129, 20, 216, 181, 245, 66,
-        127, 0, 240, 87, 129, 9, 216, 181, 245, 64, 127, 0, 240, 91, 129, 64,
-        242, 6, 51, 157, 66, 64, 240, 90, 129, 75, 225, 64, 242, 10, 51, 157,
-        66, 0, 242, 84, 129, 78, 225, 181, 245, 69, 127, 0, 240, 251, 128, 10,
-        216, 64, 242, 15, 51, 157, 66, 0, 240, 69, 129, 64, 242, 17, 51, 157,
-        66, 64, 240, 68, 129, 62, 225, 64, 242, 21, 51, 157, 66, 0, 240, 231,
-        128, 64, 242, 22, 51, 157, 66, 64, 240, 57, 129, 235, 224, 64, 242,
-        29, 51, 157, 66, 0, 240, 236, 128, 25, 216, 64, 242, 26, 51, 157, 66,
-        0, 240, 251, 128, 9, 216, 181, 245, 70, 127, 0, 240, 236, 128, 64, 242,
-        25, 51, 157, 66, 64, 240, 35, 129, 224, 224, 64, 242, 27, 51, 157, 66,
-        0, 240, 230, 128, 181, 245, 71, 127, 64, 240, 25, 129, 211, 224, 181,
-        245, 86, 127, 106, 208, 9, 216, 181, 245, 72, 127, 0, 240, 232, 128,
-        64, 242, 33, 51, 157, 66, 64, 240, 11, 129, 220, 224, 64, 242, 90, 51,
-        157, 66, 97, 208, 93, 211, 64, 242, 91, 51, 157, 66, 64, 240, 0, 129,
-        93, 224, 0, 35, 173, 248, 20, 48, 173, 248, 22, 48, 35, 109, 0, 43,
-        0, 240, 242, 128, 32, 70, 5, 169, 13, 241, 22, 2, 152, 71, 189, 248,
-        20, 48, 48, 70, 0, 147, 189, 248, 22, 48, 105, 70, 8, 34, 1, 147, 218,
-        247, 4, 251, 224, 224, 165, 109, 0, 45, 0, 240, 223, 128, 57, 70, 8,
-        34, 104, 70, 218, 247, 250, 250, 32, 70, 189, 248, 0, 16, 189, 248,
-        4, 32, 168, 71, 208, 224, 37, 110, 0, 45, 0, 240, 207, 128, 32, 70,
-        168, 71, 3, 10, 112, 112, 0, 32, 51, 112, 112, 113, 48, 113, 240, 112,
-        176, 112, 205, 224, 99, 110, 57, 120, 122, 120, 0, 43, 0, 240, 192,
-        128, 32, 70, 66, 234, 1, 33, 152, 71, 182, 224, 148, 248, 192, 54, 8,
-        224, 148, 248, 194, 54, 210, 178, 132, 248, 192, 38, 210, 26, 21, 224,
-        148, 249, 252, 53, 51, 96, 168, 224, 132, 248, 252, 37, 165, 224, 180,
-        248, 92, 53, 247, 231, 164, 248, 92, 37, 159, 224, 148, 248, 194, 54,
-        241, 231, 148, 248, 192, 54, 210, 178, 132, 248, 194, 38, 154, 26, 132,
-        248, 195, 38, 147, 224, 32, 70, 49, 70, 255, 247, 105, 252, 154, 224,
-        148, 248, 37, 49, 224, 231, 132, 248, 37, 17, 136, 224, 32, 70, 49,
-        70, 1, 34, 2, 224, 32, 70, 49, 70, 26, 70, 255, 247, 20, 251, 126, 224,
-        32, 70, 49, 70, 255, 247, 21, 251, 121, 224, 163, 107, 91, 127, 0, 43,
-        124, 208, 32, 70, 49, 70, 0, 35, 6, 224, 163, 107, 91, 127, 0, 43, 116,
-        208, 32, 70, 49, 70, 1, 35, 255, 247, 77, 254, 115, 224, 163, 107, 91,
-        127, 0, 43, 106, 208, 32, 70, 49, 70, 255, 247, 82, 254, 94, 224, 148,
-        248, 62, 54, 176, 231, 81, 28, 10, 191, 148, 248, 141, 50, 132, 248,
-        62, 38, 132, 248, 62, 54, 82, 224, 164, 248, 94, 37, 79, 224, 180, 249,
-        94, 53, 161, 231, 212, 248, 248, 48, 131, 248, 130, 40, 71, 224, 212,
-        248, 248, 48, 147, 248, 130, 56, 151, 231, 164, 248, 96, 37, 63, 224,
-        180, 249, 96, 53, 145, 231, 212, 248, 248, 48, 131, 248, 131, 40, 55,
-        224, 212, 248, 248, 48, 147, 248, 131, 56, 135, 231, 212, 248, 248,
-        48, 131, 248, 132, 40, 45, 224, 212, 248, 248, 48, 147, 248, 132, 56,
-        125, 231, 212, 248, 248, 48, 131, 248, 134, 40, 35, 224, 212, 248, 248,
-        48, 147, 248, 134, 56, 115, 231, 17, 70, 32, 70, 50, 70, 0, 35, 3, 224,
-        17, 70, 32, 70, 50, 70, 1, 35, 255, 247, 138, 250, 18, 224, 180, 248,
-        122, 50, 100, 231, 83, 30, 179, 245, 250, 111, 21, 210, 164, 248, 122,
-        34, 8, 224, 0, 37, 6, 169, 65, 248, 8, 93, 48, 70, 4, 34, 218, 247,
-        35, 250, 1, 224, 0, 32, 9, 224, 40, 70, 7, 224, 111, 240, 22, 0, 4,
-        224, 111, 240, 10, 0, 1, 224, 111, 240, 28, 0, 7, 176, 240, 189, 10,
-        240, 144, 187, 10, 240, 112, 187, 8, 181, 11, 240, 121, 249, 0, 32,
-        8, 189, 16, 181, 4, 70, 192, 248, 136, 17, 57, 185, 9, 240, 148, 249,
-        163, 107, 24, 105, 189, 232, 16, 64, 11, 240, 93, 186, 79, 244, 122,
-        115, 89, 67, 131, 107, 192, 248, 136, 17, 24, 105, 11, 240, 78, 250,
-        32, 70, 189, 232, 16, 64, 10, 240, 160, 185, 0, 35, 16, 181, 192, 248,
-        136, 49, 131, 107, 4, 70, 24, 105, 11, 240, 64, 250, 32, 70, 189, 232,
-        16, 64, 10, 240, 146, 185, 131, 107, 16, 181, 4, 70, 192, 248, 136,
-        17, 24, 105, 11, 240, 51, 250, 32, 70, 189, 232, 16, 64, 10, 240, 133,
-        185, 112, 181, 8, 70, 134, 176, 25, 70, 29, 70, 1, 36, 12, 240, 48,
-        248, 0, 33, 11, 70, 3, 174, 40, 70, 34, 70, 0, 148, 1, 150, 11, 240,
-        59, 255, 157, 249, 20, 48, 128, 51, 13, 209, 157, 248, 19, 48, 0, 33,
-        141, 248, 20, 48, 141, 248, 21, 48, 40, 70, 34, 70, 11, 70, 141, 232,
-        80, 0, 11, 240, 136, 255, 6, 176, 112, 189, 39, 240, 236, 190, 16, 181,
-        20, 70, 255, 247, 250, 255, 40, 177, 0, 33, 10, 70, 189, 232, 16, 64,
-        222, 247, 115, 187, 32, 70, 16, 189, 0, 34, 255, 247, 240, 191, 45,
-        233, 240, 65, 5, 70, 12, 70, 23, 70, 30, 70, 255, 247, 230, 255, 56,
-        177, 40, 70, 33, 70, 58, 70, 51, 70, 189, 232, 240, 65, 39, 240, 3,
-        191, 48, 70, 189, 232, 240, 129, 0, 35, 255, 247, 233, 191, 144, 248,
-        166, 53, 1, 51, 219, 178, 1, 43, 128, 248, 166, 53, 3, 216, 131, 107,
-        24, 105, 11, 240, 237, 185, 112, 71, 131, 107, 16, 181, 4, 70, 24, 105,
-        11, 240, 205, 249, 32, 70, 189, 232, 16, 64, 255, 247, 232, 191, 144,
-        248, 166, 53, 1, 59, 219, 178, 128, 248, 166, 53, 27, 185, 131, 107,
-        24, 105, 11, 240, 218, 185, 112, 71, 16, 181, 4, 70, 255, 247, 216,
-        255, 32, 70, 189, 232, 16, 64, 255, 247, 235, 191, 131, 107, 16, 181,
-        4, 70, 24, 105, 11, 240, 173, 249, 32, 70, 255, 247, 202, 255, 32, 70,
-        255, 247, 223, 255, 163, 107, 24, 105, 189, 232, 16, 64, 11, 240, 167,
-        185, 16, 181, 4, 70, 255, 247, 213, 255, 163, 107, 24, 105, 189, 232,
-        16, 64, 11, 240, 157, 185, 115, 181, 48, 35, 2, 173, 69, 248, 4, 61,
-        14, 70, 4, 70, 255, 247, 187, 255, 4, 34, 49, 70, 40, 70, 218, 247,
-        48, 249, 32, 70, 157, 249, 4, 16, 8, 240, 252, 248, 32, 70, 255, 247,
-        224, 255, 0, 32, 124, 189, 16, 181, 128, 248, 155, 17, 4, 70, 255, 247,
-        166, 255, 32, 70, 189, 232, 16, 64, 255, 247, 211, 191, 8, 181, 131,
-        107, 79, 244, 0, 33, 24, 105, 10, 70, 11, 240, 117, 249, 10, 32, 189,
-        232, 8, 64, 224, 243, 212, 176, 208, 248, 252, 48, 130, 176, 179, 248,
-        224, 51, 0, 34, 173, 248, 6, 48, 189, 248, 6, 48, 131, 107, 160, 248,
-        64, 33, 24, 105, 79, 244, 0, 33, 2, 176, 11, 240, 93, 185, 112, 181,
-        5, 70, 12, 70, 22, 70, 255, 247, 191, 248, 33, 70, 0, 234, 6, 2, 40,
-        70, 189, 232, 112, 64, 255, 247, 200, 184, 112, 181, 5, 70, 12, 70,
-        22, 70, 255, 247, 177, 248, 64, 234, 6, 2, 33, 70, 40, 70, 146, 178,
-        189, 232, 112, 64, 255, 247, 185, 184, 248, 181, 5, 70, 12, 70, 22,
-        70, 31, 70, 255, 247, 161, 248, 32, 234, 6, 2, 62, 64, 50, 67, 40, 70,
-        33, 70, 146, 178, 189, 232, 248, 64, 255, 247, 167, 184, 0, 35, 160,
-        248, 64, 49, 208, 248, 252, 48, 179, 248, 254, 3, 128, 178, 112, 71,
-        208, 248, 252, 48, 163, 248, 254, 19, 112, 71, 208, 248, 252, 48, 163,
-        248, 252, 19, 179, 248, 254, 19, 10, 64, 163, 248, 254, 35, 0, 35, 160,
-        248, 64, 49, 112, 71, 208, 248, 252, 48, 163, 248, 252, 19, 179, 248,
-        254, 19, 137, 178, 10, 67, 163, 248, 254, 35, 0, 35, 160, 248, 64, 49,
-        112, 71, 16, 181, 208, 248, 252, 64, 19, 64, 164, 248, 252, 19, 180,
-        248, 254, 19, 137, 178, 33, 234, 2, 2, 26, 67, 0, 35, 164, 248, 254,
-        35, 160, 248, 64, 49, 16, 189, 112, 181, 11, 70, 5, 70, 82, 224, 28,
-        70, 86, 30, 52, 248, 2, 43, 209, 4, 2, 244, 96, 66, 201, 12, 178, 245,
-        192, 79, 60, 208, 7, 216, 178, 245, 0, 95, 46, 208, 178, 245, 128, 79,
-        33, 208, 122, 177, 60, 224, 178, 245, 32, 79, 43, 208, 3, 216, 178,
-        245, 0, 79, 53, 209, 14, 224, 178, 245, 64, 79, 25, 208, 178, 245, 96,
-        79, 46, 209, 41, 224, 28, 70, 90, 136, 40, 70, 52, 248, 4, 63, 255,
-        247, 192, 255, 6, 224, 28, 70, 90, 136, 40, 70, 52, 248, 4, 63, 255,
-        247, 125, 255, 1, 62, 28, 224, 40, 70, 90, 136, 255, 247, 81, 248, 23,
-        224, 40, 70, 90, 136, 255, 247, 43, 248, 18, 224, 40, 70, 90, 136, 255,
-        247, 141, 255, 13, 224, 40, 70, 90, 136, 255, 247, 75, 255, 8, 224,
-        40, 70, 90, 136, 255, 247, 144, 255, 3, 224, 40, 70, 90, 136, 255, 247,
-        79, 255, 163, 28, 114, 30, 0, 42, 170, 220, 112, 189, 208, 248, 180,
-        48, 16, 181, 11, 177, 152, 71, 16, 189, 208, 248, 252, 32, 1, 185, 244,
-        35, 162, 248, 230, 51, 16, 189, 1, 35, 128, 248, 17, 49, 112, 71, 128,
-        248, 68, 17, 112, 71, 144, 249, 68, 1, 112, 71, 112, 71, 16, 177, 131,
-        107, 3, 177, 89, 119, 112, 71, 16, 177, 131, 107, 3, 177, 25, 119, 112,
-        71, 144, 248, 19, 33, 16, 181, 4, 70, 0, 42, 111, 209, 208, 248, 200,
-        54, 100, 33, 163, 248, 108, 18, 163, 248, 110, 18, 79, 244, 72, 113,
-        163, 248, 116, 18, 100, 33, 163, 248, 118, 18, 163, 248, 120, 18, 163,
-        248, 122, 18, 163, 248, 124, 18, 163, 248, 126, 18, 163, 248, 128, 18,
-        163, 248, 130, 18, 163, 248, 132, 18, 10, 33, 163, 248, 210, 17, 163,
-        248, 240, 17, 163, 248, 214, 17, 163, 248, 248, 17, 163, 248, 212, 17,
-        163, 248, 242, 17, 163, 248, 216, 17, 163, 248, 250, 17, 163, 248, 198,
-        17, 163, 248, 196, 17, 163, 248, 200, 17, 163, 248, 202, 17, 20, 33,
-        163, 248, 206, 17, 163, 248, 208, 17, 10, 33, 163, 248, 202, 16, 163,
-        248, 204, 16, 80, 33, 163, 248, 206, 16, 10, 33, 195, 248, 112, 34,
-        163, 248, 204, 33, 163, 248, 228, 32, 163, 248, 230, 32, 163, 248, 230,
-        17, 163, 248, 228, 17, 163, 248, 232, 17, 163, 248, 234, 17, 131, 248,
-        154, 33, 20, 33, 163, 248, 236, 17, 163, 248, 238, 17, 195, 248, 244,
-        33, 195, 248, 252, 33, 208, 248, 200, 54, 195, 248, 156, 33, 195, 248,
-        160, 33, 195, 248, 164, 33, 195, 248, 168, 33, 195, 248, 172, 33, 3,
-        108, 3, 177, 152, 71, 1, 35, 132, 248, 19, 49, 16, 189, 208, 248, 56,
-        19, 8, 181, 65, 177, 131, 107, 24, 105, 10, 240, 224, 255, 208, 241,
-        1, 0, 56, 191, 0, 32, 8, 189, 8, 70, 8, 189, 45, 233, 240, 79, 133,
-        176, 30, 70, 189, 248, 56, 48, 13, 70, 2, 147, 189, 248, 60, 48, 209,
-        248, 12, 144, 3, 147, 189, 248, 64, 48, 15, 104, 4, 70, 209, 248, 16,
-        128, 17, 70, 42, 137, 1, 147, 254, 247, 115, 255, 49, 70, 32, 70, 31,
-        250, 137, 242, 254, 247, 109, 255, 43, 70, 186, 70, 0, 38, 61, 70, 155,
-        70, 93, 224, 184, 241, 32, 15, 64, 208, 6, 216, 184, 241, 8, 15, 77,
-        208, 184, 241, 16, 15, 79, 209, 68, 224, 184, 241, 60, 15, 6, 208, 184,
-        241, 64, 15, 3, 208, 184, 241, 48, 15, 69, 209, 25, 224, 218, 248, 0,
-        144, 32, 70, 31, 250, 137, 242, 2, 153, 254, 247, 74, 255, 32, 70, 79,
-        234, 25, 65, 255, 247, 134, 254, 218, 248, 4, 144, 32, 70, 31, 250,
-        137, 241, 255, 247, 127, 254, 32, 70, 79, 234, 25, 65, 255, 247, 122,
-        254, 42, 224, 79, 240, 0, 9, 32, 70, 185, 241, 0, 15, 4, 209, 2, 153,
-        42, 136, 254, 247, 46, 255, 3, 224, 53, 248, 25, 16, 255, 247, 106,
-        254, 9, 241, 1, 9, 185, 241, 3, 15, 237, 209, 21, 224, 87, 248, 38,
-        32, 32, 70, 3, 153, 18, 12, 254, 247, 28, 255, 32, 70, 1, 153, 55, 248,
-        38, 32, 7, 224, 32, 70, 1, 153, 55, 248, 22, 32, 2, 224, 1, 153, 186,
-        93, 32, 70, 254, 247, 13, 255, 1, 54, 10, 241, 8, 10, 6, 53, 219, 248,
-        4, 48, 158, 66, 157, 211, 5, 176, 189, 232, 240, 143, 45, 233, 240,
-        79, 133, 176, 152, 70, 189, 248, 56, 48, 209, 248, 12, 144, 2, 147,
-        189, 248, 60, 48, 13, 70, 3, 147, 189, 248, 64, 48, 14, 104, 4, 70,
-        15, 105, 17, 70, 42, 137, 1, 147, 254, 247, 235, 254, 65, 70, 32, 70,
-        31, 250, 137, 242, 254, 247, 229, 254, 179, 70, 178, 70, 79, 240, 0,
-        8, 95, 224, 32, 47, 58, 208, 4, 216, 8, 47, 78, 208, 16, 47, 82, 209,
-        68, 224, 60, 47, 4, 208, 64, 47, 2, 208, 48, 47, 75, 209, 23, 224, 2,
-        153, 32, 70, 254, 247, 194, 254, 129, 70, 32, 70, 255, 247, 1, 254,
-        73, 234, 0, 64, 203, 248, 0, 0, 32, 70, 255, 247, 250, 253, 129, 70,
-        32, 70, 255, 247, 246, 253, 73, 234, 0, 64, 203, 248, 4, 0, 50, 224,
-        79, 240, 0, 9, 32, 70, 185, 241, 0, 15, 5, 209, 2, 153, 254, 247, 165,
-        254, 170, 248, 0, 0, 3, 224, 255, 247, 227, 253, 42, 248, 25, 0, 9,
-        241, 1, 9, 185, 241, 3, 15, 236, 209, 28, 224, 1, 153, 32, 70, 254,
-        247, 148, 254, 3, 153, 129, 70, 70, 248, 40, 0, 32, 70, 254, 247, 141,
-        254, 73, 234, 0, 64, 70, 248, 40, 0, 12, 224, 32, 70, 1, 153, 254, 247,
-        132, 254, 38, 248, 24, 0, 5, 224, 32, 70, 1, 153, 254, 247, 125, 254,
-        6, 248, 8, 0, 8, 241, 1, 8, 11, 241, 8, 11, 10, 241, 6, 10, 107, 104,
-        152, 69, 156, 211, 5, 176, 189, 232, 240, 143, 127, 181, 2, 147, 8,
-        155, 3, 145, 5, 147, 9, 155, 1, 146, 4, 147, 1, 169, 10, 155, 152, 71,
-        7, 176, 0, 189, 127, 181, 2, 147, 8, 155, 3, 145, 5, 147, 9, 155, 1,
-        146, 4, 147, 1, 169, 10, 155, 152, 71, 7, 176, 0, 189, 240, 181, 65,
-        75, 139, 176, 208, 248, 252, 64, 7, 70, 13, 70, 106, 70, 3, 241, 16,
-        14, 24, 104, 89, 104, 22, 70, 3, 198, 8, 51, 115, 69, 50, 70, 247, 209,
-        24, 104, 57, 75, 48, 96, 5, 170, 3, 241, 16, 14, 24, 104, 89, 104, 22,
-        70, 3, 198, 8, 51, 115, 69, 50, 70, 247, 209, 24, 104, 0, 35, 48, 96,
-        164, 248, 112, 53, 13, 177, 107, 70, 0, 224, 5, 171, 186, 107, 0, 33,
-        16, 105, 20, 34, 10, 240, 181, 254, 0, 35, 164, 248, 104, 53, 0, 45,
-        79, 244, 128, 115, 164, 248, 192, 55, 12, 191, 64, 35, 65, 35, 164,
-        248, 12, 53, 65, 246, 2, 35, 164, 248, 20, 53, 79, 240, 0, 3, 164, 248,
-        8, 53, 164, 248, 10, 53, 164, 248, 76, 53, 79, 240, 20, 3, 164, 248,
-        106, 53, 64, 246, 38, 3, 164, 248, 104, 53, 79, 240, 0, 3, 164, 248,
-        0, 53, 79, 240, 208, 3, 164, 248, 2, 53, 12, 191, 250, 38, 30, 38, 180,
-        248, 2, 53, 0, 37, 2, 224, 10, 32, 223, 243, 200, 245, 181, 66, 9, 218,
-        180, 248, 14, 53, 1, 53, 24, 6, 245, 212, 3, 224, 10, 32, 223, 243,
-        189, 245, 0, 224, 11, 37, 1, 61, 8, 208, 180, 248, 14, 53, 89, 5, 244,
-        213, 3, 224, 10, 32, 223, 243, 177, 245, 1, 224, 64, 242, 245, 21, 1,
-        61, 3, 208, 180, 248, 144, 54, 218, 5, 243, 212, 11, 176, 240, 189,
-        188, 179, 3, 0, 208, 179, 3, 0, 11, 70, 208, 248, 40, 17, 10, 177, 25,
-        67, 1, 224, 33, 234, 3, 1, 155, 7, 192, 248, 40, 17, 2, 213, 17, 70,
-        254, 247, 19, 190, 112, 71, 208, 248, 40, 1, 192, 243, 0, 16, 112, 71,
-        16, 181, 208, 248, 40, 49, 33, 177, 67, 240, 16, 3, 192, 248, 40, 49,
-        16, 189, 35, 240, 16, 3, 210, 7, 192, 248, 40, 49, 10, 213, 131, 107,
-        208, 248, 68, 66, 26, 106, 155, 110, 154, 66, 136, 191, 195, 235, 2,
-        1, 196, 248, 128, 16, 16, 189, 131, 107, 16, 181, 88, 33, 4, 70, 71,
-        246, 127, 114, 24, 105, 10, 240, 240, 253, 163, 107, 90, 33, 24, 105,
-        71, 246, 127, 114, 10, 240, 233, 253, 163, 107, 112, 33, 24, 105, 71,
-        246, 127, 114, 10, 240, 226, 253, 163, 107, 114, 33, 24, 105, 71, 246,
-        127, 114, 10, 240, 219, 253, 0, 32, 16, 189, 56, 181, 208, 248, 252,
-        48, 4, 70, 211, 248, 32, 49, 208, 248, 40, 49, 128, 107, 64, 246, 2,
-        2, 13, 70, 26, 64, 0, 105, 9, 177, 180, 248, 10, 17, 0, 50, 195, 243,
-        128, 3, 24, 191, 1, 34, 10, 240, 253, 253, 212, 248, 176, 48, 19, 177,
-        32, 70, 41, 70, 152, 71, 56, 189, 160, 248, 14, 17, 112, 71, 131, 107,
-        202, 178, 1, 244, 96, 81, 177, 245, 192, 95, 24, 105, 8, 191, 66, 244,
-        0, 114, 160, 33, 10, 240, 170, 189, 160, 248, 10, 17, 112, 71, 176,
-        248, 10, 1, 112, 71, 112, 71, 64, 246, 195, 19, 152, 66, 140, 191, 79,
-        240, 255, 48, 0, 32, 112, 71, 112, 71, 0, 0, 16, 181, 0, 35, 6, 74,
-        153, 0, 50, 248, 35, 64, 132, 66, 2, 209, 82, 24, 80, 136, 16, 189,
-        1, 51, 14, 43, 243, 209, 0, 32, 16, 189, 84, 229, 3, 0, 8, 181, 200,
-        178, 255, 247, 234, 255, 189, 232, 8, 64, 255, 247, 220, 191, 240, 181,
-        31, 70, 155, 176, 0, 35, 25, 147, 32, 155, 4, 70, 3, 43, 13, 70, 33,
-        158, 4, 217, 25, 168, 57, 70, 4, 34, 217, 247, 34, 253, 25, 153, 64,
-        242, 239, 35, 10, 28, 24, 191, 1, 34, 157, 66, 114, 208, 31, 216, 181,
-        245, 42, 127, 101, 208, 12, 216, 64, 242, 158, 35, 157, 66, 72, 208,
-        64, 242, 159, 35, 157, 66, 76, 208, 181, 245, 28, 127, 64, 240, 156,
-        128, 52, 224, 64, 242, 237, 35, 157, 66, 0, 242, 153, 128, 181, 245,
-        59, 127, 128, 240, 192, 128, 64, 242, 169, 35, 157, 66, 64, 240, 141,
-        128, 63, 224, 64, 242, 53, 51, 157, 66, 15, 216, 181, 245, 77, 127,
-        128, 240, 178, 128, 64, 242, 242, 35, 157, 66, 122, 208, 64, 242, 243,
-        35, 157, 66, 118, 208, 181, 245, 60, 127, 120, 209, 152, 224, 64, 242,
-        125, 51, 157, 66, 102, 208, 3, 216, 181, 245, 95, 127, 111, 209, 78,
-        224, 181, 245, 124, 127, 0, 240, 140, 128, 64, 242, 10, 67, 157, 66,
-        102, 209, 137, 224, 32, 70, 255, 247, 73, 251, 32, 70, 49, 70, 254,
-        247, 31, 253, 32, 70, 255, 247, 90, 251, 136, 224, 0, 37, 32, 70, 51,
-        70, 0, 149, 255, 247, 116, 248, 40, 70, 129, 224, 1, 35, 0, 147, 32,
-        70, 51, 70, 255, 247, 108, 248, 122, 224, 163, 107, 91, 127, 0, 43,
-        111, 208, 32, 70, 57, 70, 255, 247, 115, 251, 113, 224, 163, 107, 91,
-        127, 0, 43, 102, 208, 32, 70, 51, 70, 255, 247, 99, 248, 103, 224, 64,
-        34, 2, 168, 57, 70, 217, 247, 162, 252, 189, 248, 8, 48, 12, 43, 94,
-        209, 189, 248, 10, 0, 0, 40, 90, 209, 189, 248, 14, 32, 189, 248, 16,
-        48, 164, 248, 90, 38, 189, 248, 18, 32, 164, 248, 86, 54, 164, 248,
-        88, 38, 78, 224, 61, 136, 1, 45, 71, 209, 18, 35, 115, 128, 53, 128,
-        32, 70, 180, 248, 10, 17, 255, 247, 72, 255, 59, 137, 152, 66, 1, 209,
-        181, 128, 15, 224, 0, 34, 178, 128, 12, 224, 59, 136, 1, 43, 12, 191,
-        111, 240, 22, 0, 111, 240, 1, 0, 51, 224, 18, 168, 57, 70, 28, 34, 217,
-        247, 109, 252, 111, 240, 22, 0, 43, 224, 64, 34, 2, 168, 57, 70, 217,
-        247, 101, 252, 189, 248, 8, 48, 189, 248, 10, 0, 189, 248, 12, 32, 12,
-        43, 51, 128, 112, 128, 178, 128, 2, 208, 15, 35, 51, 128, 23, 224, 176,
-        185, 180, 248, 90, 38, 242, 128, 180, 248, 86, 54, 51, 129, 180, 248,
-        88, 70, 116, 129, 13, 224, 0, 32, 48, 96, 10, 224, 163, 107, 91, 107,
-        51, 96, 5, 224, 111, 240, 10, 0, 3, 224, 111, 240, 1, 0, 0, 224, 0,
-        32, 27, 176, 240, 189, 248, 181, 6, 70, 13, 70, 16, 70, 20, 70, 0, 33,
-        28, 34, 219, 243, 139, 240, 0, 39, 13, 75, 249, 90, 150, 248, 156, 50,
-        35, 177, 148, 41, 2, 217, 165, 41, 14, 217, 1, 224, 144, 41, 11, 208,
-        2, 45, 2, 209, 14, 41, 4, 217, 6, 224, 1, 45, 4, 209, 14, 41, 2, 217,
-        32, 70, 220, 243, 60, 242, 4, 55, 56, 47, 228, 209, 248, 189, 84, 229,
-        3, 0, 48, 181, 144, 248, 156, 66, 0, 34, 14, 75, 211, 90, 67, 244, 128,
-        80, 14, 43, 140, 191, 79, 244, 64, 69, 0, 37, 40, 67, 28, 177, 148,
-        43, 1, 217, 165, 43, 8, 217, 2, 41, 2, 209, 14, 43, 4, 216, 48, 189,
-        1, 41, 1, 209, 14, 43, 3, 216, 4, 50, 56, 42, 228, 209, 255, 32, 48,
-        189, 0, 191, 84, 229, 3, 0, 16, 181, 144, 248, 51, 49, 11, 112, 144,
-        248, 74, 49, 51, 177, 144, 248, 78, 65, 144, 248, 73, 49, 4, 177, 91,
-        66, 11, 112, 18, 177, 144, 248, 76, 49, 19, 112, 0, 32, 16, 189, 48,
-        181, 20, 70, 26, 70, 157, 248, 12, 48, 80, 177, 28, 177, 144, 248, 63,
-        86, 173, 0, 37, 112, 34, 177, 201, 178, 189, 232, 48, 64, 9, 240, 66,
-        188, 48, 189, 45, 233, 240, 79, 131, 107, 144, 70, 90, 108, 13, 70,
-        64, 242, 57, 81, 133, 176, 79, 240, 0, 9, 138, 66, 4, 70, 141, 248,
-        15, 144, 176, 248, 10, 17, 3, 208, 64, 242, 139, 80, 130, 66, 7, 209,
-        1, 244, 64, 73, 169, 245, 64, 78, 222, 241, 0, 9, 73, 235, 14, 9, 1,
-        244, 96, 81, 177, 245, 0, 95, 152, 104, 5, 208, 161, 245, 192, 87, 121,
-        66, 65, 235, 7, 1, 0, 224, 2, 33, 11, 240, 196, 248, 7, 70, 0, 40, 0,
-        240, 246, 128, 53, 177, 32, 70, 41, 70, 180, 248, 10, 33, 59, 70, 255,
-        247, 188, 249, 180, 248, 10, 177, 88, 70, 220, 243, 94, 242, 11, 244,
-        96, 90, 163, 107, 186, 245, 0, 95, 152, 104, 5, 208, 170, 245, 192,
-        82, 81, 66, 65, 235, 2, 1, 0, 224, 2, 33, 11, 240, 163, 248, 163, 107,
-        5, 70, 16, 185, 152, 104, 57, 70, 22, 224, 186, 245, 0, 95, 152, 104,
-        5, 208, 170, 245, 192, 83, 89, 66, 65, 235, 3, 1, 0, 224, 2, 33, 11,
-        240, 144, 248, 6, 70, 80, 185, 163, 107, 57, 70, 152, 104, 11, 240,
-        151, 248, 163, 107, 41, 70, 152, 104, 11, 240, 146, 248, 184, 224, 212,
-        248, 188, 6, 184, 177, 11, 240, 150, 248, 186, 245, 0, 95, 6, 208, 170,
-        245, 192, 92, 220, 241, 0, 3, 67, 235, 12, 3, 0, 224, 2, 35, 152, 66,
-        8, 208, 163, 107, 212, 248, 188, 22, 152, 104, 11, 240, 121, 248, 0,
-        35, 196, 248, 188, 54, 212, 248, 188, 54, 251, 185, 163, 107, 186, 245,
-        0, 95, 152, 104, 6, 208, 170, 245, 192, 94, 222, 241, 0, 1, 65, 235,
-        14, 1, 0, 224, 2, 33, 11, 240, 86, 248, 196, 248, 188, 6, 104, 185,
-        163, 107, 57, 70, 152, 104, 11, 240, 92, 248, 163, 107, 41, 70, 152,
-        104, 11, 240, 87, 248, 163, 107, 49, 70, 152, 104, 190, 231, 212, 248,
-        188, 6, 11, 240, 32, 248, 32, 70, 254, 247, 94, 251, 40, 70, 148, 249,
-        51, 17, 11, 240, 103, 249, 148, 248, 76, 49, 243, 185, 13, 241, 15,
-        2, 0, 147, 32, 70, 51, 70, 89, 70, 255, 247, 43, 255, 48, 70, 57, 70,
-        11, 240, 14, 250, 48, 70, 148, 249, 61, 22, 11, 240, 223, 249, 49, 70,
-        40, 70, 11, 240, 5, 250, 148, 248, 16, 17, 99, 41, 2, 216, 40, 70, 11,
-        240, 232, 249, 40, 70, 11, 240, 3, 249, 40, 70, 11, 240, 4, 249, 148,
-        248, 63, 54, 130, 70, 155, 0, 152, 66, 111, 240, 127, 1, 40, 70, 184,
-        191, 95, 250, 131, 250, 11, 240, 10, 249, 0, 35, 132, 248, 54, 161,
-        132, 248, 55, 1, 132, 248, 73, 1, 132, 248, 78, 49, 132, 248, 56, 49,
-        184, 241, 0, 15, 3, 208, 40, 70, 65, 70, 11, 240, 49, 249, 148, 248,
-        58, 49, 40, 70, 19, 177, 185, 241, 0, 15, 4, 208, 148, 249, 54, 17,
-        11, 240, 144, 249, 3, 224, 148, 249, 55, 17, 11, 240, 159, 249, 212,
-        248, 188, 6, 41, 70, 11, 240, 222, 249, 163, 107, 57, 70, 152, 104,
-        10, 240, 233, 255, 163, 107, 41, 70, 152, 104, 10, 240, 228, 255, 163,
-        107, 49, 70, 152, 104, 10, 240, 223, 255, 184, 241, 0, 15, 3, 209, 163,
-        108, 11, 177, 32, 70, 152, 71, 5, 176, 189, 232, 240, 143, 112, 181,
-        128, 248, 76, 33, 128, 248, 77, 33, 130, 107, 128, 248, 51, 17, 30,
-        70, 19, 127, 4, 70, 243, 177, 208, 248, 40, 17, 64, 246, 2, 3, 11, 64,
-        195, 185, 208, 248, 252, 48, 211, 248, 32, 49, 3, 240, 1, 3, 131, 240,
-        1, 5, 19, 177, 16, 105, 10, 240, 219, 250, 32, 70, 49, 70, 0, 34, 255,
-        247, 179, 254, 32, 70, 254, 247, 155, 252, 29, 185, 163, 107, 24, 105,
-        10, 240, 212, 250, 0, 32, 112, 189, 144, 248, 55, 1, 127, 40, 40, 191,
-        127, 32, 112, 71, 144, 248, 54, 1, 0, 40, 56, 191, 0, 32, 112, 71, 128,
-        248, 16, 17, 112, 71, 56, 181, 131, 107, 4, 70, 13, 70, 24, 105, 10,
-        240, 182, 250, 32, 70, 41, 70, 0, 34, 255, 247, 142, 254, 32, 70, 254,
-        247, 118, 252, 163, 107, 24, 105, 189, 232, 56, 64, 10, 240, 174, 186,
-        128, 248, 9, 17, 112, 71, 112, 71, 0, 35, 128, 248, 78, 50, 128, 248,
-        79, 50, 112, 71, 112, 71, 248, 181, 31, 70, 0, 35, 59, 112, 144, 248,
-        58, 49, 4, 70, 13, 70, 22, 70, 131, 177, 131, 107, 27, 127, 107, 177,
-        255, 247, 174, 248, 32, 70, 41, 70, 58, 70, 9, 240, 120, 250, 43, 120,
-        32, 70, 51, 112, 189, 232, 248, 64, 255, 247, 186, 184, 248, 189, 1,
-        35, 240, 181, 19, 114, 19, 104, 21, 70, 67, 240, 8, 2, 42, 96, 176,
-        249, 80, 33, 133, 176, 1, 50, 4, 191, 67, 240, 9, 3, 43, 96, 144, 248,
-        58, 49, 4, 70, 15, 70, 27, 177, 43, 104, 67, 240, 2, 3, 43, 96, 180,
-        248, 10, 17, 163, 107, 1, 244, 96, 81, 177, 245, 0, 95, 152, 104, 6,
-        208, 161, 245, 192, 92, 220, 241, 0, 1, 65, 235, 12, 1, 0, 224, 2, 33,
-        10, 240, 35, 255, 6, 70, 144, 177, 0, 35, 180, 248, 10, 17, 0, 147,
-        32, 70, 51, 70, 13, 241, 15, 2, 255, 247, 20, 254, 48, 70, 169, 106,
-        11, 240, 79, 248, 163, 107, 49, 70, 152, 104, 10, 240, 28, 255, 32,
-        70, 57, 70, 234, 106, 255, 247, 24, 254, 148, 248, 56, 49, 32, 70, 107,
-        114, 5, 241, 10, 1, 5, 241, 18, 3, 5, 241, 14, 2, 255, 247, 146, 255,
-        148, 248, 58, 49, 227, 177, 163, 107, 27, 127, 203, 177, 32, 70, 255,
-        247, 70, 248, 148, 248, 54, 49, 235, 116, 148, 248, 54, 49, 43, 117,
-        212, 248, 156, 48, 51, 177, 32, 70, 152, 71, 24, 177, 43, 104, 67, 240,
-        3, 3, 2, 224, 43, 104, 35, 240, 3, 3, 43, 96, 32, 70, 255, 247, 71,
-        248, 5, 176, 240, 189, 144, 248, 8, 49, 19, 177, 0, 35, 128, 248, 8,
-        49, 0, 32, 112, 71, 131, 107, 91, 127, 11, 177, 10, 240, 205, 184, 24,
-        70, 112, 71, 131, 107, 91, 127, 11, 177, 10, 240, 246, 184, 24, 70,
-        112, 71, 131, 107, 1, 32, 147, 248, 134, 48, 11, 112, 112, 71, 131,
-        107, 131, 248, 134, 16, 112, 71, 112, 181, 144, 248, 18, 81, 4, 70,
-        14, 70, 0, 45, 116, 209, 1, 35, 128, 248, 18, 49, 255, 247, 43, 252,
-        132, 248, 27, 81, 32, 70, 49, 70, 255, 247, 24, 252, 212, 248, 252,
-        48, 211, 248, 32, 49, 212, 248, 40, 49, 196, 248, 164, 81, 154, 7, 11,
-        212, 212, 248, 200, 38, 210, 248, 40, 40, 50, 177, 146, 248, 74, 32,
-        26, 185, 67, 240, 32, 3, 196, 248, 40, 49, 229, 107, 0, 45, 80, 208,
-        1, 33, 32, 70, 255, 247, 46, 249, 180, 248, 10, 17, 180, 248, 14, 49,
-        1, 244, 96, 81, 153, 66, 3, 208, 163, 107, 24, 105, 10, 240, 190, 249,
-        1, 33, 132, 248, 61, 19, 32, 70, 255, 247, 199, 251, 163, 107, 147,
-        248, 132, 32, 1, 42, 180, 248, 10, 33, 10, 209, 18, 244, 64, 79, 1,
-        209, 218, 111, 10, 224, 211, 248, 128, 32, 1, 42, 136, 191, 0, 34, 4,
-        224, 18, 244, 64, 79, 12, 191, 26, 111, 154, 111, 218, 102, 217, 110,
-        0, 34, 32, 70, 254, 247, 228, 251, 32, 70, 168, 71, 0, 37, 163, 107,
-        132, 248, 17, 81, 147, 248, 134, 16, 32, 70, 255, 247, 147, 255, 163,
-        107, 132, 248, 18, 81, 24, 105, 146, 33, 10, 240, 116, 249, 148, 248,
-        212, 60, 64, 0, 1, 43, 164, 248, 150, 2, 4, 209, 60, 35, 164, 248, 122,
-        50, 196, 248, 0, 86, 112, 189, 16, 181, 208, 248, 200, 54, 201, 178,
-        28, 120, 140, 66, 5, 209, 208, 248, 248, 16, 161, 248, 118, 34, 131,
-        248, 180, 32, 16, 189, 0, 0, 240, 181, 30, 70, 50, 75, 139, 176, 13,
-        70, 20, 70, 1, 175, 3, 241, 16, 14, 24, 104, 89, 104, 58, 70, 3, 194,
-        8, 51, 115, 69, 23, 70, 247, 209, 44, 75, 5, 175, 3, 241, 16, 14, 24,
-        104, 89, 104, 58, 70, 3, 194, 8, 51, 115, 69, 23, 70, 247, 209, 0, 33,
-        2, 34, 9, 168, 218, 243, 62, 245, 41, 104, 0, 35, 10, 70, 24, 70, 7,
-        224, 82, 8, 1, 48, 192, 178, 2, 240, 1, 5, 0, 45, 24, 191, 3, 70, 0,
-        42, 245, 209, 4, 43, 3, 216, 195, 241, 4, 2, 145, 64, 11, 224, 1, 32,
-        90, 31, 16, 250, 2, 242, 81, 24, 26, 24, 144, 64, 1, 66, 24, 191, 211,
-        178, 26, 31, 209, 64, 10, 170, 1, 240, 15, 1, 81, 24, 17, 248, 36, 44,
-        3, 235, 67, 0, 17, 248, 20, 28, 2, 235, 128, 2, 153, 66, 140, 191, 19,
-        70, 83, 28, 155, 178, 26, 178, 64, 246, 161, 33, 74, 67, 18, 19, 32,
-        50, 34, 128, 17, 154, 18, 136, 194, 241, 127, 66, 2, 245, 126, 2, 2,
-        245, 255, 50, 242, 50, 155, 24, 51, 128, 11, 176, 240, 189, 236, 179,
-        3, 0, 252, 179, 3, 0, 0, 32, 112, 71, 128, 248, 12, 29, 112, 71, 16,
-        181, 144, 248, 27, 49, 0, 43, 55, 208, 219, 7, 201, 178, 39, 213, 208,
-        248, 32, 49, 139, 66, 29, 209, 144, 248, 253, 60, 83, 177, 0, 35, 132,
-        107, 228, 24, 1, 51, 8, 43, 132, 248, 32, 33, 248, 209, 0, 35, 128,
-        248, 253, 60, 131, 107, 211, 248, 40, 65, 27, 25, 131, 248, 32, 33,
-        131, 107, 211, 248, 40, 65, 7, 44, 1, 208, 1, 52, 0, 224, 0, 36, 195,
-        248, 40, 65, 144, 248, 27, 49, 35, 240, 1, 3, 128, 248, 27, 49, 144,
-        248, 27, 49, 19, 240, 2, 15, 7, 208, 35, 240, 2, 3, 128, 248, 27, 49,
-        131, 107, 24, 105, 10, 240, 224, 248, 0, 32, 16, 189, 56, 181, 144,
-        248, 27, 49, 4, 70, 0, 43, 45, 209, 1, 41, 2, 208, 2, 41, 44, 209, 1,
-        224, 192, 248, 32, 33, 163, 107, 128, 248, 27, 17, 26, 106, 148, 248,
-        145, 1, 196, 248, 28, 33, 160, 185, 148, 248, 36, 81, 0, 45, 30, 209,
-        24, 105, 142, 33, 10, 240, 138, 248, 163, 107, 65, 0, 137, 178, 24,
-        105, 116, 49, 1, 34, 10, 240, 127, 248, 32, 70, 9, 240, 77, 253, 40,
-        70, 56, 189, 180, 248, 10, 17, 32, 70, 111, 240, 94, 2, 189, 232, 56,
-        64, 255, 247, 141, 191, 111, 240, 24, 0, 56, 189, 111, 240, 2, 0, 56,
-        189, 16, 181, 4, 70, 255, 247, 192, 250, 2, 33, 194, 178, 32, 70, 189,
-        232, 16, 64, 255, 247, 187, 191, 112, 71, 0, 33, 111, 240, 91, 2, 255,
-        247, 118, 191, 0, 35, 129, 107, 26, 70, 200, 24, 144, 249, 32, 1, 1,
-        51, 8, 43, 2, 68, 248, 209, 0, 42, 184, 191, 7, 50, 210, 8, 80, 178,
-        112, 71, 0, 32, 112, 71, 240, 181, 0, 36, 30, 224, 80, 248, 4, 123,
-        0, 35, 61, 70, 30, 70, 8, 224, 109, 8, 1, 54, 246, 178, 5, 240, 1, 12,
-        188, 241, 0, 15, 24, 191, 51, 70, 0, 45, 244, 209, 43, 177, 93, 30,
-        55, 250, 5, 245, 5, 240, 1, 5, 0, 224, 29, 70, 3, 235, 67, 3, 3, 235,
-        69, 5, 13, 85, 1, 52, 227, 178, 147, 66, 221, 211, 240, 189, 115, 181,
-        6, 70, 13, 70, 20, 70, 0, 33, 1, 34, 1, 168, 218, 243, 36, 244, 179,
-        107, 79, 244, 69, 113, 24, 105, 10, 240, 22, 248, 40, 70, 1, 169, 1,
-        34, 255, 247, 198, 255, 157, 248, 4, 48, 0, 32, 35, 112, 124, 189, 48,
-        181, 208, 248, 248, 32, 205, 136, 146, 248, 45, 54, 75, 185, 131, 107,
-        91, 105, 10, 43, 5, 217, 76, 138, 20, 244, 128, 115, 1, 209, 1, 34,
-        28, 224, 140, 136, 235, 178, 20, 240, 3, 15, 1, 208, 157, 43, 7, 208,
-        133, 107, 109, 105, 35, 45, 7, 209, 77, 138, 21, 240, 32, 15, 3, 208,
-        1, 35, 139, 119, 0, 35, 10, 224, 144, 249, 4, 6, 27, 24, 224, 4, 68,
-        191, 146, 249, 34, 38, 155, 24, 203, 119, 0, 34, 138, 119, 11, 119,
-        0, 35, 75, 119, 48, 189, 1, 33, 7, 240, 243, 190, 0, 33, 7, 240, 240,
-        190, 17, 177, 1, 33, 255, 247, 246, 191, 1, 33, 255, 247, 246, 191,
-        112, 71, 0, 0, 45, 233, 240, 79, 35, 79, 143, 176, 28, 70, 4, 173, 0,
-        35, 6, 70, 136, 70, 147, 70, 13, 147, 15, 207, 15, 197, 15, 207, 15,
-        197, 221, 248, 96, 144, 59, 104, 185, 241, 3, 15, 43, 96, 4, 217, 13,
-        168, 33, 70, 4, 34, 216, 247, 95, 255, 221, 248, 52, 160, 4, 173, 55,
-        70, 25, 155, 205, 248, 0, 144, 1, 147, 26, 155, 56, 70, 2, 147, 27,
-        155, 65, 70, 3, 147, 46, 104, 35, 70, 90, 70, 176, 71, 85, 248, 4, 63,
-        27, 177, 16, 241, 23, 15, 235, 208, 17, 224, 16, 241, 23, 15, 14, 209,
-        27, 155, 56, 70, 0, 147, 13, 155, 65, 70, 1, 147, 26, 241, 0, 3, 24,
-        191, 1, 35, 2, 147, 34, 70, 25, 155, 253, 247, 241, 255, 15, 176, 189,
-        232, 240, 143, 0, 191, 12, 180, 3, 0, 195, 105, 4, 59, 8, 43, 6, 216,
-        223, 232, 3, 240, 24, 5, 9, 7, 9, 5, 11, 5, 13, 0, 0, 32, 112, 71, 23,
-        32, 112, 71, 4, 32, 112, 71, 7, 32, 112, 71, 144, 248, 22, 6, 1, 40,
-        8, 208, 3, 40, 20, 191, 79, 244, 131, 112, 79, 244, 139, 112, 112, 71,
-        1, 32, 112, 71, 79, 244, 139, 112, 112, 71, 131, 107, 19, 181, 26, 106,
-        4, 70, 1, 50, 26, 98, 144, 248, 24, 33, 0, 42, 0, 240, 178, 128, 176,
-        248, 158, 37, 42, 177, 208, 248, 200, 22, 161, 248, 54, 34, 161, 248,
-        58, 34, 180, 248, 162, 37, 42, 177, 212, 248, 200, 22, 161, 248, 40,
-        34, 161, 248, 36, 34, 180, 248, 160, 37, 42, 177, 212, 248, 200, 22,
-        161, 248, 34, 34, 161, 248, 38, 34, 212, 248, 40, 17, 64, 246, 6, 34,
-        10, 64, 42, 185, 147, 248, 44, 49, 19, 177, 32, 70, 254, 247, 233, 248,
-        163, 107, 26, 106, 27, 110, 178, 251, 243, 241, 3, 251, 17, 35, 171,
-        185, 32, 70, 254, 247, 71, 253, 212, 248, 40, 49, 64, 246, 2, 2, 161,
-        107, 26, 64, 0, 50, 8, 105, 24, 191, 1, 34, 180, 248, 10, 17, 195, 243,
-        128, 3, 9, 240, 71, 255, 32, 70, 254, 247, 76, 253, 212, 248, 40, 33,
-        64, 246, 14, 35, 19, 64, 179, 185, 163, 107, 212, 248, 68, 34, 25, 106,
-        210, 248, 144, 32, 211, 248, 24, 49, 138, 26, 154, 66, 11, 211, 148,
-        248, 10, 33, 32, 70, 1, 33, 255, 247, 76, 254, 162, 107, 212, 248, 68,
-        50, 18, 106, 195, 248, 144, 32, 148, 248, 27, 49, 75, 177, 163, 107,
-        26, 106, 212, 248, 28, 49, 211, 26, 5, 43, 2, 217, 0, 35, 132, 248,
-        27, 49, 212, 248, 172, 33, 42, 177, 163, 107, 25, 106, 27, 110, 138,
-        26, 154, 66, 13, 211, 212, 248, 40, 33, 64, 246, 2, 3, 19, 64, 59, 185,
-        32, 70, 254, 247, 160, 248, 24, 177, 163, 107, 27, 106, 196, 248, 172,
-        49, 212, 248, 40, 33, 64, 246, 15, 35, 19, 64, 43, 187, 32, 70, 253,
-        247, 50, 255, 32, 70, 253, 247, 46, 255, 212, 248, 68, 50, 211, 248,
-        136, 32, 18, 177, 1, 58, 195, 248, 136, 32, 212, 248, 168, 48, 11, 177,
-        32, 70, 152, 71, 163, 107, 24, 105, 9, 240, 197, 254, 104, 177, 163,
-        107, 1, 169, 24, 105, 13, 241, 7, 2, 9, 240, 192, 254, 32, 70, 157,
-        248, 7, 16, 189, 248, 4, 32, 253, 247, 16, 255, 0, 32, 28, 189, 3, 70,
-        0, 33, 152, 107, 64, 24, 1, 49, 8, 41, 128, 248, 32, 33, 248, 209, 154,
-        107, 0, 33, 194, 248, 40, 17, 209, 110, 3, 41, 7, 209, 211, 248, 124,
-        17, 201, 7, 3, 213, 18, 106, 8, 50, 195, 248, 112, 33, 0, 34, 153, 24,
-        2, 50, 79, 246, 164, 112, 32, 42, 161, 248, 220, 12, 247, 209, 0, 32,
-        131, 248, 252, 12, 112, 71, 67, 11, 179, 245, 128, 95, 19, 96, 164,
-        191, 163, 245, 0, 83, 19, 96, 192, 4, 192, 12, 176, 245, 128, 95, 8,
-        96, 164, 191, 160, 245, 0, 80, 8, 96, 112, 71, 0, 0, 73, 246, 117, 51,
-        75, 96, 0, 35, 11, 96, 79, 244, 52, 2, 152, 66, 172, 191, 1, 35, 79,
-        240, 255, 51, 2, 251, 3, 2, 45, 233, 240, 65, 79, 240, 180, 116, 146,
-        251, 244, 240, 4, 251, 16, 34, 33, 72, 0, 251, 3, 35, 0, 43, 5, 219,
-        218, 19, 1, 50, 181, 42, 13, 221, 27, 24, 8, 224, 90, 66, 210, 19, 1,
-        50, 82, 16, 82, 66, 90, 50, 4, 218, 3, 245, 52, 3, 79, 240, 255, 52,
-        0, 224, 1, 36, 0, 32, 2, 70, 5, 70, 78, 104, 171, 66, 15, 104, 223,
-        248, 76, 192, 70, 250, 2, 248, 9, 221, 184, 68, 23, 65, 246, 27, 78,
-        96, 92, 248, 0, 96, 193, 248, 0, 128, 173, 25, 9, 224, 200, 235, 7,
-        8, 23, 65, 246, 25, 78, 96, 92, 248, 0, 96, 193, 248, 0, 128, 173, 27,
-        1, 50, 4, 48, 18, 42, 223, 209, 75, 104, 99, 67, 75, 96, 11, 104, 92,
-        67, 12, 96, 189, 232, 240, 129, 0, 191, 0, 0, 76, 255, 12, 229, 3, 0,
-        247, 181, 2, 171, 3, 233, 3, 0, 1, 156, 0, 155, 0, 32, 16, 96, 36, 1,
-        27, 1, 1, 70, 0, 43, 67, 250, 1, 245, 68, 250, 1, 247, 9, 78, 6, 218,
-        219, 25, 54, 88, 23, 104, 100, 27, 190, 27, 22, 96, 5, 224, 219, 27,
-        54, 88, 23, 104, 100, 25, 190, 25, 22, 96, 1, 49, 4, 48, 18, 41, 231,
-        209, 254, 189, 12, 229, 3, 0, 16, 181, 4, 70, 208, 248, 72, 2, 6, 224,
-        3, 104, 196, 248, 72, 50, 223, 247, 71, 248, 212, 248, 72, 2, 0, 40,
-        246, 209, 4, 245, 41, 115, 196, 248, 68, 50, 79, 246, 206, 115, 196,
-        248, 72, 2, 164, 248, 48, 51, 196, 248, 36, 3, 196, 248, 40, 3, 16,
-        189, 112, 71, 128, 234, 224, 115, 163, 235, 224, 115, 0, 32, 1, 224,
-        1, 48, 192, 178, 83, 250, 0, 242, 0, 42, 249, 220, 112, 71, 16, 181,
-        0, 35, 2, 70, 24, 70, 79, 240, 128, 65, 25, 65, 12, 24, 148, 66, 79,
-        234, 80, 0, 156, 191, 196, 235, 2, 2, 8, 67, 2, 51, 32, 43, 241, 209,
-        144, 66, 56, 191, 1, 48, 16, 189, 131, 107, 131, 248, 135, 16, 131,
-        107, 131, 248, 136, 32, 131, 107, 131, 248, 137, 16, 131, 107, 131,
-        248, 138, 32, 112, 71, 131, 107, 131, 248, 137, 16, 112, 71, 112, 71,
-        112, 71, 0, 72, 112, 71, 140, 229, 3, 0, 16, 181, 12, 70, 1, 33, 9,
-        240, 61, 252, 32, 128, 1, 32, 16, 189, 7, 240, 122, 188, 112, 71, 0,
-        32, 112, 71, 208, 248, 72, 2, 3, 224, 195, 136, 139, 66, 2, 208, 0,
-        104, 0, 40, 249, 209, 112, 71, 16, 181, 176, 248, 10, 17, 4, 70, 255,
-        247, 240, 255, 212, 248, 68, 34, 0, 35, 194, 248, 136, 48, 1, 34, 132,
-        248, 25, 33, 132, 248, 26, 49, 111, 240, 22, 0, 16, 189, 0, 32, 112,
-        71, 112, 181, 4, 70, 13, 70, 255, 247, 220, 255, 41, 70, 6, 70, 32,
-        70, 254, 247, 152, 255, 99, 108, 22, 177, 6, 245, 29, 114, 1, 224, 4,
-        245, 41, 114, 196, 248, 68, 34, 19, 177, 32, 70, 41, 70, 152, 71, 54,
-        179, 32, 70, 255, 247, 227, 255, 212, 248, 68, 34, 83, 120, 115, 177,
-        163, 107, 212, 248, 56, 19, 24, 105, 9, 240, 49, 253, 163, 107, 0, 34,
-        24, 105, 212, 248, 56, 19, 19, 70, 9, 240, 38, 253, 16, 224, 148, 248,
-        121, 50, 107, 177, 3, 43, 11, 208, 163, 107, 210, 248, 128, 32, 25,
-        106, 155, 110, 138, 26, 154, 66, 3, 211, 32, 70, 2, 33, 255, 247, 172,
-        255, 1, 35, 132, 248, 253, 60, 212, 248, 40, 49, 161, 107, 64, 246,
-        2, 2, 26, 64, 8, 105, 0, 50, 41, 70, 24, 191, 1, 34, 195, 243, 128,
-        3, 189, 232, 112, 64, 9, 240, 66, 189, 8, 181, 208, 248, 144, 48, 11,
-        177, 152, 71, 8, 189, 111, 240, 22, 0, 8, 189, 45, 233, 247, 67, 134,
-        70, 79, 240, 0, 8, 2, 168, 12, 70, 21, 70, 64, 248, 4, 141, 113, 70,
-        4, 34, 30, 70, 10, 159, 221, 248, 44, 144, 216, 247, 158, 252, 1, 155,
-        19, 224, 184, 241, 0, 15, 1, 208, 184, 69, 7, 217, 3, 240, 15, 2, 82,
-        0, 170, 26, 6, 248, 8, 32, 27, 9, 2, 224, 50, 120, 6, 248, 8, 32, 8,
-        241, 1, 8, 95, 250, 136, 248, 200, 69, 233, 211, 47, 177, 123, 30, 242,
-        92, 100, 0, 20, 27, 244, 84, 244, 85, 189, 232, 254, 131, 0, 32, 112,
-        71, 19, 181, 12, 70, 19, 70, 0, 33, 34, 70, 0, 145, 253, 247, 79, 253,
-        28, 189, 131, 107, 16, 181, 154, 105, 4, 70, 146, 0, 25, 213, 176, 248,
-        10, 33, 18, 244, 64, 79, 20, 209, 24, 105, 9, 240, 240, 252, 212, 248,
-        252, 48, 179, 248, 180, 38, 146, 178, 66, 240, 3, 2, 163, 248, 180,
-        38, 212, 248, 252, 48, 179, 248, 184, 38, 146, 178, 66, 240, 192, 2,
-        163, 248, 184, 38, 16, 189, 224, 41, 16, 181, 4, 70, 21, 220, 65, 244,
-        128, 83, 155, 178, 14, 41, 204, 191, 79, 244, 64, 65, 0, 33, 25, 67,
-        255, 247, 54, 255, 1, 35, 132, 248, 8, 49, 32, 70, 9, 240, 45, 249,
-        32, 70, 255, 247, 199, 255, 0, 32, 16, 189, 111, 240, 18, 0, 16, 189,
-        248, 181, 4, 70, 15, 70, 22, 70, 208, 248, 252, 80, 255, 247, 120, 250,
-        163, 107, 207, 185, 24, 109, 180, 248, 76, 37, 16, 240, 2, 0, 165, 248,
-        244, 35, 164, 248, 76, 117, 88, 208, 180, 248, 80, 37, 212, 248, 252,
-        48, 79, 244, 122, 112, 163, 248, 156, 36, 180, 248, 84, 37, 163, 248,
-        158, 36, 222, 243, 216, 243, 56, 70, 248, 189, 27, 109, 153, 7, 30,
-        213, 212, 248, 252, 48, 79, 244, 122, 112, 179, 248, 156, 36, 179, 248,
-        158, 52, 146, 178, 155, 178, 196, 248, 84, 53, 181, 248, 156, 52, 196,
-        248, 80, 37, 35, 244, 0, 115, 27, 4, 27, 12, 165, 248, 156, 52, 181,
-        248, 158, 52, 155, 178, 67, 244, 0, 115, 165, 248, 158, 52, 222, 243,
-        180, 243, 32, 70, 57, 70, 1, 34, 255, 247, 152, 255, 0, 187, 2, 62,
-        20, 46, 154, 191, 15, 75, 155, 93, 1, 35, 219, 0, 3, 240, 24, 1, 180,
-        248, 76, 53, 27, 185, 181, 248, 244, 51, 164, 248, 76, 53, 181, 248,
-        244, 51, 35, 240, 63, 3, 27, 4, 27, 12, 165, 248, 244, 51, 181, 248,
-        244, 35, 146, 178, 66, 240, 32, 2, 65, 234, 2, 3, 165, 248, 244, 51,
-        248, 189, 244, 228, 3, 0, 55, 181, 5, 70, 12, 70, 255, 247, 11, 250,
-        40, 70, 68, 185, 7, 240, 75, 251, 213, 248, 148, 48, 40, 70, 79, 244,
-        96, 65, 152, 71, 18, 224, 33, 70, 0, 34, 255, 247, 95, 255, 4, 70, 96,
-        185, 40, 70, 55, 33, 6, 240, 123, 251, 1, 35, 141, 232, 24, 0, 40, 70,
-        33, 70, 112, 34, 35, 70, 7, 240, 119, 251, 32, 70, 62, 189, 112, 181,
-        14, 70, 5, 70, 208, 248, 252, 64, 255, 247, 228, 249, 62, 185, 181,
-        248, 74, 53, 48, 70, 164, 248, 244, 51, 165, 248, 74, 101, 112, 189,
-        40, 70, 49, 70, 1, 34, 255, 247, 57, 255, 152, 185, 181, 248, 74, 53,
-        27, 185, 180, 248, 244, 51, 165, 248, 74, 53, 180, 248, 244, 51, 3,
-        244, 124, 67, 164, 248, 244, 51, 180, 248, 244, 51, 155, 178, 67, 244,
-        10, 115, 164, 248, 244, 51, 112, 189, 45, 233, 243, 65, 8, 159, 4, 70,
-        13, 70, 22, 70, 152, 70, 59, 177, 3, 42, 5, 217, 104, 70, 25, 70, 4,
-        34, 216, 247, 101, 251, 1, 224, 0, 35, 0, 147, 27, 45, 6, 208, 184,
-        241, 0, 15, 0, 240, 102, 129, 0, 46, 64, 243, 99, 129, 168, 45, 0, 240,
-        99, 129, 33, 220, 93, 45, 0, 240, 9, 129, 14, 220, 60, 45, 0, 240, 243,
-        128, 3, 220, 27, 45, 64, 240, 81, 129, 61, 224, 74, 45, 0, 240, 224,
-        128, 92, 45, 64, 240, 74, 129, 243, 224, 96, 45, 61, 208, 5, 220, 94,
-        45, 110, 208, 95, 45, 64, 240, 65, 129, 124, 224, 97, 45, 84, 208, 135,
-        45, 64, 240, 59, 129, 33, 224, 211, 45, 0, 240, 252, 128, 11, 220, 170,
-        45, 0, 240, 129, 128, 192, 242, 187, 128, 194, 45, 0, 240, 52, 129,
-        195, 45, 64, 240, 43, 129, 165, 224, 239, 45, 0, 240, 228, 128, 6, 220,
-        212, 45, 0, 240, 252, 128, 238, 45, 64, 240, 32, 129, 215, 224, 165,
-        245, 154, 117, 3, 61, 1, 45, 0, 242, 25, 129, 46, 225, 32, 70, 255,
-        247, 1, 251, 200, 248, 0, 0, 40, 225, 163, 107, 29, 127, 0, 45, 64,
-        240, 30, 129, 32, 70, 253, 247, 6, 251, 32, 225, 1, 35, 59, 112, 163,
-        107, 91, 127, 0, 43, 0, 240, 11, 129, 32, 70, 254, 247, 113, 249, 32,
-        70, 254, 247, 218, 249, 0, 153, 32, 70, 1, 41, 2, 209, 253, 247, 209,
-        250, 2, 224, 137, 178, 253, 247, 181, 250, 200, 248, 0, 0, 32, 70, 254,
-        247, 216, 249, 32, 70, 254, 247, 116, 249, 255, 224, 1, 35, 59, 112,
-        163, 107, 91, 127, 0, 43, 0, 240, 235, 128, 32, 70, 254, 247, 81, 249,
-        32, 70, 254, 247, 186, 249, 0, 154, 32, 70, 145, 178, 18, 12, 253, 247,
-        170, 250, 228, 231, 1, 35, 59, 112, 163, 107, 91, 127, 0, 43, 0, 240,
-        215, 128, 32, 70, 254, 247, 61, 249, 32, 70, 189, 248, 0, 16, 253, 247,
-        176, 250, 200, 248, 0, 0, 213, 231, 1, 35, 59, 112, 163, 107, 91, 127,
-        0, 43, 0, 240, 197, 128, 32, 70, 254, 247, 43, 249, 0, 154, 32, 70,
-        145, 178, 18, 12, 253, 247, 168, 250, 196, 231, 163, 107, 90, 127, 0,
-        42, 0, 240, 182, 128, 24, 105, 9, 240, 252, 250, 32, 70, 254, 247, 25,
-        249, 0, 35, 200, 248, 0, 48, 226, 105, 12, 42, 20, 209, 13, 241, 7,
-        2, 32, 70, 13, 241, 6, 1, 141, 248, 6, 48, 141, 248, 7, 48, 8, 240,
-        215, 250, 157, 249, 6, 32, 157, 249, 7, 48, 146, 178, 155, 178, 67,
-        234, 2, 35, 200, 248, 0, 48, 32, 70, 254, 247, 19, 249, 163, 107, 24,
-        105, 9, 240, 221, 250, 154, 224, 163, 107, 27, 127, 0, 43, 0, 240, 139,
-        128, 184, 248, 0, 48, 3, 43, 52, 191, 111, 240, 12, 5, 111, 240, 1,
-        5, 141, 224, 163, 107, 27, 127, 0, 43, 20, 191, 111, 240, 12, 5, 111,
-        240, 3, 5, 132, 224, 163, 107, 27, 127, 0, 43, 121, 209, 227, 108, 0,
-        43, 116, 208, 32, 70, 0, 153, 152, 71, 36, 224, 163, 107, 27, 127, 0,
-        43, 110, 209, 32, 70, 0, 153, 216, 248, 4, 32, 216, 248, 8, 48, 255,
-        247, 27, 254, 23, 224, 32, 70, 0, 153, 255, 247, 134, 254, 18, 224,
-        163, 107, 27, 127, 0, 43, 92, 209, 32, 70, 0, 153, 255, 247, 162, 254,
-        9, 224, 32, 70, 65, 70, 1, 34, 2, 224, 32, 70, 65, 70, 0, 34, 51, 70,
-        253, 247, 66, 250, 5, 70, 82, 224, 163, 107, 218, 110, 200, 248, 0,
-        32, 212, 248, 124, 81, 21, 240, 1, 5, 73, 208, 66, 240, 128, 3, 200,
-        248, 0, 48, 212, 248, 128, 33, 67, 234, 2, 19, 200, 248, 0, 48, 61,
-        224, 0, 153, 0, 41, 55, 219, 4, 41, 53, 220, 162, 107, 211, 110, 139,
-        66, 52, 208, 21, 127, 0, 45, 50, 208, 209, 102, 16, 105, 9, 240, 105,
-        250, 0, 155, 35, 177, 32, 70, 0, 33, 1, 34, 253, 247, 183, 252, 163,
-        107, 1, 34, 217, 110, 32, 70, 253, 247, 177, 252, 163, 107, 0, 40, 24,
-        105, 12, 191, 111, 240, 2, 5, 0, 37, 9, 240, 89, 250, 23, 224, 111,
-        240, 22, 5, 20, 224, 111, 240, 1, 5, 17, 224, 111, 240, 12, 5, 14, 224,
-        111, 240, 10, 5, 11, 224, 111, 240, 3, 5, 8, 224, 29, 70, 6, 224, 111,
-        240, 4, 5, 3, 224, 111, 240, 28, 5, 0, 224, 0, 37, 40, 70, 189, 232,
-        252, 129, 131, 107, 155, 105, 155, 0, 23, 213, 176, 248, 10, 49, 19,
-        244, 64, 79, 18, 209, 208, 248, 252, 48, 179, 248, 180, 38, 146, 178,
-        66, 240, 3, 2, 163, 248, 180, 38, 208, 248, 252, 32, 178, 248, 184,
-        54, 35, 240, 192, 3, 27, 4, 27, 12, 162, 248, 184, 54, 112, 71, 3, 70,
-        1, 224, 11, 70, 17, 70, 179, 251, 241, 242, 1, 251, 18, 50, 0, 42, 247,
-        209, 8, 70, 112, 71, 248, 181, 13, 70, 176, 248, 10, 17, 4, 70, 22,
-        70, 31, 70, 254, 247, 114, 252, 64, 185, 180, 249, 86, 54, 51, 96, 180,
-        249, 88, 54, 59, 96, 180, 249, 90, 54, 43, 96, 248, 189, 208, 248, 248,
-        0, 112, 71, 0, 35, 11, 128, 112, 71, 45, 233, 240, 71, 29, 70, 144,
-        248, 27, 49, 140, 176, 67, 240, 1, 3, 13, 241, 8, 9, 128, 248, 27, 49,
-        4, 70, 15, 70, 12, 34, 0, 33, 72, 70, 157, 248, 88, 160, 217, 243, 222,
-        245, 0, 33, 4, 34, 5, 168, 217, 243, 217, 245, 0, 33, 1, 34, 11, 168,
-        217, 243, 212, 245, 0, 33, 2, 34, 9, 168, 217, 243, 207, 245, 6, 174,
-        0, 33, 2, 34, 8, 168, 217, 243, 201, 245, 0, 33, 2, 34, 48, 70, 217,
-        243, 196, 245, 79, 240, 1, 8, 0, 33, 2, 34, 7, 168, 217, 243, 189, 245,
-        8, 250, 7, 241, 32, 34, 137, 178, 157, 248, 96, 48, 32, 70, 205, 248,
-        0, 144, 1, 150, 8, 240, 12, 255, 4, 153, 3, 154, 189, 248, 24, 48, 138,
-        24, 121, 30, 8, 250, 1, 248, 144, 68, 40, 250, 7, 247, 96, 59, 173,
-        248, 24, 48, 148, 248, 27, 49, 5, 151, 3, 240, 254, 3, 132, 248, 27,
-        49, 157, 185, 180, 248, 10, 49, 32, 70, 0, 147, 5, 169, 43, 70, 11,
-        170, 255, 247, 101, 249, 148, 248, 27, 49, 35, 240, 1, 3, 132, 248,
-        27, 49, 0, 40, 77, 209, 157, 248, 44, 0, 75, 224, 1, 45, 79, 240, 0,
-        0, 67, 209, 141, 232, 65, 0, 8, 171, 32, 70, 5, 169, 9, 170, 255, 247,
-        27, 248, 10, 241, 255, 51, 219, 178, 2, 43, 26, 216, 10, 169, 32, 70,
-        255, 247, 126, 248, 32, 70, 13, 241, 42, 1, 255, 247, 119, 255, 186,
-        241, 1, 15, 7, 209, 189, 249, 40, 48, 189, 248, 32, 32, 91, 0, 211,
-        26, 173, 248, 32, 48, 189, 248, 32, 48, 189, 248, 42, 32, 211, 24, 173,
-        248, 32, 48, 180, 248, 10, 49, 79, 246, 120, 98, 79, 246, 108, 97, 3,
-        244, 96, 83, 179, 245, 192, 95, 20, 191, 11, 70, 19, 70, 189, 249, 32,
-        16, 26, 178, 145, 66, 184, 191, 173, 248, 32, 48, 189, 248, 32, 0, 148,
-        248, 27, 49, 128, 5, 128, 13, 35, 240, 1, 3, 132, 248, 27, 49, 0, 224,
-        40, 70, 12, 176, 189, 232, 240, 135, 208, 248, 196, 0, 8, 181, 0, 177,
-        128, 71, 8, 189, 8, 181, 208, 248, 200, 48, 19, 177, 8, 70, 152, 71,
-        8, 189, 24, 70, 8, 189, 8, 181, 208, 248, 204, 48, 19, 177, 8, 70, 152,
-        71, 8, 189, 24, 70, 8, 189, 8, 181, 208, 248, 208, 48, 19, 177, 8, 70,
-        17, 70, 152, 71, 8, 189, 8, 181, 208, 248, 212, 48, 128, 248, 164, 21,
-        3, 177, 152, 71, 8, 189, 0, 49, 24, 191, 1, 33, 128, 248, 167, 21, 112,
-        71, 7, 181, 131, 107, 2, 34, 0, 146, 24, 105, 0, 33, 19, 70, 9, 240,
-        252, 248, 14, 189, 7, 181, 131, 107, 2, 34, 0, 146, 0, 33, 24, 105,
-        11, 70, 9, 240, 242, 248, 14, 189, 111, 240, 127, 0, 112, 71, 0, 0,
-        45, 233, 240, 65, 152, 70, 138, 176, 0, 35, 8, 147, 16, 155, 4, 70,
-        3, 43, 13, 70, 17, 158, 19, 159, 4, 217, 8, 168, 65, 70, 4, 34, 216,
-        247, 136, 248, 8, 154, 64, 242, 207, 32, 17, 28, 24, 191, 1, 33, 133,
-        66, 203, 178, 0, 240, 128, 130, 0, 242, 239, 128, 64, 242, 129, 32,
-        133, 66, 0, 240, 238, 131, 107, 216, 181, 245, 27, 127, 0, 240, 224,
-        129, 44, 216, 64, 242, 90, 35, 157, 66, 0, 240, 227, 129, 11, 216, 181,
-        245, 22, 127, 0, 240, 251, 129, 0, 242, 254, 129, 82, 61, 1, 45, 0,
-        242, 186, 129, 0, 240, 245, 188, 64, 242, 105, 35, 157, 66, 0, 240,
-        187, 129, 9, 216, 64, 242, 91, 35, 157, 66, 0, 240, 208, 129, 181, 245,
-        26, 127, 64, 240, 169, 129, 170, 225, 64, 242, 106, 35, 157, 66, 0,
-        240, 175, 129, 64, 242, 107, 35, 157, 66, 64, 240, 158, 129, 173, 225,
-        181, 245, 29, 127, 0, 240, 236, 129, 27, 216, 64, 242, 111, 35, 157,
-        66, 0, 240, 201, 129, 10, 216, 64, 242, 109, 35, 157, 66, 0, 240, 167,
-        129, 64, 242, 110, 35, 157, 66, 64, 240, 136, 129, 182, 225, 64, 242,
-        114, 35, 157, 66, 0, 240, 202, 129, 64, 242, 115, 35, 157, 66, 64, 240,
-        125, 129, 191, 225, 64, 242, 121, 35, 157, 66, 0, 240, 221, 129, 9,
-        216, 64, 242, 117, 35, 157, 66, 0, 240, 201, 129, 181, 245, 30, 127,
-        64, 240, 109, 129, 199, 225, 181, 245, 31, 127, 0, 240, 221, 129, 181,
-        245, 32, 127, 64, 240, 100, 129, 4, 227, 64, 242, 187, 33, 141, 66,
-        0, 240, 164, 130, 59, 216, 64, 242, 139, 35, 157, 66, 0, 240, 202, 131,
-        27, 216, 181, 245, 33, 127, 0, 240, 172, 131, 11, 216, 64, 242, 130,
-        35, 157, 66, 0, 240, 67, 132, 64, 242, 131, 35, 157, 66, 64, 240, 72,
-        129, 0, 240, 68, 188, 64, 242, 134, 35, 157, 66, 0, 240, 165, 131, 64,
-        242, 138, 35, 157, 66, 64, 240, 60, 129, 176, 227, 181, 245, 46, 127,
-        0, 240, 107, 130, 9, 216, 181, 245, 35, 127, 0, 240, 191, 131, 64, 242,
-        142, 35, 157, 66, 64, 240, 45, 129, 196, 227, 64, 242, 185, 35, 157,
-        66, 0, 240, 100, 130, 64, 242, 186, 35, 157, 66, 64, 240, 34, 129, 110,
-        226, 64, 242, 193, 33, 141, 66, 0, 240, 160, 129, 25, 216, 64, 242,
-        190, 35, 157, 66, 0, 240, 83, 132, 9, 216, 181, 245, 47, 127, 0, 240,
-        63, 130, 64, 242, 189, 35, 157, 66, 64, 240, 12, 129, 50, 226, 64, 242,
-        191, 35, 157, 66, 0, 240, 92, 130, 181, 245, 48, 127, 64, 240, 2, 129,
-        124, 225, 64, 242, 197, 33, 141, 66, 0, 240, 147, 129, 9, 216, 64, 242,
-        195, 35, 157, 66, 0, 240, 129, 129, 181, 245, 49, 127, 64, 240, 242,
-        128, 130, 225, 64, 242, 198, 33, 141, 66, 0, 240, 204, 129, 64, 242,
-        199, 33, 141, 66, 64, 240, 231, 128, 187, 225, 64, 242, 126, 49, 141,
-        66, 0, 240, 141, 131, 111, 216, 64, 242, 231, 33, 141, 66, 0, 240, 229,
-        131, 48, 216, 64, 242, 222, 35, 157, 66, 0, 240, 148, 129, 16, 216,
-        64, 242, 209, 35, 157, 66, 0, 240, 114, 129, 192, 240, 107, 129, 64,
-        242, 218, 35, 157, 66, 0, 240, 119, 129, 181, 245, 55, 127, 64, 240,
-        196, 128, 121, 225, 64, 242, 227, 35, 157, 66, 0, 240, 211, 131, 9,
-        216, 181, 245, 56, 127, 0, 240, 190, 131, 64, 242, 225, 35, 157, 66,
-        64, 240, 180, 128, 193, 227, 181, 245, 57, 127, 0, 240, 180, 131, 64,
-        242, 229, 35, 157, 66, 64, 240, 170, 128, 194, 227, 64, 242, 39, 49,
-        141, 66, 0, 240, 116, 129, 25, 216, 181, 245, 65, 127, 0, 240, 137,
-        129, 9, 216, 181, 245, 58, 127, 0, 240, 39, 130, 64, 242, 233, 35, 157,
-        66, 64, 240, 149, 128, 41, 226, 64, 242, 35, 51, 157, 66, 0, 240, 85,
-        129, 64, 242, 37, 51, 157, 66, 64, 240, 138, 128, 83, 225, 181, 245,
-        90, 127, 0, 240, 172, 128, 9, 216, 64, 242, 50, 51, 157, 66, 0, 240,
-        7, 130, 64, 242, 51, 51, 157, 66, 122, 209, 251, 225, 64, 242, 114,
-        49, 141, 66, 0, 240, 114, 129, 64, 242, 115, 51, 157, 66, 112, 209,
-        98, 225, 64, 242, 201, 51, 157, 66, 0, 240, 137, 129, 54, 216, 64, 242,
-        146, 51, 157, 66, 0, 240, 193, 129, 24, 216, 64, 242, 129, 51, 157,
-        66, 0, 240, 26, 131, 8, 216, 64, 242, 127, 51, 157, 66, 0, 240, 10,
-        131, 181, 245, 96, 127, 85, 209, 10, 227, 64, 242, 130, 51, 157, 66,
-        0, 240, 246, 130, 64, 242, 131, 51, 157, 66, 75, 209, 234, 226, 64,
-        242, 197, 51, 157, 66, 0, 240, 191, 129, 8, 216, 64, 242, 147, 51, 157,
-        66, 0, 240, 165, 129, 181, 245, 113, 127, 60, 209, 169, 225, 64, 242,
-        198, 51, 157, 66, 0, 240, 65, 129, 181, 245, 114, 127, 51, 209, 70,
-        225, 64, 242, 231, 51, 157, 66, 0, 240, 32, 131, 25, 216, 64, 242, 227,
-        51, 157, 66, 0, 240, 0, 131, 9, 216, 64, 242, 218, 51, 157, 66, 0, 240,
-        226, 130, 64, 242, 219, 51, 157, 66, 29, 209, 230, 226, 64, 242, 229,
-        51, 157, 66, 0, 240, 240, 130, 64, 242, 230, 51, 157, 66, 19, 209, 255,
-        226, 181, 245, 128, 111, 0, 240, 47, 131, 3, 216, 181, 245, 123, 127,
-        10, 210, 70, 227, 64, 242, 1, 67, 157, 66, 0, 240, 46, 131, 64, 242,
-        28, 67, 157, 66, 0, 240, 129, 130, 111, 240, 22, 0, 118, 227, 163, 107,
-        0, 32, 27, 110, 51, 96, 113, 227, 163, 107, 0, 32, 26, 102, 109, 227,
-        163, 107, 0, 32, 91, 110, 51, 96, 104, 227, 163, 107, 0, 32, 90, 102,
-        100, 227, 163, 107, 0, 32, 155, 110, 51, 96, 95, 227, 163, 107, 0, 32,
-        154, 102, 91, 227, 148, 248, 24, 49, 0, 32, 51, 96, 86, 227, 132, 248,
-        24, 17, 0, 32, 82, 227, 4, 245, 196, 97, 48, 70, 15, 49, 14, 34, 215,
-        247, 121, 254, 0, 32, 73, 227, 163, 107, 0, 32, 211, 248, 24, 49, 51,
-        96, 67, 227, 163, 107, 0, 32, 195, 248, 24, 33, 62, 227, 157, 75, 0,
-        32, 27, 104, 51, 96, 57, 227, 155, 75, 0, 32, 26, 96, 53, 227, 132,
-        248, 145, 17, 0, 32, 49, 227, 148, 248, 145, 49, 10, 169, 65, 248, 8,
-        61, 48, 70, 58, 70, 215, 247, 86, 254, 0, 32, 38, 227, 148, 248, 36,
-        49, 0, 32, 51, 96, 33, 227, 132, 248, 36, 17, 0, 32, 29, 227, 148, 249,
-        152, 49, 111, 240, 22, 0, 211, 241, 1, 3, 56, 191, 0, 35, 51, 96, 19,
-        227, 212, 248, 128, 48, 0, 43, 0, 240, 212, 130, 200, 178, 132, 248,
-        152, 17, 0, 40, 0, 240, 9, 131, 32, 70, 152, 71, 0, 32, 4, 227, 32,
-        70, 49, 70, 18, 154, 253, 247, 96, 248, 0, 32, 253, 226, 17, 70, 32,
-        70, 50, 70, 0, 35, 252, 247, 181, 254, 0, 32, 245, 226, 17, 70, 32,
-        70, 50, 70, 1, 35, 252, 247, 173, 254, 238, 226, 32, 70, 0, 33, 210,
-        178, 252, 247, 169, 254, 0, 32, 231, 226, 148, 248, 154, 49, 0, 32,
-        51, 96, 226, 226, 32, 70, 1, 33, 210, 178, 252, 247, 157, 254, 0, 32,
-        219, 226, 148, 249, 155, 49, 0, 32, 51, 96, 214, 226, 32, 70, 81, 178,
-        253, 247, 218, 252, 0, 32, 208, 226, 32, 70, 209, 178, 253, 247, 151,
-        252, 0, 32, 202, 226, 209, 178, 32, 70, 0, 34, 252, 247, 150, 254, 48,
-        96, 0, 32, 194, 226, 209, 178, 32, 70, 12, 34, 252, 247, 142, 254, 48,
-        96, 0, 32, 186, 226, 32, 70, 209, 178, 252, 247, 137, 254, 48, 96, 0,
-        32, 179, 226, 32, 70, 252, 247, 134, 254, 0, 32, 174, 226, 32, 70, 252,
-        247, 132, 254, 0, 32, 169, 226, 32, 70, 209, 178, 252, 247, 129, 254,
-        0, 32, 163, 226, 1, 33, 0, 145, 32, 70, 17, 70, 26, 70, 51, 70, 253,
-        247, 111, 252, 0, 32, 153, 226, 0, 37, 32, 70, 17, 70, 26, 70, 51, 70,
-        0, 149, 253, 247, 101, 252, 40, 70, 143, 226, 212, 248, 68, 50, 91,
-        120, 0, 51, 24, 191, 1, 35, 51, 96, 0, 32, 134, 226, 163, 107, 91, 127,
-        0, 43, 0, 240, 74, 130, 32, 70, 65, 70, 252, 247, 22, 255, 124, 226,
-        161, 107, 73, 127, 0, 41, 0, 240, 67, 130, 17, 70, 32, 70, 26, 70, 51,
-        70, 252, 247, 20, 254, 0, 32, 111, 226, 163, 107, 91, 127, 0, 43, 0,
-        240, 57, 130, 32, 70, 49, 70, 252, 247, 253, 253, 101, 226, 163, 107,
-        91, 127, 0, 43, 0, 240, 50, 130, 32, 70, 49, 70, 252, 247, 234, 253,
-        91, 226, 163, 107, 91, 127, 0, 43, 0, 240, 43, 130, 32, 70, 17, 70,
-        252, 247, 215, 253, 81, 226, 32, 70, 17, 178, 253, 247, 103, 251, 0,
-        32, 75, 226, 32, 70, 253, 247, 100, 251, 48, 96, 0, 32, 69, 226, 0,
-        35, 0, 147, 17, 70, 32, 70, 50, 70, 59, 70, 252, 247, 230, 253, 60,
-        226, 1, 35, 0, 147, 17, 70, 32, 70, 50, 70, 59, 70, 252, 247, 221, 253,
-        51, 226, 163, 107, 36, 33, 24, 105, 146, 178, 8, 240, 168, 253, 0, 32,
-        43, 226, 163, 107, 36, 33, 24, 105, 8, 240, 164, 253, 48, 96, 0, 32,
-        35, 226, 1, 42, 140, 191, 111, 240, 28, 0, 0, 32, 29, 226, 0, 35, 0,
-        147, 17, 70, 32, 70, 50, 70, 59, 70, 252, 247, 204, 253, 20, 226, 0,
-        35, 0, 147, 17, 70, 32, 70, 50, 70, 59, 70, 252, 247, 195, 253, 11,
-        226, 0, 35, 0, 147, 17, 70, 32, 70, 50, 70, 59, 70, 252, 247, 188, 253,
-        2, 226, 152, 19, 4, 0, 1, 35, 0, 147, 17, 70, 32, 70, 50, 70, 59, 70,
-        252, 247, 177, 253, 247, 225, 32, 70, 17, 70, 254, 247, 158, 253, 0,
-        32, 241, 225, 32, 70, 49, 70, 252, 247, 168, 253, 236, 225, 4, 245,
-        206, 97, 48, 70, 10, 49, 5, 34, 215, 247, 19, 253, 0, 32, 227, 225,
-        4, 245, 206, 96, 65, 70, 5, 34, 10, 48, 215, 247, 10, 253, 32, 70, 254,
-        247, 188, 250, 0, 32, 215, 225, 163, 107, 27, 127, 0, 43, 0, 240, 170,
-        129, 32, 70, 255, 247, 75, 252, 212, 248, 252, 48, 211, 248, 32, 49,
-        3, 240, 1, 3, 131, 240, 1, 7, 27, 177, 163, 107, 24, 105, 8, 240, 73,
-        253, 32, 70, 253, 247, 102, 251, 212, 248, 248, 48, 147, 248, 132, 56,
-        1, 43, 7, 209, 148, 248, 92, 34, 34, 185, 148, 248, 115, 34, 10, 185,
-        132, 248, 92, 50, 148, 248, 89, 2, 148, 248, 88, 50, 0, 144, 148, 248,
-        90, 2, 0, 37, 1, 144, 148, 248, 91, 2, 148, 248, 86, 18, 2, 144, 148,
-        248, 115, 2, 148, 248, 87, 34, 3, 144, 148, 248, 92, 2, 4, 149, 5, 144,
-        32, 70, 255, 247, 42, 251, 48, 96, 212, 248, 248, 48, 147, 248, 132,
-        56, 1, 43, 39, 209, 148, 248, 92, 50, 1, 43, 35, 209, 148, 248, 88,
-        50, 1, 43, 31, 209, 138, 225, 148, 248, 89, 226, 9, 32, 205, 248, 0,
-        224, 148, 248, 90, 226, 132, 248, 92, 2, 205, 248, 4, 224, 148, 248,
-        91, 226, 5, 144, 205, 248, 8, 224, 148, 248, 115, 226, 148, 248, 86,
-        18, 148, 248, 87, 34, 32, 70, 205, 248, 12, 224, 4, 149, 255, 247, 254,
-        250, 128, 5, 128, 13, 48, 96, 32, 70, 253, 247, 36, 251, 31, 185, 163,
-        107, 24, 105, 8, 240, 237, 252, 32, 70, 255, 247, 227, 251, 0, 32, 91,
-        225, 19, 22, 3, 240, 15, 3, 4, 43, 0, 242, 48, 129, 16, 21, 0, 240,
-        3, 0, 1, 40, 0, 242, 45, 129, 145, 21, 1, 240, 3, 1, 3, 41, 0, 240,
-        42, 129, 21, 20, 5, 240, 15, 5, 1, 45, 0, 242, 39, 129, 23, 18, 255,
-        178, 167, 241, 10, 6, 246, 178, 5, 46, 0, 242, 34, 129, 2, 240, 15,
-        6, 3, 46, 0, 242, 32, 129, 132, 248, 91, 50, 19, 15, 18, 17, 2, 240,
-        15, 2, 132, 248, 89, 2, 132, 248, 86, 114, 132, 248, 87, 98, 132, 248,
-        88, 82, 132, 248, 90, 18, 132, 248, 115, 50, 132, 248, 92, 34, 0, 32,
-        32, 225, 10, 169, 79, 240, 255, 51, 65, 248, 8, 61, 48, 70, 58, 70,
-        215, 247, 69, 252, 0, 32, 21, 225, 180, 248, 10, 17, 32, 70, 253, 247,
-        4, 255, 10, 169, 65, 248, 8, 13, 58, 70, 48, 70, 215, 247, 55, 252,
-        0, 32, 7, 225, 132, 248, 63, 38, 0, 32, 3, 225, 148, 248, 63, 54, 10,
-        169, 65, 248, 8, 61, 48, 70, 4, 34, 215, 247, 40, 252, 0, 32, 248, 224,
-        0, 37, 10, 169, 1, 248, 1, 93, 32, 70, 254, 247, 122, 250, 157, 248,
-        39, 48, 40, 70, 51, 96, 236, 224, 32, 70, 255, 247, 121, 251, 10, 169,
-        65, 248, 8, 13, 4, 34, 48, 70, 215, 247, 16, 252, 0, 32, 224, 224, 212,
-        248, 40, 49, 0, 32, 195, 243, 0, 19, 51, 96, 217, 224, 32, 70, 8, 169,
-        1, 34, 253, 247, 242, 249, 211, 224, 32, 70, 49, 70, 0, 34, 253, 247,
-        236, 249, 205, 224, 32, 70, 49, 70, 252, 247, 171, 252, 200, 224, 32,
-        70, 17, 70, 252, 247, 163, 252, 195, 224, 32, 70, 49, 70, 252, 247,
-        167, 252, 190, 224, 32, 70, 17, 70, 252, 247, 159, 252, 185, 224, 212,
-        248, 220, 48, 0, 43, 0, 240, 161, 128, 32, 70, 152, 71, 48, 96, 0, 32,
-        175, 224, 212, 248, 216, 48, 0, 43, 0, 240, 154, 128, 81, 28, 2, 41,
-        0, 242, 153, 128, 32, 70, 81, 178, 152, 71, 0, 32, 161, 224, 212, 248,
-        224, 48, 0, 43, 0, 240, 146, 128, 1, 42, 0, 242, 146, 128, 209, 178,
-        64, 242, 227, 50, 194, 235, 5, 14, 222, 241, 0, 2, 32, 70, 66, 235,
-        14, 2, 152, 71, 0, 32, 140, 224, 180, 248, 232, 53, 0, 32, 51, 96, 135,
-        224, 164, 248, 232, 37, 0, 32, 131, 224, 17, 70, 32, 70, 66, 70, 51,
-        70, 252, 247, 33, 253, 0, 32, 123, 224, 17, 70, 32, 70, 66, 70, 252,
-        247, 60, 253, 0, 32, 116, 224, 212, 248, 136, 49, 0, 32, 51, 96, 111,
-        224, 32, 70, 252, 247, 62, 254, 0, 32, 106, 224, 32, 70, 17, 70, 253,
-        247, 137, 249, 0, 32, 100, 224, 32, 70, 253, 247, 159, 249, 0, 32, 95,
-        224, 32, 70, 17, 70, 253, 247, 167, 249, 0, 32, 89, 224, 212, 248, 240,
-        48, 0, 43, 80, 208, 32, 70, 49, 70, 152, 71, 0, 32, 80, 224, 212, 248,
-        236, 48, 0, 43, 74, 208, 0, 37, 65, 70, 8, 34, 6, 168, 6, 149, 7, 149,
-        215, 247, 114, 251, 32, 70, 212, 248, 236, 48, 6, 153, 7, 154, 152,
-        71, 40, 70, 60, 224, 0, 32, 58, 224, 111, 240, 22, 0, 55, 224, 111,
-        240, 10, 0, 52, 224, 111, 240, 10, 0, 49, 224, 111, 240, 10, 0, 46,
-        224, 111, 240, 10, 0, 43, 224, 111, 240, 10, 0, 40, 224, 111, 240, 3,
-        0, 37, 224, 111, 240, 28, 0, 34, 224, 111, 240, 28, 0, 31, 224, 111,
-        240, 28, 0, 28, 224, 111, 240, 28, 0, 25, 224, 111, 240, 28, 0, 22,
-        224, 111, 240, 28, 0, 19, 224, 111, 240, 22, 0, 16, 224, 111, 240, 22,
-        0, 13, 224, 111, 240, 28, 0, 10, 224, 111, 240, 22, 0, 7, 224, 111,
-        240, 28, 0, 4, 224, 111, 240, 22, 0, 1, 224, 111, 240, 22, 0, 10, 176,
-        189, 232, 240, 129, 64, 243, 135, 0, 82, 48, 255, 246, 112, 174, 141,
-        230, 0, 32, 112, 71, 112, 71, 144, 248, 61, 6, 112, 71, 112, 71, 112,
-        71, 128, 248, 212, 28, 112, 71, 0, 0, 2, 75, 24, 96, 2, 75, 25, 96,
-        112, 71, 0, 191, 192, 50, 4, 0, 188, 50, 4, 0, 67, 177, 26, 177, 208,
-        248, 200, 22, 145, 248, 180, 16, 33, 177, 128, 248, 26, 29, 1, 224,
-        128, 248, 26, 61, 211, 241, 1, 3, 56, 191, 0, 35, 128, 248, 24, 45,
-        128, 248, 25, 61, 112, 71, 16, 181, 12, 137, 3, 153, 2, 155, 2, 145,
-        4, 153, 3, 145, 5, 153, 4, 145, 6, 153, 5, 145, 0, 105, 17, 70, 34,
-        70, 189, 232, 16, 64, 26, 240, 129, 158, 3, 120, 51, 185, 177, 245,
-        128, 111, 5, 216, 1, 35, 0, 248, 1, 59, 112, 71, 0, 32, 112, 71, 24,
-        70, 112, 71, 3, 120, 11, 177, 0, 35, 3, 112, 112, 71, 112, 71, 0, 32,
-        112, 71, 112, 71, 130, 107, 208, 248, 140, 1, 19, 106, 131, 66, 1, 211,
-        27, 26, 1, 224, 192, 67, 195, 24, 144, 110, 131, 66, 52, 191, 0, 32,
-        1, 32, 112, 71, 112, 71, 112, 71, 112, 71, 112, 71, 19, 32, 112, 71,
-        112, 71, 112, 71, 128, 10, 112, 71, 3, 136, 155, 5, 155, 13, 67, 234,
-        129, 35, 3, 128, 112, 71, 65, 67, 146, 2, 155, 1, 0, 251, 3, 32, 1,
-        245, 0, 65, 1, 235, 64, 0, 73, 0, 144, 251, 241, 240, 112, 71, 208,
-        248, 248, 48, 1, 34, 163, 248, 52, 36, 112, 71, 112, 71, 48, 181, 137,
-        177, 9, 75, 90, 67, 1, 35, 2, 251, 3, 244, 129, 234, 225, 117, 165,
-        235, 225, 117, 180, 251, 245, 240, 128, 178, 69, 67, 1, 51, 165, 66,
-        155, 178, 241, 209, 48, 189, 2, 32, 48, 189, 64, 66, 15, 0, 129, 66,
-        184, 191, 8, 70, 112, 71, 45, 233, 240, 71, 1, 41, 184, 191, 1, 33,
-        79, 240, 128, 116, 148, 251, 241, 244, 36, 240, 127, 68, 36, 244, 112,
-        4, 0, 44, 8, 191, 1, 36, 4, 251, 4, 243, 79, 72, 27, 19, 1, 43, 184,
-        191, 1, 35, 144, 251, 243, 243, 77, 72, 1, 51, 144, 251, 243, 240, 127,
-        33, 1, 48, 21, 70, 255, 247, 218, 255, 130, 70, 73, 72, 73, 78, 144,
-        251, 244, 240, 1, 48, 150, 251, 240, 240, 127, 33, 1, 48, 255, 247,
-        206, 255, 129, 70, 69, 72, 127, 33, 144, 251, 244, 240, 1, 48, 150,
-        251, 240, 240, 1, 48, 255, 247, 195, 255, 127, 33, 128, 70, 16, 32,
-        255, 247, 190, 255, 40, 128, 62, 72, 127, 33, 144, 251, 244, 240, 32,
-        240, 127, 64, 32, 244, 112, 0, 160, 245, 248, 80, 63, 56, 1, 40, 184,
-        191, 1, 32, 150, 251, 240, 240, 1, 48, 255, 247, 170, 255, 168, 129,
-        53, 72, 127, 33, 144, 251, 244, 240, 32, 240, 127, 64, 32, 244, 112,
-        0, 160, 245, 120, 96, 31, 56, 1, 40, 184, 191, 1, 32, 150, 251, 240,
-        240, 1, 48, 255, 247, 150, 255, 232, 129, 44, 72, 127, 33, 144, 251,
-        244, 240, 32, 240, 127, 64, 32, 244, 112, 0, 160, 245, 248, 64, 255,
-        56, 1, 40, 184, 191, 1, 32, 150, 251, 240, 240, 1, 48, 255, 247, 130,
-        255, 255, 33, 40, 130, 10, 32, 255, 247, 125, 255, 127, 33, 104, 130,
-        42, 32, 255, 247, 120, 255, 7, 70, 30, 72, 79, 244, 122, 99, 144, 251,
-        244, 240, 160, 245, 250, 48, 144, 251, 243, 240, 1, 48, 127, 33, 1,
-        40, 184, 191, 1, 32, 255, 247, 103, 255, 23, 75, 6, 70, 147, 251, 244,
-        244, 164, 245, 248, 100, 21, 75, 15, 60, 1, 44, 184, 191, 1, 36, 147,
-        251, 244, 244, 96, 28, 127, 33, 255, 247, 86, 255, 165, 248, 2, 160,
-        165, 248, 4, 144, 165, 248, 6, 128, 47, 129, 110, 129, 168, 130, 189,
-        232, 240, 135, 0, 191, 255, 95, 16, 4, 255, 207, 7, 0, 255, 191, 30,
-        3, 255, 231, 3, 0, 255, 95, 85, 3, 255, 255, 166, 9, 255, 127, 66, 8,
-        255, 31, 55, 14, 255, 63, 233, 118, 255, 255, 243, 1, 255, 243, 1, 0,
-        112, 181, 128, 34, 4, 70, 208, 248, 248, 80, 19, 70, 79, 244, 241, 97,
-        253, 247, 11, 249, 32, 70, 2, 34, 0, 35, 79, 244, 241, 97, 253, 247,
-        4, 249, 181, 248, 6, 54, 79, 244, 127, 66, 27, 2, 32, 70, 19, 64, 64,
-        242, 135, 113, 253, 247, 249, 248, 181, 248, 8, 54, 79, 244, 127, 66,
-        27, 2, 32, 70, 64, 242, 50, 65, 19, 64, 189, 232, 112, 64, 253, 247,
-        236, 184, 112, 181, 12, 28, 24, 191, 1, 36, 227, 1, 128, 34, 79, 244,
-        150, 97, 5, 70, 253, 247, 225, 248, 40, 70, 64, 242, 58, 65, 64, 34,
-        163, 1, 189, 232, 112, 64, 253, 247, 216, 184, 203, 67, 3, 240, 7, 3,
-        91, 0, 112, 181, 64, 246, 117, 17, 21, 70, 67, 240, 1, 3, 79, 34, 4,
-        70, 253, 247, 202, 248, 235, 2, 32, 70, 64, 246, 105, 17, 79, 244, 96,
-        82, 3, 244, 120, 67, 189, 232, 112, 64, 253, 247, 190, 184, 1, 34, 16,
-        181, 19, 70, 4, 70, 64, 246, 172, 17, 253, 247, 182, 248, 32, 70, 192,
-        35, 64, 246, 172, 17, 79, 244, 112, 114, 253, 247, 174, 248, 32, 70,
-        0, 35, 64, 242, 164, 65, 79, 244, 128, 82, 253, 247, 166, 248, 79, 244,
-        0, 82, 32, 70, 19, 70, 64, 242, 116, 81, 253, 247, 158, 248, 79, 244,
-        0, 114, 32, 70, 19, 70, 64, 242, 117, 81, 253, 247, 150, 248, 32, 70,
-        1, 34, 0, 35, 64, 246, 7, 1, 253, 247, 143, 248, 79, 244, 128, 66, 32,
-        70, 19, 70, 64, 242, 76, 65, 253, 247, 135, 248, 79, 244, 128, 66, 32,
-        70, 19, 70, 64, 242, 77, 65, 253, 247, 127, 248, 79, 244, 128, 98, 32,
-        70, 19, 70, 64, 246, 56, 17, 253, 247, 119, 248, 79, 244, 128, 98, 32,
-        70, 19, 70, 64, 246, 57, 17, 253, 247, 111, 248, 79, 244, 128, 98, 32,
-        70, 19, 70, 64, 242, 117, 81, 253, 247, 103, 248, 79, 244, 128, 66,
-        32, 70, 19, 70, 64, 242, 116, 81, 253, 247, 95, 248, 79, 244, 0, 98,
-        32, 70, 19, 70, 64, 246, 56, 17, 253, 247, 87, 248, 79, 244, 0, 98,
-        32, 70, 64, 246, 57, 17, 19, 70, 189, 232, 16, 64, 253, 247, 77, 184,
-        45, 233, 240, 71, 23, 70, 30, 70, 79, 244, 0, 66, 203, 3, 19, 64, 64,
-        242, 177, 65, 4, 70, 189, 248, 32, 80, 189, 248, 36, 128, 189, 248,
-        40, 144, 189, 248, 44, 160, 253, 247, 56, 248, 59, 2, 32, 70, 64, 242,
-        250, 65, 79, 244, 112, 98, 3, 244, 127, 67, 253, 247, 46, 248, 243,
-        2, 32, 70, 64, 242, 177, 65, 79, 244, 96, 82, 3, 244, 120, 67, 253,
-        247, 36, 248, 32, 70, 15, 34, 43, 70, 64, 242, 60, 81, 253, 247, 29,
-        248, 79, 234, 72, 35, 32, 70, 64, 242, 60, 81, 79, 244, 240, 82, 3,
-        244, 126, 67, 253, 247, 18, 248, 79, 234, 137, 25, 79, 246, 192, 115,
-        32, 70, 9, 234, 3, 3, 64, 246, 172, 17, 79, 244, 112, 114, 253, 247,
-        5, 248, 79, 234, 74, 10, 79, 246, 254, 115, 32, 70, 64, 246, 121, 17,
-        79, 244, 255, 114, 10, 234, 3, 3, 189, 232, 240, 71, 252, 247, 246,
-        191, 112, 181, 12, 28, 24, 191, 1, 36, 5, 70, 35, 3, 79, 244, 150, 97,
-        79, 244, 128, 82, 252, 247, 234, 255, 40, 70, 128, 34, 227, 1, 64, 242,
-        249, 65, 252, 247, 227, 255, 40, 70, 163, 2, 79, 244, 150, 97, 79, 244,
-        128, 98, 252, 247, 219, 255, 40, 70, 1, 34, 35, 70, 64, 242, 61, 81,
-        252, 247, 212, 255, 40, 70, 8, 34, 227, 0, 64, 242, 61, 81, 252, 247,
-        205, 255, 40, 70, 1, 34, 35, 70, 64, 246, 172, 17, 252, 247, 198, 255,
-        40, 70, 64, 246, 121, 17, 1, 34, 35, 70, 189, 232, 112, 64, 252, 247,
-        189, 191, 45, 233, 240, 71, 142, 70, 157, 248, 40, 112, 4, 70, 22, 70,
-        29, 70, 7, 34, 115, 70, 64, 246, 207, 17, 157, 248, 32, 128, 157, 248,
-        36, 144, 252, 247, 171, 255, 32, 70, 8, 34, 251, 0, 64, 246, 207, 17,
-        252, 247, 164, 255, 243, 2, 32, 70, 64, 246, 211, 17, 79, 244, 0, 98,
-        3, 244, 120, 67, 252, 247, 154, 255, 43, 3, 32, 70, 64, 246, 211, 17,
-        79, 244, 128, 82, 3, 244, 112, 67, 252, 247, 144, 255, 32, 70, 24, 34,
-        79, 234, 200, 3, 64, 246, 211, 17, 252, 247, 136, 255, 32, 70, 64, 246,
-        211, 17, 96, 34, 79, 234, 73, 19, 189, 232, 240, 71, 252, 247, 126,
-        191, 11, 2, 79, 244, 127, 66, 64, 242, 251, 65, 19, 64, 252, 247, 118,
-        191, 79, 244, 0, 66, 16, 181, 19, 70, 79, 244, 137, 97, 4, 70, 252,
-        247, 109, 255, 32, 70, 79, 244, 129, 97, 79, 244, 128, 114, 0, 35, 189,
-        232, 16, 64, 252, 247, 99, 191, 112, 181, 208, 248, 248, 48, 66, 34,
-        211, 248, 36, 54, 1, 57, 2, 251, 1, 49, 77, 136, 5, 35, 170, 0, 146,
-        251, 243, 243, 1, 51, 91, 16, 64, 242, 87, 97, 64, 246, 255, 114, 155,
-        178, 4, 70, 252, 247, 75, 255, 79, 244, 160, 3, 147, 251, 245, 243,
-        1, 51, 91, 16, 32, 70, 79, 244, 203, 97, 64, 246, 255, 114, 155, 178,
-        189, 232, 112, 64, 252, 247, 59, 191, 112, 181, 11, 2, 20, 70, 79, 244,
-        127, 66, 19, 64, 64, 246, 87, 33, 5, 70, 252, 247, 48, 255, 40, 70,
-        64, 246, 87, 33, 255, 34, 163, 178, 189, 232, 112, 64, 252, 247, 39,
-        191, 248, 181, 64, 242, 118, 65, 7, 70, 251, 247, 181, 255, 64, 242,
-        119, 65, 198, 5, 56, 70, 251, 247, 175, 255, 64, 242, 121, 65, 197,
-        5, 56, 70, 251, 247, 169, 255, 64, 242, 122, 65, 196, 5, 56, 70, 251,
-        247, 163, 255, 246, 13, 192, 5, 237, 13, 228, 13, 192, 13, 255, 46,
-        136, 191, 166, 245, 0, 118, 255, 45, 136, 191, 165, 245, 0, 117, 255,
-        44, 136, 191, 164, 245, 0, 116, 255, 40, 136, 191, 160, 245, 0, 112,
-        54, 178, 36, 178, 45, 178, 0, 178, 173, 27, 0, 27, 40, 24, 64, 8, 0,
-        178, 248, 189, 112, 181, 12, 70, 64, 242, 57, 65, 6, 70, 251, 247, 125,
-        255, 0, 244, 240, 96, 192, 17, 224, 128, 64, 242, 181, 65, 48, 70, 251,
-        247, 116, 255, 64, 242, 251, 65, 5, 70, 48, 70, 251, 247, 110, 255,
-        5, 240, 31, 3, 192, 178, 45, 10, 35, 128, 101, 128, 160, 128, 112, 189,
-        8, 181, 64, 242, 251, 65, 251, 247, 97, 255, 0, 10, 128, 178, 8, 189,
-        112, 181, 13, 70, 64, 242, 57, 65, 4, 70, 251, 247, 87, 255, 32, 244,
-        240, 99, 67, 234, 197, 19, 32, 70, 64, 242, 57, 65, 64, 246, 255, 114,
-        155, 178, 189, 232, 112, 64, 252, 247, 181, 190, 112, 181, 13, 70, 4,
-        70, 255, 247, 222, 255, 106, 136, 43, 136, 6, 70, 67, 234, 2, 35, 32,
-        70, 64, 242, 181, 65, 79, 246, 255, 114, 155, 178, 252, 247, 163, 254,
-        171, 136, 32, 70, 67, 234, 6, 38, 79, 246, 255, 114, 179, 178, 64, 242,
-        251, 65, 252, 247, 152, 254, 32, 70, 233, 136, 255, 247, 202, 255, 32,
-        70, 1, 33, 189, 232, 112, 64, 255, 247, 162, 189, 0, 0, 1, 73, 56, 34,
-        252, 247, 155, 190, 176, 248, 3, 0, 1, 73, 14, 34, 252, 247, 149, 190,
-        82, 248, 3, 0, 3, 41, 248, 181, 4, 70, 23, 70, 4, 216, 25, 75, 94, 92,
-        25, 75, 93, 92, 1, 224, 0, 37, 46, 70, 79, 244, 0, 114, 19, 70, 32,
-        70, 64, 246, 56, 17, 252, 247, 109, 254, 115, 2, 32, 70, 64, 246, 57,
-        17, 79, 244, 0, 114, 3, 244, 126, 67, 252, 247, 99, 254, 79, 244, 128,
-        98, 19, 70, 32, 70, 64, 246, 56, 17, 252, 247, 91, 254, 171, 2, 32,
-        70, 64, 246, 57, 17, 79, 244, 128, 98, 3, 244, 124, 67, 252, 247, 81,
-        254, 39, 177, 32, 70, 189, 232, 248, 64, 255, 247, 196, 191, 248, 189,
-        0, 191, 174, 251, 3, 0, 178, 251, 3, 0, 112, 181, 4, 70, 22, 70, 13,
-        70, 0, 41, 61, 209, 64, 246, 56, 17, 79, 244, 0, 98, 43, 70, 252, 247,
-        56, 254, 32, 70, 64, 242, 76, 65, 79, 244, 128, 66, 43, 70, 252, 247,
-        48, 254, 32, 70, 64, 246, 56, 17, 79, 244, 128, 98, 43, 70, 252, 247,
-        40, 254, 32, 70, 64, 242, 117, 81, 79, 244, 128, 98, 43, 70, 252, 247,
-        32, 254, 32, 70, 64, 242, 76, 65, 79, 244, 0, 82, 43, 70, 252, 247,
-        24, 254, 32, 70, 79, 244, 150, 97, 79, 244, 0, 98, 43, 70, 252, 247,
-        16, 254, 32, 70, 64, 246, 56, 17, 79, 244, 0, 114, 43, 70, 252, 247,
-        8, 254, 32, 70, 64, 246, 56, 17, 79, 244, 128, 98, 43, 70, 108, 224,
-        79, 244, 0, 82, 64, 242, 76, 65, 19, 70, 252, 247, 250, 253, 32, 70,
-        64, 242, 77, 65, 79, 244, 0, 82, 14, 185, 51, 70, 0, 224, 19, 70, 252,
-        247, 239, 253, 79, 244, 0, 98, 19, 70, 32, 70, 79, 244, 150, 97, 252,
-        247, 231, 253, 0, 35, 32, 70, 64, 242, 177, 65, 79, 244, 128, 66, 252,
-        247, 223, 253, 0, 33, 10, 70, 32, 70, 255, 247, 89, 255, 79, 244, 128,
-        66, 19, 70, 32, 70, 64, 242, 77, 65, 252, 247, 210, 253, 79, 244, 128,
-        66, 19, 70, 32, 70, 64, 242, 76, 65, 252, 247, 202, 253, 79, 244, 128,
-        98, 19, 70, 32, 70, 64, 246, 56, 17, 252, 247, 194, 253, 79, 244, 128,
-        98, 19, 70, 32, 70, 64, 246, 57, 17, 252, 247, 186, 253, 32, 70, 64,
-        242, 116, 81, 79, 244, 128, 66, 0, 35, 252, 247, 178, 253, 79, 244,
-        128, 98, 19, 70, 32, 70, 64, 242, 117, 81, 252, 247, 170, 253, 79, 244,
-        128, 66, 19, 70, 32, 70, 64, 242, 116, 81, 252, 247, 162, 253, 79, 244,
-        0, 98, 19, 70, 32, 70, 64, 246, 57, 17, 252, 247, 154, 253, 79, 244,
-        0, 98, 32, 70, 64, 246, 56, 17, 19, 70, 189, 232, 112, 64, 252, 247,
-        144, 189, 112, 181, 4, 70, 13, 70, 0, 41, 47, 209, 1, 34, 43, 70, 64,
-        242, 117, 81, 252, 247, 133, 253, 32, 70, 43, 70, 64, 242, 76, 65, 79,
-        244, 0, 82, 252, 247, 125, 253, 32, 70, 43, 70, 79, 244, 150, 97, 79,
-        244, 0, 98, 252, 247, 117, 253, 32, 70, 43, 70, 64, 246, 56, 17, 79,
-        244, 0, 114, 252, 247, 109, 253, 32, 70, 43, 70, 64, 246, 56, 17, 79,
-        244, 128, 98, 252, 247, 101, 253, 32, 70, 64, 246, 56, 17, 79, 244,
-        0, 98, 43, 70, 189, 232, 112, 64, 252, 247, 91, 189, 0, 35, 64, 246,
-        57, 17, 79, 244, 0, 98, 252, 247, 84, 253, 79, 244, 0, 98, 32, 70, 19,
-        70, 64, 246, 56, 17, 252, 247, 76, 253, 31, 34, 32, 70, 19, 70, 64,
-        242, 116, 81, 252, 247, 69, 253, 1, 34, 32, 70, 19, 70, 64, 242, 117,
-        81, 252, 247, 62, 253, 79, 244, 0, 82, 32, 70, 19, 70, 64, 242, 77,
-        65, 252, 247, 54, 253, 79, 244, 0, 82, 32, 70, 19, 70, 64, 242, 76,
-        65, 252, 247, 46, 253, 79, 244, 128, 66, 32, 70, 19, 70, 64, 242, 177,
-        65, 252, 247, 38, 253, 79, 244, 0, 98, 32, 70, 19, 70, 79, 244, 150,
-        97, 252, 247, 30, 253, 32, 70, 1, 33, 0, 34, 189, 232, 112, 64, 255,
-        247, 150, 190, 1, 41, 112, 181, 5, 70, 12, 70, 2, 209, 17, 73, 6, 34,
-        3, 224, 3, 41, 4, 209, 15, 73, 15, 34, 252, 247, 27, 253, 13, 224, 97,
-        185, 4, 34, 19, 70, 64, 242, 217, 65, 252, 247, 1, 253, 40, 70, 64,
-        242, 217, 65, 8, 34, 35, 70, 252, 247, 250, 252, 40, 70, 64, 242, 55,
-        97, 79, 244, 64, 66, 0, 35, 189, 232, 112, 64, 252, 247, 240, 188, 0,
-        191, 200, 250, 3, 0, 212, 250, 3, 0, 112, 181, 208, 248, 248, 48, 4,
-        70, 147, 248, 188, 100, 147, 248, 189, 84, 9, 34, 69, 234, 6, 53, 173,
-        178, 23, 73, 252, 247, 238, 252, 32, 70, 43, 70, 64, 242, 219, 65, 71,
-        242, 255, 50, 252, 247, 212, 252, 32, 70, 43, 70, 64, 242, 220, 65,
-        71, 242, 255, 50, 252, 247, 204, 252, 32, 70, 43, 70, 64, 242, 10, 65,
-        71, 242, 255, 50, 252, 247, 196, 252, 32, 70, 64, 242, 11, 65, 71, 242,
-        255, 50, 67, 242, 164, 3, 252, 247, 187, 252, 32, 70, 64, 242, 12, 65,
-        71, 242, 255, 50, 67, 242, 164, 3, 189, 232, 112, 64, 252, 247, 176,
-        188, 0, 191, 124, 247, 3, 0, 1, 73, 12, 34, 252, 247, 187, 188, 88,
-        247, 3, 0, 248, 181, 23, 70, 4, 70, 30, 70, 79, 246, 255, 114, 59, 70,
-        13, 70, 64, 242, 131, 65, 252, 247, 155, 252, 51, 70, 32, 70, 64, 242,
-        130, 65, 255, 34, 252, 247, 148, 252, 157, 248, 24, 48, 32, 70, 64,
-        242, 129, 65, 2, 34, 91, 0, 252, 247, 139, 252, 1, 34, 32, 70, 64, 242,
-        129, 65, 19, 70, 252, 247, 132, 252, 66, 242, 17, 118, 2, 224, 10, 32,
-        220, 243, 231, 244, 32, 70, 64, 242, 129, 65, 251, 247, 13, 253, 194,
-        7, 1, 213, 1, 62, 243, 209, 32, 70, 64, 242, 129, 65, 251, 247, 4, 253,
-        195, 7, 41, 212, 64, 242, 135, 65, 32, 70, 251, 247, 253, 252, 64, 242,
-        134, 65, 6, 70, 32, 70, 251, 247, 247, 252, 64, 234, 6, 64, 104, 96,
-        64, 246, 154, 33, 32, 70, 251, 247, 239, 252, 79, 244, 145, 97, 6, 70,
-        32, 70, 251, 247, 233, 252, 64, 234, 6, 64, 168, 96, 64, 242, 133, 65,
-        32, 70, 251, 247, 225, 252, 64, 242, 132, 65, 6, 70, 32, 70, 251, 247,
-        219, 252, 64, 234, 6, 64, 40, 96, 248, 189, 112, 181, 21, 70, 4, 34,
-        19, 70, 14, 70, 64, 246, 101, 17, 4, 70, 252, 247, 57, 252, 8, 34, 19,
-        70, 32, 70, 64, 246, 101, 17, 252, 247, 50, 252, 32, 70, 49, 70, 0,
-        34, 255, 247, 85, 251, 4, 34, 32, 70, 79, 244, 136, 97, 19, 70, 252,
-        247, 38, 252, 1, 34, 19, 70, 32, 70, 64, 242, 74, 65, 252, 247, 31,
-        252, 32, 70, 64, 242, 74, 65, 1, 34, 0, 35, 252, 247, 24, 252, 32, 32,
-        220, 243, 126, 244, 181, 177, 32, 70, 64, 246, 120, 17, 251, 247, 163,
-        252, 192, 178, 255, 40, 10, 209, 32, 70, 64, 246, 111, 17, 251, 247,
-        155, 252, 0, 5, 0, 13, 64, 246, 255, 115, 152, 66, 3, 208, 1, 61, 109,
-        178, 0, 45, 214, 209, 0, 33, 32, 70, 10, 70, 255, 247, 32, 251, 32,
-        70, 79, 244, 136, 97, 4, 34, 0, 35, 189, 232, 112, 64, 252, 247, 239,
-        187, 112, 181, 29, 70, 4, 70, 22, 70, 11, 70, 25, 185, 79, 244, 150,
-        97, 7, 34, 10, 224, 1, 34, 19, 70, 64, 242, 177, 65, 252, 247, 223,
-        251, 7, 34, 32, 70, 79, 244, 150, 97, 19, 70, 252, 247, 216, 251, 134,
-        177, 234, 5, 32, 70, 210, 13, 64, 242, 188, 65, 251, 247, 111, 252,
-        106, 10, 210, 5, 32, 70, 64, 242, 187, 65, 210, 13, 189, 232, 112, 64,
-        251, 247, 101, 188, 112, 189, 1, 41, 56, 181, 5, 70, 20, 70, 15, 208,
-        2, 211, 2, 41, 35, 209, 21, 224, 64, 246, 222, 17, 251, 247, 76, 252,
-        64, 246, 223, 17, 32, 128, 40, 70, 251, 247, 70, 252, 96, 128, 56, 189,
-        64, 246, 222, 17, 18, 136, 251, 247, 74, 252, 40, 70, 64, 246, 223,
-        17, 98, 136, 8, 224, 64, 246, 222, 17, 0, 34, 251, 247, 64, 252, 40,
-        70, 64, 246, 223, 17, 0, 34, 189, 232, 56, 64, 251, 247, 56, 188, 56,
-        189, 1, 41, 56, 181, 5, 70, 20, 70, 32, 209, 64, 246, 216, 17, 18, 120,
-        251, 247, 45, 252, 40, 70, 64, 246, 217, 17, 98, 120, 251, 247, 39,
-        252, 40, 70, 64, 246, 218, 17, 162, 120, 251, 247, 33, 252, 40, 70,
-        64, 246, 186, 33, 226, 120, 251, 247, 27, 252, 40, 70, 64, 246, 187,
-        33, 34, 121, 251, 247, 21, 252, 40, 70, 64, 246, 188, 33, 33, 224, 2,
-        41, 36, 209, 64, 246, 219, 17, 18, 120, 251, 247, 10, 252, 40, 70, 64,
-        246, 220, 17, 98, 120, 251, 247, 4, 252, 40, 70, 64, 246, 221, 17, 162,
-        120, 251, 247, 254, 251, 40, 70, 64, 246, 189, 33, 226, 120, 251, 247,
-        248, 251, 40, 70, 64, 246, 190, 33, 34, 121, 251, 247, 242, 251, 40,
-        70, 64, 246, 245, 33, 98, 121, 189, 232, 56, 64, 251, 247, 234, 187,
-        56, 189, 0, 0, 45, 233, 240, 65, 208, 248, 248, 48, 4, 70, 147, 249,
-        118, 53, 0, 43, 51, 221, 27, 74, 79, 244, 19, 97, 7, 43, 212, 191, 211,
-        24, 211, 29, 19, 248, 1, 92, 251, 247, 201, 251, 64, 246, 49, 17, 128,
-        70, 32, 70, 251, 247, 195, 251, 64, 246, 50, 17, 7, 70, 32, 70, 251,
-        247, 189, 251, 5, 251, 8, 248, 111, 67, 79, 234, 168, 18, 6, 70, 79,
-        244, 19, 97, 32, 70, 146, 178, 251, 247, 188, 251, 186, 17, 32, 70,
-        64, 246, 49, 17, 146, 178, 251, 247, 181, 251, 117, 67, 170, 17, 32,
-        70, 64, 246, 50, 17, 146, 178, 189, 232, 240, 65, 251, 247, 171, 187,
-        189, 232, 240, 129, 0, 191, 12, 20, 4, 0, 45, 233, 240, 67, 44, 75,
-        147, 176, 6, 70, 15, 70, 108, 70, 3, 241, 32, 14, 24, 104, 89, 104,
-        37, 70, 3, 197, 8, 51, 115, 69, 44, 70, 247, 209, 27, 136, 9, 172, 43,
-        128, 36, 75, 3, 241, 32, 14, 24, 104, 89, 104, 37, 70, 3, 197, 8, 51,
-        115, 69, 44, 70, 247, 209, 27, 136, 43, 128, 79, 177, 1, 47, 3, 209,
-        9, 172, 18, 32, 28, 73, 6, 224, 0, 36, 32, 70, 33, 70, 2, 224, 26, 73,
-        108, 70, 17, 32, 0, 35, 6, 224, 13, 70, 181, 248, 0, 224, 1, 51, 36,
-        49, 114, 69, 6, 208, 131, 66, 31, 250, 131, 248, 244, 219, 79, 246,
-        255, 120, 14, 224, 169, 70, 0, 37, 97, 91, 48, 70, 57, 248, 2, 47, 2,
-        53, 251, 247, 94, 251, 34, 45, 246, 209, 23, 185, 48, 70, 255, 247,
-        112, 255, 48, 70, 15, 250, 136, 248, 255, 247, 7, 254, 184, 241, 255,
-        63, 12, 191, 79, 240, 255, 48, 0, 32, 19, 176, 189, 232, 240, 131, 48,
-        180, 3, 0, 82, 180, 3, 0, 20, 20, 4, 0, 122, 24, 4, 0, 45, 233, 240,
-        65, 208, 248, 248, 112, 1, 37, 14, 70, 135, 248, 220, 85, 161, 33, 4,
-        70, 251, 247, 4, 251, 103, 33, 167, 248, 222, 5, 32, 70, 251, 247, 254,
-        250, 153, 33, 167, 248, 224, 5, 32, 70, 251, 247, 248, 250, 9, 33, 167,
-        248, 226, 5, 32, 70, 251, 247, 242, 250, 150, 33, 167, 248, 228, 5,
-        32, 70, 251, 247, 236, 250, 2, 33, 167, 248, 230, 5, 32, 70, 251, 247,
-        230, 250, 3, 33, 167, 248, 232, 5, 32, 70, 251, 247, 224, 250, 156,
-        33, 167, 248, 234, 5, 32, 70, 251, 247, 218, 250, 39, 33, 167, 248,
-        236, 5, 32, 70, 251, 247, 212, 250, 111, 33, 167, 248, 238, 5, 32, 70,
-        251, 247, 206, 250, 157, 33, 167, 248, 240, 5, 32, 70, 251, 247, 200,
-        250, 49, 33, 167, 248, 242, 5, 32, 70, 251, 247, 194, 250, 50, 33, 167,
-        248, 244, 5, 32, 70, 251, 247, 188, 250, 155, 33, 167, 248, 246, 5,
-        32, 70, 251, 247, 182, 250, 166, 33, 167, 248, 248, 5, 32, 70, 251,
-        247, 176, 250, 47, 33, 167, 248, 250, 5, 32, 70, 251, 247, 170, 250,
-        48, 33, 167, 248, 252, 5, 32, 70, 251, 247, 164, 250, 43, 33, 167, 248,
-        254, 5, 32, 70, 251, 247, 158, 250, 25, 33, 167, 248, 0, 6, 32, 70,
-        251, 247, 152, 250, 136, 33, 167, 248, 2, 6, 32, 70, 251, 247, 146,
-        250, 153, 33, 167, 248, 4, 6, 42, 70, 32, 70, 43, 70, 252, 247, 226,
-        249, 9, 33, 32, 70, 42, 70, 43, 70, 252, 247, 220, 249, 9, 33, 2, 34,
-        0, 35, 32, 70, 252, 247, 214, 249, 174, 66, 34, 209, 32, 70, 161, 33,
-        50, 70, 51, 70, 252, 247, 206, 249, 32, 70, 103, 33, 50, 70, 51, 70,
-        252, 247, 200, 249, 32, 70, 166, 33, 50, 70, 51, 70, 252, 247, 194,
-        249, 32, 70, 136, 33, 50, 70, 0, 35, 252, 247, 188, 249, 2, 34, 19,
-        70, 32, 70, 153, 33, 252, 247, 182, 249, 32, 70, 9, 33, 112, 34, 16,
-        35, 35, 224, 2, 46, 35, 209, 32, 70, 166, 33, 42, 70, 43, 70, 252, 247,
-        169, 249, 32, 70, 136, 33, 42, 70, 43, 70, 252, 247, 163, 249, 32, 70,
-        161, 33, 42, 70, 43, 70, 252, 247, 157, 249, 32, 70, 103, 33, 42, 70,
-        0, 35, 252, 247, 151, 249, 32, 70, 153, 33, 50, 70, 51, 70, 252, 247,
-        145, 249, 32, 70, 9, 33, 112, 34, 48, 35, 252, 247, 139, 249, 2, 34,
-        32, 70, 150, 33, 19, 70, 252, 247, 133, 249, 1, 34, 32, 70, 2, 33, 19,
-        70, 252, 247, 127, 249, 8, 34, 32, 70, 150, 33, 19, 70, 252, 247, 121,
-        249, 32, 70, 2, 33, 79, 244, 224, 98, 79, 244, 64, 115, 252, 247, 113,
-        249, 1, 34, 32, 70, 150, 33, 19, 70, 252, 247, 107, 249, 32, 70, 3,
-        33, 164, 35, 64, 242, 255, 50, 252, 247, 100, 249, 4, 34, 32, 70, 150,
-        33, 19, 70, 252, 247, 94, 249, 2, 33, 32, 70, 14, 34, 11, 70, 252, 247,
-        88, 249, 32, 70, 2, 33, 48, 34, 0, 35, 252, 247, 82, 249, 32, 70, 111,
-        33, 0, 35, 79, 244, 0, 82, 252, 247, 75, 249, 32, 70, 0, 35, 47, 33,
-        79, 244, 112, 82, 252, 247, 68, 249, 156, 33, 2, 34, 32, 70, 19, 70,
-        252, 247, 62, 249, 79, 244, 112, 98, 32, 70, 39, 33, 19, 70, 252, 247,
-        55, 249, 64, 34, 32, 70, 157, 33, 19, 70, 252, 247, 49, 249, 32, 70,
-        45, 33, 0, 35, 79, 244, 0, 114, 252, 247, 42, 249, 128, 34, 32, 70,
-        157, 33, 19, 70, 252, 247, 36, 249, 32, 70, 45, 33, 0, 35, 79, 244,
-        128, 98, 252, 247, 29, 249, 79, 244, 128, 82, 32, 70, 157, 33, 19, 70,
-        252, 247, 22, 249, 32, 70, 43, 33, 1, 34, 0, 35, 252, 247, 16, 249,
-        2, 34, 32, 70, 155, 33, 19, 70, 252, 247, 10, 249, 1, 34, 32, 70, 25,
-        33, 19, 70, 252, 247, 4, 249, 4, 34, 32, 70, 156, 33, 19, 70, 252, 247,
-        254, 248, 79, 244, 128, 82, 32, 70, 19, 70, 38, 33, 252, 247, 247, 248,
-        8, 34, 32, 70, 156, 33, 19, 70, 252, 247, 241, 248, 1, 34, 32, 70, 31,
-        33, 19, 70, 252, 247, 235, 248, 32, 34, 32, 70, 156, 33, 19, 70, 252,
-        247, 229, 248, 8, 34, 32, 70, 31, 33, 19, 70, 189, 232, 240, 65, 252,
-        247, 221, 184, 112, 181, 208, 248, 248, 96, 1, 37, 104, 33, 134, 248,
-        150, 85, 4, 70, 251, 247, 123, 249, 162, 33, 166, 248, 152, 5, 32, 70,
-        251, 247, 117, 249, 2, 33, 166, 248, 154, 5, 32, 70, 251, 247, 111,
-        249, 106, 33, 166, 248, 156, 5, 32, 70, 251, 247, 105, 249, 39, 33,
-        166, 248, 158, 5, 32, 70, 251, 247, 99, 249, 150, 33, 166, 248, 160,
-        5, 32, 70, 251, 247, 93, 249, 153, 33, 166, 248, 162, 5, 32, 70, 251,
-        247, 87, 249, 121, 33, 166, 248, 164, 5, 32, 70, 251, 247, 81, 249,
-        156, 33, 166, 248, 166, 5, 32, 70, 251, 247, 75, 249, 159, 33, 166,
-        248, 168, 5, 32, 70, 251, 247, 69, 249, 165, 33, 166, 248, 170, 5, 32,
-        70, 251, 247, 63, 249, 157, 33, 166, 248, 172, 5, 32, 70, 251, 247,
-        57, 249, 158, 33, 166, 248, 174, 5, 32, 70, 251, 247, 51, 249, 155,
-        33, 166, 248, 176, 5, 32, 70, 251, 247, 45, 249, 240, 34, 166, 248,
-        178, 5, 128, 35, 32, 70, 104, 33, 252, 247, 125, 248, 121, 33, 32, 70,
-        32, 34, 0, 35, 252, 247, 119, 248, 32, 70, 104, 33, 0, 35, 79, 244,
-        64, 114, 252, 247, 112, 248, 2, 34, 32, 70, 162, 33, 19, 70, 252, 247,
-        106, 248, 2, 34, 32, 70, 104, 33, 19, 70, 252, 247, 100, 248, 32, 70,
-        162, 33, 42, 70, 43, 70, 252, 247, 94, 248, 32, 70, 104, 33, 42, 70,
-        0, 35, 252, 247, 88, 248, 64, 34, 32, 70, 165, 33, 19, 70, 252, 247,
-        82, 248, 16, 34, 32, 70, 129, 33, 19, 70, 252, 247, 76, 248, 32, 34,
-        32, 70, 165, 33, 19, 70, 252, 247, 70, 248, 32, 70, 129, 33, 8, 34,
-        0, 35, 252, 247, 64, 248, 32, 70, 129, 33, 79, 244, 240, 114, 96, 35,
-        252, 247, 57, 248, 32, 70, 153, 33, 42, 70, 43, 70, 252, 247, 51, 248,
-        32, 70, 9, 33, 42, 70, 43, 70, 252, 247, 45, 248, 2, 34, 32, 70, 153,
-        33, 19, 70, 252, 247, 39, 248, 32, 70, 9, 33, 112, 34, 0, 35, 252, 247,
-        33, 248, 2, 34, 32, 70, 150, 33, 19, 70, 252, 247, 27, 248, 32, 70,
-        2, 33, 42, 70, 43, 70, 252, 247, 21, 248, 4, 34, 32, 70, 150, 33, 19,
-        70, 252, 247, 15, 248, 32, 70, 2, 33, 14, 34, 0, 35, 252, 247, 9, 248,
-        8, 34, 32, 70, 150, 33, 19, 70, 252, 247, 3, 248, 150, 248, 190, 52,
-        32, 70, 2, 33, 27, 2, 79, 244, 224, 98, 251, 247, 250, 255, 32, 70,
-        150, 33, 42, 70, 43, 70, 251, 247, 244, 255, 32, 70, 150, 248, 191,
-        52, 3, 33, 64, 242, 255, 50, 251, 247, 236, 255, 2, 34, 32, 70, 156,
-        33, 19, 70, 251, 247, 230, 255, 79, 244, 112, 98, 32, 70, 39, 33, 19,
-        70, 251, 247, 223, 255, 32, 70, 47, 33, 0, 35, 79, 244, 112, 82, 251,
-        247, 216, 255, 32, 70, 111, 33, 0, 35, 79, 244, 0, 82, 251, 247, 209,
-        255, 8, 34, 32, 70, 156, 33, 19, 70, 251, 247, 203, 255, 32, 70, 31,
-        33, 42, 70, 43, 70, 251, 247, 197, 255, 32, 34, 32, 70, 156, 33, 19,
-        70, 251, 247, 191, 255, 8, 34, 32, 70, 31, 33, 19, 70, 251, 247, 185,
-        255, 128, 34, 32, 70, 159, 33, 19, 70, 251, 247, 179, 255, 32, 70, 56,
-        33, 42, 70, 0, 35, 251, 247, 173, 255, 16, 34, 32, 70, 159, 33, 19,
-        70, 251, 247, 167, 255, 32, 70, 61, 33, 79, 244, 0, 82, 0, 35, 251,
-        247, 160, 255, 32, 70, 61, 33, 0, 35, 79, 244, 128, 82, 251, 247, 153,
-        255, 79, 244, 128, 114, 32, 70, 157, 33, 19, 70, 251, 247, 146, 255,
-        32, 70, 45, 33, 0, 35, 79, 244, 0, 98, 251, 247, 139, 255, 64, 34, 32,
-        70, 157, 33, 19, 70, 251, 247, 133, 255, 32, 70, 45, 33, 0, 35, 79,
-        244, 0, 114, 251, 247, 126, 255, 128, 34, 32, 70, 157, 33, 19, 70, 251,
-        247, 120, 255, 32, 70, 45, 33, 0, 35, 79, 244, 128, 98, 251, 247, 113,
-        255, 79, 244, 128, 82, 32, 70, 157, 33, 19, 70, 251, 247, 106, 255,
-        32, 70, 43, 33, 42, 70, 0, 35, 251, 247, 100, 255, 64, 34, 32, 70, 159,
-        33, 19, 70, 251, 247, 94, 255, 32, 70, 58, 33, 32, 34, 0, 35, 251, 247,
-        88, 255, 32, 70, 158, 33, 42, 70, 43, 70, 251, 247, 82, 255, 32, 70,
-        53, 33, 42, 70, 0, 35, 189, 232, 112, 64, 251, 247, 74, 191, 112, 181,
-        0, 35, 4, 70, 13, 70, 79, 244, 0, 98, 157, 33, 251, 247, 65, 255, 32,
-        70, 157, 33, 16, 34, 0, 35, 251, 247, 59, 255, 32, 70, 157, 33, 8, 34,
-        0, 35, 251, 247, 53, 255, 32, 70, 157, 33, 4, 34, 0, 35, 251, 247, 47,
-        255, 32, 70, 157, 33, 2, 34, 0, 35, 251, 247, 41, 255, 32, 70, 157,
-        33, 1, 34, 0, 35, 251, 247, 35, 255, 32, 70, 157, 33, 0, 35, 79, 244,
-        128, 66, 251, 247, 28, 255, 32, 70, 157, 33, 0, 35, 79, 244, 0, 114,
-        251, 247, 21, 255, 32, 70, 128, 34, 0, 35, 157, 33, 251, 247, 15, 255,
-        157, 33, 32, 70, 0, 35, 79, 244, 128, 82, 251, 247, 8, 255, 32, 70,
-        157, 33, 0, 35, 79, 244, 0, 82, 251, 247, 1, 255, 8, 34, 32, 70, 19,
-        70, 64, 242, 61, 81, 251, 247, 53, 255, 107, 2, 32, 70, 64, 242, 60,
-        81, 79, 244, 240, 82, 3, 244, 126, 67, 189, 232, 112, 64, 251, 247,
-        41, 191, 112, 181, 208, 248, 248, 96, 1, 37, 156, 33, 134, 248, 254,
-        84, 4, 70, 250, 247, 140, 255, 164, 33, 166, 248, 0, 5, 32, 70, 250,
-        247, 134, 255, 165, 33, 166, 248, 2, 5, 32, 70, 250, 247, 128, 255,
-        159, 33, 166, 248, 4, 5, 32, 70, 250, 247, 122, 255, 157, 33, 166, 248,
-        6, 5, 32, 70, 250, 247, 116, 255, 155, 33, 166, 248, 8, 5, 32, 70, 250,
-        247, 110, 255, 2, 34, 166, 248, 10, 5, 156, 33, 32, 70, 19, 70, 251,
-        247, 190, 254, 32, 70, 39, 33, 0, 35, 79, 244, 112, 98, 251, 247, 183,
-        254, 32, 70, 50, 33, 0, 35, 79, 244, 0, 98, 251, 247, 176, 254, 32,
-        70, 50, 33, 0, 35, 79, 244, 128, 98, 251, 247, 169, 254, 32, 70, 164,
-        33, 42, 70, 43, 70, 251, 247, 163, 254, 79, 244, 128, 114, 32, 70, 126,
-        33, 19, 70, 251, 247, 156, 254, 2, 34, 32, 70, 164, 33, 19, 70, 251,
-        247, 150, 254, 79, 244, 128, 66, 32, 70, 19, 70, 126, 33, 251, 247,
-        143, 254, 79, 244, 0, 114, 32, 70, 159, 33, 19, 70, 251, 247, 136, 254,
-        32, 70, 56, 33, 4, 34, 0, 35, 251, 247, 130, 254, 79, 244, 128, 98,
-        32, 70, 165, 33, 19, 70, 251, 247, 123, 254, 64, 34, 32, 70, 128, 33,
-        19, 70, 251, 247, 117, 254, 79, 244, 0, 114, 32, 70, 165, 33, 19, 70,
-        251, 247, 110, 254, 32, 34, 32, 70, 128, 33, 19, 70, 251, 247, 104,
-        254, 32, 70, 129, 33, 42, 70, 43, 70, 251, 247, 98, 254, 4, 34, 32,
-        70, 62, 33, 19, 70, 251, 247, 92, 254, 6, 34, 32, 70, 129, 33, 19, 70,
-        251, 247, 86, 254, 3, 34, 32, 70, 62, 33, 19, 70, 251, 247, 80, 254,
-        128, 34, 32, 70, 159, 33, 19, 70, 251, 247, 74, 254, 32, 70, 42, 70,
-        56, 33, 0, 35, 251, 247, 68, 254, 79, 244, 128, 114, 32, 70, 159, 33,
-        19, 70, 251, 247, 61, 254, 2, 34, 32, 70, 56, 33, 19, 70, 251, 247,
-        55, 254, 16, 34, 32, 70, 159, 33, 19, 70, 251, 247, 49, 254, 32, 70,
-        61, 33, 0, 35, 79, 244, 0, 82, 251, 247, 42, 254, 79, 244, 128, 82,
-        32, 70, 61, 33, 19, 70, 251, 247, 35, 254, 32, 34, 32, 70, 159, 33,
-        19, 70, 251, 247, 29, 254, 79, 244, 128, 66, 32, 70, 61, 33, 19, 70,
-        251, 247, 22, 254, 4, 34, 32, 70, 159, 33, 19, 70, 251, 247, 16, 254,
-        32, 34, 32, 70, 62, 33, 19, 70, 251, 247, 10, 254, 79, 244, 128, 114,
-        32, 70, 157, 33, 19, 70, 251, 247, 3, 254, 79, 244, 0, 98, 32, 70, 45,
-        33, 19, 70, 251, 247, 252, 253, 64, 34, 32, 70, 157, 33, 19, 70, 251,
-        247, 246, 253, 79, 244, 0, 114, 32, 70, 19, 70, 45, 33, 251, 247, 239,
-        253, 128, 34, 32, 70, 157, 33, 19, 70, 251, 247, 233, 253, 79, 244,
-        128, 98, 19, 70, 32, 70, 45, 33, 251, 247, 226, 253, 32, 70, 3, 33,
-        255, 247, 148, 254, 2, 34, 32, 70, 155, 33, 19, 70, 251, 247, 216, 253,
-        32, 70, 25, 33, 42, 70, 43, 70, 251, 247, 210, 253, 4, 34, 32, 70, 156,
-        33, 19, 70, 251, 247, 204, 253, 79, 244, 128, 82, 32, 70, 38, 33, 19,
-        70, 251, 247, 197, 253, 8, 34, 32, 70, 156, 33, 19, 70, 251, 247, 191,
-        253, 32, 70, 31, 33, 42, 70, 43, 70, 251, 247, 185, 253, 32, 34, 32,
-        70, 156, 33, 19, 70, 251, 247, 179, 253, 8, 34, 32, 70, 31, 33, 19,
-        70, 189, 232, 112, 64, 251, 247, 171, 189, 1, 34, 16, 181, 12, 33, 4,
-        70, 19, 70, 251, 247, 164, 253, 32, 70, 29, 33, 32, 34, 0, 35, 251,
-        247, 158, 253, 32, 70, 10, 33, 0, 35, 79, 246, 255, 114, 251, 247, 151,
-        253, 32, 70, 11, 33, 0, 35, 79, 246, 255, 114, 251, 247, 144, 253, 32,
-        70, 10, 33, 0, 35, 79, 246, 255, 114, 251, 247, 137, 253, 32, 70, 11,
-        33, 0, 35, 79, 246, 255, 114, 251, 247, 130, 253, 32, 70, 104, 33, 240,
-        34, 0, 35, 251, 247, 124, 253, 32, 70, 121, 33, 32, 34, 0, 35, 251,
-        247, 118, 253, 32, 70, 104, 33, 4, 34, 0, 35, 189, 232, 16, 64, 251,
-        247, 110, 189, 45, 233, 240, 71, 4, 70, 208, 248, 248, 0, 176, 248,
-        180, 85, 176, 248, 182, 197, 0, 32, 73, 78, 134, 87, 150, 66, 4, 208,
-        1, 48, 15, 40, 248, 209, 189, 232, 240, 135, 0, 235, 1, 16, 69, 74,
-        64, 26, 50, 248, 16, 112, 68, 74, 111, 67, 50, 248, 17, 96, 67, 74,
-        110, 67, 50, 248, 16, 128, 66, 74, 5, 251, 8, 248, 50, 248, 16, 144,
-        64, 74, 32, 70, 50, 248, 19, 160, 63, 75, 16, 34, 5, 251, 9, 249, 51,
-        248, 17, 80, 163, 33, 19, 70, 12, 251, 10, 250, 251, 247, 56, 253, 8,
-        34, 32, 70, 163, 33, 19, 70, 251, 247, 50, 253, 4, 34, 32, 70, 163,
-        33, 19, 70, 251, 247, 44, 253, 1, 34, 32, 70, 163, 33, 19, 70, 251,
-        247, 38, 253, 2, 34, 32, 70, 163, 33, 19, 70, 251, 247, 32, 253, 255,
-        19, 79, 244, 0, 82, 32, 70, 163, 33, 19, 70, 191, 178, 246, 19, 251,
-        247, 22, 253, 182, 178, 32, 70, 114, 33, 59, 70, 65, 246, 255, 114,
-        79, 234, 232, 56, 251, 247, 12, 253, 31, 250, 136, 248, 32, 70, 118,
-        33, 51, 70, 65, 246, 255, 114, 79, 234, 233, 57, 251, 247, 1, 253, 31,
-        250, 137, 249, 32, 70, 115, 33, 67, 70, 65, 246, 255, 114, 79, 234,
-        234, 58, 251, 247, 246, 252, 31, 250, 138, 250, 32, 70, 116, 33, 75,
-        70, 65, 246, 255, 114, 251, 247, 237, 252, 32, 70, 117, 33, 83, 70,
-        64, 242, 255, 18, 251, 247, 230, 252, 32, 70, 43, 70, 119, 33, 255,
-        34, 251, 247, 224, 252, 32, 70, 113, 33, 0, 35, 79, 244, 128, 82, 251,
-        247, 217, 252, 32, 70, 114, 33, 79, 244, 0, 82, 0, 35, 189, 232, 240,
-        71, 251, 247, 208, 188, 66, 248, 3, 0, 116, 245, 3, 0, 40, 246, 3, 0,
-        52, 246, 3, 0, 142, 247, 3, 0, 110, 248, 3, 0, 112, 247, 3, 0, 112,
-        181, 8, 34, 4, 70, 13, 70, 0, 35, 156, 33, 251, 247, 186, 252, 32, 70,
-        156, 33, 4, 34, 0, 35, 251, 247, 180, 252, 32, 70, 31, 33, 224, 34,
-        128, 35, 251, 247, 174, 252, 32, 70, 38, 33, 0, 35, 79, 244, 0, 98,
-        251, 247, 167, 252, 32, 70, 36, 33, 255, 34, 16, 35, 251, 247, 161,
-        252, 32, 70, 36, 33, 79, 244, 127, 66, 79, 244, 0, 99, 251, 247, 153,
-        252, 32, 70, 37, 33, 255, 34, 8, 35, 251, 247, 147, 252, 32, 70, 37,
-        33, 79, 244, 127, 66, 79, 244, 0, 99, 251, 247, 139, 252, 32, 70, 38,
-        33, 79, 244, 64, 114, 79, 244, 128, 115, 251, 247, 131, 252, 32, 70,
-        255, 34, 64, 35, 38, 33, 251, 247, 125, 252, 32, 33, 32, 70, 127, 34,
-        43, 136, 251, 247, 119, 252, 32, 70, 33, 33, 127, 34, 107, 136, 251,
-        247, 113, 252, 171, 136, 32, 70, 27, 2, 33, 33, 79, 244, 254, 66, 3,
-        244, 127, 67, 251, 247, 103, 252, 32, 70, 34, 33, 127, 34, 235, 136,
-        251, 247, 97, 252, 32, 70, 40, 33, 127, 34, 171, 137, 251, 247, 91,
-        252, 235, 137, 32, 70, 27, 2, 40, 33, 79, 244, 254, 66, 3, 244, 127,
-        67, 251, 247, 81, 252, 32, 70, 41, 33, 127, 34, 43, 138, 251, 247, 75,
-        252, 107, 138, 79, 244, 127, 66, 27, 2, 32, 70, 41, 33, 19, 64, 251,
-        247, 66, 252, 43, 137, 32, 70, 27, 2, 35, 33, 79, 244, 254, 66, 3, 244,
-        127, 67, 251, 247, 56, 252, 32, 70, 35, 33, 127, 34, 107, 137, 251,
-        247, 50, 252, 171, 138, 32, 70, 27, 2, 34, 33, 79, 244, 254, 66, 3,
-        244, 127, 67, 251, 247, 40, 252, 42, 33, 32, 70, 79, 244, 248, 82, 79,
-        244, 0, 115, 251, 247, 32, 252, 32, 70, 42, 33, 79, 244, 192, 66, 79,
-        244, 0, 83, 251, 247, 24, 252, 16, 34, 32, 70, 156, 33, 19, 70, 251,
-        247, 18, 252, 4, 34, 32, 70, 31, 33, 19, 70, 251, 247, 12, 252, 32,
-        70, 31, 33, 4, 34, 0, 35, 251, 247, 6, 252, 32, 70, 156, 33, 16, 34,
-        0, 35, 189, 232, 112, 64, 251, 247, 254, 187, 16, 181, 208, 248, 248,
-        48, 134, 176, 4, 70, 179, 248, 186, 21, 106, 70, 254, 247, 82, 250,
-        32, 70, 105, 70, 255, 247, 46, 255, 6, 176, 16, 189, 56, 181, 208, 248,
-        248, 64, 0, 35, 5, 70, 132, 248, 220, 53, 161, 33, 180, 248, 222, 37,
-        250, 247, 155, 252, 40, 70, 103, 33, 180, 248, 224, 37, 250, 247, 149,
-        252, 40, 70, 153, 33, 180, 248, 226, 37, 250, 247, 143, 252, 40, 70,
-        9, 33, 180, 248, 228, 37, 250, 247, 137, 252, 40, 70, 150, 33, 180,
-        248, 230, 37, 250, 247, 131, 252, 40, 70, 2, 33, 180, 248, 232, 37,
-        250, 247, 125, 252, 40, 70, 3, 33, 180, 248, 234, 37, 250, 247, 119,
-        252, 40, 70, 156, 33, 180, 248, 236, 37, 250, 247, 113, 252, 40, 70,
-        39, 33, 180, 248, 238, 37, 250, 247, 107, 252, 40, 70, 111, 33, 180,
-        248, 240, 37, 250, 247, 101, 252, 40, 70, 157, 33, 180, 248, 242, 37,
-        250, 247, 95, 252, 40, 70, 49, 33, 180, 248, 244, 37, 250, 247, 89,
-        252, 40, 70, 50, 33, 180, 248, 246, 37, 250, 247, 83, 252, 40, 70, 155,
-        33, 180, 248, 248, 37, 250, 247, 77, 252, 40, 70, 166, 33, 180, 248,
-        250, 37, 250, 247, 71, 252, 40, 70, 180, 248, 252, 37, 47, 33, 250,
-        247, 65, 252, 48, 33, 40, 70, 180, 248, 254, 37, 250, 247, 59, 252,
-        40, 70, 43, 33, 180, 248, 0, 38, 250, 247, 53, 252, 40, 70, 25, 33,
-        180, 248, 2, 38, 250, 247, 47, 252, 180, 248, 4, 38, 40, 70, 136, 33,
-        189, 232, 56, 64, 250, 247, 39, 188, 56, 181, 208, 248, 248, 64, 0,
-        35, 5, 70, 132, 248, 150, 53, 104, 33, 180, 248, 152, 37, 250, 247,
-        27, 252, 40, 70, 162, 33, 180, 248, 154, 37, 250, 247, 21, 252, 40,
-        70, 2, 33, 180, 248, 156, 37, 250, 247, 15, 252, 40, 70, 106, 33, 180,
-        248, 158, 37, 250, 247, 9, 252, 40, 70, 39, 33, 180, 248, 160, 37, 250,
-        247, 3, 252, 40, 70, 150, 33, 180, 248, 162, 37, 250, 247, 253, 251,
-        40, 70, 153, 33, 180, 248, 164, 37, 250, 247, 247, 251, 40, 70, 121,
-        33, 180, 248, 166, 37, 250, 247, 241, 251, 40, 70, 156, 33, 180, 248,
-        168, 37, 250, 247, 235, 251, 40, 70, 159, 33, 180, 248, 170, 37, 250,
-        247, 229, 251, 40, 70, 165, 33, 180, 248, 172, 37, 250, 247, 223, 251,
-        40, 70, 157, 33, 180, 248, 174, 37, 250, 247, 217, 251, 40, 70, 158,
-        33, 180, 248, 176, 37, 250, 247, 211, 251, 180, 248, 178, 37, 40, 70,
-        155, 33, 189, 232, 56, 64, 250, 247, 203, 187, 112, 181, 208, 248, 248,
-        96, 0, 37, 4, 70, 156, 33, 182, 248, 0, 37, 134, 248, 254, 84, 250,
-        247, 191, 251, 32, 70, 164, 33, 182, 248, 2, 37, 250, 247, 185, 251,
-        32, 70, 165, 33, 182, 248, 4, 37, 250, 247, 179, 251, 32, 70, 159, 33,
-        182, 248, 6, 37, 250, 247, 173, 251, 32, 70, 157, 33, 182, 248, 8, 37,
-        250, 247, 167, 251, 32, 70, 155, 33, 182, 248, 10, 37, 250, 247, 161,
-        251, 32, 70, 129, 33, 1, 34, 43, 70, 251, 247, 226, 250, 32, 70, 62,
-        33, 4, 34, 43, 70, 251, 247, 220, 250, 32, 70, 61, 33, 79, 244, 128,
-        82, 43, 70, 189, 232, 112, 64, 251, 247, 211, 186, 16, 181, 138, 33,
-        4, 70, 250, 247, 118, 251, 64, 244, 128, 114, 138, 33, 32, 70, 146,
-        178, 250, 247, 128, 251, 32, 70, 27, 33, 0, 35, 79, 244, 224, 98, 251,
-        247, 192, 250, 81, 33, 1, 34, 0, 35, 32, 70, 251, 247, 186, 250, 1,
-        32, 219, 243, 91, 243, 1, 34, 32, 70, 81, 33, 19, 70, 251, 247, 177,
-        250, 79, 244, 128, 114, 32, 70, 160, 33, 19, 70, 251, 247, 170, 250,
-        32, 70, 66, 33, 16, 34, 0, 35, 251, 247, 164, 250, 79, 244, 0, 114,
-        32, 70, 160, 33, 19, 70, 251, 247, 157, 250, 66, 33, 32, 34, 0, 35,
-        32, 70, 251, 247, 151, 250, 1, 32, 219, 243, 56, 243, 16, 34, 32, 70,
-        19, 70, 66, 33, 251, 247, 142, 250, 66, 33, 32, 34, 19, 70, 32, 70,
-        251, 247, 136, 250, 1, 32, 219, 243, 41, 243, 128, 34, 32, 70, 66, 33,
-        19, 70, 251, 247, 127, 250, 64, 34, 66, 33, 19, 70, 32, 70, 251, 247,
-        121, 250, 1, 32, 219, 243, 26, 243, 32, 70, 66, 33, 128, 34, 0, 35,
-        251, 247, 112, 250, 32, 70, 66, 33, 64, 34, 0, 35, 251, 247, 106, 250,
-        50, 32, 189, 232, 16, 64, 219, 243, 9, 179, 112, 181, 4, 70, 14, 70,
-        100, 37, 10, 32, 219, 243, 2, 243, 101, 33, 32, 70, 250, 247, 2, 251,
-        193, 7, 3, 212, 1, 61, 237, 178, 0, 45, 242, 209, 1, 46, 2, 209, 100,
-        32, 219, 243, 243, 242, 138, 33, 32, 70, 250, 247, 243, 250, 79, 246,
-        255, 98, 2, 64, 138, 33, 32, 70, 189, 232, 112, 64, 250, 247, 251, 186,
-        56, 181, 208, 248, 248, 48, 1, 57, 211, 248, 36, 54, 66, 37, 5, 251,
-        1, 53, 4, 70, 98, 33, 170, 136, 250, 247, 237, 250, 32, 70, 83, 33,
-        234, 136, 250, 247, 232, 250, 32, 70, 84, 33, 42, 137, 250, 247, 227,
-        250, 32, 70, 87, 33, 106, 137, 250, 247, 222, 250, 32, 70, 88, 33, 170,
-        137, 250, 247, 217, 250, 32, 70, 100, 33, 234, 137, 250, 247, 212, 250,
-        32, 70, 81, 33, 42, 138, 250, 247, 207, 250, 32, 70, 92, 33, 106, 138,
-        250, 247, 202, 250, 32, 70, 93, 33, 170, 138, 250, 247, 197, 250, 32,
-        70, 90, 33, 234, 138, 250, 247, 192, 250, 32, 70, 91, 33, 42, 139, 250,
-        247, 187, 250, 32, 70, 99, 33, 106, 139, 250, 247, 182, 250, 32, 70,
-        86, 33, 170, 139, 250, 247, 177, 250, 32, 70, 89, 33, 234, 139, 250,
-        247, 172, 250, 32, 70, 97, 33, 42, 140, 250, 247, 167, 250, 32, 70,
-        106, 140, 85, 33, 250, 247, 162, 250, 32, 70, 95, 33, 170, 140, 250,
-        247, 157, 250, 32, 70, 82, 33, 234, 140, 250, 247, 152, 250, 32, 70,
-        78, 33, 42, 141, 250, 247, 147, 250, 32, 70, 79, 33, 106, 141, 250,
-        247, 142, 250, 32, 70, 77, 33, 170, 141, 250, 247, 137, 250, 32, 70,
-        76, 33, 234, 141, 250, 247, 132, 250, 32, 70, 74, 33, 42, 142, 250,
-        247, 127, 250, 32, 70, 75, 33, 106, 142, 250, 247, 122, 250, 32, 70,
-        72, 33, 170, 142, 250, 247, 117, 250, 32, 70, 73, 33, 234, 142, 250,
-        247, 112, 250, 32, 70, 69, 33, 42, 143, 250, 247, 107, 250, 32, 70,
-        70, 33, 106, 143, 250, 247, 102, 250, 32, 70, 24, 33, 170, 143, 250,
-        247, 97, 250, 32, 70, 60, 33, 234, 143, 250, 247, 92, 250, 32, 70, 134,
-        33, 181, 248, 64, 32, 250, 247, 86, 250, 32, 70, 61, 33, 79, 244, 128,
-        82, 0, 35, 251, 247, 150, 249, 32, 70, 113, 33, 0, 35, 79, 244, 128,
-        82, 251, 247, 143, 249, 114, 33, 32, 70, 79, 244, 0, 82, 0, 35, 251,
-        247, 136, 249, 32, 70, 255, 247, 178, 254, 32, 70, 1, 33, 189, 232,
-        56, 64, 255, 247, 26, 191, 0, 0, 45, 233, 240, 65, 105, 75, 134, 176,
-        25, 136, 154, 120, 173, 248, 12, 16, 141, 248, 14, 32, 26, 70, 50, 248,
-        3, 31, 4, 70, 146, 120, 173, 248, 16, 16, 141, 248, 18, 32, 26, 70,
-        50, 248, 6, 31, 212, 248, 248, 96, 146, 120, 173, 248, 20, 16, 141,
-        248, 22, 32, 83, 248, 10, 15, 138, 33, 155, 136, 1, 144, 32, 70, 173,
-        248, 8, 48, 250, 247, 255, 249, 0, 244, 254, 99, 138, 33, 32, 70, 79,
-        244, 254, 98, 67, 244, 136, 67, 251, 247, 77, 249, 13, 241, 2, 7, 0,
-        37, 3, 171, 235, 92, 32, 70, 30, 33, 64, 34, 155, 1, 251, 247, 66, 249,
-        4, 171, 235, 92, 32, 70, 30, 33, 48, 34, 27, 1, 251, 247, 58, 249, 5,
-        171, 235, 92, 32, 70, 143, 33, 79, 244, 127, 66, 27, 2, 251, 247, 49,
-        249, 32, 70, 144, 33, 65, 246, 255, 114, 55, 248, 2, 63, 251, 247, 41,
-        249, 30, 33, 1, 34, 0, 35, 32, 70, 251, 247, 35, 249, 1, 32, 219, 243,
-        196, 241, 1, 34, 19, 70, 30, 33, 32, 70, 251, 247, 26, 249, 35, 32,
-        219, 243, 187, 241, 1, 34, 32, 70, 143, 33, 19, 70, 251, 247, 17, 249,
-        79, 240, 100, 8, 100, 32, 8, 241, 255, 56, 219, 243, 174, 241, 31, 250,
-        136, 248, 32, 70, 145, 33, 250, 247, 172, 249, 184, 241, 0, 15, 1, 208,
-        192, 7, 239, 213, 0, 35, 1, 34, 143, 33, 32, 70, 251, 247, 249, 248,
-        146, 33, 32, 70, 250, 247, 157, 249, 147, 33, 128, 70, 32, 70, 250,
-        247, 152, 249, 79, 234, 200, 72, 192, 4, 192, 12, 79, 234, 216, 72,
-        21, 240, 255, 15, 200, 235, 0, 8, 212, 248, 148, 49, 10, 209, 30, 72,
-        27, 11, 0, 251, 8, 248, 184, 251, 243, 248, 166, 248, 180, 133, 166,
-        248, 182, 133, 7, 224, 25, 72, 27, 11, 0, 251, 8, 248, 184, 251, 243,
-        248, 166, 248, 186, 133, 30, 33, 1, 34, 0, 35, 32, 70, 1, 53, 251, 247,
-        201, 248, 2, 45, 127, 244, 124, 175, 148, 33, 32, 70, 250, 247, 106,
-        249, 0, 244, 120, 112, 64, 17, 134, 248, 184, 5, 163, 33, 32, 70, 79,
-        244, 128, 114, 0, 35, 251, 247, 182, 248, 138, 33, 32, 70, 250, 247,
-        90, 249, 79, 246, 255, 50, 2, 64, 138, 33, 32, 70, 6, 176, 189, 232,
-        240, 65, 250, 247, 97, 185, 116, 180, 3, 0, 165, 140, 1, 0, 163, 142,
-        1, 0, 248, 181, 169, 33, 6, 70, 14, 77, 0, 224, 33, 70, 76, 28, 164,
-        178, 48, 70, 21, 248, 1, 43, 250, 247, 78, 249, 221, 44, 245, 209, 9,
-        77, 0, 224, 60, 70, 103, 28, 48, 70, 33, 70, 53, 248, 2, 43, 250, 247,
-        66, 249, 191, 178, 64, 242, 21, 19, 159, 66, 242, 209, 248, 189, 0,
-        191, 232, 246, 3, 0, 50, 251, 3, 0, 203, 75, 208, 248, 148, 33, 140,
-        33, 154, 66, 79, 240, 1, 2, 16, 181, 12, 191, 19, 70, 0, 35, 4, 70,
-        251, 247, 112, 248, 64, 34, 32, 70, 155, 33, 19, 70, 251, 247, 106,
-        248, 128, 34, 32, 70, 25, 33, 19, 70, 251, 247, 100, 248, 16, 34, 32,
-        70, 155, 33, 19, 70, 251, 247, 94, 248, 8, 34, 25, 33, 19, 70, 32, 70,
-        251, 247, 88, 248, 100, 32, 219, 243, 249, 240, 1, 34, 32, 70, 167,
-        33, 19, 70, 251, 247, 79, 248, 1, 34, 32, 70, 137, 33, 19, 70, 251,
-        247, 73, 248, 1, 34, 32, 70, 151, 33, 19, 70, 251, 247, 67, 248, 1,
-        34, 4, 33, 19, 70, 32, 70, 251, 247, 61, 248, 20, 32, 219, 243, 222,
-        240, 32, 34, 32, 70, 19, 70, 155, 33, 251, 247, 52, 248, 155, 33, 8,
-        34, 32, 70, 19, 70, 251, 247, 46, 248, 4, 34, 32, 70, 155, 33, 19, 70,
-        251, 247, 40, 248, 2, 34, 32, 70, 155, 33, 19, 70, 251, 247, 34, 248,
-        16, 34, 32, 70, 25, 33, 19, 70, 251, 247, 28, 248, 4, 34, 32, 70, 25,
-        33, 19, 70, 251, 247, 22, 248, 2, 34, 32, 70, 25, 33, 19, 70, 251, 247,
-        16, 248, 1, 34, 25, 33, 19, 70, 32, 70, 251, 247, 10, 248, 200, 32,
-        219, 243, 171, 240, 1, 34, 32, 70, 67, 33, 19, 70, 251, 247, 1, 248,
-        32, 70, 81, 33, 1, 34, 0, 35, 250, 247, 251, 255, 32, 34, 32, 70, 19,
-        70, 160, 33, 250, 247, 245, 255, 66, 33, 2, 34, 32, 70, 19, 70, 250,
-        247, 239, 255, 64, 34, 32, 70, 160, 33, 19, 70, 250, 247, 233, 255,
-        4, 34, 32, 70, 66, 33, 19, 70, 250, 247, 227, 255, 16, 34, 32, 70, 160,
-        33, 19, 70, 250, 247, 221, 255, 1, 34, 32, 70, 66, 33, 19, 70, 250,
-        247, 215, 255, 128, 34, 32, 70, 160, 33, 19, 70, 250, 247, 209, 255,
-        8, 34, 32, 70, 66, 33, 19, 70, 250, 247, 203, 255, 4, 34, 32, 70, 151,
-        33, 19, 70, 250, 247, 197, 255, 32, 70, 4, 33, 240, 34, 112, 35, 250,
-        247, 191, 255, 0, 35, 32, 70, 151, 33, 2, 34, 250, 247, 185, 255, 32,
-        70, 138, 33, 250, 247, 93, 248, 79, 246, 255, 82, 2, 64, 138, 33, 32,
-        70, 250, 247, 103, 248, 32, 70, 255, 247, 45, 254, 32, 70, 255, 247,
-        170, 251, 32, 70, 8, 33, 240, 34, 64, 35, 250, 247, 162, 255, 8, 33,
-        32, 70, 14, 34, 11, 70, 250, 247, 156, 255, 79, 244, 0, 114, 32, 70,
-        111, 33, 19, 70, 250, 247, 149, 255, 32, 70, 111, 33, 0, 35, 79, 244,
-        64, 98, 250, 247, 142, 255, 2, 34, 32, 70, 4, 33, 19, 70, 250, 247,
-        136, 255, 108, 33, 48, 34, 16, 35, 32, 70, 250, 247, 130, 255, 32, 70,
-        255, 247, 221, 254, 79, 244, 64, 114, 32, 70, 137, 33, 19, 70, 250,
-        247, 120, 255, 32, 70, 24, 33, 7, 34, 0, 35, 250, 247, 114, 255, 32,
-        70, 24, 33, 112, 34, 0, 35, 250, 247, 108, 255, 32, 70, 23, 33, 224,
-        34, 64, 35, 250, 247, 102, 255, 79, 244, 224, 98, 32, 70, 23, 33, 19,
-        70, 250, 247, 95, 255, 32, 70, 141, 33, 240, 34, 16, 35, 250, 247, 89,
-        255, 32, 70, 121, 33, 32, 34, 0, 35, 250, 247, 83, 255, 32, 70, 121,
-        33, 16, 34, 0, 35, 250, 247, 77, 255, 32, 70, 121, 33, 8, 34, 0, 35,
-        250, 247, 71, 255, 32, 70, 122, 33, 79, 244, 127, 66, 79, 244, 64, 83,
-        250, 247, 63, 255, 240, 34, 32, 70, 122, 33, 19, 70, 250, 247, 57, 255,
-        32, 70, 15, 34, 0, 35, 122, 33, 250, 247, 51, 255, 124, 33, 32, 70,
-        63, 34, 25, 35, 250, 247, 45, 255, 32, 70, 124, 33, 79, 244, 124, 82,
-        79, 244, 200, 83, 250, 247, 37, 255, 32, 70, 125, 33, 0, 35, 79, 244,
-        240, 98, 250, 247, 30, 255, 32, 70, 125, 33, 63, 34, 33, 35, 250, 247,
-        24, 255, 32, 70, 131, 33, 62, 34, 42, 35, 250, 247, 18, 255, 32, 70,
-        135, 33, 0, 35, 79, 244, 112, 66, 250, 247, 11, 255, 32, 70, 135, 33,
-        79, 244, 124, 98, 79, 244, 32, 99, 250, 247, 3, 255, 32, 70, 135, 33,
-        63, 34, 22, 35, 250, 247, 253, 254, 32, 70, 123, 33, 79, 244, 224, 98,
-        79, 244, 128, 99, 250, 247, 245, 254, 32, 70, 123, 33, 64, 35, 112,
-        34, 250, 247, 239, 254, 32, 70, 123, 33, 3, 34, 1, 35, 250, 247, 233,
-        254, 32, 70, 30, 33, 1, 224, 192, 173, 58, 2, 128, 34, 0, 35, 189, 232,
-        16, 64, 250, 247, 222, 190, 45, 233, 240, 65, 77, 28, 134, 176, 4, 70,
-        23, 70, 152, 70, 17, 209, 64, 242, 52, 81, 249, 247, 161, 255, 64, 242,
-        114, 65, 5, 70, 32, 70, 249, 247, 155, 255, 237, 178, 192, 178, 69,
-        25, 85, 33, 105, 67, 9, 18, 73, 178, 2, 224, 75, 41, 168, 191, 75, 33,
-        28, 77, 32, 38, 1, 145, 32, 70, 13, 33, 5, 170, 1, 35, 0, 150, 2, 149,
-        251, 247, 22, 249, 5, 155, 32, 70, 3, 244, 0, 18, 82, 13, 58, 112, 3,
-        244, 240, 18, 82, 12, 136, 248, 0, 32, 3, 244, 224, 49, 12, 154, 3,
-        244, 126, 83, 137, 11, 219, 9, 17, 112, 1, 147, 18, 33, 5, 170, 1, 35,
-        0, 150, 2, 149, 251, 247, 251, 248, 5, 155, 13, 154, 3, 240, 15, 1,
-        17, 112, 3, 244, 240, 97, 14, 154, 201, 9, 17, 112, 3, 244, 240, 3,
-        15, 154, 219, 12, 19, 112, 6, 176, 189, 232, 240, 129, 0, 191, 157,
-        211, 2, 0, 45, 233, 255, 65, 14, 70, 64, 246, 165, 17, 4, 70, 249, 247,
-        77, 255, 2, 34, 19, 70, 128, 70, 64, 246, 165, 17, 32, 70, 250, 247,
-        177, 254, 179, 104, 33, 43, 28, 209, 32, 70, 64, 242, 116, 81, 249,
-        247, 61, 255, 64, 242, 117, 81, 7, 70, 32, 70, 249, 247, 55, 255, 79,
-        244, 128, 66, 19, 70, 5, 70, 64, 242, 116, 81, 32, 70, 250, 247, 154,
-        254, 79, 244, 128, 98, 32, 70, 64, 242, 117, 81, 19, 70, 250, 247, 146,
-        254, 1, 224, 0, 37, 47, 70, 64, 242, 87, 66, 1, 146, 64, 242, 86, 66,
-        14, 35, 2, 146, 32, 70, 13, 34, 49, 70, 0, 147, 251, 247, 31, 248, 179,
-        104, 33, 43, 11, 209, 32, 70, 64, 242, 116, 81, 58, 70, 249, 247, 24,
-        255, 32, 70, 64, 242, 117, 81, 42, 70, 249, 247, 18, 255, 32, 70, 64,
-        246, 165, 17, 66, 70, 4, 176, 189, 232, 240, 65, 249, 247, 9, 191, 127,
-        181, 13, 241, 22, 3, 0, 147, 1, 35, 1, 147, 0, 35, 2, 147, 99, 35, 3,
-        147, 105, 70, 8, 35, 4, 147, 255, 247, 154, 255, 157, 248, 22, 0, 7,
-        176, 0, 189, 56, 181, 208, 248, 248, 64, 1, 35, 132, 248, 120, 53, 5,
-        70, 255, 247, 228, 255, 64, 246, 165, 17, 132, 248, 121, 5, 40, 70,
-        249, 247, 219, 254, 64, 242, 164, 65, 164, 248, 122, 5, 40, 70, 249,
-        247, 212, 254, 64, 246, 172, 17, 164, 248, 124, 5, 40, 70, 249, 247,
-        205, 254, 64, 242, 218, 97, 164, 248, 126, 5, 40, 70, 249, 247, 198,
-        254, 64, 242, 116, 81, 164, 248, 128, 5, 40, 70, 249, 247, 191, 254,
-        64, 242, 117, 81, 164, 248, 130, 5, 40, 70, 249, 247, 184, 254, 64,
-        242, 75, 65, 164, 248, 132, 5, 40, 70, 249, 247, 177, 254, 64, 242,
-        76, 65, 164, 248, 134, 5, 40, 70, 249, 247, 170, 254, 64, 242, 77, 65,
-        164, 248, 138, 5, 40, 70, 249, 247, 163, 254, 64, 246, 56, 17, 164,
-        248, 140, 5, 40, 70, 249, 247, 156, 254, 64, 246, 57, 17, 164, 248,
-        142, 5, 40, 70, 249, 247, 149, 254, 64, 246, 7, 1, 164, 248, 144, 5,
-        40, 70, 249, 247, 142, 254, 164, 248, 148, 5, 56, 189, 112, 181, 208,
-        248, 248, 80, 1, 38, 121, 33, 133, 248, 254, 100, 133, 248, 12, 101,
-        4, 70, 249, 247, 88, 254, 122, 33, 165, 248, 14, 5, 32, 70, 249, 247,
-        82, 254, 61, 33, 165, 248, 16, 5, 32, 70, 249, 247, 76, 254, 165, 33,
-        165, 248, 22, 5, 32, 70, 249, 247, 70, 254, 111, 33, 165, 248, 24, 5,
-        32, 70, 249, 247, 64, 254, 47, 33, 165, 248, 26, 5, 32, 70, 249, 247,
-        58, 254, 39, 33, 165, 248, 28, 5, 32, 70, 249, 247, 52, 254, 50, 33,
-        165, 248, 30, 5, 32, 70, 249, 247, 46, 254, 126, 33, 165, 248, 32, 5,
-        32, 70, 249, 247, 40, 254, 56, 33, 165, 248, 34, 5, 32, 70, 249, 247,
-        34, 254, 128, 33, 165, 248, 36, 5, 32, 70, 249, 247, 28, 254, 129, 33,
-        165, 248, 38, 5, 32, 70, 249, 247, 22, 254, 62, 33, 165, 248, 40, 5,
-        32, 70, 249, 247, 16, 254, 45, 33, 165, 248, 42, 5, 32, 70, 249, 247,
-        10, 254, 25, 33, 165, 248, 44, 5, 32, 70, 249, 247, 4, 254, 38, 33,
-        165, 248, 46, 5, 32, 70, 249, 247, 254, 253, 31, 33, 165, 248, 48, 5,
-        32, 70, 249, 247, 248, 253, 124, 33, 165, 248, 50, 5, 32, 70, 249, 247,
-        242, 253, 125, 33, 165, 248, 18, 5, 32, 70, 249, 247, 236, 253, 5, 245,
-        166, 97, 4, 49, 165, 248, 20, 5, 32, 70, 253, 247, 135, 254, 32, 70,
-        255, 247, 10, 255, 165, 248, 62, 5, 32, 70, 253, 247, 157, 254, 111,
-        33, 165, 248, 60, 5, 0, 35, 32, 70, 79, 244, 0, 82, 250, 247, 43, 253,
-        0, 35, 79, 244, 112, 82, 32, 70, 47, 33, 250, 247, 36, 253, 156, 33,
-        32, 70, 249, 247, 200, 253, 164, 33, 165, 248, 0, 5, 32, 70, 249, 247,
-        194, 253, 159, 33, 165, 248, 2, 5, 32, 70, 249, 247, 188, 253, 157,
-        33, 165, 248, 6, 5, 32, 70, 249, 247, 182, 253, 155, 33, 165, 248, 8,
-        5, 32, 70, 249, 247, 176, 253, 2, 34, 165, 248, 10, 5, 156, 33, 32,
-        70, 19, 70, 250, 247, 0, 253, 32, 70, 39, 33, 79, 244, 112, 98, 0, 35,
-        250, 247, 249, 252, 32, 70, 50, 33, 79, 244, 0, 98, 0, 35, 250, 247,
-        242, 252, 32, 70, 50, 33, 0, 35, 79, 244, 128, 98, 250, 247, 235, 252,
-        32, 70, 164, 33, 50, 70, 51, 70, 250, 247, 229, 252, 79, 244, 128, 114,
-        32, 70, 126, 33, 19, 70, 250, 247, 222, 252, 2, 34, 32, 70, 164, 33,
-        19, 70, 250, 247, 216, 252, 79, 244, 128, 66, 32, 70, 126, 33, 19, 70,
-        250, 247, 209, 252, 79, 244, 0, 114, 32, 70, 159, 33, 19, 70, 250, 247,
-        202, 252, 32, 70, 56, 33, 4, 34, 0, 35, 250, 247, 196, 252, 79, 244,
-        128, 98, 32, 70, 165, 33, 19, 70, 250, 247, 189, 252, 64, 34, 32, 70,
-        128, 33, 19, 70, 250, 247, 183, 252, 79, 244, 0, 114, 32, 70, 165, 33,
-        19, 70, 250, 247, 176, 252, 32, 34, 32, 70, 128, 33, 19, 70, 250, 247,
-        170, 252, 32, 70, 129, 33, 50, 70, 51, 70, 250, 247, 164, 252, 62, 33,
-        4, 34, 32, 70, 19, 70, 250, 247, 158, 252, 128, 34, 32, 70, 159, 33,
-        19, 70, 250, 247, 152, 252, 32, 70, 56, 33, 50, 70, 0, 35, 250, 247,
-        146, 252, 79, 244, 128, 114, 32, 70, 159, 33, 19, 70, 250, 247, 139,
-        252, 2, 34, 32, 70, 56, 33, 19, 70, 250, 247, 133, 252, 16, 34, 32,
-        70, 159, 33, 19, 70, 250, 247, 127, 252, 32, 70, 61, 33, 0, 35, 79,
-        244, 0, 82, 250, 247, 120, 252, 79, 244, 128, 82, 32, 70, 61, 33, 19,
-        70, 250, 247, 113, 252, 32, 34, 32, 70, 159, 33, 19, 70, 250, 247, 107,
-        252, 79, 244, 128, 66, 32, 70, 61, 33, 19, 70, 250, 247, 100, 252, 4,
-        34, 32, 70, 159, 33, 19, 70, 250, 247, 94, 252, 32, 34, 32, 70, 62,
-        33, 19, 70, 250, 247, 88, 252, 79, 244, 128, 114, 32, 70, 19, 70, 157,
-        33, 250, 247, 81, 252, 79, 244, 0, 98, 32, 70, 45, 33, 19, 70, 250,
-        247, 74, 252, 64, 34, 32, 70, 157, 33, 19, 70, 250, 247, 68, 252, 79,
-        244, 0, 114, 32, 70, 45, 33, 19, 70, 250, 247, 61, 252, 128, 34, 32,
-        70, 157, 33, 19, 70, 250, 247, 55, 252, 79, 244, 128, 98, 19, 70, 32,
-        70, 45, 33, 250, 247, 48, 252, 32, 70, 3, 33, 254, 247, 226, 252, 2,
-        34, 32, 70, 155, 33, 19, 70, 250, 247, 38, 252, 32, 70, 25, 33, 50,
-        70, 51, 70, 250, 247, 32, 252, 4, 34, 32, 70, 156, 33, 19, 70, 250,
-        247, 26, 252, 79, 244, 128, 82, 32, 70, 38, 33, 19, 70, 250, 247, 19,
-        252, 8, 34, 32, 70, 156, 33, 19, 70, 250, 247, 13, 252, 32, 70, 31,
-        33, 50, 70, 51, 70, 250, 247, 7, 252, 32, 34, 32, 70, 19, 70, 156, 33,
-        250, 247, 1, 252, 31, 33, 8, 34, 32, 70, 19, 70, 189, 232, 112, 64,
-        250, 247, 249, 187, 127, 181, 0, 35, 173, 248, 22, 48, 2, 147, 16, 35,
-        4, 147, 13, 241, 22, 3, 0, 147, 1, 35, 1, 147, 105, 70, 98, 35, 3, 147,
-        255, 247, 98, 253, 189, 248, 22, 0, 7, 176, 0, 189, 48, 181, 135, 176,
-        5, 171, 0, 147, 2, 35, 1, 147, 0, 35, 2, 147, 96, 35, 12, 70, 3, 147,
-        105, 70, 16, 35, 21, 70, 4, 147, 255, 247, 77, 253, 189, 248, 20, 48,
-        35, 128, 189, 248, 22, 48, 43, 128, 7, 176, 48, 189, 16, 181, 208, 248,
-        248, 48, 4, 70, 147, 248, 25, 38, 18, 177, 147, 248, 26, 38, 1, 224,
-        147, 248, 24, 38, 163, 107, 216, 104, 153, 104, 218, 247, 172, 253,
-        163, 107, 1, 33, 24, 105, 189, 232, 16, 64, 5, 240, 237, 188, 0, 0,
-        45, 233, 240, 79, 151, 176, 3, 146, 144, 34, 0, 37, 26, 128, 14, 70,
-        64, 242, 218, 97, 4, 70, 152, 70, 14, 149, 15, 149, 16, 149, 249, 247,
-        112, 252, 64, 246, 172, 17, 131, 70, 32, 70, 249, 247, 106, 252, 64,
-        246, 121, 17, 130, 70, 32, 70, 249, 247, 100, 252, 41, 70, 18, 170,
-        129, 70, 32, 70, 254, 247, 5, 248, 32, 34, 19, 70, 32, 70, 64, 242,
-        218, 97, 250, 247, 195, 251, 79, 244, 128, 114, 19, 70, 32, 70, 64,
-        242, 218, 97, 250, 247, 187, 251, 32, 70, 64, 246, 121, 17, 79, 244,
-        255, 114, 43, 70, 250, 247, 179, 251, 1, 34, 19, 70, 32, 70, 64, 246,
-        121, 17, 250, 247, 172, 251, 32, 70, 64, 246, 172, 17, 79, 244, 112,
-        114, 179, 1, 250, 247, 164, 251, 1, 34, 19, 70, 32, 70, 64, 246, 172,
-        17, 250, 247, 157, 251, 32, 70, 2, 33, 42, 70, 253, 247, 211, 255, 10,
-        39, 0, 35, 0, 147, 1, 147, 79, 244, 0, 114, 32, 35, 32, 70, 14, 169,
-        253, 247, 230, 254, 16, 154, 15, 155, 211, 24, 8, 208, 22, 170, 2, 235,
-        133, 1, 1, 53, 173, 178, 10, 45, 65, 248, 72, 60, 3, 208, 1, 63, 191,
-        178, 0, 47, 228, 209, 1, 33, 32, 70, 18, 170, 253, 247, 178, 255, 32,
-        70, 64, 246, 121, 17, 74, 70, 249, 247, 16, 252, 32, 70, 64, 246, 172,
-        17, 82, 70, 249, 247, 10, 252, 32, 70, 64, 242, 218, 97, 90, 70, 249,
-        247, 4, 252, 9, 45, 75, 217, 4, 171, 24, 70, 1, 34, 65, 104, 4, 175,
-        0, 37, 87, 248, 4, 235, 113, 69, 156, 191, 71, 248, 4, 28, 113, 70,
-        1, 53, 173, 178, 15, 250, 133, 252, 15, 250, 130, 254, 244, 69, 240,
-        219, 1, 50, 146, 178, 10, 42, 64, 248, 4, 31, 231, 209, 3, 241, 32,
-        1, 0, 34, 83, 248, 4, 15, 139, 66, 2, 68, 250, 209, 3, 155, 6, 235,
-        70, 6, 15, 62, 2, 245, 0, 98, 18, 11, 3, 235, 134, 6, 0, 35, 18, 2,
-        0, 147, 20, 171, 17, 146, 1, 147, 32, 70, 21, 170, 19, 171, 17, 169,
-        173, 248, 80, 96, 251, 247, 196, 250, 189, 248, 76, 0, 10, 75, 2, 178,
-        155, 26, 0, 43, 184, 191, 91, 66, 24, 43, 7, 216, 189, 248, 80, 48,
-        195, 24, 3, 245, 135, 115, 168, 248, 0, 48, 1, 224, 79, 246, 120, 96,
-        0, 178, 23, 176, 189, 232, 240, 143, 120, 254, 255, 255, 45, 233, 255,
-        65, 14, 70, 64, 246, 165, 17, 4, 70, 249, 247, 155, 251, 2, 34, 19,
-        70, 128, 70, 64, 246, 165, 17, 32, 70, 250, 247, 255, 250, 179, 104,
-        33, 43, 28, 209, 32, 70, 64, 242, 116, 81, 249, 247, 139, 251, 64, 242,
-        117, 81, 7, 70, 32, 70, 249, 247, 133, 251, 79, 244, 128, 66, 19, 70,
-        5, 70, 64, 242, 116, 81, 32, 70, 250, 247, 232, 250, 79, 244, 128, 98,
-        32, 70, 64, 242, 117, 81, 19, 70, 250, 247, 224, 250, 1, 224, 0, 37,
-        47, 70, 64, 242, 87, 66, 1, 146, 64, 242, 86, 66, 14, 35, 2, 146, 32,
-        70, 13, 34, 49, 70, 0, 147, 250, 247, 228, 251, 179, 104, 33, 43, 11,
-        209, 32, 70, 64, 242, 116, 81, 58, 70, 249, 247, 102, 251, 32, 70, 64,
-        242, 117, 81, 42, 70, 249, 247, 96, 251, 32, 70, 64, 246, 165, 17, 66,
-        70, 4, 176, 189, 232, 240, 65, 249, 247, 87, 187, 112, 181, 198, 176,
-        1, 173, 208, 248, 248, 96, 4, 70, 0, 33, 40, 70, 79, 244, 128, 114,
-        213, 243, 167, 247, 7, 35, 67, 147, 32, 35, 69, 147, 150, 248, 200,
-        52, 65, 149, 67, 185, 20, 35, 66, 147, 32, 70, 79, 244, 80, 115, 65,
-        169, 68, 147, 255, 247, 140, 255, 64, 35, 66, 147, 32, 70, 128, 35,
-        65, 169, 68, 147, 255, 247, 132, 255, 70, 176, 112, 189, 127, 181, 144,
-        248, 164, 53, 99, 177, 7, 75, 1, 169, 1, 147, 20, 35, 2, 147, 7, 35,
-        3, 147, 8, 35, 5, 147, 128, 35, 4, 147, 255, 247, 113, 255, 7, 176,
-        0, 189, 0, 191, 190, 27, 4, 0, 16, 181, 134, 176, 6, 171, 35, 248, 2,
-        29, 0, 147, 1, 35, 1, 147, 0, 35, 2, 147, 99, 35, 4, 70, 3, 147, 105,
-        70, 16, 35, 4, 147, 255, 247, 90, 255, 115, 35, 32, 70, 105, 70, 3,
-        147, 255, 247, 84, 255, 6, 176, 16, 189, 56, 181, 208, 248, 248, 64,
-        0, 35, 5, 70, 132, 248, 120, 53, 148, 248, 121, 21, 255, 247, 219, 255,
-        40, 70, 180, 248, 122, 37, 64, 246, 165, 17, 249, 247, 238, 250, 40,
-        70, 180, 248, 124, 37, 64, 242, 164, 65, 249, 247, 231, 250, 40, 70,
-        180, 248, 126, 37, 64, 246, 172, 17, 249, 247, 224, 250, 40, 70, 180,
-        248, 128, 37, 64, 242, 218, 97, 249, 247, 217, 250, 40, 70, 180, 248,
-        130, 37, 64, 242, 116, 81, 249, 247, 210, 250, 40, 70, 180, 248, 132,
-        37, 64, 242, 117, 81, 249, 247, 203, 250, 40, 70, 180, 248, 134, 37,
-        64, 242, 75, 65, 249, 247, 196, 250, 40, 70, 180, 248, 138, 37, 64,
-        242, 76, 65, 249, 247, 189, 250, 40, 70, 180, 248, 140, 37, 64, 242,
-        77, 65, 249, 247, 182, 250, 40, 70, 180, 248, 142, 37, 64, 246, 56,
-        17, 249, 247, 175, 250, 40, 70, 180, 248, 144, 37, 64, 246, 57, 17,
-        249, 247, 168, 250, 180, 248, 148, 37, 40, 70, 64, 246, 7, 1, 189, 232,
-        56, 64, 249, 247, 159, 186, 56, 181, 208, 248, 248, 64, 0, 35, 5, 70,
-        132, 248, 254, 52, 132, 248, 12, 53, 156, 33, 180, 248, 0, 37, 249,
-        247, 112, 250, 40, 70, 164, 33, 180, 248, 2, 37, 249, 247, 106, 250,
-        40, 70, 159, 33, 180, 248, 6, 37, 249, 247, 100, 250, 40, 70, 157, 33,
-        180, 248, 8, 37, 249, 247, 94, 250, 40, 70, 155, 33, 180, 248, 10, 37,
-        249, 247, 88, 250, 40, 70, 121, 33, 180, 248, 14, 37, 249, 247, 82,
-        250, 40, 70, 122, 33, 180, 248, 16, 37, 249, 247, 76, 250, 40, 70, 61,
-        33, 180, 248, 22, 37, 249, 247, 70, 250, 40, 70, 165, 33, 180, 248,
-        24, 37, 249, 247, 64, 250, 40, 70, 111, 33, 180, 248, 26, 37, 249, 247,
-        58, 250, 40, 70, 47, 33, 180, 248, 28, 37, 249, 247, 52, 250, 40, 70,
-        39, 33, 180, 248, 30, 37, 249, 247, 46, 250, 40, 70, 50, 33, 180, 248,
-        32, 37, 249, 247, 40, 250, 40, 70, 126, 33, 180, 248, 34, 37, 249, 247,
-        34, 250, 40, 70, 125, 33, 180, 248, 20, 37, 249, 247, 28, 250, 40, 70,
-        180, 248, 36, 37, 56, 33, 249, 247, 22, 250, 128, 33, 40, 70, 180, 248,
-        38, 37, 249, 247, 16, 250, 40, 70, 129, 33, 180, 248, 40, 37, 249, 247,
-        10, 250, 40, 70, 62, 33, 180, 248, 42, 37, 249, 247, 4, 250, 40, 70,
-        45, 33, 180, 248, 44, 37, 249, 247, 254, 249, 40, 70, 25, 33, 180, 248,
-        46, 37, 249, 247, 248, 249, 40, 70, 38, 33, 180, 248, 48, 37, 249, 247,
-        242, 249, 40, 70, 31, 33, 180, 248, 50, 37, 249, 247, 236, 249, 40,
-        70, 124, 33, 180, 248, 18, 37, 249, 247, 230, 249, 180, 248, 20, 37,
-        40, 70, 125, 33, 249, 247, 224, 249, 4, 245, 166, 97, 40, 70, 4, 49,
-        253, 247, 167, 250, 40, 70, 148, 248, 62, 21, 255, 247, 220, 254, 180,
-        248, 60, 21, 40, 70, 189, 232, 56, 64, 253, 247, 210, 185, 45, 233,
-        240, 67, 64, 246, 117, 17, 135, 176, 4, 70, 249, 247, 220, 249, 64,
-        246, 105, 17, 7, 70, 32, 70, 249, 247, 214, 249, 64, 246, 120, 17, 6,
-        70, 32, 70, 249, 247, 208, 249, 0, 33, 10, 70, 95, 250, 128, 248, 32,
-        70, 253, 247, 93, 248, 32, 70, 64, 246, 113, 17, 255, 34, 254, 35, 250,
-        247, 46, 249, 8, 34, 19, 70, 32, 70, 64, 246, 101, 17, 250, 247, 39,
-        249, 32, 70, 2, 33, 0, 34, 253, 247, 74, 248, 4, 34, 19, 70, 32, 70,
-        79, 244, 136, 97, 250, 247, 27, 249, 1, 34, 19, 70, 32, 70, 64, 242,
-        74, 65, 250, 247, 20, 249, 32, 70, 64, 242, 74, 65, 1, 34, 0, 35, 250,
-        247, 13, 249, 5, 37, 1, 34, 19, 70, 32, 70, 64, 242, 74, 65, 250, 247,
-        5, 249, 32, 70, 64, 242, 74, 65, 1, 34, 0, 35, 250, 247, 254, 248, 79,
-        240, 11, 9, 2, 224, 10, 32, 218, 243, 97, 241, 32, 70, 64, 246, 116,
-        17, 249, 247, 135, 249, 131, 7, 2, 213, 185, 241, 1, 9, 242, 209, 32,
-        70, 64, 246, 120, 17, 249, 247, 125, 249, 192, 178, 255, 40, 3, 208,
-        1, 61, 237, 178, 0, 45, 213, 209, 4, 34, 32, 70, 0, 35, 79, 244, 136,
-        97, 250, 247, 219, 248, 5, 171, 0, 147, 1, 35, 1, 147, 35, 35, 2, 147,
-        0, 37, 32, 35, 32, 70, 105, 70, 4, 147, 3, 149, 255, 247, 12, 250, 5,
-        154, 32, 70, 210, 5, 210, 13, 64, 242, 188, 65, 249, 247, 100, 249,
-        5, 154, 32, 70, 82, 10, 210, 5, 210, 13, 64, 242, 187, 65, 249, 247,
-        91, 249, 32, 70, 105, 70, 5, 149, 255, 247, 168, 253, 32, 70, 58, 70,
-        64, 246, 117, 17, 249, 247, 80, 249, 32, 70, 50, 70, 64, 246, 105, 17,
-        249, 247, 74, 249, 32, 70, 255, 34, 67, 70, 64, 246, 113, 17, 250, 247,
-        164, 248, 8, 34, 32, 70, 64, 246, 101, 17, 19, 70, 250, 247, 157, 248,
-        7, 176, 189, 232, 240, 131, 0, 0, 48, 181, 208, 248, 248, 80, 4, 70,
-        135, 176, 40, 70, 79, 244, 0, 113, 65, 242, 111, 2, 252, 247, 73, 254,
-        0, 40, 0, 240, 158, 128, 7, 35, 3, 147, 32, 35, 5, 147, 128, 35, 2,
-        147, 0, 35, 1, 144, 4, 147, 64, 248, 4, 59, 1, 51, 128, 43, 250, 209,
-        32, 70, 1, 169, 255, 247, 105, 253, 79, 244, 48, 115, 32, 70, 1, 169,
-        4, 147, 255, 247, 98, 253, 212, 248, 248, 0, 65, 242, 130, 1, 252, 247,
-        52, 254, 32, 70, 1, 33, 253, 247, 80, 251, 32, 70, 62, 73, 54, 34, 250,
-        247, 116, 248, 213, 248, 196, 52, 32, 70, 64, 246, 244, 17, 79, 244,
-        128, 66, 107, 177, 19, 70, 250, 247, 87, 248, 181, 248, 88, 36, 181,
-        248, 86, 52, 32, 70, 211, 24, 64, 242, 12, 81, 64, 242, 255, 18, 155,
-        178, 250, 247, 74, 248, 30, 34, 48, 73, 32, 70, 250, 247, 87, 248, 32,
-        70, 255, 247, 138, 253, 32, 70, 254, 247, 89, 250, 153, 33, 1, 34, 0,
-        35, 32, 70, 249, 247, 254, 255, 150, 33, 2, 34, 0, 35, 32, 70, 249,
-        247, 248, 255, 162, 33, 1, 34, 0, 35, 32, 70, 249, 247, 242, 255, 165,
-        33, 64, 34, 0, 35, 32, 70, 249, 247, 236, 255, 166, 33, 1, 34, 0, 35,
-        32, 70, 249, 247, 230, 255, 161, 33, 1, 34, 0, 35, 32, 70, 249, 247,
-        224, 255, 48, 34, 0, 35, 32, 70, 2, 33, 249, 247, 218, 255, 111, 33,
-        32, 70, 79, 244, 0, 82, 0, 35, 249, 247, 211, 255, 79, 244, 128, 82,
-        19, 70, 32, 70, 111, 33, 249, 247, 204, 255, 4, 34, 19, 70, 32, 70,
-        64, 242, 215, 65, 250, 247, 0, 248, 64, 242, 215, 65, 79, 244, 112,
-        98, 79, 244, 128, 115, 32, 70, 249, 247, 247, 255, 32, 70, 253, 247,
-        9, 251, 32, 70, 64, 242, 117, 81, 79, 244, 0, 114, 0, 35, 249, 247,
-        236, 255, 7, 176, 48, 189, 0, 191, 32, 249, 3, 0, 28, 247, 3, 0, 127,
-        181, 0, 35, 2, 147, 16, 35, 4, 147, 5, 171, 0, 147, 2, 35, 173, 248,
-        20, 16, 1, 147, 105, 70, 96, 35, 173, 248, 22, 32, 3, 147, 255, 247,
-        196, 252, 7, 176, 0, 189, 0, 181, 0, 35, 137, 176, 5, 147, 16, 35, 7,
-        147, 13, 241, 6, 3, 3, 147, 1, 35, 173, 248, 6, 16, 4, 147, 3, 169,
-        98, 35, 6, 147, 255, 247, 176, 252, 9, 176, 0, 189, 45, 233, 240, 67,
-        208, 248, 248, 48, 141, 176, 32, 39, 131, 248, 68, 20, 131, 248, 69,
-        20, 1, 245, 16, 115, 12, 173, 4, 147, 13, 235, 7, 3, 69, 248, 44, 61,
-        79, 240, 1, 8, 14, 70, 79, 240, 7, 9, 41, 70, 4, 70, 205, 248, 12, 144,
-        5, 151, 205, 248, 8, 128, 255, 247, 220, 248, 6, 241, 192, 3, 4, 147,
-        32, 70, 9, 171, 41, 70, 1, 147, 5, 151, 255, 247, 210, 248, 9, 155,
-        32, 70, 3, 240, 31, 2, 173, 248, 24, 32, 90, 9, 91, 11, 219, 178, 173,
-        248, 28, 48, 8, 155, 210, 178, 91, 12, 3, 240, 15, 3, 6, 169, 173, 248,
-        26, 32, 173, 248, 30, 48, 253, 247, 199, 248, 9, 153, 32, 70, 73, 13,
-        201, 178, 252, 247, 248, 255, 8, 153, 32, 70, 73, 10, 201, 178, 255,
-        247, 245, 252, 4, 34, 32, 70, 19, 70, 64, 246, 7, 1, 249, 247, 105,
-        255, 8, 155, 65, 246, 240, 114, 219, 5, 219, 13, 27, 1, 32, 70, 64,
-        246, 7, 1, 249, 247, 94, 255, 32, 70, 65, 70, 252, 247, 110, 254, 79,
-        244, 160, 115, 4, 147, 32, 70, 11, 171, 41, 70, 1, 147, 205, 248, 12,
-        144, 5, 151, 205, 248, 8, 128, 255, 247, 139, 248, 11, 154, 32, 70,
-        145, 10, 137, 5, 146, 5, 146, 13, 137, 13, 255, 247, 94, 255, 16, 35,
-        5, 147, 32, 70, 10, 171, 41, 70, 6, 245, 224, 118, 1, 147, 4, 150, 255,
-        247, 119, 248, 32, 70, 189, 248, 40, 16, 255, 247, 98, 255, 32, 70,
-        64, 242, 166, 97, 65, 246, 255, 114, 0, 35, 249, 247, 43, 255, 13, 176,
-        189, 232, 240, 131, 0, 0, 45, 233, 240, 67, 155, 176, 4, 70, 13, 70,
-        22, 70, 0, 33, 48, 34, 104, 70, 31, 70, 213, 243, 22, 244, 32, 70, 32,
-        35, 64, 246, 118, 17, 64, 246, 255, 114, 249, 247, 19, 255, 232, 7,
-        45, 213, 32, 70, 64, 246, 102, 17, 79, 246, 247, 114, 72, 246, 133,
-        19, 249, 247, 8, 255, 32, 70, 64, 246, 103, 17, 255, 34, 25, 35, 249,
-        247, 1, 255, 110, 177, 0, 171, 17, 147, 12, 35, 18, 147, 34, 35, 19,
-        147, 32, 35, 21, 147, 32, 70, 0, 35, 17, 169, 20, 147, 255, 247, 227,
-        251, 32, 70, 64, 246, 110, 17, 64, 246, 255, 114, 0, 35, 249, 247, 234,
-        254, 4, 34, 32, 70, 64, 246, 101, 17, 19, 70, 249, 247, 227, 254, 169,
-        7, 105, 213, 63, 75, 13, 241, 88, 14, 3, 241, 16, 12, 24, 104, 89, 104,
-        114, 70, 3, 194, 8, 51, 99, 69, 150, 70, 247, 209, 32, 70, 64, 246,
-        104, 17, 79, 246, 247, 114, 69, 246, 134, 83, 249, 247, 203, 254, 32,
-        70, 64, 246, 103, 17, 79, 244, 127, 66, 79, 244, 32, 83, 249, 247, 194,
-        254, 32, 70, 64, 246, 105, 17, 1, 35, 255, 34, 249, 247, 187, 254, 22,
-        171, 12, 147, 36, 35, 79, 240, 8, 9, 14, 147, 79, 240, 0, 8, 16, 35,
-        32, 70, 12, 169, 205, 248, 52, 144, 16, 147, 205, 248, 60, 128, 255,
-        247, 154, 251, 118, 177, 13, 235, 8, 3, 12, 147, 35, 35, 14, 147, 32,
-        70, 32, 35, 12, 169, 205, 248, 52, 144, 16, 147, 205, 248, 60, 128,
-        255, 247, 138, 251, 32, 70, 64, 246, 113, 17, 255, 34, 1, 35, 249, 247,
-        146, 254, 8, 34, 19, 70, 32, 70, 64, 246, 101, 17, 249, 247, 139, 254,
-        32, 70, 64, 242, 177, 65, 1, 34, 0, 35, 249, 247, 132, 254, 32, 70,
-        79, 244, 150, 97, 7, 34, 0, 35, 249, 247, 125, 254, 32, 70, 50, 33,
-        126, 34, 123, 0, 249, 247, 60, 254, 106, 7, 15, 213, 32, 70, 64, 246,
-        107, 17, 79, 244, 127, 66, 79, 244, 32, 83, 249, 247, 108, 254, 32,
-        70, 64, 246, 109, 17, 63, 34, 24, 35, 249, 247, 101, 254, 27, 176, 189,
-        232, 240, 131, 0, 191, 132, 180, 3, 0, 240, 181, 7, 35, 135, 176, 208,
-        248, 248, 96, 2, 147, 32, 35, 4, 147, 1, 35, 4, 70, 13, 70, 1, 147,
-        48, 70, 5, 171, 79, 244, 0, 113, 65, 242, 198, 34, 0, 147, 252, 247,
-        6, 252, 0, 40, 75, 208, 214, 248, 188, 101, 7, 70, 1, 70, 0, 35, 179,
-        66, 44, 191, 158, 70, 182, 70, 5, 235, 206, 2, 146, 248, 3, 192, 21,
-        248, 62, 224, 1, 51, 78, 234, 76, 94, 146, 248, 2, 192, 82, 120, 78,
-        234, 76, 62, 78, 234, 66, 18, 128, 43, 5, 146, 65, 248, 4, 43, 230,
-        209, 141, 232, 9, 0, 105, 70, 192, 35, 32, 70, 3, 147, 255, 247, 19,
-        251, 0, 35, 179, 66, 44, 191, 26, 70, 50, 70, 5, 235, 194, 2, 16, 121,
-        81, 121, 64, 2, 64, 234, 65, 64, 209, 121, 1, 51, 64, 234, 1, 2, 128,
-        43, 5, 146, 71, 248, 4, 43, 235, 209, 79, 244, 16, 115, 32, 70, 105,
-        70, 3, 147, 255, 247, 247, 250, 212, 248, 248, 48, 65, 242, 242, 33,
-        195, 248, 192, 85, 212, 248, 248, 0, 252, 247, 197, 251, 7, 176, 240,
-        189, 112, 181, 208, 248, 248, 80, 164, 176, 149, 249, 84, 100, 4, 70,
-        110, 177, 250, 247, 32, 252, 149, 249, 84, 52, 64, 242, 167, 65, 160,
-        235, 131, 3, 255, 34, 32, 70, 155, 178, 249, 247, 229, 253, 139, 224,
-        208, 248, 188, 6, 0, 40, 0, 240, 135, 128, 49, 70, 1, 34, 35, 171, 5,
-        240, 192, 251, 33, 171, 0, 147, 49, 70, 50, 70, 1, 35, 212, 248, 188,
-        6, 5, 240, 208, 251, 30, 171, 1, 34, 1, 147, 49, 70, 51, 70, 212, 248,
-        188, 6, 0, 146, 5, 240, 225, 251, 2, 169, 42, 70, 43, 70, 35, 168, 48,
-        86, 1, 54, 64, 66, 65, 248, 4, 15, 195, 248, 92, 4, 4, 51, 4, 46, 244,
-        209, 6, 168, 41, 70, 0, 35, 33, 174, 158, 87, 1, 51, 118, 66, 64, 248,
-        4, 111, 193, 248, 108, 100, 4, 49, 8, 43, 244, 209, 14, 169, 0, 35,
-        30, 168, 24, 86, 1, 51, 64, 66, 65, 248, 4, 15, 194, 248, 140, 4, 4,
-        50, 10, 43, 244, 209, 149, 248, 200, 52, 115, 185, 7, 35, 27, 147, 32,
-        35, 29, 147, 22, 35, 26, 147, 3, 171, 25, 147, 32, 70, 79, 244, 80,
-        115, 25, 169, 28, 147, 255, 247, 125, 250, 148, 248, 164, 53, 19, 177,
-        32, 70, 255, 247, 245, 250, 32, 70, 250, 247, 179, 251, 64, 242, 167,
-        65, 3, 70, 255, 34, 32, 70, 249, 247, 124, 253, 149, 248, 55, 54, 235,
-        177, 64, 242, 167, 65, 32, 70, 248, 247, 8, 254, 149, 248, 53, 38, 67,
-        0, 149, 248, 54, 102, 219, 178, 158, 27, 155, 26, 27, 2, 79, 244, 127,
-        66, 19, 64, 32, 70, 64, 242, 209, 65, 249, 247, 99, 253, 115, 178, 32,
-        70, 64, 242, 209, 65, 255, 34, 155, 178, 249, 247, 91, 253, 32, 70,
-        252, 247, 88, 251, 36, 176, 112, 189, 45, 233, 240, 65, 13, 70, 64,
-        242, 164, 65, 4, 70, 208, 248, 248, 96, 248, 247, 224, 253, 0, 244,
-        96, 71, 175, 66, 0, 240, 158, 128, 64, 34, 0, 35, 32, 70, 64, 242, 218,
-        97, 249, 247, 64, 253, 16, 34, 181, 245, 96, 79, 20, 191, 19, 70, 0,
-        35, 32, 70, 64, 242, 163, 97, 249, 247, 53, 253, 79, 244, 0, 82, 181,
-        245, 96, 79, 12, 191, 19, 70, 0, 35, 32, 70, 64, 242, 55, 97, 249, 247,
-        41, 253, 79, 244, 128, 82, 181, 245, 96, 79, 12, 191, 19, 70, 0, 35,
-        32, 70, 64, 242, 55, 97, 249, 247, 29, 253, 4, 34, 181, 245, 96, 79,
-        8, 191, 19, 70, 32, 70, 24, 191, 0, 35, 79, 244, 154, 97, 249, 247,
-        17, 253, 3, 34, 0, 35, 32, 70, 79, 244, 143, 97, 249, 247, 10, 253,
-        183, 245, 96, 79, 8, 209, 32, 70, 255, 247, 76, 250, 32, 70, 64, 242,
-        110, 65, 0, 34, 248, 247, 157, 253, 181, 245, 96, 79, 32, 70, 67, 209,
-        255, 247, 254, 254, 182, 248, 2, 116, 79, 246, 254, 115, 127, 0, 32,
-        70, 59, 64, 64, 242, 164, 65, 64, 242, 255, 18, 249, 247, 235, 252,
-        182, 248, 4, 116, 79, 246, 254, 115, 127, 0, 32, 70, 59, 64, 79, 244,
-        144, 97, 64, 242, 255, 18, 249, 247, 222, 252, 182, 248, 52, 52, 32,
-        70, 155, 2, 3, 244, 124, 67, 64, 242, 165, 65, 79, 244, 224, 82, 249,
-        247, 210, 252, 1, 34, 32, 70, 64, 242, 110, 65, 248, 247, 107, 253,
-        163, 107, 224, 33, 24, 105, 4, 240, 186, 253, 0, 33, 166, 248, 54, 4,
-        32, 70, 252, 247, 213, 251, 255, 35, 134, 248, 68, 52, 32, 70, 64, 246,
-        7, 1, 4, 34, 0, 35, 249, 247, 183, 252, 2, 224, 1, 33, 252, 247, 199,
-        251, 32, 70, 64, 242, 164, 65, 79, 244, 96, 66, 43, 70, 189, 232, 240,
-        65, 249, 247, 169, 188, 189, 232, 240, 129, 56, 181, 64, 242, 164, 65,
-        4, 70, 248, 247, 53, 253, 0, 33, 5, 70, 32, 70, 255, 247, 70, 255, 32,
-        70, 255, 247, 159, 254, 32, 70, 5, 244, 96, 65, 189, 232, 56, 64, 255,
-        247, 60, 191, 240, 181, 208, 248, 248, 112, 137, 176, 0, 35, 4, 70,
-        13, 70, 56, 70, 79, 244, 0, 113, 65, 242, 19, 34, 5, 147, 6, 147, 7,
-        147, 252, 247, 61, 250, 6, 70, 0, 40, 53, 208, 77, 185, 32, 70, 5, 169,
-        6, 170, 7, 171, 251, 247, 101, 251, 3, 149, 55, 70, 0, 37, 16, 224,
-        151, 248, 55, 54, 0, 43, 248, 208, 180, 249, 0, 61, 6, 147, 180, 249,
-        2, 61, 7, 147, 180, 249, 4, 61, 5, 147, 79, 244, 48, 115, 3, 147, 235,
-        231, 5, 169, 40, 70, 14, 201, 252, 247, 80, 250, 1, 53, 128, 45, 71,
-        248, 4, 11, 245, 209, 7, 35, 2, 147, 32, 70, 32, 35, 105, 70, 4, 147,
-        0, 150, 1, 149, 255, 247, 63, 249, 212, 248, 248, 0, 65, 242, 50, 33,
-        252, 247, 17, 250, 9, 176, 240, 189, 45, 233, 240, 67, 144, 248, 65,
-        86, 137, 176, 0, 36, 0, 245, 218, 121, 4, 35, 144, 70, 6, 70, 1, 147,
-        72, 70, 33, 70, 42, 70, 7, 171, 0, 148, 251, 247, 38, 248, 33, 70, 1,
-        34, 7, 171, 64, 70, 5, 240, 127, 250, 3, 33, 1, 34, 7, 171, 64, 70,
-        5, 240, 121, 250, 5, 175, 8, 35, 1, 147, 9, 241, 4, 0, 33, 70, 42, 70,
-        59, 70, 0, 148, 251, 247, 15, 248, 1, 35, 0, 151, 33, 70, 34, 70, 2,
-        175, 64, 70, 5, 240, 121, 250, 214, 248, 188, 1, 41, 70, 58, 70, 251,
-        247, 54, 248, 150, 248, 192, 33, 111, 240, 1, 3, 2, 240, 15, 1, 3, 251,
-        1, 81, 18, 9, 3, 251, 2, 85, 141, 248, 16, 16, 1, 34, 64, 70, 33, 70,
-        35, 70, 141, 248, 17, 80, 141, 232, 132, 0, 5, 240, 112, 250, 9, 176,
-        189, 232, 240, 131, 248, 181, 144, 248, 212, 44, 208, 248, 252, 48,
-        1, 42, 4, 70, 211, 248, 32, 49, 50, 209, 3, 240, 1, 3, 131, 240, 1,
-        7, 27, 177, 131, 107, 24, 105, 4, 240, 221, 252, 32, 70, 249, 247, 250,
-        250, 32, 70, 251, 247, 12, 248, 50, 38, 0, 37, 32, 70, 64, 242, 177,
-        81, 248, 247, 104, 252, 0, 240, 16, 0, 128, 178, 0, 177, 1, 53, 1, 62,
-        246, 178, 0, 46, 241, 209, 100, 35, 93, 67, 64, 246, 196, 19, 157, 66,
-        32, 70, 148, 191, 0, 37, 1, 37, 251, 247, 133, 250, 32, 70, 249, 247,
-        241, 250, 47, 185, 163, 107, 24, 105, 4, 240, 186, 252, 0, 224, 0, 37,
-        40, 70, 248, 189, 45, 233, 243, 71, 21, 70, 36, 38, 129, 234, 225, 114,
-        162, 235, 225, 114, 86, 67, 10, 154, 12, 70, 79, 244, 122, 113, 74,
-        67, 182, 251, 242, 246, 54, 4, 100, 34, 79, 240, 0, 9, 189, 248, 44,
-        112, 150, 251, 242, 246, 154, 70, 200, 70, 44, 224, 64, 70, 105, 70,
-        250, 247, 36, 254, 1, 154, 0, 44, 204, 191, 176, 68, 198, 235, 8, 8,
-        106, 67, 3, 212, 210, 19, 1, 50, 82, 16, 4, 224, 82, 66, 210, 19, 1,
-        50, 82, 16, 82, 66, 0, 155, 146, 5, 146, 13, 107, 67, 3, 212, 219, 19,
-        1, 51, 91, 16, 4, 224, 91, 66, 219, 19, 1, 51, 91, 16, 91, 66, 155,
-        5, 155, 13, 67, 234, 130, 35, 9, 241, 1, 9, 74, 248, 4, 59, 31, 250,
-        137, 249, 185, 69, 208, 209, 189, 232, 252, 135, 0, 0, 127, 181, 0,
-        35, 4, 70, 29, 70, 30, 70, 6, 224, 81, 248, 8, 12, 1, 51, 54, 24, 81,
-        248, 4, 12, 45, 24, 12, 49, 147, 66, 245, 219, 83, 8, 0, 46, 180, 191,
-        79, 240, 255, 49, 1, 33, 3, 251, 1, 102, 237, 24, 150, 251, 242, 240,
-        1, 169, 149, 251, 242, 245, 250, 247, 214, 253, 2, 153, 1, 154, 105,
-        67, 106, 67, 201, 19, 1, 49, 210, 19, 73, 16, 1, 50, 161, 245, 128,
-        97, 82, 16, 64, 242, 255, 19, 154, 66, 168, 191, 26, 70, 153, 66, 184,
-        191, 11, 70, 10, 73, 32, 70, 138, 66, 184, 191, 10, 70, 139, 66, 184,
-        191, 11, 70, 146, 5, 146, 13, 155, 5, 173, 248, 12, 32, 155, 13, 1,
-        33, 3, 170, 173, 248, 14, 48, 252, 247, 90, 255, 127, 189, 0, 191, 0,
-        254, 255, 255, 115, 181, 130, 234, 226, 115, 163, 235, 226, 115, 5,
-        70, 36, 32, 88, 67, 68, 246, 32, 99, 144, 251, 243, 240, 0, 4, 100,
-        35, 144, 251, 243, 240, 0, 42, 216, 191, 64, 66, 14, 70, 105, 70, 250,
-        247, 147, 253, 1, 155, 0, 43, 5, 219, 26, 3, 210, 26, 210, 19, 1, 50,
-        82, 16, 5, 224, 24, 74, 90, 67, 210, 19, 1, 50, 82, 16, 82, 66, 0, 155,
-        210, 4, 210, 12, 0, 43, 5, 219, 28, 3, 228, 26, 228, 19, 1, 52, 100,
-        16, 5, 224, 16, 76, 92, 67, 228, 19, 1, 52, 100, 16, 100, 66, 228, 4,
-        228, 12, 1, 46, 8, 209, 40, 70, 64, 246, 212, 17, 248, 247, 122, 251,
-        40, 70, 64, 246, 214, 17, 9, 224, 2, 46, 10, 209, 40, 70, 64, 246, 213,
-        17, 248, 247, 111, 251, 40, 70, 64, 246, 215, 17, 34, 70, 248, 247,
-        105, 251, 124, 189, 1, 240, 255, 255, 45, 233, 248, 67, 15, 70, 21,
-        70, 64, 242, 218, 97, 72, 242, 128, 2, 4, 70, 152, 70, 157, 248, 32,
-        96, 157, 248, 36, 144, 249, 247, 169, 250, 123, 30, 255, 34, 155, 178,
-        32, 70, 64, 242, 66, 97, 249, 247, 175, 250, 79, 246, 255, 115, 157,
-        66, 1, 208, 1, 61, 173, 178, 43, 70, 32, 70, 79, 244, 200, 97, 79, 246,
-        255, 114, 249, 247, 161, 250, 32, 70, 64, 242, 65, 97, 79, 246, 255,
-        114, 67, 70, 249, 247, 153, 250, 0, 46, 12, 191, 1, 39, 2, 39, 10, 37,
-        32, 70, 38, 177, 64, 242, 83, 65, 79, 244, 0, 66, 2, 224, 64, 242, 63,
-        97, 1, 34, 19, 70, 249, 247, 135, 250, 1, 32, 217, 243, 237, 242, 32,
-        70, 64, 242, 68, 97, 248, 247, 19, 251, 1, 61, 1, 208, 56, 66, 230,
-        208, 54, 185, 32, 70, 1, 33, 74, 70, 189, 232, 248, 67, 252, 247, 46,
-        188, 189, 232, 248, 131, 45, 233, 240, 71, 87, 26, 126, 28, 31, 250,
-        134, 249, 79, 234, 137, 3, 79, 246, 252, 113, 134, 176, 4, 70, 25, 64,
-        208, 248, 248, 0, 65, 246, 13, 50, 252, 247, 26, 248, 5, 70, 0, 40,
-        116, 208, 16, 35, 79, 240, 96, 10, 223, 248, 232, 128, 141, 232, 8,
-        4, 4, 170, 2, 35, 32, 70, 0, 33, 205, 248, 8, 128, 249, 247, 113, 252,
-        189, 248, 16, 32, 189, 248, 18, 48, 146, 5, 155, 5, 155, 13, 146, 13,
-        67, 234, 130, 34, 194, 70, 0, 35, 8, 224, 85, 248, 35, 16, 1, 240, 127,
-        97, 17, 67, 69, 248, 35, 16, 1, 51, 155, 178, 187, 66, 244, 221, 32,
-        35, 79, 244, 160, 120, 141, 232, 8, 1, 223, 248, 152, 128, 42, 70, 51,
-        70, 32, 70, 7, 33, 205, 248, 8, 128, 249, 247, 87, 252, 212, 248, 248,
-        0, 65, 246, 33, 49, 251, 247, 232, 255, 79, 234, 73, 9, 79, 246, 254,
-        113, 212, 248, 248, 0, 9, 234, 1, 1, 65, 246, 36, 50, 251, 247, 207,
-        255, 5, 70, 80, 179, 16, 35, 79, 240, 98, 12, 141, 232, 8, 16, 32, 70,
-        1, 35, 0, 33, 13, 241, 22, 2, 205, 248, 8, 160, 249, 247, 40, 252, 0,
-        35, 5, 224, 189, 248, 22, 32, 37, 248, 19, 32, 1, 51, 155, 178, 187,
-        66, 247, 221, 16, 35, 79, 244, 224, 126, 141, 232, 8, 64, 32, 70, 7,
-        33, 42, 70, 51, 70, 205, 248, 8, 128, 249, 247, 30, 252, 212, 248, 248,
-        0, 65, 246, 49, 49, 251, 247, 175, 255, 6, 176, 189, 232, 240, 135,
-        157, 211, 2, 0, 1, 219, 2, 0, 240, 181, 0, 36, 135, 176, 5, 70, 5, 148,
-        21, 78, 32, 39, 1, 148, 33, 33, 1, 35, 40, 70, 5, 170, 1, 52, 0, 151,
-        2, 150, 249, 247, 0, 252, 64, 44, 241, 209, 0, 151, 35, 70, 0, 39, 40,
-        70, 28, 33, 12, 74, 1, 151, 2, 150, 249, 247, 244, 251, 60, 70, 32,
-        35, 0, 147, 4, 245, 128, 99, 1, 52, 1, 147, 7, 33, 1, 35, 40, 70, 5,
-        170, 228, 178, 2, 150, 249, 247, 229, 251, 128, 44, 239, 209, 7, 176,
-        240, 189, 1, 219, 2, 0, 156, 22, 4, 0, 20, 75, 112, 181, 4, 70, 30,
-        104, 0, 37, 7, 224, 18, 75, 20, 33, 1, 251, 5, 49, 32, 70, 254, 247,
-        143, 254, 1, 53, 181, 66, 245, 209, 0, 37, 6, 224, 13, 75, 20, 33, 1,
-        251, 5, 49, 254, 247, 132, 254, 1, 53, 11, 75, 32, 70, 27, 104, 157,
-        66, 243, 211, 255, 247, 172, 255, 212, 248, 248, 48, 32, 70, 211, 248,
-        40, 22, 189, 232, 112, 64, 255, 247, 35, 187, 0, 191, 32, 0, 4, 0, 188,
-        255, 3, 0, 48, 252, 3, 0, 36, 0, 4, 0, 45, 233, 240, 79, 15, 104, 133,
-        176, 56, 70, 76, 104, 142, 104, 21, 70, 250, 247, 160, 252, 130, 70,
-        48, 70, 250, 247, 156, 252, 129, 70, 32, 70, 250, 247, 152, 252, 15,
-        250, 137, 249, 15, 250, 128, 248, 200, 69, 184, 191, 200, 70, 15, 250,
-        136, 249, 185, 241, 30, 15, 9, 220, 201, 241, 30, 9, 4, 250, 9, 240,
-        250, 247, 147, 252, 131, 70, 6, 250, 9, 240, 8, 224, 169, 241, 30, 9,
-        68, 250, 9, 240, 250, 247, 137, 252, 131, 70, 70, 250, 9, 240, 250,
-        247, 132, 252, 15, 250, 138, 250, 0, 251, 11, 251, 15, 250, 136, 248,
-        10, 241, 16, 0, 128, 69, 4, 220, 200, 235, 0, 0, 75, 250, 0, 240, 6,
-        224, 111, 240, 15, 3, 202, 235, 3, 3, 152, 68, 11, 250, 8, 240, 127,
-        66, 202, 241, 30, 10, 7, 250, 10, 247, 79, 234, 96, 11, 0, 47, 204,
-        191, 95, 68, 203, 235, 7, 7, 8, 177, 151, 251, 240, 240, 168, 96, 64,
-        16, 64, 67, 192, 241, 128, 64, 250, 247, 88, 252, 171, 104, 64, 0, 1,
-        147, 2, 144, 1, 171, 147, 232, 3, 0, 3, 170, 250, 247, 253, 251, 3,
-        155, 54, 27, 43, 96, 48, 70, 250, 247, 59, 252, 195, 7, 1, 213, 1, 48,
-        128, 178, 0, 178, 192, 241, 30, 3, 158, 64, 10, 40, 2, 221, 10, 56,
-        4, 65, 2, 224, 192, 241, 10, 0, 132, 64, 0, 46, 79, 234, 100, 3, 204,
-        191, 246, 24, 195, 235, 6, 6, 28, 185, 79, 244, 128, 99, 107, 96, 6,
-        224, 150, 251, 244, 244, 4, 245, 128, 16, 250, 247, 38, 252, 104, 96,
-        5, 176, 189, 232, 240, 143, 48, 181, 133, 176, 20, 70, 1, 170, 29, 70,
-        255, 247, 100, 255, 1, 155, 35, 96, 2, 155, 43, 96, 5, 176, 48, 189,
-        56, 181, 13, 70, 176, 248, 10, 17, 208, 248, 248, 64, 249, 247, 56,
-        252, 8, 185, 164, 248, 180, 84, 56, 189, 56, 181, 12, 70, 176, 248,
-        10, 17, 208, 248, 248, 80, 249, 247, 44, 252, 16, 185, 149, 248, 56,
-        52, 35, 128, 56, 189, 240, 181, 0, 35, 161, 176, 208, 248, 248, 80,
-        173, 248, 126, 48, 28, 147, 29, 147, 30, 147, 181, 248, 70, 52, 4, 70,
-        83, 177, 111, 240, 0, 67, 197, 248, 80, 52, 197, 248, 76, 52, 149, 248,
-        201, 52, 0, 43, 69, 209, 140, 224, 13, 241, 126, 1, 255, 247, 214, 255,
-        29, 170, 30, 171, 32, 70, 28, 169, 250, 247, 137, 255, 64, 246, 244,
-        17, 32, 70, 248, 247, 42, 249, 16, 244, 128, 79, 20, 191, 64, 242, 123,
-        65, 64, 242, 166, 65, 32, 70, 248, 247, 32, 249, 192, 5, 192, 13, 255,
-        40, 134, 191, 160, 245, 128, 112, 128, 178, 0, 245, 128, 112, 128, 8,
-        189, 248, 126, 48, 192, 241, 131, 0, 128, 178, 28, 169, 152, 66, 56,
-        191, 24, 70, 14, 201, 251, 247, 105, 254, 148, 249, 44, 113, 149, 248,
-        201, 52, 199, 25, 135, 66, 168, 191, 7, 70, 70, 16, 127, 16, 197, 248,
-        80, 100, 197, 248, 76, 116, 67, 177, 20, 47, 168, 191, 20, 39, 20, 46,
-        168, 191, 20, 38, 1, 224, 20, 38, 55, 70, 148, 248, 76, 49, 83, 177,
-        148, 248, 55, 49, 183, 66, 184, 191, 62, 70, 158, 66, 168, 191, 30,
-        70, 132, 248, 55, 97, 55, 224, 234, 24, 210, 248, 92, 20, 1, 170, 153,
-        80, 4, 51, 88, 43, 247, 209, 32, 70, 64, 242, 167, 65, 248, 247, 215,
-        248, 0, 35, 192, 178, 1, 170, 153, 88, 69, 26, 173, 178, 189, 66, 2,
-        221, 237, 27, 105, 24, 153, 80, 4, 51, 16, 43, 243, 209, 5, 171, 23,
-        173, 83, 248, 4, 43, 129, 26, 137, 178, 177, 66, 3, 221, 137, 27, 138,
-        24, 67, 248, 4, 44, 171, 66, 243, 209, 7, 35, 25, 147, 32, 35, 27, 147,
-        22, 35, 24, 147, 1, 171, 23, 147, 32, 70, 79, 244, 80, 115, 23, 169,
-        26, 147, 254, 247, 9, 253, 33, 176, 240, 189, 0, 0, 56, 181, 39, 73,
-        4, 70, 248, 247, 18, 255, 192, 178, 40, 40, 140, 191, 0, 35, 1, 35,
-        132, 248, 65, 6, 132, 248, 162, 6, 132, 248, 69, 54, 32, 70, 32, 73,
-        248, 247, 3, 255, 8, 40, 32, 70, 28, 216, 30, 73, 0, 34, 248, 247, 19,
-        255, 128, 178, 0, 34, 196, 248, 180, 1, 27, 73, 32, 70, 248, 247, 11,
-        255, 26, 73, 196, 248, 184, 1, 32, 70, 248, 247, 238, 254, 24, 73, 5,
-        70, 32, 70, 248, 247, 233, 254, 128, 178, 64, 234, 5, 69, 196, 248,
-        188, 81, 19, 224, 19, 73, 0, 34, 248, 247, 246, 254, 128, 178, 196,
-        248, 180, 1, 17, 73, 0, 34, 32, 70, 248, 247, 238, 254, 15, 73, 196,
-        248, 184, 1, 32, 70, 248, 247, 209, 254, 196, 248, 188, 1, 32, 70, 12,
-        73, 248, 247, 203, 254, 132, 248, 192, 1, 56, 189, 0, 191, 42, 57, 5,
-        0, 8, 66, 5, 0, 18, 61, 5, 0, 79, 61, 5, 0, 223, 65, 5, 0, 59, 61, 5,
-        0, 151, 65, 5, 0, 43, 66, 5, 0, 152, 61, 5, 0, 208, 60, 5, 0, 208, 248,
-        248, 48, 211, 248, 40, 6, 8, 177, 217, 247, 14, 187, 112, 71, 112, 181,
-        208, 248, 248, 48, 1, 57, 211, 248, 36, 54, 66, 34, 2, 251, 1, 51, 94,
-        136, 24, 75, 2, 34, 83, 248, 33, 80, 64, 246, 135, 17, 4, 70, 248, 247,
-        53, 248, 48, 70, 79, 244, 240, 97, 250, 247, 115, 254, 182, 251, 240,
-        242, 46, 12, 32, 70, 246, 178, 64, 246, 134, 17, 248, 247, 39, 248,
-        173, 178, 32, 70, 50, 70, 79, 244, 24, 97, 248, 247, 32, 248, 32, 70,
-        42, 70, 64, 246, 129, 17, 248, 247, 26, 248, 32, 70, 50, 70, 64, 246,
-        132, 17, 248, 247, 20, 248, 32, 70, 64, 246, 133, 17, 42, 70, 189, 232,
-        112, 64, 248, 247, 12, 184, 108, 250, 3, 0, 112, 181, 0, 35, 4, 70,
-        14, 70, 79, 244, 128, 98, 64, 242, 49, 97, 208, 248, 248, 80, 248, 247,
-        95, 255, 0, 35, 32, 70, 64, 242, 49, 97, 79, 244, 0, 114, 248, 247,
-        87, 255, 79, 244, 128, 114, 19, 70, 32, 70, 64, 242, 49, 97, 248, 247,
-        79, 255, 32, 70, 49, 70, 255, 247, 162, 255, 255, 34, 90, 35, 32, 70,
-        64, 242, 42, 97, 248, 247, 68, 255, 0, 34, 32, 70, 64, 246, 72, 1, 247,
-        247, 221, 255, 181, 249, 110, 37, 1, 46, 34, 234, 226, 114, 1, 208,
-        11, 46, 3, 209, 181, 248, 116, 53, 24, 4, 4, 213, 181, 248, 112, 53,
-        25, 4, 72, 191, 0, 35, 165, 248, 114, 53, 0, 33, 32, 70, 18, 178, 252,
-        247, 31, 252, 1, 33, 181, 249, 114, 37, 32, 70, 252, 247, 25, 252, 32,
-        70, 79, 244, 137, 97, 79, 244, 64, 114, 79, 244, 0, 115, 189, 232, 112,
-        64, 248, 247, 21, 191, 240, 181, 40, 78, 143, 176, 109, 70, 4, 70, 15,
-        70, 15, 206, 15, 197, 15, 206, 15, 197, 15, 206, 15, 197, 150, 232,
-        3, 0, 212, 248, 248, 48, 1, 63, 211, 248, 36, 54, 66, 34, 2, 251, 7,
-        51, 133, 232, 3, 0, 94, 136, 14, 171, 3, 235, 135, 7, 87, 248, 56, 92,
-        32, 70, 171, 178, 64, 246, 173, 17, 79, 246, 255, 114, 248, 247, 239,
-        254, 32, 70, 43, 12, 64, 246, 174, 17, 64, 242, 255, 50, 248, 247, 231,
-        254, 0, 35, 32, 70, 79, 244, 128, 66, 64, 246, 174, 17, 248, 247, 223,
-        254, 49, 70, 79, 244, 160, 96, 250, 247, 188, 253, 79, 244, 160, 99,
-        179, 251, 240, 243, 64, 246, 177, 17, 32, 70, 65, 246, 255, 114, 248,
-        247, 207, 254, 79, 244, 128, 98, 32, 70, 64, 246, 172, 17, 19, 70, 15,
-        176, 189, 232, 240, 64, 248, 247, 196, 190, 0, 191, 148, 180, 3, 0,
-        240, 181, 4, 70, 145, 176, 13, 70, 255, 247, 166, 255, 32, 70, 41, 70,
-        251, 247, 84, 255, 0, 34, 32, 70, 64, 246, 207, 17, 247, 247, 80, 255,
-        104, 75, 1, 170, 3, 241, 32, 6, 24, 104, 89, 104, 21, 70, 3, 197, 8,
-        51, 179, 66, 42, 70, 247, 209, 24, 104, 155, 136, 40, 96, 171, 128,
-        1, 171, 8, 38, 16, 37, 3, 39, 11, 147, 32, 70, 19, 35, 11, 169, 12,
-        147, 13, 150, 15, 149, 14, 151, 254, 247, 132, 251, 60, 35, 173, 248,
-        4, 48, 1, 35, 173, 248, 6, 48, 32, 70, 29, 35, 11, 169, 14, 147, 173,
-        248, 8, 96, 12, 151, 254, 247, 117, 251, 79, 244, 128, 114, 32, 70,
-        19, 70, 64, 242, 59, 81, 248, 247, 124, 254, 79, 244, 0, 114, 32, 70,
-        19, 70, 64, 242, 59, 81, 248, 247, 116, 254, 79, 244, 128, 98, 32, 70,
-        19, 70, 64, 242, 59, 81, 248, 247, 108, 254, 4, 34, 32, 70, 19, 70,
-        64, 242, 177, 65, 248, 247, 101, 254, 1, 34, 32, 70, 25, 33, 19, 70,
-        248, 247, 36, 254, 2, 34, 32, 70, 155, 33, 19, 70, 248, 247, 30, 254,
-        1, 34, 32, 70, 28, 33, 19, 70, 248, 247, 24, 254, 79, 244, 128, 66,
-        32, 70, 23, 33, 19, 70, 248, 247, 17, 254, 1, 34, 32, 70, 154, 33, 19,
-        70, 248, 247, 11, 254, 79, 244, 128, 66, 32, 70, 61, 33, 19, 70, 248,
-        247, 4, 254, 32, 34, 32, 70, 19, 70, 159, 33, 248, 247, 254, 253, 62,
-        33, 32, 70, 42, 70, 0, 35, 248, 247, 248, 253, 2, 34, 32, 70, 159, 33,
-        19, 70, 248, 247, 242, 253, 32, 34, 32, 70, 62, 33, 19, 70, 248, 247,
-        236, 253, 4, 34, 32, 70, 159, 33, 19, 70, 248, 247, 230, 253, 79, 244,
-        128, 82, 32, 70, 38, 33, 19, 70, 248, 247, 223, 253, 4, 34, 32, 70,
-        156, 33, 19, 70, 248, 247, 217, 253, 4, 34, 32, 70, 19, 70, 64, 242,
-        177, 65, 248, 247, 13, 254, 64, 34, 32, 70, 19, 70, 64, 246, 165, 17,
-        248, 247, 6, 254, 32, 70, 64, 242, 99, 65, 79, 244, 127, 66, 79, 244,
-        228, 67, 248, 247, 253, 253, 7, 33, 1, 34, 2, 35, 32, 70, 254, 247,
-        208, 254, 32, 70, 251, 247, 109, 255, 32, 70, 48, 33, 63, 34, 51, 70,
-        248, 247, 179, 253, 32, 70, 126, 34, 43, 70, 49, 33, 248, 247, 173,
-        253, 57, 33, 32, 70, 15, 34, 0, 35, 248, 247, 167, 253, 17, 176, 240,
-        189, 0, 191, 204, 180, 3, 0, 16, 181, 64, 242, 74, 65, 79, 244, 128,
-        114, 4, 70, 248, 247, 199, 253, 32, 70, 64, 242, 74, 65, 79, 246, 255,
-        98, 189, 232, 16, 64, 248, 247, 177, 189, 131, 107, 147, 248, 44, 33,
-        139, 30, 74, 177, 1, 43, 14, 217, 105, 177, 161, 241, 4, 12, 220, 241,
-        0, 0, 64, 235, 12, 0, 112, 71, 1, 43, 6, 217, 209, 241, 1, 0, 56, 191,
-        0, 32, 112, 71, 1, 32, 112, 71, 1, 32, 112, 71, 16, 181, 4, 70, 4, 41,
-        36, 216, 223, 232, 1, 240, 30, 35, 15, 3, 3, 0, 79, 244, 48, 97, 2,
-        34, 0, 35, 248, 247, 163, 253, 32, 70, 64, 246, 7, 49, 1, 34, 0, 35,
-        10, 224, 2, 34, 79, 244, 48, 97, 19, 70, 248, 247, 151, 253, 1, 34,
-        32, 70, 64, 246, 7, 49, 19, 70, 248, 247, 144, 253, 0, 32, 16, 189,
-        79, 244, 48, 97, 2, 34, 0, 35, 239, 231, 111, 240, 2, 0, 16, 189, 112,
-        181, 4, 70, 250, 247, 132, 252, 163, 107, 5, 70, 147, 248, 44, 49, 155,
-        179, 0, 35, 196, 248, 124, 49, 128, 248, 127, 51, 79, 244, 122, 115,
-        192, 248, 84, 51, 100, 35, 192, 248, 92, 51, 3, 35, 192, 248, 88, 51,
-        20, 35, 192, 248, 96, 51, 55, 35, 128, 248, 120, 51, 128, 248, 121,
-        51, 97, 35, 128, 248, 118, 51, 128, 248, 119, 51, 128, 248, 116, 51,
-        128, 248, 117, 51, 64, 246, 87, 33, 32, 70, 255, 34, 248, 247, 87, 253,
-        149, 248, 119, 51, 32, 70, 27, 2, 64, 246, 87, 33, 79, 244, 127, 66,
-        248, 247, 77, 253, 163, 107, 27, 106, 197, 248, 104, 51, 32, 70, 1,
-        34, 0, 35, 79, 244, 48, 97, 248, 247, 66, 253, 32, 70, 2, 34, 0, 35,
-        79, 244, 48, 97, 248, 247, 59, 253, 32, 70, 4, 34, 0, 35, 79, 244, 48,
-        97, 248, 247, 52, 253, 32, 70, 8, 34, 0, 35, 79, 244, 48, 97, 248, 247,
-        45, 253, 240, 34, 32, 70, 19, 70, 79, 244, 48, 97, 248, 247, 38, 253,
-        79, 244, 112, 98, 32, 70, 19, 70, 79, 244, 48, 97, 248, 247, 30, 253,
-        32, 70, 0, 35, 79, 244, 48, 97, 79, 244, 128, 82, 248, 247, 22, 253,
-        32, 70, 1, 34, 0, 35, 64, 246, 7, 49, 248, 247, 15, 253, 32, 70, 6,
-        34, 4, 35, 64, 246, 7, 49, 248, 247, 8, 253, 32, 70, 56, 34, 8, 35,
-        64, 246, 7, 49, 248, 247, 1, 253, 32, 70, 0, 35, 64, 246, 7, 49, 79,
-        244, 224, 114, 248, 247, 249, 252, 32, 70, 48, 34, 16, 35, 64, 246,
-        11, 49, 248, 247, 242, 252, 64, 34, 32, 70, 19, 70, 64, 246, 11, 49,
-        248, 247, 235, 252, 32, 70, 64, 246, 11, 49, 79, 244, 240, 98, 79, 244,
-        128, 99, 248, 247, 226, 252, 32, 70, 64, 246, 11, 49, 79, 244, 240,
-        66, 79, 244, 0, 83, 248, 247, 217, 252, 32, 70, 64, 246, 12, 49, 79,
-        246, 255, 114, 79, 244, 128, 83, 248, 247, 208, 252, 32, 70, 64, 246,
-        13, 49, 79, 246, 255, 114, 79, 244, 80, 67, 248, 247, 199, 252, 32,
-        70, 64, 246, 14, 49, 79, 246, 255, 114, 79, 244, 120, 67, 248, 247,
-        190, 252, 32, 70, 16, 35, 64, 246, 15, 49, 79, 246, 255, 114, 248, 247,
-        182, 252, 32, 70, 79, 244, 49, 97, 79, 246, 255, 114, 79, 244, 120,
-        67, 248, 247, 173, 252, 32, 70, 64, 246, 17, 49, 79, 246, 255, 114,
-        79, 244, 125, 67, 248, 247, 164, 252, 32, 70, 15, 34, 0, 35, 64, 246,
-        18, 49, 248, 247, 157, 252, 32, 70, 240, 34, 0, 35, 64, 246, 18, 49,
-        248, 247, 150, 252, 32, 70, 0, 35, 64, 246, 18, 49, 79, 244, 112, 98,
-        248, 247, 142, 252, 32, 70, 15, 34, 0, 35, 64, 246, 19, 49, 248, 247,
-        135, 252, 32, 70, 240, 34, 0, 35, 64, 246, 19, 49, 248, 247, 128, 252,
-        32, 70, 0, 35, 64, 246, 19, 49, 79, 244, 112, 98, 248, 247, 120, 252,
-        32, 70, 15, 34, 0, 35, 64, 246, 20, 49, 248, 247, 113, 252, 32, 70,
-        240, 34, 0, 35, 64, 246, 20, 49, 248, 247, 106, 252, 32, 70, 0, 35,
-        64, 246, 20, 49, 79, 244, 112, 98, 248, 247, 98, 252, 15, 34, 32, 70,
-        0, 35, 64, 246, 21, 49, 248, 247, 91, 252, 32, 70, 240, 34, 0, 35, 64,
-        246, 21, 49, 248, 247, 84, 252, 32, 70, 0, 35, 64, 246, 21, 49, 79,
-        244, 112, 98, 248, 247, 76, 252, 32, 70, 3, 34, 1, 35, 64, 246, 22,
-        49, 248, 247, 69, 252, 32, 70, 12, 34, 0, 35, 64, 246, 22, 49, 248,
-        247, 62, 252, 32, 70, 48, 34, 16, 35, 64, 246, 22, 49, 248, 247, 55,
-        252, 32, 70, 192, 34, 64, 35, 64, 246, 22, 49, 248, 247, 48, 252, 32,
-        70, 0, 35, 64, 246, 22, 49, 79, 244, 64, 114, 248, 247, 40, 252, 32,
-        70, 64, 246, 22, 49, 79, 244, 64, 98, 79, 244, 128, 99, 248, 247, 31,
-        252, 32, 70, 3, 34, 0, 35, 64, 246, 23, 49, 248, 247, 24, 252, 32, 70,
-        12, 34, 64, 246, 23, 49, 79, 246, 252, 115, 248, 247, 16, 252, 32, 70,
-        48, 34, 64, 246, 23, 49, 79, 246, 240, 115, 248, 247, 8, 252, 32, 70,
-        192, 34, 0, 35, 64, 246, 23, 49, 248, 247, 1, 252, 32, 70, 64, 246,
-        23, 49, 79, 244, 64, 114, 79, 244, 127, 67, 248, 247, 248, 251, 32,
-        70, 64, 246, 23, 49, 79, 244, 64, 98, 79, 244, 124, 67, 248, 247, 239,
-        251, 32, 70, 1, 34, 0, 35, 64, 246, 6, 49, 248, 247, 232, 251, 31, 34,
-        32, 70, 19, 70, 64, 246, 5, 49, 248, 247, 225, 251, 79, 246, 255, 114,
-        32, 70, 19, 70, 64, 246, 4, 49, 248, 247, 217, 251, 79, 246, 255, 114,
-        32, 70, 19, 70, 64, 246, 8, 49, 248, 247, 209, 251, 32, 70, 64, 246,
-        9, 49, 79, 246, 255, 114, 71, 246, 255, 115, 248, 247, 200, 251, 32,
-        70, 8, 35, 64, 246, 10, 49, 79, 246, 255, 114, 248, 247, 192, 251, 32,
-        70, 63, 35, 64, 246, 2, 49, 79, 246, 255, 114, 248, 247, 184, 251, 32,
-        70, 255, 35, 64, 246, 3, 49, 79, 246, 255, 114, 248, 247, 176, 251,
-        15, 34, 32, 70, 19, 70, 64, 246, 1, 49, 248, 247, 169, 251, 240, 34,
-        32, 70, 19, 70, 64, 246, 1, 49, 248, 247, 162, 251, 1, 34, 32, 70, 79,
-        244, 48, 97, 19, 70, 189, 232, 112, 64, 248, 247, 153, 187, 56, 181,
-        54, 33, 4, 70, 0, 35, 79, 244, 224, 66, 208, 248, 248, 80, 248, 247,
-        84, 251, 54, 33, 32, 70, 79, 244, 224, 98, 79, 244, 128, 99, 248, 247,
-        76, 251, 54, 33, 112, 34, 64, 35, 32, 70, 248, 247, 70, 251, 54, 33,
-        7, 34, 0, 35, 32, 70, 248, 247, 64, 251, 53, 33, 0, 35, 32, 70, 79,
-        244, 224, 66, 248, 247, 57, 251, 79, 244, 224, 98, 53, 33, 19, 70, 32,
-        70, 248, 247, 50, 251, 53, 33, 0, 35, 32, 70, 79, 244, 0, 66, 248, 247,
-        43, 251, 53, 33, 126, 34, 32, 35, 32, 70, 248, 247, 37, 251, 58, 33,
-        30, 34, 16, 35, 32, 70, 248, 247, 31, 251, 58, 33, 0, 35, 32, 70, 1,
-        34, 248, 247, 25, 251, 1, 34, 32, 70, 0, 35, 64, 242, 10, 81, 248, 247,
-        77, 251, 15, 34, 4, 35, 32, 70, 64, 242, 113, 65, 248, 247, 70, 251,
-        240, 34, 0, 35, 32, 70, 64, 242, 113, 65, 248, 247, 63, 251, 127, 34,
-        65, 35, 32, 70, 64, 242, 31, 65, 248, 247, 56, 251, 255, 34, 12, 35,
-        32, 70, 79, 244, 132, 97, 248, 247, 49, 251, 255, 34, 0, 35, 32, 70,
-        79, 244, 188, 97, 248, 247, 42, 251, 32, 70, 79, 244, 188, 97, 79, 244,
-        127, 66, 79, 244, 64, 83, 248, 247, 33, 251, 255, 34, 39, 35, 32, 70,
-        64, 242, 225, 81, 248, 247, 26, 251, 32, 70, 64, 242, 225, 81, 79, 244,
-        127, 66, 79, 244, 28, 83, 248, 247, 17, 251, 255, 34, 39, 35, 32, 70,
-        64, 242, 226, 81, 248, 247, 10, 251, 32, 70, 64, 242, 226, 81, 79, 244,
-        127, 66, 79, 244, 240, 83, 248, 247, 1, 251, 255, 34, 30, 35, 32, 70,
-        64, 242, 227, 81, 248, 247, 250, 250, 32, 70, 64, 242, 227, 81, 79,
-        244, 127, 66, 79, 244, 240, 83, 248, 247, 241, 250, 32, 70, 64, 242,
-        228, 81, 255, 34, 30, 35, 248, 247, 234, 250, 255, 34, 21, 35, 32, 70,
-        64, 246, 150, 33, 248, 247, 227, 250, 32, 70, 64, 246, 150, 33, 79,
-        244, 127, 66, 79, 244, 64, 99, 248, 247, 218, 250, 255, 34, 0, 35, 32,
-        70, 64, 246, 151, 33, 248, 247, 211, 250, 127, 34, 0, 35, 32, 70, 64,
-        242, 229, 81, 248, 247, 204, 250, 32, 70, 64, 242, 229, 81, 79, 244,
-        126, 82, 79, 244, 240, 99, 248, 247, 195, 250, 127, 34, 21, 35, 32,
-        70, 64, 242, 230, 81, 248, 247, 188, 250, 0, 35, 32, 70, 64, 242, 230,
-        81, 79, 244, 126, 82, 248, 247, 180, 250, 127, 34, 0, 35, 32, 70, 64,
-        242, 231, 81, 248, 247, 173, 250, 32, 70, 64, 242, 231, 81, 79, 244,
-        126, 82, 79, 244, 24, 99, 248, 247, 164, 250, 127, 34, 0, 35, 32, 70,
-        79, 244, 189, 97, 248, 247, 157, 250, 0, 35, 32, 70, 79, 244, 189, 97,
-        79, 244, 126, 82, 248, 247, 149, 250, 127, 34, 0, 35, 32, 70, 64, 242,
-        233, 81, 248, 247, 142, 250, 32, 70, 64, 242, 233, 81, 79, 244, 126,
-        82, 79, 244, 16, 99, 248, 247, 133, 250, 127, 34, 22, 35, 32, 70, 64,
-        246, 145, 33, 248, 247, 126, 250, 32, 70, 64, 246, 145, 33, 79, 244,
-        126, 82, 79, 244, 72, 99, 248, 247, 117, 250, 255, 34, 54, 35, 32, 70,
-        64, 242, 250, 81, 248, 247, 110, 250, 255, 34, 0, 35, 32, 70, 64, 242,
-        245, 81, 248, 247, 103, 250, 32, 70, 64, 242, 245, 81, 79, 244, 127,
-        66, 79, 244, 52, 83, 248, 247, 94, 250, 255, 34, 36, 35, 32, 70, 64,
-        242, 246, 81, 248, 247, 87, 250, 32, 70, 64, 242, 246, 81, 79, 244,
-        127, 66, 79, 244, 16, 83, 248, 247, 78, 250, 255, 34, 36, 35, 32, 70,
-        64, 242, 247, 81, 248, 247, 71, 250, 32, 70, 64, 242, 247, 81, 79, 244,
-        127, 66, 79, 244, 16, 83, 248, 247, 62, 250, 255, 34, 36, 35, 32, 70,
-        79, 244, 191, 97, 248, 247, 55, 250, 32, 70, 79, 244, 191, 97, 79, 244,
-        127, 66, 79, 244, 16, 83, 248, 247, 46, 250, 255, 34, 36, 35, 32, 70,
-        64, 242, 249, 81, 248, 247, 39, 250, 255, 34, 27, 35, 32, 70, 64, 246,
-        143, 33, 248, 247, 32, 250, 32, 70, 64, 246, 143, 33, 79, 244, 127,
-        66, 79, 244, 144, 83, 248, 247, 23, 250, 255, 34, 6, 35, 32, 70, 79,
-        244, 41, 97, 248, 247, 16, 250, 32, 70, 64, 242, 255, 81, 79, 244, 126,
-        82, 0, 35, 248, 247, 8, 250, 127, 34, 32, 70, 40, 35, 64, 242, 209,
-        81, 248, 247, 1, 250, 32, 70, 64, 242, 209, 81, 79, 244, 126, 82, 79,
-        244, 136, 83, 248, 247, 248, 249, 127, 34, 0, 35, 32, 70, 64, 242, 210,
-        81, 248, 247, 241, 249, 0, 35, 32, 70, 64, 242, 210, 81, 79, 244, 126,
-        82, 248, 247, 233, 249, 127, 34, 0, 35, 32, 70, 64, 242, 211, 81, 248,
-        247, 226, 249, 0, 35, 32, 70, 64, 242, 211, 81, 79, 244, 126, 82, 248,
-        247, 218, 249, 127, 34, 0, 35, 32, 70, 64, 242, 212, 81, 248, 247, 211,
-        249, 0, 35, 32, 70, 64, 242, 212, 81, 79, 244, 126, 82, 248, 247, 203,
-        249, 127, 34, 5, 35, 32, 70, 64, 246, 148, 33, 248, 247, 196, 249, 32,
-        70, 64, 246, 148, 33, 79, 244, 126, 82, 79, 244, 160, 99, 248, 247,
-        187, 249, 127, 34, 18, 35, 32, 70, 64, 246, 149, 33, 248, 247, 180,
-        249, 32, 70, 64, 242, 249, 81, 79, 244, 127, 66, 79, 244, 64, 83, 248,
-        247, 171, 249, 32, 70, 64, 242, 237, 81, 79, 244, 127, 66, 79, 244,
-        122, 67, 248, 247, 162, 249, 32, 70, 64, 242, 228, 81, 79, 244, 112,
-        98, 79, 244, 128, 115, 248, 247, 153, 249, 24, 34, 16, 35, 32, 70, 64,
-        242, 101, 81, 248, 247, 146, 249, 7, 34, 19, 70, 32, 70, 48, 33, 248,
-        247, 140, 249, 32, 70, 64, 242, 113, 65, 79, 244, 127, 66, 79, 244,
-        150, 67, 248, 247, 131, 249, 63, 34, 32, 70, 64, 242, 234, 81, 79, 246,
-        250, 115, 248, 247, 123, 249, 32, 70, 64, 242, 234, 81, 79, 244, 127,
-        66, 79, 244, 119, 67, 248, 247, 114, 249, 255, 34, 0, 35, 32, 70, 64,
-        242, 55, 65, 248, 247, 107, 249, 32, 70, 64, 242, 41, 65, 79, 244, 248,
-        66, 79, 244, 144, 67, 248, 247, 98, 249, 255, 34, 81, 35, 32, 70, 64,
-        242, 114, 65, 248, 247, 91, 249, 32, 70, 64, 242, 66, 81, 79, 244, 127,
-        66, 79, 244, 168, 67, 248, 247, 82, 249, 255, 34, 23, 35, 32, 70, 64,
-        242, 52, 81, 248, 247, 75, 249, 255, 34, 0, 35, 32, 70, 64, 242, 213,
-        81, 248, 247, 68, 249, 32, 70, 79, 244, 170, 97, 64, 242, 255, 50, 64,
-        242, 105, 19, 248, 247, 59, 249, 64, 35, 32, 70, 64, 246, 82, 33, 79,
-        244, 255, 82, 248, 247, 51, 249, 255, 34, 2, 35, 32, 70, 64, 246, 83,
-        33, 248, 247, 44, 249, 15, 34, 1, 35, 32, 70, 64, 246, 88, 33, 248,
-        247, 37, 249, 255, 34, 46, 35, 32, 70, 64, 242, 66, 81, 248, 247, 30,
-        249, 0, 35, 32, 70, 64, 242, 65, 65, 79, 244, 127, 66, 248, 247, 22,
-        249, 255, 34, 32, 70, 64, 242, 66, 65, 98, 35, 248, 247, 15, 249, 32,
-        70, 64, 242, 213, 81, 79, 244, 127, 66, 79, 244, 190, 67, 248, 247,
-        6, 249, 32, 70, 64, 246, 40, 33, 79, 244, 127, 66, 79, 244, 190, 67,
-        248, 247, 253, 248, 32, 70, 64, 246, 40, 33, 255, 34, 95, 35, 248, 247,
-        246, 248, 32, 70, 64, 246, 41, 33, 79, 244, 127, 66, 79, 244, 190, 67,
-        248, 247, 237, 248, 32, 70, 64, 246, 41, 33, 255, 34, 95, 35, 248, 247,
-        230, 248, 32, 70, 64, 246, 85, 33, 255, 34, 94, 35, 248, 247, 223, 248,
-        149, 248, 44, 54, 32, 70, 64, 246, 79, 33, 255, 34, 211, 177, 97, 35,
-        248, 247, 213, 248, 79, 244, 128, 114, 19, 70, 32, 70, 64, 246, 179,
-        17, 248, 247, 205, 248, 32, 70, 64, 242, 85, 97, 79, 244, 112, 66, 79,
-        244, 160, 67, 248, 247, 196, 248, 32, 70, 64, 242, 85, 97, 64, 246,
-        255, 114, 0, 35, 0, 224, 91, 35, 248, 247, 186, 248, 212, 248, 248,
-        48, 32, 70, 147, 248, 56, 62, 11, 177, 104, 33, 0, 224, 97, 33, 10,
-        70, 251, 247, 115, 249, 32, 70, 250, 247, 150, 255, 32, 70, 255, 247,
-        34, 251, 32, 70, 189, 232, 56, 64, 251, 247, 28, 186, 112, 181, 5, 70,
-        249, 247, 161, 255, 171, 107, 4, 70, 79, 244, 135, 113, 24, 105, 3,
-        240, 139, 249, 212, 248, 100, 35, 196, 248, 100, 3, 149, 248, 25, 29,
-        213, 248, 124, 49, 41, 179, 170, 107, 17, 106, 196, 248, 104, 19, 217,
-        7, 64, 241, 251, 128, 35, 240, 1, 3, 16, 105, 0, 33, 197, 248, 124,
-        49, 3, 240, 166, 249, 148, 248, 118, 51, 132, 248, 116, 51, 148, 248,
-        119, 51, 132, 248, 117, 51, 171, 107, 24, 105, 3, 240, 112, 249, 148,
-        248, 118, 51, 40, 70, 64, 246, 87, 33, 255, 34, 248, 247, 108, 248,
-        148, 248, 119, 51, 202, 224, 130, 26, 219, 7, 146, 178, 4, 212, 212,
-        248, 84, 51, 154, 66, 4, 219, 7, 224, 212, 248, 92, 51, 154, 66, 3,
-        221, 171, 107, 27, 106, 196, 248, 104, 51, 213, 248, 124, 49, 222, 7,
-        8, 213, 212, 248, 92, 51, 154, 66, 1, 221, 1, 35, 0, 224, 0, 35, 132,
-        248, 127, 51, 148, 249, 127, 51, 83, 177, 148, 248, 116, 51, 3, 59,
-        132, 248, 116, 51, 148, 248, 117, 51, 3, 59, 132, 248, 117, 51, 3, 224,
-        213, 248, 124, 49, 216, 7, 42, 213, 149, 248, 26, 61, 187, 177, 148,
-        248, 116, 35, 195, 241, 10, 3, 219, 178, 154, 66, 56, 191, 132, 248,
-        116, 51, 132, 248, 125, 51, 149, 248, 26, 61, 148, 248, 117, 35, 195,
-        241, 10, 3, 219, 178, 154, 66, 132, 248, 126, 51, 56, 191, 132, 248,
-        117, 51, 148, 248, 120, 51, 148, 248, 116, 35, 154, 66, 152, 191, 132,
-        248, 116, 51, 148, 248, 117, 35, 148, 248, 121, 51, 154, 66, 152, 191,
-        132, 248, 117, 51, 171, 107, 26, 106, 212, 248, 104, 51, 211, 26, 213,
-        248, 124, 33, 209, 7, 13, 212, 212, 248, 88, 19, 139, 66, 63, 219, 66,
-        240, 1, 2, 1, 33, 197, 248, 124, 33, 132, 248, 127, 19, 171, 107, 24,
-        105, 47, 224, 212, 248, 96, 35, 147, 66, 49, 219, 0, 35, 132, 248, 127,
-        51, 148, 248, 116, 51, 148, 248, 118, 35, 3, 51, 219, 178, 148, 248,
-        117, 19, 147, 66, 132, 248, 116, 51, 40, 191, 132, 248, 116, 35, 148,
-        248, 119, 51, 3, 49, 201, 178, 153, 66, 132, 248, 117, 19, 148, 248,
-        116, 19, 40, 191, 132, 248, 117, 51, 145, 66, 3, 210, 148, 248, 117,
-        35, 154, 66, 10, 211, 213, 248, 124, 49, 0, 33, 35, 240, 1, 3, 197,
-        248, 124, 49, 171, 107, 24, 105, 3, 240, 235, 248, 171, 107, 27, 106,
-        196, 248, 104, 51, 40, 70, 64, 246, 87, 33, 148, 248, 116, 99, 247,
-        247, 78, 248, 192, 178, 134, 66, 10, 209, 40, 70, 64, 246, 87, 33, 148,
-        248, 117, 99, 247, 247, 68, 248, 0, 10, 128, 178, 134, 66, 30, 208,
-        171, 107, 24, 105, 3, 240, 164, 248, 148, 248, 116, 51, 40, 70, 64,
-        246, 87, 33, 255, 34, 247, 247, 160, 255, 148, 248, 117, 51, 27, 2,
-        40, 70, 64, 246, 87, 33, 79, 244, 127, 66, 247, 247, 150, 255, 40, 70,
-        251, 247, 12, 249, 171, 107, 24, 105, 189, 232, 112, 64, 3, 240, 143,
-        184, 112, 189, 56, 181, 12, 70, 0, 33, 5, 70, 254, 247, 48, 250, 40,
-        70, 33, 70, 189, 232, 56, 64, 253, 247, 195, 191, 112, 181, 208, 248,
-        248, 80, 0, 38, 4, 70, 149, 248, 233, 20, 133, 248, 202, 100, 255, 247,
-        233, 255, 32, 70, 181, 248, 234, 20, 254, 247, 26, 250, 32, 70, 181,
-        248, 238, 36, 64, 246, 130, 1, 247, 247, 8, 248, 32, 70, 181, 248, 236,
-        36, 64, 246, 7, 1, 247, 247, 1, 248, 181, 248, 246, 36, 32, 70, 64,
-        242, 49, 97, 246, 247, 250, 255, 32, 70, 149, 248, 232, 20, 253, 247,
-        219, 252, 32, 70, 181, 248, 204, 36, 64, 242, 76, 65, 246, 247, 238,
-        255, 32, 70, 181, 248, 206, 36, 64, 242, 77, 65, 246, 247, 231, 255,
-        32, 70, 181, 248, 208, 36, 79, 244, 150, 97, 246, 247, 224, 255, 32,
-        70, 181, 248, 210, 36, 64, 242, 177, 65, 246, 247, 217, 255, 32, 70,
-        181, 248, 212, 36, 64, 242, 249, 65, 246, 247, 210, 255, 32, 70, 181,
-        248, 214, 36, 64, 242, 250, 65, 246, 247, 203, 255, 32, 70, 181, 248,
-        216, 36, 64, 246, 56, 17, 246, 247, 196, 255, 32, 70, 181, 248, 218,
-        36, 64, 246, 57, 17, 246, 247, 189, 255, 32, 70, 181, 248, 220, 36,
-        64, 242, 61, 81, 246, 247, 182, 255, 32, 70, 181, 248, 222, 36, 64,
-        242, 60, 81, 246, 247, 175, 255, 32, 70, 181, 248, 224, 36, 64, 242,
-        113, 81, 246, 247, 168, 255, 32, 70, 181, 248, 226, 36, 79, 244, 174,
-        97, 246, 247, 161, 255, 32, 70, 181, 248, 228, 36, 64, 242, 115, 81,
-        246, 247, 154, 255, 32, 70, 181, 248, 230, 36, 64, 242, 114, 81, 246,
-        247, 147, 255, 32, 70, 181, 248, 250, 36, 64, 246, 211, 17, 246, 247,
-        140, 255, 32, 70, 181, 248, 248, 36, 64, 242, 218, 97, 246, 247, 133,
-        255, 32, 70, 181, 248, 240, 36, 64, 246, 172, 17, 246, 247, 126, 255,
-        32, 70, 181, 248, 242, 36, 64, 246, 177, 17, 246, 247, 119, 255, 32,
-        70, 181, 248, 244, 36, 64, 246, 121, 17, 246, 247, 112, 255, 32, 70,
-        181, 248, 252, 36, 64, 246, 165, 17, 246, 247, 105, 255, 32, 70, 49,
-        70, 50, 70, 51, 70, 189, 232, 112, 64, 251, 247, 211, 186, 48, 181,
-        6, 34, 133, 176, 19, 70, 129, 33, 4, 70, 208, 248, 248, 80, 247, 247,
-        125, 254, 3, 34, 19, 70, 32, 70, 62, 33, 247, 247, 119, 254, 213, 248,
-        84, 21, 32, 70, 255, 247, 33, 255, 148, 248, 69, 22, 3, 35, 25, 177,
-        0, 33, 141, 232, 10, 0, 2, 224, 4, 34, 0, 145, 1, 146, 2, 147, 32, 70,
-        10, 70, 11, 70, 3, 145, 250, 247, 78, 254, 32, 70, 1, 33, 5, 176, 189,
-        232, 48, 64, 250, 247, 158, 190, 56, 181, 208, 248, 248, 64, 1, 33,
-        180, 249, 114, 37, 5, 70, 251, 247, 132, 251, 0, 35, 132, 248, 202,
-        52, 40, 70, 180, 248, 66, 37, 64, 242, 116, 81, 246, 247, 32, 255, 40,
-        70, 180, 248, 68, 37, 64, 242, 117, 81, 246, 247, 25, 255, 40, 70, 180,
-        248, 70, 37, 64, 246, 165, 17, 246, 247, 18, 255, 40, 70, 180, 248,
-        204, 36, 64, 242, 76, 65, 246, 247, 11, 255, 40, 70, 180, 248, 206,
-        36, 64, 242, 77, 65, 246, 247, 4, 255, 40, 70, 180, 248, 208, 36, 79,
-        244, 150, 97, 246, 247, 253, 254, 40, 70, 180, 248, 210, 36, 64, 242,
-        177, 65, 246, 247, 246, 254, 40, 70, 180, 248, 212, 36, 64, 242, 249,
-        65, 246, 247, 239, 254, 40, 70, 180, 248, 214, 36, 64, 242, 250, 65,
-        246, 247, 232, 254, 40, 70, 180, 248, 216, 36, 64, 246, 56, 17, 246,
-        247, 225, 254, 40, 70, 180, 248, 218, 36, 64, 246, 57, 17, 246, 247,
-        218, 254, 40, 70, 180, 248, 220, 36, 64, 242, 61, 81, 246, 247, 211,
-        254, 40, 70, 180, 248, 222, 36, 64, 242, 60, 81, 246, 247, 204, 254,
-        40, 70, 180, 248, 224, 36, 64, 242, 113, 81, 246, 247, 197, 254, 40,
-        70, 180, 248, 226, 36, 79, 244, 174, 97, 246, 247, 190, 254, 40, 70,
-        180, 248, 228, 36, 64, 242, 115, 81, 246, 247, 183, 254, 180, 248, 230,
-        36, 40, 70, 64, 242, 114, 81, 246, 247, 176, 254, 40, 70, 148, 248,
-        232, 20, 253, 247, 145, 251, 40, 70, 148, 248, 233, 20, 255, 247, 123,
-        254, 40, 70, 180, 248, 234, 20, 254, 247, 172, 248, 40, 70, 180, 248,
-        238, 36, 64, 246, 130, 1, 246, 247, 154, 254, 40, 70, 180, 248, 236,
-        36, 64, 246, 7, 1, 246, 247, 147, 254, 40, 70, 180, 248, 240, 36, 64,
-        246, 172, 17, 246, 247, 140, 254, 40, 70, 180, 248, 242, 36, 64, 246,
-        177, 17, 246, 247, 133, 254, 40, 70, 180, 248, 244, 36, 64, 246, 121,
-        17, 246, 247, 126, 254, 40, 70, 180, 248, 246, 36, 64, 242, 49, 97,
-        246, 247, 119, 254, 40, 70, 180, 248, 248, 36, 64, 242, 218, 97, 246,
-        247, 112, 254, 180, 248, 250, 36, 40, 70, 64, 246, 211, 17, 189, 232,
-        56, 64, 246, 247, 103, 190, 0, 0, 16, 181, 40, 34, 4, 70, 9, 73, 247,
-        247, 211, 253, 32, 70, 5, 34, 7, 73, 247, 247, 206, 253, 32, 70, 6,
-        73, 6, 34, 247, 247, 201, 253, 32, 70, 40, 33, 189, 232, 16, 64, 255,
-        247, 37, 190, 212, 251, 3, 0, 36, 252, 3, 0, 162, 251, 3, 0, 255, 247,
-        226, 191, 16, 181, 4, 70, 254, 247, 250, 251, 32, 70, 189, 232, 16,
-        64, 255, 247, 245, 191, 56, 181, 64, 242, 164, 65, 4, 70, 208, 248,
-        248, 80, 246, 247, 44, 254, 64, 11, 128, 178, 7, 40, 2, 208, 149, 248,
-        69, 4, 7, 224, 32, 70, 64, 242, 115, 65, 246, 247, 32, 254, 192, 5,
-        192, 13, 64, 8, 64, 178, 56, 189, 45, 233, 240, 79, 208, 248, 252, 48,
-        135, 176, 211, 248, 32, 49, 4, 70, 3, 240, 1, 3, 131, 240, 1, 2, 15,
-        70, 208, 248, 248, 96, 1, 146, 27, 177, 131, 107, 24, 105, 2, 240, 110,
-        254, 32, 70, 255, 247, 207, 255, 64, 242, 127, 65, 128, 70, 32, 70,
-        246, 247, 253, 253, 64, 242, 117, 81, 129, 70, 32, 70, 246, 247, 247,
-        253, 64, 242, 116, 81, 2, 144, 32, 70, 246, 247, 241, 253, 64, 242,
-        218, 97, 3, 144, 32, 70, 246, 247, 235, 253, 64, 246, 248, 17, 4, 144,
-        32, 70, 246, 247, 229, 253, 64, 242, 12, 81, 5, 144, 32, 70, 246, 247,
-        223, 253, 64, 246, 172, 17, 197, 5, 32, 70, 246, 247, 217, 253, 79,
-        244, 136, 97, 130, 70, 32, 70, 246, 247, 211, 253, 64, 246, 172, 17,
-        79, 244, 112, 114, 79, 244, 128, 115, 131, 70, 32, 70, 247, 247, 53,
-        253, 1, 34, 19, 70, 32, 70, 64, 246, 172, 17, 247, 247, 46, 253, 0,
-        35, 1, 34, 32, 70, 79, 244, 136, 97, 247, 247, 39, 253, 27, 34, 32,
-        70, 69, 73, 247, 247, 52, 253, 95, 250, 136, 243, 91, 0, 32, 70, 64,
-        242, 164, 65, 64, 242, 255, 18, 247, 247, 24, 253, 64, 242, 255, 18,
-        9, 244, 255, 115, 32, 70, 79, 244, 144, 97, 247, 247, 15, 253, 57, 70,
-        32, 70, 251, 247, 104, 250, 10, 32, 215, 243, 113, 245, 32, 34, 32,
-        70, 79, 244, 154, 97, 19, 70, 247, 247, 1, 253, 10, 32, 215, 243, 103,
-        245, 237, 13, 1, 47, 32, 70, 3, 209, 250, 247, 209, 253, 7, 70, 9, 224,
-        64, 242, 117, 65, 246, 247, 134, 253, 199, 5, 255, 13, 255, 47, 136,
-        191, 167, 245, 0, 119, 32, 70, 252, 247, 192, 248, 32, 70, 64, 246,
-        172, 17, 82, 70, 246, 247, 130, 253, 32, 70, 79, 244, 136, 97, 90, 70,
-        246, 247, 124, 253, 32, 70, 64, 242, 117, 81, 2, 154, 246, 247, 118,
-        253, 32, 70, 64, 242, 116, 81, 3, 154, 246, 247, 112, 253, 32, 70, 64,
-        242, 218, 97, 4, 154, 246, 247, 106, 253, 32, 70, 64, 246, 248, 17,
-        5, 154, 246, 247, 100, 253, 43, 70, 32, 70, 64, 242, 12, 81, 64, 242,
-        255, 18, 247, 247, 189, 252, 182, 248, 2, 84, 79, 246, 254, 115, 109,
-        0, 43, 64, 32, 70, 64, 242, 164, 65, 64, 242, 255, 18, 247, 247, 176,
-        252, 182, 248, 4, 84, 79, 246, 254, 115, 109, 0, 43, 64, 32, 70, 79,
-        244, 144, 97, 64, 242, 255, 18, 247, 247, 163, 252, 1, 155, 27, 185,
-        163, 107, 24, 105, 2, 240, 159, 253, 56, 178, 7, 176, 189, 232, 240,
-        143, 122, 248, 3, 0, 112, 181, 208, 248, 248, 80, 1, 38, 133, 248, 202,
-        100, 64, 242, 76, 65, 4, 70, 246, 247, 32, 253, 64, 242, 77, 65, 165,
-        248, 204, 4, 32, 70, 246, 247, 25, 253, 79, 244, 150, 97, 165, 248,
-        206, 4, 32, 70, 246, 247, 18, 253, 64, 242, 177, 65, 165, 248, 208,
-        4, 32, 70, 246, 247, 11, 253, 64, 242, 249, 65, 165, 248, 210, 4, 32,
-        70, 246, 247, 4, 253, 64, 242, 250, 65, 165, 248, 212, 4, 32, 70, 246,
-        247, 253, 252, 64, 246, 56, 17, 165, 248, 214, 4, 32, 70, 246, 247,
-        246, 252, 64, 246, 57, 17, 165, 248, 216, 4, 32, 70, 246, 247, 239,
-        252, 64, 242, 61, 81, 165, 248, 218, 4, 32, 70, 246, 247, 232, 252,
-        64, 242, 60, 81, 165, 248, 220, 4, 32, 70, 246, 247, 225, 252, 64, 242,
-        113, 81, 165, 248, 222, 4, 32, 70, 246, 247, 218, 252, 79, 244, 174,
-        97, 165, 248, 224, 4, 32, 70, 246, 247, 211, 252, 64, 242, 115, 81,
-        165, 248, 226, 4, 32, 70, 246, 247, 204, 252, 64, 242, 114, 81, 165,
-        248, 228, 4, 32, 70, 246, 247, 197, 252, 64, 242, 218, 97, 165, 248,
-        230, 4, 32, 70, 246, 247, 190, 252, 165, 248, 248, 4, 32, 70, 252, 247,
-        187, 253, 133, 248, 232, 4, 32, 70, 255, 247, 128, 254, 64, 242, 164,
-        65, 133, 248, 233, 4, 32, 70, 246, 247, 173, 252, 32, 244, 254, 80,
-        32, 240, 63, 0, 165, 248, 234, 4, 0, 33, 32, 70, 253, 247, 185, 254,
-        32, 70, 64, 246, 7, 1, 246, 247, 158, 252, 64, 246, 130, 1, 165, 248,
-        236, 4, 32, 70, 246, 247, 151, 252, 50, 70, 165, 248, 238, 4, 0, 35,
-        32, 70, 64, 246, 7, 1, 247, 247, 250, 251, 32, 70, 8, 34, 0, 35, 64,
-        246, 130, 1, 247, 247, 243, 251, 79, 244, 0, 82, 32, 70, 19, 70, 64,
-        242, 76, 65, 247, 247, 235, 251, 79, 244, 0, 82, 19, 70, 32, 70, 64,
-        242, 77, 65, 247, 247, 227, 251, 32, 70, 64, 246, 172, 17, 246, 247,
-        114, 252, 64, 246, 177, 17, 165, 248, 240, 4, 32, 70, 246, 247, 107,
-        252, 64, 246, 121, 17, 165, 248, 242, 4, 32, 70, 246, 247, 100, 252,
-        50, 70, 165, 248, 244, 4, 51, 70, 32, 70, 64, 246, 172, 17, 247, 247,
-        199, 251, 50, 70, 51, 70, 32, 70, 64, 246, 121, 17, 247, 247, 192, 251,
-        32, 70, 64, 242, 49, 97, 246, 247, 79, 252, 4, 34, 165, 248, 246, 4,
-        19, 70, 32, 70, 64, 242, 49, 97, 247, 247, 178, 251, 16, 34, 19, 70,
-        32, 70, 64, 242, 49, 97, 247, 247, 171, 251, 32, 70, 0, 34, 64, 242,
-        218, 97, 246, 247, 68, 252, 8, 34, 32, 70, 19, 70, 64, 242, 218, 97,
-        247, 247, 158, 251, 32, 34, 32, 70, 19, 70, 64, 242, 218, 97, 247, 247,
-        151, 251, 79, 244, 128, 114, 19, 70, 32, 70, 64, 242, 218, 97, 247,
-        247, 143, 251, 32, 70, 64, 246, 211, 17, 246, 247, 30, 252, 0, 35, 165,
-        248, 250, 4, 64, 246, 211, 17, 32, 70, 79, 244, 0, 98, 247, 247, 128,
-        251, 0, 35, 32, 70, 79, 244, 128, 82, 64, 246, 211, 17, 247, 247, 120,
-        251, 32, 70, 64, 246, 165, 17, 246, 247, 7, 252, 79, 244, 128, 82, 165,
-        248, 252, 4, 19, 70, 32, 70, 64, 246, 165, 17, 247, 247, 105, 251, 32,
-        70, 49, 70, 50, 70, 0, 35, 189, 232, 112, 64, 250, 247, 114, 191, 45,
-        233, 240, 79, 208, 248, 252, 48, 133, 176, 211, 248, 32, 49, 4, 70,
-        3, 240, 1, 3, 131, 240, 1, 2, 208, 248, 248, 112, 0, 146, 27, 177, 131,
-        107, 24, 105, 2, 240, 73, 252, 64, 242, 171, 65, 32, 70, 246, 247, 220,
-        251, 64, 242, 164, 65, 32, 70, 246, 247, 215, 251, 0, 244, 96, 64, 1,
-        144, 32, 70, 255, 247, 157, 253, 95, 250, 128, 251, 32, 70, 252, 247,
-        206, 252, 64, 242, 12, 81, 128, 70, 32, 70, 246, 247, 198, 251, 79,
-        244, 149, 97, 198, 5, 32, 70, 246, 247, 192, 251, 64, 242, 58, 65, 130,
-        70, 32, 70, 246, 247, 186, 251, 2, 169, 192, 243, 128, 25, 32, 70, 250,
-        247, 48, 252, 32, 70, 0, 33, 253, 247, 198, 253, 32, 70, 1, 33, 250,
-        247, 44, 250, 32, 70, 127, 33, 255, 247, 136, 251, 1, 34, 19, 70, 32,
-        70, 64, 242, 215, 65, 247, 247, 13, 251, 64, 34, 19, 70, 64, 242, 215,
-        65, 32, 70, 247, 247, 6, 251, 32, 70, 253, 247, 106, 250, 0, 33, 32,
-        70, 253, 247, 132, 248, 32, 70, 248, 247, 45, 255, 0, 34, 1, 33, 32,
-        70, 247, 247, 54, 253, 32, 70, 249, 247, 185, 249, 64, 242, 171, 65,
-        32, 70, 246, 247, 131, 251, 32, 70, 64, 242, 62, 97, 246, 247, 126,
-        251, 151, 248, 55, 54, 197, 5, 246, 13, 237, 13, 147, 179, 1, 34, 19,
-        70, 32, 70, 64, 242, 215, 65, 247, 247, 221, 250, 0, 35, 64, 242, 215,
-        65, 64, 34, 32, 70, 247, 247, 214, 250, 32, 70, 248, 247, 4, 255, 0,
-        34, 1, 33, 32, 70, 247, 247, 13, 253, 32, 70, 249, 247, 144, 249, 64,
-        242, 171, 65, 32, 70, 246, 247, 90, 251, 64, 242, 62, 97, 32, 70, 246,
-        247, 85, 251, 195, 5, 219, 13, 32, 70, 64, 242, 154, 65, 64, 242, 255,
-        18, 247, 247, 184, 250, 32, 70, 64, 242, 215, 65, 1, 34, 0, 35, 247,
-        247, 177, 250, 43, 70, 64, 242, 255, 18, 32, 70, 64, 242, 166, 65, 247,
-        247, 169, 250, 41, 70, 32, 70, 254, 247, 206, 249, 0, 35, 79, 244, 128,
-        66, 32, 70, 64, 242, 76, 65, 247, 247, 157, 250, 32, 70, 65, 70, 253,
-        247, 30, 248, 32, 70, 73, 70, 250, 247, 169, 249, 32, 70, 2, 169, 250,
-        247, 220, 251, 32, 70, 79, 244, 149, 97, 82, 70, 246, 247, 42, 251,
-        64, 242, 255, 18, 51, 70, 32, 70, 64, 242, 12, 81, 247, 247, 131, 250,
-        32, 70, 89, 70, 255, 247, 243, 250, 32, 70, 1, 153, 253, 247, 37, 253,
-        148, 249, 44, 81, 79, 246, 192, 115, 173, 1, 43, 64, 32, 70, 79, 244,
-        154, 97, 71, 246, 192, 114, 247, 247, 110, 250, 0, 155, 27, 185, 163,
-        107, 24, 105, 2, 240, 106, 251, 5, 176, 189, 232, 240, 143, 112, 181,
-        208, 248, 248, 80, 4, 70, 18, 34, 1, 38, 1, 33, 250, 247, 85, 255, 133,
-        248, 202, 100, 32, 70, 64, 242, 116, 81, 246, 247, 233, 250, 64, 242,
-        117, 81, 165, 248, 66, 5, 32, 70, 246, 247, 226, 250, 79, 244, 128,
-        66, 165, 248, 68, 5, 19, 70, 32, 70, 64, 242, 116, 81, 247, 247, 68,
-        250, 79, 244, 128, 98, 19, 70, 32, 70, 64, 242, 117, 81, 247, 247, 60,
-        250, 32, 70, 64, 242, 76, 65, 246, 247, 203, 250, 64, 242, 77, 65, 165,
-        248, 204, 4, 32, 70, 246, 247, 196, 250, 79, 244, 150, 97, 165, 248,
-        206, 4, 32, 70, 246, 247, 189, 250, 64, 242, 177, 65, 165, 248, 208,
-        4, 32, 70, 246, 247, 182, 250, 64, 242, 249, 65, 165, 248, 210, 4, 32,
-        70, 246, 247, 175, 250, 64, 242, 250, 65, 165, 248, 212, 4, 32, 70,
-        246, 247, 168, 250, 64, 246, 56, 17, 165, 248, 214, 4, 32, 70, 246,
-        247, 161, 250, 64, 246, 57, 17, 165, 248, 216, 4, 32, 70, 246, 247,
-        154, 250, 64, 242, 61, 81, 165, 248, 218, 4, 32, 70, 246, 247, 147,
-        250, 64, 242, 60, 81, 165, 248, 220, 4, 32, 70, 246, 247, 140, 250,
-        64, 242, 113, 81, 165, 248, 222, 4, 32, 70, 246, 247, 133, 250, 79,
-        244, 174, 97, 165, 248, 224, 4, 32, 70, 246, 247, 126, 250, 64, 242,
-        115, 81, 165, 248, 226, 4, 32, 70, 246, 247, 119, 250, 64, 242, 114,
-        81, 165, 248, 228, 4, 32, 70, 246, 247, 112, 250, 64, 242, 218, 97,
-        165, 248, 230, 4, 32, 70, 246, 247, 105, 250, 165, 248, 248, 4, 32,
-        70, 252, 247, 102, 251, 133, 248, 232, 4, 32, 70, 255, 247, 43, 252,
-        64, 242, 164, 65, 133, 248, 233, 4, 32, 70, 246, 247, 88, 250, 32, 244,
-        254, 80, 32, 240, 63, 0, 165, 248, 234, 4, 0, 33, 32, 70, 253, 247,
-        100, 252, 32, 70, 64, 246, 7, 1, 246, 247, 73, 250, 64, 246, 130, 1,
-        165, 248, 236, 4, 32, 70, 246, 247, 66, 250, 8, 34, 0, 35, 165, 248,
-        238, 4, 64, 246, 130, 1, 32, 70, 247, 247, 165, 249, 32, 70, 64, 246,
-        165, 17, 246, 247, 52, 250, 64, 246, 172, 17, 165, 248, 70, 5, 32, 70,
-        246, 247, 45, 250, 64, 246, 177, 17, 165, 248, 240, 4, 32, 70, 246,
-        247, 38, 250, 64, 246, 121, 17, 165, 248, 242, 4, 32, 70, 246, 247,
-        31, 250, 79, 244, 128, 82, 165, 248, 244, 4, 19, 70, 32, 70, 64, 246,
-        165, 17, 247, 247, 129, 249, 32, 70, 50, 70, 51, 70, 64, 246, 172, 17,
-        247, 247, 122, 249, 64, 35, 32, 70, 79, 244, 112, 114, 64, 246, 172,
-        17, 247, 247, 114, 249, 32, 70, 64, 242, 49, 97, 246, 247, 1, 250, 4,
-        34, 165, 248, 246, 4, 19, 70, 32, 70, 64, 242, 49, 97, 247, 247, 100,
-        249, 16, 34, 19, 70, 32, 70, 64, 242, 49, 97, 247, 247, 93, 249, 32,
-        70, 71, 246, 15, 2, 64, 242, 218, 97, 246, 247, 245, 249, 32, 70, 64,
-        246, 211, 17, 246, 247, 229, 249, 0, 35, 165, 248, 250, 4, 64, 246,
-        211, 17, 32, 70, 79, 244, 0, 98, 247, 247, 71, 249, 32, 70, 0, 35, 64,
-        246, 211, 17, 79, 244, 128, 82, 247, 247, 63, 249, 79, 244, 0, 82, 32,
-        70, 19, 70, 64, 242, 76, 65, 247, 247, 55, 249, 79, 244, 0, 82, 32,
-        70, 64, 242, 77, 65, 19, 70, 189, 232, 112, 64, 247, 247, 45, 185, 248,
-        181, 208, 248, 252, 48, 4, 70, 211, 248, 32, 49, 3, 240, 1, 3, 131,
-        240, 1, 5, 27, 177, 131, 107, 24, 105, 2, 240, 26, 250, 64, 242, 164,
-        65, 32, 70, 246, 247, 173, 249, 6, 70, 32, 70, 255, 247, 117, 251, 0,
-        33, 7, 70, 32, 70, 253, 247, 186, 251, 32, 70, 253, 247, 116, 248, 64,
-        242, 55, 97, 79, 244, 64, 66, 0, 35, 32, 70, 247, 247, 5, 249, 32, 70,
-        254, 247, 68, 248, 79, 244, 128, 66, 0, 35, 32, 70, 64, 242, 76, 65,
-        247, 247, 250, 248, 32, 70, 249, 178, 255, 247, 106, 249, 6, 244, 96,
-        65, 32, 70, 253, 247, 155, 251, 148, 249, 44, 97, 79, 246, 192, 115,
-        182, 1, 32, 70, 79, 244, 154, 97, 71, 246, 192, 114, 51, 64, 247, 247,
-        228, 248, 45, 185, 163, 107, 24, 105, 189, 232, 248, 64, 2, 240, 223,
-        185, 248, 189, 0, 0, 248, 181, 208, 248, 252, 48, 4, 70, 211, 248, 32,
-        49, 208, 248, 248, 80, 3, 240, 1, 3, 176, 248, 10, 97, 131, 240, 1,
-        7, 27, 177, 131, 107, 24, 105, 2, 240, 196, 249, 148, 248, 168, 17,
-        32, 70, 0, 41, 0, 240, 162, 128, 252, 247, 8, 254, 213, 248, 196, 52,
-        32, 70, 19, 177, 255, 247, 141, 255, 1, 224, 255, 247, 86, 253, 32,
-        70, 0, 33, 253, 247, 33, 252, 32, 70, 78, 73, 15, 34, 247, 247, 192,
-        248, 149, 248, 55, 54, 35, 179, 79, 244, 64, 66, 79, 244, 0, 67, 32,
-        70, 64, 242, 55, 97, 247, 247, 162, 248, 32, 70, 1, 33, 253, 247, 12,
-        252, 149, 249, 53, 54, 32, 70, 64, 242, 209, 65, 255, 34, 155, 178,
-        247, 247, 149, 248, 149, 248, 54, 54, 32, 70, 64, 242, 209, 65, 79,
-        244, 127, 66, 27, 2, 247, 247, 139, 248, 32, 70, 59, 73, 18, 34, 247,
-        247, 152, 248, 32, 70, 79, 244, 149, 97, 8, 34, 246, 247, 31, 249, 148,
-        249, 44, 225, 79, 246, 192, 115, 79, 234, 142, 30, 14, 234, 3, 3, 32,
-        70, 79, 244, 154, 97, 71, 246, 192, 114, 247, 247, 113, 248, 79, 244,
-        0, 66, 19, 70, 32, 70, 79, 244, 144, 97, 246, 178, 247, 247, 104, 248,
-        1, 62, 32, 70, 79, 244, 144, 97, 64, 242, 255, 18, 180, 35, 247, 247,
-        95, 248, 171, 25, 147, 249, 10, 54, 32, 70, 91, 0, 155, 178, 165, 248,
-        86, 52, 64, 242, 12, 81, 64, 242, 255, 18, 247, 247, 81, 248, 213, 248,
-        196, 52, 99, 177, 181, 248, 88, 36, 181, 248, 86, 52, 32, 70, 211, 24,
-        64, 242, 12, 81, 64, 242, 255, 18, 155, 178, 247, 247, 65, 248, 60,
-        35, 32, 70, 64, 242, 167, 65, 255, 34, 247, 247, 58, 248, 149, 248,
-        51, 52, 91, 177, 171, 25, 5, 235, 70, 6, 147, 248, 38, 52, 182, 248,
-        12, 100, 165, 248, 2, 52, 165, 248, 4, 100, 7, 224, 149, 248, 8, 52,
-        165, 248, 2, 52, 181, 248, 6, 52, 165, 248, 4, 52, 32, 70, 79, 244,
-        96, 65, 253, 247, 200, 250, 47, 185, 163, 107, 24, 105, 189, 232, 248,
-        64, 2, 240, 25, 185, 248, 189, 0, 191, 182, 251, 3, 0, 140, 249, 3,
-        0, 112, 181, 208, 248, 248, 48, 5, 70, 147, 248, 192, 36, 12, 70, 138,
-        66, 11, 208, 79, 244, 0, 98, 131, 248, 192, 20, 64, 246, 218, 33, 0,
-        44, 20, 191, 19, 70, 0, 35, 246, 247, 252, 255, 40, 70, 79, 244, 193,
-        97, 255, 34, 0, 44, 12, 191, 20, 35, 24, 35, 189, 232, 112, 64, 246,
-        247, 240, 191, 209, 241, 1, 3, 56, 191, 0, 35, 79, 244, 136, 97, 1,
-        34, 246, 247, 231, 191, 112, 181, 4, 70, 208, 248, 248, 80, 251, 247,
-        148, 252, 32, 70, 255, 247, 94, 248, 32, 70, 0, 33, 255, 247, 234, 255,
-        149, 248, 108, 53, 59, 177, 0, 33, 32, 70, 10, 70, 11, 70, 189, 232,
-        112, 64, 250, 247, 224, 187, 112, 189, 0, 0, 0, 35, 112, 181, 64, 242,
-        68, 97, 192, 248, 136, 49, 4, 70, 246, 247, 88, 248, 10, 37, 32, 70,
-        64, 242, 68, 97, 246, 247, 82, 248, 16, 240, 1, 3, 10, 208, 0, 33, 10,
-        70, 32, 70, 250, 247, 113, 249, 2, 34, 32, 70, 64, 242, 63, 97, 19,
-        70, 6, 224, 130, 7, 6, 213, 32, 70, 64, 242, 83, 65, 79, 244, 0, 66,
-        246, 247, 167, 255, 1, 32, 215, 243, 13, 240, 32, 70, 64, 242, 68, 97,
-        246, 247, 51, 248, 1, 61, 1, 208, 128, 7, 215, 209, 11, 34, 32, 70,
-        7, 73, 246, 247, 168, 255, 32, 70, 0, 33, 255, 247, 162, 255, 32, 70,
-        64, 242, 156, 65, 1, 34, 0, 35, 189, 232, 112, 64, 246, 247, 137, 191,
-        240, 249, 3, 0, 45, 233, 240, 67, 4, 70, 137, 176, 15, 70, 144, 70,
-        208, 248, 248, 0, 79, 244, 128, 97, 65, 242, 126, 82, 153, 70, 249,
-        247, 52, 253, 6, 70, 0, 40, 80, 208, 1, 34, 19, 70, 32, 70, 64, 242,
-        156, 65, 196, 248, 136, 113, 246, 247, 108, 255, 32, 70, 157, 248, 64,
-        16, 255, 247, 119, 255, 40, 34, 32, 70, 57, 70, 249, 247, 105, 253,
-        176, 245, 128, 127, 5, 70, 4, 217, 212, 248, 248, 0, 65, 242, 154, 81,
-        50, 224, 32, 70, 64, 242, 214, 97, 3, 34, 0, 35, 246, 247, 82, 255,
-        8, 34, 19, 70, 32, 70, 64, 242, 218, 97, 246, 247, 75, 255, 40, 35,
-        66, 70, 141, 232, 40, 0, 32, 70, 51, 70, 57, 70, 253, 247, 142, 251,
-        21, 35, 3, 150, 5, 147, 0, 38, 32, 35, 32, 70, 3, 169, 7, 147, 4, 149,
-        6, 150, 252, 247, 39, 252, 157, 248, 68, 48, 32, 70, 1, 147, 41, 70,
-        79, 246, 255, 114, 51, 70, 205, 248, 0, 144, 253, 247, 99, 252, 212,
-        248, 248, 0, 65, 242, 174, 81, 249, 247, 237, 252, 9, 176, 189, 232,
-        240, 131, 45, 233, 240, 79, 169, 77, 151, 176, 4, 70, 15, 70, 40, 104,
-        105, 104, 13, 171, 3, 195, 42, 137, 16, 38, 26, 128, 16, 170, 3, 194,
-        27, 136, 213, 248, 10, 0, 19, 128, 0, 33, 50, 70, 19, 144, 9, 168, 210,
-        243, 3, 244, 32, 70, 252, 247, 174, 248, 32, 70, 250, 247, 234, 253,
-        32, 70, 249, 247, 65, 254, 1, 33, 32, 70, 255, 247, 11, 255, 32, 70,
-        64, 242, 218, 97, 64, 246, 8, 2, 245, 247, 147, 255, 79, 244, 128, 82,
-        19, 70, 32, 70, 64, 242, 164, 65, 246, 247, 236, 254, 0, 34, 32, 70,
-        64, 242, 154, 81, 245, 247, 133, 255, 0, 34, 32, 70, 64, 242, 155, 81,
-        245, 247, 127, 255, 0, 34, 32, 70, 64, 242, 156, 81, 245, 247, 121,
-        255, 0, 34, 32, 70, 64, 242, 157, 81, 245, 247, 115, 255, 0, 34, 64,
-        242, 158, 81, 32, 70, 245, 247, 109, 255, 32, 70, 252, 247, 97, 248,
-        7, 144, 32, 70, 255, 247, 250, 254, 5, 32, 214, 243, 45, 247, 0, 37,
-        1, 35, 250, 34, 32, 70, 123, 73, 141, 232, 40, 0, 255, 247, 52, 255,
-        32, 70, 64, 242, 83, 65, 72, 246, 9, 34, 245, 247, 83, 255, 32, 70,
-        64, 242, 82, 65, 71, 246, 118, 18, 245, 247, 76, 255, 1, 47, 20, 208,
-        3, 211, 2, 47, 64, 240, 70, 129, 68, 224, 64, 35, 1, 147, 110, 75, 41,
-        70, 2, 147, 32, 70, 9, 170, 8, 35, 0, 150, 247, 247, 205, 248, 5, 33,
-        13, 241, 52, 10, 6, 145, 66, 224, 96, 35, 223, 248, 164, 129, 1, 147,
-        32, 70, 41, 70, 20, 170, 2, 35, 223, 248, 140, 145, 0, 150, 205, 248,
-        8, 128, 247, 247, 172, 248, 64, 35, 1, 147, 32, 70, 41, 70, 20, 170,
-        2, 35, 0, 150, 205, 248, 8, 144, 247, 247, 174, 248, 98, 35, 1, 147,
-        32, 70, 41, 70, 20, 170, 59, 70, 0, 150, 205, 248, 8, 128, 247, 247,
-        150, 248, 67, 35, 1, 147, 20, 170, 32, 70, 41, 70, 59, 70, 0, 150, 205,
-        248, 8, 144, 247, 247, 152, 248, 5, 34, 13, 241, 64, 10, 6, 146, 13,
-        224, 67, 35, 1, 147, 75, 75, 32, 70, 2, 147, 41, 70, 9, 170, 8, 35,
-        0, 150, 13, 241, 76, 10, 247, 247, 134, 248, 6, 151, 0, 37, 168, 70,
-        185, 70, 69, 75, 7, 154, 233, 92, 91, 25, 81, 67, 79, 240, 100, 11,
-        90, 120, 177, 251, 251, 241, 66, 234, 1, 35, 22, 174, 38, 248, 2, 61,
-        60, 79, 79, 240, 16, 12, 0, 33, 50, 70, 1, 35, 32, 70, 205, 248, 0,
-        192, 205, 248, 4, 128, 205, 248, 20, 192, 2, 151, 247, 247, 99, 248,
-        54, 75, 7, 153, 234, 92, 91, 25, 74, 67, 91, 120, 178, 251, 251, 251,
-        67, 234, 11, 43, 221, 248, 20, 192, 8, 241, 32, 3, 1, 147, 0, 33, 50,
-        70, 1, 35, 32, 70, 8, 241, 1, 8, 173, 248, 86, 176, 205, 248, 0, 192,
-        2, 151, 2, 53, 247, 247, 70, 248, 184, 241, 18, 15, 62, 70, 191, 209,
-        79, 70, 85, 70, 79, 240, 0, 9, 186, 70, 32, 70, 3, 33, 61, 34, 245,
-        247, 165, 254, 53, 248, 2, 43, 32, 70, 64, 242, 81, 65, 66, 244, 0,
-        66, 245, 247, 156, 254, 66, 242, 17, 119, 2, 224, 10, 32, 214, 243,
-        96, 246, 32, 70, 64, 242, 81, 65, 245, 247, 134, 254, 16, 244, 64, 79,
-        1, 208, 1, 63, 242, 209, 32, 70, 64, 242, 81, 65, 245, 247, 124, 254,
-        16, 39, 0, 244, 112, 96, 79, 234, 16, 43, 223, 248, 64, 128, 0, 151,
-        248, 185, 128, 35, 1, 147, 32, 70, 89, 70, 20, 170, 2, 35, 205, 248,
-        8, 128, 246, 247, 250, 255, 64, 35, 1, 147, 0, 151, 2, 150, 32, 70,
-        89, 70, 20, 170, 2, 35, 30, 224, 0, 191, 242, 180, 3, 0, 128, 132, 30,
-        0, 1, 219, 2, 0, 6, 250, 3, 0, 164, 250, 3, 0, 157, 211, 2, 0, 131,
-        35, 1, 147, 32, 70, 0, 33, 20, 170, 1, 35, 205, 248, 8, 128, 246, 247,
-        218, 255, 67, 35, 1, 147, 0, 151, 2, 150, 32, 70, 0, 33, 20, 170, 1,
-        35, 246, 247, 221, 255, 9, 241, 1, 9, 6, 154, 95, 250, 137, 249, 145,
-        69, 152, 211, 186, 241, 2, 15, 31, 208, 128, 35, 16, 37, 1, 147, 32,
-        70, 0, 33, 20, 170, 2, 35, 0, 149, 205, 248, 8, 128, 246, 247, 186,
-        255, 96, 35, 1, 147, 32, 70, 0, 33, 20, 170, 2, 35, 0, 149, 2, 150,
-        246, 247, 189, 255, 112, 35, 1, 147, 32, 70, 0, 33, 20, 170, 2, 35,
-        0, 149, 2, 150, 246, 247, 179, 255, 131, 35, 16, 37, 1, 147, 32, 70,
-        0, 33, 20, 170, 1, 35, 0, 149, 205, 248, 8, 128, 246, 247, 154, 255,
-        98, 35, 1, 147, 32, 70, 0, 33, 20, 170, 1, 35, 0, 149, 2, 150, 246,
-        247, 157, 255, 114, 35, 1, 147, 32, 70, 0, 33, 20, 170, 1, 35, 0, 149,
-        2, 150, 246, 247, 147, 255, 32, 70, 255, 247, 145, 253, 32, 70, 252,
-        247, 250, 250, 32, 70, 251, 247, 175, 249, 32, 70, 0, 33, 255, 247,
-        100, 253, 23, 176, 189, 232, 240, 143, 112, 181, 64, 242, 164, 65, 4,
-        70, 245, 247, 223, 253, 5, 70, 32, 70, 254, 247, 167, 255, 0, 35, 79,
-        244, 96, 98, 6, 70, 64, 242, 121, 81, 32, 70, 246, 247, 62, 253, 32,
-        70, 70, 33, 254, 247, 174, 253, 32, 70, 0, 33, 255, 247, 21, 254, 32,
-        70, 0, 33, 127, 34, 253, 247, 192, 250, 32, 70, 241, 178, 254, 247,
-        161, 253, 32, 70, 5, 244, 96, 65, 189, 232, 112, 64, 252, 247, 208,
-        191, 0, 0, 45, 233, 240, 79, 208, 248, 248, 32, 141, 176, 146, 248,
-        109, 21, 7, 146, 78, 75, 79, 74, 0, 39, 2, 41, 8, 191, 26, 70, 1, 35,
-        6, 146, 0, 147, 1, 147, 75, 73, 181, 34, 59, 70, 4, 70, 9, 151, 10,
-        151, 11, 151, 62, 70, 255, 247, 130, 253, 184, 70, 5, 151, 79, 240,
-        56, 9, 8, 37, 7, 154, 146, 248, 109, 53, 6, 154, 2, 43, 79, 234, 133,
-        3, 19, 68, 88, 120, 154, 120, 8, 191, 223, 120, 0, 33, 1, 144, 2, 146,
-        32, 70, 10, 70, 11, 70, 0, 145, 3, 151, 249, 247, 161, 252, 32, 70,
-        1, 33, 249, 247, 244, 252, 30, 185, 32, 70, 73, 70, 254, 247, 89, 253,
-        79, 240, 8, 10, 55, 33, 32, 70, 245, 247, 76, 253, 55, 33, 131, 70,
-        32, 70, 245, 247, 71, 253, 0, 244, 0, 96, 192, 18, 5, 155, 11, 244,
-        128, 123, 0, 235, 27, 43, 155, 68, 95, 250, 139, 242, 186, 241, 1, 10,
-        5, 146, 231, 209, 9, 169, 32, 35, 32, 70, 79, 244, 128, 98, 205, 248,
-        0, 160, 205, 248, 4, 160, 250, 247, 25, 248, 10, 153, 11, 155, 1, 245,
-        0, 113, 3, 245, 0, 115, 137, 10, 155, 10, 110, 185, 185, 241, 55, 15,
-        10, 217, 5, 154, 66, 185, 64, 242, 87, 70, 177, 66, 4, 216, 179, 66,
-        148, 191, 0, 38, 1, 38, 0, 224, 1, 38, 246, 178, 38, 185, 169, 241,
-        12, 9, 95, 250, 137, 249, 20, 224, 65, 246, 88, 50, 145, 66, 1, 216,
-        147, 66, 1, 217, 1, 61, 6, 224, 145, 66, 16, 208, 64, 242, 86, 66, 147,
-        66, 12, 216, 1, 53, 8, 241, 1, 8, 237, 178, 95, 250, 136, 248, 1, 38,
-        184, 241, 8, 15, 2, 208, 13, 177, 16, 45, 129, 209, 32, 70, 255, 247,
-        182, 252, 13, 176, 189, 232, 240, 143, 0, 191, 242, 250, 3, 0, 42, 250,
-        3, 0, 128, 132, 30, 0, 55, 181, 4, 70, 1, 33, 208, 248, 248, 80, 255,
-        247, 130, 252, 32, 70, 254, 247, 216, 255, 32, 70, 250, 247, 67, 253,
-        149, 248, 108, 53, 195, 177, 181, 34, 0, 35, 1, 37, 32, 70, 13, 73,
-        0, 149, 1, 149, 255, 247, 217, 252, 0, 33, 32, 70, 252, 247, 225, 249,
-        32, 70, 252, 247, 9, 251, 0, 34, 32, 70, 41, 70, 19, 70, 250, 247, 100,
-        248, 32, 70, 255, 247, 131, 252, 32, 70, 3, 176, 189, 232, 48, 64, 255,
-        247, 37, 191, 0, 191, 128, 132, 30, 0, 240, 181, 208, 248, 248, 48,
-        2, 37, 0, 39, 149, 176, 131, 248, 109, 85, 131, 248, 108, 117, 4, 70,
-        255, 247, 193, 255, 41, 70, 32, 70, 18, 170, 250, 247, 112, 248, 254,
-        35, 141, 248, 77, 48, 6, 35, 141, 248, 78, 48, 250, 35, 141, 248, 76,
-        80, 141, 248, 79, 48, 61, 70, 19, 171, 235, 92, 3, 174, 187, 85, 89,
-        178, 1, 35, 0, 147, 1, 147, 21, 75, 181, 34, 89, 67, 32, 70, 0, 35,
-        255, 247, 147, 252, 0, 35, 15, 169, 79, 244, 250, 82, 0, 147, 1, 147,
-        32, 70, 32, 35, 249, 247, 105, 255, 32, 70, 255, 247, 64, 252, 12, 35,
-        107, 67, 242, 24, 8, 51, 4, 50, 32, 70, 15, 169, 243, 24, 1, 53, 253,
-        247, 30, 251, 12, 55, 4, 45, 213, 209, 32, 70, 49, 70, 42, 70, 253,
-        247, 147, 248, 32, 70, 255, 247, 16, 252, 21, 176, 240, 189, 64, 66,
-        15, 0, 45, 233, 240, 79, 157, 176, 157, 248, 152, 160, 1, 37, 10, 241,
-        255, 59, 5, 250, 11, 251, 137, 70, 19, 146, 79, 244, 136, 97, 95, 250,
-        139, 242, 4, 70, 5, 146, 4, 147, 245, 247, 114, 252, 4, 34, 40, 64,
-        19, 70, 6, 144, 79, 244, 136, 97, 32, 70, 246, 247, 213, 251, 42, 70,
-        0, 35, 79, 244, 136, 97, 32, 70, 246, 247, 206, 251, 40, 70, 214, 243,
-        52, 244, 42, 70, 43, 70, 79, 244, 136, 97, 32, 70, 246, 247, 196, 251,
-        40, 70, 214, 243, 42, 244, 223, 248, 180, 132, 7, 35, 32, 38, 35, 33,
-        1, 147, 32, 70, 43, 70, 21, 170, 0, 150, 205, 248, 8, 128, 246, 247,
-        216, 253, 42, 70, 21, 155, 41, 70, 32, 70, 249, 247, 190, 255, 64, 242,
-        164, 65, 32, 70, 245, 247, 60, 252, 0, 244, 96, 64, 0, 33, 7, 144, 32,
-        70, 252, 247, 75, 254, 64, 242, 81, 65, 32, 70, 245, 247, 48, 252, 64,
-        242, 82, 65, 8, 144, 32, 70, 245, 247, 42, 252, 64, 242, 164, 65, 9,
-        144, 32, 70, 245, 247, 36, 252, 129, 33, 10, 144, 32, 70, 245, 247,
-        248, 251, 104, 33, 11, 144, 32, 70, 245, 247, 243, 251, 9, 33, 12, 144,
-        32, 70, 245, 247, 238, 251, 2, 33, 13, 144, 32, 70, 245, 247, 233, 251,
-        165, 33, 14, 144, 32, 70, 245, 247, 228, 251, 162, 33, 15, 144, 32,
-        70, 245, 247, 223, 251, 153, 33, 16, 144, 32, 70, 245, 247, 218, 251,
-        150, 33, 17, 144, 32, 70, 245, 247, 213, 251, 41, 70, 18, 144, 32, 70,
-        249, 247, 211, 253, 0, 35, 32, 70, 64, 242, 77, 65, 79, 244, 128, 66,
-        246, 247, 91, 251, 79, 244, 128, 66, 19, 70, 32, 70, 64, 242, 76, 65,
-        246, 247, 83, 251, 129, 33, 16, 34, 0, 35, 32, 70, 246, 247, 18, 251,
-        64, 34, 165, 33, 19, 70, 32, 70, 246, 247, 12, 251, 104, 33, 2, 34,
-        0, 35, 32, 70, 246, 247, 6, 251, 2, 34, 162, 33, 19, 70, 32, 70, 246,
-        247, 0, 251, 104, 33, 42, 70, 0, 35, 32, 70, 246, 247, 250, 250, 162,
-        33, 42, 70, 43, 70, 32, 70, 246, 247, 244, 250, 9, 33, 42, 70, 0, 35,
-        32, 70, 246, 247, 238, 250, 153, 33, 42, 70, 43, 70, 32, 70, 246, 247,
-        232, 250, 42, 70, 32, 70, 2, 33, 0, 35, 246, 247, 226, 250, 2, 34, 19,
-        70, 32, 70, 150, 33, 246, 247, 220, 250, 34, 35, 1, 147, 32, 70, 43,
-        70, 13, 33, 22, 170, 0, 150, 205, 248, 8, 128, 246, 247, 49, 253, 22,
-        159, 32, 70, 7, 244, 126, 83, 219, 9, 1, 147, 18, 33, 43, 70, 22, 170,
-        0, 150, 205, 248, 8, 128, 246, 247, 35, 253, 22, 153, 7, 244, 240, 18,
-        1, 240, 15, 0, 1, 244, 240, 97, 201, 9, 1, 145, 157, 248, 156, 16, 7,
-        244, 224, 51, 0, 38, 82, 12, 155, 11, 0, 144, 2, 145, 32, 70, 199, 243,
-        64, 81, 3, 150, 249, 247, 153, 250, 41, 70, 32, 70, 249, 247, 236, 250,
-        79, 244, 0, 82, 19, 70, 32, 70, 64, 242, 116, 81, 246, 247, 218, 250,
-        79, 244, 0, 114, 19, 70, 32, 70, 64, 242, 117, 81, 246, 247, 210, 250,
-        221, 248, 16, 192, 79, 244, 122, 113, 98, 70, 1, 251, 9, 241, 43, 70,
-        32, 70, 0, 150, 1, 150, 255, 247, 62, 251, 32, 70, 64, 242, 81, 65,
-        79, 244, 0, 66, 51, 70, 246, 247, 189, 250, 32, 70, 64, 242, 81, 65,
-        79, 244, 128, 66, 51, 70, 246, 247, 181, 250, 32, 70, 64, 242, 81, 65,
-        79, 244, 112, 98, 79, 244, 0, 115, 246, 247, 172, 250, 79, 244, 0, 66,
-        19, 70, 32, 70, 64, 242, 83, 65, 246, 247, 164, 250, 32, 70, 64, 242,
-        82, 65, 66, 246, 34, 18, 245, 247, 60, 251, 79, 244, 134, 115, 173,
-        248, 104, 48, 23, 150, 177, 70, 69, 70, 158, 224, 79, 244, 128, 82,
-        19, 70, 32, 70, 64, 242, 164, 65, 246, 247, 141, 250, 79, 244, 128,
-        66, 32, 70, 64, 242, 81, 65, 19, 70, 246, 247, 133, 250, 66, 242, 17,
-        119, 2, 224, 10, 32, 214, 243, 232, 242, 32, 70, 64, 242, 81, 65, 245,
-        247, 14, 251, 16, 244, 64, 79, 1, 208, 1, 63, 242, 209, 156, 35, 16,
-        39, 1, 147, 32, 70, 0, 33, 13, 241, 106, 2, 1, 35, 0, 151, 2, 149, 246,
-        247, 142, 252, 157, 35, 1, 147, 32, 70, 0, 33, 27, 170, 1, 35, 0, 151,
-        189, 248, 106, 128, 2, 149, 246, 247, 130, 252, 158, 35, 1, 147, 32,
-        70, 0, 33, 13, 241, 110, 2, 1, 35, 0, 151, 2, 149, 246, 247, 119, 252,
-        189, 249, 110, 32, 189, 249, 108, 48, 82, 67, 3, 251, 3, 35, 23, 154,
-        32, 70, 211, 24, 23, 147, 64, 242, 164, 65, 79, 244, 128, 82, 0, 35,
-        246, 247, 64, 250, 79, 244, 128, 66, 32, 70, 64, 242, 81, 65, 19, 70,
-        246, 247, 56, 250, 66, 242, 17, 119, 2, 224, 10, 32, 214, 243, 155,
-        242, 32, 70, 64, 242, 81, 65, 245, 247, 193, 250, 16, 244, 64, 79, 1,
-        208, 1, 63, 242, 209, 156, 35, 16, 39, 1, 147, 32, 70, 0, 33, 13, 241,
-        106, 2, 1, 35, 0, 151, 2, 149, 246, 247, 65, 252, 189, 248, 106, 48,
-        32, 70, 152, 68, 157, 35, 1, 147, 0, 33, 27, 170, 1, 35, 0, 151, 2,
-        149, 246, 247, 52, 252, 158, 35, 1, 147, 13, 241, 110, 2, 1, 35, 32,
-        70, 0, 33, 0, 151, 2, 149, 246, 247, 41, 252, 189, 249, 110, 32, 189,
-        249, 108, 48, 82, 67, 3, 251, 3, 35, 23, 154, 193, 68, 211, 24, 31,
-        250, 137, 249, 23, 147, 1, 54, 5, 154, 150, 66, 255, 246, 93, 175, 23,
-        155, 73, 250, 10, 249, 91, 68, 35, 250, 10, 243, 28, 169, 65, 248, 20,
-        61, 26, 171, 0, 37, 1, 147, 32, 70, 24, 170, 25, 171, 0, 149, 247, 247,
-        123, 249, 189, 248, 100, 32, 189, 248, 104, 48, 32, 70, 211, 24, 19,
-        154, 3, 245, 135, 115, 19, 128, 255, 247, 7, 250, 42, 70, 43, 70, 32,
-        70, 41, 70, 249, 247, 223, 253, 32, 70, 41, 70, 249, 247, 212, 249,
-        32, 70, 43, 70, 64, 242, 117, 81, 79, 244, 0, 114, 246, 247, 194, 249,
-        43, 70, 32, 70, 79, 244, 128, 66, 64, 242, 76, 65, 246, 247, 186, 249,
-        32, 70, 41, 70, 249, 247, 38, 252, 32, 70, 129, 33, 11, 154, 245, 247,
-        47, 250, 32, 70, 104, 33, 12, 154, 245, 247, 42, 250, 32, 70, 9, 33,
-        13, 154, 245, 247, 37, 250, 32, 70, 2, 33, 14, 154, 245, 247, 32, 250,
-        32, 70, 165, 33, 15, 154, 245, 247, 27, 250, 32, 70, 162, 33, 16, 154,
-        245, 247, 22, 250, 32, 70, 153, 33, 17, 154, 245, 247, 17, 250, 32,
-        70, 150, 33, 18, 154, 245, 247, 12, 250, 32, 70, 10, 154, 64, 242, 164,
-        65, 245, 247, 39, 250, 32, 70, 8, 154, 64, 242, 81, 65, 245, 247, 33,
-        250, 9, 154, 32, 70, 64, 242, 82, 65, 245, 247, 27, 250, 32, 70, 7,
-        153, 252, 247, 34, 252, 32, 70, 4, 34, 43, 70, 79, 244, 136, 97, 246,
-        247, 113, 249, 32, 70, 79, 244, 136, 97, 1, 34, 6, 155, 246, 247, 106,
-        249, 31, 250, 137, 240, 29, 176, 189, 232, 240, 143, 157, 211, 2, 0,
-        45, 233, 240, 71, 0, 33, 142, 176, 208, 248, 248, 128, 144, 248, 10,
-        81, 173, 248, 50, 16, 173, 248, 52, 16, 4, 70, 0, 33, 9, 168, 12, 34,
-        209, 243, 76, 246, 0, 35, 173, 248, 54, 48, 152, 248, 25, 54, 19, 177,
-        152, 248, 26, 54, 1, 224, 152, 248, 24, 54, 212, 248, 148, 33, 153,
-        73, 138, 66, 10, 209, 1, 43, 5, 241, 255, 53, 1, 209, 150, 75, 32, 224,
-        3, 43, 12, 191, 149, 75, 150, 75, 27, 224, 150, 73, 138, 66, 10, 209,
-        1, 43, 5, 241, 255, 53, 1, 209, 147, 75, 18, 224, 3, 43, 12, 191, 146,
-        75, 147, 75, 13, 224, 147, 73, 138, 66, 64, 240, 115, 129, 1, 43, 5,
-        241, 255, 53, 1, 209, 144, 75, 3, 224, 3, 43, 12, 191, 143, 75, 143,
-        75, 3, 235, 133, 5, 0, 45, 0, 240, 100, 129, 32, 70, 1, 33, 255, 247,
-        33, 249, 46, 136, 70, 177, 54, 178, 79, 244, 122, 114, 114, 67, 32,
-        70, 1, 33, 252, 247, 236, 253, 1, 38, 107, 136, 99, 177, 1, 54, 246,
-        178, 27, 178, 79, 244, 122, 114, 90, 67, 32, 70, 49, 70, 252, 247, 223,
-        253, 1, 46, 10, 209, 0, 224, 222, 177, 2, 35, 0, 147, 1, 33, 0, 35,
-        1, 147, 2, 147, 32, 70, 10, 70, 8, 224, 2, 35, 1, 33, 0, 147, 1, 147,
-        0, 35, 2, 147, 32, 70, 10, 70, 11, 70, 249, 247, 37, 249, 32, 70, 5,
-        33, 79, 244, 134, 114, 13, 241, 50, 3, 251, 247, 237, 252, 0, 38, 55,
-        70, 177, 70, 169, 91, 33, 179, 4, 32, 11, 35, 141, 232, 9, 0, 9, 178,
-        13, 170, 79, 244, 250, 115, 32, 70, 255, 247, 215, 252, 189, 248, 52,
-        32, 189, 248, 50, 48, 28, 58, 210, 26, 184, 249, 28, 22, 19, 178, 153,
-        66, 14, 220, 14, 169, 6, 35, 3, 251, 7, 19, 169, 91, 1, 55, 35, 248,
-        20, 28, 35, 248, 18, 44, 35, 248, 16, 12, 191, 178, 79, 240, 1, 9, 2,
-        54, 4, 46, 213, 209, 2, 35, 6, 147, 16, 35, 8, 147, 13, 241, 54, 3,
-        4, 147, 0, 37, 1, 35, 32, 70, 4, 169, 5, 147, 7, 149, 251, 247, 221,
-        249, 16, 35, 141, 232, 40, 0, 80, 75, 2, 33, 2, 147, 32, 70, 1, 35,
-        13, 241, 54, 2, 1, 53, 246, 247, 195, 250, 64, 45, 240, 209, 0, 37,
-        32, 70, 41, 70, 42, 70, 43, 70, 0, 149, 1, 149, 2, 149, 249, 247, 200,
-        248, 185, 241, 0, 15, 64, 240, 185, 128, 202, 224, 14, 171, 79, 240,
-        6, 9, 9, 251, 5, 57, 57, 248, 20, 108, 1, 53, 237, 178, 15, 250, 134,
-        250, 79, 244, 122, 114, 2, 251, 10, 242, 32, 70, 41, 70, 252, 247, 82,
-        253, 184, 249, 30, 38, 57, 249, 18, 60, 154, 66, 3, 221, 32, 70, 41,
-        70, 54, 74, 7, 224, 184, 249, 32, 38, 32, 70, 154, 66, 204, 191, 52,
-        74, 52, 74, 41, 70, 186, 241, 0, 15, 184, 191, 202, 241, 0, 10, 249,
-        247, 188, 252, 79, 234, 138, 10, 0, 35, 64, 242, 113, 34, 146, 69, 7,
-        221, 1, 51, 219, 178, 170, 245, 156, 106, 32, 43, 170, 241, 2, 10, 243,
-        209, 50, 178, 0, 42, 216, 191, 91, 66, 219, 178, 90, 178, 118, 0, 111,
-        244, 28, 126, 14, 251, 2, 110, 0, 42, 184, 191, 82, 66, 2, 42, 108,
-        221, 0, 33, 10, 70, 32, 78, 15, 250, 142, 240, 49, 248, 6, 144, 128,
-        234, 224, 124, 172, 235, 224, 124, 225, 69, 91, 209, 6, 33, 1, 251,
-        2, 98, 0, 40, 178, 248, 2, 160, 178, 248, 4, 144, 90, 178, 8, 218, 0,
-        42, 1, 221, 94, 30, 46, 224, 222, 178, 6, 241, 64, 3, 63, 54, 41, 224,
-        0, 42, 35, 221, 94, 28, 37, 224, 192, 173, 58, 2, 174, 23, 4, 0, 212,
-        19, 4, 0, 156, 19, 4, 0, 128, 186, 140, 1, 22, 27, 4, 0, 66, 24, 4,
-        0, 222, 26, 4, 0, 0, 248, 36, 1, 230, 23, 4, 0, 78, 27, 4, 0, 134, 27,
-        4, 0, 1, 219, 2, 0, 156, 23, 4, 0, 162, 23, 4, 0, 168, 23, 4, 0, 30,
-        24, 4, 0, 222, 178, 6, 241, 64, 3, 65, 54, 91, 178, 32, 70, 4, 169,
-        7, 147, 251, 247, 36, 249, 189, 248, 54, 48, 32, 70, 154, 68, 4, 169,
-        173, 248, 54, 160, 118, 178, 251, 247, 204, 252, 32, 70, 4, 169, 7,
-        150, 251, 247, 21, 249, 189, 248, 54, 48, 32, 70, 153, 68, 4, 169, 173,
-        248, 54, 144, 251, 247, 190, 252, 3, 224, 1, 50, 6, 49, 6, 42, 148,
-        209, 189, 66, 255, 244, 69, 175, 79, 240, 0, 3, 1, 47, 0, 147, 1, 147,
-        2, 147, 32, 70, 79, 240, 5, 1, 1, 209, 58, 70, 1, 224, 1, 34, 19, 70,
-        248, 247, 248, 255, 32, 70, 0, 33, 254, 247, 193, 255, 14, 176, 189,
-        232, 240, 135, 0, 191, 19, 181, 4, 70, 247, 247, 218, 251, 32, 70, 64,
-        242, 164, 65, 245, 247, 56, 248, 16, 244, 96, 79, 6, 208, 32, 70, 254,
-        247, 254, 249, 1, 70, 32, 70, 254, 247, 14, 248, 32, 70, 64, 242, 218,
-        97, 79, 246, 255, 114, 245, 247, 50, 248, 1, 35, 0, 147, 0, 35, 1, 147,
-        32, 70, 212, 248, 136, 17, 120, 34, 255, 247, 2, 248, 28, 189, 248,
-        181, 13, 70, 64, 246, 244, 17, 4, 70, 22, 70, 31, 70, 245, 247, 19,
-        248, 192, 243, 128, 48, 110, 177, 24, 177, 111, 240, 22, 3, 59, 96,
-        9, 224, 32, 70, 64, 242, 166, 65, 64, 242, 255, 18, 171, 178, 245, 247,
-        111, 255, 8, 224, 56, 177, 32, 70, 64, 242, 123, 65, 244, 247, 252,
-        255, 192, 5, 192, 13, 248, 189, 32, 70, 64, 242, 166, 65, 244, 247,
-        244, 255, 192, 5, 192, 13, 248, 189, 8, 181, 64, 242, 62, 97, 244, 247,
-        236, 255, 192, 5, 192, 13, 8, 189, 112, 181, 131, 107, 4, 70, 90, 127,
-        14, 70, 250, 177, 24, 105, 0, 41, 20, 191, 79, 244, 96, 69, 0, 37, 1,
-        240, 67, 248, 32, 70, 245, 247, 96, 254, 30, 185, 32, 70, 127, 33, 253,
-        247, 179, 255, 41, 70, 32, 70, 252, 247, 229, 249, 1, 35, 132, 248,
-        144, 49, 32, 70, 245, 247, 105, 254, 163, 107, 24, 105, 1, 240, 51,
-        248, 0, 32, 112, 189, 111, 240, 10, 0, 112, 189, 16, 181, 131, 107,
-        12, 70, 91, 127, 115, 177, 64, 242, 164, 65, 244, 247, 183, 255, 0,
-        244, 96, 64, 160, 245, 96, 76, 220, 241, 0, 0, 64, 235, 12, 0, 32, 96,
-        0, 32, 16, 189, 111, 240, 10, 0, 16, 189, 115, 181, 0, 35, 19, 112,
-        11, 112, 144, 248, 168, 49, 6, 70, 12, 70, 21, 70, 27, 179, 64, 242,
-        171, 65, 244, 247, 155, 255, 16, 244, 0, 79, 48, 70, 2, 208, 64, 242,
-        171, 65, 8, 224, 64, 242, 60, 97, 244, 247, 144, 255, 3, 4, 6, 213,
-        48, 70, 64, 242, 60, 97, 244, 247, 137, 255, 64, 8, 32, 112, 1, 34,
-        1, 171, 214, 248, 188, 6, 0, 33, 1, 240, 210, 252, 34, 120, 157, 248,
-        4, 48, 211, 24, 43, 112, 124, 189, 248, 181, 20, 70, 31, 70, 5, 70,
-        247, 247, 6, 251, 6, 70, 49, 70, 40, 70, 34, 70, 252, 247, 148, 250,
-        7, 235, 135, 7, 237, 25, 174, 25, 150, 249, 162, 22, 32, 70, 189, 232,
-        248, 64, 1, 240, 114, 189, 208, 248, 252, 48, 45, 233, 240, 71, 211,
-        248, 32, 49, 4, 70, 3, 240, 1, 3, 13, 70, 22, 70, 131, 240, 1, 8, 27,
-        177, 131, 107, 24, 105, 0, 240, 185, 255, 32, 70, 249, 247, 45, 248,
-        212, 248, 252, 48, 0, 34, 163, 248, 82, 37, 170, 140, 212, 248, 252,
-        48, 1, 58, 163, 248, 84, 37, 64, 242, 218, 97, 32, 70, 244, 247, 62,
-        255, 7, 70, 32, 70, 247, 247, 215, 250, 79, 244, 0, 82, 19, 70, 32,
-        70, 64, 242, 218, 97, 245, 247, 158, 254, 149, 248, 35, 48, 32, 70,
-        27, 3, 64, 242, 209, 113, 79, 244, 64, 82, 3, 244, 112, 67, 245, 247,
-        146, 254, 32, 70, 64, 242, 209, 113, 63, 34, 149, 248, 34, 48, 245,
-        247, 138, 254, 212, 248, 252, 48, 0, 33, 179, 248, 146, 36, 48, 70,
-        146, 178, 66, 240, 50, 2, 163, 248, 146, 36, 170, 140, 79, 240, 0, 9,
-        146, 0, 209, 243, 116, 243, 32, 70, 64, 242, 212, 113, 18, 34, 244,
-        247, 18, 255, 8, 34, 19, 70, 32, 70, 64, 242, 220, 113, 245, 247, 108,
-        254, 1, 34, 19, 70, 32, 70, 79, 244, 250, 97, 245, 247, 101, 254, 32,
-        70, 64, 242, 233, 113, 64, 242, 97, 18, 244, 247, 253, 254, 1, 34, 32,
-        70, 64, 242, 213, 113, 19, 70, 245, 247, 87, 254, 7, 224, 235, 137,
-        153, 69, 14, 216, 10, 32, 213, 243, 185, 246, 9, 241, 1, 9, 212, 248,
-        252, 48, 179, 248, 86, 37, 179, 248, 84, 53, 146, 178, 155, 178, 154,
-        66, 237, 209, 0, 35, 32, 70, 79, 244, 250, 97, 1, 34, 245, 247, 61,
-        254, 32, 70, 64, 242, 233, 113, 0, 34, 244, 247, 214, 254, 1, 34, 0,
-        35, 32, 70, 64, 242, 213, 113, 245, 247, 48, 254, 212, 248, 252, 32,
-        181, 248, 36, 160, 178, 248, 146, 52, 0, 37, 35, 240, 50, 3, 27, 4,
-        27, 12, 162, 248, 146, 52, 178, 248, 82, 149, 31, 250, 137, 249, 11,
-        224, 163, 107, 137, 0, 24, 105, 0, 240, 54, 255, 163, 107, 1, 53, 24,
-        105, 0, 240, 52, 255, 70, 248, 4, 11, 170, 69, 5, 235, 9, 1, 239, 209,
-        32, 70, 64, 242, 218, 97, 58, 70, 244, 247, 167, 254, 184, 241, 0, 15,
-        3, 209, 163, 107, 24, 105, 0, 240, 3, 255, 0, 32, 189, 232, 240, 135,
-        0, 0, 55, 181, 208, 248, 248, 64, 64, 246, 9, 1, 180, 248, 72, 85, 244,
-        247, 136, 254, 194, 9, 146, 178, 209, 5, 0, 240, 127, 3, 72, 191, 162,
-        245, 0, 114, 0, 178, 0, 144, 41, 178, 18, 178, 3, 72, 209, 243, 6, 243,
-        180, 249, 72, 5, 62, 189, 0, 191, 176, 249, 3, 0, 112, 181, 4, 70, 208,
-        248, 248, 96, 79, 244, 250, 96, 13, 70, 213, 243, 63, 246, 32, 70, 255,
-        247, 214, 255, 79, 244, 250, 96, 213, 243, 56, 246, 2, 35, 0, 45, 166,
-        248, 72, 85, 216, 191, 5, 245, 0, 117, 173, 178, 79, 246, 128, 114,
-        237, 1, 198, 248, 104, 53, 32, 70, 64, 246, 9, 1, 5, 234, 2, 3, 245,
-        247, 187, 253, 79, 244, 250, 96, 213, 243, 32, 246, 32, 70, 189, 232,
-        112, 64, 255, 247, 181, 191, 56, 181, 208, 248, 248, 80, 64, 246, 7,
-        1, 4, 70, 244, 247, 62, 254, 149, 248, 74, 53, 27, 177, 64, 240, 1,
-        3, 155, 178, 2, 224, 79, 246, 254, 115, 3, 64, 149, 248, 75, 37, 18,
-        177, 67, 240, 2, 2, 2, 224, 79, 246, 253, 114, 26, 64, 32, 70, 64, 246,
-        7, 1, 189, 232, 56, 64, 244, 247, 47, 190, 127, 181, 0, 35, 64, 242,
-        62, 97, 6, 70, 1, 147, 2, 147, 3, 147, 244, 247, 26, 254, 64, 242, 166,
-        65, 197, 5, 48, 70, 244, 247, 20, 254, 237, 13, 196, 5, 133, 244, 128,
-        117, 228, 13, 5, 245, 254, 117, 3, 53, 132, 244, 128, 116, 48, 70, 1,
-        169, 2, 170, 3, 171, 45, 27, 247, 247, 93, 252, 168, 178, 1, 169, 128,
-        8, 14, 201, 248, 247, 92, 251, 4, 176, 112, 189, 45, 233, 240, 79, 64,
-        242, 164, 65, 133, 176, 4, 70, 208, 248, 248, 112, 244, 247, 241, 253,
-        0, 244, 96, 75, 32, 70, 253, 247, 184, 255, 64, 246, 7, 1, 95, 250,
-        128, 250, 32, 70, 244, 247, 229, 253, 0, 240, 1, 0, 1, 144, 64, 242,
-        58, 65, 32, 70, 244, 247, 221, 253, 2, 169, 192, 243, 128, 24, 32, 70,
-        248, 247, 83, 254, 32, 70, 0, 33, 251, 247, 233, 255, 1, 34, 0, 35,
-        32, 70, 64, 246, 7, 1, 245, 247, 56, 253, 32, 70, 1, 33, 248, 247, 72,
-        252, 32, 70, 63, 33, 253, 247, 164, 253, 5, 38, 63, 37, 79, 244, 0,
-        66, 19, 70, 32, 70, 64, 242, 164, 65, 245, 247, 38, 253, 1, 33, 0, 34,
-        32, 70, 245, 247, 96, 255, 100, 32, 213, 243, 135, 245, 32, 70, 255,
-        247, 139, 255, 1, 33, 0, 34, 129, 70, 32, 70, 245, 247, 84, 255, 100,
-        32, 213, 243, 123, 245, 32, 70, 255, 247, 127, 255, 215, 248, 92, 53,
-        129, 68, 79, 234, 105, 9, 195, 235, 9, 3, 0, 43, 1, 221, 90, 16, 1,
-        224, 90, 28, 82, 16, 2, 51, 4, 43, 15, 217, 173, 24, 127, 45, 168, 191,
-        127, 37, 1, 33, 32, 70, 37, 234, 229, 117, 248, 247, 9, 252, 32, 70,
-        41, 70, 253, 247, 101, 253, 1, 62, 192, 209, 215, 248, 96, 53, 32, 70,
-        65, 70, 195, 235, 9, 9, 248, 247, 251, 251, 32, 70, 2, 169, 248, 247,
-        46, 254, 9, 241, 1, 9, 32, 70, 81, 70, 253, 247, 81, 253, 5, 235, 105,
-        5, 32, 70, 89, 70, 251, 247, 129, 255, 127, 45, 168, 191, 127, 37, 32,
-        70, 64, 246, 7, 1, 1, 34, 1, 155, 245, 247, 205, 252, 37, 234, 229,
-        112, 5, 176, 189, 232, 240, 143, 0, 0, 45, 233, 247, 67, 21, 70, 8,
-        34, 15, 70, 30, 70, 64, 246, 7, 1, 19, 70, 4, 70, 208, 248, 248, 144,
-        189, 248, 40, 128, 245, 247, 183, 252, 1, 34, 19, 70, 32, 70, 64, 246,
-        7, 1, 245, 247, 176, 252, 79, 244, 0, 82, 19, 70, 32, 70, 64, 246, 70,
-        1, 245, 247, 168, 252, 32, 70, 64, 246, 57, 1, 58, 70, 244, 247, 65,
-        253, 148, 248, 69, 54, 32, 70, 64, 246, 53, 1, 11, 177, 128, 34, 0,
-        224, 32, 34, 244, 247, 54, 253, 32, 70, 79, 244, 4, 97, 0, 34, 244,
-        247, 48, 253, 32, 70, 64, 246, 52, 1, 127, 34, 51, 70, 245, 247, 138,
-        252, 32, 70, 79, 244, 1, 97, 79, 244, 128, 67, 79, 244, 64, 66, 245,
-        247, 129, 252, 148, 248, 69, 54, 32, 70, 64, 246, 54, 1, 19, 177, 79,
-        244, 128, 114, 0, 224, 128, 34, 244, 247, 20, 253, 32, 70, 64, 246,
-        70, 1, 15, 34, 7, 35, 245, 247, 110, 252, 148, 248, 69, 102, 32, 70,
-        64, 246, 70, 1, 240, 34, 86, 177, 144, 35, 245, 247, 100, 252, 32, 70,
-        64, 246, 70, 1, 79, 244, 112, 98, 79, 244, 16, 99, 8, 224, 51, 70, 245,
-        247, 89, 252, 32, 70, 64, 246, 70, 1, 79, 244, 112, 98, 51, 70, 245,
-        247, 81, 252, 43, 70, 32, 70, 64, 246, 51, 1, 127, 34, 245, 247, 74,
-        252, 79, 234, 8, 35, 32, 70, 64, 246, 51, 1, 79, 244, 254, 66, 3, 244,
-        127, 67, 245, 247, 63, 252, 1, 37, 32, 70, 53, 73, 100, 34, 0, 35, 0,
-        149, 1, 149, 254, 247, 175, 252, 79, 244, 128, 82, 19, 70, 32, 70, 64,
-        246, 165, 17, 245, 247, 46, 252, 42, 70, 43, 70, 64, 246, 136, 17, 32,
-        70, 245, 247, 39, 252, 79, 244, 150, 112, 213, 243, 140, 244, 42, 70,
-        32, 70, 64, 246, 55, 1, 244, 247, 188, 252, 68, 246, 33, 101, 2, 224,
-        10, 32, 213, 243, 128, 244, 32, 70, 64, 246, 55, 1, 244, 247, 166, 252,
-        48, 177, 1, 61, 244, 209, 3, 224, 10, 32, 213, 243, 116, 244, 1, 224,
-        68, 246, 33, 101, 32, 70, 64, 246, 55, 1, 244, 247, 151, 252, 8, 177,
-        1, 61, 241, 209, 32, 70, 64, 246, 55, 1, 244, 247, 143, 252, 192, 7,
-        5, 213, 148, 248, 239, 53, 67, 240, 1, 3, 132, 248, 239, 53, 0, 35,
-        32, 70, 64, 246, 165, 17, 79, 244, 128, 82, 245, 247, 235, 251, 32,
-        70, 254, 247, 27, 252, 32, 70, 0, 35, 64, 242, 166, 97, 65, 246, 255,
-        114, 245, 247, 224, 251, 185, 248, 72, 85, 79, 246, 128, 114, 237, 1,
-        32, 70, 64, 246, 9, 1, 5, 234, 2, 3, 3, 176, 189, 232, 240, 67, 245,
-        247, 209, 187, 160, 37, 38, 0, 45, 233, 240, 65, 208, 248, 248, 48,
-        144, 248, 69, 134, 147, 248, 76, 85, 147, 248, 74, 53, 0, 38, 200, 176,
-        4, 70, 68, 150, 176, 69, 20, 191, 79, 240, 64, 8, 79, 240, 16, 8, 43,
-        185, 64, 246, 7, 1, 1, 34, 245, 247, 181, 251, 156, 224, 254, 247, 77,
-        249, 32, 70, 250, 247, 184, 253, 32, 70, 253, 247, 234, 252, 32, 35,
-        75, 79, 141, 232, 72, 0, 33, 33, 1, 35, 32, 70, 68, 170, 1, 54, 2, 151,
-        245, 247, 210, 253, 64, 46, 241, 209, 5, 34, 32, 70, 65, 70, 19, 70,
-        0, 149, 255, 247, 208, 254, 0, 38, 1, 150, 33, 33, 1, 35, 79, 240, 32,
-        8, 32, 70, 68, 170, 1, 54, 205, 248, 0, 128, 2, 151, 245, 247, 187,
-        253, 5, 46, 240, 209, 62, 45, 58, 78, 24, 216, 32, 70, 33, 33, 69, 170,
-        1, 35, 1, 149, 205, 248, 0, 128, 2, 150, 245, 247, 159, 253, 1, 53,
-        237, 178, 32, 35, 141, 232, 168, 0, 1, 53, 33, 33, 1, 35, 32, 70, 69,
-        170, 237, 178, 245, 247, 159, 253, 64, 45, 242, 209, 64, 246, 9, 1,
-        127, 34, 8, 35, 32, 70, 245, 247, 100, 251, 32, 70, 251, 247, 97, 249,
-        32, 70, 253, 247, 202, 252, 8, 34, 19, 70, 64, 246, 7, 1, 32, 70, 245,
-        247, 87, 251, 32, 70, 255, 247, 162, 253, 64, 242, 116, 81, 32, 70,
-        244, 247, 227, 251, 64, 242, 117, 81, 7, 70, 32, 70, 244, 247, 221,
-        251, 79, 244, 128, 66, 19, 70, 128, 70, 64, 242, 116, 81, 32, 70, 245,
-        247, 64, 251, 79, 244, 128, 98, 19, 70, 32, 70, 64, 242, 117, 81, 245,
-        247, 56, 251, 0, 37, 32, 35, 141, 232, 40, 0, 32, 70, 33, 33, 4, 170,
-        64, 35, 2, 150, 245, 247, 82, 253, 32, 70, 64, 242, 116, 81, 58, 70,
-        244, 247, 198, 251, 32, 70, 64, 242, 117, 81, 66, 70, 244, 247, 192,
-        251, 4, 171, 232, 88, 70, 169, 71, 170, 4, 53, 246, 247, 150, 253, 181,
-        245, 128, 127, 245, 209, 72, 176, 189, 232, 240, 129, 0, 191, 1, 219,
-        2, 0, 157, 211, 2, 0, 208, 248, 252, 48, 45, 233, 240, 65, 211, 248,
-        32, 49, 4, 70, 3, 240, 1, 3, 13, 70, 131, 240, 1, 6, 27, 185, 131, 107,
-        24, 105, 0, 240, 0, 252, 32, 70, 212, 248, 248, 112, 253, 247, 89, 253,
-        64, 242, 127, 65, 167, 248, 2, 4, 32, 70, 212, 248, 248, 112, 244, 247,
-        132, 251, 192, 5, 192, 13, 64, 16, 167, 248, 4, 4, 212, 248, 40, 33,
-        65, 246, 6, 35, 19, 64, 43, 185, 68, 246, 32, 98, 16, 45, 8, 191, 250,
-        34, 0, 224, 250, 34, 163, 107, 184, 33, 24, 105, 0, 240, 201, 251, 163,
-        107, 24, 105, 0, 240, 209, 251, 32, 70, 246, 247, 3, 255, 212, 248,
-        40, 33, 65, 246, 6, 35, 19, 64, 27, 185, 163, 107, 27, 106, 196, 248,
-        140, 49, 8, 45, 1, 208, 235, 6, 6, 213, 3, 33, 10, 34, 32, 70, 248,
-        247, 124, 254, 8, 45, 1, 208, 168, 6, 4, 213, 32, 70, 254, 247, 103,
-        253, 8, 45, 1, 208, 105, 6, 4, 213, 32, 70, 254, 247, 106, 254, 8, 45,
-        1, 208, 234, 5, 7, 213, 212, 248, 248, 48, 147, 248, 27, 54, 19, 177,
-        32, 70, 255, 247, 66, 249, 32, 70, 253, 247, 65, 255, 32, 70, 246, 247,
-        208, 254, 8, 45, 1, 208, 43, 6, 12, 213, 212, 248, 248, 80, 149, 248,
-        100, 53, 35, 177, 32, 70, 255, 247, 44, 253, 197, 248, 84, 5, 32, 70,
-        255, 247, 191, 254, 32, 70, 247, 247, 80, 249, 30, 185, 163, 107, 24,
-        105, 0, 240, 136, 251, 32, 70, 0, 33, 251, 247, 240, 253, 212, 248,
-        248, 48, 147, 248, 55, 54, 115, 177, 32, 70, 1, 33, 251, 247, 231, 253,
-        32, 70, 64, 242, 55, 97, 79, 244, 64, 66, 79, 244, 0, 67, 189, 232,
-        240, 65, 245, 247, 110, 186, 189, 232, 240, 129, 16, 181, 4, 70, 246,
-        247, 153, 254, 32, 70, 0, 33, 251, 247, 14, 253, 32, 70, 8, 33, 189,
-        232, 16, 64, 255, 247, 79, 191, 16, 181, 4, 70, 248, 247, 44, 248, 192,
-        177, 212, 248, 40, 33, 64, 246, 15, 35, 19, 64, 147, 185, 148, 249,
-        152, 49, 123, 185, 18, 6, 13, 212, 148, 248, 37, 49, 83, 185, 32, 70,
-        251, 247, 84, 254, 48, 185, 32, 70, 79, 244, 248, 113, 189, 232, 16,
-        64, 255, 247, 49, 191, 16, 189, 240, 181, 131, 107, 135, 176, 4, 70,
-        79, 244, 66, 113, 24, 105, 0, 240, 41, 251, 163, 107, 7, 70, 64, 242,
-        10, 49, 24, 105, 0, 240, 34, 251, 163, 107, 5, 70, 79, 244, 67, 113,
-        24, 105, 0, 240, 27, 251, 163, 107, 6, 70, 64, 242, 14, 49, 24, 105,
-        0, 240, 20, 251, 190, 25, 54, 4, 45, 24, 117, 25, 27, 208, 79, 244,
-        134, 115, 173, 248, 20, 48, 5, 245, 128, 117, 0, 35, 109, 10, 0, 147,
-        5, 171, 45, 2, 1, 147, 3, 170, 4, 171, 32, 70, 2, 169, 2, 149, 246,
-        247, 164, 249, 189, 249, 16, 32, 31, 75, 155, 26, 0, 43, 184, 191, 91,
-        66, 112, 43, 10, 217, 148, 248, 253, 44, 79, 246, 120, 99, 210, 241,
-        1, 2, 173, 248, 16, 48, 56, 191, 0, 34, 0, 224, 1, 34, 189, 249, 16,
-        0, 148, 248, 253, 60, 128, 8, 1, 70, 91, 177, 0, 35, 165, 107, 237,
-        24, 1, 51, 8, 43, 133, 248, 32, 17, 248, 209, 18, 177, 0, 35, 132, 248,
-        253, 60, 163, 107, 211, 248, 40, 33, 155, 24, 131, 248, 32, 1, 163,
-        107, 211, 248, 40, 33, 7, 42, 1, 208, 1, 50, 0, 224, 0, 34, 195, 248,
-        40, 33, 148, 248, 27, 49, 1, 43, 2, 209, 0, 35, 132, 248, 27, 49, 64,
-        178, 7, 176, 240, 189, 120, 254, 255, 255, 1, 49, 16, 181, 208, 248,
-        248, 32, 144, 248, 10, 49, 4, 41, 10, 216, 223, 232, 1, 240, 12, 9,
-        3, 5, 7, 0, 1, 33, 4, 224, 2, 33, 2, 224, 3, 33, 0, 224, 0, 33, 130,
-        248, 26, 22, 25, 70, 189, 232, 16, 64, 250, 247, 164, 189, 45, 233,
-        240, 79, 208, 248, 252, 48, 145, 176, 211, 248, 32, 49, 144, 70, 3,
-        240, 1, 3, 131, 240, 1, 2, 4, 70, 138, 70, 221, 248, 104, 144, 221,
-        248, 108, 176, 4, 146, 27, 177, 131, 107, 24, 105, 0, 240, 142, 250,
-        32, 70, 246, 247, 192, 253, 79, 244, 136, 97, 32, 70, 244, 247, 30,
-        250, 0, 240, 1, 0, 5, 144, 64, 242, 218, 97, 32, 70, 244, 247, 22, 250,
-        64, 246, 172, 17, 6, 144, 32, 70, 244, 247, 16, 250, 64, 246, 121, 17,
-        7, 144, 32, 70, 244, 247, 10, 250, 64, 242, 114, 65, 8, 144, 32, 70,
-        244, 247, 4, 250, 32, 34, 19, 70, 9, 144, 64, 242, 218, 97, 32, 70,
-        245, 247, 104, 249, 79, 244, 128, 114, 19, 70, 32, 70, 64, 242, 218,
-        97, 245, 247, 96, 249, 4, 34, 19, 70, 32, 70, 79, 244, 136, 97, 245,
-        247, 89, 249, 15, 171, 0, 147, 13, 241, 61, 3, 1, 147, 13, 241, 62,
-        3, 2, 147, 13, 241, 63, 3, 3, 147, 32, 70, 37, 33, 13, 241, 58, 2, 13,
-        241, 59, 3, 250, 247, 45, 250, 32, 70, 64, 242, 114, 65, 255, 34, 81,
-        35, 245, 247, 63, 249, 79, 244, 136, 97, 1, 34, 0, 35, 32, 70, 245,
-        247, 56, 249, 1, 32, 213, 243, 158, 241, 1, 34, 32, 70, 79, 244, 136,
-        97, 19, 70, 245, 247, 46, 249, 1, 32, 213, 243, 148, 241, 37, 39, 81,
-        37, 0, 38, 11, 169, 79, 244, 128, 98, 67, 70, 32, 70, 0, 150, 1, 150,
-        248, 247, 120, 252, 1, 32, 213, 243, 133, 241, 12, 153, 65, 246, 88,
-        51, 1, 245, 0, 113, 137, 10, 153, 66, 13, 154, 4, 216, 2, 245, 0, 114,
-        146, 10, 154, 66, 31, 217, 3, 61, 237, 178, 107, 178, 32, 70, 64, 242,
-        114, 65, 255, 34, 155, 178, 245, 247, 4, 249, 79, 244, 136, 97, 1, 34,
-        0, 35, 32, 70, 245, 247, 253, 248, 1, 32, 213, 243, 99, 241, 1, 34,
-        32, 70, 79, 244, 136, 97, 19, 70, 245, 247, 243, 248, 1, 32, 213, 243,
-        89, 241, 0, 38, 66, 224, 64, 242, 86, 67, 153, 66, 61, 216, 154, 66,
-        59, 216, 107, 178, 89, 43, 30, 220, 3, 53, 237, 178, 107, 178, 32, 70,
-        255, 34, 64, 242, 114, 65, 155, 178, 245, 247, 219, 248, 1, 34, 51,
-        70, 32, 70, 79, 244, 136, 97, 245, 247, 212, 248, 1, 32, 213, 243, 58,
-        241, 1, 34, 32, 70, 79, 244, 136, 97, 19, 70, 245, 247, 202, 248, 1,
-        32, 213, 243, 48, 241, 26, 224, 157, 248, 63, 48, 14, 43, 51, 216, 1,
-        51, 219, 178, 141, 248, 63, 48, 32, 70, 155, 1, 64, 246, 172, 17, 79,
-        244, 112, 114, 245, 247, 182, 248, 1, 34, 3, 53, 32, 70, 64, 246, 172,
-        17, 19, 70, 237, 178, 245, 247, 173, 248, 0, 224, 1, 38, 1, 63, 255,
-        178, 55, 177, 107, 178, 11, 51, 3, 219, 0, 46, 63, 244, 121, 175, 0,
-        224, 142, 177, 0, 35, 109, 178, 0, 147, 1, 147, 32, 70, 73, 70, 82,
-        70, 67, 70, 18, 61, 248, 247, 238, 251, 173, 0, 1, 32, 213, 243, 250,
-        240, 171, 248, 0, 80, 8, 224, 0, 35, 201, 248, 4, 48, 201, 248, 8, 48,
-        71, 246, 255, 115, 171, 248, 0, 48, 32, 70, 64, 242, 114, 65, 9, 154,
-        244, 247, 30, 249, 32, 70, 64, 246, 121, 17, 8, 154, 244, 247, 24, 249,
-        32, 70, 64, 246, 172, 17, 7, 154, 244, 247, 18, 249, 32, 70, 64, 242,
-        218, 97, 6, 154, 244, 247, 12, 249, 32, 70, 79, 244, 136, 97, 4, 34,
-        0, 35, 245, 247, 102, 248, 1, 34, 32, 70, 79, 244, 136, 97, 5, 155,
-        245, 247, 95, 248, 32, 70, 246, 247, 33, 255, 4, 154, 26, 185, 163,
-        107, 24, 105, 0, 240, 88, 249, 17, 176, 189, 232, 240, 143, 112, 181,
-        208, 248, 248, 48, 1, 41, 211, 248, 200, 85, 211, 248, 196, 101, 211,
-        248, 204, 69, 2, 209, 253, 247, 191, 250, 1, 224, 248, 247, 28, 249,
-        0, 178, 6, 251, 0, 85, 99, 30, 1, 38, 22, 250, 3, 243, 237, 24, 85,
-        250, 4, 244, 32, 178, 112, 189, 48, 181, 208, 248, 248, 32, 210, 248,
-        48, 54, 243, 185, 146, 248, 46, 54, 146, 248, 52, 38, 1, 36, 20, 250,
-        3, 243, 148, 64, 208, 248, 252, 0, 1, 41, 176, 248, 156, 84, 155, 178,
-        164, 178, 173, 178, 6, 209, 255, 42, 67, 234, 5, 3, 7, 208, 35, 234,
-        4, 3, 4, 224, 37, 234, 3, 3, 255, 42, 24, 191, 35, 67, 160, 248, 156,
-        52, 1, 32, 48, 189, 208, 248, 248, 48, 147, 248, 45, 54, 19, 177, 0,
-        33, 255, 247, 209, 191, 112, 71, 208, 248, 248, 48, 211, 248, 48, 38,
-        114, 185, 147, 248, 46, 54, 208, 248, 252, 32, 1, 32, 16, 250, 3, 243,
-        178, 248, 156, 36, 146, 178, 26, 66, 12, 191, 0, 35, 1, 35, 11, 112,
-        1, 32, 112, 71, 1, 42, 208, 248, 248, 48, 12, 209, 10, 120, 81, 178,
-        17, 241, 121, 15, 10, 219, 6, 58, 82, 178, 163, 248, 6, 22, 163, 248,
-        8, 38, 247, 247, 203, 190, 179, 249, 6, 54, 11, 96, 112, 71, 176, 248,
-        10, 49, 7, 181, 19, 244, 64, 79, 12, 191, 144, 249, 98, 53, 144, 249,
-        99, 53, 1, 147, 10, 51, 3, 218, 1, 169, 1, 34, 255, 247, 218, 255, 14,
-        189, 247, 181, 208, 248, 40, 33, 64, 246, 6, 35, 19, 64, 4, 70, 15,
-        70, 206, 178, 35, 185, 208, 248, 200, 54, 176, 248, 10, 33, 26, 112,
-        32, 70, 248, 247, 66, 248, 32, 70, 1, 33, 253, 247, 196, 255, 212, 248,
-        252, 48, 211, 248, 32, 49, 3, 240, 1, 3, 131, 240, 1, 5, 27, 177, 163,
-        107, 24, 105, 0, 240, 163, 248, 32, 70, 49, 70, 249, 247, 38, 253, 32,
-        70, 57, 70, 245, 247, 229, 250, 32, 70, 49, 70, 252, 247, 48, 248, 32,
-        70, 49, 70, 252, 247, 214, 248, 2, 33, 1, 35, 0, 147, 32, 70, 10, 70,
-        11, 70, 249, 247, 230, 249, 212, 248, 40, 33, 65, 246, 6, 35, 19, 64,
-        32, 70, 19, 185, 79, 244, 248, 113, 0, 224, 16, 33, 255, 247, 115, 252,
-        32, 70, 252, 247, 230, 251, 29, 185, 163, 107, 24, 105, 0, 240, 124,
-        248, 0, 33, 32, 70, 253, 247, 134, 255, 32, 70, 253, 247, 152, 254,
-        79, 244, 0, 114, 19, 70, 32, 70, 79, 244, 136, 97, 244, 247, 107, 255,
-        16, 34, 19, 70, 32, 70, 64, 246, 5, 1, 244, 247, 100, 255, 1, 34, 19,
-        70, 32, 70, 79, 244, 65, 113, 244, 247, 93, 255, 15, 34, 10, 35, 32,
-        70, 64, 242, 21, 49, 244, 247, 86, 255, 64, 246, 255, 114, 19, 70, 32,
-        70, 64, 242, 39, 49, 244, 247, 78, 255, 148, 248, 212, 60, 1, 43, 2,
-        209, 32, 70, 255, 247, 107, 255, 1, 35, 132, 248, 253, 60, 254, 189,
-        208, 248, 200, 54, 176, 248, 10, 33, 16, 181, 4, 70, 26, 112, 252, 247,
-        93, 249, 32, 70, 247, 247, 193, 255, 32, 70, 253, 247, 139, 249, 148,
-        248, 164, 53, 19, 177, 32, 70, 250, 247, 157, 252, 32, 70, 247, 247,
-        49, 253, 32, 70, 249, 247, 111, 254, 32, 70, 180, 248, 10, 17, 255,
-        247, 89, 255, 32, 70, 255, 247, 16, 255, 148, 248, 212, 60, 1, 43, 4,
-        209, 32, 70, 189, 232, 16, 64, 255, 247, 59, 191, 16, 189, 128, 104,
-        230, 243, 76, 176, 128, 104, 230, 243, 111, 176, 0, 104, 19, 240, 94,
-        154, 0, 104, 18, 240, 173, 156, 0, 104, 18, 240, 130, 154, 0, 104, 18,
-        240, 81, 152, 0, 104, 237, 247, 202, 187, 0, 104, 18, 240, 125, 159,
-        0, 104, 237, 247, 162, 184, 0, 104, 18, 240, 99, 154, 0, 104, 17, 240,
-        144, 158, 0, 104, 17, 240, 37, 156, 3, 104, 155, 111, 152, 139, 8, 128,
-        155, 125, 19, 112, 112, 71, 0, 104, 2, 33, 19, 240, 194, 155, 0, 104,
-        2, 33, 19, 240, 176, 155, 0, 104, 18, 240, 135, 159, 0, 104, 237, 247,
-        127, 184, 0, 104, 19, 240, 47, 154, 64, 104, 220, 247, 157, 189, 64,
-        104, 37, 240, 91, 157, 0, 104, 238, 247, 88, 191, 0, 104, 238, 247,
-        215, 191, 45, 233, 248, 67, 139, 104, 76, 105, 3, 43, 129, 70, 13, 70,
-        210, 248, 8, 128, 150, 137, 103, 104, 81, 208, 35, 104, 0, 43, 24, 70,
-        11, 218, 8, 224, 3, 104, 17, 70, 64, 104, 0, 34, 152, 71, 0, 40, 58,
-        208, 4, 35, 6, 224, 240, 24, 53, 212, 195, 25, 179, 66, 50, 216, 64,
-        68, 0, 35, 3, 241, 8, 2, 217, 25, 171, 104, 8, 49, 162, 24, 97, 24,
-        107, 177, 3, 43, 14, 209, 9, 224, 16, 248, 3, 192, 212, 92, 206, 92,
-        12, 234, 4, 4, 166, 66, 29, 209, 1, 51, 0, 224, 0, 35, 187, 66, 242,
-        219, 18, 224, 1, 43, 21, 209, 99, 104, 246, 26, 176, 68, 15, 224, 16,
-        248, 3, 192, 212, 92, 206, 92, 12, 234, 4, 4, 166, 66, 6, 209, 1, 51,
-        0, 224, 0, 35, 187, 66, 242, 219, 1, 32, 3, 224, 1, 48, 64, 69, 247,
-        217, 0, 32, 43, 123, 19, 177, 128, 240, 1, 0, 192, 178, 16, 177, 107,
-        123, 137, 248, 102, 48, 189, 232, 248, 131, 160, 104, 0, 40, 175, 209,
-        240, 231, 45, 233, 247, 79, 3, 70, 72, 105, 151, 137, 4, 29, 0, 120,
-        210, 248, 8, 176, 1, 144, 0, 38, 66, 224, 96, 136, 180, 248, 0, 160,
-        0, 241, 32, 2, 51, 248, 18, 32, 165, 136, 15, 250, 130, 252, 188, 241,
-        255, 63, 4, 209, 224, 136, 16, 240, 1, 0, 55, 208, 43, 224, 1, 40, 4,
-        209, 186, 69, 2, 220, 202, 235, 7, 10, 0, 224, 146, 68, 31, 250, 138,
-        250, 10, 235, 5, 2, 186, 66, 39, 220, 5, 241, 8, 0, 32, 24, 218, 68,
-        0, 34, 12, 224, 4, 235, 2, 12, 156, 248, 8, 128, 26, 248, 2, 192, 16,
-        248, 2, 144, 8, 234, 12, 12, 225, 69, 4, 209, 1, 50, 170, 66, 240, 219,
-        1, 32, 0, 224, 0, 32, 226, 136, 210, 7, 72, 191, 128, 240, 1, 0, 80,
-        177, 4, 53, 1, 54, 4, 235, 69, 4, 246, 178, 1, 154, 150, 66, 185, 209,
-        1, 32, 0, 224, 0, 32, 10, 123, 10, 177, 128, 240, 1, 0, 16, 177, 74,
-        123, 131, 248, 102, 32, 189, 232, 254, 143, 45, 233, 240, 71, 163, 241,
-        12, 7, 5, 70, 56, 70, 12, 70, 145, 70, 152, 70, 213, 247, 99, 249, 6,
-        70, 0, 40, 92, 208, 9, 241, 12, 1, 58, 70, 206, 247, 157, 254, 163,
-        104, 102, 97, 2, 43, 46, 209, 3, 47, 87, 217, 115, 136, 159, 66, 81,
-        209, 168, 241, 16, 8, 51, 29, 150, 248, 0, 192, 0, 33, 27, 224, 159,
-        136, 120, 0, 8, 48, 128, 69, 72, 211, 8, 55, 223, 25, 0, 34, 10, 224,
-        3, 235, 2, 9, 153, 248, 8, 160, 23, 248, 2, 144, 10, 234, 9, 9, 7, 248,
-        2, 144, 1, 50, 179, 248, 4, 144, 74, 69, 240, 211, 192, 235, 8, 8, 27,
-        24, 1, 49, 140, 69, 225, 209, 51, 120, 1, 43, 51, 209, 243, 136, 29,
-        224, 114, 104, 3, 43, 12, 191, 4, 35, 0, 35, 3, 235, 66, 1, 8, 49, 143,
-        66, 32, 209, 154, 24, 3, 241, 8, 1, 8, 50, 113, 24, 178, 24, 0, 35,
-        4, 224, 205, 92, 208, 92, 40, 64, 208, 84, 1, 51, 112, 104, 131, 66,
-        247, 211, 51, 104, 0, 43, 2, 219, 163, 104, 1, 43, 17, 209, 99, 123,
-        67, 240, 1, 3, 99, 115, 12, 224, 111, 240, 26, 4, 4, 224, 111, 240,
-        1, 4, 1, 224, 111, 240, 13, 4, 40, 70, 49, 70, 47, 240, 213, 223, 0,
-        224, 0, 36, 32, 70, 189, 232, 240, 135, 112, 181, 2, 121, 4, 70, 18,
-        240, 2, 0, 14, 70, 96, 209, 35, 106, 203, 177, 139, 104, 137, 137, 22,
-        41, 21, 217, 25, 123, 93, 123, 9, 2, 73, 25, 137, 178, 177, 245, 0,
-        111, 13, 209, 153, 123, 9, 9, 4, 41, 9, 209, 219, 125, 1, 43, 6, 209,
-        99, 106, 1, 51, 99, 98, 227, 104, 1, 51, 227, 96, 112, 189, 99, 105,
-        67, 185, 163, 141, 51, 185, 2, 240, 8, 0, 208, 241, 1, 0, 56, 191, 0,
-        32, 112, 189, 32, 70, 49, 70, 48, 240, 22, 218, 0, 35, 132, 248, 102,
-        48, 101, 105, 1, 32, 19, 224, 171, 104, 32, 70, 2, 43, 41, 70, 50, 70,
-        2, 209, 255, 247, 229, 254, 1, 224, 255, 247, 128, 254, 48, 177, 107,
-        123, 132, 248, 102, 48, 43, 105, 1, 51, 43, 97, 2, 224, 45, 104, 0,
-        45, 233, 209, 35, 121, 3, 240, 1, 3, 152, 66, 15, 209, 163, 141, 67,
-        177, 148, 248, 102, 48, 217, 7, 4, 212, 32, 70, 49, 70, 48, 240, 175,
-        218, 32, 185, 163, 104, 1, 32, 1, 51, 163, 96, 112, 189, 227, 104, 0,
-        32, 1, 51, 227, 96, 112, 189, 1, 32, 112, 189, 112, 181, 208, 248, 4,
-        81, 6, 104, 4, 70, 232, 107, 32, 240, 114, 217, 214, 248, 108, 50, 156,
-        66, 1, 209, 35, 122, 67, 177, 233, 106, 232, 107, 3, 74, 137, 2, 35,
-        70, 189, 232, 112, 64, 32, 240, 21, 153, 112, 189, 1, 63, 134, 0, 112,
-        181, 6, 104, 4, 70, 208, 248, 4, 81, 48, 70, 252, 243, 202, 246, 212,
-        248, 4, 49, 219, 139, 3, 185, 24, 187, 43, 120, 2, 43, 32, 209, 35,
-        122, 243, 177, 107, 120, 227, 185, 107, 104, 211, 185, 214, 248, 168,
-        52, 35, 185, 214, 248, 104, 49, 107, 177, 155, 121, 91, 177, 48, 70,
-        33, 70, 1, 34, 14, 240, 255, 220, 96, 177, 214, 248, 104, 1, 0, 33,
-        54, 240, 131, 221, 6, 224, 32, 70, 1, 33, 222, 247, 19, 251, 32, 70,
-        48, 240, 227, 218, 171, 122, 11, 185, 107, 104, 139, 177, 212, 248,
-        4, 49, 219, 139, 67, 177, 107, 104, 32, 70, 0, 43, 12, 191, 3, 35, 1,
-        35, 43, 98, 48, 240, 106, 219, 32, 70, 189, 232, 112, 64, 48, 240, 209,
-        155, 35, 121, 35, 177, 32, 70, 189, 232, 112, 64, 255, 247, 152, 191,
-        112, 189, 247, 181, 208, 248, 4, 81, 4, 70, 43, 120, 6, 104, 2, 43,
-        239, 106, 53, 209, 51, 104, 27, 126, 0, 43, 49, 208, 43, 107, 2, 169,
-        65, 248, 4, 61, 214, 248, 208, 5, 32, 240, 32, 217, 167, 235, 144, 32,
-        5, 40, 1, 217, 184, 66, 5, 217, 171, 106, 32, 70, 235, 98, 255, 247,
-        145, 255, 29, 224, 232, 98, 32, 70, 255, 247, 114, 255, 214, 248, 104,
-        49, 179, 177, 155, 121, 163, 177, 48, 70, 33, 70, 1, 34, 14, 240, 164,
-        220, 112, 177, 48, 70, 33, 70, 14, 240, 253, 216, 48, 177, 169, 106,
-        214, 248, 104, 1, 73, 0, 54, 240, 34, 221, 2, 224, 32, 70, 11, 240,
-        66, 222, 254, 189, 16, 181, 208, 248, 4, 49, 28, 122, 28, 185, 255,
-        247, 185, 255, 32, 70, 16, 189, 79, 240, 255, 48, 16, 189, 45, 233,
-        240, 71, 146, 176, 146, 70, 26, 156, 194, 104, 29, 70, 14, 70, 189,
-        248, 108, 48, 143, 88, 12, 177, 1, 148, 62, 224, 19, 240, 96, 3, 25,
-        209, 28, 70, 91, 224, 79, 240, 22, 9, 9, 251, 8, 121, 80, 70, 9, 241,
-        116, 1, 6, 34, 9, 241, 112, 9, 206, 247, 227, 252, 56, 185, 18, 170,
-        2, 235, 132, 3, 9, 241, 10, 2, 67, 248, 68, 44, 1, 52, 8, 241, 1, 8,
-        0, 224, 160, 70, 215, 248, 212, 49, 152, 69, 226, 211, 51, 122, 227,
-        177, 228, 185, 48, 104, 3, 104, 147, 248, 242, 48, 0, 43, 53, 208, 208,
-        248, 208, 54, 219, 136, 0, 43, 48, 208, 18, 171, 67, 248, 4, 77, 82,
-        70, 49, 70, 43, 240, 74, 218, 17, 155, 90, 28, 38, 208, 22, 34, 2, 251,
-        3, 115, 122, 51, 1, 147, 1, 36, 0, 224, 244, 177, 107, 120, 111, 70,
-        235, 24, 156, 112, 3, 241, 2, 8, 35, 10, 136, 248, 1, 48, 107, 120,
-        0, 38, 2, 51, 107, 112, 10, 224, 67, 68, 152, 28, 87, 248, 4, 31, 16,
-        34, 206, 247, 176, 252, 107, 120, 1, 54, 16, 51, 107, 112, 166, 66,
-        79, 234, 6, 19, 240, 209, 156, 28, 228, 178, 32, 70, 18, 176, 189, 232,
-        240, 135, 1, 32, 112, 71, 22, 32, 112, 71, 11, 40, 154, 191, 1, 75,
-        24, 92, 0, 32, 112, 71, 179, 4, 4, 0, 56, 181, 13, 70, 255, 247, 242,
-        255, 4, 70, 40, 70, 255, 247, 240, 255, 96, 67, 56, 189, 9, 185, 4,
-        48, 112, 71, 0, 32, 112, 71, 1, 41, 3, 208, 4, 211, 3, 41, 4, 209, 1,
-        224, 4, 48, 112, 71, 26, 48, 112, 71, 0, 32, 112, 71, 5, 41, 17, 216,
-        79, 240, 136, 67, 139, 64, 11, 212, 79, 240, 24, 67, 139, 64, 5, 212,
-        79, 240, 0, 83, 139, 64, 5, 213, 4, 48, 112, 71, 26, 48, 112, 71, 48,
-        48, 112, 71, 0, 32, 112, 71, 9, 41, 14, 216, 223, 232, 1, 240, 7, 9,
-        11, 7, 7, 9, 5, 7, 9, 11, 4, 48, 112, 71, 26, 48, 112, 71, 48, 48, 112,
-        71, 70, 48, 112, 71, 0, 32, 112, 71, 15, 41, 19, 216, 223, 232, 1, 240,
-        12, 14, 16, 12, 12, 14, 18, 18, 18, 18, 18, 8, 10, 12, 14, 16, 4, 48,
-        112, 71, 26, 48, 112, 71, 70, 48, 112, 71, 92, 48, 112, 71, 48, 48,
-        112, 71, 0, 32, 112, 71, 112, 181, 120, 177, 5, 104, 0, 35, 7, 74, 220,
-        0, 82, 248, 51, 96, 174, 66, 3, 209, 18, 25, 83, 104, 152, 71, 112,
-        189, 1, 51, 5, 43, 242, 209, 0, 32, 112, 189, 0, 191, 120, 4, 4, 0,
-        1, 41, 24, 191, 0, 32, 112, 71, 1, 42, 1, 209, 4, 48, 112, 71, 0, 32,
-        112, 71, 1, 41, 11, 209, 1, 43, 9, 216, 1, 59, 6, 73, 2, 235, 131, 2,
-        81, 248, 34, 48, 90, 28, 3, 208, 192, 24, 112, 71, 0, 32, 112, 71, 0,
-        32, 112, 71, 160, 4, 4, 0, 2, 40, 154, 191, 1, 75, 24, 92, 0, 32, 112,
-        71, 176, 4, 4, 0, 45, 233, 248, 79, 138, 70, 20, 70, 153, 70, 255, 247,
-        189, 255, 1, 37, 7, 70, 79, 240, 0, 11, 27, 224, 11, 241, 8, 8, 200,
-        69, 38, 104, 25, 216, 167, 177, 41, 70, 56, 70, 255, 247, 196, 255,
-        1, 70, 112, 177, 48, 29, 4, 34, 206, 247, 226, 251, 1, 35, 51, 112,
-        6, 35, 115, 112, 134, 248, 2, 160, 245, 112, 35, 104, 195, 70, 8, 51,
-        35, 96, 1, 53, 10, 155, 157, 66, 224, 217, 88, 70, 189, 232, 248, 143,
-        45, 233, 247, 79, 20, 70, 0, 145, 1, 147, 255, 247, 143, 255, 1, 38,
-        131, 70, 79, 240, 0, 8, 39, 224, 0, 39, 185, 70, 1, 155, 8, 241, 13,
-        10, 154, 69, 37, 104, 34, 216, 187, 241, 0, 15, 22, 208, 73, 70, 88,
-        70, 50, 70, 255, 247, 148, 255, 1, 70, 120, 177, 104, 29, 8, 34, 206,
-        247, 174, 251, 2, 35, 43, 112, 11, 35, 107, 112, 0, 155, 238, 112, 171,
-        112, 47, 113, 35, 104, 208, 70, 13, 51, 35, 96, 1, 55, 4, 47, 9, 241,
-        1, 9, 218, 209, 1, 54, 12, 155, 158, 66, 212, 217, 64, 70, 189, 232,
-        254, 143, 45, 233, 240, 79, 133, 176, 144, 70, 2, 145, 3, 147, 255,
-        247, 84, 255, 1, 37, 1, 144, 79, 240, 0, 10, 71, 70, 50, 224, 0, 38,
-        177, 70, 3, 155, 10, 241, 16, 11, 155, 69, 60, 104, 45, 216, 1, 155,
-        203, 177, 24, 70, 65, 70, 74, 70, 43, 70, 255, 247, 94, 255, 1, 70,
-        136, 177, 160, 29, 10, 34, 206, 247, 114, 251, 3, 35, 35, 112, 14, 35,
-        99, 112, 2, 155, 229, 112, 163, 112, 38, 113, 132, 248, 5, 128, 59,
-        104, 218, 70, 16, 51, 59, 96, 1, 54, 4, 46, 9, 241, 1, 9, 216, 209,
-        8, 241, 1, 8, 95, 250, 136, 248, 1, 224, 79, 240, 1, 8, 168, 69, 205,
-        217, 1, 53, 14, 155, 157, 66, 247, 217, 80, 70, 5, 176, 189, 232, 240,
-        143, 3, 70, 16, 181, 8, 104, 12, 70, 22, 34, 25, 70, 206, 247, 70, 251,
-        35, 104, 22, 32, 22, 51, 35, 96, 16, 189, 45, 233, 247, 67, 2, 35, 1,
-        145, 4, 70, 11, 112, 84, 248, 4, 59, 13, 70, 75, 112, 23, 70, 255, 247,
-        146, 254, 129, 70, 255, 247, 143, 254, 128, 70, 255, 247, 140, 254,
-        6, 70, 255, 247, 137, 254, 79, 234, 9, 105, 73, 234, 16, 105, 8, 244,
-        127, 72, 73, 234, 8, 41, 6, 244, 127, 6, 73, 234, 22, 38, 110, 96, 56,
-        70, 255, 247, 123, 254, 6, 70, 56, 70, 255, 247, 119, 254, 0, 10, 64,
-        234, 6, 38, 110, 128, 0, 38, 46, 114, 110, 114, 1, 155, 10, 51, 1, 147,
-        104, 120, 255, 247, 108, 254, 10, 37, 128, 70, 7, 224, 32, 70, 1, 169,
-        58, 70, 255, 247, 180, 255, 22, 52, 45, 24, 1, 54, 70, 69, 245, 209,
-        40, 70, 189, 232, 254, 131, 16, 181, 4, 70, 84, 248, 4, 11, 255, 247,
-        238, 254, 111, 240, 127, 1, 2, 70, 32, 70, 189, 232, 16, 64, 207, 243,
-        68, 183, 8, 181, 255, 247, 227, 254, 4, 48, 8, 189, 56, 181, 4, 70,
-        8, 70, 13, 70, 255, 247, 245, 255, 111, 240, 127, 1, 2, 70, 32, 70,
-        207, 243, 51, 247, 37, 96, 56, 189, 56, 181, 8, 70, 13, 70, 255, 247,
-        232, 255, 212, 247, 144, 253, 4, 70, 16, 177, 41, 70, 255, 247, 230,
-        255, 32, 70, 56, 189, 16, 181, 8, 104, 12, 70, 255, 247, 218, 255, 32,
-        70, 189, 232, 16, 64, 212, 247, 130, 189, 0, 104, 112, 71, 2, 32, 112,
-        71, 56, 181, 20, 70, 29, 70, 255, 247, 126, 254, 80, 177, 33, 70, 255,
-        247, 144, 254, 1, 70, 40, 177, 40, 70, 4, 34, 206, 247, 174, 250, 4,
-        32, 56, 189, 40, 70, 111, 240, 127, 1, 4, 34, 207, 243, 254, 246, 0,
-        32, 56, 189, 112, 181, 4, 156, 21, 70, 30, 70, 255, 247, 100, 254, 88,
-        177, 41, 70, 50, 70, 255, 247, 121, 254, 1, 70, 40, 177, 32, 70, 8,
-        34, 206, 247, 147, 250, 8, 32, 112, 189, 32, 70, 111, 240, 127, 1, 8,
-        34, 207, 243, 227, 246, 0, 32, 112, 189, 112, 181, 5, 156, 21, 70, 30,
-        70, 255, 247, 73, 254, 96, 177, 41, 70, 50, 70, 4, 155, 255, 247, 99,
-        254, 1, 70, 40, 177, 32, 70, 10, 34, 206, 247, 119, 250, 10, 32, 112,
-        189, 32, 70, 111, 240, 127, 1, 10, 34, 207, 243, 199, 246, 0, 32, 112,
-        189, 112, 181, 5, 156, 21, 70, 30, 70, 255, 247, 45, 254, 96, 177, 41,
-        70, 50, 70, 4, 155, 255, 247, 71, 254, 1, 70, 40, 177, 32, 70, 10, 34,
-        206, 247, 91, 250, 10, 32, 112, 189, 32, 70, 111, 240, 127, 1, 10, 34,
-        207, 243, 171, 246, 0, 32, 112, 189, 56, 181, 29, 70, 20, 70, 255, 247,
-        18, 254, 3, 70, 72, 177, 33, 70, 255, 247, 35, 254, 3, 70, 32, 177,
-        41, 70, 4, 34, 206, 247, 65, 250, 4, 35, 24, 70, 56, 189, 56, 181, 29,
-        70, 20, 70, 255, 247, 255, 253, 3, 70, 80, 177, 33, 70, 42, 70, 255,
-        247, 19, 254, 3, 70, 32, 177, 4, 153, 8, 34, 206, 247, 45, 250, 8, 35,
-        24, 70, 56, 189, 56, 181, 29, 70, 20, 70, 255, 247, 235, 253, 3, 70,
-        88, 177, 4, 155, 33, 70, 42, 70, 255, 247, 4, 254, 3, 70, 32, 177, 5,
-        153, 10, 34, 206, 247, 24, 250, 10, 35, 24, 70, 56, 189, 56, 181, 29,
-        70, 20, 70, 255, 247, 214, 253, 3, 70, 88, 177, 4, 155, 33, 70, 42,
-        70, 255, 247, 239, 253, 3, 70, 32, 177, 5, 153, 10, 34, 206, 247, 3,
-        250, 10, 35, 24, 70, 56, 189, 248, 181, 4, 70, 15, 70, 6, 29, 0, 37,
-        5, 224, 115, 87, 187, 66, 168, 191, 59, 70, 115, 85, 1, 53, 32, 104,
-        255, 247, 235, 253, 133, 66, 244, 211, 40, 70, 248, 189, 0, 32, 112,
-        71, 255, 247, 233, 191, 248, 181, 5, 70, 7, 121, 70, 29, 1, 36, 5, 224,
-        22, 249, 1, 123, 1, 52, 135, 66, 184, 191, 7, 70, 40, 104, 255, 247,
-        212, 253, 132, 66, 120, 178, 243, 211, 248, 189, 45, 233, 240, 65, 4,
-        70, 136, 70, 7, 29, 128, 38, 0, 37, 2, 224, 23, 248, 1, 107, 1, 53,
-        32, 104, 255, 247, 194, 253, 133, 66, 18, 210, 115, 178, 19, 241, 128,
-        15, 243, 208, 67, 69, 241, 208, 11, 224, 23, 249, 1, 59, 19, 241, 128,
-        15, 5, 208, 67, 69, 3, 208, 118, 178, 179, 66, 184, 191, 30, 70, 1,
-        53, 32, 104, 255, 247, 170, 253, 133, 66, 238, 211, 112, 178, 189, 232,
-        240, 129, 56, 181, 4, 70, 84, 248, 4, 11, 13, 70, 255, 247, 158, 253,
-        41, 70, 2, 70, 32, 70, 189, 232, 56, 64, 207, 243, 245, 181, 112, 181,
-        3, 104, 10, 104, 5, 70, 147, 66, 12, 70, 6, 209, 24, 70, 255, 247, 141,
-        253, 41, 29, 2, 70, 32, 29, 86, 224, 0, 33, 255, 247, 82, 253, 0, 33,
-        6, 70, 32, 70, 255, 247, 77, 253, 38, 177, 24, 177, 49, 70, 22, 34,
-        206, 247, 129, 249, 1, 33, 40, 70, 255, 247, 67, 253, 1, 33, 6, 70,
-        32, 70, 255, 247, 62, 253, 38, 177, 24, 177, 49, 70, 22, 34, 206, 247,
-        114, 249, 3, 33, 40, 70, 255, 247, 52, 253, 3, 33, 6, 70, 32, 70, 255,
-        247, 47, 253, 38, 177, 24, 177, 49, 70, 22, 34, 206, 247, 99, 249, 2,
-        33, 40, 70, 255, 247, 37, 253, 2, 33, 6, 70, 32, 70, 255, 247, 32, 253,
-        38, 177, 24, 177, 49, 70, 22, 34, 206, 247, 84, 249, 4, 33, 40, 70,
-        255, 247, 22, 253, 4, 33, 6, 70, 32, 70, 255, 247, 17, 253, 38, 177,
-        24, 177, 49, 70, 22, 34, 206, 247, 69, 249, 40, 70, 5, 33, 255, 247,
-        7, 253, 5, 33, 5, 70, 32, 70, 255, 247, 2, 253, 53, 177, 40, 177, 41,
-        70, 22, 34, 189, 232, 112, 64, 206, 247, 52, 185, 112, 189, 248, 181,
-        4, 70, 15, 70, 6, 29, 0, 37, 7, 224, 115, 93, 90, 178, 128, 50, 28,
-        191, 195, 235, 7, 3, 115, 85, 1, 53, 32, 104, 255, 247, 28, 253, 133,
-        66, 242, 211, 248, 189, 248, 181, 4, 70, 15, 70, 6, 29, 0, 37, 7, 224,
-        115, 93, 90, 178, 128, 50, 28, 191, 199, 235, 3, 3, 115, 85, 1, 53,
-        32, 104, 255, 247, 8, 253, 133, 66, 242, 211, 248, 189, 248, 181, 4,
-        70, 15, 70, 6, 29, 0, 37, 9, 224, 115, 87, 19, 241, 128, 15, 4, 208,
-        123, 67, 100, 34, 147, 251, 242, 243, 115, 85, 1, 53, 32, 104, 255,
-        247, 242, 252, 133, 66, 240, 211, 248, 189, 56, 181, 4, 70, 11, 104,
-        0, 104, 152, 66, 4, 209, 4, 52, 13, 29, 255, 247, 229, 252, 2, 224,
-        0, 32, 5, 70, 4, 70, 0, 35, 6, 224, 225, 86, 234, 86, 145, 66, 184,
-        191, 10, 70, 226, 84, 1, 51, 131, 66, 246, 209, 56, 189, 56, 181, 4,
-        70, 11, 104, 0, 104, 152, 66, 4, 209, 4, 52, 13, 29, 255, 247, 203,
-        252, 2, 224, 0, 32, 5, 70, 4, 70, 0, 35, 6, 224, 225, 86, 234, 86, 145,
-        66, 168, 191, 10, 70, 226, 84, 1, 51, 131, 66, 246, 209, 56, 189, 0,
-        0, 8, 42, 45, 233, 240, 65, 5, 70, 12, 70, 22, 70, 31, 70, 26, 217,
-        10, 104, 17, 75, 209, 248, 4, 128, 18, 186, 154, 66, 152, 250, 136,
-        248, 2, 208, 255, 247, 11, 252, 128, 70, 64, 70, 41, 104, 255, 247,
-        18, 252, 134, 66, 12, 211, 40, 70, 33, 70, 66, 70, 255, 247, 96, 253,
-        56, 96, 0, 32, 189, 232, 240, 129, 111, 240, 13, 0, 189, 232, 240, 129,
-        111, 240, 13, 0, 189, 232, 240, 129, 0, 191, 255, 192, 239, 190, 45,
-        233, 255, 65, 79, 240, 4, 8, 3, 146, 130, 248, 0, 128, 3, 154, 5, 70,
-        1, 50, 1, 41, 14, 70, 31, 70, 10, 156, 3, 146, 21, 208, 2, 211, 2, 41,
-        87, 209, 54, 224, 0, 33, 3, 170, 0, 148, 255, 247, 123, 252, 63, 26,
-        0, 33, 59, 70, 40, 70, 3, 170, 0, 148, 255, 247, 161, 252, 0, 148, 59,
-        26, 0, 33, 40, 70, 32, 224, 3, 33, 3, 170, 0, 148, 255, 247, 105, 252,
-        63, 26, 59, 70, 3, 33, 3, 170, 40, 70, 0, 148, 255, 247, 143, 252, 63,
-        26, 59, 70, 3, 33, 3, 170, 40, 70, 0, 148, 255, 247, 193, 252, 63, 26,
-        49, 70, 59, 70, 40, 70, 3, 170, 0, 148, 255, 247, 127, 252, 0, 148,
-        59, 26, 49, 70, 40, 70, 3, 170, 255, 247, 178, 252, 31, 224, 3, 46,
-        25, 208, 4, 46, 7, 209, 59, 70, 40, 70, 49, 70, 3, 170, 0, 148, 255,
-        247, 62, 252, 63, 26, 59, 70, 49, 70, 3, 170, 40, 70, 0, 148, 255, 247,
-        100, 252, 63, 26, 59, 70, 40, 70, 49, 70, 3, 170, 0, 148, 255, 247,
-        150, 252, 63, 26, 1, 54, 184, 241, 1, 8, 223, 209, 189, 232, 255, 129,
-        4, 32, 112, 71, 56, 181, 2, 34, 12, 70, 0, 35, 5, 70, 48, 240, 46, 219,
-        212, 248, 204, 48, 1, 34, 155, 4, 72, 191, 19, 70, 40, 70, 88, 191,
-        2, 35, 33, 70, 48, 240, 34, 219, 0, 32, 56, 189, 2, 104, 75, 104, 18,
-        104, 146, 248, 173, 32, 106, 177, 211, 248, 204, 32, 82, 4, 11, 212,
-        154, 121, 90, 177, 66, 104, 155, 88, 24, 125, 0, 40, 20, 191, 8, 32,
-        0, 32, 112, 71, 16, 70, 112, 71, 0, 32, 112, 71, 16, 70, 112, 71, 2,
-        104, 75, 104, 18, 104, 146, 248, 173, 32, 178, 177, 211, 248, 204, 32,
-        82, 4, 18, 212, 154, 121, 130, 177, 66, 104, 154, 88, 19, 125, 99, 177,
-        139, 105, 40, 33, 25, 112, 6, 33, 89, 112, 17, 125, 153, 112, 81, 125,
-        217, 112, 209, 138, 153, 128, 18, 139, 218, 128, 0, 32, 112, 71, 67,
-        104, 240, 181, 205, 88, 135, 176, 107, 104, 7, 104, 35, 240, 8, 3, 107,
-        96, 8, 70, 14, 70, 250, 243, 34, 244, 0, 33, 0, 36, 10, 70, 56, 70,
-        247, 243, 74, 241, 56, 70, 49, 70, 14, 34, 35, 70, 0, 148, 1, 148, 2,
-        148, 3, 148, 4, 148, 240, 243, 157, 245, 44, 96, 108, 96, 7, 176, 240,
-        189, 247, 181, 67, 104, 7, 104, 204, 88, 13, 70, 6, 70, 8, 70, 241,
-        243, 222, 240, 41, 70, 107, 70, 56, 70, 1, 170, 49, 240, 64, 223, 35,
-        104, 35, 240, 2, 3, 35, 96, 99, 104, 67, 240, 8, 3, 99, 96, 1, 155,
-        89, 28, 2, 209, 0, 154, 1, 50, 2, 208, 226, 104, 147, 66, 4, 217, 48,
-        70, 41, 70, 255, 247, 186, 255, 9, 224, 210, 26, 79, 244, 122, 115,
-        178, 251, 243, 242, 184, 104, 33, 105, 0, 35, 229, 243, 26, 240, 254,
-        189, 67, 104, 112, 181, 204, 88, 5, 104, 99, 104, 134, 176, 35, 240,
-        4, 3, 99, 96, 40, 70, 4, 34, 14, 70, 13, 240, 93, 219, 3, 70, 16, 177,
-        0, 35, 35, 96, 24, 224, 34, 104, 49, 70, 66, 240, 1, 2, 34, 96, 13,
-        34, 0, 144, 1, 144, 2, 144, 3, 144, 4, 144, 40, 70, 240, 243, 72, 245,
-        40, 105, 1, 33, 17, 240, 134, 223, 40, 105, 3, 33, 17, 240, 130, 223,
-        99, 104, 67, 240, 1, 3, 99, 96, 6, 176, 112, 189, 67, 104, 45, 233,
-        247, 67, 204, 88, 4, 35, 208, 248, 0, 128, 6, 70, 99, 96, 8, 70, 13,
-        70, 217, 247, 127, 251, 0, 240, 249, 248, 79, 244, 122, 119, 144, 251,
-        247, 247, 39, 177, 32, 35, 179, 251, 247, 247, 1, 55, 0, 224, 1, 39,
-        1, 170, 64, 70, 41, 70, 107, 70, 212, 248, 8, 144, 49, 240, 206, 222,
-        1, 154, 80, 28, 2, 209, 0, 155, 1, 51, 8, 208, 227, 104, 154, 66, 5,
-        216, 79, 244, 122, 115, 3, 251, 23, 151, 186, 66, 4, 211, 48, 70, 41,
-        70, 255, 247, 156, 255, 8, 224, 186, 26, 178, 251, 243, 242, 216, 248,
-        8, 0, 33, 105, 0, 35, 228, 243, 171, 247, 189, 232, 254, 131, 248, 181,
-        6, 104, 4, 70, 214, 248, 128, 81, 107, 104, 199, 88, 51, 104, 27, 126,
-        0, 43, 33, 208, 48, 105, 31, 240, 7, 222, 32, 177, 176, 104, 189, 232,
-        248, 64, 214, 247, 6, 184, 123, 104, 153, 7, 5, 213, 40, 70, 33, 70,
-        189, 232, 248, 64, 255, 247, 162, 191, 90, 7, 5, 213, 40, 70, 33, 70,
-        189, 232, 248, 64, 255, 247, 107, 191, 27, 7, 5, 213, 40, 70, 33, 70,
-        189, 232, 248, 64, 255, 247, 17, 191, 248, 189, 2, 104, 90, 177, 97,
-        177, 0, 35, 193, 24, 145, 249, 4, 16, 0, 41, 8, 219, 1, 51, 147, 66,
-        247, 209, 0, 32, 112, 71, 16, 70, 112, 71, 1, 32, 112, 71, 1, 32, 112,
-        71, 0, 240, 64, 115, 179, 241, 128, 127, 3, 209, 0, 240, 127, 0, 49,
-        240, 248, 159, 255, 32, 112, 71, 0, 240, 64, 115, 179, 241, 128, 127,
-        8, 209, 192, 178, 31, 40, 2, 217, 32, 40, 5, 208, 85, 56, 192, 8, 1,
-        48, 112, 71, 1, 32, 112, 71, 1, 32, 112, 71, 0, 240, 64, 115, 179, 241,
-        128, 127, 11, 209, 195, 178, 32, 43, 8, 208, 31, 43, 136, 191, 85, 59,
-        219, 8, 1, 51, 194, 2, 3, 213, 88, 28, 112, 71, 1, 32, 112, 71, 24,
-        70, 112, 71, 16, 181, 4, 70, 255, 247, 231, 255, 4, 244, 64, 115, 0,
-        235, 19, 32, 16, 189, 32, 40, 112, 181, 7, 209, 65, 242, 112, 114, 65,
-        246, 122, 32, 0, 43, 8, 191, 16, 70, 112, 189, 9, 40, 3, 217, 160, 241,
-        87, 4, 1, 44, 51, 216, 87, 40, 3, 208, 88, 40, 8, 191, 9, 32, 0, 224,
-        8, 32, 2, 244, 224, 36, 180, 245, 128, 63, 12, 208, 180, 245, 0, 63,
-        11, 208, 178, 245, 64, 63, 10, 208, 178, 245, 128, 47, 12, 191, 79,
-        244, 234, 114, 0, 34, 4, 224, 52, 34, 2, 224, 108, 34, 0, 224, 234,
-        34, 12, 77, 0, 235, 64, 0, 44, 24, 102, 120, 40, 92, 164, 120, 112,
-        67, 65, 67, 74, 67, 250, 32, 178, 251, 244, 242, 80, 67, 59, 177, 10,
-        35, 88, 67, 9, 35, 4, 48, 176, 251, 243, 240, 112, 189, 0, 32, 112,
-        189, 0, 191, 248, 4, 4, 0, 16, 240, 64, 115, 112, 181, 5, 70, 4, 209,
-        197, 178, 79, 244, 250, 112, 104, 67, 29, 224, 179, 241, 128, 127, 31,
-        209, 192, 178, 32, 40, 5, 244, 0, 4, 3, 209, 1, 33, 79, 244, 0, 50,
-        12, 224, 31, 40, 1, 216, 198, 8, 2, 224, 160, 241, 85, 6, 246, 8, 1,
-        54, 49, 240, 92, 223, 49, 70, 5, 244, 224, 34, 35, 28, 24, 191, 1, 35,
-        255, 247, 142, 255, 0, 40, 8, 191, 79, 240, 255, 48, 112, 189, 79, 240,
-        255, 48, 112, 189, 160, 241, 87, 3, 1, 43, 12, 217, 99, 40, 10, 208,
-        100, 40, 8, 208, 101, 40, 6, 208, 102, 40, 4, 208, 31, 40, 4, 216, 0,
-        240, 7, 0, 2, 224, 9, 32, 0, 224, 0, 32, 1, 75, 83, 248, 32, 0, 112,
-        71, 208, 4, 4, 0, 0, 240, 64, 115, 179, 241, 128, 127, 192, 178, 1,
-        209, 255, 247, 222, 191, 112, 71, 112, 181, 0, 35, 6, 70, 13, 70, 4,
-        224, 114, 25, 210, 24, 0, 33, 81, 117, 1, 51, 90, 25, 3, 42, 247, 221,
-        87, 36, 164, 241, 85, 3, 181, 235, 227, 15, 4, 220, 6, 241, 21, 0, 33,
-        70, 208, 243, 129, 240, 1, 52, 103, 44, 242, 209, 112, 189, 240, 181,
-        4, 70, 0, 104, 139, 176, 24, 179, 0, 33, 40, 34, 104, 70, 207, 243,
-        43, 242, 0, 33, 37, 104, 0, 155, 10, 70, 14, 224, 160, 24, 0, 121, 0,
-        240, 127, 6, 127, 46, 1, 209, 32, 117, 5, 224, 10, 175, 126, 24, 6,
-        248, 36, 12, 1, 49, 1, 51, 1, 50, 170, 66, 238, 209, 32, 70, 64, 248,
-        4, 59, 1, 169, 16, 34, 0, 147, 205, 247, 181, 253, 1, 32, 11, 176, 240,
-        189, 240, 181, 157, 176, 4, 70, 13, 70, 22, 70, 104, 70, 0, 33, 109,
-        34, 207, 243, 0, 242, 32, 104, 0, 35, 13, 224, 226, 24, 17, 121, 1,
-        240, 127, 2, 108, 42, 6, 216, 25, 79, 191, 92, 31, 177, 28, 175, 186,
-        24, 2, 248, 112, 28, 1, 51, 131, 66, 239, 209, 0, 35, 40, 104, 26, 70,
-        12, 224, 233, 24, 9, 121, 28, 175, 1, 240, 127, 1, 121, 24, 17, 248,
-        112, 28, 17, 177, 167, 24, 57, 113, 1, 50, 1, 51, 131, 66, 240, 209,
-        34, 96, 0, 35, 34, 70, 233, 24, 72, 125, 81, 125, 1, 51, 1, 64, 81,
-        117, 1, 50, 16, 43, 246, 209, 32, 70, 49, 70, 255, 247, 141, 254, 0,
-        48, 24, 191, 1, 32, 29, 176, 240, 189, 0, 191, 224, 248, 135, 0, 66,
-        120, 3, 120, 18, 2, 154, 24, 192, 120, 2, 244, 224, 83, 155, 10, 1,
-        51, 0, 9, 17, 7, 72, 191, 91, 8, 64, 240, 128, 0, 64, 234, 3, 16, 112,
-        71, 16, 181, 4, 70, 255, 247, 234, 255, 35, 120, 98, 120, 33, 121, 67,
-        234, 2, 34, 227, 120, 0, 240, 127, 0, 67, 234, 1, 35, 64, 240, 0, 113,
-        2, 240, 3, 0, 1, 48, 65, 234, 0, 64, 17, 7, 72, 191, 64, 244, 128, 16,
-        218, 7, 72, 191, 64, 244, 0, 0, 91, 7, 72, 191, 64, 244, 128, 0, 16,
-        189, 16, 181, 131, 136, 12, 70, 3, 240, 3, 3, 2, 43, 17, 208, 3, 43,
-        45, 208, 1, 43, 4, 208, 8, 120, 5, 35, 176, 251, 243, 240, 5, 224, 244,
-        247, 232, 255, 35, 120, 3, 240, 7, 3, 192, 92, 64, 244, 128, 48, 16,
-        189, 10, 120, 227, 120, 9, 121, 2, 240, 127, 0, 18, 6, 88, 191, 64,
-        240, 128, 112, 67, 234, 1, 35, 76, 191, 64, 240, 129, 112, 64, 244,
-        128, 48, 25, 6, 72, 191, 64, 244, 0, 0, 90, 6, 72, 191, 64, 244, 128,
-        0, 19, 240, 48, 15, 7, 208, 64, 244, 128, 16, 16, 189, 8, 70, 189, 232,
-        16, 64, 255, 247, 162, 191, 16, 189, 3, 70, 40, 34, 8, 70, 25, 70, 205,
-        247, 243, 188, 0, 0, 17, 74, 45, 233, 240, 65, 208, 248, 0, 192, 23,
-        104, 0, 35, 22, 70, 21, 224, 193, 24, 181, 24, 12, 121, 45, 121, 133,
-        234, 4, 8, 24, 240, 127, 15, 2, 209, 42, 6, 9, 213, 5, 224, 1, 50, 0,
-        224, 0, 34, 186, 66, 238, 209, 2, 224, 100, 240, 127, 4, 12, 113, 1,
-        51, 99, 69, 245, 209, 189, 232, 240, 129, 0, 191, 184, 248, 135, 0,
-        16, 181, 0, 35, 7, 74, 217, 0, 82, 248, 51, 64, 160, 66, 2, 209, 82,
-        24, 16, 121, 4, 224, 1, 51, 12, 43, 243, 209, 79, 246, 255, 112, 0,
-        178, 16, 189, 24, 5, 4, 0, 45, 233, 247, 79, 3, 104, 79, 244, 250, 121,
-        195, 24, 147, 248, 3, 128, 157, 248, 52, 160, 8, 240, 127, 8, 9, 251,
-        8, 249, 4, 70, 1, 145, 147, 70, 0, 38, 163, 25, 91, 125, 0, 43, 56,
-        208, 245, 0, 237, 178, 0, 39, 102, 45, 51, 216, 4, 241, 21, 0, 41, 70,
-        207, 243, 136, 247, 56, 187, 31, 45, 1, 216, 235, 8, 7, 224, 32, 45,
-        7, 208, 181, 241, 85, 3, 72, 191, 165, 241, 78, 3, 219, 16, 1, 51, 0,
-        224, 1, 35, 83, 69, 22, 220, 1, 155, 1, 43, 6, 191, 69, 240, 128, 115,
-        67, 244, 128, 51, 69, 240, 129, 115, 187, 241, 0, 15, 1, 208, 67, 244,
-        0, 3, 24, 70, 0, 147, 255, 247, 40, 254, 0, 155, 72, 69, 132, 191, 129,
-        70, 152, 70, 1, 55, 255, 178, 1, 53, 8, 47, 237, 178, 201, 209, 1, 54,
-        16, 46, 191, 209, 64, 70, 189, 232, 254, 143, 0, 35, 194, 24, 1, 51,
-        0, 33, 16, 43, 81, 117, 249, 209, 112, 71, 0, 0, 45, 233, 240, 71, 31,
-        70, 0, 35, 12, 70, 5, 70, 221, 248, 32, 128, 157, 248, 36, 96, 208,
-        248, 0, 144, 25, 70, 41, 224, 104, 24, 0, 121, 18, 177, 16, 240, 128,
-        15, 34, 208, 1, 47, 9, 209, 223, 248, 148, 160, 0, 240, 127, 12, 26,
-        249, 12, 192, 188, 241, 0, 15, 16, 218, 22, 224, 2, 47, 13, 209, 0,
-        240, 127, 12, 188, 241, 2, 15, 15, 208, 188, 241, 4, 15, 12, 208, 188,
-        241, 11, 15, 9, 208, 188, 241, 22, 15, 6, 208, 4, 235, 3, 12, 0, 234,
-        8, 0, 140, 248, 4, 0, 1, 51, 1, 49, 73, 69, 211, 209, 2, 47, 35, 96,
-        5, 209, 184, 241, 255, 15, 2, 209, 32, 70, 255, 247, 37, 255, 43, 125,
-        240, 7, 35, 117, 18, 213, 1, 47, 16, 208, 165, 66, 6, 208, 4, 241, 21,
-        0, 5, 241, 21, 1, 16, 34, 205, 247, 8, 252, 113, 7, 11, 212, 4, 241,
-        21, 0, 189, 232, 240, 71, 49, 240, 42, 157, 32, 70, 255, 247, 154, 255,
-        79, 240, 255, 51, 227, 132, 189, 232, 240, 135, 224, 248, 135, 0, 56,
-        181, 16, 34, 4, 70, 13, 70, 21, 48, 4, 73, 205, 247, 238, 251, 32, 70,
-        41, 70, 189, 232, 56, 64, 255, 247, 239, 189, 33, 240, 135, 0, 40, 41,
-        0, 241, 21, 0, 79, 240, 32, 1, 1, 209, 208, 243, 0, 178, 207, 243, 124,
-        182, 45, 233, 240, 65, 140, 176, 26, 75, 157, 248, 84, 128, 25, 78,
-        7, 70, 184, 241, 20, 15, 8, 191, 30, 70, 0, 41, 24, 191, 14, 70, 157,
-        248, 88, 64, 48, 70, 2, 169, 157, 248, 80, 80, 255, 247, 204, 254, 2,
-        168, 65, 70, 255, 247, 219, 255, 2, 168, 33, 70, 255, 247, 196, 253,
-        19, 155, 0, 34, 141, 232, 40, 0, 157, 248, 72, 48, 2, 168, 155, 26,
-        24, 191, 1, 35, 57, 70, 255, 247, 86, 255, 0, 34, 56, 70, 49, 70, 149,
-        66, 20, 191, 35, 70, 1, 35, 255, 247, 245, 253, 12, 176, 189, 232, 240,
-        129, 12, 240, 135, 0, 228, 239, 135, 0, 111, 240, 22, 0, 112, 71, 0,
-        0, 5, 75, 0, 32, 83, 248, 4, 47, 138, 66, 4, 208, 1, 48, 192, 178, 43,
-        40, 247, 209, 0, 32, 112, 71, 140, 5, 4, 0, 144, 248, 194, 48, 19, 240,
-        1, 3, 26, 191, 64, 24, 144, 248, 43, 0, 24, 70, 112, 71, 240, 181, 3,
-        70, 144, 248, 208, 64, 144, 248, 183, 96, 13, 224, 29, 25, 149, 248,
-        148, 112, 32, 70, 151, 66, 5, 211, 47, 122, 5, 77, 21, 248, 39, 80,
-        141, 66, 5, 208, 1, 52, 228, 178, 180, 66, 239, 211, 79, 240, 255, 48,
-        240, 189, 144, 5, 4, 0, 248, 181, 30, 70, 144, 248, 193, 48, 21, 70,
-        195, 24, 36, 79, 26, 122, 1, 41, 4, 70, 147, 248, 148, 192, 87, 248,
-        34, 0, 7, 209, 147, 248, 78, 48, 43, 112, 148, 248, 193, 32, 154, 66,
-        41, 209, 52, 224, 1, 49, 50, 209, 147, 248, 113, 32, 42, 112, 148, 248,
-        193, 48, 147, 66, 45, 208, 64, 234, 12, 67, 19, 240, 64, 127, 26, 209,
-        3, 240, 127, 3, 22, 43, 22, 216, 20, 74, 154, 64, 19, 213, 99, 104,
-        154, 126, 130, 177, 148, 248, 214, 32, 106, 177, 211, 248, 140, 32,
-        82, 177, 32, 104, 144, 71, 99, 104, 179, 249, 24, 48, 152, 66, 3, 219,
-        148, 248, 193, 48, 43, 112, 11, 224, 43, 120, 1, 32, 228, 24, 35, 122,
-        148, 248, 148, 32, 87, 248, 35, 48, 67, 234, 2, 67, 51, 96, 248, 189,
-        0, 32, 248, 189, 0, 32, 248, 189, 144, 5, 4, 0, 0, 2, 16, 40, 56, 181,
-        144, 248, 193, 16, 4, 70, 255, 247, 128, 255, 32, 24, 21, 73, 3, 122,
-        144, 248, 148, 32, 148, 248, 193, 0, 81, 248, 35, 48, 32, 24, 67, 234,
-        2, 67, 2, 122, 144, 248, 148, 80, 81, 248, 34, 32, 212, 248, 16, 17,
-        66, 234, 5, 66, 145, 66, 5, 208, 196, 248, 16, 33, 79, 244, 128, 82,
-        196, 248, 20, 33, 212, 248, 52, 33, 154, 66, 3, 209, 212, 248, 56, 33,
-        1, 50, 5, 209, 196, 248, 52, 49, 79, 244, 128, 83, 196, 248, 56, 49,
-        56, 189, 144, 5, 4, 0, 144, 248, 194, 32, 67, 104, 7, 42, 2, 209, 147,
-        248, 152, 0, 112, 71, 210, 7, 3, 213, 147, 248, 152, 0, 64, 8, 112,
-        71, 4, 32, 112, 71, 112, 181, 144, 248, 210, 48, 4, 70, 13, 70, 0, 43,
-        0, 240, 217, 128, 144, 248, 193, 32, 144, 248, 208, 48, 154, 66, 192,
-        240, 212, 128, 144, 249, 211, 96, 255, 247, 221, 255, 113, 28, 1, 208,
-        12, 46, 33, 209, 99, 104, 212, 248, 112, 33, 91, 104, 155, 106, 147,
-        66, 4, 210, 148, 248, 116, 17, 211, 26, 139, 66, 4, 217, 0, 35, 132,
-        248, 211, 48, 93, 185, 97, 224, 0, 45, 95, 208, 12, 46, 6, 209, 148,
-        248, 64, 49, 131, 66, 2, 211, 0, 35, 132, 248, 211, 48, 148, 249, 211,
-        0, 0, 40, 85, 208, 0, 38, 89, 224, 0, 46, 87, 208, 0, 45, 0, 240, 167,
-        128, 148, 248, 211, 32, 148, 249, 106, 17, 83, 178, 153, 66, 0, 240,
-        161, 128, 132, 248, 106, 33, 148, 248, 64, 33, 130, 66, 9, 210, 212,
-        248, 108, 33, 10, 33, 81, 67, 212, 248, 20, 33, 2, 235, 194, 2, 145,
-        66, 3, 210, 255, 35, 132, 248, 211, 48, 6, 224, 11, 43, 4, 209, 12,
-        35, 132, 248, 211, 48, 1, 35, 0, 224, 0, 35, 148, 248, 211, 16, 74,
-        30, 210, 178, 10, 42, 38, 217, 98, 104, 148, 248, 116, 1, 86, 104, 182,
-        106, 134, 25, 196, 248, 112, 97, 148, 248, 117, 97, 158, 66, 8, 209,
-        146, 248, 154, 48, 64, 0, 152, 66, 168, 191, 24, 70, 132, 248, 116,
-        1, 5, 224, 146, 248, 153, 32, 132, 248, 117, 49, 132, 248, 116, 33,
-        12, 41, 12, 209, 212, 248, 108, 49, 196, 248, 20, 49, 7, 224, 46, 70,
-        40, 70, 6, 224, 1, 38, 4, 224, 0, 38, 1, 32, 1, 224, 1, 38, 48, 70,
-        148, 249, 211, 48, 0, 43, 65, 209, 213, 177, 79, 244, 128, 82, 196,
-        248, 20, 33, 196, 248, 56, 33, 98, 104, 196, 248, 188, 48, 82, 104,
-        146, 106, 196, 248, 60, 33, 79, 240, 255, 50, 196, 248, 44, 33, 196,
-        248, 32, 33, 148, 248, 192, 32, 2, 42, 152, 191, 83, 28, 132, 248, 192,
-        48, 1, 38, 99, 104, 212, 248, 188, 32, 91, 123, 154, 66, 31, 211, 148,
-        248, 64, 49, 227, 185, 148, 248, 245, 48, 218, 7, 24, 212, 180, 248,
-        0, 49, 219, 7, 20, 212, 148, 248, 193, 48, 148, 248, 210, 32, 227, 24,
-        147, 248, 148, 48, 82, 250, 3, 243, 217, 7, 9, 213, 212, 248, 20, 49,
-        1, 32, 132, 248, 211, 0, 132, 248, 106, 1, 196, 248, 108, 49, 0, 224,
-        102, 177, 212, 248, 196, 48, 75, 177, 0, 34, 26, 96, 112, 189, 24, 70,
-        112, 189, 0, 32, 112, 189, 1, 32, 112, 189, 1, 32, 112, 189, 208, 248,
-        204, 48, 48, 181, 1, 43, 26, 209, 144, 248, 245, 32, 2, 240, 17, 1,
-        16, 41, 59, 209, 208, 248, 188, 16, 208, 248, 228, 64, 100, 24, 144,
-        248, 246, 16, 180, 251, 241, 245, 1, 251, 21, 65, 144, 248, 247, 80,
-        169, 66, 44, 209, 66, 240, 1, 2, 128, 248, 245, 32, 24, 70, 48, 189,
-        2, 43, 36, 209, 176, 248, 0, 49, 19, 240, 1, 4, 31, 209, 176, 248, 10,
-        33, 242, 177, 208, 248, 228, 80, 208, 248, 188, 16, 105, 24, 177, 251,
-        242, 245, 2, 251, 21, 18, 176, 248, 12, 81, 170, 66, 19, 209, 144, 248,
-        8, 33, 18, 185, 3, 244, 128, 114, 1, 224, 3, 240, 16, 2, 146, 178, 90,
-        177, 67, 240, 1, 3, 160, 248, 0, 49, 1, 32, 48, 189, 0, 32, 48, 189,
-        16, 70, 48, 189, 32, 70, 48, 189, 16, 70, 48, 189, 16, 181, 144, 248,
-        194, 48, 4, 70, 7, 43, 7, 208, 7, 35, 128, 248, 194, 48, 208, 248, 196,
-        48, 11, 177, 0, 34, 26, 96, 99, 104, 147, 248, 145, 32, 122, 177, 210,
-        7, 3, 213, 90, 104, 146, 106, 196, 248, 100, 33, 147, 248, 145, 32,
-        144, 7, 5, 213, 211, 248, 140, 48, 32, 104, 152, 71, 196, 248, 96, 1,
-        16, 189, 112, 181, 69, 104, 4, 70, 149, 248, 145, 48, 14, 70, 0, 43,
-        49, 208, 144, 248, 194, 32, 209, 7, 45, 213, 218, 7, 8, 213, 106, 104,
-        145, 106, 208, 248, 100, 33, 137, 26, 181, 248, 150, 32, 145, 66, 34,
-        219, 153, 7, 21, 213, 212, 248, 96, 49, 235, 177, 213, 248, 140, 48,
-        32, 104, 152, 71, 16, 241, 65, 15, 22, 218, 212, 248, 96, 49, 181, 249,
-        146, 32, 19, 241, 65, 15, 168, 191, 111, 240, 64, 3, 27, 26, 147, 66,
-        10, 221, 148, 248, 194, 48, 3, 240, 253, 3, 132, 248, 194, 48, 30, 185,
-        35, 240, 1, 3, 132, 248, 194, 48, 112, 189, 144, 248, 41, 48, 128, 248,
-        70, 48, 0, 35, 67, 101, 3, 101, 195, 100, 112, 71, 195, 108, 130, 108,
-        17, 177, 147, 66, 6, 210, 12, 224, 29, 33, 74, 67, 178, 235, 67, 31,
-        34, 217, 6, 224, 144, 248, 70, 48, 128, 248, 69, 48, 0, 35, 131, 100,
-        23, 224, 144, 248, 69, 48, 128, 248, 70, 48, 176, 248, 88, 48, 91, 0,
-        179, 245, 32, 127, 168, 191, 79, 244, 32, 115, 160, 248, 88, 48, 176,
-        248, 90, 48, 91, 0, 179, 245, 72, 111, 168, 191, 79, 244, 72, 99, 160,
-        248, 90, 48, 0, 35, 3, 101, 67, 101, 112, 71, 48, 181, 144, 248, 69,
-        80, 144, 248, 70, 64, 10, 70, 172, 66, 29, 209, 144, 248, 41, 16, 161,
-        66, 50, 208, 1, 42, 10, 208, 2, 42, 12, 208, 0, 42, 44, 209, 40, 34,
-        160, 248, 88, 32, 200, 34, 160, 248, 90, 32, 8, 224, 176, 248, 88, 32,
-        67, 109, 2, 224, 176, 248, 90, 32, 3, 109, 147, 66, 28, 211, 189, 232,
-        48, 64, 255, 247, 162, 191, 1, 41, 2, 208, 2, 41, 20, 209, 5, 224, 176,
-        248, 92, 32, 67, 109, 147, 66, 14, 211, 9, 224, 2, 109, 176, 248, 94,
-        48, 154, 66, 1, 211, 1, 33, 2, 224, 4, 42, 4, 217, 0, 33, 189, 232,
-        48, 64, 255, 247, 146, 191, 48, 189, 48, 181, 3, 70, 64, 104, 144, 248,
-        40, 32, 1, 42, 80, 217, 179, 248, 14, 33, 1, 50, 146, 178, 10, 42, 163,
-        248, 14, 33, 72, 217, 0, 34, 163, 248, 14, 33, 144, 248, 67, 48, 97,
-        240, 127, 4, 194, 24, 23, 43, 130, 248, 42, 64, 2, 208, 1, 51, 219,
-        178, 0, 224, 0, 35, 1, 240, 7, 2, 132, 24, 148, 248, 32, 80, 128, 248,
-        67, 48, 1, 53, 132, 248, 32, 80, 179, 241, 19, 4, 72, 191, 92, 29, 4,
-        25, 148, 248, 42, 48, 19, 240, 128, 15, 7, 208, 3, 240, 7, 3, 195, 24,
-        147, 248, 32, 64, 1, 60, 131, 248, 32, 64, 130, 24, 146, 248, 32, 32,
-        144, 248, 41, 48, 13, 42, 10, 217, 1, 240, 7, 1, 139, 66, 6, 208, 144,
-        248, 68, 48, 128, 248, 41, 16, 99, 177, 0, 33, 6, 224, 144, 248, 68,
-        48, 59, 177, 67, 109, 1, 33, 1, 51, 67, 101, 189, 232, 48, 64, 255,
-        247, 104, 191, 48, 189, 48, 181, 100, 36, 76, 67, 180, 251, 243, 245,
-        84, 67, 3, 154, 237, 178, 83, 67, 100, 61, 5, 235, 213, 117, 109, 16,
-        100, 53, 237, 178, 180, 251, 243, 244, 165, 66, 128, 248, 88, 81, 140,
-        191, 0, 37, 1, 37, 1, 35, 128, 248, 84, 81, 128, 248, 85, 49, 48, 189,
-        145, 66, 52, 191, 0, 34, 1, 34, 1, 35, 128, 248, 86, 33, 128, 248, 87,
-        49, 112, 71, 45, 233, 240, 65, 30, 70, 144, 248, 243, 48, 4, 70, 255,
-        43, 6, 157, 0, 240, 188, 128, 255, 42, 0, 240, 185, 128, 0, 45, 0, 240,
-        185, 128, 144, 248, 242, 48, 83, 64, 19, 240, 120, 15, 64, 240, 181,
-        128, 67, 104, 27, 122, 0, 43, 97, 208, 144, 248, 209, 0, 66, 240, 128,
-        114, 66, 234, 0, 64, 255, 247, 211, 249, 148, 248, 193, 48, 79, 244,
-        250, 120, 227, 24, 144, 251, 248, 247, 26, 122, 147, 248, 148, 0, 81,
-        75, 54, 3, 83, 248, 34, 48, 126, 67, 67, 234, 0, 64, 255, 247, 192,
-        249, 212, 248, 20, 49, 144, 251, 248, 240, 67, 67, 184, 66, 182, 251,
-        245, 245, 3, 217, 29, 34, 83, 67, 91, 9, 3, 224, 2, 210, 29, 34, 85,
-        67, 109, 9, 212, 248, 224, 32, 34, 185, 196, 248, 68, 81, 196, 248,
-        72, 49, 97, 224, 17, 42, 212, 248, 68, 17, 15, 216, 80, 30, 1, 251,
-        0, 85, 212, 248, 72, 17, 181, 251, 242, 245, 1, 251, 0, 51, 179, 251,
-        242, 242, 196, 248, 68, 81, 196, 248, 72, 33, 77, 224, 98, 104, 208,
-        122, 49, 250, 0, 240, 9, 26, 196, 248, 68, 17, 208, 122, 197, 64, 105,
-        24, 196, 248, 68, 17, 212, 248, 72, 1, 209, 122, 48, 250, 1, 241, 65,
-        26, 196, 248, 72, 17, 210, 122, 211, 64, 89, 24, 196, 248, 72, 17, 51,
-        224, 144, 248, 240, 32, 174, 27, 2, 240, 7, 7, 1, 32, 184, 64, 117,
-        66, 69, 235, 6, 5, 21, 250, 7, 247, 4, 235, 210, 1, 145, 248, 236, 96,
-        192, 178, 7, 64, 38, 234, 0, 0, 56, 67, 23, 42, 129, 248, 236, 0, 1,
-        208, 83, 28, 219, 178, 179, 241, 19, 2, 72, 191, 90, 29, 132, 248, 240,
-        48, 1, 32, 2, 240, 7, 3, 152, 64, 4, 235, 226, 2, 146, 248, 236, 16,
-        148, 248, 239, 96, 0, 234, 1, 2, 82, 250, 3, 243, 173, 25, 237, 178,
-        235, 26, 132, 248, 239, 48, 212, 248, 224, 48, 89, 28, 2, 208, 1, 51,
-        196, 248, 224, 48, 212, 248, 228, 48, 90, 28, 2, 208, 1, 51, 196, 248,
-        228, 48, 148, 248, 243, 48, 1, 32, 132, 248, 244, 48, 189, 232, 240,
-        129, 0, 32, 189, 232, 240, 129, 40, 70, 189, 232, 240, 129, 0, 32, 189,
-        232, 240, 129, 0, 191, 144, 5, 4, 0, 45, 233, 248, 67, 144, 248, 193,
-        192, 4, 70, 96, 68, 117, 73, 7, 122, 9, 157, 8, 158, 81, 248, 39, 112,
-        144, 248, 148, 0, 137, 70, 0, 45, 0, 240, 215, 128, 71, 234, 0, 71,
-        148, 248, 8, 17, 23, 240, 64, 127, 20, 191, 255, 178, 255, 39, 49, 185,
-        151, 66, 2, 209, 148, 248, 252, 0, 12, 224, 8, 70, 16, 224, 1, 41, 64,
-        240, 198, 128, 151, 66, 10, 208, 122, 64, 18, 240, 120, 0, 7, 208, 148,
-        248, 253, 0, 195, 26, 88, 66, 64, 235, 3, 0, 0, 224, 0, 32, 192, 178,
-        0, 40, 0, 240, 184, 128, 9, 177, 148, 248, 254, 192, 99, 104, 27, 122,
-        0, 43, 99, 208, 4, 235, 12, 3, 147, 248, 148, 0, 27, 122, 79, 244, 250,
-        120, 89, 248, 35, 48, 54, 3, 67, 234, 0, 64, 255, 247, 215, 248, 148,
-        248, 193, 48, 144, 251, 248, 247, 227, 24, 147, 248, 148, 0, 27, 122,
-        126, 67, 89, 248, 35, 48, 67, 234, 0, 64, 255, 247, 200, 248, 212, 248,
-        20, 49, 144, 251, 248, 240, 67, 67, 184, 66, 182, 251, 245, 245, 3,
-        217, 29, 34, 83, 67, 91, 9, 3, 224, 2, 210, 29, 34, 85, 67, 109, 9,
-        212, 248, 224, 32, 34, 185, 196, 248, 76, 81, 196, 248, 80, 49, 98,
-        224, 17, 42, 212, 248, 76, 17, 15, 216, 80, 30, 1, 251, 0, 85, 212,
-        248, 80, 17, 181, 251, 242, 245, 1, 251, 0, 51, 179, 251, 242, 242,
-        196, 248, 76, 81, 196, 248, 80, 33, 78, 224, 98, 104, 208, 122, 49,
-        250, 0, 240, 9, 26, 196, 248, 76, 17, 208, 122, 197, 64, 105, 24, 196,
-        248, 76, 17, 212, 248, 80, 1, 209, 122, 48, 250, 1, 241, 65, 26, 196,
-        248, 80, 17, 210, 122, 211, 64, 89, 24, 196, 248, 80, 17, 52, 224, 148,
-        248, 2, 33, 174, 27, 2, 240, 7, 7, 1, 32, 184, 64, 117, 66, 69, 235,
-        6, 5, 21, 250, 7, 247, 4, 235, 210, 1, 145, 248, 5, 97, 192, 178, 7,
-        64, 38, 234, 0, 0, 56, 67, 29, 42, 129, 248, 5, 1, 1, 208, 83, 28, 219,
-        178, 179, 241, 19, 2, 72, 191, 3, 241, 11, 2, 132, 248, 2, 49, 1, 32,
-        2, 240, 7, 3, 152, 64, 4, 235, 226, 2, 146, 248, 5, 17, 148, 248, 3,
-        97, 0, 234, 1, 2, 82, 250, 3, 243, 173, 25, 237, 178, 235, 26, 132,
-        248, 3, 49, 212, 248, 224, 48, 89, 28, 2, 208, 1, 51, 196, 248, 224,
-        48, 212, 248, 228, 48, 90, 28, 11, 208, 1, 51, 196, 248, 228, 48, 1,
-        32, 189, 232, 248, 131, 40, 70, 189, 232, 248, 131, 0, 32, 189, 232,
-        248, 131, 1, 32, 189, 232, 248, 131, 144, 5, 4, 0, 45, 233, 240, 79,
-        133, 176, 157, 248, 56, 176, 154, 70, 157, 248, 76, 48, 4, 70, 0, 43,
-        24, 191, 79, 240, 1, 11, 21, 70, 157, 248, 60, 144, 157, 248, 64, 128,
-        157, 248, 68, 112, 157, 248, 80, 96, 255, 247, 80, 251, 148, 248, 193,
-        32, 105, 75, 162, 24, 146, 248, 148, 16, 18, 122, 83, 248, 34, 48, 67,
-        234, 1, 67, 212, 248, 204, 16, 218, 178, 1, 41, 11, 209, 186, 66, 44,
-        208, 193, 69, 17, 210, 32, 70, 58, 70, 43, 70, 205, 248, 0, 160, 255,
-        247, 7, 254, 26, 224, 2, 41, 29, 209, 186, 66, 3, 209, 148, 248, 251,
-        32, 178, 66, 26, 208, 193, 69, 8, 211, 212, 248, 232, 48, 88, 28, 0,
-        240, 165, 128, 1, 51, 196, 248, 232, 48, 160, 224, 32, 70, 1, 33, 58,
-        70, 51, 70, 141, 232, 32, 4, 255, 247, 189, 254, 0, 40, 20, 191, 1,
-        32, 2, 32, 150, 224, 151, 66, 64, 240, 145, 128, 29, 177, 193, 69, 8,
-        216, 0, 34, 4, 224, 193, 69, 4, 211, 148, 248, 64, 33, 1, 50, 132, 248,
-        64, 33, 98, 104, 210, 126, 18, 185, 193, 69, 127, 210, 7, 224, 193,
-        69, 5, 217, 186, 235, 69, 15, 212, 191, 2, 32, 0, 32, 121, 224, 187,
-        241, 0, 15, 11, 209, 186, 241, 0, 15, 8, 208, 85, 69, 6, 209, 193, 69,
-        4, 210, 32, 70, 3, 147, 255, 247, 101, 252, 3, 155, 148, 248, 249, 32,
-        98, 177, 98, 104, 212, 248, 216, 16, 82, 127, 145, 66, 6, 211, 212,
-        248, 196, 32, 0, 33, 132, 248, 249, 16, 2, 177, 17, 96, 193, 69, 3,
-        211, 212, 248, 52, 33, 154, 66, 17, 209, 157, 248, 72, 48, 91, 177,
-        148, 248, 211, 48, 90, 30, 210, 178, 10, 42, 5, 216, 1, 51, 4, 245,
-        182, 118, 132, 248, 211, 48, 4, 224, 4, 245, 138, 118, 1, 224, 4, 245,
-        156, 118, 148, 248, 194, 48, 45, 3, 149, 251, 250, 245, 67, 177, 99,
-        104, 212, 248, 188, 16, 90, 123, 145, 66, 148, 191, 31, 123, 223, 122,
-        0, 224, 2, 39, 99, 104, 27, 104, 27, 104, 147, 248, 229, 48, 67, 177,
-        4, 245, 138, 115, 158, 66, 4, 209, 32, 70, 41, 70, 50, 104, 255, 247,
-        103, 253, 51, 104, 253, 64, 51, 250, 7, 247, 237, 24, 235, 27, 51, 96,
-        4, 245, 156, 115, 158, 66, 4, 209, 99, 104, 91, 104, 155, 106, 196,
-        248, 60, 49, 212, 248, 216, 48, 89, 28, 2, 208, 1, 51, 196, 248, 216,
-        48, 212, 248, 188, 48, 90, 28, 5, 208, 1, 51, 196, 248, 188, 48, 1,
-        224, 2, 32, 0, 224, 0, 32, 5, 176, 189, 232, 240, 143, 144, 5, 4, 0,
-        56, 181, 8, 70, 29, 70, 20, 70, 254, 247, 58, 255, 168, 66, 5, 211,
-        52, 177, 160, 66, 140, 191, 0, 32, 1, 32, 56, 189, 0, 32, 56, 189, 1,
-        32, 56, 189, 112, 181, 5, 70, 144, 248, 183, 64, 14, 70, 129, 185, 20,
-        224, 43, 25, 147, 248, 148, 0, 26, 122, 12, 75, 83, 248, 34, 48, 67,
-        234, 0, 64, 254, 247, 28, 255, 134, 66, 7, 217, 1, 52, 228, 178, 0,
-        224, 0, 36, 149, 248, 183, 48, 163, 66, 234, 216, 149, 248, 183, 48,
-        163, 66, 1, 209, 1, 60, 228, 178, 32, 70, 112, 189, 144, 5, 4, 0, 56,
-        181, 0, 37, 4, 70, 192, 248, 232, 80, 192, 248, 224, 80, 41, 70, 236,
-        48, 3, 34, 206, 243, 160, 241, 132, 248, 239, 80, 132, 248, 240, 80,
-        196, 248, 68, 81, 196, 248, 72, 81, 56, 189, 0, 0, 208, 248, 224, 48,
-        112, 181, 17, 43, 4, 70, 77, 217, 144, 248, 243, 16, 144, 248, 193,
-        32, 145, 66, 71, 208, 144, 248, 183, 48, 139, 66, 67, 217, 130, 24,
-        16, 122, 34, 75, 146, 248, 148, 32, 83, 248, 32, 48, 96, 104, 0, 122,
-        48, 177, 212, 248, 68, 81, 212, 248, 72, 1, 133, 66, 12, 217, 7, 224,
-        148, 249, 239, 80, 148, 248, 248, 0, 197, 241, 18, 5, 133, 66, 3, 220,
-        132, 248, 193, 16, 1, 32, 112, 189, 219, 178, 1, 51, 30, 43, 34, 216,
-        148, 248, 214, 16, 2, 41, 6, 217, 148, 249, 241, 96, 214, 241, 1, 6,
-        56, 191, 0, 38, 0, 224, 0, 38, 3, 235, 131, 3, 13, 73, 155, 25, 81,
-        248, 35, 80, 107, 28, 14, 208, 32, 70, 233, 178, 255, 247, 113, 249,
-        0, 40, 10, 221, 132, 248, 243, 0, 132, 248, 241, 96, 132, 248, 242,
-        80, 32, 70, 255, 247, 150, 255, 0, 32, 112, 189, 0, 32, 112, 189, 144,
-        5, 4, 0, 160, 8, 4, 0, 45, 233, 240, 71, 144, 248, 193, 48, 4, 70, 195,
-        24, 147, 248, 148, 32, 25, 122, 164, 75, 83, 248, 33, 96, 70, 234, 2,
-        70, 22, 240, 64, 127, 6, 208, 245, 178, 87, 45, 6, 208, 88, 45, 8, 191,
-        9, 37, 3, 224, 79, 240, 255, 53, 0, 224, 8, 37, 212, 248, 204, 48, 111,
-        28, 1, 43, 81, 209, 148, 248, 241, 48, 105, 28, 95, 250, 131, 248, 30,
-        208, 150, 73, 91, 178, 7, 235, 135, 0, 192, 24, 81, 248, 32, 80, 104,
-        28, 15, 209, 148, 248, 214, 0, 2, 40, 4, 217, 211, 241, 1, 8, 56, 191,
-        79, 240, 0, 8, 7, 235, 135, 3, 67, 68, 81, 248, 35, 80, 104, 28, 5,
-        208, 32, 70, 233, 178, 255, 247, 26, 249, 129, 70, 0, 224, 169, 70,
-        0, 35, 153, 69, 132, 248, 245, 48, 34, 219, 148, 248, 242, 48, 107,
-        64, 19, 240, 120, 15, 2, 208, 32, 70, 255, 247, 57, 255, 148, 248, 245,
-        48, 20, 34, 67, 240, 16, 3, 132, 248, 245, 48, 123, 75, 132, 248, 241,
-        128, 2, 251, 7, 55, 187, 104, 132, 248, 242, 80, 132, 248, 248, 48,
-        251, 104, 132, 248, 243, 144, 132, 248, 246, 48, 59, 105, 132, 248,
-        247, 48, 54, 224, 255, 35, 132, 248, 243, 48, 50, 224, 2, 43, 48, 209,
-        105, 28, 223, 248, 188, 129, 9, 208, 59, 1, 88, 248, 3, 16, 0, 41, 6,
-        221, 32, 70, 201, 178, 255, 247, 220, 248, 3, 224, 40, 70, 1, 224, 79,
-        240, 255, 48, 0, 35, 0, 40, 164, 248, 0, 49, 5, 219, 16, 35, 132, 248,
-        254, 0, 164, 248, 0, 49, 2, 224, 255, 35, 132, 248, 254, 48, 180, 248,
-        0, 49, 8, 235, 7, 23, 67, 244, 128, 115, 164, 248, 0, 49, 123, 104,
-        132, 248, 4, 49, 59, 137, 191, 137, 164, 248, 10, 49, 164, 248, 12,
-        113, 212, 248, 20, 49, 4, 245, 148, 121, 1, 51, 4, 245, 136, 119, 4,
-        245, 142, 117, 4, 245, 154, 120, 75, 208, 48, 70, 254, 247, 225, 253,
-        130, 70, 212, 248, 16, 1, 254, 247, 220, 253, 79, 244, 250, 115, 154,
-        251, 243, 242, 144, 251, 243, 243, 154, 66, 59, 221, 212, 248, 32, 49,
-        1, 51, 14, 208, 99, 104, 212, 248, 36, 17, 90, 104, 91, 105, 146, 106,
-        138, 26, 154, 66, 5, 210, 64, 70, 41, 70, 12, 34, 204, 247, 14, 252,
-        3, 224, 79, 240, 255, 51, 196, 248, 56, 49, 12, 34, 57, 70, 40, 70,
-        204, 247, 4, 252, 99, 104, 212, 248, 44, 17, 90, 104, 1, 49, 146, 106,
-        196, 248, 36, 33, 15, 208, 212, 248, 48, 17, 91, 105, 138, 26, 154,
-        66, 9, 210, 212, 248, 40, 49, 179, 66, 5, 209, 56, 70, 73, 70, 12, 34,
-        204, 247, 236, 251, 3, 224, 79, 244, 128, 83, 196, 248, 20, 49, 79,
-        240, 255, 51, 73, 224, 212, 248, 20, 49, 1, 51, 59, 208, 48, 70, 254,
-        247, 145, 253, 130, 70, 212, 248, 16, 1, 254, 247, 140, 253, 79, 244,
-        250, 115, 154, 251, 243, 242, 144, 251, 243, 243, 154, 66, 43, 218,
-        12, 34, 57, 70, 72, 70, 204, 247, 203, 251, 99, 104, 212, 248, 32, 17,
-        90, 104, 1, 49, 146, 106, 196, 248, 48, 33, 15, 208, 212, 248, 36, 17,
-        91, 105, 138, 26, 154, 66, 9, 210, 212, 248, 28, 49, 179, 66, 5, 209,
-        56, 70, 41, 70, 12, 34, 204, 247, 179, 251, 3, 224, 79, 244, 128, 83,
-        196, 248, 20, 49, 40, 70, 65, 70, 12, 34, 204, 247, 169, 251, 79, 240,
-        255, 51, 196, 248, 56, 49, 11, 224, 79, 244, 128, 83, 196, 248, 20,
-        49, 79, 240, 255, 51, 196, 248, 56, 49, 196, 248, 32, 49, 196, 248,
-        44, 49, 0, 35, 196, 248, 16, 97, 132, 248, 64, 49, 189, 232, 240, 135,
-        0, 191, 144, 5, 4, 0, 160, 8, 4, 0, 88, 6, 4, 0, 56, 181, 4, 70, 65,
-        177, 144, 248, 192, 48, 2, 43, 1, 216, 1, 51, 0, 224, 0, 35, 132, 248,
-        192, 48, 0, 37, 196, 248, 184, 80, 196, 248, 188, 80, 196, 248, 216,
-        80, 196, 248, 228, 80, 32, 70, 255, 247, 144, 254, 212, 248, 196, 48,
-        3, 177, 29, 96, 56, 189, 56, 181, 0, 37, 4, 70, 192, 248, 232, 80, 192,
-        248, 224, 80, 0, 245, 130, 112, 1, 48, 41, 70, 3, 34, 205, 243, 183,
-        247, 132, 248, 3, 81, 132, 248, 2, 81, 196, 248, 76, 81, 196, 248, 80,
-        81, 56, 189, 16, 181, 4, 70, 255, 247, 229, 255, 148, 248, 8, 49, 195,
-        241, 1, 3, 219, 178, 1, 43, 132, 248, 8, 49, 6, 209, 180, 248, 0, 49,
-        19, 240, 16, 3, 8, 191, 132, 248, 8, 49, 16, 189, 8, 181, 67, 104, 27,
-        122, 51, 177, 208, 248, 76, 33, 208, 248, 80, 49, 154, 66, 9, 211, 48,
-        224, 144, 249, 3, 49, 208, 248, 224, 32, 210, 26, 144, 248, 4, 49, 154,
-        66, 39, 217, 144, 248, 8, 49, 144, 248, 250, 32, 163, 185, 144, 248,
-        252, 16, 1, 58, 145, 66, 1, 218, 75, 28, 219, 178, 144, 248, 251, 16,
-        128, 248, 252, 48, 153, 66, 17, 209, 147, 66, 1, 218, 1, 51, 0, 224,
-        0, 35, 128, 248, 252, 48, 9, 224, 144, 248, 253, 48, 1, 58, 147, 66,
-        1, 218, 1, 51, 0, 224, 0, 35, 128, 248, 253, 48, 255, 247, 177, 255,
-        0, 32, 8, 189, 208, 248, 224, 48, 17, 43, 31, 217, 144, 248, 8, 49,
-        19, 185, 144, 248, 252, 48, 5, 224, 144, 248, 254, 48, 128, 248, 193,
-        48, 144, 248, 253, 48, 128, 248, 251, 48, 144, 248, 250, 32, 144, 248,
-        251, 48, 1, 58, 147, 66, 1, 218, 90, 28, 0, 224, 0, 34, 128, 248, 252,
-        32, 128, 248, 253, 48, 255, 247, 141, 255, 1, 32, 8, 189, 0, 32, 8,
-        189, 0, 0, 45, 233, 247, 67, 255, 35, 141, 248, 7, 48, 67, 104, 208,
-        248, 188, 32, 27, 105, 4, 70, 154, 66, 192, 240, 195, 128, 1, 33, 13,
-        241, 7, 2, 107, 70, 254, 247, 99, 255, 0, 40, 0, 240, 187, 128, 148,
-        248, 193, 48, 223, 248, 120, 145, 227, 24, 147, 248, 148, 112, 27, 122,
-        79, 244, 250, 120, 89, 248, 35, 48, 67, 234, 7, 71, 56, 70, 254, 247,
-        107, 252, 144, 251, 248, 245, 0, 152, 254, 247, 102, 252, 144, 251,
-        248, 246, 212, 248, 52, 1, 254, 247, 96, 252, 212, 248, 40, 33, 0, 155,
-        144, 251, 248, 248, 154, 66, 72, 70, 7, 208, 212, 248, 44, 49, 1, 51,
-        28, 191, 79, 240, 255, 51, 196, 248, 44, 49, 212, 248, 44, 49, 90, 28,
-        13, 208, 97, 104, 74, 104, 73, 105, 210, 248, 40, 192, 212, 248, 48,
-        33, 194, 235, 12, 2, 138, 66, 140, 191, 0, 34, 1, 34, 0, 224, 0, 34,
-        69, 69, 123, 208, 170, 185, 212, 248, 56, 17, 212, 248, 20, 49, 153,
-        66, 15, 217, 200, 235, 6, 12, 3, 251, 12, 243, 197, 235, 6, 12, 1, 251,
-        28, 51, 200, 235, 5, 8, 179, 251, 248, 243, 179, 245, 128, 95, 136,
-        191, 19, 70, 212, 248, 20, 33, 115, 67, 106, 67, 147, 66, 82, 217, 148,
-        248, 193, 32, 162, 24, 19, 122, 146, 248, 148, 16, 80, 248, 35, 48,
-        157, 248, 7, 32, 67, 234, 1, 67, 19, 240, 64, 127, 132, 248, 193, 32,
-        30, 208, 219, 178, 12, 43, 1, 208, 21, 43, 25, 209, 148, 249, 242, 32,
-        80, 28, 1, 208, 154, 66, 19, 218, 212, 248, 204, 48, 2, 43, 10, 209,
-        148, 248, 8, 49, 1, 43, 11, 209, 32, 70, 255, 247, 214, 254, 0, 35,
-        132, 248, 8, 49, 4, 224, 1, 43, 2, 209, 32, 70, 255, 247, 230, 252,
-        99, 104, 154, 126, 114, 177, 148, 248, 209, 32, 1, 42, 20, 191, 22,
-        34, 11, 34, 149, 66, 6, 216, 150, 66, 4, 217, 211, 248, 136, 48, 11,
-        177, 32, 104, 152, 71, 212, 248, 52, 1, 1, 35, 184, 66, 132, 248, 249,
-        48, 1, 208, 254, 247, 211, 251, 148, 249, 211, 48, 0, 43, 10, 221, 0,
-        35, 132, 248, 211, 48, 6, 224, 212, 248, 52, 1, 184, 66, 4, 208, 254,
-        247, 197, 251, 1, 224, 1, 32, 0, 224, 0, 32, 189, 232, 254, 131, 0,
-        42, 158, 208, 151, 231, 144, 5, 4, 0, 1, 41, 45, 233, 240, 65, 7, 70,
-        136, 70, 22, 70, 68, 104, 46, 217, 229, 127, 101, 187, 1, 35, 227, 119,
-        4, 241, 32, 0, 41, 70, 8, 34, 205, 243, 76, 246, 40, 35, 132, 248, 40,
-        128, 132, 248, 41, 96, 132, 248, 67, 80, 167, 248, 14, 81, 164, 248,
-        88, 48, 200, 35, 164, 248, 90, 48, 10, 35, 164, 248, 92, 48, 20, 35,
-        132, 248, 68, 80, 132, 248, 69, 96, 132, 248, 70, 96, 164, 248, 94,
-        48, 132, 248, 96, 80, 101, 103, 101, 102, 165, 103, 165, 102, 229, 103,
-        229, 102, 196, 248, 128, 80, 37, 103, 189, 232, 240, 129, 0, 0, 45,
-        233, 240, 79, 133, 176, 79, 240, 255, 49, 13, 241, 15, 2, 2, 171, 4,
-        70, 254, 247, 89, 254, 0, 40, 0, 240, 229, 128, 148, 248, 193, 48, 114,
-        78, 227, 24, 147, 248, 148, 0, 27, 122, 212, 248, 4, 128, 86, 248, 35,
-        48, 79, 244, 250, 117, 67, 234, 0, 64, 254, 247, 97, 251, 144, 251,
-        245, 247, 2, 152, 254, 247, 92, 251, 144, 251, 245, 245, 32, 70, 254,
-        247, 195, 254, 148, 248, 64, 49, 177, 70, 131, 66, 78, 210, 212, 248,
-        28, 33, 2, 155, 154, 66, 7, 208, 212, 248, 32, 49, 1, 51, 28, 191, 79,
-        240, 255, 51, 196, 248, 32, 49, 212, 248, 52, 1, 254, 247, 65, 251,
-        79, 244, 250, 118, 144, 251, 246, 240, 135, 66, 0, 240, 170, 128, 175,
-        66, 14, 217, 133, 66, 12, 211, 212, 248, 56, 17, 123, 27, 75, 67, 212,
-        248, 20, 97, 42, 26, 6, 251, 2, 54, 56, 26, 182, 251, 240, 246, 1, 224,
-        79, 244, 128, 86, 212, 248, 32, 49, 89, 28, 9, 208, 98, 104, 81, 104,
-        82, 105, 136, 106, 212, 248, 36, 17, 65, 26, 145, 66, 152, 191, 30,
-        70, 216, 248, 0, 48, 212, 248, 20, 33, 27, 104, 5, 251, 6, 250, 147,
-        248, 229, 48, 2, 251, 7, 251, 51, 177, 45, 177, 32, 70, 57, 70, 43,
-        70, 0, 150, 255, 247, 233, 248, 218, 69, 115, 217, 0, 224, 0, 38, 148,
-        248, 193, 48, 227, 24, 147, 248, 148, 160, 27, 122, 89, 248, 35, 48,
-        67, 234, 10, 74, 157, 248, 15, 48, 132, 248, 193, 48, 212, 248, 204,
-        48, 2, 43, 23, 209, 26, 240, 64, 127, 20, 208, 95, 250, 138, 243, 8,
-        43, 16, 209, 32, 70, 255, 247, 197, 253, 148, 248, 250, 32, 148, 248,
-        251, 48, 1, 58, 147, 66, 1, 218, 90, 28, 0, 224, 0, 34, 132, 248, 252,
-        32, 132, 248, 253, 48, 152, 248, 26, 48, 115, 177, 148, 248, 209, 48,
-        1, 43, 20, 191, 22, 35, 11, 35, 159, 66, 6, 217, 157, 66, 4, 216, 216,
-        248, 132, 48, 11, 177, 32, 104, 152, 71, 0, 35, 132, 248, 249, 48, 152,
-        248, 30, 48, 43, 179, 212, 248, 204, 48, 1, 43, 33, 209, 212, 248, 224,
-        48, 243, 177, 148, 248, 244, 48, 227, 24, 147, 248, 148, 0, 27, 122,
-        89, 248, 35, 48, 67, 234, 0, 64, 254, 247, 51, 250, 7, 70, 80, 70, 254,
-        247, 47, 250, 135, 66, 12, 210, 10, 34, 85, 67, 110, 67, 212, 248, 68,
-        49, 3, 235, 195, 3, 179, 66, 132, 191, 148, 248, 244, 48, 132, 248,
-        193, 48, 148, 248, 211, 48, 1, 59, 219, 178, 10, 43, 5, 216, 0, 35,
-        132, 248, 211, 48, 1, 224, 0, 32, 0, 224, 1, 32, 5, 176, 189, 232, 240,
-        143, 144, 5, 4, 0, 112, 181, 144, 248, 193, 48, 38, 77, 195, 24, 27,
-        122, 4, 70, 85, 248, 35, 96, 233, 177, 208, 248, 204, 48, 1, 43, 4,
-        209, 255, 247, 134, 251, 0, 40, 46, 209, 112, 189, 2, 43, 57, 209, 255,
-        247, 124, 253, 0, 40, 53, 208, 148, 248, 193, 48, 22, 240, 64, 127,
-        35, 68, 27, 122, 85, 248, 35, 48, 42, 208, 19, 240, 64, 127, 20, 191,
-        0, 33, 1, 33, 25, 224, 17, 70, 254, 247, 217, 253, 0, 40, 33, 209, 32,
-        70, 255, 247, 216, 254, 0, 40, 26, 209, 148, 248, 194, 48, 7, 43, 16,
-        209, 32, 70, 255, 247, 189, 253, 96, 177, 17, 224, 212, 248, 196, 48,
-        131, 177, 0, 34, 26, 96, 112, 189, 0, 33, 32, 70, 189, 232, 112, 64,
-        255, 247, 3, 189, 32, 70, 254, 247, 163, 254, 0, 40, 238, 209, 112,
-        189, 1, 33, 242, 231, 112, 189, 144, 5, 4, 0, 45, 233, 248, 67, 4, 70,
-        5, 70, 0, 38, 36, 224, 223, 248, 188, 128, 43, 122, 212, 248, 204, 32,
-        119, 28, 88, 248, 35, 48, 149, 248, 148, 0, 162, 177, 67, 234, 0, 64,
-        16, 240, 64, 127, 15, 208, 254, 247, 164, 249, 107, 122, 129, 70, 88,
-        248, 35, 48, 149, 248, 149, 0, 67, 234, 0, 64, 254, 247, 154, 249, 129,
-        69, 8, 191, 62, 70, 0, 224, 62, 70, 133, 248, 78, 96, 1, 53, 62, 70,
-        148, 248, 183, 48, 1, 59, 158, 66, 213, 219, 163, 25, 131, 248, 78,
-        96, 0, 35, 132, 248, 113, 48, 38, 70, 1, 39, 38, 224, 22, 75, 114, 122,
-        212, 248, 204, 16, 53, 27, 83, 248, 34, 32, 150, 248, 149, 0, 153, 70,
-        185, 177, 66, 234, 0, 64, 16, 240, 64, 127, 18, 208, 254, 247, 235,
-        249, 128, 70, 99, 25, 147, 248, 148, 0, 27, 122, 89, 248, 35, 48, 67,
-        234, 0, 64, 254, 247, 224, 249, 64, 69, 3, 211, 21, 241, 255, 53, 240,
-        210, 0, 37, 134, 248, 114, 80, 1, 55, 1, 54, 148, 248, 183, 48, 159,
-        66, 212, 219, 189, 232, 248, 131, 144, 5, 4, 0, 45, 233, 248, 67, 10,
-        156, 136, 70, 11, 157, 6, 70, 23, 70, 32, 70, 0, 33, 32, 34, 205, 243,
-        102, 244, 0, 35, 43, 112, 184, 241, 16, 15, 40, 191, 79, 240, 16, 8,
-        44, 224, 241, 24, 73, 125, 90, 0, 2, 43, 36, 248, 19, 16, 32, 216, 34,
-        72, 16, 248, 19, 192, 0, 235, 67, 0, 6, 235, 220, 9, 153, 248, 21, 144,
-        12, 240, 7, 12, 73, 250, 12, 252, 28, 240, 1, 15, 28, 191, 65, 244,
-        128, 113, 161, 82, 65, 120, 6, 235, 209, 0, 64, 125, 1, 240, 7, 1, 80,
-        250, 1, 241, 200, 7, 3, 213, 161, 90, 65, 244, 0, 113, 161, 82, 162,
-        90, 1, 51, 2, 177, 43, 112, 219, 178, 67, 69, 208, 219, 111, 185, 43,
-        120, 1, 43, 10, 217, 179, 125, 35, 240, 15, 3, 99, 128, 43, 120, 2,
-        43, 3, 217, 243, 125, 35, 240, 31, 3, 163, 128, 43, 120, 1, 43, 7, 217,
-        35, 136, 19, 244, 64, 127, 3, 208, 4, 72, 4, 73, 205, 243, 59, 244,
-        0, 32, 189, 232, 248, 131, 154, 8, 4, 0, 72, 8, 4, 0, 60, 6, 4, 0, 45,
-        233, 247, 79, 7, 70, 6, 70, 79, 240, 254, 8, 0, 37, 147, 224, 2, 45,
-        204, 191, 67, 70, 0, 35, 0, 147, 50, 122, 74, 75, 83, 248, 34, 64, 153,
-        70, 20, 240, 64, 127, 125, 208, 123, 104, 27, 104, 147, 249, 196, 50,
-        1, 51, 7, 209, 151, 248, 208, 176, 219, 241, 1, 11, 56, 191, 79, 240,
-        0, 11, 1, 224, 79, 240, 0, 11, 32, 70, 254, 247, 187, 248, 87, 40, 5,
-        208, 88, 40, 20, 191, 130, 70, 79, 240, 9, 10, 1, 224, 79, 240, 8, 10,
-        32, 70, 254, 247, 185, 248, 150, 248, 148, 48, 4, 70, 0, 45, 88, 208,
-        1, 40, 2, 220, 186, 241, 0, 15, 83, 208, 186, 241, 7, 15, 26, 70, 10,
-        208, 186, 241, 2, 15, 2, 221, 170, 241, 2, 0, 5, 224, 186, 241, 0, 15,
-        25, 208, 0, 32, 0, 224, 4, 32, 187, 241, 0, 15, 21, 208, 1, 44, 19,
-        209, 186, 241, 2, 15, 16, 220, 3, 43, 4, 209, 186, 241, 2, 15, 11, 209,
-        82, 70, 8, 224, 2, 43, 7, 209, 186, 241, 1, 15, 4, 209, 82, 70, 84,
-        70, 0, 224, 1, 36, 80, 70, 0, 35, 33, 70, 18, 4, 254, 247, 177, 248,
-        0, 35, 1, 144, 5, 241, 255, 58, 0, 147, 7, 235, 10, 11, 155, 248, 8,
-        48, 155, 248, 148, 0, 89, 248, 35, 48, 67, 234, 0, 64, 254, 247, 234,
-        248, 1, 155, 152, 66, 14, 216, 155, 248, 8, 32, 16, 75, 155, 248, 148,
-        0, 83, 248, 34, 48, 205, 248, 0, 160, 67, 234, 0, 64, 254, 247, 96,
-        248, 160, 66, 2, 217, 26, 241, 255, 58, 222, 210, 0, 155, 8, 241, 1,
-        8, 134, 248, 43, 48, 1, 53, 1, 54, 95, 250, 136, 248, 151, 248, 183,
-        48, 157, 66, 255, 246, 103, 175, 189, 232, 254, 143, 0, 191, 144, 5,
-        4, 0, 45, 233, 240, 79, 22, 70, 161, 74, 155, 176, 13, 70, 4, 70, 81,
-        104, 16, 104, 31, 70, 21, 171, 3, 195, 17, 122, 25, 112, 82, 248, 9,
-        15, 18, 171, 81, 104, 3, 195, 17, 137, 146, 122, 25, 128, 154, 112,
-        42, 104, 0, 35, 4, 224, 233, 24, 9, 121, 22, 41, 4, 208, 1, 51, 147,
-        66, 248, 209, 0, 35, 0, 224, 1, 35, 6, 147, 0, 35, 132, 248, 183, 48,
-        196, 248, 204, 48, 148, 248, 212, 32, 99, 104, 40, 70, 25, 127, 0, 146,
-        148, 248, 213, 32, 148, 248, 209, 48, 1, 146, 10, 170, 2, 146, 4, 241,
-        214, 2, 3, 146, 1, 34, 255, 247, 183, 254, 148, 248, 214, 48, 132, 248,
-        200, 0, 0, 43, 0, 240, 228, 128, 129, 75, 25, 136, 154, 120, 173, 248,
-        100, 16, 141, 248, 102, 32, 211, 248, 3, 0, 6, 155, 24, 144, 27, 177,
-        148, 248, 209, 48, 1, 43, 3, 208, 4, 35, 13, 241, 96, 9, 2, 224, 3,
-        35, 13, 241, 100, 9, 79, 240, 0, 8, 171, 70, 40, 224, 30, 177, 25, 248,
-        8, 32, 178, 66, 33, 216, 25, 248, 8, 16, 185, 66, 29, 211, 219, 248,
-        0, 0, 0, 34, 23, 224, 11, 235, 2, 5, 45, 121, 141, 66, 17, 209, 148,
-        248, 183, 160, 1, 34, 4, 235, 10, 5, 133, 248, 148, 32, 32, 70, 5, 147,
-        254, 247, 246, 250, 10, 241, 1, 10, 40, 114, 132, 248, 183, 160, 5,
-        155, 2, 224, 1, 50, 130, 66, 229, 209, 8, 241, 1, 8, 152, 69, 212, 211,
-        148, 248, 214, 32, 148, 248, 183, 48, 1, 42, 93, 70, 132, 248, 208,
-        48, 2, 217, 1, 34, 196, 248, 204, 32, 79, 244, 250, 114, 86, 67, 122,
-        67, 8, 146, 148, 248, 209, 32, 7, 150, 1, 42, 44, 208, 98, 104, 18,
-        104, 146, 249, 196, 34, 1, 50, 38, 209, 43, 187, 30, 70, 189, 248, 40,
-        48, 51, 65, 223, 7, 28, 213, 148, 248, 183, 48, 1, 34, 227, 24, 70,
-        240, 128, 119, 131, 248, 148, 32, 32, 70, 71, 244, 128, 49, 7, 154,
-        8, 155, 255, 247, 198, 248, 96, 177, 32, 70, 57, 70, 148, 248, 183,
-        128, 254, 247, 175, 250, 4, 235, 8, 3, 8, 241, 1, 8, 24, 114, 132, 248,
-        183, 128, 1, 54, 2, 46, 218, 209, 148, 248, 208, 32, 148, 248, 183,
-        48, 154, 66, 5, 208, 189, 248, 40, 48, 35, 240, 1, 3, 173, 248, 40,
-        48, 0, 39, 79, 240, 1, 9, 168, 70, 51, 224, 10, 171, 251, 90, 43, 65,
-        222, 7, 40, 213, 7, 45, 5, 217, 50, 75, 219, 25, 91, 25, 19, 248, 10,
-        108, 2, 224, 9, 155, 238, 24, 246, 178, 148, 248, 209, 16, 70, 240,
-        128, 118, 32, 70, 70, 234, 1, 65, 7, 154, 8, 155, 255, 247, 137, 248,
-        136, 177, 148, 248, 183, 160, 148, 248, 209, 48, 4, 235, 10, 11, 139,
-        248, 148, 48, 32, 70, 49, 70, 254, 247, 108, 250, 10, 241, 1, 10, 139,
-        248, 8, 0, 132, 248, 183, 160, 1, 53, 16, 45, 206, 209, 9, 241, 1, 9,
-        2, 55, 148, 248, 214, 48, 153, 69, 3, 216, 187, 0, 9, 147, 0, 37, 195,
-        231, 148, 248, 183, 48, 69, 70, 11, 185, 132, 248, 214, 48, 7, 155,
-        79, 244, 250, 119, 179, 251, 247, 246, 8, 155, 179, 251, 247, 247, 148,
-        248, 214, 48, 0, 43, 65, 209, 6, 155, 27, 177, 9, 35, 13, 241, 84, 9,
-        2, 224, 11, 35, 13, 241, 72, 9, 79, 240, 0, 8, 171, 70, 46, 224, 30,
-        177, 25, 248, 8, 32, 178, 66, 39, 216, 25, 248, 8, 16, 185, 66, 35,
-        211, 219, 248, 0, 0, 0, 34, 29, 224, 0, 181, 3, 0, 20, 181, 3, 0, 156,
-        8, 4, 0, 11, 235, 2, 5, 45, 121, 141, 66, 17, 209, 148, 248, 183, 160,
-        1, 34, 4, 235, 10, 5, 133, 248, 148, 32, 32, 70, 5, 147, 254, 247, 22,
-        250, 10, 241, 1, 10, 40, 114, 132, 248, 183, 160, 5, 155, 2, 224, 1,
-        50, 130, 66, 229, 209, 8, 241, 1, 8, 152, 69, 206, 211, 148, 248, 183,
-        48, 132, 248, 208, 48, 32, 70, 255, 247, 233, 253, 32, 70, 255, 247,
-        24, 253, 32, 70, 36, 153, 255, 247, 28, 248, 0, 35, 132, 248, 193, 0,
-        132, 248, 194, 48, 27, 176, 189, 232, 240, 143, 56, 181, 83, 178, 2,
-        240, 127, 1, 0, 43, 172, 191, 1, 34, 2, 34, 4, 70, 254, 247, 255, 249,
-        5, 70, 1, 48, 7, 208, 32, 70, 233, 178, 254, 247, 238, 249, 148, 248,
-        208, 48, 157, 66, 1, 218, 148, 248, 208, 0, 36, 24, 34, 122, 3, 75,
-        148, 248, 148, 0, 83, 248, 34, 48, 67, 234, 0, 64, 56, 189, 144, 5,
-        4, 0, 74, 136, 144, 248, 192, 48, 2, 240, 24, 2, 179, 235, 210, 15,
-        6, 209, 144, 248, 193, 0, 208, 241, 1, 0, 56, 191, 0, 32, 112, 71, 0,
-        32, 112, 71, 144, 248, 194, 48, 154, 7, 8, 213, 35, 240, 2, 3, 128,
-        248, 194, 48, 208, 248, 196, 48, 11, 177, 0, 34, 26, 96, 112, 71, 0,
-        0, 45, 233, 243, 71, 157, 248, 48, 128, 21, 70, 184, 241, 0, 15, 12,
-        191, 152, 70, 79, 240, 0, 8, 4, 70, 10, 158, 11, 159, 157, 248, 52,
-        144, 157, 248, 60, 160, 254, 247, 34, 250, 168, 69, 3, 216, 183, 66,
-        40, 191, 55, 70, 3, 224, 183, 66, 136, 191, 55, 70, 168, 70, 148, 248,
-        193, 48, 212, 248, 204, 16, 227, 24, 26, 122, 105, 75, 1, 41, 19, 248,
-        34, 48, 9, 209, 75, 69, 42, 208, 125, 177, 32, 70, 74, 70, 67, 70, 0,
-        149, 254, 247, 214, 252, 26, 224, 2, 41, 29, 209, 75, 69, 3, 209, 148,
-        248, 251, 48, 83, 69, 26, 208, 69, 185, 212, 248, 232, 48, 90, 28, 0,
-        240, 175, 128, 1, 51, 196, 248, 232, 48, 170, 224, 32, 70, 1, 33, 74,
-        70, 83, 70, 205, 248, 0, 128, 1, 149, 254, 247, 140, 253, 0, 40, 20,
-        191, 1, 32, 2, 32, 161, 224, 153, 69, 64, 240, 154, 128, 184, 241, 0,
-        15, 8, 209, 63, 185, 148, 248, 64, 49, 32, 70, 1, 51, 132, 248, 64,
-        49, 255, 247, 143, 255, 181, 235, 72, 15, 3, 211, 37, 177, 182, 235,
-        71, 15, 1, 210, 0, 35, 3, 224, 38, 177, 148, 248, 64, 49, 1, 51, 132,
-        248, 64, 49, 99, 104, 219, 126, 19, 185, 0, 45, 121, 208, 0, 224, 37,
-        177, 168, 69, 2, 209, 32, 70, 254, 247, 53, 251, 148, 248, 249, 48,
-        99, 177, 99, 104, 212, 248, 216, 32, 91, 127, 154, 66, 6, 211, 212,
-        248, 196, 48, 0, 34, 132, 248, 249, 32, 3, 177, 26, 96, 148, 248, 194,
-        48, 83, 177, 99, 104, 212, 248, 188, 16, 90, 123, 145, 66, 148, 191,
-        147, 248, 12, 144, 147, 248, 11, 144, 1, 224, 79, 240, 2, 9, 109, 179,
-        157, 248, 56, 48, 79, 234, 8, 56, 184, 251, 245, 241, 155, 177, 148,
-        248, 211, 48, 90, 30, 210, 178, 10, 42, 13, 216, 33, 250, 9, 241, 212,
-        248, 108, 33, 1, 51, 137, 24, 34, 250, 9, 242, 138, 26, 196, 248, 108,
-        33, 132, 248, 211, 48, 18, 224, 33, 250, 9, 242, 212, 248, 20, 49, 210,
-        24, 35, 250, 9, 243, 210, 26, 99, 104, 196, 248, 20, 33, 27, 104, 27,
-        104, 147, 248, 229, 48, 19, 177, 32, 70, 254, 247, 50, 252, 150, 177,
-        63, 3, 212, 248, 56, 49, 183, 251, 246, 246, 38, 250, 9, 246, 35, 250,
-        9, 249, 246, 24, 201, 235, 6, 3, 196, 248, 56, 49, 99, 104, 91, 104,
-        155, 106, 196, 248, 60, 49, 133, 177, 212, 248, 216, 48, 88, 28, 2,
-        208, 1, 51, 196, 248, 216, 48, 212, 248, 188, 48, 89, 28, 7, 208, 1,
-        51, 196, 248, 188, 48, 3, 224, 2, 32, 2, 224, 40, 70, 0, 224, 0, 32,
-        189, 232, 252, 135, 0, 191, 144, 5, 4, 0, 45, 233, 240, 79, 133, 176,
-        3, 147, 4, 70, 14, 70, 144, 70, 157, 248, 56, 144, 157, 248, 64, 112,
-        254, 247, 47, 249, 157, 248, 68, 48, 19, 177, 8, 241, 1, 11, 1, 224,
-        182, 248, 26, 176, 182, 248, 28, 160, 95, 250, 139, 251, 95, 250, 138,
-        250, 186, 241, 0, 15, 4, 209, 187, 241, 0, 15, 0, 240, 240, 128, 2,
-        224, 187, 241, 0, 15, 10, 208, 195, 69, 5, 216, 3, 154, 146, 69, 140,
-        191, 0, 35, 1, 35, 0, 224, 0, 35, 219, 178, 3, 224, 194, 69, 140, 191,
-        0, 35, 1, 35, 150, 249, 25, 80, 0, 53, 24, 191, 1, 37, 27, 177, 21,
-        177, 32, 70, 254, 247, 121, 250, 195, 69, 5, 216, 3, 155, 187, 241,
-        0, 15, 24, 191, 152, 70, 1, 224, 79, 240, 0, 8, 148, 248, 193, 32, 102,
-        75, 162, 24, 146, 248, 148, 16, 18, 122, 83, 248, 34, 48, 212, 248,
-        204, 32, 67, 234, 1, 67, 19, 240, 64, 127, 20, 191, 219, 178, 255, 35,
-        1, 42, 20, 209, 75, 69, 49, 208, 208, 69, 180, 191, 66, 70, 82, 70,
-        210, 178, 37, 177, 194, 69, 204, 191, 0, 35, 1, 35, 0, 224, 43, 70,
-        0, 146, 32, 70, 0, 33, 74, 70, 254, 247, 157, 251, 25, 224, 2, 42, 28,
-        209, 75, 69, 3, 209, 148, 248, 251, 48, 187, 66, 22, 208, 208, 69, 180,
-        191, 67, 70, 83, 70, 219, 178, 29, 177, 194, 69, 204, 191, 0, 37, 1,
-        37, 1, 147, 32, 70, 0, 33, 74, 70, 59, 70, 0, 149, 254, 247, 84, 252,
-        0, 40, 20, 191, 1, 32, 2, 32, 131, 224, 148, 248, 194, 48, 67, 177,
-        99, 104, 212, 248, 188, 16, 90, 123, 145, 66, 52, 191, 24, 123, 216,
-        122, 0, 224, 2, 32, 212, 248, 52, 49, 212, 248, 16, 33, 154, 66, 157,
-        248, 60, 48, 12, 191, 4, 245, 138, 118, 4, 245, 156, 118, 75, 177, 148,
-        248, 211, 48, 1, 59, 219, 178, 10, 43, 3, 216, 4, 245, 182, 113, 0,
-        34, 9, 224, 99, 104, 4, 245, 138, 113, 27, 104, 27, 104, 147, 248, 229,
-        32, 10, 177, 212, 248, 20, 33, 186, 241, 0, 15, 16, 209, 11, 104, 51,
-        250, 0, 240, 27, 26, 11, 96, 32, 224, 67, 69, 200, 191, 49, 70, 15,
-        104, 1, 51, 39, 250, 0, 252, 204, 235, 7, 7, 15, 96, 0, 224, 1, 35,
-        83, 69, 241, 221, 141, 177, 192, 241, 12, 3, 1, 39, 159, 64, 11, 104,
-        186, 241, 1, 15, 59, 68, 11, 96, 7, 209, 177, 66, 5, 208, 51, 104, 51,
-        250, 0, 240, 223, 25, 59, 26, 51, 96, 99, 104, 27, 104, 27, 104, 147,
-        248, 229, 48, 35, 177, 32, 70, 212, 248, 20, 17, 254, 247, 16, 251,
-        4, 245, 156, 115, 158, 66, 4, 209, 99, 104, 91, 104, 155, 106, 196,
-        248, 60, 49, 29, 177, 0, 35, 132, 248, 64, 49, 7, 224, 148, 248, 64,
-        49, 32, 70, 1, 51, 132, 248, 64, 49, 255, 247, 237, 253, 212, 248, 188,
-        48, 89, 28, 5, 208, 1, 51, 196, 248, 188, 48, 1, 224, 2, 32, 0, 224,
-        0, 32, 5, 176, 189, 232, 240, 143, 144, 5, 4, 0, 131, 123, 67, 185,
-        4, 35, 25, 177, 3, 115, 5, 35, 195, 114, 112, 71, 2, 34, 2, 115, 195,
-        114, 112, 71, 211, 185, 144, 248, 245, 32, 209, 7, 3, 213, 208, 248,
-        196, 32, 2, 177, 19, 96, 144, 248, 245, 48, 35, 240, 1, 3, 128, 248,
-        245, 48, 176, 248, 0, 49, 218, 7, 4, 213, 208, 248, 196, 32, 10, 177,
-        0, 33, 17, 96, 35, 240, 1, 3, 160, 248, 0, 49, 112, 71, 45, 233, 240,
-        79, 144, 70, 74, 136, 31, 70, 144, 248, 192, 48, 2, 240, 24, 2, 133,
-        176, 179, 235, 210, 15, 4, 70, 14, 70, 157, 248, 56, 176, 157, 248,
-        60, 80, 157, 248, 64, 160, 157, 248, 68, 144, 36, 209, 144, 248, 251,
-        16, 254, 247, 48, 250, 49, 70, 32, 70, 66, 70, 59, 70, 205, 248, 0,
-        176, 1, 149, 205, 248, 8, 160, 205, 248, 12, 144, 255, 247, 149, 254,
-        2, 40, 1, 70, 16, 208, 161, 241, 1, 12, 220, 241, 0, 1, 32, 70, 65,
-        235, 12, 1, 42, 70, 5, 176, 189, 232, 240, 79, 255, 247, 1, 186, 1,
-        51, 196, 248, 184, 48, 3, 224, 212, 248, 184, 48, 90, 28, 247, 209,
-        5, 176, 189, 232, 240, 143, 45, 233, 240, 79, 139, 176, 157, 248, 104,
-        64, 157, 248, 80, 192, 9, 148, 157, 248, 84, 128, 157, 248, 88, 144,
-        157, 248, 92, 176, 157, 248, 96, 160, 157, 248, 100, 80, 4, 70, 0, 40,
-        50, 208, 144, 248, 183, 112, 0, 47, 46, 208, 79, 136, 144, 248, 192,
-        96, 7, 240, 24, 7, 182, 235, 215, 15, 34, 209, 9, 158, 205, 248, 0,
-        192, 205, 248, 4, 128, 205, 248, 8, 144, 205, 248, 12, 160, 4, 149,
-        205, 248, 20, 176, 6, 150, 254, 247, 30, 252, 2, 40, 1, 70, 16, 208,
-        161, 241, 1, 12, 220, 241, 0, 1, 32, 70, 65, 235, 12, 1, 42, 70, 11,
-        176, 189, 232, 240, 79, 255, 247, 182, 185, 1, 51, 196, 248, 184, 48,
-        3, 224, 212, 248, 184, 48, 90, 28, 247, 209, 11, 176, 189, 232, 240,
-        143, 45, 233, 240, 79, 135, 176, 16, 159, 221, 248, 68, 128, 157, 248,
-        72, 144, 157, 248, 76, 160, 157, 248, 80, 80, 157, 248, 84, 176, 4,
-        70, 0, 40, 48, 208, 144, 248, 183, 192, 188, 241, 0, 15, 43, 208, 7,
-        235, 2, 12, 188, 241, 0, 15, 8, 191, 1, 34, 144, 248, 192, 192, 1, 240,
-        24, 6, 188, 235, 214, 15, 26, 209, 141, 232, 128, 7, 4, 149, 205, 248,
-        20, 176, 255, 247, 11, 253, 2, 40, 1, 70, 16, 208, 161, 241, 1, 12,
-        220, 241, 0, 1, 32, 70, 65, 235, 12, 1, 42, 70, 7, 176, 189, 232, 240,
-        79, 255, 247, 113, 185, 1, 51, 196, 248, 184, 48, 3, 224, 212, 248,
-        184, 48, 90, 28, 247, 209, 7, 176, 189, 232, 240, 143, 112, 181, 144,
-        248, 68, 48, 4, 70, 0, 43, 79, 208, 22, 11, 144, 248, 69, 48, 144, 248,
-        70, 32, 6, 240, 3, 6, 147, 66, 2, 208, 150, 66, 68, 209, 2, 224, 158,
-        66, 65, 209, 2, 224, 0, 241, 76, 5, 1, 224, 0, 241, 72, 5, 8, 70, 253,
-        247, 209, 251, 148, 248, 96, 32, 79, 244, 250, 115, 144, 251, 243, 243,
-        138, 177, 4, 235, 134, 2, 82, 111, 24, 54, 4, 235, 134, 6, 10, 185,
-        115, 96, 8, 224, 113, 104, 226, 122, 49, 250, 2, 240, 51, 250, 2, 242,
-        9, 26, 138, 24, 114, 96, 34, 109, 10, 185, 43, 96, 16, 224, 41, 104,
-        224, 122, 49, 250, 0, 240, 8, 26, 40, 96, 226, 122, 51, 250, 2, 242,
-        18, 24, 138, 66, 42, 96, 3, 209, 147, 66, 1, 217, 1, 50, 42, 96, 35,
-        109, 90, 28, 1, 208, 1, 51, 35, 101, 32, 70, 2, 33, 189, 232, 112, 64,
-        254, 247, 226, 184, 112, 189, 144, 248, 193, 32, 144, 248, 208, 48,
-        154, 66, 52, 191, 0, 32, 1, 32, 112, 71, 45, 233, 248, 67, 13, 70, 145,
-        122, 4, 70, 2, 41, 148, 191, 0, 33, 1, 33, 22, 70, 152, 70, 254, 247,
-        88, 248, 0, 35, 168, 248, 0, 48, 148, 248, 251, 48, 51, 114, 148, 248,
-        251, 48, 115, 114, 42, 136, 148, 249, 211, 112, 34, 240, 24, 2, 18,
-        4, 18, 12, 148, 248, 193, 48, 42, 128, 148, 248, 192, 16, 0, 47, 204,
-        191, 79, 244, 0, 7, 0, 39, 201, 0, 1, 240, 24, 1, 10, 67, 82, 4, 82,
-        12, 42, 128, 148, 248, 183, 32, 147, 66, 3, 211, 83, 30, 219, 178, 132,
-        248, 193, 48, 226, 24, 146, 248, 148, 0, 73, 73, 18, 122, 137, 70, 81,
-        248, 34, 32, 66, 234, 0, 66, 50, 96, 212, 248, 204, 32, 1, 42, 13, 209,
-        148, 248, 245, 32, 210, 7, 34, 213, 42, 136, 148, 248, 243, 48, 111,
-        234, 66, 66, 111, 234, 82, 66, 42, 128, 0, 39, 24, 224, 2, 42, 22, 209,
-        180, 248, 0, 33, 208, 7, 18, 213, 148, 248, 8, 33, 26, 185, 148, 248,
-        252, 32, 50, 114, 5, 224, 148, 248, 253, 32, 148, 248, 254, 48, 0, 39,
-        50, 114, 42, 136, 111, 234, 66, 66, 111, 234, 82, 66, 42, 128, 148,
-        248, 193, 32, 154, 66, 7, 208, 148, 248, 183, 32, 147, 66, 3, 211, 83,
-        30, 219, 178, 132, 248, 193, 48, 148, 248, 249, 32, 42, 177, 184, 248,
-        0, 32, 66, 240, 1, 2, 168, 248, 0, 32, 148, 248, 208, 32, 154, 66, 11,
-        216, 226, 24, 148, 248, 210, 16, 146, 248, 148, 32, 81, 250, 2, 242,
-        18, 240, 1, 2, 8, 191, 23, 70, 0, 224, 0, 39, 227, 24, 147, 248, 148,
-        32, 27, 122, 32, 70, 89, 248, 35, 48, 67, 234, 2, 67, 59, 67, 51, 96,
-        148, 248, 193, 16, 253, 247, 171, 253, 35, 24, 26, 122, 147, 248, 148,
-        16, 89, 248, 34, 32, 66, 234, 1, 66, 114, 96, 143, 177, 148, 249, 211,
-        16, 12, 41, 13, 209, 148, 248, 208, 16, 129, 66, 9, 216, 148, 248, 210,
-        16, 147, 248, 148, 48, 81, 250, 3, 243, 217, 7, 68, 191, 23, 67, 119,
-        96, 150, 232, 12, 0, 154, 66, 6, 209, 50, 122, 115, 122, 154, 66, 12,
-        191, 1, 35, 2, 35, 0, 224, 2, 35, 179, 114, 189, 232, 248, 131, 144,
-        5, 4, 0, 79, 244, 188, 112, 112, 71, 0, 0, 16, 181, 0, 35, 128, 248,
-        84, 49, 128, 248, 85, 49, 128, 248, 86, 49, 128, 248, 87, 49, 100, 35,
-        128, 248, 88, 49, 144, 248, 183, 48, 4, 70, 1, 59, 195, 24, 147, 248,
-        148, 0, 26, 122, 5, 75, 83, 248, 34, 48, 67, 234, 0, 64, 253, 247, 160,
-        250, 196, 248, 92, 1, 16, 189, 0, 191, 144, 5, 4, 0, 45, 233, 240, 79,
-        135, 176, 147, 70, 24, 154, 31, 70, 4, 146, 25, 154, 128, 70, 16, 155,
-        157, 248, 68, 144, 157, 249, 72, 160, 157, 248, 88, 96, 157, 248, 92,
-        80, 5, 146, 12, 70, 0, 41, 124, 208, 8, 70, 79, 244, 188, 114, 0, 33,
-        3, 147, 204, 243, 33, 245, 196, 248, 4, 128, 196, 248, 0, 176, 196,
-        248, 196, 112, 3, 155, 15, 177, 0, 34, 58, 96, 79, 234, 74, 10, 132,
-        248, 209, 144, 132, 248, 210, 160, 0, 39, 25, 70, 32, 70, 4, 154, 5,
-        155, 0, 151, 255, 247, 163, 249, 1, 46, 132, 248, 250, 96, 15, 217,
-        2, 35, 196, 248, 204, 48, 115, 30, 157, 66, 184, 191, 111, 28, 0, 35,
-        132, 248, 251, 80, 132, 248, 252, 112, 132, 248, 253, 80, 132, 248,
-        8, 49, 42, 70, 32, 70, 49, 70, 254, 247, 146, 254, 99, 104, 6, 34, 90,
-        119, 0, 33, 48, 34, 4, 245, 136, 112, 204, 243, 231, 244, 212, 248,
-        204, 80, 79, 240, 255, 51, 1, 45, 196, 248, 20, 49, 28, 209, 132, 248,
-        242, 48, 0, 35, 132, 248, 241, 48, 148, 248, 214, 48, 2, 43, 19, 217,
-        148, 248, 193, 48, 227, 24, 147, 248, 148, 0, 26, 122, 19, 75, 83, 248,
-        34, 48, 67, 234, 0, 64, 1, 40, 148, 191, 0, 32, 1, 32, 253, 247, 167,
-        249, 8, 177, 132, 248, 241, 80, 32, 70, 254, 247, 133, 251, 99, 104,
-        91, 104, 155, 106, 196, 248, 100, 49, 0, 35, 196, 248, 96, 49, 216,
-        248, 0, 48, 27, 104, 147, 248, 229, 48, 43, 177, 32, 70, 7, 176, 189,
-        232, 240, 79, 255, 247, 75, 191, 7, 176, 189, 232, 240, 143, 144, 5,
-        4, 0, 45, 233, 240, 65, 152, 70, 144, 248, 193, 48, 4, 70, 195, 24,
-        147, 248, 148, 0, 22, 70, 26, 122, 18, 75, 13, 70, 83, 248, 34, 48,
-        6, 159, 67, 234, 0, 64, 253, 247, 238, 249, 79, 244, 250, 114, 144,
-        251, 242, 240, 66, 67, 50, 96, 148, 248, 194, 48, 7, 43, 6, 209, 212,
-        248, 188, 48, 171, 66, 148, 191, 0, 37, 1, 37, 0, 224, 0, 37, 56, 70,
-        4, 245, 170, 113, 12, 34, 136, 248, 0, 80, 189, 232, 240, 65, 203, 247,
-        30, 184, 144, 5, 4, 0, 208, 248, 196, 48, 11, 177, 0, 34, 26, 96, 112,
-        71, 131, 105, 218, 104, 138, 66, 24, 191, 217, 96, 112, 71, 56, 181,
-        4, 70, 37, 105, 0, 104, 53, 177, 5, 245, 7, 113, 237, 243, 189, 245,
-        40, 70, 209, 247, 197, 250, 0, 35, 35, 97, 56, 189, 248, 181, 132, 105,
-        5, 70, 6, 104, 224, 106, 8, 177, 209, 247, 186, 250, 233, 105, 176,
-        104, 0, 39, 226, 243, 176, 240, 0, 33, 40, 70, 255, 247, 218, 255, 40,
-        70, 132, 248, 61, 112, 255, 247, 219, 255, 48, 70, 248, 243, 34, 240,
-        39, 130, 103, 98, 167, 98, 231, 98, 39, 131, 248, 189, 115, 181, 4,
-        104, 3, 37, 32, 70, 1, 33, 79, 244, 128, 98, 0, 35, 0, 149, 244, 243,
-        185, 240, 0, 33, 32, 70, 10, 70, 1, 35, 0, 149, 28, 240, 240, 222, 0,
-        38, 212, 248, 104, 50, 157, 89, 157, 177, 171, 121, 139, 185, 213, 248,
-        4, 49, 90, 108, 34, 240, 1, 2, 90, 100, 26, 120, 1, 42, 1, 209, 91,
-        127, 51, 177, 40, 70, 0, 33, 218, 247, 75, 253, 40, 70, 252, 247, 237,
-        249, 4, 54, 32, 46, 228, 209, 32, 70, 2, 176, 189, 232, 112, 64, 247,
-        243, 232, 183, 248, 181, 208, 248, 152, 85, 4, 70, 174, 105, 243, 104,
-        0, 43, 48, 208, 1, 43, 48, 208, 40, 70, 1, 33, 255, 247, 138, 255, 160,
-        104, 233, 105, 226, 243, 88, 240, 40, 177, 40, 70, 0, 33, 255, 247,
-        129, 255, 1, 39, 0, 224, 7, 70, 51, 138, 131, 177, 35, 106, 24, 105,
-        241, 247, 52, 250, 51, 138, 131, 66, 9, 208, 32, 70, 248, 243, 26, 245,
-        32, 70, 49, 138, 247, 243, 232, 241, 32, 70, 242, 243, 201, 244, 212,
-        248, 152, 5, 255, 247, 155, 255, 32, 70, 248, 243, 150, 247, 40, 70,
-        255, 247, 118, 255, 56, 70, 248, 189, 1, 32, 248, 189, 0, 32, 248, 189,
-        255, 247, 193, 191, 0, 32, 112, 71, 192, 121, 1, 40, 5, 217, 160, 241,
-        4, 3, 88, 66, 64, 235, 3, 0, 112, 71, 1, 32, 112, 71, 55, 181, 0, 35,
-        1, 147, 7, 155, 4, 70, 3, 43, 21, 70, 4, 217, 1, 168, 6, 153, 4, 34,
-        202, 247, 85, 255, 8, 45, 2, 208, 9, 45, 11, 209, 4, 224, 180, 248,
-        10, 34, 8, 155, 26, 96, 3, 224, 189, 248, 4, 48, 164, 248, 10, 50, 0,
-        32, 1, 224, 111, 240, 22, 0, 62, 189, 45, 233, 240, 65, 144, 248, 14,
-        50, 134, 176, 4, 70, 208, 248, 36, 130, 83, 177, 144, 249, 224, 81,
-        208, 248, 20, 50, 1, 61, 36, 34, 2, 251, 5, 53, 144, 249, 225, 113,
-        3, 224, 208, 248, 20, 82, 208, 248, 16, 114, 0, 38, 17, 224, 11, 75,
-        160, 104, 0, 147, 1, 147, 0, 35, 2, 147, 3, 147, 4, 147, 43, 104, 65,
-        70, 42, 29, 220, 247, 100, 253, 148, 248, 14, 50, 3, 185, 36, 53, 1,
-        54, 190, 66, 235, 219, 6, 176, 189, 232, 240, 129, 0, 191, 236, 125,
-        135, 0, 115, 181, 4, 70, 128, 104, 248, 243, 155, 244, 160, 104, 242,
-        243, 202, 244, 160, 104, 0, 37, 176, 248, 70, 20, 247, 243, 100, 241,
-        163, 104, 211, 248, 104, 50, 88, 89, 56, 177, 131, 121, 43, 185, 3,
-        122, 27, 177, 3, 124, 11, 185, 243, 243, 57, 242, 4, 53, 32, 45, 239,
-        209, 0, 33, 10, 70, 11, 70, 160, 104, 28, 240, 198, 221, 3, 37, 1, 33,
-        0, 35, 160, 104, 79, 244, 128, 98, 0, 149, 243, 243, 195, 247, 0, 33,
-        10, 70, 11, 70, 160, 104, 0, 149, 28, 240, 250, 221, 163, 104, 0, 34,
-        131, 248, 13, 34, 160, 104, 216, 247, 94, 248, 160, 104, 242, 243, 24,
-        244, 163, 104, 147, 248, 116, 34, 209, 7, 13, 213, 27, 106, 24, 105,
-        241, 247, 27, 249, 160, 104, 248, 243, 224, 246, 163, 104, 147, 248,
-        116, 34, 34, 240, 1, 2, 131, 248, 116, 34, 0, 38, 163, 104, 211, 248,
-        104, 50, 157, 89, 101, 179, 170, 121, 82, 187, 213, 248, 4, 49, 89,
-        108, 33, 240, 1, 1, 89, 100, 147, 248, 118, 16, 1, 41, 8, 191, 131,
-        248, 118, 32, 43, 122, 227, 177, 213, 248, 4, 49, 26, 120, 1, 42, 1,
-        209, 90, 127, 170, 177, 27, 122, 155, 177, 41, 70, 160, 104, 1, 34,
-        10, 240, 11, 222, 1, 70, 72, 177, 180, 248, 228, 33, 213, 248, 4, 49,
-        82, 8, 218, 98, 40, 70, 252, 247, 196, 248, 2, 224, 40, 70, 218, 247,
-        27, 252, 4, 54, 32, 46, 202, 209, 160, 104, 247, 243, 190, 246, 160,
-        104, 2, 176, 189, 232, 112, 64, 246, 243, 154, 177, 248, 181, 131, 104,
-        4, 70, 26, 104, 6, 104, 146, 248, 173, 112, 71, 177, 211, 248, 92, 1,
-        179, 248, 72, 20, 24, 240, 62, 219, 7, 28, 24, 191, 1, 39, 163, 104,
-        211, 248, 40, 53, 115, 187, 111, 187, 179, 136, 67, 240, 32, 3, 179,
-        128, 163, 104, 211, 248, 104, 50, 221, 89, 181, 177, 171, 121, 163,
-        185, 213, 248, 4, 49, 90, 108, 66, 240, 1, 2, 90, 100, 42, 122, 98,
-        177, 27, 122, 83, 185, 40, 70, 1, 33, 218, 247, 224, 251, 213, 248,
-        4, 49, 26, 122, 18, 177, 1, 34, 131, 248, 118, 32, 4, 55, 32, 47, 224,
-        209, 160, 104, 244, 243, 248, 241, 163, 104, 147, 248, 36, 50, 27, 185,
-        179, 136, 35, 240, 32, 3, 179, 128, 160, 104, 247, 243, 113, 246, 176,
-        136, 16, 240, 32, 0, 9, 208, 163, 104, 212, 248, 248, 17, 152, 104,
-        148, 248, 64, 34, 0, 35, 225, 243, 192, 246, 1, 32, 248, 189, 45, 233,
-        240, 67, 5, 104, 208, 248, 8, 144, 171, 136, 4, 70, 67, 244, 0, 99,
-        208, 248, 36, 98, 135, 176, 171, 128, 217, 248, 16, 0, 28, 240, 25,
-        221, 216, 177, 171, 121, 163, 177, 160, 104, 208, 248, 16, 19, 237,
-        243, 197, 243, 32, 70, 4, 33, 49, 240, 69, 218, 4, 35, 0, 147, 160,
-        104, 0, 35, 49, 70, 26, 34, 1, 147, 2, 147, 3, 147, 4, 147, 237, 243,
-        229, 243, 163, 104, 152, 104, 210, 247, 2, 255, 130, 225, 148, 249,
-        224, 49, 2, 51, 3, 209, 255, 35, 132, 248, 224, 49, 122, 225, 163, 104,
-        27, 104, 27, 126, 0, 43, 0, 240, 117, 129, 171, 136, 19, 244, 132, 111,
-        8, 208, 35, 244, 132, 99, 171, 128, 32, 70, 49, 240, 62, 222, 0, 40,
-        64, 240, 104, 129, 171, 136, 26, 7, 68, 191, 35, 240, 8, 3, 171, 128,
-        148, 248, 224, 49, 1, 51, 132, 248, 224, 49, 163, 105, 4, 235, 67, 3,
-        158, 139, 163, 104, 49, 70, 163, 248, 48, 99, 211, 248, 92, 1, 24, 240,
-        150, 218, 72, 185, 163, 104, 49, 70, 211, 248, 92, 1, 24, 240, 33, 220,
-        16, 177, 148, 248, 226, 129, 1, 224, 79, 240, 1, 8, 148, 249, 224, 49,
-        79, 250, 136, 242, 147, 66, 101, 221, 1, 50, 147, 66, 3, 209, 171, 136,
-        35, 240, 16, 3, 171, 128, 212, 248, 220, 17, 163, 105, 1, 57, 139, 66,
-        188, 191, 4, 235, 67, 3, 223, 139, 171, 136, 168, 191, 255, 39, 19,
-        240, 128, 1, 28, 191, 212, 248, 240, 17, 1, 49, 196, 248, 240, 17, 148,
-        249, 224, 17, 145, 66, 54, 209, 180, 248, 228, 33, 0, 42, 50, 208, 255,
-        47, 64, 208, 27, 4, 48, 212, 212, 248, 240, 33, 212, 248, 236, 49, 154,
-        66, 13, 218, 163, 104, 49, 70, 211, 248, 92, 1, 24, 240, 80, 218, 48,
-        185, 163, 104, 57, 70, 211, 248, 92, 1, 24, 240, 73, 218, 224, 177,
-        32, 70, 255, 247, 105, 254, 170, 136, 18, 244, 0, 83, 2, 208, 212, 248,
-        60, 114, 118, 224, 34, 240, 128, 2, 170, 128, 162, 104, 212, 248, 248,
-        17, 144, 104, 180, 248, 228, 33, 225, 243, 251, 245, 171, 136, 111,
-        234, 67, 67, 111, 234, 83, 67, 230, 224, 255, 47, 13, 208, 163, 105,
-        62, 70, 1, 51, 163, 97, 163, 104, 163, 248, 48, 115, 0, 35, 132, 248,
-        224, 49, 171, 136, 91, 4, 91, 12, 171, 128, 148, 249, 224, 49, 251,
-        185, 171, 136, 24, 6, 25, 212, 163, 104, 179, 248, 72, 36, 179, 248,
-        70, 4, 144, 66, 18, 209, 205, 243, 50, 244, 176, 66, 14, 208, 32, 70,
-        49, 240, 105, 219, 32, 70, 255, 247, 186, 254, 0, 40, 64, 240, 190,
-        128, 32, 70, 49, 240, 142, 221, 0, 40, 64, 240, 184, 128, 1, 35, 132,
-        248, 224, 49, 148, 249, 224, 49, 0, 43, 38, 221, 79, 250, 136, 248,
-        67, 69, 34, 220, 107, 106, 217, 7, 10, 212, 48, 70, 205, 243, 240, 243,
-        163, 104, 7, 70, 179, 248, 72, 4, 205, 243, 234, 243, 135, 66, 15, 208,
-        160, 104, 248, 243, 165, 242, 32, 70, 49, 240, 62, 219, 160, 104, 216,
-        247, 95, 254, 160, 104, 49, 70, 246, 243, 109, 247, 160, 104, 242, 243,
-        78, 242, 32, 70, 49, 70, 49, 240, 182, 217, 137, 224, 171, 136, 32,
-        70, 67, 244, 0, 83, 171, 128, 255, 247, 236, 253, 0, 39, 171, 136, 72,
-        70, 35, 240, 128, 3, 171, 128, 79, 240, 255, 51, 163, 97, 33, 70, 0,
-        38, 49, 240, 65, 221, 174, 113, 163, 104, 50, 70, 27, 106, 2, 33, 24,
-        105, 240, 247, 9, 255, 32, 70, 49, 240, 34, 221, 160, 104, 247, 243,
-        25, 245, 160, 104, 245, 243, 190, 240, 160, 104, 245, 243, 21, 241,
-        163, 104, 26, 104, 146, 248, 175, 32, 34, 177, 211, 248, 136, 1, 49,
-        70, 249, 243, 249, 242, 163, 104, 27, 104, 147, 248, 79, 32, 146, 7,
-        6, 208, 147, 249, 82, 48, 27, 177, 32, 70, 0, 33, 48, 240, 208, 223,
-        32, 70, 57, 70, 49, 240, 248, 216, 5, 241, 12, 0, 206, 247, 236, 254,
-        0, 179, 171, 104, 2, 43, 29, 209, 0, 38, 163, 104, 211, 248, 104, 34,
-        144, 89, 160, 177, 130, 121, 146, 185, 2, 122, 130, 177, 208, 248, 252,
-        32, 106, 177, 146, 248, 93, 16, 81, 177, 146, 248, 60, 16, 57, 177,
-        81, 108, 41, 185, 1, 33, 81, 100, 211, 248, 16, 19, 8, 240, 43, 221,
-        4, 54, 32, 46, 226, 209, 160, 104, 0, 38, 208, 248, 16, 19, 237, 243,
-        72, 242, 163, 104, 211, 248, 104, 50, 152, 89, 112, 177, 131, 121, 99,
-        185, 3, 122, 83, 177, 3, 124, 67, 177, 208, 248, 4, 49, 26, 120, 2,
-        42, 3, 209, 27, 122, 11, 185, 251, 247, 180, 254, 4, 54, 32, 46, 232,
-        209, 171, 136, 35, 244, 0, 83, 171, 128, 171, 136, 35, 244, 0, 99, 171,
-        128, 7, 176, 189, 232, 240, 131, 17, 177, 8, 70, 208, 247, 45, 191,
-        112, 71, 56, 181, 0, 35, 129, 104, 4, 70, 131, 96, 4, 224, 13, 104,
-        32, 70, 255, 247, 241, 255, 41, 70, 0, 41, 248, 209, 56, 189, 24, 177,
-        3, 104, 152, 104, 0, 177, 0, 104, 112, 71, 3, 70, 138, 0, 7, 224, 4,
-        216, 24, 104, 208, 248, 104, 2, 128, 88, 32, 185, 1, 49, 4, 50, 7, 41,
-        245, 221, 0, 32, 112, 71, 48, 181, 208, 248, 164, 33, 3, 105, 34, 244,
-        0, 82, 25, 104, 192, 248, 164, 33, 145, 248, 33, 66, 20, 177, 156, 121,
-        0, 44, 56, 208, 18, 240, 1, 15, 53, 209, 69, 104, 27, 76, 44, 64, 0,
-        44, 48, 208, 26, 76, 44, 64, 25, 77, 172, 66, 43, 209, 144, 248, 36,
-        64, 20, 240, 18, 15, 38, 208, 211, 248, 72, 67, 28, 177, 164, 123, 20,
-        240, 1, 15, 31, 209, 209, 248, 8, 66, 228, 185, 179, 248, 90, 64, 28,
-        185, 28, 109, 20, 240, 1, 15, 17, 208, 28, 109, 64, 242, 55, 19, 35,
-        64, 131, 177, 131, 108, 91, 7, 13, 213, 195, 104, 91, 177, 27, 122,
-        4, 43, 8, 209, 145, 248, 148, 50, 43, 185, 35, 7, 3, 212, 66, 244, 0,
-        82, 192, 248, 164, 33, 48, 189, 0, 191, 64, 0, 1, 0, 64, 0, 4, 0, 208,
-        248, 36, 1, 48, 181, 128, 105, 20, 121, 9, 24, 208, 120, 81, 248, 35,
-        48, 68, 64, 80, 121, 68, 64, 8, 122, 148, 251, 240, 245, 0, 251, 21,
-        64, 83, 248, 32, 48, 131, 177, 27, 104, 14, 224, 24, 104, 84, 136, 193,
-        138, 21, 136, 76, 64, 129, 138, 105, 64, 12, 67, 149, 136, 1, 139, 105,
-        64, 33, 67, 137, 178, 25, 177, 91, 104, 0, 43, 238, 209, 24, 70, 48,
-        189, 112, 181, 12, 104, 13, 70, 6, 70, 16, 34, 8, 70, 0, 33, 204, 243,
-        32, 240, 44, 96, 32, 70, 0, 33, 242, 104, 204, 243, 26, 240, 4, 245,
-        20, 115, 196, 248, 252, 48, 4, 245, 28, 115, 37, 96, 196, 248, 52, 49,
-        112, 189, 56, 181, 5, 70, 12, 70, 23, 224, 32, 104, 40, 177, 3, 104,
-        155, 104, 3, 177, 27, 104, 35, 96, 56, 189, 34, 122, 98, 177, 147, 249,
-        68, 16, 40, 70, 1, 49, 255, 247, 77, 255, 96, 96, 40, 177, 171, 105,
-        192, 24, 195, 104, 35, 96, 0, 224, 98, 96, 99, 104, 0, 43, 228, 209,
-        35, 96, 24, 70, 56, 189, 0, 177, 0, 104, 192, 104, 112, 71, 56, 181,
-        133, 105, 12, 70, 8, 104, 1, 34, 50, 240, 243, 222, 96, 89, 24, 177,
-        189, 232, 56, 64, 208, 247, 70, 190, 56, 189, 3, 106, 91, 104, 255,
-        247, 134, 191, 255, 247, 132, 191, 45, 233, 240, 71, 221, 248, 32, 160,
-        0, 37, 7, 70, 14, 70, 144, 70, 153, 70, 202, 248, 0, 80, 215, 248, 104,
-        50, 92, 89, 212, 177, 115, 136, 180, 248, 196, 32, 180, 248, 194, 16,
-        90, 64, 51, 136, 75, 64, 26, 67, 180, 248, 198, 16, 179, 136, 75, 64,
-        19, 67, 155, 178, 83, 185, 56, 70, 33, 70, 66, 70, 75, 70, 255, 247,
-        95, 255, 24, 177, 202, 248, 0, 64, 189, 232, 240, 135, 4, 53, 32, 45,
-        221, 209, 0, 32, 189, 232, 240, 135, 45, 233, 248, 67, 153, 70, 3, 104,
-        208, 248, 36, 65, 219, 105, 23, 70, 27, 105, 34, 137, 5, 70, 154, 66,
-        136, 70, 12, 218, 208, 243, 196, 240, 43, 104, 219, 105, 211, 248, 252,
-        48, 152, 66, 4, 217, 32, 70, 50, 240, 141, 219, 6, 70, 120, 185, 40,
-        70, 50, 240, 142, 221, 1, 70, 0, 40, 51, 208, 40, 70, 51, 240, 14, 219,
-        0, 40, 46, 208, 32, 70, 50, 240, 125, 219, 6, 70, 72, 179, 35, 137,
-        73, 70, 1, 51, 35, 129, 52, 104, 50, 70, 196, 248, 16, 128, 56, 104,
-        96, 97, 187, 136, 40, 70, 35, 131, 2, 35, 50, 240, 37, 221, 7, 70, 40,
-        177, 33, 70, 40, 70, 51, 240, 241, 218, 0, 36, 18, 224, 40, 70, 49,
-        70, 66, 70, 50, 240, 122, 220, 40, 70, 33, 70, 217, 248, 4, 32, 67,
-        70, 50, 240, 45, 220, 39, 97, 32, 70, 65, 70, 51, 240, 2, 216, 0, 224,
-        4, 70, 32, 70, 189, 232, 248, 131, 45, 233, 240, 65, 31, 70, 19, 120,
-        5, 70, 219, 7, 14, 70, 20, 70, 24, 212, 208, 248, 104, 6, 33, 240, 106,
-        219, 1, 40, 21, 208, 4, 40, 19, 208, 40, 70, 49, 70, 34, 70, 59, 70,
-        255, 247, 228, 254, 104, 185, 10, 55, 85, 248, 39, 48, 40, 70, 49, 70,
-        34, 70, 189, 232, 240, 65, 255, 247, 133, 191, 0, 32, 189, 232, 240,
-        129, 0, 32, 189, 232, 240, 129, 255, 247, 214, 191, 3, 106, 91, 104,
-        255, 247, 210, 191, 195, 104, 200, 88, 112, 71, 4, 32, 112, 71, 208,
-        248, 4, 49, 1, 51, 192, 248, 4, 49, 112, 71, 208, 248, 4, 49, 1, 59,
-        192, 248, 4, 49, 112, 71, 3, 105, 154, 121, 26, 185, 211, 248, 0, 49,
-        24, 105, 112, 71, 50, 240, 161, 158, 208, 248, 96, 49, 112, 181, 220,
-        104, 13, 70, 225, 66, 8, 208, 142, 104, 22, 240, 8, 6, 4, 209, 8, 89,
-        16, 177, 208, 247, 95, 253, 46, 81, 112, 189, 208, 248, 96, 49, 45,
-        233, 240, 65, 222, 104, 211, 248, 16, 128, 12, 70, 129, 177, 141, 104,
-        21, 240, 8, 5, 15, 209, 64, 70, 208, 247, 74, 253, 7, 70, 104, 177,
-        41, 70, 66, 70, 203, 243, 222, 246, 167, 81, 40, 70, 189, 232, 240,
-        129, 8, 70, 189, 232, 240, 129, 0, 32, 189, 232, 240, 129, 111, 240,
-        26, 0, 189, 232, 240, 129, 56, 181, 4, 70, 8, 70, 13, 70, 255, 247,
-        220, 254, 144, 177, 64, 108, 9, 75, 3, 64, 0, 240, 64, 112, 19, 185,
-        176, 241, 128, 127, 3, 209, 0, 48, 24, 191, 1, 32, 56, 189, 227, 104,
-        232, 88, 189, 232, 56, 64, 255, 247, 123, 184, 56, 189, 0, 191, 255,
-        0, 0, 192, 112, 181, 20, 70, 18, 136, 30, 70, 4, 157, 255, 247, 140,
-        255, 48, 177, 33, 70, 50, 70, 43, 70, 189, 232, 112, 64, 255, 247, 113,
-        184, 112, 189, 112, 181, 20, 70, 30, 70, 157, 248, 16, 80, 255, 247,
-        124, 255, 48, 177, 33, 70, 50, 70, 43, 70, 189, 232, 112, 64, 254, 247,
-        17, 191, 112, 189, 128, 104, 254, 247, 253, 191, 45, 233, 240, 71, 20,
-        70, 82, 136, 154, 70, 189, 248, 32, 80, 157, 248, 36, 144, 157, 248,
-        40, 128, 157, 248, 44, 112, 157, 248, 48, 96, 255, 247, 95, 255, 96,
-        177, 33, 70, 82, 70, 43, 70, 205, 248, 32, 144, 205, 248, 36, 128, 10,
-        151, 11, 150, 189, 232, 240, 71, 254, 247, 11, 191, 189, 232, 240, 135,
-        128, 104, 254, 247, 221, 190, 56, 181, 20, 70, 29, 70, 255, 247, 71,
-        255, 33, 70, 42, 70, 189, 232, 56, 64, 254, 247, 122, 188, 45, 233,
-        247, 79, 221, 248, 48, 176, 154, 70, 221, 248, 52, 144, 221, 248, 56,
-        128, 157, 248, 60, 112, 157, 248, 64, 96, 157, 248, 68, 80, 157, 248,
-        72, 64, 1, 146, 255, 247, 45, 255, 221, 248, 4, 192, 82, 70, 97, 70,
-        91, 70, 205, 248, 48, 144, 205, 248, 52, 128, 14, 151, 15, 150, 16,
-        149, 17, 148, 3, 176, 189, 232, 240, 79, 254, 247, 99, 191, 45, 233,
-        247, 79, 156, 70, 157, 248, 48, 48, 20, 70, 82, 136, 157, 248, 52, 144,
-        141, 232, 8, 16, 157, 248, 56, 128, 157, 248, 60, 112, 157, 248, 64,
-        96, 157, 248, 68, 80, 157, 248, 72, 160, 157, 248, 76, 176, 255, 247,
-        2, 255, 221, 248, 4, 192, 0, 155, 33, 70, 98, 70, 205, 248, 48, 144,
-        205, 248, 52, 128, 14, 151, 15, 150, 16, 149, 205, 248, 68, 160, 205,
-        248, 72, 176, 3, 176, 189, 232, 240, 79, 254, 247, 234, 190, 16, 181,
-        20, 70, 82, 136, 255, 247, 232, 254, 33, 70, 189, 232, 16, 64, 254,
-        247, 64, 188, 45, 233, 240, 79, 139, 104, 149, 176, 26, 7, 5, 70, 12,
-        70, 208, 248, 96, 145, 176, 248, 72, 132, 0, 241, 190, 128, 79, 104,
-        62, 3, 9, 213, 8, 244, 96, 88, 184, 245, 192, 95, 12, 191, 79, 240,
-        2, 8, 79, 240, 1, 8, 1, 224, 79, 240, 1, 8, 213, 248, 116, 36, 146,
-        249, 19, 16, 72, 28, 7, 209, 23, 244, 128, 55, 13, 208, 19, 240, 128,
-        7, 24, 191, 255, 39, 8, 224, 1, 41, 5, 209, 23, 244, 128, 55, 3, 208,
-        195, 243, 192, 23, 0, 224, 0, 39, 149, 249, 32, 18, 1, 49, 11, 209,
-        184, 241, 2, 15, 3, 240, 1, 6, 64, 240, 137, 128, 154, 7, 4, 213, 70,
-        240, 2, 6, 246, 178, 0, 224, 0, 38, 213, 248, 160, 1, 33, 70, 62, 240,
-        197, 216, 99, 104, 131, 70, 219, 3, 5, 213, 213, 248, 116, 52, 147,
-        248, 123, 48, 0, 43, 77, 209, 217, 248, 12, 48, 84, 248, 3, 160, 186,
-        241, 0, 15, 112, 208, 40, 34, 10, 168, 4, 241, 76, 1, 202, 247, 74,
-        249, 43, 104, 147, 248, 79, 48, 152, 7, 32, 208, 35, 105, 211, 248,
-        204, 48, 217, 4, 27, 212, 148, 248, 14, 49, 155, 185, 3, 224, 0, 35,
-        141, 248, 62, 48, 11, 224, 213, 248, 116, 36, 147, 120, 1, 43, 246,
-        208, 146, 248, 60, 32, 1, 42, 242, 208, 2, 43, 8, 209, 0, 35, 141, 248,
-        63, 48, 4, 224, 148, 248, 15, 49, 0, 43, 232, 208, 235, 231, 10, 171,
-        141, 232, 8, 1, 118, 178, 0, 35, 127, 178, 4, 147, 5, 147, 6, 147, 7,
-        147, 8, 147, 9, 147, 2, 150, 3, 151, 217, 248, 8, 0, 81, 70, 34, 70,
-        91, 70, 255, 247, 41, 248, 213, 248, 228, 6, 33, 70, 51, 240, 242, 217,
-        41, 224, 34, 70, 1, 35, 213, 248, 116, 20, 145, 248, 123, 16, 153, 66,
-        2, 216, 0, 33, 130, 248, 98, 16, 1, 51, 219, 178, 1, 50, 4, 43, 241,
-        209, 79, 240, 2, 10, 213, 248, 116, 52, 147, 248, 123, 48, 179, 235,
-        234, 15, 5, 220, 4, 241, 97, 0, 10, 241, 85, 1, 204, 243, 138, 243,
-        10, 241, 1, 10, 186, 241, 18, 15, 237, 209, 140, 231, 19, 108, 0, 43,
-        24, 191, 0, 38, 120, 231, 21, 176, 189, 232, 240, 143, 31, 181, 4, 70,
-        1, 169, 208, 248, 36, 1, 0, 34, 50, 240, 152, 220, 2, 224, 32, 70, 255,
-        247, 38, 255, 1, 169, 212, 248, 36, 1, 255, 247, 19, 253, 1, 70, 0,
-        40, 244, 209, 212, 248, 228, 6, 51, 240, 182, 217, 31, 189, 48, 181,
-        13, 70, 133, 176, 4, 70, 1, 169, 208, 248, 36, 1, 42, 70, 50, 240, 125,
-        220, 2, 224, 32, 70, 255, 247, 11, 255, 1, 169, 212, 248, 36, 1, 255,
-        247, 248, 252, 1, 70, 0, 40, 244, 209, 212, 248, 228, 6, 41, 70, 51,
-        240, 170, 217, 5, 176, 48, 189, 48, 181, 133, 176, 4, 70, 10, 70, 208,
-        248, 96, 81, 1, 169, 208, 248, 36, 1, 50, 240, 95, 220, 212, 248, 36,
-        1, 1, 169, 255, 247, 222, 252, 32, 177, 235, 104, 192, 88, 254, 247,
-        56, 251, 244, 231, 5, 176, 48, 189, 45, 233, 240, 65, 6, 157, 30, 70,
-        7, 156, 8, 159, 255, 247, 191, 253, 49, 70, 42, 70, 35, 70, 6, 151,
-        189, 232, 240, 65, 255, 247, 48, 184, 25, 177, 195, 104, 200, 88, 254,
-        247, 113, 191, 112, 71, 8, 181, 255, 247, 174, 253, 189, 232, 8, 64,
-        255, 247, 85, 184, 112, 181, 5, 104, 189, 248, 16, 64, 46, 104, 150,
-        248, 213, 96, 86, 185, 149, 249, 23, 85, 181, 241, 255, 63, 3, 209,
-        144, 248, 152, 3, 40, 177, 1, 224, 1, 45, 2, 209, 157, 248, 20, 0, 144,
-        177, 73, 107, 1, 235, 194, 0, 81, 248, 50, 32, 147, 66, 6, 211, 7, 209,
-        128, 136, 160, 66, 148, 191, 0, 32, 1, 32, 2, 224, 1, 32, 0, 224, 0,
-        32, 192, 178, 112, 189, 209, 248, 224, 16, 82, 1, 138, 24, 17, 105,
-        139, 66, 27, 211, 2, 209, 145, 138, 161, 66, 25, 216, 145, 105, 139,
-        66, 6, 211, 7, 209, 144, 139, 160, 66, 52, 191, 0, 32, 1, 32, 2, 224,
-        1, 32, 0, 224, 0, 32, 96, 177, 4, 240, 127, 4, 227, 8, 208, 92, 4, 240,
-        7, 4, 32, 65, 0, 240, 1, 0, 112, 189, 1, 32, 112, 189, 1, 32, 112, 189,
-        0, 0, 45, 233, 240, 79, 28, 70, 147, 248, 96, 176, 95, 104, 211, 104,
-        173, 245, 17, 125, 6, 70, 5, 145, 145, 70, 21, 105, 51, 177, 27, 122,
-        11, 43, 3, 209, 59, 120, 3, 240, 1, 3, 1, 224, 251, 120, 155, 9, 227,
-        99, 148, 248, 44, 48, 73, 70, 0, 147, 48, 70, 42, 70, 227, 107, 31,
-        240, 113, 221, 1, 70, 160, 99, 32, 177, 42, 109, 64, 242, 55, 19, 19,
-        64, 43, 185, 48, 70, 33, 70, 74, 70, 51, 240, 176, 222, 229, 224, 144,
-        249, 14, 32, 144, 249, 15, 48, 211, 24, 162, 104, 154, 66, 192, 240,
-        221, 128, 162, 105, 19, 138, 19, 240, 8, 15, 13, 208, 0, 122, 11, 40,
-        10, 209, 150, 248, 197, 5, 56, 177, 136, 121, 3, 40, 4, 216, 35, 240,
-        8, 3, 27, 4, 27, 12, 19, 130, 11, 122, 4, 43, 90, 208, 11, 43, 0, 240,
-        177, 128, 2, 43, 64, 240, 195, 128, 187, 120, 151, 248, 0, 160, 151,
-        248, 6, 128, 67, 234, 10, 42, 123, 121, 79, 234, 8, 72, 72, 234, 3,
-        40, 59, 121, 72, 234, 3, 8, 251, 121, 180, 248, 104, 112, 72, 234, 3,
-        104, 23, 240, 1, 7, 64, 240, 174, 128, 148, 248, 44, 48, 40, 70, 1,
-        147, 90, 70, 67, 70, 205, 248, 0, 160, 255, 247, 57, 255, 0, 40, 0,
-        240, 161, 128, 171, 121, 0, 43, 64, 240, 121, 130, 51, 104, 211, 248,
-        136, 48, 211, 248, 220, 33, 1, 50, 195, 248, 220, 33, 148, 248, 44,
-        32, 34, 177, 211, 248, 180, 34, 1, 50, 195, 248, 180, 34, 211, 248,
-        232, 33, 1, 50, 195, 248, 232, 33, 213, 248, 4, 49, 147, 248, 52, 48,
-        27, 177, 40, 70, 0, 33, 43, 240, 137, 221, 148, 248, 44, 112, 0, 47,
-        0, 240, 86, 130, 51, 104, 211, 248, 136, 48, 211, 248, 192, 34, 1, 50,
-        195, 248, 192, 34, 107, 224, 59, 120, 151, 248, 1, 160, 151, 248, 6,
-        128, 67, 234, 10, 42, 251, 121, 79, 234, 8, 72, 72, 234, 3, 104, 59,
-        121, 72, 234, 3, 8, 123, 121, 72, 234, 3, 40, 43, 124, 27, 185, 181,
-        248, 90, 48, 219, 7, 88, 212, 180, 248, 104, 112, 23, 240, 1, 7, 83,
-        209, 148, 248, 44, 48, 40, 70, 1, 147, 90, 70, 67, 70, 205, 248, 0,
-        160, 255, 247, 223, 254, 0, 40, 71, 208, 171, 121, 0, 43, 64, 240, 32,
-        130, 51, 104, 211, 248, 136, 48, 211, 248, 220, 33, 1, 50, 195, 248,
-        220, 33, 148, 248, 44, 32, 34, 177, 211, 248, 180, 34, 1, 50, 195, 248,
-        180, 34, 211, 248, 240, 33, 1, 50, 195, 248, 240, 33, 213, 248, 4, 49,
-        147, 248, 52, 48, 27, 177, 40, 70, 0, 33, 43, 240, 48, 221, 148, 248,
-        44, 112, 0, 47, 0, 240, 253, 129, 51, 104, 211, 248, 136, 48, 211, 248,
-        200, 34, 1, 50, 195, 248, 200, 34, 18, 224, 2, 55, 200, 49, 16, 34,
-        56, 70, 203, 243, 24, 246, 0, 40, 12, 218, 140, 72, 57, 70, 16, 34,
-        203, 243, 127, 247, 161, 107, 138, 72, 200, 49, 16, 34, 203, 243, 121,
-        247, 0, 39, 222, 225, 79, 240, 0, 8, 194, 70, 150, 248, 148, 50, 147,
-        185, 43, 109, 31, 7, 15, 212, 160, 107, 3, 122, 2, 43, 2, 209, 206,
-        247, 56, 249, 64, 185, 99, 105, 155, 105, 152, 0, 4, 212, 163, 105,
-        27, 138, 25, 7, 0, 241, 250, 128, 99, 105, 155, 105, 90, 6, 224, 212,
-        163, 105, 26, 138, 66, 240, 8, 2, 26, 130, 161, 107, 11, 122, 1, 59,
-        10, 43, 0, 242, 206, 128, 223, 232, 19, 240, 53, 0, 11, 0, 53, 0, 108,
-        0, 204, 0, 204, 0, 204, 0, 204, 0, 204, 0, 204, 0, 174, 0, 8, 70, 206,
-        247, 15, 249, 8, 177, 43, 124, 75, 177, 163, 107, 211, 248, 136, 32,
-        144, 69, 4, 216, 15, 208, 147, 248, 140, 32, 90, 69, 11, 208, 161, 107,
-        34, 104, 4, 241, 64, 7, 56, 70, 20, 49, 10, 50, 67, 70, 217, 243, 204,
-        243, 231, 101, 1, 224, 100, 51, 227, 101, 161, 107, 4, 241, 74, 7, 56,
-        70, 20, 49, 226, 109, 83, 70, 217, 243, 137, 244, 56, 70, 16, 33, 16,
-        224, 97, 104, 3, 34, 132, 168, 201, 247, 165, 254, 163, 107, 132, 168,
-        3, 241, 20, 1, 26, 105, 3, 48, 201, 247, 157, 254, 163, 107, 132, 168,
-        25, 105, 3, 49, 7, 170, 210, 243, 146, 245, 163, 107, 96, 104, 147,
-        249, 14, 48, 161, 104, 192, 24, 201, 26, 7, 170, 210, 243, 170, 245,
-        163, 107, 96, 104, 147, 249, 14, 48, 161, 104, 192, 24, 201, 26, 79,
-        240, 255, 50, 204, 243, 93, 241, 68, 75, 162, 105, 152, 66, 19, 138,
-        4, 209, 35, 240, 16, 3, 27, 4, 27, 12, 1, 224, 67, 240, 16, 3, 19, 130,
-        124, 224, 99, 104, 223, 120, 23, 240, 32, 7, 31, 208, 10, 105, 72, 168,
-        20, 49, 210, 0, 211, 243, 8, 242, 0, 35, 33, 104, 98, 105, 72, 70, 51,
-        240, 62, 217, 0, 39, 163, 107, 1, 144, 0, 151, 25, 105, 72, 168, 35,
-        104, 226, 104, 199, 243, 32, 247, 131, 28, 5, 209, 163, 105, 26, 138,
-        66, 240, 16, 2, 26, 130, 89, 224, 1, 48, 87, 209, 51, 104, 211, 248,
-        136, 48, 211, 248, 220, 33, 1, 50, 195, 248, 220, 33, 211, 248, 244,
-        33, 1, 50, 195, 248, 244, 33, 148, 248, 44, 32, 0, 42, 0, 240, 15, 129,
-        211, 248, 180, 34, 1, 50, 195, 248, 180, 34, 211, 248, 204, 34, 1, 50,
-        195, 248, 204, 34, 6, 225, 1, 241, 20, 0, 226, 104, 36, 49, 35, 104,
-        215, 243, 86, 241, 0, 40, 127, 244, 28, 175, 162, 107, 210, 248, 216,
-        48, 1, 51, 194, 248, 216, 48, 51, 240, 124, 67, 39, 209, 242, 34, 1,
-        146, 214, 248, 152, 1, 41, 70, 9, 241, 20, 2, 0, 147, 62, 240, 18, 221,
-        28, 224, 175, 121, 0, 47, 127, 244, 4, 175, 51, 104, 211, 248, 136,
-        48, 211, 248, 220, 33, 1, 50, 195, 248, 220, 33, 148, 248, 44, 32, 0,
-        42, 0, 240, 213, 128, 211, 248, 180, 34, 1, 50, 195, 248, 180, 34, 209,
-        224, 62, 200, 136, 0, 68, 200, 136, 0, 227, 32, 187, 222, 163, 107,
-        97, 104, 147, 249, 14, 32, 138, 24, 98, 96, 147, 249, 14, 16, 147, 249,
-        15, 32, 138, 24, 161, 104, 138, 26, 162, 96, 147, 249, 14, 16, 147,
-        249, 15, 32, 138, 24, 33, 105, 138, 26, 34, 97, 162, 105, 18, 138, 2,
-        240, 24, 2, 24, 42, 100, 209, 171, 121, 0, 43, 127, 244, 203, 174, 149,
-        249, 68, 32, 0, 147, 1, 147, 2, 147, 48, 70, 49, 35, 213, 248, 244,
-        16, 50, 240, 43, 223, 51, 104, 211, 248, 136, 48, 211, 248, 220, 33,
-        1, 50, 195, 248, 220, 33, 211, 248, 236, 33, 1, 50, 195, 248, 236, 33,
-        211, 248, 244, 33, 1, 50, 195, 248, 244, 33, 148, 248, 44, 32, 114,
-        177, 211, 248, 180, 34, 1, 50, 195, 248, 180, 34, 211, 248, 196, 34,
-        1, 50, 195, 248, 196, 34, 211, 248, 204, 34, 1, 50, 195, 248, 204, 34,
-        162, 107, 18, 122, 2, 42, 5, 208, 3, 42, 18, 208, 1, 42, 127, 244, 147,
-        174, 14, 224, 211, 248, 8, 34, 1, 50, 195, 248, 8, 34, 148, 248, 44,
-        112, 0, 47, 105, 208, 211, 248, 224, 34, 1, 50, 195, 248, 224, 34, 130,
-        230, 211, 248, 0, 34, 1, 50, 195, 248, 0, 34, 211, 248, 252, 33, 1,
-        50, 195, 248, 252, 33, 148, 248, 44, 112, 0, 47, 85, 208, 211, 248,
-        216, 34, 1, 50, 195, 248, 216, 34, 211, 248, 212, 34, 1, 50, 195, 248,
-        212, 34, 105, 230, 97, 105, 138, 137, 226, 96, 148, 248, 45, 32, 154,
-        185, 147, 249, 15, 32, 5, 152, 146, 178, 207, 243, 173, 247, 99, 105,
-        218, 137, 151, 4, 2, 213, 179, 248, 80, 48, 139, 185, 163, 107, 226,
-        104, 147, 249, 15, 48, 211, 26, 227, 96, 10, 224, 5, 152, 204, 243,
-        250, 240, 163, 107, 1, 70, 147, 249, 15, 32, 5, 152, 146, 178, 207,
-        243, 148, 247, 51, 104, 196, 248, 100, 128, 211, 248, 136, 48, 164,
-        248, 98, 160, 211, 248, 4, 34, 1, 50, 195, 248, 4, 34, 148, 248, 44,
-        32, 34, 177, 211, 248, 220, 34, 1, 50, 195, 248, 220, 34, 163, 107,
-        27, 122, 4, 43, 1, 208, 2, 43, 10, 209, 180, 248, 104, 48, 216, 7, 6,
-        212, 48, 70, 33, 70, 51, 240, 56, 220, 1, 224, 23, 70, 0, 224, 1, 39,
-        56, 70, 13, 245, 17, 125, 189, 232, 240, 143, 0, 191, 67, 104, 11, 177,
-        25, 96, 0, 224, 1, 96, 0, 35, 65, 96, 11, 96, 112, 71, 2, 35, 247, 181,
-        70, 104, 67, 96, 0, 35, 4, 70, 67, 97, 197, 104, 11, 224, 99, 105, 41,
-        29, 1, 51, 99, 97, 43, 105, 167, 104, 0, 147, 32, 104, 14, 201, 184,
-        71, 24, 185, 45, 104, 0, 45, 241, 209, 40, 70, 102, 96, 254, 189, 45,
-        233, 247, 67, 208, 248, 4, 128, 4, 70, 184, 241, 2, 15, 1, 208, 1, 35,
-        67, 97, 2, 35, 205, 28, 99, 96, 1, 235, 2, 9, 37, 240, 3, 5, 0, 38,
-        22, 224, 99, 105, 41, 104, 1, 51, 177, 245, 131, 127, 99, 97, 19, 208,
-        107, 104, 11, 177, 5, 241, 8, 6, 0, 34, 0, 146, 167, 104, 32, 104, 50,
-        70, 184, 71, 80, 185, 107, 104, 237, 24, 11, 53, 37, 240, 3, 5, 169,
-        69, 230, 216, 0, 32, 1, 224, 111, 240, 1, 0, 196, 248, 4, 128, 189,
-        232, 254, 131, 112, 181, 5, 70, 196, 104, 8, 224, 160, 104, 38, 104,
-        8, 177, 207, 247, 133, 255, 32, 70, 207, 247, 130, 255, 52, 70, 0, 44,
-        244, 209, 5, 241, 12, 0, 33, 70, 8, 34, 189, 232, 112, 64, 203, 243,
-        14, 177, 55, 181, 1, 58, 4, 70, 8, 153, 9, 155, 8, 42, 68, 216, 223,
-        232, 2, 240, 5, 24, 67, 67, 34, 67, 44, 67, 55, 0, 99, 104, 2, 43, 70,
-        209, 4, 34, 1, 168, 201, 247, 161, 252, 1, 155, 66, 242, 15, 114, 89,
-        30, 145, 66, 51, 216, 79, 244, 122, 112, 88, 67, 207, 243, 92, 244,
-        7, 224, 3, 43, 46, 217, 8, 70, 4, 34, 4, 241, 20, 1, 201, 247, 141,
-        252, 0, 37, 46, 224, 161, 241, 9, 2, 146, 7, 37, 209, 32, 70, 26, 70,
-        255, 247, 130, 255, 5, 70, 36, 224, 99, 104, 43, 185, 1, 35, 99, 96,
-        32, 70, 255, 247, 173, 255, 26, 224, 0, 37, 101, 96, 25, 224, 99, 104,
-        171, 185, 32, 70, 255, 247, 86, 255, 1, 35, 5, 70, 99, 96, 32, 70, 255,
-        247, 158, 255, 13, 224, 111, 240, 22, 5, 10, 224, 111, 240, 1, 5, 7,
-        224, 111, 240, 13, 5, 4, 224, 111, 240, 20, 5, 1, 224, 79, 240, 255,
-        53, 40, 70, 62, 189, 1, 41, 45, 233, 248, 67, 5, 70, 12, 70, 22, 70,
-        152, 70, 79, 217, 117, 41, 77, 208, 14, 41, 75, 208, 177, 245, 162,
-        127, 72, 220, 41, 79, 14, 224, 164, 245, 131, 115, 1, 43, 10, 216, 78,
-        177, 72, 70, 203, 243, 77, 241, 49, 70, 2, 70, 72, 70, 203, 243, 80,
-        241, 0, 40, 55, 208, 87, 248, 4, 159, 185, 241, 0, 15, 235, 209, 213,
-        248, 4, 144, 185, 241, 0, 15, 48, 209, 180, 245, 131, 127, 33, 208,
-        20, 32, 207, 247, 232, 254, 7, 70, 224, 177, 73, 70, 20, 34, 203, 243,
-        124, 240, 8, 155, 124, 96, 199, 248, 12, 128, 59, 97, 184, 241, 0, 15,
-        8, 208, 64, 70, 207, 247, 215, 254, 184, 96, 208, 177, 49, 70, 66, 70,
-        201, 247, 19, 252, 5, 241, 12, 0, 57, 70, 255, 247, 234, 254, 0, 32,
-        189, 232, 248, 131, 1, 35, 40, 70, 107, 96, 255, 247, 57, 255, 79, 240,
-        255, 48, 189, 232, 248, 131, 1, 32, 189, 232, 248, 131, 1, 32, 189,
-        232, 248, 131, 56, 70, 207, 247, 186, 254, 236, 231, 104, 11, 4, 0,
-        56, 181, 0, 33, 197, 104, 56, 34, 4, 70, 203, 243, 71, 240, 111, 240,
-        0, 67, 229, 96, 163, 96, 56, 189, 56, 181, 5, 70, 20, 70, 10, 177, 48,
-        42, 11, 209, 8, 70, 56, 34, 41, 70, 201, 247, 223, 251, 48, 44, 7, 209,
-        40, 70, 255, 247, 228, 255, 0, 32, 56, 189, 111, 240, 1, 0, 56, 189,
-        0, 32, 56, 189, 55, 181, 0, 35, 4, 70, 11, 153, 0, 104, 1, 147, 21,
-        70, 233, 247, 187, 253, 7, 155, 3, 43, 4, 217, 1, 168, 6, 153, 4, 34,
-        201, 247, 194, 251, 45, 185, 96, 104, 8, 153, 1, 154, 255, 247, 210,
-        255, 1, 224, 111, 240, 22, 0, 62, 189, 67, 104, 90, 136, 16, 29, 1,
-        50, 146, 178, 9, 42, 67, 248, 32, 16, 90, 128, 1, 217, 0, 34, 90, 128,
-        90, 104, 138, 66, 154, 104, 56, 191, 89, 96, 138, 66, 136, 191, 153,
-        96, 112, 71, 75, 28, 1, 209, 3, 106, 5, 224, 203, 178, 1, 43, 5, 216,
-        10, 49, 80, 248, 33, 48, 147, 248, 76, 0, 112, 71, 111, 240, 28, 0,
-        112, 71, 208, 248, 116, 52, 88, 123, 112, 71, 176, 248, 197, 2, 0, 240,
-        12, 0, 128, 8, 112, 71, 111, 240, 22, 0, 112, 71, 3, 106, 147, 249,
-        77, 0, 112, 71, 112, 181, 208, 248, 116, 52, 90, 120, 6, 42, 1, 209,
-        2, 34, 0, 224, 1, 34, 0, 33, 26, 117, 11, 70, 20, 76, 208, 248, 116,
-        36, 13, 93, 2, 235, 67, 2, 85, 117, 208, 248, 116, 36, 146, 248, 124,
-        96, 142, 177, 176, 248, 72, 84, 5, 244, 96, 85, 181, 245, 128, 95, 79,
-        234, 67, 5, 2, 209, 82, 25, 2, 36, 3, 224, 2, 46, 3, 209, 82, 25, 4,
-        36, 148, 117, 6, 224, 93, 0, 86, 25, 18, 125, 237, 24, 173, 24, 98,
-        93, 178, 117, 1, 51, 3, 49, 6, 43, 214, 209, 112, 189, 252, 11, 4, 0,
-        130, 120, 67, 120, 145, 66, 54, 216, 1, 41, 37, 209, 144, 248, 124,
-        32, 1, 42, 10, 209, 3, 240, 2, 0, 192, 178, 0, 40, 12, 191, 4, 32, 2,
-        32, 24, 66, 8, 191, 1, 32, 112, 71, 2, 42, 10, 209, 3, 240, 4, 0, 192,
-        178, 0, 40, 12, 191, 1, 32, 4, 32, 24, 66, 8, 191, 2, 32, 112, 71, 3,
-        240, 1, 0, 0, 40, 12, 191, 2, 32, 1, 32, 24, 66, 8, 191, 4, 32, 112,
-        71, 2, 41, 14, 209, 3, 240, 5, 2, 5, 42, 12, 191, 5, 34, 3, 34, 2, 234,
-        3, 0, 144, 66, 12, 191, 16, 70, 6, 32, 112, 71, 0, 32, 112, 71, 7, 32,
-        112, 71, 16, 181, 96, 177, 3, 120, 1, 34, 6, 224, 16, 248, 1, 79, 1,
-        50, 156, 66, 40, 191, 35, 70, 219, 178, 138, 66, 246, 211, 0, 224, 3,
-        70, 24, 70, 16, 189, 65, 24, 129, 248, 82, 32, 144, 248, 82, 32, 3,
-        120, 19, 64, 144, 248, 83, 32, 19, 64, 144, 248, 84, 32, 19, 64, 144,
-        248, 85, 32, 19, 64, 144, 248, 86, 32, 3, 234, 2, 0, 112, 71, 208, 248,
-        116, 52, 17, 244, 64, 127, 88, 137, 3, 209, 147, 249, 8, 32, 3, 42,
-        1, 209, 88, 120, 128, 1, 0, 244, 112, 112, 112, 71, 0, 0, 45, 233, 240,
-        71, 208, 248, 116, 52, 154, 176, 220, 106, 176, 248, 72, 100, 157, 120,
-        138, 70, 7, 70, 1, 169, 0, 34, 154, 72, 16, 92, 3, 50, 18, 42, 65, 248,
-        4, 15, 248, 209, 0, 44, 0, 240, 217, 129, 1, 45, 64, 242, 214, 129,
-        6, 244, 96, 86, 166, 245, 192, 82, 86, 66, 70, 235, 2, 6, 147, 248,
-        138, 32, 34, 177, 155, 121, 1, 43, 1, 217, 1, 35, 114, 224, 32, 70,
-        174, 177, 3, 33, 1, 34, 23, 171, 250, 247, 231, 255, 3, 33, 2, 34, 32,
-        70, 24, 171, 250, 247, 225, 255, 3, 45, 5, 209, 32, 70, 41, 70, 42,
-        70, 25, 171, 250, 247, 217, 255, 79, 240, 0, 8, 15, 224, 1, 34, 49,
-        70, 23, 171, 250, 247, 209, 255, 2, 34, 32, 70, 49, 70, 24, 171, 250,
-        247, 203, 255, 3, 45, 239, 209, 32, 70, 49, 70, 232, 231, 23, 171, 24,
-        249, 3, 32, 128, 50, 5, 209, 215, 248, 116, 36, 146, 248, 120, 32, 8,
-        248, 3, 32, 24, 171, 24, 249, 3, 32, 128, 50, 5, 209, 215, 248, 116,
-        36, 146, 248, 120, 32, 8, 248, 3, 32, 3, 45, 10, 209, 25, 171, 24, 249,
-        3, 32, 128, 50, 5, 209, 215, 248, 116, 36, 146, 248, 120, 32, 8, 248,
-        3, 32, 8, 241, 1, 8, 184, 241, 4, 15, 215, 209, 65, 70, 23, 168, 255,
-        247, 76, 255, 65, 70, 192, 241, 0, 9, 24, 168, 255, 247, 70, 255, 192,
-        241, 6, 3, 75, 69, 128, 70, 1, 219, 2, 35, 2, 147, 2, 45, 16, 208, 4,
-        33, 25, 168, 255, 247, 57, 255, 192, 241, 9, 3, 75, 69, 8, 219, 111,
-        240, 2, 3, 200, 235, 3, 3, 64, 66, 131, 66, 1, 220, 3, 35, 2, 147, 17,
-        171, 0, 147, 32, 70, 206, 177, 1, 33, 0, 34, 11, 70, 250, 247, 138,
-        255, 2, 34, 19, 171, 0, 147, 1, 33, 32, 70, 19, 70, 250, 247, 130, 255,
-        3, 45, 7, 209, 21, 171, 0, 147, 32, 70, 1, 33, 2, 34, 43, 70, 250, 247,
-        120, 255, 79, 240, 0, 8, 19, 224, 1, 35, 49, 70, 50, 70, 250, 247, 112,
-        255, 2, 34, 19, 171, 0, 147, 32, 70, 49, 70, 19, 70, 250, 247, 104,
-        255, 3, 45, 237, 209, 21, 171, 0, 147, 32, 70, 49, 70, 228, 231, 17,
-        171, 24, 249, 3, 32, 128, 50, 5, 209, 215, 248, 116, 36, 146, 248, 120,
-        32, 8, 248, 3, 32, 19, 171, 24, 249, 3, 32, 128, 50, 5, 209, 215, 248,
-        116, 36, 146, 248, 120, 32, 8, 248, 3, 32, 3, 45, 10, 209, 21, 171,
-        24, 249, 3, 32, 128, 50, 5, 209, 215, 248, 116, 36, 146, 248, 120, 32,
-        8, 248, 3, 32, 8, 241, 1, 8, 184, 241, 8, 15, 215, 209, 65, 70, 17,
-        168, 255, 247, 206, 254, 65, 70, 192, 241, 0, 9, 19, 168, 255, 247,
-        200, 254, 192, 241, 6, 3, 75, 69, 128, 70, 1, 219, 2, 35, 3, 147, 2,
-        45, 16, 208, 8, 33, 21, 168, 255, 247, 187, 254, 192, 241, 9, 3, 75,
-        69, 8, 219, 111, 240, 2, 3, 200, 235, 3, 3, 64, 66, 131, 66, 1, 220,
-        3, 35, 3, 147, 79, 240, 1, 8, 8, 171, 205, 248, 0, 128, 1, 147, 32,
-        70, 6, 179, 0, 35, 65, 70, 66, 70, 250, 247, 63, 255, 79, 240, 2, 9,
-        11, 171, 1, 147, 32, 70, 65, 70, 66, 70, 75, 70, 205, 248, 0, 144, 250,
-        247, 51, 255, 3, 45, 8, 209, 14, 171, 0, 149, 1, 147, 32, 70, 65, 70,
-        66, 70, 75, 70, 250, 247, 40, 255, 79, 240, 0, 8, 26, 224, 252, 11,
-        4, 0, 49, 70, 66, 70, 51, 70, 250, 247, 30, 255, 79, 240, 2, 9, 11,
-        171, 1, 147, 32, 70, 49, 70, 66, 70, 75, 70, 205, 248, 0, 144, 250,
-        247, 18, 255, 3, 45, 231, 209, 14, 171, 0, 149, 1, 147, 32, 70, 49,
-        70, 221, 231, 8, 171, 24, 249, 3, 32, 128, 50, 5, 209, 215, 248, 116,
-        36, 146, 248, 120, 32, 8, 248, 3, 32, 11, 171, 24, 249, 3, 32, 128,
-        50, 5, 209, 215, 248, 116, 36, 146, 248, 120, 32, 8, 248, 3, 32, 3,
-        45, 10, 209, 14, 171, 24, 249, 3, 32, 128, 50, 5, 209, 215, 248, 116,
-        36, 146, 248, 120, 32, 8, 248, 3, 32, 8, 241, 1, 8, 184, 241, 8, 15,
-        215, 209, 65, 70, 8, 168, 255, 247, 64, 254, 65, 70, 192, 241, 0, 9,
-        11, 168, 255, 247, 58, 254, 192, 241, 6, 3, 75, 69, 128, 70, 1, 219,
-        2, 35, 4, 147, 2, 45, 87, 208, 8, 33, 14, 168, 255, 247, 45, 254, 192,
-        241, 9, 3, 75, 69, 8, 219, 111, 240, 2, 3, 200, 235, 3, 3, 64, 66, 131,
-        66, 1, 220, 3, 35, 4, 147, 3, 34, 14, 171, 141, 232, 12, 0, 32, 70,
-        102, 177, 1, 33, 2, 34, 0, 35, 250, 247, 179, 254, 11, 171, 2, 34, 1,
-        147, 0, 146, 32, 70, 1, 33, 0, 35, 11, 224, 49, 70, 2, 34, 51, 70, 250,
-        247, 166, 254, 11, 171, 2, 34, 1, 147, 0, 146, 32, 70, 49, 70, 51, 70,
-        250, 247, 157, 254, 0, 36, 11, 171, 226, 86, 128, 50, 4, 209, 215, 248,
-        116, 36, 146, 248, 120, 32, 226, 84, 14, 171, 226, 86, 128, 50, 4, 209,
-        215, 248, 116, 36, 146, 248, 120, 32, 226, 84, 1, 52, 8, 44, 234, 209,
-        33, 70, 11, 168, 255, 247, 229, 253, 33, 70, 5, 70, 14, 168, 255, 247,
-        224, 253, 109, 66, 192, 241, 3, 0, 168, 66, 1, 219, 3, 35, 5, 147, 85,
-        70, 0, 36, 2, 171, 225, 88, 215, 248, 116, 4, 255, 247, 146, 253, 4,
-        52, 24, 44, 5, 248, 1, 11, 244, 209, 26, 176, 189, 232, 240, 135, 208,
-        248, 116, 52, 26, 122, 10, 185, 64, 34, 5, 224, 1, 42, 1, 209, 128,
-        34, 1, 224, 90, 120, 146, 1, 90, 129, 0, 105, 89, 137, 231, 247, 24,
-        187, 56, 181, 75, 28, 1, 43, 4, 70, 13, 70, 7, 217, 1, 41, 38, 209,
-        208, 248, 116, 52, 155, 120, 1, 43, 1, 209, 34, 224, 81, 177, 212, 248,
-        116, 52, 155, 120, 1, 43, 5, 208, 35, 106, 24, 105, 240, 247, 125, 249,
-        128, 7, 6, 212, 180, 248, 197, 50, 35, 240, 128, 3, 27, 4, 27, 12, 3,
-        224, 180, 248, 197, 50, 67, 240, 128, 3, 164, 248, 197, 50, 163, 106,
-        1, 32, 131, 248, 77, 80, 227, 106, 131, 248, 77, 80, 56, 189, 0, 32,
-        56, 189, 0, 32, 56, 189, 16, 181, 176, 248, 197, 50, 4, 70, 35, 244,
-        64, 115, 67, 234, 1, 35, 160, 248, 197, 50, 3, 104, 27, 126, 59, 177,
-        247, 243, 151, 242, 32, 70, 1, 33, 189, 232, 16, 64, 247, 243, 77, 179,
-        16, 189, 3, 42, 112, 181, 5, 70, 12, 70, 14, 216, 2, 42, 12, 208, 214,
-        178, 49, 70, 241, 243, 251, 242, 76, 177, 35, 122, 75, 177, 40, 70,
-        33, 70, 50, 70, 244, 243, 31, 243, 1, 224, 0, 32, 112, 189, 1, 32, 112,
-        189, 1, 32, 112, 189, 247, 181, 208, 248, 116, 100, 5, 70, 15, 70, 104,
-        70, 0, 33, 4, 34, 202, 243, 174, 244, 0, 36, 59, 93, 90, 178, 0, 42,
-        28, 220, 13, 248, 4, 48, 1, 52, 4, 44, 246, 209, 92, 54, 49, 70, 34,
-        70, 1, 168, 201, 247, 70, 248, 57, 70, 34, 70, 48, 70, 201, 247, 65,
-        248, 43, 106, 105, 70, 24, 105, 240, 247, 131, 251, 5, 70, 56, 177,
-        48, 70, 1, 169, 34, 70, 201, 247, 53, 248, 1, 224, 111, 240, 28, 5,
-        40, 70, 254, 189, 115, 181, 0, 35, 1, 147, 208, 248, 116, 52, 5, 70,
-        222, 106, 20, 35, 75, 128, 1, 35, 11, 128, 3, 106, 12, 70, 24, 105,
-        239, 247, 198, 250, 43, 104, 32, 129, 147, 248, 63, 48, 19, 177, 181,
-        248, 70, 52, 99, 129, 20, 35, 99, 96, 213, 248, 116, 52, 216, 106, 56,
-        177, 48, 70, 4, 241, 16, 1, 226, 104, 1, 171, 250, 247, 75, 255, 1,
-        152, 124, 189, 115, 181, 2, 174, 6, 248, 1, 45, 4, 70, 13, 70, 48, 70,
-        1, 33, 202, 243, 191, 246, 212, 248, 116, 52, 155, 120, 152, 66, 2,
-        217, 0, 35, 141, 248, 7, 48, 1, 33, 48, 70, 202, 243, 179, 246, 212,
-        248, 116, 52, 154, 120, 144, 66, 9, 209, 157, 248, 7, 16, 90, 120, 49,
-        234, 2, 0, 1, 209, 10, 66, 1, 209, 141, 248, 7, 32, 1, 45, 157, 248,
-        7, 32, 8, 216, 58, 185, 90, 120, 66, 177, 3, 235, 69, 3, 154, 117, 141,
-        248, 7, 32, 2, 224, 3, 235, 69, 3, 154, 117, 35, 106, 27, 104, 1, 43,
-        2, 209, 1, 45, 41, 209, 2, 224, 2, 43, 38, 209, 45, 187, 157, 248, 7,
-        16, 212, 248, 116, 52, 137, 1, 89, 129, 32, 105, 231, 247, 22, 250,
-        99, 126, 211, 177, 35, 106, 32, 70, 26, 104, 212, 248, 160, 20, 0, 35,
-        247, 243, 207, 242, 136, 177, 32, 70, 246, 243, 69, 245, 32, 70, 212,
-        248, 160, 20, 235, 243, 172, 243, 32, 70, 212, 248, 160, 20, 180, 248,
-        72, 36, 235, 243, 107, 243, 32, 70, 240, 243, 236, 244, 212, 248, 160,
-        1, 8, 177, 60, 240, 249, 222, 124, 189, 16, 181, 0, 42, 12, 191, 164,
-        36, 180, 36, 100, 41, 14, 216, 41, 177, 193, 241, 100, 2, 18, 1, 146,
-        251, 241, 242, 0, 224, 10, 70, 67, 177, 33, 70, 146, 178, 247, 243,
-        234, 243, 0, 32, 16, 189, 111, 240, 28, 0, 16, 189, 24, 70, 16, 189,
-        112, 181, 208, 248, 116, 52, 5, 70, 147, 248, 72, 32, 145, 7, 5, 213,
-        147, 248, 122, 64, 100, 44, 40, 191, 100, 36, 0, 224, 100, 36, 210,
-        7, 4, 213, 147, 248, 73, 48, 156, 66, 40, 191, 28, 70, 43, 104, 27,
-        126, 107, 177, 33, 70, 0, 34, 1, 35, 40, 70, 255, 247, 198, 255, 1,
-        34, 40, 70, 33, 70, 19, 70, 189, 232, 112, 64, 255, 247, 190, 191, 112,
-        189, 56, 181, 208, 248, 116, 52, 179, 248, 144, 64, 44, 179, 34, 177,
-        3, 241, 146, 4, 179, 248, 74, 48, 3, 224, 3, 241, 158, 4, 179, 248,
-        76, 48, 37, 136, 169, 66, 1, 219, 24, 41, 1, 220, 217, 178, 13, 224,
-        165, 136, 169, 66, 1, 218, 97, 136, 4, 224, 37, 137, 169, 66, 180, 191,
-        225, 136, 97, 137, 19, 41, 140, 191, 201, 178, 20, 33, 153, 66, 136,
-        191, 217, 178, 3, 104, 27, 126, 255, 247, 145, 255, 0, 32, 56, 189,
-        208, 248, 116, 52, 19, 181, 179, 248, 144, 32, 4, 70, 18, 179, 3, 106,
-        13, 241, 6, 1, 24, 105, 240, 247, 232, 249, 40, 179, 212, 248, 116,
-        52, 32, 70, 179, 248, 170, 32, 209, 0, 137, 26, 189, 249, 6, 32, 137,
-        24, 72, 191, 7, 49, 201, 16, 163, 248, 170, 16, 1, 34, 9, 178, 255,
-        247, 177, 255, 212, 248, 116, 52, 32, 70, 179, 249, 170, 16, 0, 34,
-        255, 247, 169, 255, 9, 224, 100, 33, 1, 35, 255, 247, 97, 255, 1, 34,
-        32, 70, 100, 33, 19, 70, 255, 247, 91, 255, 28, 189, 16, 181, 0, 35,
-        11, 128, 3, 104, 134, 176, 27, 126, 12, 70, 27, 185, 79, 240, 255, 51,
-        11, 128, 21, 224, 2, 244, 96, 81, 208, 248, 116, 52, 1, 34, 161, 245,
-        192, 94, 3, 168, 222, 241, 0, 1, 0, 146, 1, 144, 65, 235, 14, 1, 216,
-        106, 0, 35, 250, 247, 81, 252, 32, 70, 0, 33, 203, 243, 248, 244, 6,
-        176, 16, 189, 1, 41, 8, 181, 3, 216, 255, 247, 63, 254, 1, 32, 8, 189,
-        0, 32, 8, 189, 176, 248, 197, 2, 0, 244, 64, 112, 0, 10, 112, 71, 111,
-        240, 22, 0, 112, 71, 17, 244, 64, 79, 176, 248, 72, 52, 208, 248, 116,
-        36, 2, 209, 146, 248, 87, 16, 16, 224, 219, 178, 51, 43, 2, 216, 146,
-        248, 88, 16, 10, 224, 99, 43, 2, 216, 146, 248, 89, 16, 5, 224, 148,
-        43, 148, 191, 146, 248, 90, 16, 146, 248, 91, 16, 73, 178, 255, 247,
-        223, 191, 115, 181, 208, 248, 116, 52, 201, 178, 90, 121, 4, 70, 138,
-        66, 141, 248, 7, 16, 106, 208, 219, 120, 49, 234, 3, 5, 99, 209, 25,
-        66, 97, 208, 1, 33, 13, 241, 7, 0, 202, 243, 79, 245, 212, 248, 116,
-        52, 157, 248, 7, 32, 153, 121, 94, 121, 90, 113, 192, 178, 212, 248,
-        116, 52, 136, 66, 152, 113, 68, 208, 1, 40, 2, 208, 1, 41, 64, 209,
-        3, 37, 212, 248, 108, 50, 131, 248, 64, 83, 35, 104, 147, 248, 47, 32,
-        138, 177, 212, 248, 116, 52, 34, 106, 89, 120, 16, 105, 90, 121, 240,
-        247, 43, 249, 32, 70, 41, 70, 241, 243, 245, 240, 35, 104, 147, 248,
-        63, 0, 0, 40, 53, 208, 16, 224, 147, 248, 63, 96, 166, 177, 3, 45, 11,
-        209, 212, 248, 116, 52, 34, 106, 89, 120, 16, 105, 90, 121, 240, 247,
-        20, 249, 32, 70, 41, 70, 241, 243, 222, 240, 32, 70, 212, 248, 108,
-        18, 42, 70, 241, 243, 50, 247, 27, 224, 212, 248, 116, 52, 34, 106,
-        89, 120, 16, 105, 90, 121, 240, 247, 1, 249, 32, 70, 41, 70, 241, 243,
-        203, 240, 48, 70, 14, 224, 150, 66, 11, 208, 212, 248, 116, 52, 34,
-        106, 89, 120, 16, 105, 90, 121, 240, 247, 241, 248, 2, 224, 111, 240,
-        28, 0, 0, 224, 0, 32, 124, 189, 115, 181, 208, 248, 116, 52, 4, 70,
-        29, 123, 3, 106, 14, 70, 24, 105, 239, 247, 245, 254, 130, 7, 24, 213,
-        212, 248, 116, 4, 67, 123, 163, 177, 194, 137, 79, 246, 255, 115, 154,
-        66, 15, 208, 1, 124, 81, 185, 131, 120, 1, 43, 8, 208, 14, 48, 203,
-        243, 10, 241, 208, 241, 1, 1, 56, 191, 0, 33, 0, 224, 0, 33, 201, 178,
-        13, 224, 35, 106, 179, 66, 41, 209, 212, 248, 116, 52, 25, 124, 41,
-        185, 155, 120, 1, 43, 3, 208, 150, 248, 76, 16, 0, 224, 0, 33, 141,
-        66, 5, 208, 212, 248, 116, 52, 25, 115, 32, 105, 11, 240, 42, 218, 212,
-        248, 116, 52, 147, 248, 60, 48, 75, 185, 35, 104, 211, 248, 132, 48,
-        3, 244, 128, 67, 0, 43, 12, 191, 64, 35, 0, 35, 0, 224, 64, 35, 0, 34,
-        0, 146, 32, 70, 3, 33, 64, 34, 241, 243, 189, 246, 0, 32, 124, 189,
-        56, 181, 208, 248, 116, 52, 4, 70, 91, 123, 13, 70, 139, 66, 21, 208,
-        3, 106, 24, 105, 239, 247, 159, 254, 129, 7, 8, 213, 61, 177, 212, 248,
-        116, 20, 32, 70, 14, 49, 180, 248, 72, 36, 255, 247, 202, 254, 212,
-        248, 116, 52, 32, 70, 93, 115, 33, 106, 255, 247, 142, 255, 0, 32, 56,
-        189, 8, 181, 83, 28, 1, 209, 3, 106, 5, 224, 211, 178, 1, 43, 18, 216,
-        10, 50, 80, 248, 34, 48, 1, 41, 5, 209, 208, 248, 116, 36, 146, 120,
-        1, 42, 1, 209, 7, 224, 8, 216, 131, 248, 76, 16, 25, 70, 255, 247, 115,
-        255, 1, 32, 8, 189, 0, 32, 8, 189, 0, 32, 8, 189, 112, 181, 4, 70, 208,
-        248, 116, 4, 1, 33, 80, 48, 202, 243, 82, 244, 212, 248, 116, 52, 6,
-        70, 147, 248, 80, 32, 93, 120, 90, 112, 212, 248, 116, 52, 89, 120,
-        0, 41, 57, 208, 173, 26, 147, 248, 34, 32, 24, 191, 1, 37, 130, 177,
-        17, 64, 145, 66, 19, 208, 131, 248, 133, 32, 212, 248, 116, 52, 0, 34,
-        131, 248, 34, 32, 212, 248, 116, 52, 91, 111, 67, 177, 32, 70, 152,
-        71, 5, 224, 147, 248, 133, 32, 18, 177, 13, 177, 131, 248, 34, 32, 212,
-        248, 116, 52, 147, 248, 33, 32, 138, 177, 89, 120, 17, 64, 145, 66,
-        19, 208, 131, 248, 132, 32, 212, 248, 116, 52, 0, 34, 131, 248, 33,
-        32, 212, 248, 116, 52, 91, 111, 67, 177, 32, 70, 152, 71, 5, 224, 147,
-        248, 132, 32, 18, 177, 13, 177, 131, 248, 33, 32, 212, 248, 116, 52,
-        0, 37, 131, 248, 80, 80, 212, 248, 116, 52, 32, 70, 158, 112, 35, 106,
-        147, 249, 77, 16, 255, 247, 123, 252, 161, 106, 32, 70, 255, 247, 13,
-        255, 32, 70, 225, 106, 255, 247, 9, 255, 212, 248, 116, 52, 154, 120,
-        1, 42, 7, 209, 89, 120, 1, 41, 1, 209, 29, 114, 4, 224, 2, 41, 2, 209,
-        0, 224, 3, 34, 26, 114, 32, 70, 255, 247, 80, 252, 32, 70, 255, 247,
-        159, 249, 32, 70, 180, 248, 72, 20, 255, 247, 90, 254, 32, 70, 254,
-        247, 61, 252, 212, 248, 160, 1, 8, 177, 60, 240, 110, 220, 212, 248,
-        116, 52, 34, 106, 89, 120, 16, 105, 90, 121, 189, 232, 112, 64, 239,
-        247, 200, 191, 45, 233, 243, 65, 4, 70, 208, 248, 116, 4, 30, 70, 21,
-        70, 195, 24, 202, 178, 49, 70, 147, 248, 82, 112, 255, 247, 3, 250,
-        212, 248, 116, 52, 141, 248, 7, 0, 90, 120, 130, 66, 117, 208, 26, 120,
-        48, 234, 2, 1, 1, 209, 16, 66, 5, 209, 158, 25, 134, 248, 82, 112, 111,
-        240, 28, 0, 106, 224, 88, 28, 1, 33, 202, 243, 165, 243, 1, 33, 128,
-        70, 13, 241, 7, 0, 202, 243, 159, 243, 1, 40, 52, 209, 184, 241, 1,
-        15, 49, 217, 163, 106, 88, 108, 250, 247, 55, 254, 1, 40, 5, 216, 163,
-        106, 152, 108, 250, 247, 49, 254, 1, 40, 25, 217, 61, 185, 212, 248,
-        116, 52, 79, 240, 255, 48, 158, 25, 134, 248, 82, 112, 70, 224, 163,
-        106, 88, 108, 250, 247, 34, 254, 1, 40, 163, 106, 1, 217, 0, 34, 90,
-        100, 152, 108, 250, 247, 26, 254, 1, 40, 2, 217, 163, 106, 0, 34, 154,
-        100, 32, 70, 255, 247, 43, 249, 1, 40, 6, 209, 162, 106, 0, 35, 130,
-        248, 77, 48, 226, 106, 130, 248, 77, 48, 212, 248, 116, 52, 157, 248,
-        7, 32, 131, 248, 80, 32, 212, 248, 116, 52, 91, 120, 26, 64, 154, 66,
-        19, 208, 227, 105, 179, 249, 28, 16, 179, 249, 30, 32, 138, 24, 179,
-        249, 32, 16, 179, 249, 34, 48, 82, 24, 218, 66, 6, 208, 148, 248, 116,
-        50, 67, 240, 32, 3, 132, 248, 116, 50, 8, 224, 148, 248, 116, 50, 32,
-        70, 35, 240, 32, 3, 132, 248, 116, 50, 255, 247, 229, 254, 0, 32, 189,
-        232, 252, 129, 208, 248, 116, 36, 11, 70, 17, 120, 0, 34, 255, 247,
-        107, 191, 112, 181, 208, 248, 116, 52, 12, 70, 90, 120, 30, 120, 36,
-        9, 178, 66, 5, 70, 1, 240, 15, 1, 13, 209, 219, 120, 145, 66, 44, 191,
-        0, 34, 1, 34, 156, 66, 0, 209, 106, 185, 156, 66, 15, 210, 114, 177,
-        40, 70, 33, 70, 7, 224, 10, 210, 177, 66, 4, 208, 219, 120, 163, 66,
-        5, 209, 145, 66, 3, 208, 1, 34, 19, 70, 255, 247, 69, 255, 213, 248,
-        116, 52, 90, 121, 219, 120, 154, 66, 2, 209, 148, 66, 10, 210, 2, 224,
-        8, 210, 156, 66, 6, 209, 40, 70, 33, 70, 1, 34, 189, 232, 112, 64, 255,
-        247, 152, 189, 112, 189, 0, 0, 138, 2, 16, 181, 4, 70, 3, 213, 208,
-        248, 116, 52, 152, 120, 20, 224, 17, 240, 64, 112, 14, 209, 1, 240,
-        127, 3, 2, 43, 17, 208, 4, 43, 15, 208, 11, 43, 13, 208, 22, 43, 11,
-        208, 11, 74, 203, 178, 211, 86, 0, 43, 5, 219, 8, 70, 250, 247, 105,
-        253, 1, 48, 192, 178, 0, 224, 1, 32, 212, 248, 116, 52, 5, 40, 40, 191,
-        5, 32, 192, 178, 3, 235, 64, 0, 128, 125, 16, 189, 0, 191, 224, 248,
-        135, 0, 7, 181, 255, 247, 207, 255, 2, 171, 3, 248, 1, 13, 24, 70, 1,
-        33, 202, 243, 194, 242, 192, 178, 14, 189, 112, 71, 45, 233, 240, 79,
-        161, 176, 0, 35, 47, 153, 43, 159, 4, 70, 144, 70, 42, 158, 44, 157,
-        221, 248, 180, 176, 30, 147, 31, 147, 232, 247, 224, 253, 3, 47, 129,
-        70, 11, 217, 4, 34, 30, 168, 49, 70, 200, 247, 231, 251, 7, 47, 4, 217,
-        31, 168, 49, 29, 4, 34, 200, 247, 224, 251, 221, 248, 120, 160, 26,
-        241, 0, 2, 24, 191, 1, 34, 211, 178, 184, 241, 79, 15, 0, 242, 99, 131,
-        223, 232, 24, 240, 80, 0, 86, 0, 93, 0, 97, 0, 102, 0, 106, 0, 161,
-        0, 165, 0, 145, 0, 150, 0, 187, 0, 97, 3, 191, 0, 195, 0, 112, 0, 117,
-        0, 247, 0, 97, 3, 251, 0, 97, 3, 3, 1, 11, 1, 7, 1, 97, 3, 54, 1, 97,
-        3, 103, 1, 97, 3, 37, 2, 53, 2, 131, 1, 136, 1, 141, 1, 147, 1, 74,
-        2, 79, 2, 153, 1, 97, 3, 183, 1, 188, 1, 201, 1, 206, 1, 18, 2, 22,
-        2, 32, 2, 97, 3, 97, 3, 97, 3, 209, 0, 217, 0, 110, 2, 92, 2, 133, 2,
-        115, 2, 152, 2, 138, 2, 174, 2, 157, 2, 209, 2, 179, 2, 214, 2, 222,
-        2, 34, 3, 19, 3, 97, 3, 97, 3, 244, 2, 97, 3, 254, 2, 97, 3, 14, 3,
-        5, 3, 97, 3, 97, 3, 48, 3, 43, 3, 60, 3, 53, 3, 72, 3, 65, 3, 32, 70,
-        79, 250, 138, 241, 254, 247, 219, 255, 61, 224, 32, 70, 81, 70, 157,
-        249, 124, 32, 255, 247, 190, 253, 87, 224, 32, 70, 254, 247, 224, 255,
-        50, 224, 32, 70, 25, 70, 255, 247, 149, 253, 48, 225, 32, 70, 254, 247,
-        219, 255, 41, 224, 32, 70, 73, 70, 82, 70, 255, 247, 234, 250, 68, 224,
-        212, 248, 116, 52, 147, 248, 60, 48, 214, 226, 212, 248, 116, 20, 145,
-        248, 60, 0, 152, 66, 0, 240, 209, 130, 131, 240, 1, 5, 129, 248, 60,
-        32, 32, 70, 41, 70, 255, 247, 118, 253, 32, 70, 41, 70, 79, 240, 255,
-        50, 255, 247, 144, 253, 0, 40, 0, 240, 209, 130, 32, 70, 254, 247, 103,
-        250, 187, 226, 32, 70, 254, 247, 185, 255, 40, 96, 182, 226, 35, 106,
-        24, 105, 239, 247, 11, 252, 133, 7, 14, 213, 32, 70, 30, 153, 255, 247,
-        112, 250, 19, 224, 32, 70, 255, 247, 100, 252, 238, 231, 35, 106, 24,
-        105, 239, 247, 252, 251, 128, 7, 5, 212, 30, 157, 0, 45, 24, 191, 111,
-        240, 22, 5, 177, 226, 32, 70, 30, 153, 255, 247, 74, 252, 0, 40, 12,
-        191, 111, 240, 28, 5, 0, 37, 167, 226, 212, 248, 116, 52, 155, 120,
-        140, 226, 212, 248, 116, 52, 91, 120, 136, 226, 186, 241, 255, 63, 3,
-        209, 212, 248, 116, 52, 27, 120, 30, 147, 0, 34, 32, 70, 30, 153, 19,
-        70, 255, 247, 249, 253, 197, 224, 212, 248, 116, 52, 0, 43, 0, 240,
-        139, 130, 147, 249, 96, 48, 114, 226, 186, 241, 1, 15, 0, 243, 129,
-        130, 186, 241, 255, 63, 0, 240, 108, 130, 212, 248, 116, 52, 131, 248,
-        96, 160, 212, 248, 116, 52, 89, 121, 91, 120, 67, 234, 1, 17, 186, 241,
-        0, 15, 2, 208, 1, 240, 240, 1, 1, 224, 1, 240, 15, 1, 32, 70, 255, 247,
-        104, 254, 85, 226, 212, 248, 116, 52, 27, 120, 80, 226, 212, 248, 116,
-        4, 1, 33, 5, 48, 202, 243, 146, 241, 192, 178, 144, 231, 212, 248, 116,
-        52, 91, 121, 68, 226, 212, 248, 116, 52, 219, 120, 64, 226, 32, 70,
-        81, 70, 1, 34, 255, 247, 31, 252, 5, 70, 0, 40, 64, 240, 79, 130, 212,
-        248, 116, 52, 154, 121, 26, 113, 212, 248, 116, 52, 212, 248, 56, 3,
-        153, 121, 56, 48, 250, 247, 189, 254, 212, 248, 108, 18, 32, 70, 212,
-        248, 56, 99, 240, 243, 130, 242, 56, 54, 255, 35, 0, 147, 1, 144, 49,
-        70, 48, 70, 42, 70, 43, 70, 250, 247, 72, 254, 32, 70, 41, 70, 255,
-        247, 158, 254, 44, 226, 212, 248, 116, 52, 154, 127, 147, 248, 32, 16,
-        18, 4, 66, 234, 1, 98, 153, 126, 10, 67, 25, 127, 66, 234, 1, 34, 28,
-        146, 25, 126, 154, 125, 66, 234, 1, 34, 29, 146, 98, 126, 58, 177, 32,
-        70, 64, 242, 212, 81, 243, 243, 89, 240, 131, 178, 219, 11, 15, 224,
-        147, 248, 138, 16, 65, 177, 153, 120, 1, 41, 7, 217, 155, 121, 1, 43,
-        148, 191, 0, 35, 1, 35, 2, 224, 11, 70, 0, 224, 19, 70, 219, 178, 29,
-        154, 66, 234, 195, 83, 22, 224, 212, 248, 116, 52, 147, 248, 37, 32,
-        147, 248, 38, 16, 18, 4, 66, 234, 1, 98, 147, 248, 35, 16, 10, 67, 147,
-        248, 36, 16, 66, 234, 1, 34, 28, 146, 147, 248, 34, 32, 147, 248, 33,
-        48, 67, 234, 2, 35, 29, 147, 40, 70, 28, 169, 8, 34, 119, 225, 212,
-        248, 116, 52, 147, 248, 48, 48, 195, 225, 212, 248, 116, 52, 131, 248,
-        48, 160, 191, 225, 212, 248, 116, 20, 40, 70, 92, 49, 4, 34, 103, 225,
-        32, 70, 49, 70, 255, 247, 220, 249, 5, 70, 201, 225, 115, 136, 19, 43,
-        64, 242, 184, 129, 19, 47, 64, 242, 181, 129, 51, 136, 1, 43, 64, 240,
-        171, 129, 187, 241, 19, 15, 64, 243, 170, 129, 40, 70, 49, 70, 58, 70,
-        200, 247, 38, 250, 41, 70, 32, 70, 255, 247, 242, 249, 0, 40, 20, 191,
-        0, 37, 111, 240, 22, 5, 171, 225, 212, 248, 116, 52, 147, 248, 79, 48,
-        143, 225, 186, 241, 0, 15, 192, 242, 158, 129, 212, 248, 116, 52, 26,
-        120, 146, 69, 128, 242, 152, 129, 131, 248, 79, 160, 131, 225, 212,
-        248, 116, 52, 147, 248, 78, 48, 125, 225, 186, 241, 0, 15, 192, 242,
-        140, 129, 212, 248, 116, 52, 26, 120, 146, 69, 0, 243, 134, 129, 147,
-        248, 78, 32, 95, 250, 138, 250, 82, 69, 0, 240, 110, 129, 131, 248,
-        78, 160, 212, 248, 116, 52, 147, 248, 72, 80, 0, 45, 0, 240, 123, 129,
-        233, 7, 11, 213, 32, 70, 2, 33, 255, 247, 105, 253, 212, 248, 116, 52,
-        147, 248, 72, 32, 34, 240, 1, 2, 131, 248, 72, 32, 212, 248, 116, 52,
-        147, 248, 72, 80, 21, 240, 2, 5, 0, 240, 101, 129, 1, 33, 32, 70, 255,
-        247, 85, 253, 212, 248, 116, 52, 147, 248, 72, 32, 34, 240, 2, 2, 131,
-        248, 72, 32, 34, 104, 212, 248, 116, 52, 145, 106, 90, 107, 138, 26,
-        154, 99, 58, 225, 212, 248, 116, 52, 91, 108, 53, 225, 10, 241, 1, 3,
-        2, 43, 0, 242, 67, 129, 212, 248, 116, 52, 195, 248, 68, 160, 44, 225,
-        212, 248, 116, 52, 147, 248, 72, 48, 38, 225, 187, 241, 19, 15, 64,
-        243, 44, 129, 212, 248, 116, 36, 0, 35, 209, 24, 145, 249, 87, 16, 1,
-        51, 5, 43, 69, 248, 4, 27, 247, 209, 23, 225, 19, 47, 64, 242, 29, 129,
-        0, 35, 86, 248, 4, 43, 28, 169, 210, 178, 90, 84, 1, 50, 210, 178, 2,
-        42, 0, 242, 27, 129, 1, 51, 5, 43, 242, 209, 32, 70, 254, 247, 1, 254,
-        76, 231, 212, 248, 116, 52, 147, 248, 81, 48, 252, 224, 212, 248, 116,
-        20, 32, 70, 129, 248, 81, 32, 3, 34, 0, 146, 4, 33, 128, 34, 219, 1,
-        241, 243, 90, 242, 240, 224, 35, 104, 32, 70, 81, 70, 0, 34, 27, 126,
-        255, 247, 210, 249, 5, 70, 0, 40, 64, 240, 252, 128, 212, 248, 116,
-        52, 157, 248, 120, 32, 163, 248, 76, 32, 244, 224, 212, 248, 116, 52,
-        179, 248, 76, 48, 216, 224, 35, 104, 32, 70, 81, 70, 1, 34, 27, 126,
-        255, 247, 187, 249, 5, 70, 0, 40, 64, 240, 229, 128, 212, 248, 116,
-        52, 157, 248, 120, 32, 163, 248, 74, 32, 221, 224, 212, 248, 116, 52,
-        179, 248, 74, 48, 193, 224, 186, 241, 100, 15, 0, 242, 208, 128, 212,
-        248, 116, 52, 186, 241, 15, 15, 184, 191, 79, 240, 15, 10, 131, 248,
-        73, 160, 17, 224, 212, 248, 116, 52, 147, 248, 73, 48, 174, 224, 186,
-        241, 100, 15, 0, 242, 189, 128, 212, 248, 116, 52, 186, 241, 15, 15,
-        184, 191, 79, 240, 15, 10, 131, 248, 122, 160, 32, 70, 255, 247, 163,
-        249, 158, 224, 212, 248, 116, 52, 147, 248, 122, 48, 152, 224, 1, 33,
-        212, 248, 116, 4, 201, 243, 219, 247, 95, 250, 138, 250, 130, 69, 128,
-        240, 155, 128, 30, 154, 212, 248, 116, 52, 32, 70, 131, 248, 123, 32,
-        212, 248, 108, 18, 1, 241, 188, 2, 253, 247, 134, 253, 1, 70, 0, 40,
-        0, 240, 142, 128, 32, 70, 253, 247, 89, 255, 123, 224, 212, 248, 116,
-        52, 147, 248, 123, 48, 117, 224, 32, 70, 64, 242, 212, 81, 242, 243,
-        206, 246, 0, 178, 192, 15, 181, 229, 32, 70, 64, 242, 212, 81, 242,
-        243, 198, 246, 26, 240, 255, 15, 5, 208, 111, 234, 64, 66, 111, 234,
-        82, 66, 146, 178, 1, 224, 66, 4, 82, 12, 32, 70, 64, 242, 212, 81, 246,
-        243, 64, 245, 88, 224, 32, 70, 2, 169, 0, 240, 245, 253, 40, 70, 2,
-        169, 104, 34, 200, 247, 214, 248, 78, 224, 32, 70, 0, 240, 176, 253,
-        0, 35, 43, 96, 29, 70, 93, 224, 10, 241, 128, 3, 255, 43, 84, 216, 212,
-        248, 116, 52, 131, 248, 75, 161, 62, 224, 212, 248, 116, 52, 147, 249,
-        75, 49, 56, 224, 212, 248, 116, 52, 147, 248, 28, 33, 0, 42, 71, 208,
-        211, 248, 80, 33, 32, 70, 81, 70, 211, 248, 84, 49, 0, 240, 34, 254,
-        116, 230, 212, 248, 116, 52, 147, 248, 28, 33, 0, 42, 56, 208, 211,
-        248, 76, 49, 32, 224, 212, 248, 116, 52, 163, 248, 144, 160, 28, 224,
-        212, 248, 116, 52, 179, 248, 144, 48, 22, 224, 212, 248, 116, 52, 163,
-        248, 146, 160, 163, 248, 158, 160, 16, 224, 212, 248, 116, 52, 179,
-        248, 158, 48, 10, 224, 212, 248, 116, 52, 163, 248, 148, 160, 163, 248,
-        160, 160, 4, 224, 212, 248, 116, 52, 179, 248, 160, 48, 43, 96, 0, 37,
-        19, 224, 111, 240, 36, 5, 16, 224, 111, 240, 23, 5, 13, 224, 111, 240,
-        13, 5, 10, 224, 111, 240, 1, 5, 7, 224, 79, 240, 255, 53, 4, 224, 111,
-        240, 28, 5, 1, 224, 111, 240, 22, 5, 40, 70, 33, 176, 189, 232, 240,
-        143, 115, 181, 208, 248, 116, 36, 0, 35, 146, 248, 40, 16, 141, 248,
-        7, 48, 130, 248, 39, 16, 208, 248, 116, 36, 4, 70, 130, 248, 40, 48,
-        208, 248, 116, 52, 147, 248, 39, 80, 106, 178, 1, 50, 4, 209, 105, 70,
-        254, 247, 127, 253, 0, 37, 28, 224, 109, 185, 13, 241, 255, 54, 38,
-        75, 212, 248, 116, 4, 89, 93, 254, 247, 254, 252, 3, 53, 18, 45, 6,
-        248, 1, 15, 244, 209, 238, 231, 91, 120, 141, 248, 0, 48, 141, 248,
-        1, 48, 141, 248, 2, 48, 141, 248, 3, 48, 141, 248, 4, 48, 141, 248,
-        5, 48, 224, 231, 212, 248, 116, 52, 238, 178, 90, 25, 146, 248, 33,
-        32, 10, 185, 29, 248, 5, 32, 141, 248, 7, 32, 3, 235, 69, 2, 82, 125,
-        155, 120, 154, 66, 2, 217, 0, 35, 141, 248, 7, 48, 1, 33, 13, 241, 7,
-        0, 201, 243, 219, 246, 212, 248, 116, 52, 155, 120, 152, 66, 2, 217,
-        0, 35, 141, 248, 7, 48, 32, 70, 49, 70, 157, 248, 7, 32, 1, 53, 255,
-        247, 3, 248, 6, 45, 213, 209, 32, 70, 0, 33, 255, 247, 6, 252, 212,
-        248, 160, 1, 8, 177, 59, 240, 91, 223, 124, 189, 252, 11, 4, 0, 75,
-        28, 4, 43, 10, 216, 223, 232, 3, 240, 3, 4, 4, 9, 3, 0, 3, 33, 208,
-        248, 116, 52, 0, 32, 25, 114, 112, 71, 111, 240, 28, 0, 112, 71, 254,
-        247, 23, 191, 254, 247, 5, 189, 208, 248, 116, 52, 88, 137, 112, 71,
-        3, 104, 64, 242, 110, 82, 211, 248, 216, 16, 112, 181, 139, 106, 4,
-        70, 147, 66, 14, 208, 8, 107, 65, 242, 107, 2, 144, 66, 7, 209, 209,
-        43, 7, 208, 163, 241, 233, 5, 106, 66, 66, 235, 5, 2, 2, 224, 0, 34,
-        0, 224, 1, 34, 9, 107, 213, 178, 65, 242, 107, 2, 145, 66, 19, 209,
-        214, 43, 19, 208, 245, 43, 17, 208, 239, 43, 15, 208, 64, 242, 15, 18,
-        147, 66, 11, 208, 244, 43, 9, 208, 228, 43, 7, 208, 163, 245, 135, 112,
-        66, 66, 66, 235, 0, 2, 2, 224, 0, 34, 0, 224, 1, 34, 65, 242, 228, 64,
-        129, 66, 210, 178, 8, 209, 64, 242, 218, 86, 198, 235, 3, 12, 220, 241,
-        0, 6, 70, 235, 12, 6, 0, 224, 0, 38, 22, 67, 65, 242, 107, 2, 145, 66,
-        44, 209, 179, 245, 137, 127, 43, 208, 179, 245, 154, 127, 40, 208, 64,
-        242, 23, 18, 147, 66, 36, 208, 64, 242, 55, 18, 147, 66, 32, 208, 64,
-        242, 51, 18, 147, 66, 28, 208, 179, 245, 153, 127, 25, 208, 179, 245,
-        165, 127, 22, 208, 64, 242, 41, 18, 147, 66, 18, 208, 179, 245, 161,
-        127, 15, 208, 64, 242, 53, 18, 147, 66, 11, 208, 179, 245, 155, 127,
-        8, 208, 64, 242, 17, 18, 152, 26, 66, 66, 66, 235, 0, 2, 2, 224, 0,
-        34, 0, 224, 1, 34, 65, 242, 228, 64, 129, 66, 210, 178, 8, 209, 64,
-        242, 27, 96, 192, 235, 3, 12, 220, 241, 0, 0, 64, 235, 12, 0, 0, 224,
-        0, 32, 2, 67, 65, 242, 107, 0, 129, 66, 6, 209, 64, 242, 49, 17, 89,
-        26, 75, 66, 67, 235, 1, 3, 0, 224, 0, 35, 212, 248, 116, 20, 0, 32,
-        129, 248, 97, 0, 212, 248, 116, 20, 219, 178, 193, 248, 140, 0, 29,
-        185, 22, 185, 10, 185, 0, 43, 99, 208, 1, 32, 129, 248, 97, 0, 61, 177,
-        212, 248, 116, 20, 145, 248, 97, 0, 64, 240, 2, 0, 129, 248, 97, 0,
-        33, 104, 209, 248, 216, 16, 136, 106, 239, 40, 12, 208, 64, 242, 15,
-        17, 136, 66, 8, 208, 228, 40, 6, 208, 160, 245, 135, 124, 220, 241,
-        0, 0, 64, 235, 12, 0, 0, 224, 1, 32, 212, 248, 116, 20, 13, 177, 2,
-        35, 2, 224, 35, 177, 79, 244, 0, 83, 193, 248, 140, 48, 10, 224, 10,
-        177, 4, 35, 249, 231, 11, 70, 22, 177, 8, 177, 8, 35, 244, 231, 16,
-        34, 195, 248, 140, 32, 212, 248, 116, 52, 0, 38, 147, 248, 72, 80, 195,
-        248, 140, 96, 233, 7, 17, 213, 147, 248, 97, 32, 146, 7, 32, 213, 1,
-        34, 147, 248, 73, 16, 32, 70, 19, 70, 254, 247, 87, 255, 212, 248, 116,
-        52, 32, 70, 147, 248, 73, 16, 50, 70, 13, 224, 141, 185, 1, 34, 179,
-        248, 74, 16, 32, 70, 19, 70, 254, 247, 72, 255, 212, 248, 116, 52, 32,
-        70, 179, 248, 76, 16, 42, 70, 1, 35, 189, 232, 112, 64, 254, 247, 61,
-        191, 112, 189, 45, 233, 240, 71, 1, 244, 224, 40, 168, 245, 64, 51,
-        211, 241, 0, 10, 4, 70, 136, 176, 8, 70, 74, 235, 3, 10, 137, 70, 22,
-        70, 250, 247, 3, 248, 73, 70, 7, 70, 32, 70, 255, 247, 184, 250, 184,
-        245, 0, 63, 20, 191, 208, 70, 79, 240, 1, 8, 25, 244, 0, 31, 4, 70,
-        14, 209, 25, 244, 128, 21, 2, 208, 127, 0, 1, 37, 11, 224, 184, 66,
-        9, 221, 3, 40, 6, 209, 2, 47, 20, 191, 2, 37, 0, 37, 2, 224, 3, 37,
-        0, 224, 2, 37, 9, 240, 64, 115, 179, 241, 128, 127, 5, 209, 9, 240,
-        7, 9, 186, 241, 0, 15, 11, 208, 1, 224, 235, 177, 95, 224, 2, 171, 1,
-        147, 48, 70, 2, 33, 58, 70, 43, 70, 0, 148, 249, 247, 37, 252, 2, 171,
-        0, 148, 1, 147, 48, 70, 184, 241, 0, 15, 1, 208, 1, 33, 0, 224, 65,
-        70, 58, 70, 43, 70, 249, 247, 23, 252, 8, 170, 2, 235, 9, 3, 19, 248,
-        24, 12, 67, 224, 35, 74, 95, 250, 137, 243, 210, 86, 0, 42, 27, 218,
-        6, 34, 179, 251, 242, 243, 32, 74, 48, 70, 215, 92, 5, 171, 0, 147,
-        186, 241, 0, 15, 1, 208, 2, 33, 5, 224, 184, 241, 0, 15, 1, 208, 1,
-        33, 0, 224, 65, 70, 35, 70, 42, 70, 249, 247, 189, 251, 8, 171, 223,
-        25, 23, 248, 12, 12, 33, 224, 9, 240, 127, 9, 185, 241, 22, 15, 27,
-        216, 18, 74, 18, 250, 9, 242, 23, 213, 17, 74, 91, 8, 213, 92, 48, 70,
-        186, 241, 0, 15, 1, 208, 4, 33, 5, 224, 184, 241, 0, 15, 1, 208, 3,
-        33, 0, 224, 65, 70, 34, 70, 7, 171, 249, 247, 131, 251, 8, 170, 85,
-        25, 21, 248, 4, 12, 0, 224, 254, 32, 8, 176, 189, 232, 240, 135, 0,
-        191, 224, 248, 135, 0, 14, 12, 4, 0, 0, 2, 16, 40, 16, 16, 4, 0, 45,
-        233, 243, 71, 10, 159, 21, 70, 58, 136, 12, 70, 157, 248, 44, 96, 0,
-        42, 80, 208, 183, 248, 2, 144, 79, 240, 0, 8, 25, 240, 1, 9, 161, 248,
-        6, 128, 161, 248, 4, 128, 41, 208, 64, 42, 25, 209, 8, 70, 67, 70, 57,
-        29, 205, 248, 0, 128, 60, 240, 194, 221, 64, 69, 60, 219, 181, 248,
-        206, 0, 204, 247, 98, 250, 181, 248, 206, 0, 16, 240, 128, 0, 1, 209,
-        0, 46, 54, 209, 4, 241, 196, 0, 4, 241, 72, 1, 226, 136, 34, 224, 162,
-        241, 8, 3, 155, 178, 55, 43, 38, 216, 1, 241, 8, 0, 57, 29, 199, 247,
-        243, 253, 63, 136, 64, 70, 167, 128, 34, 224, 32, 42, 30, 216, 1, 241,
-        72, 10, 80, 70, 57, 29, 199, 247, 231, 253, 181, 248, 206, 0, 58, 136,
-        16, 240, 128, 0, 164, 248, 4, 144, 226, 128, 0, 209, 134, 185, 4, 241,
-        196, 0, 81, 70, 199, 247, 216, 253, 227, 136, 0, 32, 164, 248, 228,
-        48, 6, 224, 16, 70, 4, 224, 79, 240, 255, 48, 1, 224, 111, 240, 1, 0,
-        189, 232, 252, 135, 112, 71, 2, 104, 112, 181, 131, 138, 141, 88, 12,
-        70, 6, 70, 237, 24, 51, 240, 106, 219, 48, 70, 33, 70, 255, 247, 242,
-        255, 4, 245, 104, 114, 6, 50, 35, 122, 33, 70, 48, 70, 51, 240, 78,
-        220, 6, 70, 32, 70, 232, 247, 75, 253, 43, 106, 8, 34, 26, 96, 48, 70,
-        112, 189, 56, 181, 29, 70, 144, 177, 3, 104, 132, 138, 203, 88, 115,
-        177, 28, 25, 17, 70, 4, 241, 48, 0, 16, 34, 199, 247, 157, 253, 4, 241,
-        64, 0, 41, 70, 32, 34, 189, 232, 56, 64, 199, 247, 149, 189, 56, 189,
-        240, 181, 208, 248, 116, 68, 133, 176, 148, 248, 28, 49, 6, 70, 148,
-        248, 233, 80, 19, 185, 132, 248, 40, 49, 76, 224, 3, 106, 13, 241, 15,
-        1, 24, 105, 238, 247, 220, 251, 157, 248, 15, 48, 1, 43, 20, 191, 2,
-        33, 3, 33, 211, 241, 1, 2, 56, 191, 0, 34, 132, 248, 175, 32, 23, 70,
-        0, 34, 196, 248, 204, 32, 196, 248, 200, 32, 196, 248, 208, 32, 196,
-        248, 212, 32, 3, 241, 24, 2, 4, 235, 130, 2, 210, 248, 172, 0, 1, 48,
-        194, 248, 172, 0, 214, 248, 32, 35, 2, 42, 22, 208, 212, 248, 224, 0,
-        212, 248, 228, 32, 144, 66, 16, 217, 152, 28, 4, 235, 128, 0, 4, 235,
-        67, 3, 179, 249, 178, 32, 208, 248, 176, 224, 194, 235, 14, 2, 82, 250,
-        5, 245, 192, 248, 176, 32, 163, 248, 178, 80, 132, 248, 73, 113, 0,
-        37, 1, 35, 1, 147, 48, 105, 42, 70, 11, 70, 0, 149, 229, 247, 159, 255,
-        132, 248, 40, 81, 5, 176, 240, 189, 16, 181, 10, 122, 208, 248, 116,
-        52, 42, 179, 144, 248, 45, 34, 209, 248, 244, 0, 42, 177, 144, 248,
-        96, 0, 144, 66, 40, 191, 2, 70, 1, 224, 144, 248, 96, 32, 209, 248,
-        4, 1, 4, 120, 100, 177, 0, 122, 209, 248, 244, 16, 24, 177, 201, 141,
-        74, 67, 0, 33, 1, 224, 202, 141, 1, 33, 131, 248, 41, 17, 5, 224, 1,
-        34, 131, 248, 41, 33, 209, 248, 244, 32, 210, 141, 10, 50, 3, 224, 131,
-        248, 41, 33, 79, 244, 155, 114, 195, 248, 36, 33, 16, 189, 45, 233,
-        240, 79, 139, 176, 23, 70, 155, 70, 157, 249, 80, 32, 157, 248, 84,
-        48, 208, 248, 116, 68, 3, 146, 7, 147, 157, 248, 92, 32, 24, 155, 8,
-        146, 9, 147, 180, 248, 198, 32, 180, 248, 240, 48, 5, 146, 6, 147, 212,
-        248, 216, 32, 148, 248, 28, 49, 5, 70, 14, 70, 157, 248, 88, 128, 148,
-        248, 233, 160, 4, 146, 0, 43, 0, 240, 77, 129, 148, 248, 40, 49, 59,
-        177, 128, 104, 212, 248, 48, 17, 222, 243, 148, 245, 0, 35, 132, 248,
-        40, 49, 142, 33, 40, 105, 11, 240, 209, 217, 67, 0, 78, 51, 79, 246,
-        254, 113, 25, 64, 40, 105, 11, 240, 201, 217, 148, 248, 88, 49, 129,
-        70, 255, 43, 8, 208, 148, 248, 232, 48, 1, 34, 18, 250, 3, 243, 0, 234,
-        3, 9, 31, 250, 137, 249, 148, 248, 175, 48, 67, 69, 20, 208, 0, 35,
-        8, 241, 50, 2, 4, 235, 130, 2, 195, 235, 8, 1, 147, 96, 74, 66, 66,
-        235, 1, 2, 50, 50, 4, 235, 130, 2, 132, 248, 175, 128, 196, 248, 204,
-        48, 196, 248, 200, 48, 147, 96, 187, 241, 0, 15, 0, 240, 11, 129, 7,
-        155, 203, 185, 2, 46, 64, 243, 6, 129, 198, 235, 11, 11, 180, 249, 242,
-        32, 15, 250, 139, 251, 4, 235, 72, 3, 147, 69, 168, 191, 90, 70, 163,
-        248, 234, 32, 213, 248, 116, 52, 91, 121, 1, 43, 37, 217, 3, 154, 211,
-        27, 164, 248, 238, 48, 32, 224, 6, 154, 19, 178, 4, 235, 72, 2, 178,
-        249, 234, 96, 198, 235, 11, 6, 246, 26, 2, 46, 3, 221, 28, 46, 168,
-        191, 28, 38, 0, 224, 3, 38, 213, 248, 116, 36, 82, 121, 1, 42, 11, 217,
-        180, 249, 238, 112, 3, 154, 215, 27, 255, 26, 2, 47, 3, 221, 28, 47,
-        168, 191, 28, 39, 0, 224, 3, 39, 213, 248, 108, 50, 155, 121, 43, 185,
-        8, 155, 27, 177, 40, 70, 9, 153, 255, 247, 31, 255, 212, 248, 224, 48,
-        212, 248, 228, 32, 147, 66, 3, 217, 5, 152, 0, 178, 3, 144, 7, 224,
-        1, 51, 212, 248, 220, 32, 196, 248, 224, 48, 1, 35, 4, 146, 3, 147,
-        8, 241, 84, 11, 8, 241, 44, 1, 4, 235, 129, 1, 4, 235, 75, 2, 209, 248,
-        8, 192, 178, 249, 10, 0, 1, 35, 192, 235, 12, 0, 128, 25, 136, 96, 64,
-        250, 10, 240, 8, 241, 50, 1, 4, 235, 129, 1, 80, 129, 138, 104, 3, 250,
-        10, 243, 1, 50, 138, 96, 212, 248, 56, 17, 196, 248, 204, 32, 1, 49,
-        196, 248, 56, 17, 8, 241, 78, 1, 4, 235, 129, 1, 72, 104, 1, 48, 72,
-        96, 212, 248, 192, 0, 180, 249, 182, 16, 154, 66, 193, 235, 0, 1, 15,
-        68, 196, 248, 192, 112, 71, 250, 10, 247, 4, 235, 75, 1, 164, 248, 182,
-        112, 180, 249, 196, 0, 177, 249, 10, 16, 40, 191, 132, 248, 177, 128,
-        136, 66, 100, 219, 4, 152, 130, 66, 12, 217, 216, 241, 1, 1, 148, 248,
-        232, 32, 56, 191, 0, 33, 17, 250, 2, 242, 145, 69, 43, 208, 8, 241,
-        60, 2, 35, 224, 148, 248, 68, 1, 184, 241, 0, 15, 6, 208, 180, 249,
-        178, 96, 64, 178, 113, 26, 0, 235, 193, 1, 5, 224, 180, 249, 180, 96,
-        64, 178, 113, 26, 201, 0, 9, 26, 3, 152, 177, 235, 192, 15, 62, 219,
-        154, 66, 60, 211, 216, 241, 1, 1, 148, 248, 232, 32, 56, 191, 0, 33,
-        17, 250, 2, 242, 145, 69, 6, 208, 8, 241, 62, 2, 4, 235, 130, 2, 81,
-        104, 1, 49, 81, 96, 1, 34, 184, 241, 0, 15, 20, 191, 3, 33, 2, 33, 148,
-        248, 175, 0, 132, 248, 73, 1, 148, 248, 29, 1, 64, 177, 66, 177, 0,
-        34, 40, 105, 11, 70, 0, 146, 1, 146, 229, 247, 22, 254, 4, 224, 26,
-        185, 212, 248, 204, 32, 154, 66, 25, 210, 148, 248, 29, 49, 179, 177,
-        1, 35, 132, 248, 40, 49, 168, 104, 212, 248, 48, 17, 212, 248, 36, 33,
-        0, 35, 11, 176, 189, 232, 240, 79, 222, 243, 50, 180, 184, 241, 0, 15,
-        12, 191, 66, 70, 0, 34, 20, 191, 2, 33, 3, 33, 208, 231, 11, 176, 189,
-        232, 240, 143, 127, 181, 208, 248, 116, 100, 5, 70, 150, 248, 28, 49,
-        12, 70, 43, 179, 3, 105, 147, 248, 10, 49, 11, 179, 150, 248, 29, 49,
-        243, 177, 3, 106, 13, 241, 15, 1, 24, 105, 238, 247, 214, 249, 157,
-        248, 15, 48, 0, 34, 134, 248, 175, 48, 134, 248, 73, 49, 0, 43, 20,
-        191, 3, 33, 2, 33, 1, 35, 141, 232, 12, 0, 40, 105, 11, 70, 229, 247,
-        204, 253, 157, 248, 15, 48, 84, 248, 35, 32, 1, 50, 68, 248, 35, 32,
-        127, 189, 112, 181, 208, 248, 116, 68, 5, 70, 148, 248, 28, 49, 235,
-        177, 212, 248, 204, 32, 212, 248, 200, 48, 154, 66, 3, 209, 4, 245,
-        138, 113, 255, 247, 192, 255, 212, 248, 204, 48, 196, 248, 200, 48,
-        148, 248, 29, 49, 99, 177, 148, 248, 41, 49, 75, 177, 168, 104, 212,
-        248, 52, 17, 79, 244, 250, 114, 0, 35, 189, 232, 112, 64, 222, 243,
-        210, 179, 112, 189, 56, 181, 208, 248, 116, 68, 5, 70, 212, 248, 52,
-        17, 128, 104, 222, 243, 238, 243, 212, 248, 204, 32, 212, 248, 200,
-        48, 154, 66, 4, 209, 40, 70, 4, 245, 138, 113, 255, 247, 151, 255, 212,
-        248, 204, 48, 196, 248, 200, 48, 56, 189, 208, 248, 116, 52, 0, 34,
-        79, 246, 162, 113, 195, 248, 184, 32, 195, 248, 188, 32, 195, 248, 192,
-        32, 163, 248, 178, 32, 163, 248, 180, 32, 163, 248, 182, 32, 163, 248,
-        234, 16, 163, 248, 236, 16, 163, 248, 238, 16, 195, 248, 204, 32, 195,
-        248, 208, 32, 195, 248, 212, 32, 195, 248, 56, 33, 195, 248, 60, 33,
-        195, 248, 64, 33, 195, 248, 224, 32, 195, 248, 244, 32, 195, 248, 248,
-        32, 195, 248, 252, 32, 195, 248, 0, 33, 195, 248, 4, 33, 195, 248, 8,
-        33, 195, 248, 12, 33, 195, 248, 16, 33, 195, 248, 20, 33, 195, 248,
-        24, 33, 131, 248, 41, 33, 112, 71, 208, 248, 116, 52, 211, 248, 204,
-        32, 138, 96, 211, 248, 56, 33, 138, 100, 147, 248, 29, 33, 18, 177,
-        147, 248, 175, 32, 1, 224, 147, 248, 172, 32, 74, 96, 147, 248, 29,
-        33, 10, 96, 147, 248, 72, 33, 74, 101, 74, 104, 138, 101, 211, 248,
-        208, 32, 10, 100, 211, 248, 212, 32, 74, 100, 211, 248, 60, 33, 202,
-        100, 211, 248, 64, 33, 10, 101, 179, 249, 178, 32, 202, 96, 179, 249,
-        180, 32, 10, 97, 179, 249, 182, 32, 74, 97, 211, 248, 244, 32, 138,
-        97, 211, 248, 248, 32, 202, 97, 211, 248, 252, 32, 10, 98, 211, 248,
-        0, 33, 74, 98, 211, 248, 4, 33, 138, 98, 211, 248, 8, 33, 202, 98, 211,
-        248, 12, 33, 10, 99, 211, 248, 16, 33, 74, 99, 211, 248, 20, 33, 138,
-        99, 211, 248, 24, 33, 202, 99, 211, 248, 76, 33, 202, 101, 211, 248,
-        80, 33, 211, 248, 84, 49, 10, 102, 75, 102, 112, 71, 247, 181, 208,
-        248, 116, 68, 212, 248, 76, 81, 141, 66, 7, 209, 212, 248, 80, 81, 149,
-        66, 3, 209, 212, 248, 84, 33, 154, 66, 63, 208, 1, 240, 15, 5, 4, 45,
-        61, 216, 2, 45, 59, 208, 3, 240, 3, 2, 2, 42, 55, 208, 31, 9, 7, 240,
-        3, 7, 2, 47, 50, 208, 10, 9, 2, 240, 15, 2, 4, 42, 45, 216, 2, 42, 43,
-        208, 158, 8, 6, 240, 3, 6, 2, 46, 38, 208, 158, 9, 6, 240, 3, 6, 2,
-        46, 33, 208, 196, 248, 84, 49, 3, 106, 196, 248, 76, 17, 27, 104, 196,
-        248, 80, 17, 2, 43, 4, 191, 62, 70, 42, 70, 4, 42, 20, 191, 17, 70,
-        49, 70, 132, 248, 173, 16, 208, 248, 116, 52, 1, 34, 0, 36, 131, 248,
-        70, 17, 141, 232, 20, 0, 11, 70, 0, 105, 229, 247, 166, 252, 32, 70,
-        3, 224, 0, 32, 1, 224, 111, 240, 28, 0, 254, 189, 131, 136, 27, 177,
-        27, 10, 139, 112, 131, 136, 203, 112, 112, 71, 45, 233, 248, 67, 31,
-        70, 3, 106, 4, 70, 24, 105, 13, 70, 22, 70, 237, 247, 190, 255, 35,
-        106, 129, 70, 24, 105, 239, 247, 5, 255, 128, 70, 212, 248, 92, 1, 20,
-        240, 15, 217, 16, 240, 1, 15, 200, 68, 7, 208, 35, 106, 147, 249, 4,
-        145, 24, 235, 9, 8, 72, 191, 8, 241, 3, 8, 48, 70, 239, 243, 60, 240,
-        35, 35, 45, 26, 59, 112, 3, 61, 2, 35, 123, 112, 127, 45, 168, 191,
-        127, 37, 111, 240, 127, 3, 79, 234, 168, 8, 157, 66, 184, 191, 29, 70,
-        135, 248, 2, 128, 253, 112, 212, 248, 120, 1, 57, 70, 189, 232, 248,
-        67, 255, 247, 188, 191, 45, 233, 240, 79, 5, 104, 135, 176, 155, 70,
-        0, 35, 93, 42, 7, 70, 14, 70, 2, 147, 3, 147, 181, 248, 72, 148, 8,
-        209, 67, 32, 205, 247, 165, 252, 4, 70, 0, 40, 0, 240, 44, 129, 176,
-        70, 9, 224, 209, 248, 58, 16, 1, 235, 65, 1, 67, 49, 138, 66, 192, 240,
-        37, 129, 52, 70, 152, 70, 56, 70, 2, 169, 3, 170, 58, 240, 26, 222,
-        6, 70, 0, 40, 64, 240, 17, 129, 9, 244, 96, 90, 170, 245, 192, 80, 45,
-        35, 132, 248, 44, 48, 67, 66, 67, 235, 0, 3, 132, 248, 43, 48, 43, 106,
-        13, 241, 23, 1, 13, 241, 22, 2, 24, 105, 237, 247, 202, 253, 157, 249,
-        23, 48, 9, 244, 64, 73, 196, 248, 54, 48, 187, 121, 169, 245, 64, 78,
-        155, 0, 35, 114, 251, 121, 56, 70, 155, 0, 99, 114, 171, 106, 222, 241,
-        0, 9, 147, 248, 4, 49, 73, 235, 14, 9, 163, 114, 235, 106, 9, 241, 10,
-        9, 147, 248, 4, 49, 227, 114, 85, 248, 41, 48, 147, 248, 5, 49, 132,
-        248, 42, 48, 58, 240, 93, 223, 2, 155, 3, 154, 153, 136, 129, 70, 213,
-        248, 92, 1, 232, 247, 209, 251, 79, 250, 137, 241, 3, 152, 248, 247,
-        157, 255, 43, 106, 3, 153, 24, 105, 2, 154, 237, 247, 90, 255, 184,
-        241, 0, 15, 16, 208, 64, 70, 49, 70, 93, 34, 200, 243, 210, 245, 35,
-        122, 136, 248, 24, 48, 51, 70, 212, 248, 54, 32, 8, 248, 3, 32, 1, 51,
-        12, 43, 248, 209, 176, 224, 4, 34, 111, 240, 127, 1, 4, 168, 200, 243,
-        192, 245, 43, 106, 4, 169, 24, 105, 237, 247, 30, 255, 43, 106, 4, 169,
-        24, 105, 237, 247, 25, 255, 2, 153, 4, 34, 11, 104, 4, 241, 17, 0, 35,
-        96, 139, 136, 177, 70, 163, 128, 203, 136, 227, 128, 75, 122, 132, 248,
-        45, 48, 11, 122, 14, 49, 35, 115, 199, 247, 75, 249, 2, 153, 4, 34,
-        139, 124, 4, 241, 22, 0, 99, 117, 19, 49, 199, 247, 66, 249, 2, 153,
-        4, 34, 24, 49, 4, 241, 26, 0, 199, 247, 59, 249, 88, 70, 210, 247, 112,
-        253, 1, 70, 196, 248, 50, 0, 40, 70, 254, 247, 248, 252, 127, 33, 4,
-        34, 128, 70, 4, 241, 62, 0, 200, 243, 131, 245, 111, 240, 127, 1, 4,
-        34, 4, 241, 46, 0, 200, 243, 124, 245, 2, 153, 4, 34, 10, 49, 4, 241,
-        13, 0, 199, 247, 29, 249, 2, 155, 40, 70, 212, 248, 50, 16, 218, 106,
-        255, 247, 60, 250, 131, 70, 17, 224, 72, 250, 9, 243, 217, 7, 9, 213,
-        187, 241, 128, 15, 6, 208, 4, 235, 9, 3, 154, 125, 203, 235, 2, 2, 131,
-        248, 46, 32, 9, 241, 1, 9, 95, 250, 137, 249, 1, 33, 213, 248, 116,
-        4, 200, 243, 189, 247, 129, 69, 230, 211, 170, 245, 192, 82, 210, 241,
-        0, 8, 2, 155, 72, 235, 2, 8, 213, 248, 116, 4, 1, 33, 211, 248, 40,
-        176, 212, 248, 58, 144, 200, 243, 171, 247, 4, 241, 66, 2, 75, 70, 0,
-        144, 65, 70, 88, 70, 249, 247, 81, 248, 2, 155, 1, 33, 213, 248, 116,
-        4, 212, 248, 58, 144, 211, 248, 44, 176, 200, 243, 153, 247, 4, 235,
-        9, 10, 10, 241, 66, 10, 82, 70, 75, 70, 0, 144, 65, 70, 88, 70, 249,
-        247, 60, 248, 1, 33, 213, 248, 116, 4, 212, 248, 58, 64, 221, 248, 12,
-        144, 200, 243, 133, 247, 162, 68, 0, 144, 65, 70, 72, 70, 82, 70, 35,
-        70, 249, 247, 43, 248, 56, 70, 2, 153, 3, 154, 58, 240, 146, 221, 4,
-        224, 111, 240, 26, 6, 1, 224, 111, 240, 13, 6, 48, 70, 7, 176, 189,
-        232, 240, 143, 45, 233, 247, 79, 5, 104, 0, 35, 4, 70, 17, 153, 40,
-        70, 221, 248, 52, 144, 23, 70, 221, 248, 48, 128, 14, 158, 221, 248,
-        60, 176, 0, 147, 1, 147, 231, 247, 140, 250, 185, 241, 3, 15, 130, 70,
-        13, 217, 4, 34, 104, 70, 65, 70, 199, 247, 146, 248, 185, 241, 7, 15,
-        5, 217, 1, 168, 8, 241, 4, 1, 4, 34, 199, 247, 137, 248, 12, 47, 43,
-        216, 223, 232, 7, 240, 7, 10, 42, 42, 42, 42, 42, 42, 42, 15, 29, 42,
-        36, 0, 163, 136, 51, 96, 2, 224, 189, 248, 0, 48, 163, 128, 0, 32, 28,
-        224, 0, 155, 35, 114, 43, 104, 147, 248, 63, 0, 176, 177, 40, 70, 245,
-        243, 131, 242, 40, 70, 1, 33, 245, 243, 59, 243, 239, 231, 32, 70, 49,
-        70, 90, 70, 83, 70, 255, 247, 106, 254, 7, 224, 32, 70, 49, 70, 90,
-        70, 58, 240, 80, 221, 1, 224, 111, 240, 22, 0, 189, 232, 254, 143, 112,
-        71, 5, 75, 27, 136, 195, 24, 27, 122, 163, 241, 1, 2, 83, 66, 67, 235,
-        2, 3, 3, 112, 112, 71, 0, 191, 22, 7, 0, 0, 112, 181, 0, 36, 6, 70,
-        37, 70, 5, 224, 115, 25, 216, 120, 203, 247, 111, 252, 1, 53, 4, 67,
-        179, 120, 157, 66, 246, 211, 32, 70, 112, 189, 45, 233, 243, 65, 152,
-        70, 83, 120, 20, 70, 177, 248, 90, 32, 19, 43, 6, 70, 13, 70, 1, 146,
-        92, 217, 231, 120, 163, 120, 67, 234, 7, 35, 1, 43, 86, 209, 103, 121,
-        34, 121, 66, 234, 7, 39, 1, 47, 78, 209, 160, 29, 42, 73, 3, 34, 199,
-        247, 8, 248, 0, 40, 74, 209, 99, 122, 1, 43, 3, 209, 1, 154, 82, 5,
-        65, 213, 4, 224, 2, 43, 65, 209, 1, 155, 27, 5, 62, 213, 160, 29, 1,
-        169, 0, 34, 203, 247, 198, 251, 0, 40, 54, 208, 189, 248, 4, 48, 168,
-        248, 0, 48, 231, 122, 163, 122, 67, 234, 7, 39, 1, 47, 44, 209, 4, 241,
-        12, 8, 64, 70, 23, 73, 3, 34, 198, 247, 226, 255, 40, 187, 226, 123,
-        48, 104, 41, 70, 1, 42, 12, 191, 11, 34, 0, 34, 59, 240, 203, 221, 216,
-        177, 8, 153, 64, 70, 202, 243, 240, 240, 4, 241, 16, 0, 12, 73, 3, 34,
-        198, 247, 205, 255, 128, 185, 226, 124, 48, 104, 1, 42, 12, 191, 11,
-        34, 0, 34, 41, 70, 59, 240, 182, 221, 208, 241, 1, 7, 56, 191, 0, 39,
-        2, 224, 31, 70, 0, 224, 1, 39, 56, 70, 189, 232, 252, 129, 0, 191, 27,
-        181, 3, 0, 0, 16, 24, 0, 15, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 13, 0,
-        0, 0, 10, 1, 28, 1, 46, 1, 74, 1, 92, 1, 110, 1, 138, 1, 156, 1, 174,
-        1, 13, 1, 30, 1, 47, 1, 77, 1, 94, 1, 111, 1, 141, 1, 158, 1, 175, 1,
-        141, 0, 158, 0, 175, 0, 64, 0, 79, 0, 94, 0, 109, 0, 128, 0, 143, 0,
-        158, 0, 173, 0, 128, 0, 143, 0, 158, 0, 173, 0, 141, 0, 158, 0, 175,
-        0, 205, 0, 222, 0, 239, 0, 13, 1, 30, 1, 47, 1, 0, 64, 150, 0, 0, 80,
-        242, 0, 0, 15, 172, 0, 0, 20, 114, 0, 1, 50, 1, 3, 50, 61, 0, 144, 76,
-        51, 0, 170, 170, 3, 0, 0, 0, 136, 180, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1,
-        0, 80, 242, 1, 0, 0, 80, 242, 0, 0, 64, 150, 0, 0, 15, 172, 0, 10, 32,
-        4, 4, 0, 80, 242, 0, 0, 15, 172, 0, 0, 64, 150, 0, 0, 0, 0, 0, 0, 0,
-        12, 11, 18, 15, 24, 10, 36, 14, 48, 9, 72, 13, 96, 8, 108, 12, 94, 0,
-        96, 0, 98, 0, 120, 0, 212, 0, 12, 18, 24, 36, 48, 72, 96, 108, 0, 144,
-        76, 0, 0, 16, 24, 0, 0, 0, 204, 1, 2, 0, 0, 0, 212, 0, 0, 0, 0, 0, 0,
-        0, 0, 1, 0, 0, 0, 0, 110, 132, 11, 0, 0, 0, 212, 0, 0, 0, 0, 0, 0, 0,
-        0, 1, 0, 0, 0, 0, 12, 18, 24, 36, 48, 72, 96, 108, 0, 1, 2, 3, 4, 5,
-        6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 13, 12, 12, 13, 16, 20, 25, 5, 12,
-        19, 2, 11, 20, 5, 15, 1, 49, 161, 2, 0, 169, 116, 2, 0, 95, 116, 2,
-        0, 19, 122, 2, 0, 67, 116, 2, 0, 1, 136, 2, 0, 191, 121, 2, 0, 253,
-        119, 2, 0, 0, 0, 0, 0, 16, 9, 30, 9, 31, 9, 36, 9, 37, 9, 38, 9, 32,
-        9, 33, 9, 39, 9, 40, 9, 41, 9, 34, 9, 35, 9, 48, 9, 49, 9, 50, 9, 18,
-        9, 15, 9, 0, 9, 1, 9, 6, 9, 7, 9, 8, 9, 2, 9, 3, 9, 9, 9, 10, 9, 11,
-        9, 4, 9, 5, 9, 12, 9, 13, 9, 14, 9, 17, 9, 1, 1, 0, 0, 1, 1, 28, 112,
-        64, 0, 45, 2, 240, 0, 10, 1, 40, 0, 40, 1, 56, 1, 72, 1, 88, 1, 85,
-        1, 80, 1, 80, 3, 102, 102, 226, 1, 102, 102, 227, 1, 102, 102, 228,
-        1, 102, 102, 229, 1, 102, 102, 230, 1, 102, 102, 231, 1, 102, 102, 232,
-        1, 102, 102, 233, 1, 102, 102, 234, 1, 102, 102, 235, 1, 102, 102, 236,
-        1, 102, 102, 237, 1, 102, 102, 238, 1, 205, 204, 240, 1, 10, 0, 5, 0,
-        8, 0, 64, 6, 8, 0, 5, 0, 8, 0, 8, 0, 119, 0, 8, 0, 138, 0, 8, 0, 1,
-        0, 5, 0, 1, 0, 10, 0, 1, 0, 5, 0, 64, 6, 101, 2, 52, 2, 132, 0, 116,
-        0, 86, 0, 101, 2, 52, 2, 2, 4, 11, 22, 36, 48, 72, 96, 108, 2, 4, 11,
-        12, 18, 24, 36, 48, 72, 96, 108, 2, 4, 11, 2, 4, 11, 22, 0, 20, 114,
-        0, 55, 46, 52, 53, 46, 57, 56, 46, 57, 53, 32, 40, 114, 55, 50, 52,
-        51, 48, 51, 32, 67, 89, 32, 87, 76, 84, 69, 83, 84, 41, 0, 114, 101,
-        99, 108, 97, 105, 109, 32, 115, 101, 99, 116, 105, 111, 110, 32, 37,
-        115, 58, 32, 82, 101, 116, 117, 114, 110, 101, 100, 32, 37, 100, 32,
-        98, 121, 116, 101, 115, 32, 116, 111, 32, 116, 104, 101, 32, 104, 101,
-        97, 112, 10, 0, 77, 101, 109, 111, 114, 121, 32, 117, 115, 97, 103,
-        101, 58, 10, 0, 9, 84, 101, 120, 116, 58, 32, 37, 108, 100, 40, 37,
-        108, 100, 75, 41, 44, 32, 68, 97, 116, 97, 58, 32, 37, 108, 100, 40,
-        37, 108, 100, 75, 41, 44, 32, 66, 115, 115, 58, 32, 37, 108, 100, 40,
-        37, 108, 100, 75, 41, 44, 32, 83, 116, 97, 99, 107, 58, 32, 37, 100,
-        75, 10, 0, 9, 65, 114, 101, 110, 97, 32, 116, 111, 116, 97, 108, 58,
-        32, 37, 100, 40, 37, 100, 75, 41, 44, 32, 70, 114, 101, 101, 58, 32,
-        37, 100, 40, 37, 100, 75, 41, 44, 32, 73, 110, 32, 117, 115, 101, 58,
-        32, 37, 100, 40, 37, 100, 75, 41, 44, 32, 72, 87, 77, 58, 32, 37, 100,
-        40, 37, 100, 75, 41, 10, 0, 9, 73, 110, 32, 117, 115, 101, 32, 43, 32,
-        111, 118, 101, 114, 104, 101, 97, 100, 58, 32, 37, 100, 40, 37, 100,
-        75, 41, 44, 32, 77, 97, 120, 32, 109, 101, 109, 111, 114, 121, 32, 105,
-        110, 32, 117, 115, 101, 58, 32, 37, 108, 100, 40, 37, 108, 100, 75,
-        41, 10, 0, 9, 77, 97, 108, 108, 111, 99, 32, 102, 97, 105, 108, 117,
-        114, 101, 32, 99, 111, 117, 110, 116, 58, 32, 37, 100, 10, 0, 9, 83,
-        116, 97, 99, 107, 32, 98, 111, 116, 116, 111, 109, 32, 104, 97, 115,
-        32, 98, 101, 101, 110, 32, 111, 118, 101, 114, 119, 114, 105, 116, 116,
-        101, 110, 10, 0, 9, 83, 116, 97, 99, 107, 32, 98, 111, 116, 116, 111,
-        109, 58, 32, 48, 120, 37, 112, 44, 32, 108, 119, 109, 58, 32, 48, 120,
-        37, 112, 44, 32, 99, 117, 114, 114, 58, 32, 48, 120, 37, 112, 44, 32,
-        116, 111, 112, 58, 32, 48, 120, 37, 112, 10, 0, 9, 70, 114, 101, 101,
-        32, 115, 116, 97, 99, 107, 58, 32, 48, 120, 37, 120, 40, 37, 100, 41,
-        32, 108, 119, 109, 58, 32, 48, 120, 37, 120, 40, 37, 100, 41, 10, 0,
-        9, 73, 110, 117, 115, 101, 32, 115, 116, 97, 99, 107, 58, 32, 48, 120,
-        37, 120, 40, 37, 100, 41, 32, 104, 119, 109, 58, 32, 48, 120, 37, 120,
-        40, 37, 100, 41, 10, 0, 9, 73, 110, 32, 117, 115, 101, 32, 112, 111,
-        111, 108, 32, 37, 100, 40, 37, 100, 41, 58, 32, 37, 100, 40, 37, 100,
-        75, 41, 44, 32, 119, 47, 111, 104, 58, 32, 37, 100, 40, 37, 100, 75,
-        41, 10, 0, 9, 73, 110, 32, 117, 115, 101, 32, 45, 32, 112, 111, 111,
-        108, 58, 32, 37, 100, 40, 37, 100, 75, 41, 44, 32, 119, 47, 111, 104,
-        58, 32, 37, 100, 40, 37, 100, 75, 41, 10, 0, 9, 80, 107, 116, 73, 100,
-        32, 84, 111, 116, 97, 108, 58, 32, 37, 100, 44, 32, 70, 114, 101, 101,
-        58, 32, 37, 100, 44, 32, 70, 97, 105, 108, 101, 100, 58, 32, 37, 100,
-        10, 0, 109, 119, 0, 109, 100, 0, 85, 78, 73, 77, 80, 76, 58, 32, 114,
-        97, 61, 37, 112, 10, 0, 101, 99, 104, 111, 0, 84, 67, 65, 77, 58, 32,
-        37, 100, 32, 117, 115, 101, 100, 58, 32, 37, 100, 32, 101, 120, 99,
-        101, 101, 100, 58, 37, 100, 10, 0, 10, 70, 87, 73, 68, 32, 48, 49, 45,
-        37, 120, 10, 102, 108, 97, 103, 115, 32, 37, 120, 10, 0, 10, 84, 82,
-        65, 80, 32, 37, 120, 40, 37, 120, 41, 58, 32, 112, 99, 32, 37, 120,
-        44, 32, 108, 114, 32, 37, 120, 44, 32, 115, 112, 32, 37, 120, 44, 32,
-        99, 112, 115, 114, 32, 37, 120, 44, 32, 115, 112, 115, 114, 32, 37,
-        120, 10, 0, 32, 32, 114, 48, 32, 37, 120, 44, 32, 114, 49, 32, 37, 120,
-        44, 32, 114, 50, 32, 37, 120, 44, 32, 114, 51, 32, 37, 120, 44, 32,
-        114, 52, 32, 37, 120, 44, 32, 114, 53, 32, 37, 120, 44, 32, 114, 54,
-        32, 37, 120, 10, 0, 32, 32, 114, 55, 32, 37, 120, 44, 32, 114, 56, 32,
-        37, 120, 44, 32, 114, 57, 32, 37, 120, 44, 32, 114, 49, 48, 32, 37,
-        120, 44, 32, 114, 49, 49, 32, 37, 120, 44, 32, 114, 49, 50, 32, 37,
-        120, 10, 0, 10, 32, 32, 32, 115, 112, 43, 48, 32, 37, 48, 56, 120, 32,
-        37, 48, 56, 120, 32, 37, 48, 56, 120, 32, 37, 48, 56, 120, 10, 0, 32,
-        32, 115, 112, 43, 49, 48, 32, 37, 48, 56, 120, 32, 37, 48, 56, 120,
-        32, 37, 48, 56, 120, 32, 37, 48, 56, 120, 10, 10, 0, 115, 112, 43, 37,
-        120, 32, 37, 48, 56, 120, 10, 0, 104, 110, 100, 97, 114, 109, 95, 97,
-        114, 109, 114, 32, 97, 100, 100, 114, 58, 32, 48, 120, 37, 120, 44,
-        32, 99, 114, 52, 95, 105, 100, 120, 58, 32, 37, 100, 10, 0, 98, 117,
-        115, 115, 116, 97, 116, 115, 0, 65, 88, 73, 32, 115, 108, 97, 118, 101,
-        32, 101, 114, 114, 111, 114, 0, 65, 88, 73, 32, 116, 105, 109, 101,
-        111, 117, 116, 0, 65, 88, 73, 32, 100, 101, 99, 111, 100, 101, 32, 101,
-        114, 114, 111, 114, 0, 9, 32, 101, 114, 114, 108, 111, 103, 58, 32,
-        108, 111, 32, 48, 120, 37, 48, 56, 120, 44, 32, 104, 105, 32, 48, 120,
-        37, 48, 56, 120, 44, 32, 105, 100, 32, 48, 120, 37, 48, 56, 120, 44,
-        32, 102, 108, 97, 103, 115, 32, 48, 120, 37, 48, 56, 120, 0, 44, 32,
-        115, 116, 97, 116, 117, 115, 32, 48, 120, 37, 48, 56, 120, 10, 0, 10,
-        48, 120, 37, 48, 52, 120, 58, 0, 32, 48, 120, 37, 48, 52, 120, 0, 10,
-        79, 84, 80, 44, 32, 99, 99, 114, 101, 118, 32, 48, 120, 37, 48, 52,
-        120, 10, 0, 119, 115, 105, 122, 101, 32, 37, 100, 32, 114, 111, 119,
-        115, 32, 37, 100, 32, 99, 111, 108, 115, 32, 37, 100, 10, 0, 104, 119,
-        98, 97, 115, 101, 32, 37, 100, 32, 104, 119, 108, 105, 109, 32, 37,
-        100, 32, 115, 119, 98, 97, 115, 101, 32, 37, 100, 32, 115, 119, 108,
-        105, 109, 32, 37, 100, 32, 102, 98, 97, 115, 101, 32, 37, 100, 32, 102,
-        108, 105, 109, 32, 37, 100, 32, 102, 117, 115, 101, 98, 105, 116, 115,
-        32, 37, 100, 10, 0, 111, 116, 112, 103, 117, 95, 98, 97, 115, 101, 32,
-        37, 100, 32, 115, 116, 97, 116, 117, 115, 32, 37, 100, 10, 0, 115, 114,
-        111, 109, 95, 119, 114, 105, 116, 101, 0, 112, 97, 37, 100, 61, 48,
-        120, 37, 37, 120, 0, 112, 100, 37, 100, 61, 48, 120, 37, 37, 120, 0,
-        112, 100, 104, 37, 100, 61, 48, 120, 37, 37, 120, 0, 112, 100, 108,
-        37, 100, 61, 48, 120, 37, 37, 120, 0, 103, 99, 114, 37, 100, 61, 48,
-        120, 37, 37, 120, 0, 37, 48, 50, 88, 37, 48, 50, 88, 37, 48, 50, 88,
-        37, 48, 50, 88, 45, 37, 48, 50, 88, 37, 48, 50, 88, 45, 37, 48, 50,
-        88, 37, 48, 50, 88, 45, 37, 48, 50, 88, 37, 48, 50, 88, 45, 37, 48,
-        50, 88, 37, 48, 50, 88, 37, 48, 50, 88, 37, 48, 50, 88, 37, 48, 50,
-        88, 37, 48, 50, 88, 0, 37, 115, 58, 105, 110, 99, 111, 114, 114, 101,
-        99, 116, 32, 108, 101, 110, 103, 116, 104, 58, 37, 100, 32, 102, 111,
-        114, 32, 72, 78, 66, 85, 95, 84, 88, 66, 70, 82, 80, 67, 65, 76, 83,
-        32, 116, 117, 112, 108, 101, 10, 0, 37, 115, 58, 32, 119, 114, 111,
-        110, 103, 32, 115, 105, 103, 110, 97, 116, 117, 114, 101, 32, 83, 82,
-        79, 77, 52, 95, 83, 73, 71, 78, 32, 37, 120, 32, 83, 82, 79, 77, 56,
-        95, 83, 73, 71, 78, 32, 37, 120, 32, 83, 82, 79, 77, 49, 48, 95, 83,
-        73, 71, 78, 32, 37, 120, 10, 0, 37, 115, 58, 32, 105, 110, 118, 97,
-        108, 105, 100, 32, 98, 117, 102, 49, 54, 91, 48, 93, 32, 61, 32, 48,
-        120, 37, 120, 10, 0, 37, 115, 58, 32, 111, 108, 100, 91, 83, 82, 79,
-        77, 52, 95, 83, 73, 71, 78, 93, 32, 48, 120, 37, 120, 44, 32, 111, 108,
-        100, 91, 83, 82, 79, 77, 56, 95, 83, 73, 71, 78, 93, 32, 48, 120, 37,
-        120, 10, 0, 37, 115, 58, 32, 98, 117, 102, 91, 83, 82, 79, 77, 49, 49,
-        95, 83, 73, 71, 78, 93, 32, 48, 120, 37, 120, 10, 0, 37, 115, 58, 32,
-        98, 117, 102, 91, 83, 82, 79, 77, 52, 95, 83, 73, 71, 78, 93, 32, 48,
-        120, 37, 120, 44, 32, 98, 117, 102, 91, 83, 82, 79, 77, 56, 95, 83,
-        73, 71, 78, 93, 32, 48, 120, 37, 120, 10, 0, 37, 115, 58, 32, 78, 111,
-        116, 32, 83, 82, 79, 77, 52, 32, 111, 114, 32, 83, 82, 79, 77, 56, 46,
-        10, 0, 37, 115, 58, 32, 73, 110, 118, 97, 108, 105, 100, 32, 105, 110,
-        112, 117, 116, 32, 102, 105, 108, 101, 32, 115, 105, 103, 110, 97, 116,
-        117, 114, 101, 10, 0, 115, 114, 111, 109, 95, 111, 116, 112, 95, 119,
-        114, 105, 116, 101, 95, 114, 101, 103, 105, 111, 110, 95, 99, 114, 99,
-        0, 0, 247, 185, 78, 37, 210, 156, 107, 74, 189, 243, 4, 111, 152, 214,
-        33, 148, 99, 45, 218, 177, 70, 8, 255, 222, 41, 103, 144, 251, 12, 66,
-        181, 127, 136, 198, 49, 90, 173, 227, 20, 53, 194, 140, 123, 16, 231,
-        169, 94, 235, 28, 82, 165, 206, 57, 119, 128, 161, 86, 24, 239, 132,
-        115, 61, 202, 254, 9, 71, 176, 219, 44, 98, 149, 180, 67, 13, 250, 145,
-        102, 40, 223, 106, 157, 211, 36, 79, 184, 246, 1, 32, 215, 153, 110,
-        5, 242, 188, 75, 129, 118, 56, 207, 164, 83, 29, 234, 203, 60, 114,
-        133, 238, 25, 87, 160, 21, 226, 172, 91, 48, 199, 137, 126, 95, 168,
-        230, 17, 122, 141, 195, 52, 171, 92, 18, 229, 142, 121, 55, 192, 225,
-        22, 88, 175, 196, 51, 125, 138, 63, 200, 134, 113, 26, 237, 163, 84,
-        117, 130, 204, 59, 80, 167, 233, 30, 212, 35, 109, 154, 241, 6, 72,
-        191, 158, 105, 39, 208, 187, 76, 2, 245, 64, 183, 249, 14, 101, 146,
-        220, 43, 10, 253, 179, 68, 47, 216, 150, 97, 85, 162, 236, 27, 112,
-        135, 201, 62, 31, 232, 166, 81, 58, 205, 131, 116, 193, 54, 120, 143,
-        228, 19, 93, 170, 139, 124, 50, 197, 174, 89, 23, 224, 42, 221, 147,
-        100, 15, 248, 182, 65, 96, 151, 217, 46, 69, 178, 252, 11, 190, 73,
-        7, 240, 155, 108, 34, 213, 244, 3, 77, 186, 209, 38, 104, 159, 85, 110,
-        100, 101, 102, 105, 110, 101, 100, 32, 101, 114, 114, 111, 114, 32,
-        37, 100, 0, 32, 32, 37, 48, 52, 120, 58, 32, 0, 1, 0, 2, 0, 4, 0, 4,
-        0, 1, 0, 0, 0, 0, 0, 16, 0, 32, 0, 1, 0, 0, 1, 96, 1, 4, 0, 5, 0, 1,
-        3, 100, 1, 4, 0, 0, 0, 39, 0, 36, 1, 4, 0, 4, 0, 0, 0, 40, 1, 4, 0,
-        0, 0, 0, 0, 44, 1, 4, 0, 0, 0, 0, 0, 48, 1, 4, 0, 0, 0, 0, 0, 52, 1,
-        4, 0, 10, 4, 112, 0, 52, 1, 4, 0, 239, 190, 212, 0, 52, 1, 4, 0, 5,
-        0, 0, 255, 52, 1, 4, 0, 1, 255, 2, 255, 48, 1, 4, 0, 24, 0, 0, 0, 52,
-        1, 4, 0, 10, 4, 224, 0, 52, 1, 4, 0, 239, 190, 72, 0, 52, 1, 4, 0, 5,
-        0, 0, 255, 52, 1, 4, 0, 1, 255, 2, 255, 52, 1, 4, 0, 0, 16, 24, 1, 52,
-        1, 4, 0, 2, 3, 0, 16, 52, 1, 4, 0, 24, 241, 242, 243, 52, 1, 4, 0, 187,
-        204, 0, 0, 48, 1, 4, 0, 56, 0, 0, 0, 52, 1, 4, 0, 0, 0, 0, 0, 48, 1,
-        4, 0, 88, 0, 0, 0, 52, 1, 4, 0, 0, 0, 0, 0, 48, 1, 4, 0, 56, 0, 0, 0,
-        52, 1, 4, 0, 15, 32, 0, 7, 52, 1, 4, 0, 0, 0, 148, 0, 52, 1, 4, 0, 0,
-        0, 0, 144, 52, 1, 4, 0, 116, 117, 118, 119, 52, 1, 4, 0, 0, 0, 0, 0,
-        52, 1, 4, 0, 0, 0, 5, 0, 52, 1, 4, 0, 255, 255, 255, 255, 48, 1, 4,
-        0, 104, 2, 0, 0, 52, 1, 4, 0, 110, 132, 51, 0, 52, 1, 4, 0, 220, 186,
-        80, 0, 52, 1, 4, 0, 212, 0, 0, 171, 52, 1, 4, 0, 186, 218, 186, 218,
-        52, 1, 4, 0, 0, 16, 24, 241, 52, 1, 4, 0, 242, 243, 0, 16, 52, 1, 4,
-        0, 24, 241, 242, 243, 52, 1, 4, 0, 16, 0, 0, 0, 52, 1, 4, 0, 0, 0, 0,
-        0, 52, 1, 4, 0, 0, 0, 10, 0, 52, 1, 4, 0, 1, 0, 0, 14, 52, 1, 4, 0,
-        66, 82, 67, 77, 52, 1, 4, 0, 95, 84, 69, 83, 52, 1, 4, 0, 84, 95, 83,
-        83, 52, 1, 4, 0, 73, 68, 1, 4, 52, 1, 4, 0, 130, 132, 139, 150, 52,
-        1, 4, 0, 3, 1, 1, 6, 52, 1, 4, 0, 2, 0, 0, 0, 48, 1, 4, 0, 104, 0, 0,
-        0, 52, 1, 4, 0, 10, 4, 40, 2, 52, 1, 4, 0, 220, 186, 128, 0, 52, 1,
-        4, 0, 0, 0, 255, 255, 52, 1, 4, 0, 255, 255, 255, 255, 52, 1, 4, 0,
-        0, 16, 24, 241, 52, 1, 4, 0, 242, 243, 0, 16, 52, 1, 4, 0, 24, 241,
-        242, 243, 52, 1, 4, 0, 208, 175, 0, 0, 52, 1, 4, 0, 0, 0, 0, 0, 52,
-        1, 4, 0, 0, 0, 0, 1, 52, 1, 4, 0, 2, 0, 0, 14, 52, 1, 4, 0, 66, 82,
-        67, 77, 52, 1, 4, 0, 95, 84, 69, 83, 52, 1, 4, 0, 84, 95, 83, 83, 52,
-        1, 4, 0, 73, 68, 1, 4, 52, 1, 4, 0, 130, 132, 139, 150, 52, 1, 4, 0,
-        3, 1, 1, 6, 52, 1, 4, 0, 2, 1, 0, 0, 48, 1, 4, 0, 104, 4, 0, 0, 52,
-        1, 4, 0, 10, 4, 40, 2, 52, 1, 4, 0, 220, 186, 128, 0, 52, 1, 4, 0, 0,
-        0, 255, 255, 52, 1, 4, 0, 255, 255, 255, 255, 52, 1, 4, 0, 0, 16, 24,
-        241, 52, 1, 4, 0, 242, 243, 0, 16, 52, 1, 4, 0, 24, 241, 242, 243, 52,
-        1, 4, 0, 208, 175, 0, 0, 52, 1, 4, 0, 0, 0, 0, 0, 52, 1, 4, 0, 0, 0,
-        0, 1, 52, 1, 4, 0, 2, 0, 0, 14, 52, 1, 4, 0, 66, 82, 67, 77, 52, 1,
-        4, 0, 95, 84, 69, 83, 52, 1, 4, 0, 84, 95, 83, 83, 52, 1, 4, 0, 73,
-        68, 1, 4, 52, 1, 4, 0, 130, 132, 139, 150, 52, 1, 4, 0, 3, 1, 1, 6,
-        52, 1, 4, 0, 2, 1, 0, 0, 0, 1, 4, 0, 0, 0, 0, 1, 144, 4, 2, 0, 0, 0,
-        0, 0, 160, 4, 2, 0, 241, 243, 0, 0, 176, 4, 2, 0, 239, 253, 0, 0, 168,
-        4, 2, 0, 255, 255, 0, 0, 168, 4, 2, 0, 0, 0, 0, 0, 162, 4, 2, 0, 1,
-        0, 0, 0, 178, 4, 2, 0, 251, 255, 0, 0, 170, 4, 2, 0, 255, 255, 0, 0,
-        170, 4, 2, 0, 0, 0, 0, 0, 164, 4, 2, 0, 207, 26, 0, 0, 172, 4, 2, 0,
-        0, 0, 0, 0, 188, 4, 2, 0, 0, 0, 0, 0, 166, 4, 2, 0, 215, 2, 0, 0, 182,
-        4, 2, 0, 255, 253, 0, 0, 174, 4, 2, 0, 255, 255, 0, 0, 6, 4, 2, 0, 1,
-        0, 0, 0, 6, 4, 2, 0, 0, 0, 0, 0, 12, 4, 2, 0, 24, 0, 0, 0, 6, 4, 2,
-        0, 0, 0, 0, 0, 72, 4, 2, 0, 0, 12, 0, 0, 2, 4, 2, 0, 32, 6, 0, 0, 2,
-        5, 2, 0, 0, 0, 0, 0, 0, 5, 2, 0, 0, 64, 0, 0, 2, 5, 2, 0, 4, 0, 0, 0,
-        0, 5, 2, 0, 0, 64, 0, 0, 2, 5, 2, 0, 8, 0, 0, 0, 0, 5, 2, 0, 0, 64,
-        0, 0, 2, 5, 2, 0, 12, 0, 0, 0, 0, 5, 2, 0, 0, 64, 0, 0, 2, 5, 2, 0,
-        192, 0, 0, 0, 128, 5, 2, 0, 255, 255, 0, 0, 130, 5, 2, 0, 255, 255,
-        0, 0, 132, 5, 2, 0, 255, 255, 0, 0, 134, 5, 2, 0, 255, 255, 0, 0, 136,
-        5, 2, 0, 255, 255, 0, 0, 138, 5, 2, 0, 255, 255, 0, 0, 140, 5, 2, 0,
-        255, 255, 0, 0, 142, 5, 2, 0, 255, 255, 0, 0, 144, 5, 2, 0, 255, 255,
-        0, 0, 146, 5, 2, 0, 255, 255, 0, 0, 148, 5, 2, 0, 255, 255, 0, 0, 150,
-        5, 2, 0, 255, 255, 0, 0, 152, 5, 2, 0, 255, 255, 0, 0, 154, 5, 2, 0,
-        255, 255, 0, 0, 158, 5, 2, 0, 255, 255, 0, 0, 160, 5, 2, 0, 255, 255,
-        0, 0, 156, 5, 2, 0, 240, 255, 0, 0, 64, 5, 2, 0, 0, 128, 0, 0, 32, 5,
-        2, 0, 6, 15, 0, 0, 64, 5, 2, 0, 0, 128, 0, 0, 64, 5, 2, 0, 0, 129, 0,
-        0, 32, 5, 2, 0, 0, 255, 0, 0, 44, 5, 2, 0, 1, 1, 0, 0, 64, 5, 2, 0,
-        0, 129, 0, 0, 64, 5, 2, 0, 0, 130, 0, 0, 32, 5, 2, 0, 30, 40, 0, 0,
-        44, 5, 2, 0, 0, 0, 0, 0, 64, 5, 2, 0, 0, 130, 0, 0, 64, 5, 2, 0, 0,
-        131, 0, 0, 32, 5, 2, 0, 41, 49, 0, 0, 64, 5, 2, 0, 0, 131, 0, 0, 64,
-        5, 2, 0, 0, 132, 0, 0, 32, 5, 2, 0, 50, 63, 0, 0, 64, 5, 2, 0, 0, 132,
-        0, 0, 64, 5, 2, 0, 0, 133, 0, 0, 32, 5, 2, 0, 64, 65, 0, 0, 64, 5, 2,
-        0, 0, 133, 0, 0, 18, 6, 2, 0, 1, 0, 0, 0, 46, 6, 2, 0, 205, 204, 0,
-        0, 48, 6, 2, 0, 12, 0, 0, 0, 0, 6, 2, 0, 4, 128, 0, 0, 150, 6, 2, 0,
-        8, 0, 0, 0, 154, 6, 2, 0, 228, 0, 0, 0, 136, 6, 2, 0, 0, 0, 0, 0, 156,
-        6, 2, 0, 2, 0, 0, 0, 136, 6, 2, 0, 0, 16, 0, 0, 156, 6, 2, 0, 2, 0,
-        0, 0, 136, 6, 2, 0, 0, 32, 0, 0, 156, 6, 2, 0, 2, 0, 0, 0, 136, 6, 2,
-        0, 0, 48, 0, 0, 156, 6, 2, 0, 2, 0, 0, 0, 136, 6, 2, 0, 11, 15, 0, 0,
-        158, 6, 2, 0, 7, 0, 0, 0, 16, 5, 2, 0, 11, 0, 0, 0, 80, 4, 2, 0, 1,
-        78, 0, 0, 82, 4, 2, 0, 91, 1, 0, 0, 228, 4, 2, 0, 144, 0, 0, 0, 4, 4,
-        2, 0, 180, 0, 0, 0, 84, 5, 2, 0, 255, 175, 0, 0, 254, 4, 2, 0, 0, 0,
-        0, 0, 94, 5, 2, 0, 0, 16, 0, 0, 96, 1, 4, 0, 4, 0, 1, 3, 100, 1, 4,
-        0, 0, 0, 0, 0, 100, 1, 4, 0, 180, 0, 0, 0, 100, 1, 4, 0, 71, 0, 71,
-        0, 100, 1, 4, 0, 0, 0, 100, 0, 100, 1, 4, 0, 48, 9, 64, 0, 96, 1, 4,
-        0, 13, 0, 1, 3, 100, 1, 4, 0, 2, 0, 2, 0, 100, 1, 4, 0, 1, 0, 128, 0,
-        100, 1, 4, 0, 5, 0, 0, 0, 100, 1, 4, 0, 0, 0, 128, 0, 100, 1, 4, 0,
-        100, 0, 100, 0, 100, 1, 4, 0, 14, 0, 71, 0, 100, 1, 4, 0, 0, 5, 0, 0,
-        96, 1, 4, 0, 21, 0, 1, 3, 100, 1, 4, 0, 64, 0, 60, 8, 100, 1, 4, 0,
-        0, 0, 7, 0, 100, 1, 4, 0, 10, 0, 0, 0, 96, 1, 4, 0, 26, 0, 1, 3, 100,
-        1, 4, 0, 0, 192, 0, 0, 96, 1, 4, 0, 29, 0, 1, 3, 100, 1, 4, 0, 16, 39,
-        0, 0, 96, 1, 4, 0, 31, 0, 1, 3, 100, 1, 4, 0, 0, 0, 19, 12, 100, 1,
-        4, 0, 6, 0, 16, 39, 96, 1, 4, 0, 37, 0, 1, 3, 100, 1, 4, 0, 0, 0, 50,
-        0, 96, 1, 4, 0, 40, 0, 1, 3, 100, 1, 4, 0, 0, 0, 76, 10, 100, 1, 4,
-        0, 0, 0, 63, 1, 100, 1, 4, 0, 255, 255, 0, 4, 100, 1, 4, 0, 70, 4, 30,
-        7, 100, 1, 4, 0, 2, 0, 236, 9, 96, 1, 4, 0, 46, 0, 1, 3, 100, 1, 4,
-        0, 0, 0, 0, 128, 96, 1, 4, 0, 146, 1, 1, 3, 100, 1, 4, 0, 100, 4, 0,
-        0, 100, 1, 4, 0, 0, 0, 64, 0, 100, 1, 4, 0, 150, 7, 0, 0, 96, 1, 4,
-        0, 151, 1, 1, 3, 100, 1, 4, 0, 26, 8, 0, 0, 96, 1, 4, 0, 191, 1, 1,
-        3, 100, 1, 4, 0, 0, 0, 5, 0, 96, 1, 4, 0, 8, 4, 1, 3, 100, 1, 4, 0,
-        7, 2, 0, 0, 96, 1, 4, 0, 16, 4, 1, 3, 100, 1, 4, 0, 0, 0, 1, 0, 96,
-        1, 4, 0, 19, 12, 1, 0, 100, 1, 2, 0, 255, 255, 0, 0, 96, 1, 4, 0, 20,
-        12, 1, 0, 100, 1, 2, 0, 255, 255, 0, 0, 96, 1, 4, 0, 26, 0, 1, 3, 100,
-        1, 4, 0, 0, 0, 22, 12, 96, 1, 4, 0, 35, 0, 1, 3, 100, 1, 4, 0, 0, 0,
-        166, 7, 100, 1, 4, 0, 0, 0, 162, 10, 96, 1, 4, 0, 38, 0, 1, 3, 100,
-        1, 4, 0, 10, 14, 11, 9, 100, 1, 4, 0, 14, 2, 0, 0, 96, 1, 4, 0, 50,
-        0, 1, 3, 100, 1, 4, 0, 0, 0, 136, 11, 100, 1, 4, 0, 0, 0, 160, 4, 100,
-        1, 4, 0, 0, 0, 124, 6, 96, 1, 4, 0, 88, 0, 1, 3, 100, 1, 4, 0, 66, 82,
-        67, 77, 100, 1, 4, 0, 95, 84, 69, 83, 100, 1, 4, 0, 84, 95, 83, 83,
-        100, 1, 4, 0, 73, 68, 0, 0, 96, 1, 4, 0, 96, 0, 1, 3, 100, 1, 4, 0,
-        57, 0, 0, 0, 100, 1, 4, 0, 80, 0, 0, 0, 100, 1, 4, 0, 192, 0, 0, 0,
-        96, 1, 4, 0, 112, 0, 1, 3, 100, 1, 4, 0, 190, 3, 190, 3, 100, 1, 4,
-        0, 190, 3, 190, 3, 100, 1, 4, 0, 190, 3, 190, 3, 100, 1, 4, 0, 190,
-        3, 190, 3, 100, 1, 4, 0, 0, 4, 234, 3, 100, 1, 4, 0, 212, 3, 190, 3,
-        100, 1, 4, 0, 11, 4, 245, 3, 100, 1, 4, 0, 223, 3, 201, 3, 100, 1, 4,
-        0, 190, 3, 190, 3, 100, 1, 4, 0, 190, 3, 190, 3, 100, 1, 4, 0, 190,
-        3, 190, 3, 100, 1, 4, 0, 190, 3, 190, 3, 100, 1, 4, 0, 0, 4, 234, 3,
-        100, 1, 4, 0, 212, 3, 190, 3, 100, 1, 4, 0, 11, 4, 245, 3, 100, 1, 4,
-        0, 223, 3, 201, 3, 100, 1, 4, 0, 22, 4, 22, 4, 100, 1, 4, 0, 22, 4,
-        22, 4, 100, 1, 4, 0, 34, 4, 22, 4, 100, 1, 4, 0, 22, 4, 46, 4, 100,
-        1, 4, 0, 22, 4, 22, 4, 100, 1, 4, 0, 22, 4, 22, 4, 100, 1, 4, 0, 22,
-        4, 22, 4, 100, 1, 4, 0, 58, 4, 22, 4, 100, 1, 4, 0, 22, 4, 22, 4, 100,
-        1, 4, 0, 22, 4, 22, 4, 100, 1, 4, 0, 34, 4, 22, 4, 100, 1, 4, 0, 22,
-        4, 46, 4, 100, 1, 4, 0, 22, 4, 22, 4, 100, 1, 4, 0, 22, 4, 22, 4, 100,
-        1, 4, 0, 22, 4, 22, 4, 100, 1, 4, 0, 58, 4, 22, 4, 100, 1, 4, 0, 0,
-        0, 31, 0, 100, 1, 4, 0, 255, 3, 31, 0, 100, 1, 4, 0, 2, 0, 0, 0, 100,
-        1, 4, 0, 2, 0, 0, 0, 96, 1, 4, 0, 152, 0, 1, 3, 100, 1, 4, 0, 0, 0,
-        31, 0, 100, 1, 4, 0, 255, 3, 31, 0, 100, 1, 4, 0, 1, 0, 0, 0, 100, 1,
-        4, 0, 1, 0, 0, 0, 96, 1, 4, 0, 160, 0, 1, 3, 100, 1, 4, 0, 0, 0, 31,
-        0, 100, 1, 4, 0, 255, 3, 31, 0, 100, 1, 4, 0, 1, 0, 0, 0, 100, 1, 4,
-        0, 1, 0, 0, 0, 96, 1, 4, 0, 168, 0, 1, 3, 100, 1, 4, 0, 0, 0, 31, 0,
-        100, 1, 4, 0, 255, 3, 31, 0, 100, 1, 4, 0, 1, 0, 0, 0, 100, 1, 4, 0,
-        1, 0, 0, 0, 96, 1, 4, 0, 192, 0, 1, 3, 100, 1, 4, 0, 55, 36, 55, 36,
-        100, 1, 4, 0, 55, 36, 55, 36, 96, 1, 4, 0, 186, 1, 1, 3, 100, 1, 4,
-        0, 1, 0, 7, 2, 100, 1, 4, 0, 7, 2, 7, 3, 100, 1, 4, 0, 7, 0, 0, 0, 96,
-        1, 4, 0, 223, 1, 1, 3, 100, 1, 4, 0, 32, 0, 203, 1, 100, 1, 4, 0, 0,
-        0, 84, 0, 100, 1, 4, 0, 0, 0, 171, 8, 100, 1, 4, 0, 0, 0, 16, 4, 100,
-        1, 4, 0, 132, 0, 2, 0, 100, 1, 4, 0, 0, 0, 20, 0, 100, 1, 4, 0, 207,
-        1, 2, 0, 100, 1, 4, 0, 68, 0, 0, 0, 100, 1, 4, 0, 175, 8, 2, 0, 100,
-        1, 4, 0, 16, 4, 100, 0, 100, 1, 4, 0, 2, 2, 0, 0, 100, 1, 4, 0, 16,
-        0, 202, 1, 100, 1, 4, 0, 2, 0, 60, 0, 100, 1, 4, 0, 0, 0, 170, 8, 100,
-        1, 4, 0, 2, 0, 16, 4, 100, 1, 4, 0, 84, 0, 2, 8, 100, 1, 4, 0, 0, 0,
-        8, 0, 100, 1, 4, 0, 206, 1, 0, 0, 100, 1, 4, 0, 52, 0, 0, 0, 100, 1,
-        4, 0, 174, 8, 0, 0, 100, 1, 4, 0, 16, 4, 68, 0, 100, 1, 4, 0, 2, 10,
-        0, 0, 100, 1, 4, 0, 8, 0, 201, 1, 100, 1, 4, 0, 2, 0, 48, 0, 100, 1,
-        4, 0, 0, 0, 169, 8, 100, 1, 4, 0, 2, 0, 16, 4, 100, 1, 4, 0, 60, 0,
-        2, 16, 100, 1, 4, 0, 0, 0, 4, 0, 100, 1, 4, 0, 205, 1, 0, 0, 100, 1,
-        4, 0, 44, 0, 0, 0, 100, 1, 4, 0, 173, 8, 0, 0, 100, 1, 4, 0, 16, 4,
-        52, 0, 100, 1, 4, 0, 2, 18, 0, 0, 100, 1, 4, 0, 4, 0, 200, 1, 100, 1,
-        4, 0, 0, 0, 44, 0, 100, 1, 4, 0, 0, 0, 168, 8, 100, 1, 4, 0, 0, 0, 16,
-        4, 100, 1, 4, 0, 48, 0, 2, 25, 100, 1, 4, 0, 0, 0, 0, 0, 100, 1, 4,
-        0, 204, 1, 2, 0, 100, 1, 4, 0, 44, 0, 0, 0, 100, 1, 4, 0, 172, 8, 2,
-        0, 100, 1, 4, 0, 16, 4, 48, 0, 100, 1, 4, 0, 2, 26, 0, 0, 100, 1, 4,
-        0, 192, 0, 10, 4, 100, 1, 4, 0, 112, 0, 0, 0, 100, 1, 4, 0, 58, 1, 10,
-        4, 100, 1, 4, 0, 40, 2, 44, 192, 100, 1, 4, 0, 242, 2, 10, 4, 100, 1,
-        4, 0, 0, 0, 0, 1, 100, 1, 4, 0, 96, 0, 20, 4, 100, 1, 4, 0, 56, 0, 0,
-        0, 100, 1, 4, 0, 2, 1, 20, 4, 100, 1, 4, 0, 20, 1, 44, 192, 100, 1,
-        4, 0, 222, 1, 20, 4, 100, 1, 4, 0, 0, 0, 128, 0, 100, 1, 4, 0, 34, 0,
-        55, 4, 100, 1, 4, 0, 21, 0, 0, 0, 100, 1, 4, 0, 223, 0, 55, 4, 100,
-        1, 4, 0, 101, 0, 44, 192, 100, 1, 4, 0, 46, 1, 55, 4, 100, 1, 4, 0,
-        0, 0, 47, 0, 100, 1, 4, 0, 17, 0, 110, 132, 100, 1, 4, 0, 11, 0, 0,
-        0, 100, 1, 4, 0, 212, 0, 110, 132, 100, 1, 4, 0, 51, 0, 44, 192, 100,
-        1, 4, 0, 252, 0, 110, 132, 100, 1, 4, 0, 0, 0, 24, 0, 100, 1, 4, 0,
-        2, 0, 138, 157, 100, 1, 4, 0, 251, 0, 2, 8, 100, 1, 4, 0, 197, 78, 250,
-        0, 100, 1, 4, 0, 2, 10, 131, 52, 100, 1, 4, 0, 254, 0, 2, 16, 100, 1,
-        4, 0, 98, 39, 249, 0, 100, 1, 4, 0, 2, 18, 66, 26, 100, 1, 4, 0, 253,
-        0, 2, 25, 100, 1, 4, 0, 177, 19, 248, 0, 100, 1, 4, 0, 2, 26, 129, 17,
-        100, 1, 4, 0, 252, 0, 2, 28, 100, 1, 4, 0, 193, 15, 252, 0, 100, 1,
-        4, 0, 0, 0, 193, 15, 100, 1, 4, 0, 252, 0, 0, 0, 100, 1, 4, 0, 193,
-        15, 252, 0, 96, 1, 4, 0, 80, 2, 1, 3, 100, 1, 4, 0, 0, 0, 0, 0, 100,
-        1, 4, 0, 1, 0, 113, 20, 100, 1, 4, 0, 4, 2, 0, 0, 96, 1, 4, 0, 84, 2,
-        1, 3, 100, 1, 4, 0, 1, 0, 0, 0, 100, 1, 4, 0, 1, 0, 113, 20, 100, 1,
-        4, 0, 4, 2, 0, 0, 96, 1, 4, 0, 88, 2, 1, 3, 100, 1, 4, 0, 2, 0, 0, 0,
-        100, 1, 4, 0, 1, 0, 113, 20, 100, 1, 4, 0, 4, 2, 0, 0, 96, 1, 4, 0,
-        92, 2, 1, 3, 100, 1, 4, 0, 3, 0, 0, 0, 100, 1, 4, 0, 1, 0, 113, 20,
-        100, 1, 4, 0, 4, 2, 0, 0, 96, 1, 4, 0, 96, 2, 1, 3, 100, 1, 4, 0, 0,
-        0, 1, 0, 96, 1, 4, 0, 108, 2, 1, 3, 100, 1, 4, 0, 32, 0, 0, 0, 96, 1,
-        4, 0, 18, 4, 1, 3, 100, 1, 4, 0, 0, 0, 12, 0, 96, 1, 4, 0, 80, 5, 1,
-        3, 100, 1, 4, 0, 24, 0, 0, 0, 100, 1, 4, 0, 152, 58, 152, 58, 100, 1,
-        4, 0, 166, 14, 100, 0, 100, 1, 4, 0, 0, 0, 244, 1, 100, 1, 4, 0, 15,
-        0, 0, 0, 100, 1, 4, 0, 200, 175, 168, 97, 100, 1, 4, 0, 32, 78, 30,
-        0, 100, 1, 4, 0, 0, 0, 3, 0, 100, 1, 4, 0, 3, 0, 0, 0, 100, 1, 4, 0,
-        80, 195, 0, 0, 96, 1, 4, 0, 91, 5, 1, 3, 100, 1, 4, 0, 0, 0, 20, 5,
-        100, 1, 4, 0, 226, 4, 0, 0, 96, 1, 4, 0, 95, 5, 1, 3, 100, 1, 4, 0,
-        32, 78, 0, 0, 100, 1, 4, 0, 0, 0, 15, 0, 100, 1, 4, 0, 244, 1, 3, 0,
-        96, 1, 4, 0, 101, 5, 1, 3, 100, 1, 4, 0, 0, 0, 19, 0, 100, 1, 4, 0,
-        0, 0, 3, 0, 100, 1, 4, 0, 1, 0, 7, 0, 100, 1, 4, 0, 200, 175, 0, 0,
-        100, 1, 4, 0, 136, 19, 0, 0, 100, 1, 4, 0, 44, 23, 223, 64, 96, 1, 4,
-        0, 108, 5, 1, 3, 100, 1, 4, 0, 0, 0, 44, 1, 100, 1, 4, 0, 0, 0, 160,
-        15, 96, 1, 4, 0, 111, 5, 1, 3, 100, 1, 4, 0, 0, 0, 2, 0, 100, 1, 4,
-        0, 0, 0, 44, 1, 100, 1, 4, 0, 192, 0, 0, 0, 100, 1, 4, 0, 192, 68, 0,
-        0, 100, 1, 4, 0, 100, 0, 0, 0, 100, 1, 4, 0, 220, 5, 64, 31, 100, 1,
-        4, 0, 0, 0, 70, 0, 100, 1, 4, 0, 80, 0, 80, 0, 100, 1, 4, 0, 2, 0, 0,
-        0, 100, 1, 4, 0, 245, 10, 0, 0, 96, 1, 4, 0, 122, 5, 1, 3, 100, 1, 4,
-        0, 32, 16, 64, 156, 100, 1, 4, 0, 32, 78, 0, 0, 100, 1, 4, 0, 184, 11,
-        0, 0, 96, 1, 4, 0, 126, 5, 1, 3, 100, 1, 4, 0, 0, 0, 32, 78, 100, 1,
-        4, 0, 0, 0, 5, 0, 100, 1, 4, 0, 220, 5, 63, 0, 100, 1, 4, 0, 113, 2,
-        0, 0, 100, 1, 4, 0, 48, 117, 0, 0, 96, 1, 4, 0, 134, 5, 1, 3, 100, 1,
-        4, 0, 196, 9, 160, 15, 96, 1, 4, 0, 137, 5, 1, 3, 100, 1, 4, 0, 0, 0,
-        208, 7, 96, 1, 4, 0, 139, 5, 1, 3, 100, 1, 4, 0, 32, 78, 32, 78, 96,
-        1, 4, 0, 142, 5, 1, 3, 100, 1, 4, 0, 32, 0, 128, 64, 100, 1, 4, 0, 0,
-        0, 10, 0, 100, 1, 4, 0, 232, 3, 232, 28, 100, 1, 4, 0, 56, 74, 0, 0,
-        96, 1, 4, 0, 147, 5, 1, 3, 100, 1, 4, 0, 0, 0, 100, 0, 96, 1, 4, 0,
-        159, 5, 1, 3, 100, 1, 4, 0, 2, 0, 148, 2, 96, 1, 4, 0, 161, 5, 1, 3,
-        100, 1, 4, 0, 225, 0, 0, 0, 96, 1, 4, 0, 164, 5, 1, 3, 100, 1, 4, 0,
-        48, 117, 0, 0, 96, 1, 4, 0, 167, 5, 1, 3, 100, 1, 4, 0, 220, 5, 0, 0,
-        100, 1, 4, 0, 88, 27, 0, 0, 96, 1, 4, 0, 175, 5, 1, 3, 100, 1, 4, 0,
-        0, 0, 15, 0, 100, 1, 4, 0, 200, 0, 0, 0, 96, 1, 4, 0, 178, 5, 1, 3,
-        100, 1, 4, 0, 0, 0, 2, 0, 100, 1, 4, 0, 0, 0, 100, 0, 96, 1, 4, 0, 191,
-        5, 1, 3, 100, 1, 4, 0, 0, 0, 190, 0, 96, 1, 4, 0, 47, 12, 1, 0, 100,
-        1, 2, 0, 0, 0, 0, 0, 96, 1, 4, 0, 3, 0, 2, 0, 100, 1, 4, 0, 31, 0, 0,
-        0, 96, 1, 4, 0, 4, 0, 2, 0, 100, 1, 4, 0, 255, 3, 0, 0, 96, 1, 4, 0,
-        5, 0, 2, 0, 100, 1, 4, 0, 31, 0, 0, 0, 96, 1, 4, 0, 6, 0, 2, 0, 100,
-        1, 4, 0, 7, 0, 0, 0, 96, 1, 4, 0, 7, 0, 2, 0, 100, 1, 4, 0, 4, 0, 0,
-        0, 96, 1, 4, 0, 8, 0, 2, 0, 100, 1, 4, 0, 255, 255, 0, 0, 96, 1, 4,
-        0, 9, 0, 2, 0, 100, 1, 4, 0, 0, 0, 0, 0, 96, 1, 4, 0, 10, 0, 2, 0, 100,
-        1, 4, 0, 0, 0, 0, 0, 96, 1, 4, 0, 11, 0, 2, 0, 100, 1, 4, 0, 0, 0, 0,
-        0, 96, 1, 4, 0, 12, 0, 2, 0, 100, 1, 4, 0, 0, 0, 0, 0, 96, 1, 4, 0,
-        13, 0, 2, 0, 100, 1, 4, 0, 0, 0, 0, 0, 96, 1, 4, 0, 14, 0, 2, 0, 100,
-        1, 4, 0, 0, 0, 0, 0, 96, 1, 4, 0, 15, 0, 2, 0, 100, 1, 4, 0, 0, 0, 0,
-        0, 96, 1, 4, 0, 16, 0, 2, 0, 100, 1, 4, 0, 31, 0, 0, 0, 96, 1, 4, 0,
-        17, 0, 2, 0, 100, 1, 4, 0, 0, 0, 0, 0, 96, 1, 4, 0, 18, 0, 2, 0, 100,
-        1, 4, 0, 0, 0, 0, 0, 96, 1, 4, 0, 19, 0, 2, 0, 100, 1, 4, 0, 0, 0, 0,
-        0, 96, 1, 4, 0, 21, 0, 2, 0, 100, 1, 4, 0, 0, 0, 0, 0, 96, 1, 4, 0,
-        22, 0, 2, 0, 100, 1, 4, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 134,
-        6, 2, 0, 208, 9, 0, 0, 128, 6, 2, 0, 62, 62, 0, 0, 130, 6, 2, 0, 62,
-        2, 0, 0, 0, 7, 2, 0, 60, 0, 0, 0, 132, 6, 2, 0, 18, 2, 0, 0, 96, 1,
-        4, 0, 3, 0, 1, 0, 100, 1, 2, 0, 192, 0, 0, 0, 96, 1, 4, 0, 3, 0, 1,
-        0, 102, 1, 2, 0, 10, 0, 0, 0, 96, 1, 4, 0, 4, 0, 1, 0, 100, 1, 2, 0,
-        20, 0, 0, 0, 96, 1, 4, 0, 7, 0, 1, 0, 100, 1, 2, 0, 131, 1, 0, 0, 96,
-        1, 4, 0, 37, 0, 1, 0, 100, 1, 2, 0, 244, 1, 0, 0, 96, 1, 4, 0, 193,
-        5, 1, 0, 100, 1, 2, 0, 43, 4, 0, 0, 96, 1, 4, 0, 193, 5, 1, 0, 102,
-        1, 2, 0, 0, 1, 0, 0, 96, 1, 4, 0, 225, 1, 1, 0, 100, 1, 2, 0, 60, 0,
-        0, 0, 96, 1, 4, 0, 230, 1, 1, 0, 102, 1, 2, 0, 52, 0, 0, 0, 96, 1, 4,
-        0, 236, 1, 1, 0, 100, 1, 2, 0, 48, 0, 0, 0, 96, 1, 4, 0, 241, 1, 1,
-        0, 102, 1, 2, 0, 44, 0, 0, 0, 96, 1, 4, 0, 247, 1, 1, 0, 100, 1, 2,
-        0, 44, 0, 0, 0, 96, 1, 4, 0, 252, 1, 1, 0, 102, 1, 2, 0, 40, 0, 0, 0,
-        96, 1, 4, 0, 2, 2, 1, 0, 100, 1, 2, 0, 40, 0, 0, 0, 96, 1, 4, 0, 7,
-        2, 1, 0, 102, 1, 2, 0, 40, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 121,
-        113, 128, 0, 245, 117, 128, 0, 153, 118, 128, 0, 149, 117, 128, 0, 113,
-        120, 128, 0, 33, 119, 128, 0, 133, 120, 128, 0, 153, 120, 128, 0, 165,
-        117, 128, 0, 185, 117, 128, 0, 249, 112, 0, 0, 193, 120, 128, 0, 153,
-        116, 128, 0, 93, 120, 128, 0, 199, 112, 0, 0, 125, 109, 0, 0, 255, 107,
-        0, 0, 67, 108, 0, 0, 205, 115, 128, 0, 41, 116, 128, 0, 181, 115, 128,
-        0, 53, 119, 128, 0, 157, 114, 128, 0, 73, 117, 128, 0, 41, 117, 128,
-        0, 129, 117, 128, 0, 139, 107, 0, 0, 25, 117, 128, 0, 245, 111, 0, 0,
-        33, 114, 0, 0, 167, 111, 0, 0, 153, 111, 0, 0, 237, 108, 0, 0, 241,
-        107, 0, 0, 197, 113, 128, 0, 209, 113, 128, 0, 249, 112, 128, 0, 73,
-        109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 109, 0, 0, 253, 115,
-        128, 0, 213, 115, 128, 0, 69, 110, 0, 0, 49, 115, 128, 0, 237, 112,
-        128, 0, 229, 112, 128, 0, 77, 110, 0, 0, 1, 114, 128, 0, 177, 112, 128,
-        0, 40, 0, 0, 0, 119, 108, 48, 58, 100, 109, 97, 48, 0, 0, 0, 0, 248,
-        209, 3, 0, 112, 210, 3, 0, 4, 208, 3, 0, 15, 0, 0, 0, 4, 1, 0, 0, 8,
-        7, 0, 0, 0, 7, 7, 0, 0, 7, 4, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 1,
-        1, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 177, 8, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 1, 4, 0, 226, 4, 0, 8, 10,
-        0, 0, 0, 106, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 6, 0, 0, 221, 200,
-        141, 0, 4, 4, 4, 4, 4, 1, 4, 0, 226, 4, 0, 8, 10, 0, 0, 0, 106, 16,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 4, 0, 0, 140, 46, 186, 0, 4, 4, 4,
-        4, 4, 1, 4, 0, 226, 4, 0, 8, 10, 0, 0, 0, 106, 16, 0, 0, 0, 0, 0, 0,
-        24, 24, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 49, 25, 0, 0, 0, 0, 160, 0, 12, 12, 12, 12, 10, 3, 4, 0, 226,
-        4, 0, 8, 10, 0, 0, 0, 106, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177, 18,
-        0, 0, 39, 118, 98, 0, 12, 12, 12, 12, 10, 3, 4, 0, 226, 4, 0, 8, 10,
-        0, 0, 0, 106, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177, 12, 0, 0, 20, 67,
-        253, 0, 12, 12, 12, 12, 10, 3, 4, 0, 226, 4, 0, 8, 10, 0, 0, 0, 106,
-        16, 0, 0, 224, 46, 1, 1, 1, 80, 0, 0, 0, 0, 0, 0, 200, 50, 2, 1, 1,
-        73, 0, 0, 137, 157, 216, 0, 64, 56, 3, 1, 1, 66, 0, 0, 170, 170, 170,
-        0, 0, 60, 4, 1, 1, 62, 0, 0, 0, 0, 128, 0, 72, 63, 5, 1, 1, 59, 0, 0,
-        208, 94, 66, 0, 160, 65, 6, 1, 1, 57, 0, 0, 73, 146, 36, 0, 0, 75, 7,
-        1, 1, 50, 0, 0, 0, 0, 0, 0, 88, 77, 8, 1, 1, 48, 0, 0, 7, 31, 124, 0,
-        32, 78, 9, 1, 1, 48, 0, 0, 0, 0, 0, 0, 192, 93, 10, 1, 1, 40, 0, 0,
-        0, 0, 0, 0, 168, 97, 11, 1, 1, 38, 0, 0, 102, 102, 102, 0, 144, 101,
-        12, 1, 1, 36, 0, 0, 196, 78, 236, 0, 48, 117, 13, 1, 1, 32, 0, 0, 0,
-        0, 0, 0, 64, 131, 14, 1, 1, 28, 0, 0, 36, 73, 146, 0, 24, 146, 15, 2,
-        1, 51, 0, 0, 249, 62, 86, 0, 0, 150, 16, 2, 1, 50, 0, 0, 0, 0, 0, 0,
-        64, 156, 17, 2, 1, 48, 0, 0, 0, 0, 0, 0, 128, 187, 18, 2, 1, 40, 0,
-        0, 0, 0, 0, 0, 32, 203, 19, 2, 1, 36, 0, 0, 196, 78, 236, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 111, 97, 114, 100, 102, 108, 97, 103,
-        115, 51, 0, 115, 112, 117, 114, 99, 111, 110, 102, 105, 103, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 177, 25, 0, 0, 171, 170, 10, 0, 11, 12, 12, 12,
-        10, 3, 4, 0, 226, 4, 0, 8, 10, 0, 0, 0, 106, 16, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 177, 18, 0, 0, 20, 59, 177, 0, 11, 12, 12, 12, 10, 3, 4, 0,
-        226, 4, 0, 8, 10, 0, 0, 0, 106, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
-        13, 0, 0, 122, 5, 52, 0, 11, 12, 12, 12, 10, 3, 4, 0, 226, 4, 0, 8,
-        10, 0, 0, 0, 106, 16, 0, 0, 0, 0, 0, 0, 18, 16, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 177, 25, 0, 0, 0, 0, 64, 0, 12, 12, 12, 12, 10,
-        3, 4, 0, 226, 4, 0, 8, 10, 0, 0, 0, 106, 16, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 177, 18, 0, 0, 255, 136, 216, 0, 12, 12, 12, 12, 10, 3, 4, 0,
-        226, 4, 0, 8, 10, 0, 0, 0, 106, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
-        13, 0, 0, 240, 255, 78, 0, 12, 12, 12, 12, 10, 3, 4, 0, 226, 4, 0, 8,
-        10, 0, 0, 0, 106, 16, 0, 0, 115, 98, 47, 37, 117, 47, 0, 73, 110, 118,
-        97, 108, 105, 100, 32, 85, 97, 114, 116, 32, 105, 110, 116, 101, 114,
-        102, 97, 99, 101, 32, 73, 110, 100, 101, 120, 46, 10, 0, 66, 97, 117,
-        100, 32, 114, 97, 116, 101, 32, 99, 97, 110, 32, 110, 111, 116, 32,
-        98, 101, 32, 122, 101, 114, 111, 46, 10, 0, 66, 97, 117, 100, 32, 114,
-        97, 116, 101, 32, 105, 115, 32, 104, 105, 103, 104, 101, 114, 32, 116,
-        104, 97, 110, 32, 112, 101, 114, 109, 105, 116, 116, 101, 100, 10, 0,
-        0, 0, 92, 211, 3, 0, 0, 0, 0, 0, 8, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 100, 108, 116, 114, 111, 0, 170, 170, 3, 0, 0, 0, 119, 100,
-        115, 37, 100, 46, 37, 100, 0, 119, 108, 37, 100, 0, 119, 108, 0, 119,
-        108, 37, 100, 58, 32, 37, 115, 32, 37, 115, 32, 118, 101, 114, 115,
-        105, 111, 110, 32, 37, 115, 32, 70, 87, 73, 68, 32, 48, 49, 45, 37,
-        120, 10, 0, 74, 97, 110, 32, 51, 48, 32, 50, 48, 50, 48, 0, 50, 49,
-        58, 51, 56, 58, 50, 55, 0, 170, 170, 3, 0, 0, 0, 116, 107, 111, 0, 0,
-        183, 211, 3, 0, 0, 0, 0, 0, 8, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 86, 217, 3, 0, 102, 0, 136, 0, 8, 0, 0, 0, 94, 217, 3, 0, 31,
-        1, 0, 0, 8, 0, 44, 0, 108, 217, 3, 0, 30, 1, 0, 0, 6, 0, 0, 0, 116,
-        217, 3, 0, 29, 1, 0, 0, 7, 0, 0, 0, 136, 217, 3, 0, 28, 1, 0, 0, 7,
-        0, 0, 0, 155, 217, 3, 0, 27, 1, 0, 0, 3, 0, 0, 0, 168, 217, 3, 0, 3,
-        0, 8, 128, 7, 0, 0, 0, 179, 217, 3, 0, 5, 0, 8, 128, 7, 0, 0, 0, 191,
-        217, 3, 0, 4, 0, 8, 128, 7, 0, 0, 0, 201, 217, 3, 0, 38, 0, 8, 128,
-        8, 0, 0, 0, 208, 217, 3, 0, 37, 0, 8, 128, 6, 0, 0, 0, 219, 217, 3,
-        0, 42, 0, 0, 128, 7, 0, 0, 0, 230, 217, 3, 0, 36, 0, 8, 128, 8, 0, 0,
-        0, 38, 217, 3, 0, 33, 0, 8, 128, 8, 0, 0, 0, 238, 217, 3, 0, 47, 0,
-        8, 128, 3, 0, 0, 0, 251, 217, 3, 0, 8, 0, 8, 128, 8, 0, 0, 0, 3, 218,
-        3, 0, 39, 0, 8, 128, 6, 0, 0, 0, 11, 218, 3, 0, 9, 0, 0, 128, 8, 0,
-        0, 0, 40, 217, 3, 0, 32, 0, 8, 128, 8, 0, 0, 0, 254, 215, 3, 0, 48,
-        0, 8, 128, 6, 0, 0, 0, 19, 218, 3, 0, 59, 0, 8, 128, 8, 0, 0, 0, 26,
-        218, 3, 0, 18, 0, 0, 128, 8, 0, 0, 0, 35, 218, 3, 0, 68, 0, 0, 128,
-        6, 0, 0, 0, 50, 218, 3, 0, 66, 0, 0, 128, 4, 0, 0, 0, 64, 218, 3, 0,
-        67, 0, 0, 128, 4, 0, 0, 0, 81, 218, 3, 0, 69, 0, 0, 136, 4, 0, 0, 0,
-        193, 217, 3, 0, 2, 0, 8, 128, 8, 0, 0, 0, 45, 217, 3, 0, 35, 0, 8, 128,
-        8, 0, 0, 0, 89, 218, 3, 0, 101, 0, 136, 0, 7, 0, 0, 0, 101, 218, 3,
-        0, 100, 0, 136, 0, 7, 0, 0, 0, 210, 82, 136, 0, 242, 0, 0, 0, 8, 0,
-        188, 1, 112, 218, 3, 0, 106, 0, 8, 0, 8, 0, 12, 0, 120, 218, 3, 0, 105,
-        0, 8, 0, 8, 0, 12, 0, 76, 134, 136, 0, 2, 0, 0, 64, 6, 0, 0, 0, 129,
-        218, 3, 0, 47, 0, 8, 0, 7, 0, 0, 0, 201, 81, 136, 0, 39, 0, 0, 64, 5,
-        0, 0, 0, 173, 101, 136, 0, 234, 0, 0, 64, 8, 0, 4, 0, 11, 180, 136,
-        0, 23, 1, 0, 64, 8, 0, 176, 0, 134, 218, 3, 0, 26, 1, 0, 0, 1, 0, 0,
-        0, 143, 218, 3, 0, 9, 1, 64, 4, 4, 0, 0, 0, 151, 218, 3, 0, 193, 0,
-        0, 0, 8, 0, 0, 0, 160, 218, 3, 0, 117, 0, 8, 0, 6, 0, 0, 0, 51, 217,
-        3, 0, 103, 0, 8, 0, 8, 0, 0, 0, 170, 218, 3, 0, 99, 0, 72, 0, 7, 0,
-        0, 0, 184, 218, 3, 0, 98, 0, 72, 0, 8, 0, 32, 0, 191, 218, 3, 0, 24,
-        1, 0, 0, 5, 0, 0, 0, 159, 90, 136, 0, 11, 1, 0, 0, 5, 0, 0, 0, 60, 84,
-        136, 0, 136, 0, 1, 0, 5, 0, 0, 0, 246, 81, 136, 0, 44, 0, 16, 64, 7,
-        0, 0, 0, 229, 88, 136, 0, 236, 0, 0, 0, 7, 0, 0, 0, 130, 82, 136, 0,
-        73, 0, 0, 0, 0, 0, 0, 0, 213, 218, 3, 0, 25, 1, 0, 0, 1, 0, 0, 0, 230,
-        218, 3, 0, 22, 1, 0, 0, 8, 0, 0, 0, 5, 91, 136, 0, 20, 1, 0, 0, 1, 0,
-        0, 0, 82, 83, 136, 0, 80, 0, 0, 64, 3, 0, 0, 0, 89, 83, 136, 0, 81,
-        0, 0, 64, 2, 0, 0, 0, 250, 218, 3, 0, 232, 0, 0, 0, 1, 0, 0, 0, 4, 219,
-        3, 0, 17, 1, 0, 16, 8, 0, 5, 0, 149, 44, 136, 0, 28, 0, 0, 64, 8, 0,
-        4, 0, 37, 77, 136, 0, 46, 0, 0, 64, 6, 0, 0, 0, 194, 76, 136, 0, 30,
-        0, 0, 64, 8, 0, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 219,
-        3, 0, 0, 0, 16, 0, 17, 0, 0, 0, 27, 219, 3, 0, 17, 0, 21, 0, 5, 0, 0,
-        0, 37, 219, 3, 0, 22, 0, 30, 0, 9, 0, 0, 0, 45, 219, 3, 0, 31, 0, 39,
-        0, 9, 0, 0, 0, 53, 219, 3, 0, 40, 0, 55, 0, 16, 0, 0, 0, 67, 219, 3,
-        0, 56, 0, 60, 0, 5, 0, 0, 0, 83, 219, 3, 0, 61, 0, 61, 0, 1, 0, 0, 0,
-        93, 219, 3, 0, 62, 0, 62, 0, 1, 0, 0, 0, 105, 219, 3, 0, 63, 0, 63,
-        0, 1, 0, 0, 0, 116, 219, 3, 0, 0, 0, 15, 0, 16, 0, 0, 0, 129, 219, 3,
-        0, 16, 0, 31, 0, 16, 0, 0, 0, 142, 219, 3, 0, 32, 0, 47, 0, 16, 0, 0,
-        0, 157, 219, 3, 0, 48, 0, 52, 0, 5, 0, 0, 0, 173, 219, 3, 0, 53, 0,
-        53, 0, 1, 0, 0, 0, 183, 219, 3, 0, 54, 0, 54, 0, 1, 0, 0, 0, 195, 219,
-        3, 0, 55, 0, 59, 0, 5, 0, 0, 0, 206, 219, 3, 0, 60, 0, 61, 0, 2, 0,
-        0, 0, 219, 219, 3, 0, 62, 0, 62, 0, 1, 0, 0, 0, 227, 219, 3, 0, 63,
-        0, 63, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
-        0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
-        0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 8, 4, 12, 2, 10,
-        6, 14, 1, 9, 5, 13, 3, 11, 7, 15, 2, 0, 0, 0, 0, 0, 2, 0, 3, 0, 4, 0,
-        5, 0, 255, 15, 2, 0, 4, 0, 6, 0, 111, 116, 112, 114, 97, 119, 114, 0,
-        37, 115, 58, 32, 48, 120, 37, 120, 10, 0, 80, 97, 99, 107, 97, 103,
-        101, 32, 73, 68, 58, 37, 120, 10, 0, 97, 112, 32, 0, 115, 116, 97, 32,
-        0, 119, 109, 101, 32, 0, 56, 48, 50, 46, 49, 49, 100, 32, 0, 56, 48,
-        50, 46, 49, 49, 104, 32, 0, 114, 109, 32, 0, 99, 97, 99, 32, 0, 97,
-        109, 112, 100, 117, 32, 0, 97, 109, 112, 100, 117, 95, 116, 120, 32,
-        0, 97, 109, 112, 100, 117, 95, 114, 120, 32, 0, 97, 109, 115, 100, 117,
-        114, 120, 32, 0, 97, 109, 115, 100, 117, 116, 120, 32, 0, 114, 97, 100,
-        105, 111, 95, 112, 119, 114, 115, 97, 118, 101, 32, 0, 112, 50, 112,
-        111, 32, 0, 97, 110, 113, 112, 111, 32, 0, 100, 102, 114, 116, 115,
-        32, 0, 115, 116, 98, 99, 45, 116, 120, 32, 0, 115, 116, 98, 99, 45,
-        114, 120, 45, 49, 115, 115, 32, 0, 119, 110, 109, 32, 0, 98, 115, 115,
-        116, 114, 97, 110, 115, 32, 0, 109, 102, 112, 32, 0, 99, 112, 116, 108,
-        118, 45, 37, 100, 32, 0, 119, 108, 37, 100, 58, 32, 80, 83, 77, 32,
-        109, 105, 99, 114, 111, 99, 111, 100, 101, 32, 119, 97, 116, 99, 104,
-        100, 111, 103, 32, 102, 105, 114, 101, 100, 32, 40, 37, 100, 41, 32,
-        97, 116, 32, 37, 100, 32, 40, 115, 101, 99, 111, 110, 100, 115, 41,
-        10, 0, 119, 108, 37, 100, 58, 32, 80, 83, 77, 32, 75, 101, 101, 112,
-        32, 65, 108, 105, 118, 101, 32, 40, 37, 100, 41, 32, 35, 32, 37, 100,
-        32, 10, 0, 110, 118, 111, 116, 112, 119, 0, 115, 114, 99, 114, 99, 0,
-        110, 118, 114, 97, 109, 95, 103, 101, 116, 0, 99, 117, 114, 112, 111,
-        119, 101, 114, 0, 119, 108, 99, 0, 109, 105, 110, 95, 116, 120, 112,
-        111, 119, 101, 114, 0, 97, 110, 116, 103, 97, 105, 110, 0, 98, 99, 110,
-        116, 114, 105, 109, 95, 115, 116, 97, 116, 115, 0, 98, 99, 110, 116,
-        114, 105, 109, 0, 98, 99, 110, 95, 108, 111, 115, 115, 95, 114, 111,
-        97, 109, 95, 115, 116, 97, 114, 116, 0, 98, 99, 110, 95, 114, 101, 97,
-        113, 117, 105, 114, 101, 95, 115, 116, 97, 114, 116, 0, 98, 99, 110,
-        95, 119, 97, 105, 116, 95, 112, 114, 100, 0, 99, 99, 103, 112, 105,
-        111, 99, 116, 114, 108, 0, 99, 99, 103, 112, 105, 111, 111, 117, 116,
-        101, 110, 0, 99, 99, 103, 112, 105, 111, 111, 117, 116, 0, 99, 105,
-        115, 118, 97, 114, 0, 99, 105, 115, 95, 115, 111, 117, 114, 99, 101,
-        0, 99, 117, 115, 116, 111, 109, 118, 97, 114, 50, 0, 100, 101, 118,
-        112, 97, 116, 104, 0, 110, 118, 114, 97, 109, 95, 115, 111, 117, 114,
-        99, 101, 0, 111, 116, 112, 100, 117, 109, 112, 0, 111, 116, 112, 108,
-        111, 99, 107, 0, 111, 116, 112, 115, 116, 97, 116, 0, 111, 116, 112,
-        114, 97, 119, 0, 112, 108, 108, 114, 101, 115, 101, 116, 0, 112, 108,
-        108, 116, 101, 115, 116, 95, 99, 111, 110, 102, 105, 103, 0, 112, 108,
-        108, 116, 101, 115, 116, 95, 100, 101, 108, 97, 121, 0, 112, 108, 108,
-        116, 101, 115, 116, 95, 111, 102, 102, 100, 101, 108, 97, 121, 0, 112,
-        108, 108, 116, 101, 115, 116, 0, 98, 111, 97, 114, 100, 102, 108, 97,
-        103, 115, 50, 0, 98, 111, 97, 114, 100, 102, 108, 97, 103, 115, 0, 99,
-        105, 115, 100, 117, 109, 112, 0, 99, 105, 115, 119, 114, 105, 116, 101,
-        0, 101, 105, 114, 112, 0, 108, 111, 103, 116, 114, 97, 99, 101, 0, 108,
-        111, 110, 103, 112, 107, 116, 0, 109, 97, 110, 102, 105, 110, 102, 111,
-        0, 109, 105, 109, 111, 95, 116, 120, 98, 119, 0, 112, 107, 116, 101,
-        110, 103, 95, 109, 97, 120, 108, 101, 110, 0, 112, 107, 116, 101, 110,
-        103, 0, 112, 109, 95, 98, 99, 109, 99, 95, 109, 111, 114, 101, 100,
-        97, 116, 97, 95, 119, 97, 105, 116, 0, 114, 111, 97, 109, 95, 98, 99,
-        110, 108, 111, 115, 115, 95, 111, 102, 102, 0, 114, 111, 97, 109, 111,
-        102, 102, 108, 95, 98, 115, 115, 105, 100, 95, 108, 105, 115, 116, 0,
-        115, 114, 95, 101, 110, 97, 98, 108, 101, 0, 117, 97, 114, 116, 112,
-        97, 114, 97, 109, 115, 0, 79, 84, 80, 95, 76, 79, 84, 95, 78, 85, 77,
-        0, 87, 65, 70, 69, 82, 95, 78, 85, 77, 0, 87, 65, 70, 69, 82, 95, 88,
-        0, 87, 65, 70, 69, 82, 95, 89, 0, 80, 82, 79, 71, 95, 82, 69, 76, 95,
-        68, 65, 84, 69, 0, 80, 82, 79, 71, 95, 82, 69, 86, 95, 67, 82, 84, 76,
-        95, 48, 0, 77, 69, 77, 95, 82, 69, 80, 95, 48, 0, 80, 82, 79, 66, 69,
-        68, 95, 66, 73, 78, 49, 0, 76, 79, 67, 75, 95, 66, 73, 84, 95, 48, 0,
-        70, 84, 49, 95, 80, 82, 79, 71, 95, 82, 69, 76, 0, 70, 84, 50, 95, 80,
-        82, 79, 71, 95, 82, 69, 76, 0, 70, 84, 95, 80, 82, 79, 71, 95, 82, 69,
-        83, 67, 82, 78, 0, 80, 82, 79, 71, 95, 82, 69, 86, 95, 67, 84, 82, 76,
-        95, 49, 0, 77, 69, 77, 95, 82, 69, 80, 95, 49, 0, 65, 78, 65, 76, 79,
-        71, 95, 84, 82, 73, 77, 0, 83, 67, 82, 69, 69, 78, 95, 66, 73, 84, 0,
-        81, 65, 95, 83, 65, 77, 80, 95, 84, 69, 83, 84, 0, 70, 84, 95, 66, 73,
-        78, 49, 0, 76, 79, 67, 75, 95, 66, 73, 84, 95, 49, 0, 49, 49, 100, 0,
-        0, 0, 76, 93, 136, 0, 0, 0, 0, 0, 8, 0, 0, 0, 96, 93, 136, 0, 1, 0,
-        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 49, 104, 0,
-        49, 49, 117, 0, 221, 22, 0, 80, 242, 1, 1, 0, 0, 80, 242, 255, 1, 0,
-        0, 80, 242, 255, 1, 0, 0, 80, 242, 255, 40, 221, 3, 0, 0, 0, 128, 0,
-        1, 0, 0, 0, 203, 221, 3, 0, 1, 0, 0, 0, 8, 0, 2, 0, 213, 221, 3, 0,
-        2, 0, 0, 0, 3, 0, 0, 0, 230, 221, 3, 0, 3, 0, 0, 0, 8, 0, 8, 0, 247,
-        221, 3, 0, 4, 0, 0, 0, 8, 0, 8, 0, 8, 222, 3, 0, 5, 0, 128, 0, 1, 0,
-        0, 0, 26, 222, 3, 0, 7, 0, 0, 0, 2, 0, 0, 0, 37, 222, 3, 0, 9, 0, 0,
-        0, 1, 0, 0, 0, 47, 222, 3, 0, 11, 0, 0, 0, 3, 0, 0, 0, 65, 222, 3, 0,
-        23, 0, 0, 0, 3, 0, 0, 0, 75, 222, 3, 0, 24, 0, 0, 0, 3, 0, 0, 0, 91,
-        222, 3, 0, 25, 0, 0, 0, 3, 0, 0, 0, 100, 222, 3, 0, 26, 0, 128, 0, 2,
-        0, 0, 0, 114, 222, 3, 0, 28, 0, 0, 0, 1, 0, 0, 0, 134, 222, 3, 0, 29,
-        0, 0, 0, 0, 0, 0, 0, 155, 222, 3, 0, 30, 0, 0, 0, 0, 0, 0, 0, 175, 222,
-        3, 0, 31, 0, 0, 0, 0, 0, 0, 0, 188, 222, 3, 0, 32, 0, 0, 0, 3, 0, 0,
-        0, 202, 222, 3, 0, 37, 0, 4, 0, 8, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 97, 109, 112, 100, 117, 95, 116, 120, 0, 37, 115, 58, 32,
-        99, 108, 107, 32, 111, 102, 102, 10, 0, 102, 105, 102, 111, 32, 37,
-        100, 58, 32, 114, 112, 116, 114, 32, 37, 120, 32, 119, 112, 116, 114,
-        32, 37, 120, 10, 0, 9, 101, 110, 116, 114, 121, 32, 37, 100, 32, 97,
-        100, 100, 114, 32, 48, 120, 37, 120, 58, 32, 48, 120, 37, 120, 10, 0,
-        100, 114, 105, 118, 101, 114, 32, 115, 116, 97, 116, 105, 115, 116,
-        105, 99, 115, 58, 32, 97, 103, 103, 102, 105, 102, 111, 32, 112, 101,
-        110, 100, 105, 110, 103, 32, 37, 100, 32, 101, 110, 113, 117, 101, 47,
-        99, 111, 110, 115, 32, 37, 100, 32, 37, 100, 10, 0, 84, 88, 32, 77,
-        67, 83, 32, 32, 58, 0, 32, 32, 37, 100, 40, 37, 100, 37, 37, 41, 0,
-        10, 32, 32, 32, 32, 32, 32, 32, 32, 58, 0, 97, 109, 112, 100, 117, 95,
-        116, 105, 100, 0, 97, 109, 112, 100, 117, 95, 116, 120, 95, 100, 101,
-        110, 115, 105, 116, 121, 0, 97, 109, 112, 100, 117, 95, 115, 101, 110,
-        100, 95, 97, 100, 100, 98, 97, 0, 97, 109, 112, 100, 117, 95, 115, 101,
-        110, 100, 95, 100, 101, 108, 98, 97, 0, 97, 109, 112, 100, 117, 95,
-        109, 97, 110, 117, 97, 108, 95, 109, 111, 100, 101, 0, 97, 109, 112,
-        100, 117, 95, 109, 112, 100, 117, 0, 97, 109, 112, 100, 117, 95, 114,
-        116, 115, 0, 97, 109, 112, 100, 117, 95, 114, 101, 116, 114, 121, 95,
-        108, 105, 109, 105, 116, 0, 97, 99, 107, 95, 114, 97, 116, 105, 111,
-        0, 97, 99, 107, 95, 114, 97, 116, 105, 111, 95, 100, 101, 112, 116,
-        104, 0, 97, 109, 112, 100, 117, 109, 97, 99, 0, 97, 109, 112, 100, 117,
-        95, 97, 103, 103, 109, 111, 100, 101, 0, 102, 114, 97, 109, 101, 98,
-        117, 114, 115, 116, 95, 111, 118, 101, 114, 114, 105, 100, 101, 0, 97,
-        109, 112, 100, 117, 95, 116, 120, 113, 95, 112, 114, 111, 102, 95, 115,
-        116, 97, 114, 116, 0, 97, 109, 112, 100, 117, 95, 116, 120, 113, 95,
-        112, 114, 111, 102, 95, 100, 117, 109, 112, 0, 97, 109, 112, 100, 117,
-        95, 116, 120, 113, 95, 115, 115, 0, 97, 109, 112, 100, 117, 95, 114,
-        101, 108, 101, 97, 115, 101, 0, 97, 109, 112, 100, 117, 95, 116, 120,
-        97, 103, 103, 114, 0, 119, 108, 99, 95, 100, 117, 109, 112, 95, 97,
-        103, 103, 102, 105, 102, 111, 0, 0, 223, 3, 0, 3, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 109, 112, 100, 117, 95, 99,
-        108, 101, 97, 114, 95, 100, 117, 109, 112, 0, 82, 88, 32, 77, 67, 83,
-        32, 32, 58, 0, 0, 148, 107, 136, 0, 4, 0, 0, 0, 7, 0, 0, 0, 136, 107,
-        136, 0, 3, 0, 0, 0, 5, 0, 0, 0, 135, 106, 136, 0, 12, 0, 128, 0, 1,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 115, 136, 0, 6, 0,
-        0, 0, 6, 0, 0, 0, 124, 223, 3, 0, 40, 0, 0, 0, 1, 0, 0, 0, 144, 223,
-        3, 0, 39, 0, 32, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        112, 114, 111, 120, 121, 95, 97, 114, 112, 95, 97, 100, 118, 101, 114,
-        116, 105, 115, 101, 0, 115, 99, 98, 95, 109, 97, 120, 95, 112, 114,
-        111, 98, 101, 0, 97, 112, 112, 115, 0, 0, 1, 2, 100, 101, 118, 112,
-        97, 116, 104, 37, 100, 0, 37, 100, 58, 0, 37, 115, 58, 32, 104, 111,
-        115, 116, 95, 101, 110, 97, 98, 32, 37, 100, 10, 0, 0, 0, 236, 223,
-        3, 0, 0, 0, 0, 64, 8, 0, 16, 0, 253, 223, 3, 0, 1, 0, 0, 64, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 110, 116, 101, 114, 102,
-        97, 99, 101, 95, 99, 114, 101, 97, 116, 101, 0, 105, 110, 116, 101,
-        114, 102, 97, 99, 101, 95, 114, 101, 109, 111, 118, 101, 0, 98, 116,
-        99, 0, 0, 0, 64, 224, 3, 0, 3, 0, 0, 0, 7, 0, 0, 0, 79, 224, 3, 0, 2,
-        0, 128, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 76, 79,
-        66, 0, 95, 95, 0, 99, 108, 109, 108, 111, 97, 100, 95, 115, 116, 97,
-        116, 117, 115, 0, 99, 108, 109, 108, 111, 97, 100, 0, 88, 89, 0, 0,
-        88, 65, 0, 0, 88, 66, 0, 0, 88, 48, 0, 0, 88, 49, 0, 0, 88, 50, 0, 0,
-        88, 51, 0, 0, 88, 83, 0, 0, 88, 86, 0, 0, 88, 84, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 12, 0,
-        0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 122,
-        225, 3, 0, 0, 0, 0, 0, 178, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0,
-        0, 0, 0, 0, 0, 22, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 4,
-        0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 26, 0, 0, 0,
-        8, 0, 0, 0, 1, 0, 0, 0, 68, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 116, 0,
-        0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 142, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0,
-        1, 0, 0, 0, 116, 225, 3, 0, 119, 119, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 11, 1, 0, 16,
-        17, 38, 62, 8, 102, 142, 8, 151, 159, 8, 0, 128, 226, 3, 0, 108, 226,
-        3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 218, 135, 0, 0, 0, 0, 0, 102, 226,
-        3, 0, 96, 226, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 226, 3, 0, 240, 226,
-        3, 0, 68, 226, 3, 0, 127, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 76, 226, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 1, 0, 0, 0, 116, 226, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 48,
-        50, 48, 45, 48, 49, 45, 51, 48, 32, 50, 49, 58, 51, 48, 58, 48, 56,
-        0, 0, 0, 255, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35,
-        110, 0, 0, 0, 255, 255, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
-        76, 77, 32, 68, 65, 84, 65, 0, 0, 12, 0, 2, 0, 57, 46, 49, 48, 46, 51,
-        57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 46, 50, 57, 46, 52, 0,
-        0, 0, 0, 136, 226, 3, 0, 132, 225, 3, 0, 67, 108, 109, 73, 109, 112,
-        111, 114, 116, 58, 32, 49, 46, 51, 54, 46, 51, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 66, 114, 111, 97, 100, 99, 111, 109, 45, 48, 46, 48,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 157, 136,
-        0, 3, 0, 0, 0, 8, 0, 188, 1, 100, 93, 136, 0, 0, 0, 0, 0, 8, 0, 4, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 110, 116, 114, 121, 0, 112,
-        104, 121, 99, 104, 52, 114, 112, 99, 97, 108, 0, 10, 82, 101, 103, 105,
-        115, 116, 101, 114, 101, 100, 32, 100, 117, 109, 112, 115, 58, 10, 0,
-        100, 117, 109, 112, 95, 105, 110, 102, 111, 0, 10, 37, 115, 58, 45,
-        45, 45, 45, 45, 45, 10, 0, 112, 99, 105, 101, 105, 110, 102, 111, 0,
-        110, 118, 114, 97, 109, 0, 110, 118, 114, 97, 109, 95, 100, 117, 109,
-        112, 0, 0, 0, 170, 222, 3, 0, 0, 0, 0, 64, 8, 0, 0, 0, 103, 227, 3,
-        0, 1, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
-        118, 101, 110, 116, 113, 0, 0, 88, 232, 135, 0, 21, 0, 0, 0, 109, 232,
-        135, 0, 23, 0, 0, 0, 0, 233, 135, 0, 26, 0, 0, 0, 26, 233, 135, 0, 27,
-        0, 0, 0, 192, 232, 135, 0, 14, 0, 0, 0, 206, 232, 135, 0, 50, 0, 0,
-        0, 206, 232, 135, 0, 50, 0, 0, 0, 139, 232, 135, 0, 51, 0, 0, 0, 139,
-        232, 135, 0, 51, 0, 0, 0, 139, 232, 135, 0, 51, 0, 0, 0, 191, 232, 135,
-        0, 1, 0, 0, 0, 132, 232, 135, 0, 7, 0, 0, 0, 190, 232, 135, 0, 1, 0,
-        0, 0, 105, 101, 109, 0, 0, 144, 76, 4, 104, 0, 144, 76, 51, 80, 0, 144,
-        76, 53, 88, 0, 144, 76, 54, 156, 0, 144, 76, 90, 200, 0, 80, 242, 1,
-        160, 0, 80, 242, 4, 164, 80, 111, 154, 16, 190, 80, 111, 154, 9, 192,
-        80, 111, 154, 18, 196, 0, 64, 150, 4, 170, 0, 64, 150, 8, 178, 0, 64,
-        150, 3, 174, 0, 64, 150, 1, 173, 80, 111, 154, 19, 197, 105, 101, 114,
-        0, 72, 105, 115, 116, 111, 114, 121, 32, 97, 110, 100, 32, 97, 118,
-        101, 114, 97, 103, 101, 32, 111, 102, 32, 108, 97, 116, 101, 115, 116,
-        32, 37, 100, 32, 82, 83, 83, 73, 32, 118, 97, 108, 117, 101, 115, 58,
-        10, 0, 65, 110, 116, 37, 100, 58, 32, 91, 0, 37, 51, 100, 32, 0, 97,
-        118, 103, 32, 91, 37, 52, 100, 93, 10, 0, 108, 113, 0, 110, 111, 105,
-        115, 101, 95, 108, 116, 101, 95, 114, 101, 115, 101, 116, 0, 114, 115,
-        115, 105, 95, 109, 111, 110, 105, 116, 111, 114, 0, 0, 166, 228, 3,
-        0, 3, 0, 0, 0, 6, 0, 0, 0, 71, 172, 136, 0, 0, 0, 0, 0, 8, 0, 12, 0,
-        182, 228, 3, 0, 26, 0, 0, 0, 8, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-        3, 0, 0, 0, 0, 0, 45, 0, 167, 144, 26, 0, 71, 9, 14, 0, 1, 32, 7, 0,
-        139, 147, 3, 0, 56, 202, 1, 0, 42, 229, 0, 0, 151, 114, 0, 0, 76, 57,
-        0, 0, 166, 28, 0, 0, 83, 14, 0, 0, 41, 7, 0, 0, 149, 3, 0, 0, 202, 1,
-        0, 0, 229, 0, 0, 0, 115, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 1, 0, 108,
-        9, 2, 0, 113, 9, 3, 0, 118, 9, 4, 0, 123, 9, 5, 0, 128, 9, 6, 0, 133,
-        9, 7, 0, 138, 9, 8, 0, 143, 9, 9, 0, 148, 9, 10, 0, 153, 9, 11, 0, 158,
-        9, 12, 0, 163, 9, 13, 0, 168, 9, 14, 0, 180, 9, 96, 48, 24, 12, 108,
-        72, 36, 18, 220, 236, 3, 0, 52, 1, 40, 0, 7, 0, 0, 0, 231, 236, 3, 0,
-        53, 1, 40, 0, 7, 0, 0, 0, 242, 236, 3, 0, 250, 1, 0, 0, 7, 0, 0, 0,
-        253, 236, 3, 0, 54, 1, 32, 0, 7, 0, 0, 0, 11, 237, 3, 0, 55, 1, 32,
-        0, 7, 0, 0, 0, 28, 237, 3, 0, 227, 1, 0, 4, 3, 0, 0, 0, 45, 237, 3,
-        0, 228, 1, 64, 4, 5, 0, 0, 0, 62, 237, 3, 0, 230, 1, 8, 0, 4, 0, 0,
-        0, 76, 237, 3, 0, 231, 1, 0, 0, 3, 0, 0, 0, 86, 237, 3, 0, 232, 1, 8,
-        0, 2, 0, 0, 0, 102, 237, 3, 0, 233, 1, 8, 0, 2, 0, 0, 0, 118, 237, 3,
-        0, 234, 1, 40, 0, 5, 0, 0, 0, 135, 237, 3, 0, 235, 1, 40, 0, 5, 0, 0,
-        0, 152, 237, 3, 0, 236, 1, 0, 0, 3, 0, 0, 0, 166, 237, 3, 0, 56, 1,
-        8, 48, 8, 0, 3, 0, 213, 237, 3, 0, 75, 1, 0, 16, 8, 0, 0, 32, 242, 237,
-        3, 0, 78, 1, 0, 16, 8, 0, 0, 32, 176, 237, 3, 0, 76, 1, 0, 0, 2, 0,
-        0, 0, 199, 237, 3, 0, 223, 1, 0, 0, 8, 0, 0, 32, 228, 237, 3, 0, 224,
-        1, 0, 0, 8, 0, 0, 32, 254, 237, 3, 0, 77, 1, 0, 0, 3, 0, 0, 0, 21, 238,
-        3, 0, 72, 1, 0, 24, 8, 0, 0, 32, 36, 238, 3, 0, 73, 1, 0, 24, 8, 0,
-        0, 0, 46, 238, 3, 0, 74, 1, 0, 24, 8, 0, 0, 0, 61, 238, 3, 0, 71, 1,
-        0, 0, 3, 0, 0, 0, 71, 238, 3, 0, 119, 1, 128, 0, 8, 0, 64, 0, 78, 238,
-        3, 0, 248, 1, 128, 0, 3, 0, 0, 0, 91, 238, 3, 0, 5, 2, 128, 0, 3, 0,
-        0, 0, 99, 238, 3, 0, 116, 1, 136, 0, 8, 0, 0, 0, 105, 238, 3, 0, 117,
-        1, 136, 0, 8, 0, 0, 0, 111, 238, 3, 0, 118, 1, 136, 0, 8, 0, 0, 0, 120,
-        238, 3, 0, 89, 1, 8, 0, 3, 0, 0, 0, 136, 238, 3, 0, 44, 1, 0, 0, 7,
-        0, 0, 0, 148, 238, 3, 0, 179, 1, 64, 0, 8, 0, 24, 0, 159, 238, 3, 0,
-        180, 1, 64, 0, 8, 0, 14, 0, 170, 238, 3, 0, 45, 1, 8, 0, 3, 0, 0, 0,
-        183, 238, 3, 0, 85, 1, 0, 4, 8, 0, 0, 0, 192, 238, 3, 0, 86, 1, 64,
-        4, 8, 0, 0, 0, 205, 238, 3, 0, 57, 1, 8, 0, 3, 0, 0, 0, 221, 238, 3,
-        0, 58, 1, 8, 0, 3, 0, 0, 0, 238, 238, 3, 0, 60, 1, 72, 0, 3, 0, 0, 0,
-        255, 238, 3, 0, 61, 1, 8, 0, 6, 0, 0, 0, 10, 239, 3, 0, 62, 1, 8, 4,
-        8, 0, 104, 0, 23, 239, 3, 0, 63, 1, 8, 0, 7, 0, 0, 0, 45, 239, 3, 0,
-        229, 1, 136, 0, 8, 0, 6, 0, 56, 239, 3, 0, 120, 1, 8, 0, 6, 0, 0, 0,
-        63, 239, 3, 0, 121, 1, 136, 0, 8, 0, 28, 0, 70, 239, 3, 0, 122, 1, 136,
-        0, 8, 0, 20, 0, 80, 239, 3, 0, 65, 1, 72, 4, 8, 0, 16, 0, 89, 239, 3,
-        0, 202, 1, 72, 0, 3, 0, 0, 0, 104, 239, 3, 0, 203, 1, 72, 0, 3, 0, 0,
-        0, 113, 239, 3, 0, 247, 1, 72, 0, 3, 0, 0, 0, 134, 239, 3, 0, 92, 1,
-        72, 0, 3, 0, 0, 0, 147, 239, 3, 0, 201, 1, 72, 0, 3, 0, 0, 0, 164, 239,
-        3, 0, 226, 1, 72, 0, 8, 0, 2, 0, 183, 239, 3, 0, 95, 1, 136, 0, 3, 0,
-        0, 0, 196, 239, 3, 0, 93, 1, 72, 0, 3, 0, 0, 0, 212, 239, 3, 0, 94,
-        1, 72, 0, 4, 0, 0, 0, 232, 239, 3, 0, 225, 1, 72, 0, 3, 0, 0, 0, 243,
-        239, 3, 0, 81, 1, 8, 0, 3, 0, 0, 0, 3, 240, 3, 0, 82, 1, 8, 0, 3, 0,
-        0, 0, 16, 240, 3, 0, 83, 1, 8, 0, 3, 0, 0, 0, 30, 240, 3, 0, 149, 1,
-        72, 0, 8, 0, 4, 0, 48, 240, 3, 0, 150, 1, 72, 0, 8, 0, 4, 0, 62, 240,
-        3, 0, 151, 1, 72, 0, 8, 0, 4, 0, 76, 240, 3, 0, 152, 1, 8, 4, 8, 0,
-        32, 0, 91, 240, 3, 0, 80, 1, 8, 0, 3, 0, 0, 0, 104, 240, 3, 0, 154,
-        1, 64, 4, 7, 0, 0, 0, 120, 240, 3, 0, 153, 1, 64, 4, 3, 0, 0, 0, 129,
-        240, 3, 0, 79, 1, 8, 0, 3, 0, 0, 0, 143, 240, 3, 0, 84, 1, 72, 4, 8,
-        0, 0, 0, 158, 240, 3, 0, 125, 1, 72, 4, 8, 0, 8, 0, 169, 240, 3, 0,
-        126, 1, 72, 4, 8, 0, 6, 0, 180, 240, 3, 0, 112, 1, 72, 0, 7, 0, 0, 0,
-        192, 240, 3, 0, 113, 1, 72, 0, 3, 0, 0, 0, 206, 240, 3, 0, 114, 1, 72,
-        0, 7, 0, 0, 0, 221, 240, 3, 0, 115, 1, 72, 0, 3, 0, 0, 0, 238, 240,
-        3, 0, 185, 1, 72, 4, 8, 0, 0, 0, 249, 240, 3, 0, 96, 1, 0, 0, 2, 0,
-        0, 0, 8, 241, 3, 0, 97, 1, 136, 2, 3, 0, 0, 0, 21, 241, 3, 0, 98, 1,
-        136, 2, 3, 0, 0, 0, 35, 241, 3, 0, 99, 1, 72, 4, 3, 0, 0, 0, 48, 241,
-        3, 0, 100, 1, 0, 4, 6, 0, 0, 0, 64, 241, 3, 0, 101, 1, 8, 0, 5, 0, 0,
-        0, 76, 241, 3, 0, 102, 1, 136, 0, 3, 0, 0, 0, 91, 241, 3, 0, 103, 1,
-        72, 0, 3, 0, 0, 0, 101, 241, 3, 0, 104, 1, 72, 0, 2, 0, 0, 0, 115, 241,
-        3, 0, 109, 1, 72, 4, 2, 0, 0, 0, 129, 241, 3, 0, 110, 1, 72, 4, 2, 0,
-        0, 0, 148, 241, 3, 0, 111, 1, 72, 4, 2, 0, 0, 0, 166, 241, 3, 0, 130,
-        1, 0, 4, 3, 0, 0, 0, 180, 241, 3, 0, 133, 1, 8, 4, 7, 0, 0, 0, 194,
-        241, 3, 0, 134, 1, 8, 4, 7, 0, 0, 0, 208, 241, 3, 0, 135, 1, 8, 4, 7,
-        0, 0, 0, 223, 241, 3, 0, 136, 1, 8, 4, 7, 0, 0, 0, 236, 241, 3, 0, 145,
-        1, 72, 0, 0, 0, 0, 0, 249, 241, 3, 0, 146, 1, 72, 0, 0, 0, 0, 0, 8,
-        242, 3, 0, 147, 1, 72, 0, 3, 0, 0, 0, 23, 242, 3, 0, 129, 1, 8, 4, 2,
-        0, 0, 0, 39, 242, 3, 0, 90, 1, 0, 0, 3, 0, 0, 0, 50, 242, 3, 0, 91,
-        1, 0, 0, 5, 0, 0, 0, 67, 242, 3, 0, 187, 1, 64, 0, 8, 0, 4, 0, 84, 242,
-        3, 0, 184, 1, 64, 0, 7, 0, 0, 0, 103, 242, 3, 0, 11, 2, 64, 4, 3, 0,
-        0, 0, 112, 242, 3, 0, 64, 1, 64, 0, 7, 0, 7, 0, 124, 242, 3, 0, 213,
-        1, 64, 4, 8, 0, 6, 0, 148, 242, 3, 0, 214, 1, 64, 4, 8, 0, 6, 0, 173,
-        242, 3, 0, 215, 1, 64, 4, 8, 0, 6, 0, 198, 242, 3, 0, 216, 1, 64, 4,
-        8, 0, 6, 0, 222, 242, 3, 0, 159, 1, 0, 4, 7, 0, 0, 0, 236, 242, 3, 0,
-        66, 1, 0, 0, 6, 0, 0, 0, 247, 242, 3, 0, 67, 1, 0, 0, 2, 0, 0, 0, 2,
-        243, 3, 0, 161, 1, 0, 0, 2, 0, 0, 0, 74, 217, 3, 0, 69, 1, 0, 0, 7,
-        0, 0, 0, 15, 243, 3, 0, 244, 1, 64, 4, 3, 0, 0, 0, 38, 243, 3, 0, 245,
-        1, 64, 4, 3, 0, 0, 0, 61, 243, 3, 0, 70, 1, 0, 0, 7, 0, 0, 0, 77, 243,
-        3, 0, 107, 1, 0, 4, 4, 0, 0, 0, 91, 243, 3, 0, 105, 1, 0, 0, 2, 0, 0,
-        0, 106, 243, 3, 0, 106, 1, 0, 0, 4, 0, 0, 0, 121, 243, 3, 0, 172, 1,
-        0, 0, 5, 0, 0, 0, 144, 243, 3, 0, 173, 1, 0, 0, 3, 0, 0, 0, 164, 243,
-        3, 0, 108, 1, 0, 4, 6, 0, 0, 0, 178, 243, 3, 0, 167, 1, 0, 4, 6, 0,
-        0, 0, 194, 243, 3, 0, 168, 1, 0, 4, 6, 0, 0, 0, 213, 243, 3, 0, 169,
-        1, 0, 4, 6, 0, 0, 0, 230, 243, 3, 0, 170, 1, 0, 4, 6, 0, 0, 0, 248,
-        243, 3, 0, 171, 1, 64, 0, 3, 0, 0, 0, 9, 244, 3, 0, 177, 1, 0, 4, 6,
-        0, 0, 0, 27, 244, 3, 0, 178, 1, 0, 4, 6, 0, 0, 0, 45, 244, 3, 0, 127,
-        1, 8, 0, 3, 0, 0, 0, 62, 244, 3, 0, 40, 0, 8, 0, 3, 0, 0, 0, 79, 244,
-        3, 0, 186, 1, 8, 0, 3, 0, 0, 0, 86, 244, 3, 0, 41, 0, 0, 0, 3, 0, 0,
-        0, 99, 244, 3, 0, 166, 1, 0, 0, 2, 0, 0, 0, 111, 244, 3, 0, 67, 1, 0,
-        0, 2, 0, 0, 0, 123, 244, 3, 0, 190, 1, 136, 0, 8, 0, 18, 0, 233, 144,
-        136, 0, 191, 1, 64, 0, 7, 0, 0, 0, 131, 244, 3, 0, 192, 1, 64, 0, 7,
-        0, 0, 0, 140, 244, 3, 0, 193, 1, 64, 4, 6, 0, 0, 0, 154, 244, 3, 0,
-        237, 1, 0, 0, 2, 0, 0, 0, 170, 244, 3, 0, 138, 1, 72, 4, 4, 0, 0, 0,
-        188, 244, 3, 0, 139, 1, 72, 4, 4, 0, 0, 0, 197, 244, 3, 0, 140, 1, 72,
-        4, 4, 0, 0, 0, 210, 244, 3, 0, 141, 1, 72, 4, 4, 0, 0, 0, 225, 244,
-        3, 0, 142, 1, 72, 4, 4, 0, 0, 0, 239, 244, 3, 0, 143, 1, 72, 4, 4, 0,
-        0, 0, 248, 244, 3, 0, 144, 1, 72, 4, 4, 0, 0, 0, 9, 245, 3, 0, 241,
-        1, 64, 0, 2, 0, 0, 0, 31, 245, 3, 0, 242, 1, 64, 0, 2, 0, 0, 0, 53,
-        245, 3, 0, 243, 1, 0, 0, 4, 0, 0, 0, 70, 245, 3, 0, 249, 1, 0, 0, 2,
-        0, 0, 0, 90, 245, 3, 0, 0, 2, 72, 4, 8, 0, 8, 0, 104, 245, 3, 0, 14,
-        2, 8, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 104, 121,
-        0, 102, 97, 115, 116, 95, 116, 105, 109, 101, 114, 0, 115, 108, 111,
-        119, 95, 116, 105, 109, 101, 114, 0, 99, 97, 108, 95, 112, 101, 114,
-        105, 111, 100, 0, 103, 108, 97, 99, 105, 97, 108, 95, 116, 105, 109,
-        101, 114, 0, 110, 111, 105, 115, 101, 95, 109, 101, 97, 115, 95, 116,
-        105, 109, 101, 114, 0, 112, 107, 116, 101, 110, 103, 95, 103, 97, 105,
-        110, 105, 110, 100, 101, 120, 0, 112, 104, 121, 95, 114, 120, 95, 103,
-        97, 105, 110, 105, 110, 100, 101, 120, 0, 104, 105, 114, 115, 115, 105,
-        95, 112, 101, 114, 105, 111, 100, 0, 104, 105, 114, 115, 115, 105, 95,
-        101, 110, 0, 104, 105, 114, 115, 115, 105, 95, 98, 121, 112, 95, 114,
-        115, 115, 105, 0, 104, 105, 114, 115, 115, 105, 95, 114, 101, 115, 95,
-        114, 115, 115, 105, 0, 104, 105, 114, 115, 115, 105, 95, 98, 121, 112,
-        95, 119, 49, 99, 110, 116, 0, 104, 105, 114, 115, 115, 105, 95, 114,
-        101, 115, 95, 119, 49, 99, 110, 116, 0, 104, 105, 114, 115, 115, 105,
-        95, 115, 116, 97, 116, 117, 115, 0, 116, 120, 105, 110, 115, 116, 112,
-        119, 114, 0, 115, 97, 109, 112, 108, 101, 95, 99, 111, 108, 108, 101,
-        99, 116, 95, 103, 97, 105, 110, 97, 100, 106, 0, 109, 97, 99, 95, 116,
-        114, 105, 103, 103, 101, 114, 101, 100, 95, 115, 97, 109, 112, 108,
-        101, 95, 99, 111, 108, 108, 101, 99, 116, 0, 109, 97, 99, 95, 116, 114,
-        105, 103, 103, 101, 114, 101, 100, 95, 115, 97, 109, 112, 108, 101,
-        95, 100, 97, 116, 97, 0, 115, 97, 109, 112, 108, 101, 95, 99, 111, 108,
-        108, 101, 99, 116, 95, 103, 97, 105, 110, 105, 100, 120, 0, 105, 113,
-        95, 109, 101, 116, 114, 105, 99, 95, 100, 97, 116, 97, 0, 105, 113,
-        95, 109, 101, 116, 114, 105, 99, 0, 105, 113, 95, 109, 101, 116, 114,
-        105, 99, 95, 112, 97, 115, 115, 0, 112, 104, 121, 95, 109, 117, 116,
-        101, 100, 0, 112, 97, 118, 97, 114, 115, 0, 112, 97, 112, 97, 114, 97,
-        109, 98, 119, 118, 101, 114, 0, 115, 114, 111, 109, 114, 101, 118, 0,
-        102, 101, 109, 50, 103, 0, 102, 101, 109, 53, 103, 0, 109, 97, 120,
-        112, 111, 119, 101, 114, 0, 112, 104, 121, 95, 99, 97, 108, 95, 100,
-        105, 115, 97, 98, 108, 101, 0, 112, 104, 121, 109, 115, 103, 108, 101,
-        118, 101, 108, 0, 112, 104, 121, 95, 99, 103, 97, 95, 53, 103, 0, 112,
-        104, 121, 95, 99, 103, 97, 95, 50, 103, 0, 112, 104, 121, 95, 119, 97,
-        116, 99, 104, 100, 111, 103, 0, 112, 104, 121, 95, 116, 115, 115, 105,
-        0, 112, 104, 121, 95, 105, 100, 108, 101, 116, 115, 115, 105, 0, 112,
-        104, 121, 95, 102, 105, 120, 101, 100, 95, 110, 111, 105, 115, 101,
-        0, 112, 104, 121, 110, 111, 105, 115, 101, 95, 112, 111, 108, 108, 105,
-        110, 103, 0, 99, 97, 114, 114, 105, 101, 114, 95, 115, 117, 112, 112,
-        114, 101, 115, 115, 0, 117, 110, 109, 111, 100, 95, 114, 115, 115, 105,
-        0, 112, 107, 116, 101, 110, 103, 95, 115, 116, 97, 116, 115, 0, 97,
-        99, 105, 95, 101, 120, 105, 116, 95, 99, 104, 101, 99, 107, 95, 112,
-        101, 114, 105, 111, 100, 0, 112, 104, 121, 95, 97, 117, 120, 112, 103,
-        97, 0, 112, 97, 116, 114, 105, 109, 0, 112, 111, 118, 97, 114, 115,
-        0, 114, 112, 99, 97, 108, 118, 97, 114, 115, 0, 112, 104, 121, 116,
-        97, 98, 108, 101, 0, 112, 104, 121, 95, 100, 121, 110, 97, 109, 105,
-        99, 95, 109, 108, 0, 97, 99, 105, 95, 110, 97, 109, 115, 0, 112, 104,
-        121, 95, 114, 102, 95, 115, 119, 99, 116, 114, 108, 95, 116, 111, 103,
-        103, 108, 101, 0, 112, 104, 121, 95, 102, 111, 114, 99, 101, 99, 97,
-        108, 0, 112, 104, 121, 95, 102, 111, 114, 99, 101, 99, 97, 108, 95,
-        111, 98, 116, 0, 112, 104, 121, 95, 102, 111, 114, 99, 101, 99, 97,
-        108, 95, 110, 111, 105, 115, 101, 0, 112, 104, 121, 95, 115, 107, 105,
-        112, 112, 97, 112, 100, 0, 112, 104, 121, 95, 112, 97, 112, 100, 95,
-        101, 110, 95, 119, 97, 114, 0, 112, 104, 121, 95, 112, 97, 112, 100,
-        95, 101, 112, 115, 95, 111, 102, 102, 115, 101, 116, 0, 112, 104, 121,
-        95, 118, 99, 111, 99, 97, 108, 0, 112, 104, 121, 95, 103, 108, 105,
-        116, 99, 104, 116, 104, 114, 115, 104, 0, 112, 104, 121, 95, 110, 111,
-        105, 115, 101, 95, 117, 112, 0, 112, 104, 121, 95, 110, 111, 105, 115,
-        101, 95, 100, 119, 110, 0, 116, 115, 115, 105, 99, 97, 108, 95, 115,
-        116, 97, 114, 116, 95, 105, 100, 120, 0, 116, 115, 115, 105, 99, 97,
-        108, 95, 115, 116, 97, 114, 116, 0, 116, 115, 115, 105, 99, 97, 108,
-        95, 112, 111, 119, 101, 114, 0, 116, 115, 115, 105, 99, 97, 108, 95,
-        112, 97, 114, 97, 109, 115, 0, 112, 104, 121, 95, 114, 101, 115, 101,
-        116, 99, 99, 97, 0, 116, 115, 115, 105, 99, 97, 108, 95, 116, 120, 100,
-        101, 108, 97, 121, 0, 112, 104, 121, 95, 100, 101, 97, 102, 0, 112,
-        104, 121, 95, 116, 120, 112, 119, 114, 99, 116, 114, 108, 0, 112, 104,
-        121, 95, 116, 120, 112, 119, 114, 105, 110, 100, 101, 120, 0, 112, 104,
-        121, 95, 116, 120, 105, 113, 99, 99, 0, 112, 104, 121, 95, 116, 120,
-        108, 111, 99, 99, 0, 112, 104, 121, 95, 116, 120, 95, 116, 111, 110,
-        101, 0, 112, 104, 121, 95, 116, 120, 108, 111, 95, 116, 111, 110, 101,
-        0, 112, 104, 121, 95, 116, 120, 95, 116, 111, 110, 101, 95, 104, 122,
-        0, 112, 104, 121, 95, 116, 120, 95, 116, 111, 110, 101, 95, 115, 116,
-        111, 112, 0, 112, 104, 121, 95, 98, 98, 109, 117, 108, 116, 0, 112,
-        104, 121, 95, 116, 120, 114, 120, 95, 99, 104, 97, 105, 110, 0, 112,
-        104, 121, 95, 98, 112, 104, 121, 95, 101, 118, 109, 0, 112, 104, 121,
-        95, 98, 112, 104, 121, 95, 114, 102, 99, 115, 0, 112, 104, 121, 95,
-        101, 110, 114, 120, 99, 111, 114, 101, 0, 112, 104, 121, 95, 101, 115,
-        116, 95, 116, 111, 110, 101, 112, 119, 114, 0, 112, 104, 121, 95, 103,
-        112, 105, 111, 115, 101, 108, 0, 112, 104, 121, 95, 53, 103, 95, 112,
-        119, 114, 103, 97, 105, 110, 0, 112, 104, 121, 95, 114, 102, 115, 101,
-        113, 0, 112, 104, 121, 95, 115, 99, 114, 97, 109, 105, 110, 105, 116,
-        0, 112, 104, 121, 95, 116, 101, 115, 116, 95, 116, 115, 115, 105, 0,
-        112, 104, 121, 95, 116, 101, 115, 116, 95, 116, 115, 115, 105, 95, 111,
-        102, 102, 115, 0, 112, 104, 121, 95, 116, 101, 115, 116, 95, 105, 100,
-        108, 101, 116, 115, 115, 105, 0, 112, 104, 121, 95, 97, 99, 116, 105,
-        118, 101, 99, 97, 108, 0, 112, 104, 121, 95, 112, 97, 99, 97, 108, 105,
-        100, 120, 48, 0, 112, 104, 121, 95, 112, 97, 99, 97, 108, 105, 100,
-        120, 49, 0, 112, 104, 121, 95, 105, 113, 108, 111, 99, 97, 108, 105,
-        100, 120, 0, 112, 104, 121, 95, 112, 97, 99, 97, 108, 105, 100, 120,
-        0, 112, 104, 121, 95, 115, 101, 116, 114, 112, 116, 98, 108, 0, 112,
-        104, 121, 95, 102, 111, 114, 99, 101, 105, 109, 112, 98, 102, 0, 112,
-        104, 121, 95, 102, 111, 114, 99, 101, 115, 116, 101, 101, 114, 0, 112,
-        104, 121, 95, 112, 97, 99, 97, 108, 115, 116, 97, 116, 117, 115, 0,
-        112, 104, 121, 95, 112, 101, 114, 99, 97, 108, 0, 112, 104, 121, 95,
-        112, 101, 114, 99, 97, 108, 95, 100, 101, 108, 97, 121, 0, 112, 104,
-        121, 95, 102, 111, 114, 99, 101, 95, 99, 114, 115, 109, 105, 110, 0,
-        112, 104, 121, 95, 102, 111, 114, 99, 101, 95, 115, 112, 117, 114, 109,
-        111, 100, 101, 0, 120, 116, 97, 108, 95, 108, 100, 111, 0, 112, 104,
-        121, 95, 114, 120, 105, 113, 101, 115, 116, 0, 112, 104, 121, 95, 114,
-        115, 115, 105, 95, 103, 97, 105, 110, 95, 100, 101, 108, 116, 97, 95,
-        53, 103, 108, 0, 112, 104, 121, 95, 114, 115, 115, 105, 95, 103, 97,
-        105, 110, 95, 100, 101, 108, 116, 97, 95, 53, 103, 109, 108, 0, 112,
-        104, 121, 95, 114, 115, 115, 105, 95, 103, 97, 105, 110, 95, 100, 101,
-        108, 116, 97, 95, 53, 103, 109, 117, 0, 112, 104, 121, 95, 114, 115,
-        115, 105, 95, 103, 97, 105, 110, 95, 100, 101, 108, 116, 97, 95, 53,
-        103, 104, 0, 112, 104, 121, 110, 111, 105, 115, 101, 95, 115, 114, 111,
-        109, 0, 110, 117, 109, 95, 115, 116, 114, 101, 97, 109, 0, 98, 97, 110,
-        100, 95, 114, 97, 110, 103, 101, 0, 115, 117, 98, 98, 97, 110, 100,
-        53, 103, 118, 101, 114, 0, 97, 110, 116, 95, 100, 105, 118, 101, 114,
-        115, 105, 116, 121, 95, 115, 119, 95, 99, 111, 114, 101, 48, 0, 97,
-        110, 116, 95, 100, 105, 118, 101, 114, 115, 105, 116, 121, 95, 115,
-        119, 95, 99, 111, 114, 101, 49, 0, 116, 115, 115, 105, 118, 105, 115,
-        105, 95, 116, 104, 114, 101, 115, 104, 0, 112, 104, 121, 95, 116, 101,
-        109, 112, 115, 101, 110, 115, 101, 0, 112, 104, 121, 95, 116, 101, 109,
-        112, 111, 102, 102, 115, 101, 116, 0, 112, 104, 121, 95, 116, 101, 109,
-        112, 116, 104, 114, 101, 115, 104, 0, 112, 104, 121, 95, 116, 101, 109,
-        112, 115, 101, 110, 115, 101, 95, 111, 118, 101, 114, 114, 105, 100,
-        101, 0, 112, 104, 121, 95, 116, 101, 109, 112, 95, 104, 121, 115, 116,
-        101, 114, 101, 115, 105, 115, 0, 112, 104, 121, 95, 118, 98, 97, 116,
-        115, 101, 110, 115, 101, 0, 108, 99, 110, 112, 104, 121, 95, 114, 120,
-        105, 113, 103, 97, 105, 110, 0, 108, 99, 110, 112, 104, 121, 95, 114,
-        120, 105, 113, 103, 115, 112, 111, 119, 101, 114, 0, 108, 99, 110, 112,
-        104, 121, 95, 114, 120, 105, 113, 112, 111, 119, 101, 114, 0, 108, 99,
-        110, 112, 104, 121, 95, 114, 120, 105, 113, 115, 116, 97, 116, 117,
-        115, 0, 108, 99, 110, 112, 104, 121, 95, 114, 120, 105, 113, 115, 116,
-        101, 112, 115, 0, 108, 99, 110, 112, 104, 121, 95, 116, 115, 115, 105,
-        109, 97, 120, 112, 119, 114, 0, 108, 99, 110, 112, 104, 121, 95, 116,
-        115, 115, 105, 109, 105, 110, 112, 119, 114, 0, 112, 104, 121, 99, 97,
-        108, 95, 116, 101, 109, 112, 100, 101, 108, 116, 97, 0, 112, 104, 121,
-        95, 111, 99, 108, 115, 99, 100, 101, 110, 97, 98, 108, 101, 0, 108,
-        110, 108, 100, 111, 50, 0, 112, 104, 121, 95, 114, 120, 97, 110, 116,
-        115, 101, 108, 0, 112, 104, 121, 95, 99, 114, 115, 95, 119, 97, 114,
-        0, 115, 117, 98, 98, 97, 110, 100, 95, 105, 100, 120, 0, 112, 97, 118,
-        97, 114, 115, 50, 0, 112, 104, 121, 95, 100, 115, 115, 102, 0, 112,
-        104, 121, 95, 101, 100, 95, 116, 104, 114, 101, 115, 104, 0, 112, 104,
-        121, 95, 116, 120, 115, 119, 99, 116, 114, 108, 109, 97, 112, 0, 112,
-        104, 121, 95, 115, 114, 111, 109, 116, 101, 109, 112, 115, 101, 110,
-        115, 101, 0, 114, 120, 103, 95, 114, 115, 115, 105, 0, 114, 115, 115,
-        105, 95, 99, 97, 108, 95, 114, 101, 118, 0, 114, 117, 100, 95, 97, 103,
-        99, 95, 101, 110, 97, 98, 108, 101, 0, 103, 97, 105, 110, 95, 99, 97,
-        108, 95, 116, 101, 109, 112, 0, 105, 110, 116, 95, 111, 118, 114, 50,
-        0, 116, 101, 109, 112, 95, 99, 111, 109, 112, 95, 116, 114, 108, 111,
-        115, 115, 0, 112, 104, 121, 95, 101, 110, 97, 98, 108, 101, 95, 101,
-        112, 97, 95, 100, 112, 100, 95, 50, 103, 0, 112, 104, 121, 95, 101,
-        110, 97, 98, 108, 101, 95, 101, 112, 97, 95, 100, 112, 100, 95, 53,
-        103, 0, 112, 104, 121, 95, 101, 112, 97, 99, 97, 108, 50, 103, 109,
-        97, 115, 107, 0, 112, 104, 121, 95, 111, 99, 108, 95, 102, 111, 114,
-        99, 101, 95, 99, 111, 114, 101, 48, 0, 112, 104, 121, 95, 115, 119,
-        99, 116, 114, 108, 109, 97, 112, 0, 112, 104, 121, 95, 103, 101, 116,
-        95, 97, 110, 116, 0, 164, 4, 247, 5, 74, 7, 158, 8, 241, 9, 241, 9,
-        164, 4, 164, 4, 164, 4, 164, 4, 164, 4, 164, 4, 164, 4, 164, 4, 164,
-        4, 228, 12, 146, 16, 65, 20, 240, 23, 159, 27, 159, 27, 228, 12, 228,
-        12, 228, 12, 228, 12, 228, 12, 228, 12, 228, 12, 228, 12, 228, 12, 187,
-        62, 187, 62, 187, 62, 142, 67, 97, 72, 97, 72, 154, 38, 184, 7, 166,
-        9, 16, 12, 113, 15, 77, 19, 32, 24, 226, 30, 65, 48, 24, 94, 24, 94,
-        85, 101, 12, 123, 195, 144, 195, 144, 231, 57, 148, 11, 121, 14, 24,
-        18, 41, 23, 243, 28, 48, 36, 83, 46, 97, 72, 207, 115, 118, 125, 29,
-        135, 17, 164, 4, 193, 4, 193, 53, 77, 121, 14, 77, 19, 32, 24, 243,
-        28, 154, 38, 65, 48, 231, 57, 130, 96, 173, 128, 140, 141, 106, 154,
-        72, 167, 38, 180, 4, 193, 53, 77, 21, 16, 77, 19, 188, 25, 43, 32, 154,
-        38, 120, 51, 86, 64, 241, 102, 226, 3, 203, 10, 65, 48, 97, 72, 62,
-        68, 253, 90, 90, 7, 130, 7, 74, 7, 216, 6, 70, 6, 251, 4, 168, 11, 108,
-        58, 104, 46, 220, 36, 71, 29, 66, 23, 121, 18, 172, 14, 66, 9, 110,
-        20, 221, 20, 65, 20, 4, 19, 109, 17, 216, 13, 97, 32, 72, 162, 232,
-        128, 100, 102, 85, 81, 155, 64, 81, 51, 195, 40, 184, 25, 40, 97, 45,
-        77, 77, 61, 112, 52, 161, 44, 115, 35, 194, 94, 252, 94, 80, 94, 164,
-        93, 54, 95, 137, 94, 221, 93, 112, 95, 22, 94, 189, 145, 195, 115, 7,
-        99, 132, 95, 66, 89, 231, 70, 36, 142, 122, 142, 120, 141, 119, 140,
-        209, 142, 206, 141, 204, 140, 40, 143, 34, 141, 72, 173, 28, 149, 142,
-        127, 8, 123, 249, 114, 83, 91, 22, 183, 13, 172, 56, 182, 238, 180,
-        118, 172, 167, 182, 92, 181, 222, 172, 202, 181, 136, 192, 58, 168,
-        199, 145, 113, 125, 79, 107, 83, 91, 22, 183, 43, 191, 56, 182, 254,
-        192, 159, 191, 167, 182, 115, 193, 20, 192, 232, 193, 255, 255, 255,
-        255, 192, 255, 255, 255, 183, 181, 151, 96, 229, 0, 0, 0, 0, 0, 20,
-        29, 40, 52, 52, 52, 0, 29, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 0,
-        32, 0, 0, 0, 0, 0, 64, 64, 64, 64, 91, 108, 0, 128, 244, 9, 0, 128,
-        0, 128, 244, 9, 0, 56, 0, 32, 244, 9, 255, 3, 55, 0, 153, 4, 255, 3,
-        120, 0, 159, 4, 0, 192, 0, 64, 159, 4, 255, 3, 144, 1, 215, 4, 8, 0,
-        8, 0, 215, 4, 0, 112, 0, 32, 172, 9, 60, 0, 20, 0, 248, 9, 4, 0, 4,
-        0, 218, 6, 0, 128, 0, 128, 211, 6, 0, 128, 0, 128, 211, 6, 0, 128, 0,
-        0, 218, 6, 0, 128, 0, 0, 24, 0, 48, 0, 96, 0, 96, 0, 128, 0, 128, 0,
-        216, 4, 1, 0, 0, 0, 216, 4, 2, 0, 0, 0, 215, 4, 8, 0, 0, 0, 249, 5,
-        217, 5, 6, 6, 107, 6, 1, 7, 209, 8, 197, 3, 192, 0, 242, 0, 49, 1, 128,
-        1, 227, 1, 97, 2, 254, 2, 191, 4, 153, 16, 64, 16, 189, 16, 213, 17,
-        117, 19, 126, 24, 121, 10, 22, 2, 161, 2, 79, 3, 43, 4, 63, 5, 155,
-        6, 81, 8, 47, 13, 247, 23, 43, 30, 251, 37, 103, 44, 44, 52, 174, 65,
-        146, 24, 131, 24, 176, 24, 221, 24, 116, 24, 161, 24, 206, 24, 101,
-        24, 191, 24, 242, 35, 65, 45, 231, 52, 217, 54, 177, 58, 228, 73, 219,
-        36, 197, 36, 8, 37, 76, 37, 175, 36, 242, 36, 53, 37, 152, 36, 31, 37,
-        192, 53, 118, 62, 5, 73, 180, 75, 2, 81, 252, 101, 223, 50, 34, 54,
-        29, 51, 122, 51, 1, 54, 254, 50, 91, 51, 225, 53, 60, 51, 0, 86, 109,
-        98, 150, 113, 255, 131, 78, 154, 79, 181, 112, 90, 157, 86, 222, 90,
-        204, 85, 105, 86, 167, 90, 152, 85, 52, 86, 100, 85, 0, 1, 2, 3, 4,
-        5, 254, 247, 248, 249, 250, 251, 252, 253, 255, 0, 0, 74, 0, 0, 64,
-        4, 1, 0, 0, 0, 74, 100, 68, 0, 74, 68, 128, 0, 0, 74, 255, 0, 64, 4,
-        1, 0, 1, 0, 62, 0, 172, 0, 4, 3, 134, 4, 8, 6, 10, 8, 13, 4, 255, 3,
-        64, 0, 13, 4, 0, 112, 0, 64, 162, 4, 255, 3, 64, 0, 162, 4, 0, 112,
-        0, 64, 12, 5, 255, 1, 0, 0, 248, 9, 4, 0, 4, 0, 218, 6, 64, 0, 64, 0,
-        116, 5, 0, 32, 0, 32, 117, 5, 0, 2, 0, 2, 208, 71, 0, 0, 209, 71, 0,
-        0, 210, 71, 0, 0, 211, 71, 0, 0, 212, 71, 0, 0, 213, 71, 0, 0, 214,
-        71, 0, 0, 215, 71, 0, 0, 216, 71, 0, 0, 217, 71, 0, 0, 218, 71, 0, 0,
-        219, 71, 0, 0, 220, 71, 0, 0, 221, 71, 0, 0, 222, 71, 0, 0, 224, 71,
-        0, 0, 225, 71, 0, 0, 226, 71, 0, 0, 227, 71, 0, 0, 228, 71, 0, 0, 229,
-        71, 0, 0, 230, 71, 0, 0, 232, 71, 0, 0, 233, 71, 0, 0, 234, 71, 0, 0,
-        235, 71, 0, 0, 236, 71, 0, 0, 237, 71, 0, 0, 164, 4, 0, 64, 0, 0, 164,
-        4, 0, 128, 0, 128, 208, 4, 32, 0, 0, 0, 164, 4, 255, 1, 0, 0, 164, 4,
-        0, 4, 0, 4, 165, 4, 255, 3, 44, 1, 165, 4, 0, 224, 0, 160, 165, 4, 0,
-        28, 0, 0, 13, 4, 255, 3, 64, 0, 13, 4, 0, 112, 0, 64, 162, 4, 255, 3,
-        64, 0, 162, 4, 0, 112, 0, 64, 168, 4, 255, 0, 1, 0, 208, 4, 192, 127,
-        0, 0, 12, 5, 255, 1, 0, 0, 166, 4, 0, 128, 0, 128, 166, 4, 255, 1, 255,
-        0, 154, 4, 255, 1, 255, 0, 208, 4, 2, 0, 0, 0, 210, 4, 255, 0, 0, 0,
-        210, 4, 0, 255, 0, 0, 208, 4, 8, 0, 0, 0, 217, 4, 1, 0, 1, 0, 217, 4,
-        2, 0, 0, 0, 69, 112, 115, 105, 108, 111, 110, 32, 111, 102, 102, 115,
-        101, 116, 58, 32, 68, 82, 86, 32, 61, 32, 37, 100, 44, 32, 82, 69, 71,
-        32, 61, 32, 37, 100, 32, 101, 112, 115, 105, 108, 111, 110, 83, 99,
-        97, 108, 97, 114, 61, 37, 100, 32, 114, 101, 103, 86, 97, 108, 61, 37,
-        100, 10, 0, 0, 214, 70, 1, 0, 218, 6, 8, 0, 0, 0, 218, 6, 128, 0, 0,
-        0, 218, 6, 0, 128, 0, 0, 3, 0, 4, 0, 6, 0, 9, 0, 13, 0, 18, 0, 25, 0,
-        25, 1, 25, 2, 25, 3, 25, 4, 25, 5, 25, 6, 25, 7, 35, 7, 50, 7, 71, 7,
-        100, 7, 252, 0, 2, 0, 252, 0, 1, 0, 252, 0, 0, 0, 253, 0, 0, 0, 254,
-        0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0,
-        0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9,
-        0, 0, 0, 0, 251, 227, 101, 0, 5, 174, 101, 0, 73, 120, 101, 0, 197,
-        66, 101, 0, 121, 13, 101, 0, 102, 216, 100, 0, 138, 163, 100, 0, 229,
-        110, 100, 0, 119, 58, 100, 0, 64, 6, 100, 0, 64, 210, 99, 0, 117, 158,
-        99, 0, 224, 106, 99, 0, 236, 239, 98, 0, 3, 0, 4, 0, 6, 0, 9, 0, 13,
-        0, 18, 0, 25, 0, 35, 0, 50, 0, 71, 0, 100, 0, 100, 1, 100, 2, 100, 3,
-        100, 4, 100, 5, 100, 6, 100, 7, 217, 4, 4, 0, 0, 0, 217, 4, 8, 0, 8,
-        0, 217, 4, 4, 0, 4, 0, 217, 4, 8, 0, 0, 0, 217, 4, 2, 0, 2, 0, 215,
-        4, 1, 0, 1, 0, 215, 4, 64, 0, 0, 0, 0, 1, 4, 0, 0, 0, 3, 0, 0, 1, 3,
-        0, 0, 2, 3, 0, 0, 3, 3, 0, 0, 4, 3, 0, 0, 5, 3, 0, 0, 6, 3, 0, 0, 7,
-        3, 0, 0, 8, 3, 0, 0, 9, 3, 0, 0, 10, 3, 0, 0, 10, 3, 1, 0, 10, 3, 2,
-        0, 10, 3, 3, 0, 10, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 0, 128,
-        0, 90, 0, 64, 0, 45, 0, 32, 0, 0, 0, 0, 0, 0, 1, 181, 0, 128, 0, 91,
-        0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 128, 0, 31, 8, 224,
-        23, 255, 127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 6, 0, 240, 0, 128, 218, 10,
-        0, 64, 0, 64, 0, 1, 0, 1, 1, 0, 0, 1, 208, 4, 1, 0, 0, 0, 211, 4, 255,
-        0, 0, 0, 211, 4, 0, 255, 0, 0, 208, 4, 16, 0, 0, 0, 208, 4, 4, 0, 0,
-        0, 64, 4, 1, 0, 0, 0, 74, 68, 79, 0, 58, 68, 0, 0, 117, 69, 0, 0, 76,
-        68, 0, 0, 176, 68, 0, 0, 249, 68, 0, 0, 56, 73, 0, 0, 61, 69, 0, 0,
-        113, 69, 0, 0, 115, 69, 0, 0, 78, 68, 0, 0, 52, 5, 255, 0, 18, 0, 228,
-        4, 0, 255, 0, 6, 77, 4, 0, 2, 0, 0, 76, 4, 0, 2, 0, 2, 54, 5, 16, 0,
-        16, 0, 64, 4, 1, 0, 1, 0, 74, 68, 0, 0, 0, 0, 108, 253, 3, 0, 26, 0,
-        0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 176, 2, 4, 0, 96, 0, 0, 0,
-        18, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 168, 0, 4, 0, 76, 0, 0, 0, 13,
-        0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-        1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-        1, 1, 1, 2, 3, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 125, 100, 12, 10, 125, 123,
-        1, 7, 13, 19, 25, 0, 127, 126, 125, 123, 121, 119, 117, 115, 112, 109,
-        107, 112, 109, 107, 26, 0, 52, 0, 78, 0, 104, 0, 156, 0, 208, 0, 234,
-        0, 4, 1, 52, 0, 104, 0, 156, 0, 208, 0, 56, 1, 160, 1, 212, 1, 8, 2,
-        78, 0, 156, 0, 234, 0, 56, 1, 212, 1, 112, 2, 190, 2, 12, 3, 104, 0,
-        208, 0, 56, 1, 160, 1, 112, 2, 64, 3, 168, 3, 16, 4, 24, 0, 156, 0,
-        208, 0, 4, 1, 234, 0, 56, 1, 134, 1, 208, 0, 4, 1, 4, 1, 56, 1, 108,
-        1, 108, 1, 160, 1, 56, 1, 134, 1, 134, 1, 212, 1, 34, 2, 34, 2, 112,
-        2, 4, 1, 56, 1, 108, 1, 56, 1, 108, 1, 160, 1, 212, 1, 160, 1, 212,
-        1, 8, 2, 8, 2, 60, 2, 134, 1, 212, 1, 34, 2, 212, 1, 34, 2, 112, 2,
-        190, 2, 112, 2, 190, 2, 12, 3, 12, 3, 90, 3, 54, 0, 108, 0, 162, 0,
-        216, 0, 68, 1, 176, 1, 230, 1, 28, 2, 108, 0, 216, 0, 68, 1, 176, 1,
-        136, 2, 96, 3, 204, 3, 56, 4, 162, 0, 68, 1, 230, 1, 136, 2, 204, 3,
-        16, 5, 178, 5, 84, 6, 216, 0, 176, 1, 136, 2, 96, 3, 16, 5, 192, 6,
-        152, 7, 112, 8, 24, 0, 68, 1, 176, 1, 28, 2, 230, 1, 136, 2, 42, 3,
-        176, 1, 28, 2, 28, 2, 136, 2, 244, 2, 244, 2, 96, 3, 136, 2, 42, 3,
-        42, 3, 204, 3, 110, 4, 110, 4, 16, 5, 28, 2, 136, 2, 244, 2, 136, 2,
-        244, 2, 96, 3, 204, 3, 96, 3, 204, 3, 56, 4, 56, 4, 164, 4, 42, 3, 204,
-        3, 110, 4, 204, 3, 110, 4, 16, 5, 178, 5, 16, 5, 178, 5, 84, 6, 84,
-        6, 246, 6, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183,
-        1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183,
-        1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183,
-        1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183,
-        1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183,
-        1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183,
-        1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183,
-        1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183,
-        1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183,
-        1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183,
-        1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183,
-        1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183,
-        1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183,
-        1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183, 1, 183,
-        1, 183, 1, 183, 1, 183, 1, 0, 0, 186, 254, 3, 0, 128, 0, 0, 0, 2, 0,
-        0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 40, 0, 4, 0, 64, 0, 0, 0, 1, 0, 0, 0,
-        0, 0, 0, 0, 16, 0, 0, 0, 108, 252, 3, 0, 0, 1, 0, 0, 20, 0, 0, 0, 0,
-        0, 0, 0, 8, 0, 0, 0, 134, 253, 3, 0, 154, 0, 0, 0, 23, 0, 0, 0, 0, 0,
-        0, 0, 16, 0, 0, 0, 216, 1, 4, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 16, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 128, 48, 0, 0, 128, 48, 0, 0, 128, 48, 0, 0, 128, 48, 0,
-        0, 128, 48, 0, 0, 128, 48, 0, 128, 128, 48, 0, 0, 129, 48, 0, 128, 129,
-        48, 0, 0, 130, 48, 0, 128, 130, 48, 0, 0, 131, 48, 0, 128, 131, 48,
-        0, 0, 132, 48, 0, 128, 132, 16, 0, 0, 133, 16, 0, 128, 197, 16, 0, 0,
-        198, 16, 0, 128, 6, 17, 0, 0, 7, 17, 0, 128, 71, 17, 0, 0, 72, 17, 0,
-        128, 72, 11, 0, 0, 73, 11, 0, 128, 73, 1, 0, 0, 74, 1, 0, 128, 74, 1,
-        0, 0, 75, 1, 0, 128, 75, 1, 0, 0, 76, 1, 0, 128, 76, 1, 0, 0, 77, 1,
-        0, 128, 77, 1, 0, 0, 78, 1, 0, 128, 78, 1, 0, 0, 79, 1, 0, 128, 79,
-        1, 0, 0, 80, 1, 0, 0, 64, 49, 0, 0, 64, 49, 0, 0, 64, 49, 0, 0, 64,
-        49, 0, 0, 64, 49, 0, 0, 64, 49, 0, 0, 64, 49, 0, 0, 64, 49, 0, 128,
-        64, 49, 0, 128, 80, 49, 0, 0, 81, 49, 0, 128, 81, 49, 0, 0, 82, 49,
-        0, 128, 82, 49, 0, 0, 83, 49, 0, 128, 83, 49, 0, 0, 84, 49, 0, 128,
-        84, 49, 0, 0, 85, 49, 0, 128, 149, 16, 0, 0, 150, 16, 0, 128, 150, 16,
-        0, 0, 151, 16, 0, 128, 215, 16, 0, 0, 216, 16, 0, 128, 216, 16, 0, 0,
-        25, 17, 0, 128, 25, 17, 0, 0, 90, 17, 0, 128, 90, 17, 0, 0, 91, 11,
-        0, 128, 91, 11, 0, 0, 92, 11, 0, 128, 92, 11, 0, 0, 93, 1, 0, 128, 93,
-        1, 0, 0, 94, 1, 0, 128, 94, 1, 0, 0, 2, 0, 3, 0, 4, 0, 6, 0, 8, 0, 11,
-        0, 16, 1, 16, 2, 16, 3, 16, 4, 16, 5, 16, 6, 16, 7, 16, 7, 23, 7, 32,
-        7, 45, 7, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 4, 0, 6, 0, 8, 0, 11, 0,
-        16, 1, 16, 2, 16, 3, 16, 4, 16, 5, 16, 6, 16, 7, 16, 7, 23, 7, 32, 7,
-        45, 7, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 248, 3, 0, 0, 248, 11, 0, 128, 232, 11, 0, 0, 217,
-        11, 0, 128, 209, 11, 0, 0, 194, 11, 0, 128, 186, 11, 0, 0, 179, 11,
-        0, 129, 114, 11, 0, 129, 250, 10, 0, 1, 243, 10, 0, 129, 66, 10, 0,
-        1, 59, 10, 0, 129, 146, 9, 0, 1, 139, 9, 0, 129, 234, 8, 0, 1, 235,
-        8, 0, 129, 146, 8, 0, 1, 147, 8, 0, 129, 106, 8, 0, 1, 107, 8, 0, 131,
-        98, 8, 0, 3, 99, 8, 0, 3, 99, 16, 0, 3, 99, 24, 0, 3, 99, 32, 0, 131,
-        99, 32, 0, 3, 100, 32, 0, 131, 100, 32, 0, 3, 101, 32, 0, 3, 101, 40,
-        0, 3, 101, 48, 0, 3, 101, 56, 0, 0, 248, 19, 0, 0, 248, 27, 0, 0, 248,
-        35, 0, 0, 248, 43, 0, 0, 248, 51, 0, 0, 248, 59, 0, 128, 232, 59, 0,
-        1, 176, 59, 0, 129, 152, 59, 0, 3, 56, 59, 0, 128, 53, 3, 0, 128, 53,
-        11, 0, 129, 237, 2, 0, 129, 237, 10, 0, 129, 53, 2, 0, 129, 53, 10,
-        0, 129, 53, 18, 0, 129, 141, 9, 0, 129, 141, 17, 0, 129, 229, 8, 0,
-        129, 229, 16, 0, 129, 141, 8, 0, 129, 141, 16, 0, 129, 141, 24, 0, 129,
-        141, 32, 0, 129, 109, 24, 0, 129, 109, 32, 0, 129, 109, 40, 0, 129,
-        109, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 112, 107, 116, 95, 102, 105, 108, 116, 101, 114, 0, 97, 112, 102,
-        95, 115, 105, 122, 101, 95, 108, 105, 109, 105, 116, 0, 97, 112, 102,
-        95, 118, 101, 114, 0, 0, 0, 59, 4, 4, 0, 16, 0, 0, 0, 7, 0, 4, 0, 74,
-        4, 4, 0, 15, 0, 0, 0, 7, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 77, 57, 3, 0, 1, 0, 0, 0, 87, 57, 3, 0, 2, 0, 0, 0, 111,
-        57, 3, 0, 6, 0, 0, 0, 155, 57, 3, 0, 11, 0, 0, 0, 193, 57, 3, 0, 12,
-        0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
-        22, 44, 66, 1, 2, 3, 0, 0, 0, 4, 0, 0, 0, 0, 5, 112, 114, 111, 116,
-        95, 103, 0, 112, 114, 111, 116, 95, 110, 0, 0, 0, 0, 12, 0, 0, 0, 24,
-        0, 0, 0, 36, 0, 0, 0, 48, 0, 0, 0, 72, 0, 0, 0, 96, 0, 0, 0, 108, 0,
-        0, 0, 108, 0, 0, 0, 108, 0, 0, 0, 108, 0, 0, 0, 1, 1, 2, 2, 1, 2, 2,
-        3, 4, 4, 1, 2, 4, 3, 4, 6, 2, 3, 6, 3, 4, 6, 5, 6, 8, 3, 4, 8, 5, 6,
-        0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 11, 0, 0, 0, 16,
-        0, 0, 0, 22, 0, 0, 0, 24, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0,
-        0, 2, 0, 0, 0, 24, 0, 0, 0, 8, 0, 0, 0, 36, 0, 0, 0, 10, 0, 0, 0, 48,
-        0, 0, 0, 16, 0, 0, 0, 72, 0, 0, 0, 18, 0, 0, 0, 96, 0, 0, 0, 25, 0,
-        0, 0, 108, 0, 0, 0, 26, 0, 0, 0, 140, 8, 4, 0, 0, 0, 128, 0, 1, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 11, 0,
-        0, 0, 12, 0, 0, 0, 18, 0, 0, 0, 22, 0, 0, 0, 24, 0, 0, 0, 36, 0, 0,
-        0, 48, 0, 0, 0, 72, 0, 0, 0, 96, 0, 0, 0, 108, 0, 0, 0, 32, 0, 0, 1,
-        0, 0, 0, 1, 1, 0, 0, 1, 2, 0, 0, 1, 3, 0, 0, 1, 4, 0, 0, 1, 5, 0, 0,
-        1, 6, 0, 0, 1, 7, 0, 0, 1, 8, 0, 0, 1, 9, 0, 0, 1, 10, 0, 0, 1, 11,
-        0, 0, 1, 12, 0, 0, 1, 13, 0, 0, 1, 14, 0, 0, 1, 15, 0, 0, 1, 16, 0,
-        0, 1, 17, 0, 0, 1, 18, 0, 0, 1, 19, 0, 0, 1, 20, 0, 0, 1, 21, 0, 0,
-        1, 22, 0, 0, 1, 23, 0, 0, 1, 87, 0, 0, 1, 88, 0, 0, 1, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 108, 99, 95, 114, 97, 116, 101,
-        115, 101, 108, 95, 102, 105, 108, 116, 101, 114, 95, 109, 99, 115, 115,
-        101, 116, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 17, 0, 0, 0, 6, 0,
-        0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 17, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 2,
-        0, 0, 0, 17, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 18, 0, 0,
-        0, 6, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 18, 0, 0, 0, 6, 0, 0, 0, 10,
-        0, 0, 0, 2, 0, 0, 0, 19, 0, 0, 0, 6, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0,
-        0, 20, 0, 0, 0, 6, 0, 0, 0, 12, 0, 0, 0, 2, 0, 0, 0, 20, 0, 0, 0, 6,
-        0, 0, 0, 12, 0, 0, 0, 2, 0, 0, 0, 20, 0, 0, 0, 6, 0, 0, 0, 2, 0, 0,
-        0, 2, 0, 0, 0, 17, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 18,
-        0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 19, 0, 0, 0, 7, 0, 0, 0,
-        5, 0, 0, 0, 2, 0, 0, 0, 20, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 2, 0, 0,
-        0, 30, 0, 0, 0, 7, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 40, 0, 0,
-        0, 7, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 100, 0, 0, 0, 7, 0, 0,
-        0, 255, 255, 255, 255, 2, 0, 0, 0, 200, 0, 0, 0, 7, 0, 0, 0, 255, 255,
-        255, 255, 2, 0, 0, 0, 44, 1, 0, 0, 8, 0, 0, 0, 255, 255, 255, 255, 2,
-        0, 0, 0, 44, 1, 0, 0, 8, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 44,
-        1, 0, 0, 8, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 44, 1, 0, 0, 8,
-        0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0, 44, 1, 0, 0, 8, 0, 0, 0, 255,
-        255, 255, 255, 2, 0, 0, 0, 44, 1, 0, 0, 8, 0, 0, 0, 255, 255, 255, 255,
-        2, 0, 0, 0, 44, 1, 0, 0, 8, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0, 0,
-        44, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 111, 110, 108,
-        121, 32, 115, 117, 112, 112, 111, 114, 116, 32, 49, 45, 115, 116, 114,
-        101, 97, 109, 32, 49, 49, 110, 95, 50, 53, 54, 81, 65, 77, 32, 102,
-        111, 114, 32, 110, 111, 110, 45, 49, 49, 97, 99, 32, 99, 111, 109, 112,
-        105, 108, 101, 100, 32, 100, 101, 118, 105, 99, 101, 33, 10, 0, 114,
-        97, 116, 101, 115, 101, 108, 95, 100, 117, 109, 109, 121, 0, 87, 88,
-        99, 100, 101, 102, 255, 255, 255, 255, 255, 255, 255, 255, 2, 0, 0,
-        0, 17, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0,
-        0, 17, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0,
-        0, 17, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0,
-        0, 18, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0,
-        0, 18, 0, 0, 0, 6, 0, 0, 0, 10, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0,
-        0, 19, 0, 0, 0, 6, 0, 0, 0, 11, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0,
-        0, 20, 0, 0, 0, 6, 0, 0, 0, 12, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0,
-        0, 20, 0, 0, 0, 6, 0, 0, 0, 12, 0, 0, 0, 255, 255, 255, 255, 2, 0, 0,
-        0, 20, 0, 0, 0, 6, 0, 0, 0, 2, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 17,
-        0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 17, 0, 0, 0, 2, 0, 0, 0, 18, 0, 0,
-        0, 6, 0, 0, 0, 4, 0, 0, 0, 17, 0, 0, 0, 2, 0, 0, 0, 19, 0, 0, 0, 7,
-        0, 0, 0, 5, 0, 0, 0, 18, 0, 0, 0, 2, 0, 0, 0, 20, 0, 0, 0, 7, 0, 0,
-        0, 7, 0, 0, 0, 19, 0, 0, 0, 2, 0, 0, 0, 30, 0, 0, 0, 7, 0, 0, 0, 255,
-        255, 255, 255, 20, 0, 0, 0, 2, 0, 0, 0, 40, 0, 0, 0, 7, 0, 0, 0, 255,
-        255, 255, 255, 20, 0, 0, 0, 2, 0, 0, 0, 50, 0, 0, 0, 7, 0, 0, 0, 255,
-        255, 255, 255, 21, 0, 0, 0, 2, 0, 0, 0, 60, 0, 0, 0, 7, 0, 0, 0, 255,
-        255, 255, 255, 9, 0, 0, 0, 2, 0, 0, 0, 19, 0, 0, 0, 8, 0, 0, 0, 255,
-        255, 255, 255, 10, 0, 0, 0, 2, 0, 0, 0, 19, 0, 0, 0, 8, 0, 0, 0, 255,
-        255, 255, 255, 11, 0, 0, 0, 2, 0, 0, 0, 23, 0, 0, 0, 8, 0, 0, 0, 255,
-        255, 255, 255, 12, 0, 0, 0, 2, 0, 0, 0, 40, 0, 0, 0, 8, 0, 0, 0, 255,
-        255, 255, 255, 14, 0, 0, 0, 2, 0, 0, 0, 50, 0, 0, 0, 8, 0, 0, 0, 255,
-        255, 255, 255, 15, 0, 0, 0, 2, 0, 0, 0, 60, 0, 0, 0, 8, 0, 0, 0, 255,
-        255, 255, 255, 255, 255, 255, 255, 2, 0, 0, 0, 21, 0, 0, 0, 8, 0, 0,
-        0, 255, 255, 255, 255, 255, 255, 255, 255, 2, 0, 0, 0, 21, 0, 0, 0,
-        8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 251, 127, 136, 0, 4, 0, 16, 64, 5, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 11, 4, 0, 0, 0, 0, 0, 7,
-        0, 4, 0, 159, 11, 4, 0, 1, 0, 0, 0, 7, 0, 4, 0, 175, 11, 4, 0, 2, 0,
-        0, 0, 8, 0, 8, 0, 184, 11, 4, 0, 3, 0, 0, 0, 0, 0, 0, 0, 194, 11, 4,
-        0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
-        11, 4, 0, 194, 11, 4, 0, 15, 87, 136, 0, 203, 11, 4, 0, 166, 179, 136,
-        0, 210, 11, 4, 0, 137, 84, 136, 0, 0, 0, 0, 0, 115, 101, 113, 95, 99,
-        109, 100, 115, 0, 115, 101, 113, 95, 100, 101, 108, 97, 121, 0, 115,
-        101, 113, 95, 101, 114, 114, 111, 114, 95, 105, 110, 100, 101, 120,
-        0, 115, 101, 113, 95, 108, 105, 115, 116, 0, 115, 101, 113, 95, 115,
-        116, 97, 114, 116, 0, 115, 101, 113, 95, 115, 116, 111, 112, 0, 114,
-        101, 109, 111, 116, 101, 0, 101, 120, 116, 108, 111, 103, 0, 98, 99,
-        110, 108, 101, 110, 104, 105, 115, 116, 0, 217, 11, 4, 0, 0, 0, 0, 0,
-        8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 1, 2, 1,
-        1, 2, 2, 3, 6, 3, 7, 7, 4, 15, 15, 128, 128, 0, 1, 2, 128, 3, 128, 4,
-        128, 128, 128, 5, 128, 128, 128, 6, 128, 7, 109, 105, 109, 111, 95,
-        112, 115, 0, 109, 105, 109, 111, 95, 115, 115, 95, 115, 116, 102, 0,
-        115, 116, 102, 95, 115, 115, 95, 97, 117, 116, 111, 0, 115, 116, 98,
-        99, 95, 114, 120, 0, 115, 116, 98, 99, 95, 116, 120, 0, 115, 105, 115,
-        111, 95, 116, 120, 0, 116, 120, 115, 116, 114, 101, 97, 109, 115, 0,
-        104, 119, 95, 116, 120, 99, 104, 97, 105, 110, 0, 114, 120, 115, 116,
-        114, 101, 97, 109, 115, 0, 104, 119, 95, 114, 120, 99, 104, 97, 105,
-        110, 0, 116, 120, 99, 111, 114, 101, 0, 116, 120, 99, 111, 114, 101,
-        95, 111, 118, 101, 114, 114, 105, 100, 101, 0, 116, 101, 109, 112, 115,
-        101, 110, 115, 101, 95, 100, 105, 115, 97, 98, 108, 101, 0, 116, 120,
-        99, 104, 97, 105, 110, 95, 112, 119, 114, 95, 111, 102, 102, 115, 101,
-        116, 0, 99, 117, 114, 112, 112, 114, 0, 112, 119, 114, 116, 104, 114,
-        111, 116, 116, 108, 101, 95, 116, 101, 115, 116, 0, 112, 119, 114, 116,
-        104, 114, 111, 116, 116, 108, 101, 95, 109, 97, 115, 107, 0, 112, 119,
-        114, 116, 104, 114, 111, 116, 116, 108, 101, 0, 112, 119, 114, 116,
-        104, 114, 111, 116, 116, 108, 101, 95, 115, 116, 97, 116, 101, 0, 115,
-        112, 97, 116, 105, 97, 108, 95, 112, 111, 108, 105, 99, 121, 0, 114,
-        115, 115, 105, 95, 112, 119, 114, 100, 110, 95, 100, 105, 115, 97, 98,
-        108, 101, 0, 114, 97, 116, 101, 116, 98, 108, 95, 112, 112, 114, 0,
-        111, 110, 101, 99, 104, 97, 105, 110, 0, 100, 117, 116, 121, 99, 121,
-        99, 108, 101, 95, 99, 99, 107, 0, 100, 117, 116, 121, 99, 121, 99, 108,
-        101, 95, 111, 102, 100, 109, 0, 100, 117, 116, 121, 99, 121, 99, 108,
-        101, 95, 112, 119, 114, 0, 100, 117, 116, 121, 99, 121, 99, 108, 101,
-        95, 116, 104, 101, 114, 109, 97, 108, 0, 116, 120, 95, 110, 115, 115,
-        0, 99, 99, 107, 95, 116, 120, 109, 111, 100, 101, 0, 115, 119, 100,
-        105, 118, 95, 115, 116, 97, 116, 115, 0, 115, 119, 100, 105, 118, 95,
-        114, 101, 115, 101, 116, 95, 115, 116, 97, 116, 115, 0, 115, 119, 100,
-        105, 118, 95, 116, 120, 95, 119, 101, 105, 103, 104, 116, 0, 115, 119,
-        100, 105, 118, 95, 99, 101, 108, 108, 95, 112, 111, 108, 105, 99, 121,
-        0, 115, 119, 100, 105, 118, 95, 114, 120, 95, 112, 111, 108, 105, 99,
-        121, 0, 115, 119, 100, 105, 118, 95, 116, 120, 95, 112, 111, 108, 105,
-        99, 121, 0, 115, 116, 102, 95, 116, 104, 114, 111, 116, 116, 108, 101,
-        95, 101, 110, 0, 115, 116, 102, 95, 116, 101, 109, 112, 95, 116, 104,
-        114, 101, 115, 104, 0, 115, 116, 102, 95, 100, 117, 116, 121, 99, 121,
-        99, 108, 101, 95, 116, 104, 114, 101, 115, 104, 0, 0, 0, 0, 33, 12,
-        4, 0, 2, 0, 0, 64, 3, 0, 0, 0, 41, 12, 4, 0, 0, 0, 0, 64, 2, 0, 0, 0,
-        53, 12, 4, 0, 1, 0, 0, 0, 2, 0, 0, 0, 65, 12, 4, 0, 3, 0, 0, 64, 3,
-        0, 0, 0, 73, 12, 4, 0, 4, 0, 0, 64, 2, 0, 0, 0, 81, 12, 4, 0, 7, 0,
-        0, 0, 1, 0, 0, 0, 89, 12, 4, 0, 5, 0, 0, 0, 3, 0, 0, 0, 102, 12, 4,
-        0, 6, 0, 0, 0, 6, 0, 0, 0, 99, 12, 4, 0, 8, 0, 0, 0, 3, 0, 0, 0, 110,
-        12, 4, 0, 9, 0, 0, 0, 3, 0, 0, 0, 120, 12, 4, 0, 11, 0, 0, 0, 3, 0,
-        0, 0, 123, 12, 4, 0, 10, 0, 0, 0, 3, 0, 0, 0, 131, 12, 4, 0, 12, 0,
-        0, 0, 8, 0, 8, 0, 138, 12, 4, 0, 13, 0, 0, 0, 8, 0, 8, 0, 154, 12, 4,
-        0, 15, 0, 0, 0, 1, 0, 0, 0, 172, 12, 4, 0, 16, 0, 0, 0, 8, 0, 4, 0,
-        191, 12, 4, 0, 18, 0, 0, 0, 8, 0, 0, 0, 198, 12, 4, 0, 19, 0, 0, 0,
-        3, 0, 0, 0, 215, 12, 4, 0, 20, 0, 0, 0, 3, 0, 0, 0, 232, 12, 4, 0, 21,
-        0, 0, 0, 6, 0, 0, 0, 244, 12, 4, 0, 22, 0, 0, 0, 6, 0, 0, 0, 6, 13,
-        4, 0, 14, 0, 0, 0, 8, 0, 20, 0, 21, 13, 4, 0, 17, 0, 0, 0, 1, 0, 0,
-        0, 40, 13, 4, 0, 23, 0, 0, 0, 8, 0, 48, 0, 52, 13, 4, 0, 24, 0, 0, 0,
-        2, 0, 0, 0, 61, 13, 4, 0, 25, 0, 0, 0, 3, 0, 0, 0, 75, 13, 4, 0, 26,
-        0, 0, 0, 3, 0, 0, 0, 90, 13, 4, 0, 27, 0, 0, 0, 3, 0, 0, 0, 104, 13,
-        4, 0, 28, 0, 0, 0, 3, 0, 0, 0, 122, 13, 4, 0, 29, 0, 0, 0, 3, 0, 0,
-        0, 129, 13, 4, 0, 30, 0, 64, 4, 6, 0, 0, 0, 140, 13, 4, 0, 33, 0, 0,
-        64, 8, 0, 104, 0, 152, 13, 4, 0, 34, 0, 0, 0, 6, 0, 0, 0, 170, 13, 4,
-        0, 35, 0, 0, 0, 6, 0, 0, 0, 186, 13, 4, 0, 36, 0, 0, 0, 7, 0, 0, 0,
-        204, 13, 4, 0, 31, 0, 0, 0, 7, 0, 0, 0, 220, 13, 4, 0, 32, 0, 0, 0,
-        7, 0, 0, 0, 236, 13, 4, 0, 37, 0, 0, 0, 7, 0, 0, 0, 252, 13, 4, 0, 38,
-        0, 0, 0, 7, 0, 0, 0, 12, 14, 4, 0, 39, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 1, 128, 128, 2, 2, 128, 128, 128,
-        128, 3, 116, 112, 99, 0, 116, 112, 99, 95, 114, 112, 116, 95, 111, 118,
-        101, 114, 114, 105, 100, 101, 0, 116, 120, 112, 119, 114, 95, 116, 97,
-        114, 103, 101, 116, 95, 109, 97, 120, 0, 0, 0, 32, 16, 4, 0, 0, 0, 0,
-        0, 5, 0, 0, 0, 51, 228, 136, 0, 4, 0, 0, 0, 3, 0, 0, 0, 61, 217, 3,
-        0, 5, 0, 0, 4, 3, 0, 0, 0, 49, 16, 4, 0, 6, 0, 0, 4, 8, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 120, 99, 0, 119, 97, 112, 105,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 20, 0, 0, 128,
-        56, 1, 0, 115, 100, 112, 99, 109, 100, 101, 118, 0, 0, 0, 0, 0, 0, 0,
-        0, 248, 16, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 101, 190, 128, 0, 233, 202, 128, 0, 253, 202, 128,
-        0, 65, 63, 0, 0, 93, 190, 128, 0, 113, 63, 0, 0, 37, 188, 128, 0, 0,
-        0, 0, 0, 249, 202, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233, 71, 4, 0, 197,
-        71, 4, 0, 175, 71, 4, 0, 171, 63, 0, 0, 0, 0, 0, 0, 73, 203, 128, 0,
-        163, 63, 0, 0, 101, 203, 128, 0, 133, 203, 128, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 233, 73, 0, 0, 61, 74, 0, 0, 0, 0, 0, 0, 229, 73, 0, 0, 209, 84,
-        0, 0, 67, 83, 0, 0, 45, 75, 0, 0, 9, 88, 0, 0, 11, 95, 0, 0, 109, 82,
-        0, 0, 241, 79, 0, 0, 151, 87, 0, 0, 19, 83, 0, 0, 157, 81, 0, 0, 29,
-        30, 28, 11, 119, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
-        17, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 221, 166, 4, 0, 237, 154, 129, 0, 177, 150, 129, 0, 165,
-        159, 0, 0, 0, 0, 0, 0, 133, 153, 129, 0, 0, 0, 0, 0, 205, 154, 129,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 232, 3, 0, 0, 1,
-        0, 3, 0, 3, 0, 6, 0, 0, 0, 3, 0, 3, 0, 3, 0, 96, 133, 4, 9, 44, 1, 0,
-        0, 14, 0, 13, 0, 14, 0, 14, 0, 14, 0, 2, 0, 9, 0, 12, 0, 10, 0, 8, 0,
-        13, 0, 1, 0, 9, 0, 12, 0, 10, 0, 8, 0, 13, 0, 1, 0, 9, 0, 12, 0, 10,
-        0, 8, 0, 13, 0, 1, 0, 9, 0, 12, 0, 10, 0, 8, 0, 13, 0, 1, 0, 10, 0,
-        13, 0, 11, 0, 9, 0, 14, 0, 2, 0, 10, 0, 13, 0, 11, 0, 9, 0, 14, 0, 2,
-        0, 9, 0, 57, 0, 22, 0, 14, 0, 14, 0, 5, 0, 9, 0, 57, 0, 22, 0, 14, 0,
-        14, 0, 5, 0, 10, 0, 13, 0, 11, 0, 9, 0, 14, 0, 4, 0, 10, 0, 13, 0, 11,
-        0, 9, 0, 14, 0, 2, 0, 10, 0, 13, 0, 11, 0, 9, 0, 14, 0, 2, 0, 20, 0,
-        191, 0, 192, 0, 21, 0, 17, 0, 5, 0, 20, 0, 191, 0, 192, 0, 21, 0, 17,
-        0, 5, 0, 20, 0, 191, 0, 192, 0, 21, 0, 17, 0, 5, 0, 20, 0, 191, 0, 192,
-        0, 21, 0, 17, 0, 5, 0, 20, 0, 191, 0, 192, 0, 21, 0, 17, 0, 5, 0, 9,
-        0, 57, 0, 22, 0, 14, 0, 14, 0, 5, 0, 9, 0, 57, 0, 22, 0, 14, 0, 14,
-        0, 5, 0, 20, 0, 191, 0, 192, 0, 21, 0, 17, 0, 5, 0, 9, 0, 57, 0, 22,
-        0, 14, 0, 14, 0, 5, 0, 9, 0, 57, 0, 22, 0, 14, 0, 14, 0, 5, 0, 150,
-        0, 222, 0, 223, 0, 21, 0, 17, 0, 5, 0, 20, 0, 191, 0, 192, 0, 21, 0,
-        17, 0, 5, 0, 9, 0, 57, 0, 22, 0, 14, 0, 14, 0, 5, 0, 9, 0, 57, 0, 22,
-        0, 14, 0, 14, 0, 5, 0, 9, 0, 97, 0, 22, 0, 14, 0, 14, 0, 5, 0, 9, 0,
-        57, 0, 22, 0, 14, 0, 14, 0, 5, 0, 12, 0, 182, 0, 25, 0, 17, 0, 17, 0,
-        8, 0, 9, 0, 57, 0, 22, 0, 14, 0, 14, 0, 5, 0, 9, 0, 182, 0, 25, 0, 17,
-        0, 17, 0, 8, 0, 9, 0, 182, 0, 25, 0, 17, 0, 17, 0, 8, 0, 9, 0, 182,
-        0, 25, 0, 17, 0, 17, 0, 8, 0, 9, 0, 57, 0, 22, 0, 14, 0, 14, 0, 5, 0,
-        9, 0, 182, 0, 25, 0, 17, 0, 17, 0, 8, 0, 9, 0, 57, 0, 22, 0, 14, 0,
-        14, 0, 5, 0, 9, 0, 182, 0, 25, 0, 17, 0, 17, 0, 8, 0, 232, 3, 0, 0,
-        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 35, 64, 31, 160, 15, 184, 11,
-        24, 252, 48, 248, 144, 232, 168, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 120, 5, 0, 0, 240, 241, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 35, 0, 0, 160, 15, 0, 0, 24, 252, 0,
-        0, 144, 232, 0, 0, 0, 0, 112, 23, 0, 0, 232, 3, 0, 0, 96, 240, 0, 0,
-        216, 220, 0, 25, 0, 0, 120, 5, 0, 0, 240, 241, 0, 0, 0, 0, 0, 0, 57,
-        51, 45, 40, 36, 32, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 1, 0, 0, 0,
-        0, 0, 0, 0, 0, 255, 1, 0, 0, 0, 0, 0, 0, 0, 0, 255, 1, 0, 0, 0, 0, 9,
-        0, 1, 0, 0, 0, 164, 0, 0, 0, 45, 1, 45, 1, 0, 0, 226, 1, 227, 254, 128,
-        0, 0, 1, 128, 0, 5, 1, 81, 254, 64, 0, 128, 0, 64, 0, 8, 0, 2, 0, 0,
-        0, 119, 1, 22, 255, 37, 0, 76, 0, 37, 0, 31, 3, 116, 254, 32, 0, 20,
-        0, 32, 0, 236, 2, 242, 254, 128, 0, 226, 255, 128, 0, 8, 0, 3, 0, 0,
-        0, 119, 1, 22, 255, 37, 0, 76, 0, 37, 0, 31, 3, 116, 254, 32, 0, 20,
-        0, 32, 0, 236, 2, 242, 254, 148, 0, 221, 255, 148, 0, 8, 0, 4, 0, 0,
-        0, 51, 1, 174, 7, 53, 0, 106, 0, 53, 0, 11, 3, 133, 6, 53, 0, 246, 7,
-        53, 0, 253, 2, 43, 6, 212, 0, 54, 7, 212, 0, 8, 0, 5, 0, 0, 0, 197,
-        1, 29, 255, 32, 0, 64, 0, 32, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 107,
-        3, 130, 254, 20, 0, 41, 0, 20, 0, 8, 0, 6, 0, 0, 0, 119, 1, 22, 255,
-        37, 0, 76, 0, 37, 0, 31, 3, 116, 254, 32, 0, 20, 0, 32, 0, 236, 2, 242,
-        254, 114, 0, 229, 255, 114, 0, 8, 0, 7, 0, 0, 0, 170, 0, 0, 0, 211,
-        1, 210, 1, 0, 0, 153, 1, 201, 6, 128, 0, 0, 1, 128, 0, 98, 0, 66, 6,
-        36, 0, 72, 0, 36, 0, 9, 0, 8, 0, 0, 0, 174, 0, 0, 0, 121, 1, 120, 1,
-        0, 0, 194, 1, 196, 6, 128, 0, 0, 1, 128, 0, 158, 0, 65, 6, 36, 0, 72,
-        0, 36, 0, 9, 0, 9, 0, 0, 0, 178, 0, 0, 0, 63, 1, 63, 1, 0, 0, 223, 1,
-        192, 6, 128, 0, 0, 1, 128, 0, 202, 0, 65, 6, 36, 0, 72, 0, 36, 0, 9,
-        0, 10, 0, 0, 0, 162, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 255, 1,
-        0, 0, 0, 0, 120, 2, 160, 254, 0, 1, 255, 1, 0, 1, 8, 0, 12, 0, 0, 0,
-        138, 1, 22, 255, 29, 0, 58, 0, 29, 0, 32, 3, 118, 254, 24, 0, 48, 0,
-        24, 0, 68, 3, 160, 254, 38, 0, 76, 0, 38, 0, 8, 0, 13, 0, 0, 0, 174,
-        0, 0, 0, 211, 1, 210, 1, 0, 0, 183, 1, 192, 254, 120, 0, 240, 0, 120,
-        0, 85, 0, 89, 254, 36, 0, 72, 0, 36, 0, 9, 0, 14, 0, 0, 0, 177, 0, 0,
-        0, 182, 1, 181, 1, 0, 0, 201, 1, 188, 254, 120, 0, 240, 0, 120, 0, 77,
-        0, 101, 254, 35, 0, 70, 0, 35, 0, 9, 0, 15, 0, 0, 0, 186, 0, 0, 0, 63,
-        1, 63, 1, 0, 0, 11, 2, 185, 254, 120, 0, 240, 0, 120, 0, 174, 0, 95,
-        254, 35, 0, 70, 0, 35, 0, 9, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,
-        0, 0, 0, 0, 0, 0, 255, 1, 0, 0, 0, 0, 0, 0, 0, 0, 255, 1, 0, 0, 0, 0,
-        9, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 255, 1,
-        0, 0, 0, 0, 0, 0, 0, 0, 236, 1, 20, 0, 0, 0, 9, 0, 18, 0, 0, 0, 0, 0,
-        0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 255, 1, 0, 0, 0, 0, 0, 0, 0, 0,
-        36, 1, 36, 1, 0, 0, 9, 0, 102, 0, 70, 11, 108, 0, 165, 10, 115, 0, 12,
-        10, 122, 0, 124, 9, 129, 0, 244, 8, 137, 0, 116, 8, 145, 0, 251, 7,
-        153, 0, 137, 7, 162, 0, 29, 7, 172, 0, 183, 6, 182, 0, 87, 6, 193, 0,
-        252, 5, 204, 0, 166, 5, 216, 0, 86, 5, 229, 0, 9, 5, 243, 0, 193, 4,
-        1, 1, 125, 4, 16, 1, 61, 4, 33, 1, 0, 4, 50, 1, 199, 3, 68, 1, 145,
-        3, 87, 1, 94, 3, 107, 1, 45, 3, 129, 1, 0, 3, 152, 1, 213, 2, 176, 1,
-        172, 2, 201, 1, 134, 2, 229, 1, 98, 2, 1, 2, 64, 2, 32, 2, 32, 2, 64,
-        2, 1, 2, 98, 2, 229, 1, 134, 2, 201, 1, 172, 2, 176, 1, 213, 2, 152,
-        1, 0, 3, 129, 1, 45, 3, 107, 1, 94, 3, 87, 1, 145, 3, 68, 1, 199, 3,
-        50, 1, 0, 4, 33, 1, 61, 4, 16, 1, 125, 4, 1, 1, 193, 4, 243, 0, 9, 5,
-        229, 0, 86, 5, 216, 0, 166, 5, 204, 0, 252, 5, 193, 0, 87, 6, 182, 0,
-        183, 6, 172, 0, 29, 7, 162, 0, 137, 7, 153, 0, 251, 7, 145, 0, 116,
-        8, 137, 0, 244, 8, 129, 0, 124, 9, 122, 0, 12, 10, 115, 0, 165, 10,
-        108, 0, 70, 11, 102, 0, 241, 11, 97, 0, 166, 12, 91, 0, 102, 13, 86,
-        0, 49, 14, 81, 0, 9, 15, 77, 0, 59, 117, 117, 59, 117, 117, 43, 43,
-        117, 59, 91, 117, 43, 43, 97, 59, 91, 97, 0, 0, 156, 230, 0, 0, 0, 0,
-        40, 35, 0, 0, 160, 15, 0, 0, 24, 252, 0, 0, 144, 232, 0, 0, 0, 0, 64,
-        31, 0, 0, 184, 11, 0, 0, 48, 248, 0, 0, 168, 228, 0, 25, 0, 0, 120,
-        5, 0, 0, 240, 241, 0, 0, 0, 0, 0, 0, 32, 28, 156, 230, 152, 8, 0, 0,
-        16, 245, 0, 0, 136, 225, 0, 0, 0, 25, 0, 0, 120, 5, 0, 0, 240, 241,
-        64, 31, 104, 222, 184, 11, 224, 21, 48, 248, 88, 2, 168, 228, 208, 238,
-        0, 0, 72, 219, 72, 38, 192, 18, 0, 0, 224, 227, 0, 0, 125, 0, 61, 0,
-        38, 0, 250, 0, 54, 0, 46, 0, 44, 1, 51, 0, 49, 0, 25, 0, 64, 0, 32,
-        0, 50, 0, 64, 0, 34, 0, 225, 0, 56, 0, 44, 0, 112, 23, 0, 0, 232, 3,
-        0, 0, 96, 240, 0, 0, 216, 220, 0, 0, 0, 0, 0, 0, 88, 27, 0, 0, 208,
-        7, 112, 23, 72, 244, 232, 3, 192, 224, 96, 240, 0, 0, 216, 220, 64,
-        31, 0, 0, 184, 11, 0, 0, 48, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20,
-        0, 164, 255, 45, 1, 45, 1, 0, 0, 122, 1, 72, 255, 64, 0, 128, 0, 64,
-        0, 248, 1, 128, 255, 64, 0, 128, 0, 64, 0, 8, 0, 1, 0, 0, 0, 165, 0,
-        164, 255, 150, 0, 150, 0, 0, 0, 249, 1, 72, 255, 64, 0, 128, 0, 64,
-        0, 252, 1, 128, 255, 64, 0, 128, 0, 64, 0, 8, 0, 2, 0, 1, 0, 159, 1,
-        82, 7, 64, 0, 128, 0, 64, 0, 24, 3, 120, 6, 192, 0, 128, 1, 192, 0,
-        10, 3, 46, 6, 64, 0, 128, 0, 64, 0, 8, 0, 3, 0, 1, 0, 46, 1, 49, 7,
-        129, 0, 2, 1, 129, 0, 146, 2, 184, 6, 205, 0, 154, 1, 205, 0, 242, 2,
-        224, 6, 170, 0, 84, 1, 170, 0, 8, 0, 20, 0, 1, 0, 104, 1, 92, 255, 242,
-        0, 198, 254, 242, 0, 240, 2, 184, 254, 205, 0, 53, 255, 205, 0, 255,
-        2, 224, 254, 253, 0, 183, 0, 253, 0, 8, 0, 21, 0, 1, 0, 104, 1, 92,
-        7, 149, 0, 82, 7, 149, 0, 240, 2, 184, 6, 205, 0, 92, 7, 205, 0, 255,
-        2, 224, 6, 0, 1, 17, 1, 0, 1, 8, 0, 22, 0, 1, 0, 104, 1, 92, 7, 98,
-        0, 156, 7, 98, 0, 240, 2, 184, 6, 205, 0, 132, 7, 205, 0, 255, 2, 224,
-        6, 0, 1, 96, 1, 0, 1, 8, 0, 23, 0, 1, 0, 94, 1, 92, 7, 116, 0, 174,
-        7, 116, 0, 240, 2, 184, 6, 205, 0, 216, 7, 205, 0, 255, 2, 224, 6, 129,
-        0, 235, 0, 129, 0, 8, 0, 24, 0, 1, 0, 69, 1, 92, 7, 32, 0, 40, 0, 32,
-        0, 244, 2, 184, 6, 0, 1, 215, 1, 0, 1, 254, 2, 224, 6, 6, 1, 86, 7,
-        6, 1, 8, 0, 25, 0, 1, 0, 43, 1, 92, 7, 51, 0, 64, 0, 51, 0, 224, 2,
-        184, 6, 0, 1, 215, 1, 0, 1, 253, 2, 224, 6, 6, 1, 86, 7, 6, 1, 8, 0,
-        26, 0, 1, 0, 21, 1, 151, 7, 39, 0, 117, 0, 88, 0, 125, 2, 46, 7, 64,
-        0, 192, 0, 144, 0, 102, 2, 72, 7, 128, 0, 128, 1, 32, 1, 8, 0, 27, 0,
-        1, 0, 245, 0, 151, 7, 49, 0, 147, 0, 110, 0, 114, 2, 46, 7, 162, 0,
-        229, 1, 107, 1, 101, 2, 72, 7, 62, 0, 186, 0, 139, 0, 8, 0, 28, 0, 1,
-        0, 104, 1, 92, 7, 149, 0, 82, 7, 149, 0, 240, 2, 184, 6, 205, 0, 92,
-        7, 205, 0, 255, 2, 224, 6, 114, 0, 121, 0, 114, 0, 8, 0, 30, 0, 1, 0,
-        46, 1, 49, 7, 61, 0, 122, 0, 61, 0, 146, 2, 184, 6, 205, 0, 154, 1,
-        205, 0, 242, 2, 224, 6, 170, 0, 84, 1, 170, 0, 8, 0, 31, 0, 1, 0, 63,
-        1, 25, 7, 234, 1, 0, 0, 234, 1, 187, 2, 142, 6, 68, 1, 0, 0, 68, 1,
-        242, 2, 224, 6, 114, 0, 0, 0, 114, 0, 8, 0, 40, 0, 1, 0, 104, 1, 92,
-        7, 242, 0, 198, 6, 242, 0, 240, 2, 184, 6, 205, 0, 53, 7, 205, 0, 255,
-        2, 224, 6, 255, 1, 114, 1, 255, 1, 8, 0, 50, 0, 1, 0, 217, 1, 12, 255,
-        32, 0, 64, 0, 32, 0, 162, 3, 65, 254, 16, 0, 32, 0, 16, 0, 161, 3, 88,
-        254, 16, 0, 32, 0, 16, 0, 8, 0, 112, 23, 0, 0, 232, 3, 0, 0, 96, 240,
-        64, 31, 216, 220, 184, 11, 0, 0, 48, 248, 88, 27, 168, 228, 208, 7,
-        0, 0, 72, 244, 0, 0, 192, 224, 0, 0, 0, 0, 0, 0, 64, 31, 0, 0, 184,
-        11, 0, 0, 48, 248, 0, 0, 0, 0, 0, 0, 112, 23, 156, 230, 232, 3, 0, 0,
-        96, 240, 0, 0, 216, 220, 0, 0, 0, 0, 0, 0, 88, 27, 0, 0, 208, 7, 64,
-        31, 72, 244, 184, 11, 192, 224, 48, 248, 0, 0, 168, 228, 64, 31, 0,
-        0, 184, 11, 0, 0, 48, 248, 0, 0, 0, 0, 0, 0, 32, 28, 0, 0, 152, 8, 0,
-        0, 16, 245, 0, 0, 136, 225, 0, 0, 0, 25, 0, 0, 120, 5, 0, 0, 240, 241,
-        112, 23, 104, 222, 232, 3, 224, 21, 96, 240, 88, 2, 216, 220, 208, 238,
-        0, 0, 72, 219, 72, 38, 192, 18, 0, 0, 224, 227, 0, 0, 32, 28, 0, 0,
-        152, 8, 0, 0, 16, 245, 64, 31, 136, 225, 184, 11, 0, 25, 48, 248, 120,
-        5, 168, 228, 240, 241, 0, 0, 104, 222, 0, 0, 224, 21, 0, 0, 88, 2, 0,
-        0, 208, 238, 0, 0, 72, 219, 72, 38, 192, 18, 0, 0, 224, 227, 0, 0, 0,
-        2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36,
-        38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 233, 248, 67, 5, 70, 136, 70, 203,
-        243, 2, 244, 0, 33, 40, 70, 203, 243, 10, 245, 4, 70, 40, 70, 110, 105,
-        175, 105, 195, 243, 194, 246, 10, 46, 129, 70, 22, 217, 15, 46, 22,
-        208, 40, 70, 203, 243, 26, 241, 20, 46, 5, 70, 3, 217, 163, 104, 35,
-        240, 8, 3, 163, 96, 163, 104, 20, 46, 67, 240, 1, 3, 163, 96, 20, 217,
-        163, 104, 67, 240, 8, 3, 163, 96, 15, 224, 2, 46, 15, 217, 40, 70, 203,
-        243, 95, 241, 212, 248, 164, 48, 5, 70, 35, 240, 255, 3, 67, 240, 2,
-        3, 196, 248, 164, 48, 2, 35, 3, 224, 1, 35, 1, 224, 16, 77, 48, 35,
-        162, 104, 210, 7, 7, 212, 7, 240, 24, 2, 8, 42, 12, 191, 181, 251, 243,
-        245, 79, 244, 225, 21, 7, 240, 3, 7, 0, 38, 11, 224, 4, 245, 64, 115,
-        184, 241, 0, 15, 5, 208, 48, 2, 24, 24, 73, 70, 42, 70, 0, 35, 192,
-        71, 1, 54, 190, 66, 241, 219, 189, 232, 248, 131, 0, 191, 0, 198, 62,
-        5, 45, 233, 248, 67, 22, 70, 152, 70, 4, 70, 13, 70, 203, 243, 94, 241,
-        0, 33, 7, 70, 32, 70, 203, 243, 167, 244, 0, 34, 129, 70, 19, 70, 19,
-        73, 136, 24, 64, 104, 176, 185, 12, 34, 83, 67, 202, 24, 206, 80, 85,
-        96, 194, 248, 8, 128, 32, 70, 203, 243, 138, 243, 217, 248, 36, 48,
-        12, 77, 30, 67, 46, 96, 32, 70, 203, 243, 130, 243, 43, 104, 1, 37,
-        201, 248, 36, 48, 4, 224, 1, 51, 12, 50, 5, 43, 224, 209, 0, 37, 32,
-        70, 57, 70, 203, 243, 128, 244, 40, 70, 189, 232, 248, 131, 0, 191,
-        212, 27, 4, 0, 28, 7, 0, 0, 56, 181, 18, 76, 0, 33, 72, 34, 32, 70,
-        192, 243, 133, 243, 16, 74, 1, 35, 132, 232, 12, 0, 0, 37, 14, 73, 31,
-        34, 4, 241, 12, 0, 192, 243, 90, 244, 132, 248, 43, 80, 197, 243, 176,
-        240, 79, 244, 0, 35, 163, 99, 79, 244, 0, 3, 227, 99, 7, 75, 32, 99,
-        35, 100, 7, 75, 101, 99, 219, 105, 101, 100, 163, 96, 56, 189, 0, 191,
-        48, 44, 4, 0, 68, 69, 66, 71, 31, 181, 3, 0, 128, 20, 8, 0, 140, 44,
-        4, 0, 67, 105, 20, 43, 1, 221, 197, 247, 249, 190, 112, 71, 67, 105,
-        16, 181, 10, 43, 4, 70, 10, 221, 6, 73, 1, 34, 3, 70, 255, 247, 132,
-        255, 32, 70, 1, 33, 189, 232, 16, 64, 6, 240, 146, 190, 16, 189, 0,
-        191, 89, 35, 0, 0, 195, 105, 16, 181, 89, 7, 4, 70, 12, 213, 7, 75,
-        0, 34, 25, 104, 203, 243, 122, 242, 5, 73, 32, 70, 16, 34, 35, 70, 189,
-        232, 16, 64, 255, 247, 104, 191, 16, 189, 0, 191, 172, 44, 4, 0, 185,
-        121, 128, 0, 19, 75, 19, 181, 19, 96, 19, 70, 1, 224, 17, 76, 28, 96,
-        4, 51, 173, 241, 124, 4, 163, 66, 248, 211, 196, 28, 36, 240, 3, 4,
-        13, 75, 9, 27, 13, 72, 25, 96, 0, 35, 3, 96, 12, 72, 8, 57, 3, 96, 11,
-        72, 132, 232, 10, 0, 3, 96, 10, 72, 2, 96, 10, 72, 2, 245, 0, 82, 2,
-        96, 9, 74, 19, 96, 190, 247, 16, 255, 68, 96, 28, 189, 75, 65, 84, 83,
-        44, 7, 0, 0, 76, 7, 0, 0, 120, 7, 0, 0, 28, 44, 4, 0, 128, 44, 4, 0,
-        40, 44, 4, 0, 40, 7, 0, 0, 8, 181, 0, 33, 20, 32, 190, 247, 17, 255,
-        5, 75, 0, 33, 24, 96, 20, 34, 192, 243, 231, 242, 189, 232, 8, 64, 196,
-        243, 139, 182, 0, 191, 100, 7, 0, 0, 45, 233, 240, 71, 77, 28, 41, 70,
-        130, 70, 5, 240, 41, 248, 19, 76, 32, 96, 0, 179, 79, 234, 133, 9, 72,
-        70, 0, 33, 190, 247, 244, 254, 15, 79, 128, 70, 56, 96, 15, 78, 104,
-        177, 74, 70, 0, 33, 192, 243, 199, 242, 32, 104, 0, 33, 192, 243, 103,
-        246, 59, 104, 0, 34, 26, 96, 53, 96, 189, 232, 240, 135, 80, 70, 33,
-        104, 5, 240, 93, 248, 198, 248, 0, 128, 196, 248, 0, 128, 189, 232,
-        240, 135, 0, 191, 48, 7, 0, 0, 32, 7, 0, 0, 60, 7, 0, 0, 240, 181, 24,
-        79, 133, 176, 15, 33, 56, 104, 4, 240, 75, 255, 15, 40, 3, 144, 62,
-        70, 36, 209, 132, 32, 0, 33, 190, 247, 193, 254, 18, 76, 32, 96, 208,
-        177, 0, 33, 132, 34, 192, 243, 150, 242, 0, 37, 1, 35, 4, 170, 66, 248,
-        4, 61, 0, 149, 1, 149, 56, 104, 33, 104, 79, 244, 240, 99, 4, 240, 93,
-        255, 1, 48, 32, 104, 3, 208, 40, 33, 194, 247, 177, 255, 5, 224, 190,
-        247, 44, 255, 37, 96, 48, 104, 4, 240, 64, 255, 5, 176, 240, 189, 172,
-        44, 4, 0, 116, 7, 0, 0, 177, 245, 224, 111, 115, 181, 4, 70, 14, 70,
-        21, 70, 6, 209, 3, 105, 0, 145, 0, 33, 1, 145, 30, 104, 10, 70, 12,
-        224, 13, 75, 0, 34, 24, 104, 203, 243, 65, 243, 1, 70, 128, 177, 35,
-        105, 0, 34, 0, 150, 1, 146, 30, 104, 32, 70, 43, 70, 176, 71, 56, 177,
-        6, 75, 160, 97, 26, 104, 101, 97, 34, 98, 28, 96, 0, 32, 1, 224, 79,
-        240, 255, 48, 124, 189, 0, 191, 56, 7, 0, 0, 16, 28, 4, 0, 45, 233,
-        248, 67, 16, 32, 12, 70, 0, 33, 145, 70, 152, 70, 190, 247, 99, 254,
-        5, 70, 32, 179, 20, 78, 48, 104, 202, 243, 215, 247, 9, 155, 7, 70,
-        35, 185, 48, 104, 33, 70, 74, 70, 203, 243, 15, 243, 48, 104, 203, 243,
-        150, 240, 1, 35, 131, 64, 8, 154, 235, 96, 170, 96, 11, 74, 197, 248,
-        4, 128, 17, 104, 21, 96, 9, 74, 41, 96, 17, 104, 48, 104, 11, 67, 19,
-        96, 57, 70, 203, 243, 7, 243, 0, 32, 189, 232, 248, 131, 111, 240, 26,
-        0, 189, 232, 248, 131, 56, 7, 0, 0, 112, 7, 0, 0, 72, 7, 0, 0, 19, 181,
-        0, 33, 4, 70, 203, 243, 245, 242, 23, 75, 24, 96, 23, 75, 0, 245, 112,
-        96, 24, 96, 99, 105, 34, 43, 18, 221, 227, 105, 88, 6, 15, 213, 64,
-        246, 39, 1, 0, 34, 32, 70, 203, 243, 75, 240, 1, 70, 32, 70, 203, 243,
-        223, 242, 14, 75, 0, 33, 24, 96, 32, 70, 203, 243, 217, 242, 0, 32,
-        79, 244, 0, 97, 2, 70, 10, 75, 0, 144, 1, 144, 255, 247, 156, 255, 40,
-        177, 1, 32, 2, 176, 189, 232, 16, 64, 191, 247, 221, 187, 2, 176, 16,
-        189, 0, 191, 92, 7, 0, 0, 180, 44, 4, 0, 104, 7, 0, 0, 165, 121, 128,
-        0, 115, 181, 55, 75, 55, 76, 1, 147, 55, 75, 0, 33, 32, 34, 32, 70,
-        29, 104, 38, 105, 192, 243, 198, 241, 1, 35, 35, 96, 51, 75, 38, 97,
-        27, 104, 227, 97, 69, 248, 4, 76, 0, 240, 72, 252, 173, 245, 254, 81,
-        60, 57, 10, 70, 46, 72, 255, 247, 139, 254, 196, 243, 7, 241, 196, 243,
-        47, 245, 0, 240, 115, 248, 255, 247, 33, 254, 0, 32, 6, 240, 88, 250,
-        40, 77, 41, 76, 40, 96, 6, 240, 11, 254, 32, 96, 255, 247, 148, 255,
-        255, 247, 174, 254, 32, 104, 0, 240, 41, 251, 32, 104, 6, 240, 108,
-        250, 34, 75, 32, 104, 26, 104, 2, 245, 128, 50, 26, 96, 32, 75, 26,
-        104, 2, 245, 128, 50, 26, 96, 31, 75, 26, 104, 2, 245, 128, 50, 26,
-        96, 0, 240, 192, 248, 0, 34, 28, 72, 28, 73, 196, 243, 123, 246, 2,
-        34, 27, 72, 28, 73, 196, 243, 118, 246, 0, 34, 27, 72, 27, 73, 196,
-        243, 113, 246, 0, 34, 26, 73, 27, 72, 196, 243, 108, 246, 32, 104, 255,
-        247, 21, 254, 32, 104, 255, 247, 24, 254, 32, 104, 255, 247, 41, 254,
-        40, 104, 64, 242, 143, 17, 255, 247, 134, 254, 255, 247, 184, 254, 32,
-        104, 124, 189, 173, 222, 173, 222, 140, 44, 4, 0, 140, 16, 4, 0, 176,
-        44, 4, 0, 12, 249, 5, 0, 172, 44, 4, 0, 56, 7, 0, 0, 44, 7, 0, 0, 76,
-        7, 0, 0, 28, 44, 4, 0, 195, 242, 3, 0, 125, 39, 0, 0, 170, 222, 3, 0,
-        229, 123, 128, 0, 125, 183, 3, 0, 233, 125, 128, 0, 217, 121, 128, 0,
-        128, 183, 3, 0, 112, 71, 0, 0, 112, 181, 23, 77, 44, 104, 44, 187, 176,
-        32, 33, 70, 190, 247, 88, 253, 40, 96, 16, 179, 33, 70, 176, 34, 192,
-        243, 46, 241, 79, 244, 128, 96, 33, 70, 46, 104, 190, 247, 76, 253,
-        176, 96, 40, 104, 134, 104, 30, 185, 190, 247, 206, 253, 46, 96, 13,
-        224, 79, 244, 128, 98, 194, 96, 33, 70, 48, 70, 192, 243, 25, 241, 43,
-        104, 6, 74, 32, 70, 19, 96, 6, 74, 83, 97, 112, 189, 79, 240, 255, 48,
-        112, 189, 79, 240, 255, 48, 112, 189, 204, 44, 4, 0, 124, 7, 0, 0, 140,
-        44, 4, 0, 112, 181, 24, 76, 5, 70, 35, 104, 51, 185, 23, 78, 51, 104,
-        11, 185, 255, 247, 192, 255, 51, 104, 35, 96, 32, 104, 8, 179, 0, 35,
-        3, 96, 192, 248, 156, 48, 67, 96, 1, 35, 128, 248, 164, 48, 107, 108,
-        14, 59, 1, 43, 3, 217, 40, 70, 13, 73, 255, 247, 192, 252, 12, 75, 154,
-        104, 18, 177, 34, 104, 194, 248, 156, 48, 32, 104, 1, 35, 192, 248,
-        156, 48, 196, 243, 178, 245, 7, 72, 8, 73, 34, 104, 196, 243, 207, 245,
-        32, 104, 112, 189, 0, 191, 124, 7, 0, 0, 204, 44, 4, 0, 153, 56, 4,
-        0, 188, 44, 4, 0, 172, 185, 135, 0, 97, 133, 128, 0, 16, 181, 0, 35,
-        4, 70, 16, 34, 10, 73, 255, 247, 249, 252, 0, 33, 32, 70, 197, 247,
-        155, 253, 0, 34, 32, 70, 79, 244, 160, 81, 197, 247, 243, 252, 5, 75,
-        0, 34, 32, 70, 154, 96, 189, 232, 16, 64, 255, 247, 169, 191, 0, 191,
-        33, 132, 128, 0, 188, 44, 4, 0, 56, 181, 4, 70, 13, 70, 81, 177, 16,
-        32, 196, 243, 175, 246, 4, 75, 24, 96, 32, 177, 128, 232, 48, 0, 79,
-        244, 240, 99, 131, 96, 56, 189, 208, 44, 4, 0, 19, 75, 2, 70, 27, 104,
-        0, 104, 16, 181, 0, 244, 112, 65, 220, 30, 9, 11, 4, 44, 8, 216, 0,
-        244, 112, 96, 0, 10, 14, 48, 1, 35, 19, 250, 0, 240, 72, 67, 16, 189,
-        7, 43, 12, 216, 0, 32, 16, 189, 67, 244, 128, 116, 20, 97, 20, 108,
-        1, 51, 4, 240, 127, 4, 1, 52, 100, 3, 0, 25, 1, 224, 0, 35, 24, 70,
-        139, 66, 240, 209, 16, 189, 40, 32, 0, 0, 3, 104, 64, 104, 24, 24, 35,
-        240, 7, 3, 8, 51, 152, 66, 140, 191, 0, 32, 1, 32, 112, 71, 0, 0, 4,
-        75, 5, 74, 24, 104, 144, 66, 26, 191, 0, 241, 8, 2, 26, 96, 0, 32, 112,
-        71, 152, 16, 4, 0, 0, 24, 0, 0, 45, 233, 243, 65, 144, 232, 72, 0, 35,
-        240, 7, 4, 8, 52, 19, 240, 7, 2, 2, 209, 157, 25, 172, 66, 74, 208,
-        53, 70, 128, 104, 0, 34, 3, 224, 135, 92, 13, 248, 2, 112, 1, 50, 178,
-        66, 249, 209, 158, 24, 166, 66, 4, 217, 0, 41, 61, 208, 54, 27, 149,
-        27, 0, 224, 0, 38, 35, 240, 7, 7, 199, 235, 3, 12, 0, 34, 4, 224, 18,
-        248, 7, 128, 0, 248, 2, 128, 1, 50, 98, 69, 248, 209, 130, 24, 0, 32,
-        3, 224, 29, 248, 0, 112, 23, 84, 1, 48, 168, 66, 249, 209, 91, 25, 82,
-        25, 231, 26, 0, 32, 4, 224, 19, 248, 0, 192, 2, 248, 0, 192, 1, 48,
-        184, 66, 248, 209, 0, 46, 24, 221, 0, 171, 93, 25, 0, 35, 234, 92, 202,
-        84, 1, 51, 179, 66, 250, 209, 201, 24, 228, 24, 0, 34, 195, 241, 8,
-        3, 2, 224, 160, 92, 136, 84, 1, 50, 154, 66, 250, 209, 4, 224, 16, 70,
-        3, 224, 79, 240, 255, 48, 0, 224, 0, 32, 189, 232, 252, 129, 45, 233,
-        240, 71, 28, 75, 29, 76, 0, 38, 196, 235, 3, 8, 28, 75, 79, 234, 168,
-        8, 3, 251, 8, 248, 71, 70, 41, 224, 35, 104, 212, 248, 8, 160, 35, 240,
-        7, 9, 0, 37, 26, 248, 5, 32, 21, 248, 9, 48, 154, 66, 2, 208, 1, 32,
-        191, 247, 215, 249, 1, 53, 8, 45, 243, 209, 32, 70, 255, 247, 99, 255,
-        136, 185, 14, 75, 5, 70, 3, 235, 199, 10, 1, 55, 5, 235, 9, 3, 26, 248,
-        5, 32, 27, 122, 154, 66, 2, 208, 1, 32, 191, 247, 193, 249, 1, 53, 8,
-        45, 242, 209, 1, 54, 12, 52, 70, 69, 211, 219, 189, 232, 240, 135, 104,
-        31, 0, 0, 0, 24, 0, 0, 171, 170, 170, 170, 0, 16, 0, 0, 20, 75, 45,
-        233, 240, 71, 27, 104, 19, 77, 155, 104, 19, 79, 3, 240, 15, 9, 127,
-        27, 1, 35, 18, 74, 3, 250, 9, 249, 187, 16, 2, 251, 3, 248, 0, 38, 68,
-        70, 6, 224, 40, 70, 255, 247, 43, 255, 0, 185, 1, 52, 1, 54, 12, 53,
-        70, 69, 246, 219, 34, 70, 187, 16, 79, 240, 85, 52, 4, 251, 3, 35, 7,
-        72, 73, 70, 189, 232, 240, 71, 191, 243, 173, 183, 0, 191, 36, 32, 0,
-        0, 0, 24, 0, 0, 104, 31, 0, 0, 171, 170, 170, 170, 151, 183, 3, 0, 65,
-        244, 0, 49, 56, 181, 66, 99, 4, 70, 1, 99, 101, 37, 2, 224, 10, 32,
-        196, 243, 223, 242, 35, 107, 0, 43, 1, 219, 1, 61, 247, 209, 56, 189,
-        131, 106, 67, 240, 0, 67, 131, 98, 112, 71, 131, 106, 35, 240, 0, 67,
-        131, 98, 112, 71, 248, 181, 134, 104, 5, 70, 1, 36, 15, 70, 6, 240,
-        15, 6, 255, 247, 242, 255, 20, 250, 6, 246, 172, 98, 239, 98, 0, 36,
-        5, 224, 161, 178, 40, 70, 0, 34, 255, 247, 209, 255, 1, 52, 180, 66,
-        247, 219, 248, 189, 0, 0, 45, 233, 240, 65, 255, 247, 226, 254, 25,
-        78, 26, 75, 223, 248, 112, 128, 25, 79, 246, 26, 25, 75, 200, 235, 7,
-        7, 0, 40, 20, 191, 5, 70, 29, 70, 4, 70, 93, 27, 255, 247, 131, 255,
-        71, 177, 0, 33, 64, 70, 58, 70, 191, 243, 45, 247, 64, 70, 57, 70, 195,
-        243, 67, 247, 70, 177, 0, 33, 12, 72, 50, 70, 191, 243, 35, 247, 10,
-        72, 49, 70, 195, 243, 57, 247, 85, 177, 0, 33, 32, 70, 42, 70, 191,
-        243, 25, 247, 32, 70, 41, 70, 189, 232, 240, 65, 195, 243, 45, 183,
-        189, 232, 240, 129, 0, 191, 104, 31, 0, 0, 0, 24, 0, 0, 0, 16, 0, 0,
-        0, 24, 0, 0, 129, 8, 0, 0, 66, 75, 45, 233, 247, 79, 29, 104, 65, 73,
-        40, 70, 255, 247, 157, 255, 64, 74, 65, 75, 169, 104, 211, 26, 64, 74,
-        155, 16, 90, 67, 1, 146, 113, 208, 1, 32, 1, 240, 15, 1, 16, 250, 1,
-        241, 138, 66, 1, 221, 191, 247, 236, 248, 40, 70, 255, 247, 81, 254,
-        57, 75, 160, 241, 4, 11, 26, 104, 153, 70, 14, 42, 1, 216, 134, 16,
-        0, 224, 1, 38, 79, 240, 0, 8, 49, 76, 76, 224, 99, 104, 1, 59, 7, 43,
-        1, 216, 163, 104, 19, 185, 1, 32, 191, 247, 210, 248, 32, 70, 255, 247,
-        97, 254, 56, 185, 255, 247, 106, 254, 7, 70, 32, 185, 1, 32, 191, 247,
-        199, 248, 0, 224, 0, 39, 32, 70, 57, 70, 255, 247, 109, 254, 16, 177,
-        1, 32, 191, 247, 189, 248, 223, 248, 124, 160, 161, 104, 34, 104, 217,
-        248, 0, 48, 202, 235, 1, 1, 34, 240, 7, 2, 201, 16, 14, 43, 150, 191,
-        2, 234, 11, 2, 50, 67, 70, 234, 146, 2, 137, 178, 40, 70, 255, 247,
-        43, 255, 167, 177, 34, 104, 217, 248, 0, 48, 34, 240, 7, 2, 202, 235,
-        7, 1, 8, 50, 201, 16, 14, 43, 152, 191, 2, 234, 11, 2, 137, 178, 140,
-        191, 50, 67, 70, 234, 146, 2, 40, 70, 255, 247, 21, 255, 8, 241, 1,
-        8, 12, 52, 1, 155, 152, 69, 175, 219, 40, 70, 255, 247, 29, 255, 3,
-        176, 189, 232, 240, 79, 255, 247, 143, 190, 3, 176, 189, 232, 240, 143,
-        36, 32, 0, 0, 0, 16, 0, 0, 104, 31, 0, 0, 0, 24, 0, 0, 171, 170, 170,
-        170, 40, 32, 0, 0, 45, 233, 247, 67, 4, 70, 202, 243, 79, 246, 32, 70,
-        0, 240, 136, 249, 107, 72, 190, 247, 245, 248, 32, 70, 195, 243, 6,
-        241, 0, 245, 120, 112, 79, 244, 122, 115, 7, 48, 103, 79, 176, 251,
-        243, 240, 56, 96, 32, 70, 195, 243, 250, 240, 100, 75, 101, 74, 195,
-        24, 97, 105, 179, 251, 242, 243, 99, 74, 34, 41, 19, 96, 99, 78, 99,
-        77, 4, 221, 227, 105, 88, 6, 1, 213, 51, 104, 0, 224, 43, 104, 3, 245,
-        194, 99, 4, 51, 211, 248, 0, 224, 48, 104, 43, 104, 34, 41, 5, 221,
-        226, 105, 82, 6, 2, 213, 0, 245, 194, 98, 1, 224, 3, 245, 194, 98, 4,
-        50, 18, 104, 150, 69, 241, 208, 34, 41, 5, 221, 226, 105, 82, 6, 2,
-        213, 0, 245, 194, 99, 1, 224, 3, 245, 194, 99, 4, 51, 211, 248, 0, 128,
-        190, 247, 144, 248, 49, 104, 129, 70, 96, 105, 42, 104, 16, 37, 34,
-        40, 5, 221, 227, 105, 91, 6, 2, 213, 1, 245, 194, 99, 1, 224, 2, 245,
-        194, 99, 4, 51, 27, 104, 152, 69, 241, 208, 34, 40, 5, 221, 227, 105,
-        94, 6, 2, 213, 1, 245, 194, 99, 1, 224, 2, 245, 194, 99, 4, 51, 1, 61,
-        211, 248, 0, 128, 226, 209, 190, 247, 108, 248, 58, 104, 201, 235, 0,
-        6, 178, 250, 130, 243, 154, 64, 25, 31, 178, 251, 246, 242, 56, 75,
-        1, 50, 26, 96, 79, 244, 122, 115, 162, 251, 3, 35, 53, 72, 202, 64,
-        1, 96, 193, 241, 32, 1, 19, 250, 1, 240, 128, 24, 196, 247, 32, 249,
-        57, 104, 4, 35, 15, 224, 181, 250, 133, 242, 182, 250, 134, 240, 1,
-        58, 130, 66, 168, 191, 2, 70, 150, 64, 149, 64, 155, 24, 182, 251, 241,
-        242, 1, 251, 18, 102, 85, 25, 21, 240, 64, 79, 236, 208, 38, 74, 19,
-        96, 38, 75, 64, 242, 255, 50, 29, 96, 35, 106, 0, 43, 36, 75, 200, 191,
-        111, 240, 127, 66, 26, 96, 99, 105, 34, 43, 12, 221, 227, 105, 88, 6,
-        9, 213, 0, 32, 64, 246, 39, 1, 2, 70, 30, 75, 0, 144, 1, 144, 255, 247,
-        108, 251, 5, 224, 32, 70, 26, 73, 32, 34, 0, 35, 255, 247, 229, 249,
-        0, 32, 24, 73, 194, 247, 157, 251, 24, 77, 40, 96, 120, 177, 1, 32,
-        195, 243, 247, 247, 32, 70, 45, 104, 195, 243, 63, 240, 181, 251, 240,
-        240, 79, 244, 122, 117, 69, 67, 17, 75, 165, 245, 250, 101, 29, 96,
-        189, 232, 254, 131, 165, 48, 0, 0, 156, 16, 4, 0, 63, 66, 15, 0, 64,
-        66, 15, 0, 216, 6, 0, 0, 104, 7, 0, 0, 92, 7, 0, 0, 204, 6, 0, 0, 208,
-        6, 0, 0, 200, 6, 0, 0, 196, 6, 0, 0, 212, 6, 0, 0, 85, 128, 128, 0,
-        125, 29, 5, 0, 180, 7, 0, 0, 176, 7, 0, 0, 13, 75, 0, 33, 26, 104, 66,
-        240, 16, 2, 26, 96, 26, 104, 34, 244, 0, 114, 26, 96, 9, 74, 19, 104,
-        67, 240, 128, 115, 67, 244, 128, 51, 19, 96, 7, 75, 7, 34, 26, 96, 67,
-        248, 4, 28, 89, 104, 90, 96, 4, 75, 32, 34, 26, 96, 112, 71, 20, 237,
-        0, 224, 252, 237, 0, 224, 36, 16, 0, 224, 0, 228, 0, 224, 112, 181,
-        4, 70, 14, 70, 202, 243, 43, 245, 32, 70, 202, 243, 230, 242, 5, 70,
-        191, 247, 37, 248, 64, 246, 42, 1, 2, 70, 32, 70, 202, 243, 29, 246,
-        130, 105, 67, 105, 38, 177, 66, 240, 0, 66, 67, 240, 0, 67, 3, 224,
-        34, 240, 0, 66, 35, 240, 0, 67, 130, 97, 41, 70, 67, 97, 32, 70, 189,
-        232, 112, 64, 202, 243, 23, 182, 45, 233, 248, 67, 4, 70, 30, 70, 144,
-        70, 13, 70, 202, 243, 3, 245, 32, 70, 202, 243, 190, 242, 65, 70, 50,
-        70, 7, 70, 32, 70, 202, 243, 248, 245, 32, 70, 202, 243, 127, 243, 6,
-        70, 190, 247, 244, 255, 64, 246, 42, 1, 2, 70, 32, 70, 202, 243, 236,
-        245, 79, 240, 1, 8, 129, 70, 133, 177, 8, 250, 6, 245, 131, 105, 51,
-        234, 5, 5, 2, 209, 64, 70, 189, 247, 95, 255, 1, 54, 1, 32, 176, 64,
-        189, 247, 76, 255, 201, 248, 24, 80, 14, 224, 112, 28, 8, 250, 6, 246,
-        8, 250, 0, 240, 189, 247, 80, 255, 64, 70, 189, 247, 63, 255, 217, 248,
-        24, 48, 30, 67, 201, 248, 24, 96, 32, 70, 57, 70, 189, 232, 248, 67,
-        202, 243, 208, 181, 45, 233, 248, 67, 4, 70, 202, 243, 191, 244, 32,
-        70, 64, 246, 14, 1, 0, 34, 202, 243, 183, 245, 5, 70, 0, 40, 56, 208,
-        32, 70, 202, 243, 175, 244, 1, 70, 24, 185, 32, 70, 10, 70, 202, 243,
-        95, 242, 32, 70, 47, 104, 213, 248, 0, 128, 202, 243, 109, 242, 4, 40,
-        6, 70, 5, 216, 37, 209, 8, 244, 224, 40, 184, 245, 64, 63, 32, 209,
-        0, 32, 79, 73, 194, 247, 174, 250, 216, 185, 7, 240, 240, 7, 63, 9,
-        15, 224, 1, 63, 7, 46, 47, 97, 8, 217, 12, 46, 6, 208, 43, 108, 3, 244,
-        64, 99, 179, 245, 64, 111, 0, 208, 16, 177, 69, 75, 1, 32, 107, 97,
-        0, 47, 237, 209, 213, 248, 232, 49, 35, 240, 16, 3, 197, 248, 232, 49,
-        190, 247, 123, 255, 64, 246, 42, 1, 2, 70, 32, 70, 202, 243, 115, 245,
-        61, 77, 6, 70, 40, 96, 190, 247, 112, 255, 49, 70, 2, 70, 58, 72, 191,
-        243, 177, 244, 32, 70, 202, 243, 46, 242, 56, 75, 24, 96, 43, 104, 26,
-        104, 66, 240, 128, 114, 26, 96, 26, 104, 66, 240, 2, 2, 26, 96, 0, 34,
-        195, 248, 224, 33, 98, 105, 39, 42, 5, 221, 211, 248, 224, 33, 66, 240,
-        64, 2, 195, 248, 224, 33, 64, 242, 221, 86, 2, 224, 10, 32, 195, 243,
-        217, 247, 43, 104, 211, 248, 224, 49, 155, 3, 1, 212, 1, 62, 245, 209,
-        0, 33, 11, 70, 32, 70, 79, 244, 0, 98, 255, 247, 50, 255, 0, 33, 11,
-        70, 32, 70, 64, 246, 18, 2, 255, 247, 43, 255, 0, 33, 11, 70, 32, 70,
-        64, 246, 41, 2, 255, 247, 36, 255, 32, 70, 1, 33, 255, 247, 251, 254,
-        0, 32, 26, 73, 194, 247, 59, 250, 0, 179, 32, 70, 202, 243, 225, 241,
-        6, 70, 190, 247, 32, 255, 64, 246, 42, 1, 2, 70, 32, 70, 202, 243, 24,
-        245, 208, 248, 20, 144, 7, 70, 208, 248, 152, 128, 32, 70, 202, 243,
-        208, 241, 1, 35, 131, 64, 67, 234, 9, 3, 123, 97, 72, 240, 1, 3, 199,
-        248, 152, 48, 32, 70, 49, 70, 202, 243, 17, 245, 43, 104, 26, 106, 66,
-        240, 3, 2, 26, 98, 189, 232, 248, 131, 136, 29, 5, 0, 255, 127, 1, 33,
-        212, 44, 4, 0, 169, 184, 3, 0, 220, 44, 4, 0, 147, 29, 5, 0, 1, 34,
-        10, 35, 48, 181, 64, 33, 6, 37, 192, 248, 152, 49, 192, 248, 156, 33,
-        32, 35, 192, 248, 176, 33, 200, 34, 192, 248, 160, 49, 192, 248, 168,
-        17, 7, 35, 79, 244, 240, 97, 192, 248, 180, 33, 192, 248, 220, 81, 8,
-        34, 28, 37, 16, 36, 192, 248, 164, 49, 192, 248, 188, 33, 192, 248,
-        192, 33, 192, 248, 196, 49, 192, 248, 200, 17, 192, 248, 204, 33, 4,
-        33, 3, 34, 192, 248, 224, 81, 192, 248, 240, 49, 12, 37, 0, 35, 192,
-        248, 208, 17, 192, 248, 212, 65, 192, 248, 216, 33, 192, 248, 228, 81,
-        192, 248, 232, 65, 192, 248, 236, 17, 192, 248, 244, 49, 192, 248, 252,
-        49, 192, 248, 0, 34, 48, 189, 65, 242, 228, 67, 152, 66, 6, 209, 68,
-        242, 244, 48, 11, 26, 88, 66, 64, 235, 3, 0, 112, 71, 0, 32, 112, 71,
-        208, 248, 28, 18, 56, 181, 4, 70, 89, 177, 128, 104, 4, 240, 218, 248,
-        5, 70, 212, 248, 28, 2, 196, 247, 31, 250, 0, 35, 196, 248, 28, 50,
-        0, 224, 13, 70, 40, 70, 56, 189, 127, 181, 4, 70, 6, 35, 132, 32, 3,
-        147, 196, 247, 14, 250, 196, 248, 28, 2, 184, 177, 0, 33, 132, 34, 191,
-        243, 161, 243, 0, 37, 28, 35, 160, 104, 212, 248, 28, 18, 3, 170, 0,
-        149, 1, 149, 4, 240, 107, 248, 6, 70, 1, 48, 8, 209, 212, 248, 28, 2,
-        196, 247, 249, 249, 196, 248, 28, 82, 1, 224, 79, 240, 255, 54, 48,
-        70, 4, 176, 112, 189, 45, 233, 240, 65, 4, 70, 13, 70, 22, 70, 152,
-        70, 64, 242, 233, 55, 2, 224, 10, 32, 195, 243, 234, 246, 99, 105, 26,
-        109, 0, 42, 4, 218, 1, 63, 246, 209, 56, 70, 189, 232, 240, 129, 6,
-        154, 70, 68, 54, 2, 178, 241, 128, 127, 70, 240, 0, 70, 3, 209, 42,
-        120, 66, 240, 128, 114, 182, 24, 30, 101, 64, 242, 233, 54, 2, 224,
-        10, 32, 195, 243, 206, 246, 99, 105, 27, 109, 0, 43, 3, 219, 43, 112,
-        1, 32, 189, 232, 240, 129, 1, 62, 242, 209, 48, 70, 189, 232, 240, 129,
-        0, 0, 45, 233, 240, 67, 139, 176, 29, 70, 221, 248, 72, 144, 159, 75,
-        8, 70, 195, 248, 0, 144, 17, 70, 23, 70, 255, 247, 116, 255, 0, 40,
-        0, 240, 48, 129, 79, 244, 11, 112, 196, 247, 163, 249, 4, 70, 0, 40,
-        0, 240, 41, 129, 0, 33, 79, 244, 11, 114, 191, 243, 52, 243, 165, 96,
-        196, 248, 20, 144, 32, 70, 255, 247, 28, 255, 145, 75, 30, 104, 196,
-        248, 24, 98, 30, 177, 54, 120, 0, 54, 24, 191, 1, 38, 4, 241, 40, 8,
-        64, 70, 2, 33, 65, 34, 192, 243, 50, 243, 0, 35, 0, 147, 1, 147, 2,
-        147, 56, 70, 41, 70, 74, 70, 19, 155, 5, 240, 162, 255, 224, 96, 0,
-        40, 0, 240, 250, 128, 202, 243, 164, 240, 32, 96, 224, 104, 202, 243,
-        176, 240, 103, 105, 128, 74, 123, 104, 128, 73, 3, 240, 1, 3, 131, 240,
-        1, 3, 212, 248, 0, 192, 0, 43, 24, 191, 17, 70, 132, 248, 122, 49, 64,
-        246, 41, 3, 156, 69, 96, 96, 212, 248, 8, 224, 226, 104, 7, 245, 0,
-        115, 3, 209, 16, 177, 7, 245, 8, 119, 1, 224, 7, 245, 4, 119, 0, 151,
-        212, 248, 188, 1, 1, 144, 212, 248, 192, 1, 2, 144, 212, 248, 200, 1,
-        3, 144, 79, 240, 255, 48, 4, 144, 212, 248, 196, 1, 5, 144, 8, 32, 6,
-        144, 0, 32, 7, 144, 112, 70, 4, 240, 88, 249, 96, 98, 0, 40, 0, 240,
-        186, 128, 212, 248, 24, 18, 100, 79, 185, 177, 11, 120, 171, 177, 215,
-        248, 176, 48, 152, 71, 98, 73, 34, 70, 212, 248, 24, 2, 192, 243, 67,
-        242, 212, 248, 24, 2, 95, 73, 34, 70, 3, 240, 251, 255, 46, 177, 32,
-        70, 255, 247, 8, 255, 0, 40, 64, 240, 158, 128, 2, 33, 10, 70, 215,
-        248, 184, 48, 96, 106, 152, 71, 32, 70, 0, 33, 226, 104, 43, 70, 0,
-        240, 110, 249, 32, 97, 0, 40, 0, 240, 142, 128, 0, 33, 11, 70, 32, 70,
-        81, 74, 195, 243, 110, 243, 0, 35, 196, 248, 148, 1, 132, 248, 125,
-        49, 78, 72, 196, 247, 129, 250, 16, 179, 191, 243, 241, 244, 1, 35,
-        131, 64, 75, 72, 196, 248, 132, 49, 196, 247, 119, 250, 16, 177, 191,
-        243, 231, 244, 8, 177, 212, 248, 132, 1, 196, 248, 136, 1, 69, 73, 0,
-        32, 194, 247, 116, 248, 3, 12, 164, 248, 140, 49, 164, 248, 142, 1,
-        59, 177, 0, 33, 32, 70, 64, 74, 11, 70, 195, 243, 68, 243, 196, 248,
-        144, 1, 0, 32, 62, 73, 194, 247, 98, 248, 1, 40, 8, 191, 132, 248, 34,
-        2, 32, 70, 190, 247, 77, 253, 0, 40, 53, 208, 0, 32, 1, 37, 196, 248,
-        164, 1, 132, 248, 42, 82, 54, 73, 194, 247, 80, 248, 32, 177, 132, 248,
-        5, 82, 52, 72, 191, 243, 124, 242, 0, 32, 51, 73, 194, 247, 70, 248,
-        192, 178, 141, 248, 38, 0, 104, 177, 0, 240, 15, 0, 79, 240, 128, 115,
-        10, 169, 1, 248, 2, 13, 79, 244, 64, 114, 0, 147, 32, 70, 15, 35, 255,
-        247, 184, 254, 10, 169, 8, 35, 1, 248, 1, 61, 99, 105, 0, 34, 29, 111,
-        26, 103, 79, 240, 128, 115, 0, 147, 32, 70, 240, 35, 255, 247, 169,
-        254, 99, 105, 29, 103, 33, 73, 34, 70, 33, 72, 195, 243, 34, 247, 32,
-        72, 195, 243, 183, 245, 32, 75, 4, 245, 132, 114, 81, 28, 26, 96, 3,
-        50, 218, 96, 212, 248, 240, 32, 89, 96, 4, 245, 133, 113, 153, 96, 195,
-        248, 16, 128, 90, 97, 5, 224, 32, 70, 196, 247, 124, 248, 0, 36, 0,
-        224, 4, 70, 32, 70, 11, 176, 189, 232, 240, 131, 184, 7, 0, 0, 116,
-        7, 0, 0, 170, 29, 5, 0, 188, 29, 5, 0, 208, 134, 135, 0, 105, 57, 0,
-        0, 77, 49, 0, 0, 229, 57, 0, 0, 209, 29, 5, 0, 251, 29, 5, 0, 243, 29,
-        5, 0, 165, 196, 128, 0, 198, 29, 5, 0, 178, 29, 5, 0, 218, 29, 5, 0,
-        158, 29, 5, 0, 77, 196, 128, 0, 206, 184, 3, 0, 77, 193, 128, 0, 224,
-        44, 4, 0, 56, 181, 0, 37, 4, 70, 128, 248, 121, 81, 0, 105, 0, 240,
-        204, 248, 32, 70, 199, 243, 211, 246, 224, 104, 41, 70, 201, 243, 101,
-        247, 212, 248, 148, 1, 40, 177, 189, 247, 152, 255, 212, 248, 148, 1,
-        195, 243, 84, 242, 212, 248, 144, 1, 40, 177, 189, 247, 143, 255, 212,
-        248, 144, 1, 195, 243, 75, 242, 224, 104, 5, 240, 12, 252, 212, 248,
-        28, 50, 35, 177, 27, 120, 19, 177, 32, 70, 255, 247, 245, 253, 32, 70,
-        189, 232, 56, 64, 196, 247, 28, 184, 16, 181, 132, 105, 160, 104, 255,
-        247, 202, 255, 224, 104, 5, 240, 103, 250, 0, 32, 16, 189, 0, 0, 16,
-        181, 132, 105, 0, 33, 52, 34, 4, 241, 28, 0, 191, 243, 160, 241, 3,
-        75, 160, 104, 99, 98, 36, 98, 199, 243, 194, 244, 0, 32, 16, 189, 53,
-        203, 128, 0, 45, 233, 243, 71, 39, 77, 153, 70, 43, 104, 6, 70, 7, 43,
-        15, 70, 146, 70, 64, 220, 5, 240, 56, 250, 128, 70, 80, 32, 195, 247,
-        236, 255, 4, 70, 0, 40, 58, 208, 0, 33, 80, 34, 191, 243, 127, 241,
-        43, 104, 164, 248, 20, 144, 132, 232, 72, 0, 39, 97, 196, 248, 12, 128,
-        32, 70, 65, 242, 228, 65, 74, 70, 67, 70, 141, 232, 128, 4, 255, 247,
-        28, 254, 160, 96, 16, 179, 0, 32, 10, 153, 11, 154, 19, 75, 141, 232,
-        64, 4, 254, 247, 28, 255, 7, 70, 24, 177, 160, 104, 255, 247, 123, 255,
-        18, 224, 160, 104, 191, 247, 29, 250, 43, 104, 160, 97, 15, 33, 11,
-        74, 48, 70, 191, 243, 186, 241, 247, 115, 10, 72, 49, 70, 191, 243,
-        117, 241, 43, 104, 1, 51, 43, 96, 2, 224, 0, 36, 0, 224, 4, 70, 32,
-        70, 189, 232, 252, 135, 0, 191, 248, 44, 4, 0, 101, 203, 128, 0, 36,
-        30, 5, 0, 4, 30, 5, 0, 195, 247, 163, 191, 45, 233, 240, 65, 18, 79,
-        152, 70, 59, 120, 5, 70, 7, 43, 20, 70, 26, 216, 84, 32, 195, 247, 148,
-        255, 6, 70, 176, 177, 84, 34, 0, 33, 191, 243, 40, 241, 59, 120, 0,
-        34, 134, 248, 68, 48, 1, 51, 134, 232, 32, 1, 180, 96, 166, 248, 76,
-        32, 166, 248, 80, 32, 166, 248, 78, 32, 166, 248, 82, 32, 59, 112, 0,
-        224, 0, 38, 48, 70, 189, 232, 240, 129, 252, 44, 4, 0, 194, 107, 26,
-        177, 0, 35, 83, 98, 130, 107, 83, 98, 192, 104, 255, 247, 203, 191,
-        0, 0, 5, 74, 6, 75, 209, 126, 25, 112, 17, 127, 89, 112, 81, 127, 153,
-        112, 146, 127, 218, 112, 112, 71, 0, 191, 12, 249, 5, 0, 176, 44, 4,
-        0, 45, 233, 240, 79, 143, 176, 189, 247, 145, 254, 71, 78, 71, 77, 51,
-        104, 4, 144, 5, 147, 43, 104, 179, 245, 128, 95, 0, 242, 129, 128, 68,
-        79, 68, 73, 56, 104, 193, 247, 214, 254, 1, 40, 122, 208, 43, 104, 223,
-        248, 28, 145, 3, 147, 217, 248, 0, 48, 0, 36, 6, 147, 223, 248, 16,
-        129, 35, 104, 223, 248, 16, 161, 7, 147, 216, 248, 0, 48, 223, 248,
-        8, 177, 8, 147, 218, 248, 0, 48, 56, 74, 9, 147, 219, 248, 0, 48, 215,
-        248, 0, 192, 10, 147, 53, 75, 18, 104, 25, 104, 12, 146, 11, 145, 52,
-        73, 48, 29, 9, 104, 3, 154, 13, 145, 97, 70, 205, 248, 8, 192, 1, 147,
-        189, 247, 92, 252, 33, 70, 42, 104, 56, 104, 191, 243, 175, 240, 45,
-        74, 1, 155, 202, 248, 0, 32, 40, 73, 41, 74, 4, 152, 28, 96, 20, 96,
-        12, 96, 79, 240, 255, 50, 49, 26, 60, 96, 201, 248, 0, 64, 44, 96, 200,
-        248, 0, 64, 203, 248, 0, 64, 191, 243, 28, 247, 5, 153, 1, 155, 202,
-        67, 144, 66, 221, 248, 8, 192, 41, 209, 3, 154, 6, 153, 42, 96, 201,
-        248, 0, 16, 33, 104, 28, 74, 199, 248, 0, 192, 17, 96, 7, 154, 8, 153,
-        34, 96, 9, 154, 200, 248, 0, 16, 202, 248, 0, 32, 10, 153, 11, 154,
-        203, 248, 0, 16, 26, 96, 15, 73, 12, 155, 3, 154, 11, 96, 13, 155, 15,
-        73, 96, 70, 11, 96, 49, 29, 189, 247, 23, 252, 42, 104, 48, 29, 33,
-        70, 15, 176, 189, 232, 240, 79, 191, 243, 103, 176, 254, 231, 254, 231,
-        15, 176, 189, 232, 240, 143, 12, 249, 5, 0, 148, 16, 4, 0, 144, 16,
-        4, 0, 115, 30, 5, 0, 36, 32, 0, 0, 32, 32, 0, 0, 40, 32, 0, 0, 221,
-        186, 173, 187, 16, 32, 0, 0, 140, 16, 4, 0, 28, 32, 0, 0, 12, 32, 0,
-        0, 24, 32, 0, 0, 112, 71, 0, 0, 119, 75, 45, 233, 240, 79, 27, 104,
-        145, 176, 4, 59, 1, 43, 3, 216, 116, 75, 24, 104, 255, 247, 242, 255,
-        254, 247, 102, 254, 0, 33, 4, 70, 202, 243, 80, 241, 32, 70, 0, 33,
-        202, 243, 28, 241, 5, 70, 88, 177, 32, 70, 202, 243, 11, 240, 43, 106,
-        0, 43, 5, 218, 32, 70, 202, 243, 5, 240, 79, 240, 0, 67, 43, 98, 191,
-        247, 185, 254, 32, 70, 201, 243, 73, 245, 14, 169, 8, 34, 191, 243,
-        173, 242, 2, 70, 32, 70, 212, 248, 64, 176, 11, 146, 201, 243, 28, 245,
-        130, 70, 32, 70, 201, 243, 24, 245, 129, 70, 32, 70, 201, 243, 20, 245,
-        128, 70, 32, 70, 201, 243, 108, 245, 7, 70, 32, 70, 201, 243, 104, 245,
-        6, 70, 32, 70, 201, 243, 100, 245, 5, 70, 32, 70, 194, 243, 154, 242,
-        1, 70, 32, 70, 12, 145, 194, 243, 149, 242, 132, 70, 32, 70, 205, 248,
-        52, 192, 194, 243, 143, 242, 11, 154, 12, 153, 221, 248, 52, 192, 2,
-        146, 8, 245, 66, 72, 74, 74, 5, 245, 66, 69, 0, 245, 66, 64, 10, 245,
-        66, 74, 9, 245, 66, 73, 8, 245, 168, 120, 7, 245, 66, 71, 6, 245, 66,
-        70, 5, 245, 168, 117, 1, 245, 66, 65, 12, 245, 66, 76, 0, 245, 168,
-        112, 184, 251, 242, 248, 181, 251, 242, 245, 12, 245, 168, 124, 176,
-        251, 242, 240, 10, 245, 168, 122, 9, 245, 168, 121, 7, 245, 168, 119,
-        6, 245, 168, 118, 1, 245, 168, 113, 177, 251, 242, 241, 223, 248, 248,
-        224, 186, 251, 242, 250, 2, 251, 24, 153, 183, 251, 242, 247, 2, 251,
-        21, 102, 2, 251, 16, 194, 205, 248, 4, 224, 223, 248, 224, 224, 46,
-        75, 178, 251, 254, 242, 185, 251, 254, 249, 182, 251, 254, 246, 8, 145,
-        9, 146, 42, 73, 43, 74, 43, 72, 0, 147, 205, 248, 12, 176, 205, 248,
-        16, 160, 205, 248, 20, 144, 6, 151, 7, 150, 190, 243, 188, 247, 38,
-        72, 64, 246, 13, 1, 68, 242, 244, 50, 254, 247, 25, 253, 56, 177, 34,
-        72, 64, 246, 41, 1, 68, 242, 244, 50, 254, 247, 17, 253, 32, 185, 31,
-        74, 32, 75, 29, 77, 26, 96, 0, 224, 0, 37, 32, 70, 5, 240, 171, 250,
-        68, 242, 24, 51, 79, 246, 255, 114, 144, 66, 20, 191, 2, 70, 26, 70,
-        64, 246, 18, 1, 24, 72, 254, 247, 250, 252, 22, 73, 0, 40, 24, 191,
-        0, 33, 77, 177, 65, 177, 18, 75, 40, 70, 27, 104, 91, 104, 152, 71,
-        43, 105, 40, 70, 91, 104, 152, 71, 32, 70, 201, 243, 62, 247, 41, 70,
-        254, 247, 177, 254, 32, 70, 17, 176, 189, 232, 240, 143, 0, 191, 40,
-        32, 0, 0, 36, 32, 0, 0, 64, 66, 15, 0, 110, 30, 5, 0, 48, 30, 5, 0,
-        111, 30, 5, 0, 53, 30, 5, 0, 160, 16, 4, 0, 204, 16, 4, 0, 188, 7, 0,
-        0, 96, 17, 4, 0, 31, 181, 3, 0, 160, 134, 1, 0, 8, 70, 112, 71, 45,
-        233, 240, 79, 209, 248, 252, 48, 145, 176, 11, 147, 3, 245, 96, 99,
-        4, 70, 9, 147, 113, 225, 14, 34, 0, 35, 32, 70, 11, 169, 188, 243, 65,
-        240, 15, 40, 7, 70, 32, 70, 2, 209, 187, 243, 217, 247, 108, 225, 0,
-        34, 11, 169, 19, 70, 188, 243, 53, 240, 16, 240, 14, 15, 64, 240, 97,
-        129, 139, 78, 58, 13, 62, 64, 64, 242, 59, 67, 54, 10, 0, 244, 248,
-        120, 154, 66, 8, 146, 79, 234, 24, 24, 4, 209, 64, 246, 255, 115, 158,
-        66, 0, 240, 74, 129, 0, 244, 120, 83, 79, 234, 83, 43, 0, 43, 0, 240,
-        67, 129, 0, 244, 248, 42, 0, 244, 120, 3, 219, 12, 79, 234, 154, 58,
-        19, 235, 10, 2, 7, 147, 37, 209, 64, 242, 103, 51, 158, 66, 20, 209,
-        12, 171, 1, 147, 13, 171, 2, 147, 14, 171, 3, 147, 15, 171, 4, 147,
-        32, 70, 11, 169, 19, 70, 0, 146, 187, 243, 155, 247, 0, 40, 0, 240,
-        35, 129, 12, 155, 196, 248, 88, 51, 30, 225, 64, 242, 220, 83, 158,
-        66, 8, 208, 64, 242, 11, 83, 158, 66, 4, 208, 64, 246, 39, 3, 158, 66,
-        64, 240, 18, 129, 212, 248, 208, 80, 49, 70, 5, 241, 182, 3, 68, 248,
-        35, 112, 5, 241, 198, 3, 68, 248, 35, 0, 32, 70, 255, 247, 133, 255,
-        4, 235, 133, 3, 195, 248, 212, 0, 0, 39, 11, 224, 1, 34, 32, 70, 11,
-        169, 19, 70, 187, 243, 205, 247, 0, 240, 14, 0, 2, 40, 64, 240, 248,
-        128, 1, 55, 71, 69, 241, 209, 12, 171, 1, 147, 13, 171, 2, 147, 14,
-        171, 0, 39, 3, 147, 15, 171, 4, 147, 32, 70, 11, 169, 58, 70, 59, 70,
-        0, 151, 187, 243, 85, 247, 32, 177, 185, 70, 39, 224, 79, 240, 1, 9,
-        0, 224, 129, 70, 64, 35, 0, 147, 12, 171, 1, 147, 13, 171, 2, 147, 14,
-        171, 3, 147, 0, 34, 15, 171, 4, 147, 32, 70, 11, 169, 19, 70, 187, 243,
-        62, 247, 0, 40, 233, 209, 185, 241, 1, 15, 14, 208, 13, 155, 0, 43,
-        64, 240, 197, 128, 15, 155, 0, 43, 64, 240, 193, 128, 14, 154, 178,
-        245, 128, 95, 64, 240, 188, 128, 153, 70, 219, 231, 12, 154, 4, 235,
-        133, 3, 195, 248, 20, 33, 14, 154, 1, 39, 195, 248, 212, 33, 12, 171,
-        1, 147, 13, 171, 2, 147, 14, 171, 3, 147, 15, 171, 0, 34, 4, 147, 32,
-        70, 11, 169, 59, 70, 0, 146, 187, 243, 18, 247, 96, 177, 1, 47, 10,
-        209, 14, 155, 179, 245, 128, 95, 6, 209, 12, 153, 4, 235, 133, 2, 194,
-        248, 148, 17, 194, 248, 20, 50, 1, 55, 0, 40, 223, 209, 55, 70, 79,
-        240, 1, 8, 46, 70, 23, 224, 0, 37, 0, 35, 0, 147, 12, 171, 1, 147, 13,
-        171, 2, 147, 14, 171, 3, 147, 15, 171, 4, 147, 32, 70, 11, 169, 66,
-        70, 43, 70, 187, 243, 235, 246, 8, 177, 1, 53, 236, 231, 0, 45, 117,
-        208, 8, 241, 1, 8, 216, 69, 229, 209, 53, 70, 62, 70, 0, 39, 31, 224,
-        192, 35, 0, 147, 12, 171, 1, 147, 13, 171, 2, 147, 14, 171, 3, 147,
-        15, 171, 4, 147, 32, 70, 11, 169, 58, 70, 0, 35, 187, 243, 206, 246,
-        0, 40, 91, 208, 15, 155, 0, 43, 88, 209, 14, 155, 179, 245, 128, 95,
-        84, 209, 39, 185, 12, 154, 5, 241, 166, 3, 68, 248, 35, 32, 1, 55, 87,
-        69, 221, 209, 0, 39, 57, 224, 0, 255, 15, 0, 128, 35, 0, 147, 12, 171,
-        1, 147, 13, 171, 2, 147, 14, 171, 3, 147, 15, 171, 187, 241, 1, 15,
-        12, 191, 58, 70, 122, 28, 4, 147, 32, 70, 0, 35, 11, 169, 187, 243,
-        164, 246, 8, 154, 64, 242, 59, 67, 154, 66, 13, 209, 64, 242, 53, 19,
-        158, 66, 9, 209, 212, 248, 112, 51, 12, 153, 4, 235, 131, 2, 1, 51,
-        194, 248, 116, 19, 196, 248, 112, 51, 248, 177, 15, 155, 235, 185, 14,
-        155, 179, 245, 128, 95, 25, 209, 186, 241, 0, 15, 5, 209, 39, 185, 12,
-        154, 5, 241, 166, 3, 68, 248, 35, 32, 1, 55, 7, 155, 159, 66, 196, 209,
-        185, 241, 0, 15, 4, 209, 212, 248, 208, 48, 1, 51, 196, 248, 208, 48,
-        11, 155, 9, 154, 147, 66, 255, 244, 137, 174, 0, 35, 196, 248, 208,
-        48, 17, 176, 189, 232, 240, 143, 16, 181, 208, 248, 112, 35, 0, 35,
-        6, 224, 208, 248, 112, 19, 79, 244, 76, 116, 193, 248, 0, 73, 1, 51,
-        4, 48, 147, 66, 245, 209, 16, 189, 45, 233, 248, 67, 0, 39, 4, 70, 21,
-        70, 153, 70, 14, 70, 184, 70, 9, 224, 48, 70, 0, 33, 4, 34, 190, 243,
-        148, 245, 1, 55, 198, 248, 0, 128, 176, 70, 118, 25, 79, 69, 243, 219,
-        196, 248, 0, 128, 189, 232, 248, 131, 112, 181, 13, 70, 4, 70, 216,
-        177, 209, 177, 14, 104, 198, 177, 179, 137, 203, 185, 115, 138, 3, 240,
-        3, 3, 1, 43, 3, 209, 240, 105, 8, 177, 195, 247, 224, 251, 115, 138,
-        32, 29, 35, 240, 4, 3, 115, 130, 49, 70, 189, 243, 255, 246, 35, 137,
-        0, 32, 1, 59, 35, 129, 40, 96, 112, 189, 111, 240, 1, 0, 112, 189, 111,
-        240, 15, 0, 112, 189, 45, 233, 247, 79, 12, 159, 1, 145, 22, 70, 154,
-        70, 221, 248, 52, 176, 189, 248, 56, 144, 5, 70, 0, 40, 87, 208, 15,
-        155, 0, 43, 84, 208, 0, 41, 82, 208, 0, 42, 80, 208, 187, 241, 0, 15,
-        77, 208, 155, 248, 0, 48, 0, 43, 73, 208, 0, 241, 4, 8, 64, 70, 189,
-        243, 223, 246, 4, 70, 0, 40, 68, 208, 185, 241, 1, 15, 11, 209, 87,
-        185, 6, 251, 10, 240, 195, 247, 158, 251, 7, 70, 56, 185, 64, 70, 33,
-        70, 189, 243, 194, 246, 53, 224, 79, 240, 0, 8, 0, 224, 128, 70, 0,
-        33, 36, 34, 32, 70, 190, 243, 40, 245, 1, 155, 8, 34, 163, 96, 99, 138,
-        32, 70, 35, 240, 3, 3, 73, 234, 3, 3, 67, 240, 4, 3, 99, 130, 89, 70,
-        190, 243, 249, 245, 0, 35, 185, 241, 1, 15, 227, 113, 12, 209, 164,
-        248, 20, 160, 196, 248, 28, 128, 166, 97, 4, 241, 32, 0, 57, 70, 50,
-        70, 83, 70, 255, 247, 102, 255, 1, 224, 235, 104, 99, 97, 43, 137, 0,
-        32, 1, 51, 43, 129, 15, 155, 28, 96, 4, 224, 111, 240, 1, 0, 1, 224,
-        111, 240, 26, 0, 189, 232, 254, 143, 45, 233, 248, 67, 7, 70, 14, 70,
-        21, 70, 0, 42, 45, 208, 0, 40, 43, 208, 0, 41, 41, 221, 16, 32, 195,
-        247, 79, 251, 4, 70, 64, 179, 0, 33, 16, 34, 190, 243, 227, 244, 231,
-        96, 36, 39, 7, 251, 6, 249, 102, 129, 72, 70, 195, 247, 65, 251, 128,
-        70, 48, 185, 32, 70, 195, 247, 63, 251, 111, 240, 26, 0, 189, 232, 248,
-        131, 0, 33, 74, 70, 190, 243, 206, 244, 32, 70, 64, 248, 4, 139, 65,
-        70, 58, 70, 51, 70, 255, 247, 36, 255, 44, 96, 0, 32, 189, 232, 248,
-        131, 111, 240, 1, 0, 189, 232, 248, 131, 111, 240, 26, 0, 189, 232,
-        248, 131, 112, 181, 6, 70, 96, 177, 4, 104, 84, 177, 37, 137, 93, 185,
-        32, 104, 195, 247, 25, 251, 32, 70, 195, 247, 22, 251, 53, 96, 40, 70,
-        112, 189, 111, 240, 1, 0, 112, 189, 111, 240, 15, 0, 112, 189, 255,
-        247, 25, 191, 31, 181, 0, 36, 1, 146, 3, 147, 10, 70, 35, 70, 0, 148,
-        2, 148, 255, 247, 53, 255, 4, 176, 16, 189, 255, 247, 11, 191, 81, 177,
-        3, 41, 2, 216, 4, 35, 19, 96, 3, 224, 3, 49, 33, 240, 3, 1, 17, 96,
-        0, 32, 112, 71, 111, 240, 1, 0, 112, 71, 45, 233, 240, 65, 134, 176,
-        5, 70, 12, 70, 30, 70, 221, 248, 48, 128, 23, 70, 18, 179, 27, 177,
-        184, 241, 0, 15, 3, 209, 29, 224, 184, 241, 0, 15, 26, 209, 40, 70,
-        33, 70, 5, 170, 255, 247, 218, 255, 176, 185, 46, 177, 5, 155, 123,
-        67, 152, 69, 15, 211, 179, 7, 13, 209, 13, 155, 40, 70, 1, 147, 1, 35,
-        2, 147, 14, 155, 33, 70, 3, 147, 5, 154, 59, 70, 0, 150, 255, 247, 246,
-        254, 1, 224, 111, 240, 1, 0, 6, 176, 189, 232, 240, 129, 16, 181, 4,
-        70, 144, 177, 195, 104, 35, 177, 64, 104, 4, 241, 12, 1, 255, 247, 165,
-        255, 163, 104, 35, 177, 96, 104, 4, 241, 8, 1, 255, 247, 158, 255, 32,
-        70, 189, 232, 16, 64, 195, 247, 166, 186, 16, 189, 45, 233, 255, 65,
-        7, 70, 16, 32, 13, 70, 22, 70, 152, 70, 195, 247, 153, 250, 4, 70, 248,
-        177, 0, 33, 16, 34, 190, 243, 45, 244, 18, 74, 39, 96, 101, 96, 1, 146,
-        4, 241, 8, 2, 0, 35, 2, 146, 40, 70, 12, 33, 50, 70, 0, 147, 255, 247,
-        154, 255, 3, 70, 88, 185, 11, 74, 0, 144, 1, 146, 4, 241, 12, 2, 2,
-        146, 40, 70, 12, 33, 66, 70, 255, 247, 141, 255, 24, 177, 32, 70, 255,
-        247, 187, 255, 0, 36, 32, 70, 4, 176, 189, 232, 240, 129, 0, 191, 129,
-        30, 5, 0, 121, 30, 5, 0, 255, 247, 175, 191, 130, 96, 65, 96, 1, 96,
-        112, 71, 45, 233, 240, 65, 84, 26, 1, 44, 15, 70, 30, 70, 6, 157, 14,
-        221, 32, 70, 195, 247, 89, 250, 128, 70, 112, 177, 57, 70, 34, 70, 188,
-        247, 149, 255, 198, 248, 0, 128, 0, 32, 44, 96, 189, 232, 240, 129,
-        0, 32, 24, 96, 40, 96, 189, 232, 240, 129, 111, 240, 26, 0, 189, 232,
-        240, 129, 14, 180, 243, 181, 129, 104, 4, 70, 1, 41, 69, 217, 8, 171,
-        64, 104, 7, 154, 1, 147, 190, 243, 40, 245, 67, 28, 6, 70, 3, 208, 163,
-        104, 2, 59, 152, 66, 2, 221, 0, 32, 160, 96, 54, 224, 96, 104, 61, 33,
-        190, 243, 66, 244, 64, 179, 103, 104, 37, 104, 199, 27, 33, 224, 40,
-        70, 58, 70, 188, 247, 80, 255, 176, 185, 235, 93, 61, 43, 19, 209, 40,
-        70, 190, 243, 104, 244, 98, 104, 71, 28, 115, 28, 219, 27, 82, 27, 233,
-        25, 210, 24, 40, 70, 190, 243, 134, 243, 99, 104, 219, 27, 99, 96, 163,
-        104, 223, 25, 167, 96, 8, 224, 43, 70, 19, 248, 1, 43, 29, 70, 0, 42,
-        250, 209, 97, 104, 141, 66, 218, 211, 163, 104, 112, 28, 27, 26, 163,
-        96, 99, 104, 27, 24, 99, 96, 0, 224, 0, 32, 189, 232, 252, 64, 3, 176,
-        112, 71, 0, 0, 45, 233, 240, 79, 187, 176, 26, 144, 25, 145, 27, 146,
-        24, 147, 0, 43, 2, 240, 36, 135, 79, 244, 128, 80, 195, 247, 228, 249,
-        18, 144, 0, 40, 2, 240, 28, 135, 55, 168, 18, 153, 79, 244, 128, 82,
-        255, 247, 114, 255, 0, 33, 79, 244, 128, 82, 18, 152, 190, 243, 110,
-        243, 24, 154, 17, 104, 217, 177, 11, 120, 203, 177, 68, 154, 19, 104,
-        2, 43, 3, 216, 20, 224, 1, 58, 2, 96, 0, 224, 68, 152, 2, 104, 139,
-        24, 19, 248, 1, 76, 28, 185, 19, 248, 2, 60, 0, 43, 242, 208, 18, 152,
-        188, 247, 252, 254, 68, 153, 56, 154, 11, 104, 211, 24, 56, 147, 0,
-        35, 141, 248, 156, 48, 79, 240, 255, 50, 21, 147, 19, 147, 1, 35, 17,
-        146, 22, 147, 2, 240, 176, 190, 25, 153, 1, 34, 81, 248, 4, 107, 0,
-        35, 25, 145, 23, 146, 20, 147, 23, 153, 73, 177, 242, 92, 95, 28, 16,
-        146, 1, 58, 210, 178, 253, 42, 15, 216, 245, 93, 159, 28, 13, 224, 241,
-        92, 74, 30, 210, 178, 253, 42, 16, 145, 3, 216, 128, 34, 13, 70, 16,
-        146, 0, 224, 23, 157, 95, 28, 0, 224, 0, 37, 123, 25, 179, 245, 96,
-        127, 130, 242, 134, 134, 16, 155, 32, 43, 40, 208, 5, 216, 21, 43, 11,
-        208, 27, 43, 66, 240, 120, 134, 100, 224, 16, 153, 34, 41, 53, 208,
-        48, 211, 128, 41, 66, 240, 112, 134, 103, 224, 243, 25, 90, 120, 243,
-        93, 18, 2, 211, 24, 7, 43, 18, 221, 188, 28, 52, 25, 34, 70, 219, 73,
-        55, 168, 255, 247, 30, 255, 32, 70, 190, 243, 173, 243, 250, 28, 18,
-        24, 216, 73, 55, 168, 178, 24, 255, 247, 20, 255, 2, 240, 85, 190, 244,
-        25, 98, 120, 243, 93, 18, 2, 210, 24, 55, 168, 210, 73, 255, 247, 9,
-        255, 227, 120, 162, 120, 27, 2, 55, 168, 208, 73, 154, 24, 255, 247,
-        1, 255, 2, 240, 66, 190, 242, 93, 20, 146, 2, 240, 62, 190, 20, 155,
-        12, 43, 2, 240, 53, 134, 157, 248, 156, 48, 0, 43, 66, 240, 53, 134,
-        243, 93, 4, 43, 66, 240, 49, 134, 7, 241, 2, 8, 6, 235, 8, 4, 32, 70,
-        193, 247, 171, 248, 0, 40, 66, 240, 39, 134, 22, 248, 8, 48, 219, 7,
-        2, 241, 34, 134, 39, 169, 32, 70, 190, 243, 165, 245, 17, 153, 1, 49,
-        66, 240, 26, 134, 243, 25, 154, 121, 219, 121, 18, 2, 211, 24, 17, 147,
-        2, 240, 18, 190, 243, 25, 218, 121, 155, 121, 55, 168, 180, 73, 67,
-        234, 2, 34, 255, 247, 198, 254, 2, 240, 7, 190, 243, 93, 244, 25, 143,
-        43, 2, 242, 2, 134, 1, 162, 82, 248, 35, 240, 81, 88, 4, 0, 161, 88,
-        4, 0, 153, 89, 4, 0, 81, 94, 4, 0, 45, 96, 4, 0, 17, 94, 4, 0, 143,
-        93, 4, 0, 173, 93, 4, 0, 191, 89, 4, 0, 85, 96, 4, 0, 201, 96, 4, 0,
-        241, 96, 4, 0, 5, 97, 4, 0, 223, 129, 4, 0, 119, 95, 4, 0, 247, 93,
-        4, 0, 51, 93, 4, 0, 157, 97, 4, 0, 221, 97, 4, 0, 99, 88, 4, 0, 29,
-        98, 4, 0, 43, 98, 4, 0, 77, 98, 4, 0, 91, 98, 4, 0, 35, 89, 4, 0, 105,
-        98, 4, 0, 223, 129, 4, 0, 65, 90, 4, 0, 167, 98, 4, 0, 85, 90, 4, 0,
-        223, 129, 4, 0, 223, 129, 4, 0, 223, 129, 4, 0, 189, 98, 4, 0, 1, 99,
-        4, 0, 21, 99, 4, 0, 57, 100, 4, 0, 253, 101, 4, 0, 223, 129, 4, 0, 223,
-        129, 4, 0, 161, 103, 4, 0, 65, 88, 4, 0, 49, 88, 4, 0, 33, 88, 4, 0,
-        27, 105, 4, 0, 47, 105, 4, 0, 67, 105, 4, 0, 87, 105, 4, 0, 223, 129,
-        4, 0, 37, 97, 4, 0, 51, 90, 4, 0, 223, 129, 4, 0, 223, 129, 4, 0, 49,
-        89, 4, 0, 35, 108, 4, 0, 107, 105, 4, 0, 229, 98, 4, 0, 243, 98, 4,
-        0, 49, 108, 4, 0, 153, 121, 4, 0, 223, 129, 4, 0, 223, 129, 4, 0, 223,
-        129, 4, 0, 223, 129, 4, 0, 97, 90, 4, 0, 195, 105, 4, 0, 237, 105, 4,
-        0, 47, 106, 4, 0, 109, 106, 4, 0, 171, 106, 4, 0, 233, 106, 4, 0, 39,
-        107, 4, 0, 101, 107, 4, 0, 121, 107, 4, 0, 223, 129, 4, 0, 9, 91, 4,
-        0, 223, 129, 4, 0, 223, 129, 4, 0, 223, 129, 4, 0, 19, 93, 4, 0, 117,
-        90, 4, 0, 223, 129, 4, 0, 223, 129, 4, 0, 223, 129, 4, 0, 223, 129,
-        4, 0, 237, 121, 4, 0, 223, 129, 4, 0, 71, 93, 4, 0, 167, 108, 4, 0,
-        119, 109, 4, 0, 205, 110, 4, 0, 183, 111, 4, 0, 161, 112, 4, 0, 219,
-        112, 4, 0, 99, 113, 4, 0, 177, 113, 4, 0, 191, 114, 4, 0, 73, 116, 4,
-        0, 245, 116, 4, 0, 161, 117, 4, 0, 11, 122, 4, 0, 183, 91, 4, 0, 119,
-        92, 4, 0, 237, 117, 4, 0, 41, 119, 4, 0, 53, 120, 4, 0, 65, 121, 4,
-        0, 81, 122, 4, 0, 43, 124, 4, 0, 99, 122, 4, 0, 129, 122, 4, 0, 159,
-        122, 4, 0, 189, 122, 4, 0, 207, 122, 4, 0, 225, 122, 4, 0, 243, 122,
-        4, 0, 5, 123, 4, 0, 111, 123, 4, 0, 123, 123, 4, 0, 135, 123, 4, 0,
-        183, 129, 4, 0, 223, 129, 4, 0, 223, 129, 4, 0, 223, 129, 4, 0, 223,
-        129, 4, 0, 223, 129, 4, 0, 223, 129, 4, 0, 223, 129, 4, 0, 223, 129,
-        4, 0, 223, 129, 4, 0, 141, 107, 4, 0, 1, 108, 4, 0, 223, 129, 4, 0,
-        223, 129, 4, 0, 125, 124, 4, 0, 229, 124, 4, 0, 107, 125, 4, 0, 241,
-        125, 4, 0, 29, 127, 4, 0, 47, 127, 4, 0, 59, 127, 4, 0, 101, 127, 4,
-        0, 93, 128, 4, 0, 85, 129, 4, 0, 79, 234, 149, 10, 95, 250, 138, 250,
-        79, 240, 0, 8, 1, 240, 62, 184, 79, 234, 85, 9, 95, 250, 137, 249, 79,
-        240, 0, 8, 1, 240, 7, 184, 79, 234, 85, 9, 95, 250, 137, 249, 79, 240,
-        0, 8, 0, 240, 237, 191, 100, 120, 55, 168, 16, 73, 34, 70, 22, 148,
-        255, 247, 125, 253, 2, 240, 190, 188, 227, 120, 34, 121, 27, 4, 67,
-        234, 2, 99, 98, 120, 55, 168, 19, 67, 162, 120, 9, 73, 67, 234, 2, 34,
-        255, 247, 109, 253, 2, 240, 174, 188, 0, 191, 206, 43, 5, 0, 246, 32,
-        5, 0, 40, 39, 5, 0, 101, 34, 5, 0, 52, 42, 5, 0, 28, 44, 5, 0, 37, 40,
-        5, 0, 162, 120, 99, 120, 18, 2, 210, 24, 155, 73, 55, 168, 255, 247,
-        84, 253, 34, 121, 227, 120, 18, 2, 55, 168, 152, 73, 210, 24, 255, 247,
-        76, 253, 6, 45, 66, 242, 140, 132, 162, 121, 99, 121, 18, 2, 55, 168,
-        148, 73, 210, 24, 255, 247, 65, 253, 8, 45, 66, 242, 129, 132, 35, 122,
-        226, 121, 27, 2, 55, 168, 143, 73, 154, 24, 255, 247, 54, 253, 10, 45,
-        66, 242, 118, 132, 7, 241, 10, 8, 7, 241, 9, 4, 22, 248, 8, 32, 51,
-        93, 18, 2, 210, 24, 55, 168, 136, 73, 255, 247, 38, 253, 22, 248, 8,
-        48, 50, 93, 27, 2, 55, 168, 133, 73, 154, 24, 255, 247, 29, 253, 2,
-        240, 94, 188, 163, 120, 98, 120, 27, 2, 154, 24, 17, 146, 2, 240, 87,
-        188, 127, 75, 6, 34, 181, 251, 242, 242, 26, 112, 79, 240, 0, 8, 153,
-        70, 36, 224, 67, 70, 16, 33, 123, 74, 29, 168, 190, 243, 73, 241, 67,
-        70, 16, 33, 121, 74, 47, 168, 190, 243, 67, 241, 99, 120, 162, 120,
-        29, 169, 67, 234, 2, 34, 55, 168, 255, 247, 247, 252, 99, 121, 162,
-        121, 27, 4, 67, 234, 2, 99, 226, 120, 55, 168, 19, 67, 34, 121, 47,
-        169, 67, 234, 2, 34, 255, 247, 233, 252, 8, 241, 1, 8, 6, 52, 153, 248,
-        0, 48, 152, 69, 214, 219, 2, 240, 35, 188, 2, 45, 6, 209, 55, 168, 103,
-        73, 98, 120, 255, 247, 217, 252, 2, 240, 26, 188, 163, 120, 98, 120,
-        27, 2, 55, 168, 98, 73, 154, 24, 255, 247, 207, 252, 2, 240, 16, 188,
-        162, 120, 99, 120, 18, 2, 4, 45, 26, 68, 5, 217, 35, 121, 225, 120,
-        27, 6, 9, 4, 91, 24, 26, 67, 55, 168, 89, 73, 255, 247, 189, 252, 6,
-        45, 66, 242, 253, 131, 243, 25, 154, 121, 89, 121, 18, 2, 8, 45, 10,
-        68, 5, 217, 25, 122, 219, 121, 9, 6, 27, 4, 201, 24, 10, 67, 55, 168,
-        80, 73, 255, 247, 169, 252, 10, 45, 66, 242, 233, 131, 243, 25, 154,
-        122, 89, 122, 18, 2, 12, 45, 10, 68, 5, 217, 25, 123, 219, 122, 9, 6,
-        27, 4, 201, 24, 10, 67, 55, 168, 71, 73, 255, 247, 149, 252, 2, 240,
-        214, 187, 55, 168, 69, 73, 98, 120, 255, 247, 142, 252, 2, 240, 207,
-        187, 163, 120, 98, 120, 27, 2, 55, 168, 56, 73, 154, 24, 255, 247, 132,
-        252, 2, 240, 197, 187, 1, 53, 0, 35, 237, 178, 23, 147, 2, 240, 191,
-        187, 163, 120, 98, 120, 55, 168, 58, 73, 66, 234, 3, 34, 255, 247, 116,
-        252, 2, 240, 181, 187, 148, 248, 3, 160, 35, 121, 79, 234, 10, 74, 74,
-        234, 3, 106, 99, 120, 181, 241, 5, 11, 74, 234, 3, 10, 72, 191, 165,
-        241, 2, 11, 163, 120, 79, 234, 171, 11, 74, 234, 3, 42, 95, 250, 139,
-        251, 79, 240, 0, 8, 36, 224, 67, 68, 16, 33, 34, 74, 47, 168, 190, 243,
-        151, 240, 153, 248, 0, 48, 16, 33, 67, 68, 31, 74, 29, 168, 190, 243,
-        143, 240, 82, 70, 47, 169, 55, 168, 255, 247, 70, 252, 227, 120, 34,
-        121, 27, 4, 67, 234, 2, 99, 98, 120, 55, 168, 19, 67, 162, 120, 29,
-        169, 67, 234, 2, 34, 255, 247, 56, 252, 10, 241, 4, 10, 8, 241, 1, 8,
-        223, 248, 60, 144, 4, 52, 216, 69, 153, 248, 0, 48, 211, 219, 155, 68,
-        137, 248, 0, 176, 2, 240, 107, 187, 9, 75, 234, 8, 26, 112, 79, 240,
-        0, 8, 153, 70, 73, 224, 0, 191, 83, 37, 5, 0, 74, 44, 5, 0, 127, 34,
-        5, 0, 126, 31, 5, 0, 121, 40, 5, 0, 240, 39, 5, 0, 76, 45, 4, 0, 244,
-        185, 3, 0, 255, 185, 3, 0, 16, 43, 5, 0, 202, 37, 5, 0, 20, 34, 5, 0,
-        37, 34, 5, 0, 26, 35, 5, 0, 160, 37, 5, 0, 67, 70, 16, 33, 177, 74,
-        29, 168, 190, 243, 64, 240, 67, 70, 16, 33, 175, 74, 47, 168, 190, 243,
-        58, 240, 227, 120, 34, 121, 27, 4, 67, 234, 2, 99, 98, 120, 29, 169,
-        19, 67, 162, 120, 55, 168, 67, 234, 2, 34, 255, 247, 232, 251, 227,
-        121, 34, 122, 27, 4, 67, 234, 2, 99, 98, 121, 55, 168, 19, 67, 162,
-        121, 47, 169, 67, 234, 2, 34, 255, 247, 218, 251, 8, 241, 1, 8, 8, 52,
-        153, 248, 0, 48, 152, 69, 208, 219, 2, 240, 20, 187, 148, 248, 3, 160,
-        35, 121, 79, 234, 10, 74, 74, 234, 3, 106, 99, 120, 181, 241, 5, 11,
-        74, 234, 3, 10, 72, 191, 5, 241, 2, 11, 163, 120, 79, 234, 235, 11,
-        74, 234, 3, 42, 95, 250, 139, 251, 79, 240, 0, 8, 59, 224, 67, 68, 16,
-        33, 140, 74, 47, 168, 189, 243, 246, 247, 153, 248, 0, 48, 16, 33, 67,
-        68, 138, 74, 29, 168, 189, 243, 238, 247, 153, 248, 0, 48, 16, 33, 67,
-        68, 135, 74, 51, 168, 189, 243, 230, 247, 82, 70, 47, 169, 55, 168,
-        255, 247, 157, 251, 227, 121, 34, 122, 27, 4, 67, 234, 2, 99, 98, 121,
-        51, 169, 19, 67, 162, 121, 55, 168, 67, 234, 2, 34, 255, 247, 143, 251,
-        227, 122, 34, 123, 27, 4, 67, 234, 2, 99, 98, 122, 55, 168, 19, 67,
-        162, 122, 29, 169, 67, 234, 2, 34, 255, 247, 129, 251, 10, 241, 8, 10,
-        8, 241, 1, 8, 8, 52, 223, 248, 204, 145, 216, 69, 153, 248, 0, 48, 189,
-        219, 155, 68, 137, 248, 0, 176, 2, 240, 180, 186, 110, 75, 12, 34, 181,
-        251, 242, 242, 26, 112, 79, 240, 0, 8, 153, 70, 62, 224, 67, 70, 16,
-        33, 100, 74, 51, 168, 189, 243, 166, 247, 67, 70, 16, 33, 99, 74, 29,
-        168, 189, 243, 160, 247, 67, 70, 16, 33, 97, 74, 47, 168, 189, 243,
-        154, 247, 227, 120, 34, 121, 27, 4, 67, 234, 2, 99, 98, 120, 51, 169,
-        19, 67, 162, 120, 55, 168, 67, 234, 2, 34, 255, 247, 72, 251, 227, 121,
-        34, 122, 27, 4, 67, 234, 2, 99, 98, 121, 47, 169, 19, 67, 162, 121,
-        55, 168, 67, 234, 2, 34, 255, 247, 58, 251, 227, 122, 34, 123, 27, 4,
-        67, 234, 2, 99, 98, 122, 55, 168, 19, 67, 162, 122, 29, 169, 67, 234,
-        2, 34, 255, 247, 44, 251, 8, 241, 1, 8, 12, 52, 153, 248, 0, 48, 152,
-        69, 188, 219, 2, 240, 102, 186, 227, 120, 34, 121, 27, 4, 67, 234, 2,
-        99, 98, 120, 55, 168, 19, 67, 162, 120, 67, 73, 67, 234, 2, 34, 255,
-        247, 21, 251, 2, 240, 86, 186, 163, 120, 98, 120, 55, 168, 63, 73, 66,
-        234, 3, 34, 255, 247, 11, 251, 2, 240, 76, 186, 79, 240, 5, 9, 181,
-        251, 249, 249, 95, 250, 137, 249, 79, 240, 0, 8, 22, 224, 99, 120, 16,
-        33, 55, 74, 47, 168, 189, 243, 62, 247, 35, 121, 98, 121, 27, 4, 67,
-        234, 2, 99, 162, 120, 55, 168, 19, 67, 226, 120, 47, 169, 67, 234, 2,
-        34, 255, 247, 236, 250, 8, 241, 1, 8, 5, 52, 200, 69, 230, 219, 2, 240,
-        40, 186, 55, 168, 43, 73, 98, 120, 255, 247, 224, 250, 2, 45, 66, 242,
-        32, 130, 55, 168, 40, 73, 162, 120, 255, 247, 216, 250, 2, 240, 25,
-        186, 0, 34, 55, 168, 37, 73, 99, 120, 255, 247, 208, 250, 2, 45, 66,
-        242, 83, 130, 1, 34, 55, 168, 33, 73, 163, 120, 255, 247, 199, 250,
-        3, 45, 2, 240, 74, 130, 2, 34, 55, 168, 28, 73, 227, 120, 255, 247,
-        190, 250, 4, 45, 2, 240, 252, 129, 25, 73, 55, 168, 3, 34, 35, 121,
-        255, 247, 181, 250, 1, 33, 19, 145, 2, 240, 244, 185, 98, 120, 55, 168,
-        18, 73, 255, 247, 172, 250, 55, 168, 17, 73, 1, 34, 163, 120, 255, 247,
-        166, 250, 2, 240, 231, 185, 55, 168, 14, 73, 98, 120, 255, 247, 159,
-        250, 2, 240, 224, 185, 0, 191, 244, 185, 3, 0, 255, 185, 3, 0, 10, 186,
-        3, 0, 22, 186, 3, 0, 76, 45, 4, 0, 54, 31, 5, 0, 26, 40, 5, 0, 34, 186,
-        3, 0, 91, 34, 5, 0, 34, 41, 5, 0, 141, 31, 5, 0, 75, 35, 5, 0, 171,
-        30, 14, 43, 2, 242, 195, 129, 1, 162, 82, 248, 35, 240, 0, 191, 157,
-        94, 4, 0, 223, 129, 4, 0, 223, 129, 4, 0, 223, 129, 4, 0, 223, 129,
-        4, 0, 21, 95, 4, 0, 227, 94, 4, 0, 195, 94, 4, 0, 171, 94, 4, 0, 223,
-        129, 4, 0, 223, 129, 4, 0, 21, 95, 4, 0, 227, 94, 4, 0, 195, 94, 4,
-        0, 171, 94, 4, 0, 55, 168, 169, 73, 98, 120, 255, 247, 89, 250, 2, 240,
-        154, 185, 55, 168, 166, 73, 98, 122, 255, 247, 82, 250, 12, 45, 140,
-        191, 79, 240, 9, 8, 79, 240, 0, 8, 1, 224, 79, 240, 0, 8, 243, 25, 55,
-        168, 158, 73, 26, 122, 255, 247, 67, 250, 12, 45, 7, 217, 184, 241,
-        0, 15, 8, 191, 79, 240, 8, 8, 1, 224, 79, 240, 0, 8, 7, 241, 7, 9, 152,
-        73, 22, 248, 9, 32, 55, 168, 255, 247, 49, 250, 0, 34, 55, 168, 149,
-        73, 22, 248, 9, 48, 255, 247, 42, 250, 12, 45, 7, 217, 184, 241, 0,
-        15, 8, 191, 79, 240, 7, 8, 1, 224, 79, 240, 0, 8, 79, 240, 0, 9, 162,
-        120, 99, 120, 140, 73, 18, 2, 73, 68, 55, 168, 210, 24, 9, 241, 9, 9,
-        255, 247, 19, 250, 2, 52, 185, 241, 27, 15, 240, 209, 12, 45, 66, 242,
-        79, 129, 184, 241, 0, 15, 8, 191, 79, 240, 6, 8, 131, 76, 184, 68, 176,
-        68, 4, 241, 36, 9, 152, 248, 2, 32, 152, 248, 1, 48, 18, 2, 33, 70,
-        55, 168, 210, 24, 12, 52, 255, 247, 247, 249, 76, 69, 8, 241, 2, 8,
-        240, 209, 2, 240, 52, 185, 20, 45, 25, 208, 23, 45, 3, 208, 19, 45,
-        66, 240, 45, 129, 25, 224, 6, 235, 7, 8, 116, 73, 152, 248, 22, 32,
-        55, 168, 255, 247, 225, 249, 114, 73, 152, 248, 21, 32, 55, 168, 255,
-        247, 219, 249, 55, 168, 111, 73, 152, 248, 20, 32, 255, 247, 213, 249,
-        243, 25, 55, 168, 109, 73, 218, 124, 255, 247, 207, 249, 169, 70, 162,
-        70, 79, 240, 0, 8, 37, 70, 170, 120, 107, 120, 104, 73, 18, 2, 65, 68,
-        55, 168, 210, 24, 8, 241, 9, 8, 255, 247, 191, 249, 2, 53, 184, 241,
-        27, 15, 240, 209, 77, 70, 79, 240, 0, 8, 34, 122, 227, 121, 96, 73,
-        18, 2, 65, 68, 55, 168, 210, 24, 8, 241, 11, 8, 255, 247, 173, 249,
-        2, 52, 184, 241, 33, 15, 240, 209, 0, 36, 154, 248, 14, 32, 154, 248,
-        13, 48, 88, 73, 18, 2, 9, 25, 55, 168, 210, 24, 11, 52, 255, 247, 156,
-        249, 33, 44, 10, 241, 2, 10, 239, 209, 2, 240, 217, 184, 225, 120, 98,
-        120, 163, 120, 0, 145, 33, 121, 55, 168, 1, 145, 97, 121, 2, 145, 161,
-        121, 3, 145, 225, 121, 4, 145, 33, 122, 5, 145, 75, 73, 255, 247, 132,
-        249, 2, 240, 197, 184, 169, 70, 79, 240, 0, 8, 37, 70, 21, 248, 1, 63,
-        255, 43, 4, 208, 55, 168, 69, 73, 66, 70, 255, 247, 117, 249, 8, 241,
-        1, 8, 184, 241, 4, 15, 241, 209, 185, 241, 12, 15, 77, 70, 66, 242,
-        174, 128, 4, 235, 8, 3, 91, 120, 255, 43, 4, 208, 55, 168, 59, 73, 66,
-        70, 255, 247, 97, 249, 8, 241, 1, 8, 184, 241, 12, 15, 240, 209, 16,
-        45, 66, 242, 156, 128, 4, 235, 8, 3, 91, 120, 255, 43, 4, 208, 55, 168,
-        50, 73, 66, 70, 255, 247, 79, 249, 8, 241, 1, 8, 184, 241, 16, 15, 240,
-        209, 2, 240, 139, 184, 98, 120, 55, 168, 10, 177, 163, 120, 27, 185,
-        43, 73, 255, 247, 64, 249, 2, 224, 42, 73, 255, 247, 60, 249, 243, 25,
-        55, 168, 40, 73, 218, 120, 255, 247, 54, 249, 2, 240, 119, 184, 163,
-        120, 98, 120, 55, 168, 37, 73, 66, 234, 3, 34, 255, 247, 44, 249, 2,
-        240, 109, 184, 227, 120, 34, 121, 27, 4, 67, 234, 2, 99, 98, 120, 55,
-        168, 19, 67, 162, 120, 30, 73, 67, 234, 2, 34, 255, 247, 28, 249, 2,
-        240, 93, 184, 55, 168, 27, 73, 98, 120, 255, 247, 21, 249, 2, 45, 66,
-        242, 85, 128, 55, 168, 24, 73, 162, 120, 255, 247, 13, 249, 2, 240,
-        78, 184, 0, 191, 39, 38, 5, 0, 196, 38, 5, 0, 139, 43, 5, 0, 59, 33,
-        5, 0, 196, 35, 5, 0, 164, 39, 5, 0, 174, 37, 5, 0, 215, 40, 5, 0, 216,
-        30, 5, 0, 183, 35, 5, 0, 218, 37, 5, 0, 135, 40, 5, 0, 168, 30, 5, 0,
-        151, 31, 5, 0, 54, 34, 5, 0, 42, 42, 5, 0, 116, 45, 5, 0, 152, 36, 5,
-        0, 45, 37, 5, 0, 188, 31, 5, 0, 151, 44, 5, 0, 216, 44, 5, 0, 124, 28,
-        50, 93, 55, 168, 134, 73, 2, 240, 15, 2, 255, 247, 214, 248, 50, 93,
-        55, 168, 18, 9, 188, 28, 130, 73, 255, 247, 207, 248, 50, 93, 55, 168,
-        129, 73, 2, 240, 7, 2, 255, 247, 200, 248, 50, 93, 55, 168, 210, 8,
-        126, 73, 2, 240, 3, 2, 255, 247, 192, 248, 2, 240, 1, 184, 124, 28,
-        50, 93, 55, 168, 122, 73, 2, 240, 15, 2, 255, 247, 182, 248, 50, 93,
-        55, 168, 18, 9, 188, 28, 118, 73, 255, 247, 175, 248, 50, 93, 55, 168,
-        117, 73, 2, 240, 7, 2, 255, 247, 168, 248, 50, 93, 55, 168, 210, 8,
-        114, 73, 2, 240, 3, 2, 255, 247, 160, 248, 1, 240, 225, 191, 55, 168,
-        111, 73, 98, 120, 255, 247, 153, 248, 1, 240, 218, 191, 98, 120, 55,
-        168, 108, 73, 255, 247, 146, 248, 162, 120, 55, 168, 106, 73, 255, 247,
-        141, 248, 55, 168, 105, 73, 226, 120, 255, 247, 136, 248, 1, 240, 201,
-        191, 55, 168, 103, 73, 98, 120, 255, 247, 129, 248, 1, 240, 194, 191,
-        55, 168, 100, 73, 98, 120, 255, 247, 122, 248, 1, 240, 187, 191, 7,
-        241, 1, 8, 6, 235, 8, 4, 32, 70, 192, 247, 53, 250, 0, 40, 65, 240,
-        177, 135, 22, 248, 8, 48, 216, 7, 1, 241, 172, 135, 32, 70, 39, 169,
-        189, 243, 47, 247, 17, 155, 1, 51, 65, 240, 164, 135, 243, 25, 90, 121,
-        155, 121, 18, 2, 211, 24, 17, 147, 1, 240, 156, 191, 162, 120, 99, 120,
-        18, 6, 55, 168, 81, 73, 66, 234, 3, 34, 255, 247, 80, 248, 1, 240, 145,
-        191, 98, 120, 55, 168, 77, 73, 255, 247, 73, 248, 162, 120, 55, 168,
-        76, 73, 255, 247, 68, 248, 35, 121, 226, 120, 27, 2, 55, 168, 73, 73,
-        154, 24, 255, 247, 60, 248, 1, 240, 125, 191, 55, 168, 71, 73, 98, 120,
-        255, 247, 53, 248, 1, 240, 118, 191, 55, 168, 68, 73, 98, 120, 255,
-        247, 46, 248, 1, 240, 111, 191, 163, 120, 98, 120, 27, 2, 55, 168, 64,
-        73, 154, 24, 255, 247, 36, 248, 1, 240, 101, 191, 148, 248, 2, 128,
-        99, 120, 79, 234, 8, 40, 152, 68, 31, 250, 136, 248, 58, 73, 79, 234,
-        216, 34, 55, 168, 255, 247, 20, 248, 8, 244, 224, 98, 18, 10, 55, 73,
-        55, 168, 255, 247, 13, 248, 8, 240, 248, 2, 210, 8, 52, 73, 55, 168,
-        255, 247, 6, 248, 8, 240, 6, 2, 82, 8, 50, 73, 55, 168, 254, 247, 255,
-        255, 55, 168, 48, 73, 8, 240, 1, 2, 254, 247, 249, 255, 4, 45, 65, 242,
-        57, 135, 35, 121, 228, 120, 27, 2, 28, 25, 164, 178, 226, 10, 55, 168,
-        42, 73, 254, 247, 236, 255, 4, 244, 224, 98, 18, 10, 55, 168, 39, 73,
-        254, 247, 229, 255, 4, 240, 248, 2, 210, 8, 55, 168, 37, 73, 254, 247,
-        222, 255, 4, 240, 6, 2, 82, 8, 55, 168, 34, 73, 254, 247, 215, 255,
-        55, 168, 33, 73, 4, 240, 1, 2, 254, 247, 209, 255, 1, 240, 18, 191,
-        0, 191, 229, 31, 5, 0, 51, 32, 5, 0, 183, 38, 5, 0, 42, 32, 5, 0, 175,
-        44, 5, 0, 41, 31, 5, 0, 70, 36, 5, 0, 52, 38, 5, 0, 132, 42, 5, 0, 214,
-        43, 5, 0, 56, 37, 5, 0, 196, 43, 5, 0, 167, 43, 5, 0, 216, 38, 5, 0,
-        157, 38, 5, 0, 245, 37, 5, 0, 189, 37, 5, 0, 255, 39, 5, 0, 52, 39,
-        5, 0, 226, 44, 5, 0, 140, 36, 5, 0, 230, 32, 5, 0, 188, 44, 5, 0, 94,
-        31, 5, 0, 213, 32, 5, 0, 201, 44, 5, 0, 103, 42, 5, 0, 121, 35, 5, 0,
-        212, 33, 5, 0, 226, 38, 5, 0, 152, 43, 5, 0, 0, 34, 99, 120, 103, 73,
-        55, 168, 254, 247, 138, 255, 79, 240, 0, 8, 101, 73, 162, 120, 55, 168,
-        254, 247, 131, 255, 205, 248, 0, 128, 34, 121, 227, 120, 18, 2, 211,
-        24, 1, 147, 2, 34, 96, 73, 67, 70, 55, 168, 254, 247, 118, 255, 205,
-        248, 0, 128, 162, 121, 99, 121, 18, 2, 211, 24, 1, 147, 2, 34, 1, 35,
-        89, 73, 55, 168, 254, 247, 105, 255, 205, 248, 0, 128, 34, 122, 227,
-        121, 18, 2, 211, 24, 2, 34, 1, 147, 55, 168, 82, 73, 19, 70, 254, 247,
-        92, 255, 30, 45, 65, 242, 156, 134, 98, 122, 55, 168, 79, 73, 254, 247,
-        84, 255, 162, 122, 55, 168, 77, 73, 254, 247, 79, 255, 226, 122, 55,
-        168, 76, 73, 254, 247, 74, 255, 34, 123, 55, 168, 74, 73, 254, 247,
-        69, 255, 205, 248, 0, 128, 162, 123, 99, 123, 18, 2, 211, 24, 1, 147,
-        5, 34, 67, 70, 55, 168, 64, 73, 254, 247, 56, 255, 205, 248, 0, 128,
-        34, 124, 227, 123, 18, 2, 211, 24, 1, 147, 5, 34, 1, 35, 55, 168, 57,
-        73, 254, 247, 43, 255, 205, 248, 0, 128, 162, 124, 99, 124, 18, 2, 211,
-        24, 1, 147, 5, 34, 2, 35, 55, 168, 51, 73, 254, 247, 30, 255, 205, 248,
-        0, 128, 205, 248, 4, 128, 34, 125, 227, 124, 18, 2, 211, 24, 2, 147,
-        5, 34, 108, 35, 79, 240, 1, 9, 55, 168, 47, 73, 254, 247, 13, 255, 205,
-        248, 0, 144, 205, 248, 4, 128, 162, 125, 99, 125, 18, 2, 211, 24, 2,
-        147, 5, 34, 108, 35, 79, 240, 2, 10, 55, 168, 39, 73, 254, 247, 252,
-        254, 205, 248, 0, 160, 205, 248, 4, 128, 34, 126, 227, 125, 18, 2, 211,
-        24, 2, 147, 5, 34, 108, 35, 55, 168, 31, 73, 254, 247, 237, 254, 205,
-        248, 0, 128, 205, 248, 4, 128, 162, 126, 99, 126, 18, 2, 211, 24, 2,
-        147, 5, 34, 104, 35, 55, 168, 24, 73, 254, 247, 222, 254, 205, 248,
-        0, 144, 205, 248, 4, 128, 34, 127, 227, 126, 18, 2, 211, 24, 2, 147,
-        5, 34, 55, 168, 104, 35, 16, 73, 254, 247, 207, 254, 205, 248, 0, 160,
-        205, 248, 4, 128, 163, 127, 98, 127, 27, 2, 155, 24, 2, 147, 55, 168,
-        10, 73, 5, 34, 104, 35, 254, 247, 192, 254, 1, 240, 1, 190, 59, 33,
-        5, 0, 29, 32, 5, 0, 151, 30, 5, 0, 213, 41, 5, 0, 179, 42, 5, 0, 49,
-        40, 5, 0, 107, 44, 5, 0, 23, 42, 5, 0, 1, 34, 99, 120, 156, 73, 55,
-        168, 254, 247, 168, 254, 79, 240, 1, 8, 154, 73, 162, 120, 55, 168,
-        254, 247, 161, 254, 205, 248, 0, 128, 34, 121, 227, 120, 18, 2, 211,
-        24, 1, 147, 2, 34, 0, 35, 148, 73, 55, 168, 254, 247, 148, 254, 205,
-        248, 0, 128, 162, 121, 99, 121, 18, 2, 211, 24, 1, 147, 2, 34, 142,
-        73, 67, 70, 55, 168, 254, 247, 135, 254, 205, 248, 0, 128, 34, 122,
-        227, 121, 18, 2, 211, 24, 2, 34, 1, 147, 55, 168, 135, 73, 19, 70, 254,
-        247, 122, 254, 30, 45, 65, 242, 186, 133, 98, 122, 55, 168, 132, 73,
-        254, 247, 114, 254, 162, 122, 55, 168, 130, 73, 254, 247, 109, 254,
-        226, 122, 55, 168, 129, 73, 254, 247, 104, 254, 34, 123, 55, 168, 127,
-        73, 254, 247, 99, 254, 205, 248, 0, 128, 162, 123, 99, 123, 18, 2, 211,
-        24, 1, 147, 5, 34, 0, 35, 55, 168, 117, 73, 254, 247, 86, 254, 205,
-        248, 0, 128, 34, 124, 227, 123, 18, 2, 211, 24, 1, 147, 5, 34, 67, 70,
-        55, 168, 110, 73, 254, 247, 73, 254, 205, 248, 0, 128, 162, 124, 99,
-        124, 18, 2, 211, 24, 1, 147, 5, 34, 2, 35, 79, 240, 0, 9, 55, 168, 103,
-        73, 254, 247, 58, 254, 205, 248, 0, 144, 205, 248, 4, 128, 34, 125,
-        227, 124, 18, 2, 211, 24, 2, 147, 5, 34, 108, 35, 55, 168, 100, 73,
-        254, 247, 43, 254, 205, 248, 0, 128, 205, 248, 4, 128, 162, 125, 99,
-        125, 18, 2, 211, 24, 2, 147, 5, 34, 108, 35, 79, 240, 2, 10, 55, 168,
-        92, 73, 254, 247, 26, 254, 205, 248, 0, 160, 205, 248, 4, 128, 34, 126,
-        227, 125, 18, 2, 211, 24, 2, 147, 5, 34, 108, 35, 55, 168, 84, 73, 254,
-        247, 11, 254, 205, 248, 0, 144, 205, 248, 4, 128, 162, 126, 99, 126,
-        18, 2, 211, 24, 2, 147, 5, 34, 104, 35, 55, 168, 77, 73, 254, 247, 252,
-        253, 205, 248, 0, 128, 205, 248, 4, 128, 34, 127, 227, 126, 18, 2, 211,
-        24, 2, 147, 5, 34, 55, 168, 104, 35, 69, 73, 254, 247, 237, 253, 205,
-        248, 0, 160, 205, 248, 4, 128, 163, 127, 98, 127, 27, 2, 155, 24, 2,
-        147, 55, 168, 63, 73, 5, 34, 104, 35, 254, 247, 222, 253, 1, 240, 31,
-        189, 162, 120, 99, 120, 18, 2, 210, 24, 58, 73, 55, 168, 254, 247, 212,
-        253, 162, 121, 99, 121, 18, 6, 27, 4, 210, 24, 35, 121, 55, 168, 27,
-        2, 210, 24, 227, 120, 52, 73, 210, 24, 254, 247, 198, 253, 18, 45, 65,
-        242, 6, 133, 162, 122, 99, 122, 18, 6, 27, 4, 210, 24, 35, 122, 55,
-        168, 27, 2, 210, 24, 227, 121, 45, 73, 210, 24, 254, 247, 181, 253,
-        162, 123, 99, 123, 18, 6, 27, 4, 210, 24, 35, 123, 55, 168, 27, 2, 210,
-        24, 227, 122, 39, 73, 210, 24, 254, 247, 167, 253, 162, 124, 99, 124,
-        18, 6, 27, 4, 211, 24, 34, 124, 55, 168, 18, 2, 155, 24, 226, 123, 33,
-        73, 154, 24, 254, 247, 153, 253, 1, 240, 218, 188, 162, 120, 99, 120,
-        18, 2, 211, 24, 0, 147, 2, 34, 67, 70, 55, 168, 27, 73, 8, 241, 1, 8,
-        254, 247, 138, 253, 2, 52, 200, 69, 239, 221, 1, 240, 200, 188, 162,
-        120, 99, 120, 18, 2, 211, 24, 0, 147, 5, 34, 67, 70, 55, 168, 18, 73,
-        8, 241, 1, 8, 254, 247, 120, 253, 2, 52, 200, 69, 239, 221, 1, 240,
-        182, 188, 0, 191, 59, 33, 5, 0, 203, 38, 5, 0, 151, 30, 5, 0, 227, 41,
-        5, 0, 192, 42, 5, 0, 59, 44, 5, 0, 122, 44, 5, 0, 23, 42, 5, 0, 119,
-        42, 5, 0, 137, 30, 5, 0, 7, 41, 5, 0, 124, 43, 5, 0, 243, 38, 5, 0,
-        4, 34, 5, 0, 205, 248, 0, 128, 162, 120, 99, 120, 18, 2, 211, 24, 1,
-        147, 5, 34, 108, 35, 55, 168, 187, 73, 8, 241, 1, 8, 254, 247, 71, 253,
-        2, 52, 208, 69, 237, 221, 79, 234, 85, 9, 95, 250, 137, 249, 9, 241,
-        1, 11, 9, 241, 2, 9, 185, 68, 187, 68, 6, 235, 9, 4, 79, 240, 0, 8,
-        205, 248, 0, 128, 34, 120, 201, 235, 4, 3, 19, 248, 11, 48, 18, 2, 211,
-        24, 1, 147, 5, 34, 104, 35, 55, 168, 170, 73, 8, 241, 1, 8, 254, 247,
-        36, 253, 2, 52, 208, 69, 234, 221, 1, 240, 98, 188, 163, 120, 98, 120,
-        27, 2, 55, 168, 164, 73, 154, 24, 254, 247, 23, 253, 1, 240, 88, 188,
-        163, 120, 98, 120, 27, 2, 55, 168, 160, 73, 154, 24, 254, 247, 13, 253,
-        1, 240, 78, 188, 163, 120, 98, 120, 27, 2, 55, 168, 156, 73, 154, 24,
-        254, 247, 3, 253, 1, 240, 68, 188, 163, 120, 98, 120, 27, 2, 55, 168,
-        152, 73, 154, 24, 254, 247, 249, 252, 1, 240, 58, 188, 34, 121, 227,
-        120, 18, 6, 27, 4, 210, 24, 163, 120, 55, 168, 27, 2, 210, 24, 99, 120,
-        145, 73, 210, 24, 254, 247, 233, 252, 34, 122, 227, 121, 18, 6, 27,
-        4, 210, 24, 163, 121, 55, 168, 27, 2, 210, 24, 99, 121, 139, 73, 210,
-        24, 254, 247, 219, 252, 34, 123, 227, 122, 18, 6, 27, 4, 211, 24, 162,
-        122, 55, 168, 18, 2, 155, 24, 98, 122, 133, 73, 154, 24, 254, 247, 205,
-        252, 1, 240, 14, 188, 162, 120, 99, 120, 18, 2, 55, 168, 129, 73, 210,
-        24, 254, 247, 195, 252, 4, 45, 65, 242, 3, 132, 35, 121, 226, 120, 27,
-        2, 55, 168, 124, 73, 154, 24, 254, 247, 184, 252, 1, 240, 249, 187,
-        34, 121, 227, 120, 18, 6, 27, 4, 210, 24, 163, 120, 55, 168, 27, 2,
-        210, 24, 99, 120, 117, 73, 210, 24, 254, 247, 168, 252, 6, 45, 65, 242,
-        232, 131, 34, 122, 227, 121, 18, 6, 27, 4, 211, 24, 162, 121, 55, 168,
-        18, 2, 155, 24, 98, 121, 110, 73, 154, 24, 254, 247, 151, 252, 1, 240,
-        216, 187, 223, 248, 188, 145, 79, 240, 1, 8, 168, 69, 129, 242, 209,
-        131, 34, 121, 227, 120, 18, 6, 27, 4, 210, 24, 163, 120, 73, 70, 27,
-        2, 210, 24, 99, 120, 55, 168, 210, 24, 8, 241, 4, 8, 254, 247, 126,
-        252, 4, 52, 184, 241, 25, 15, 9, 241, 24, 9, 230, 209, 1, 240, 185,
-        187, 223, 248, 128, 145, 79, 240, 1, 8, 168, 69, 129, 242, 178, 131,
-        34, 121, 227, 120, 18, 6, 27, 4, 210, 24, 163, 120, 73, 70, 27, 2, 210,
-        24, 99, 120, 55, 168, 210, 24, 8, 241, 4, 8, 254, 247, 95, 252, 4, 52,
-        184, 241, 13, 15, 9, 241, 19, 9, 230, 209, 1, 240, 154, 187, 223, 248,
-        72, 145, 79, 240, 1, 8, 168, 69, 129, 242, 147, 131, 34, 121, 227, 120,
-        18, 6, 27, 4, 210, 24, 163, 120, 73, 70, 27, 2, 210, 24, 99, 120, 55,
-        168, 210, 24, 8, 241, 4, 8, 254, 247, 64, 252, 4, 52, 184, 241, 13,
-        15, 9, 241, 20, 9, 230, 209, 1, 240, 123, 187, 223, 248, 12, 145, 79,
-        240, 1, 8, 168, 69, 129, 242, 116, 131, 34, 121, 227, 120, 18, 6, 27,
-        4, 210, 24, 163, 120, 73, 70, 27, 2, 210, 24, 99, 120, 55, 168, 210,
-        24, 8, 241, 4, 8, 254, 247, 33, 252, 4, 52, 184, 241, 13, 15, 9, 241,
-        20, 9, 230, 209, 1, 240, 92, 187, 223, 248, 212, 144, 79, 240, 1, 8,
-        168, 69, 129, 242, 85, 131, 34, 121, 227, 120, 18, 6, 27, 4, 210, 24,
-        163, 120, 73, 70, 27, 2, 210, 24, 99, 120, 55, 168, 210, 24, 8, 241,
-        4, 8, 254, 247, 2, 252, 4, 52, 184, 241, 13, 15, 9, 241, 20, 9, 230,
-        209, 1, 240, 61, 187, 163, 120, 98, 120, 27, 2, 55, 168, 28, 73, 154,
-        24, 254, 247, 242, 251, 1, 240, 51, 187, 163, 120, 98, 120, 27, 2, 55,
-        168, 24, 73, 154, 24, 254, 247, 232, 251, 1, 240, 41, 187, 34, 121,
-        227, 120, 18, 6, 27, 4, 211, 24, 162, 120, 100, 120, 18, 2, 155, 24,
-        55, 168, 17, 73, 1, 34, 27, 25, 254, 247, 215, 251, 1, 240, 24, 187,
-        0, 191, 241, 41, 5, 0, 229, 39, 5, 0, 168, 40, 5, 0, 113, 33, 5, 0,
-        74, 33, 5, 0, 7, 41, 5, 0, 124, 43, 5, 0, 243, 38, 5, 0, 141, 42, 5,
-        0, 160, 42, 5, 0, 154, 41, 5, 0, 177, 41, 5, 0, 170, 38, 5, 0, 39, 44,
-        5, 0, 44, 41, 5, 0, 138, 34, 5, 0, 83, 36, 5, 0, 136, 32, 5, 0, 56,
-        45, 5, 0, 224, 43, 5, 0, 34, 121, 227, 120, 18, 6, 27, 4, 211, 24, 162,
-        120, 100, 120, 18, 2, 155, 24, 55, 168, 151, 73, 2, 34, 27, 25, 254,
-        247, 157, 251, 1, 240, 222, 186, 55, 168, 148, 73, 98, 120, 254, 247,
-        150, 251, 1, 240, 215, 186, 146, 73, 98, 120, 7, 241, 2, 8, 55, 168,
-        254, 247, 141, 251, 22, 248, 8, 32, 143, 73, 18, 9, 55, 168, 254, 247,
-        134, 251, 22, 248, 8, 32, 55, 168, 140, 73, 2, 240, 15, 2, 254, 247,
-        126, 251, 3, 45, 65, 242, 190, 130, 226, 120, 55, 168, 136, 73, 254,
-        247, 118, 251, 7, 241, 5, 8, 34, 121, 55, 168, 133, 73, 254, 247, 111,
-        251, 22, 248, 8, 32, 55, 168, 146, 8, 131, 73, 254, 247, 104, 251, 22,
-        248, 8, 32, 55, 168, 129, 73, 2, 240, 3, 2, 254, 247, 96, 251, 55, 168,
-        127, 73, 162, 121, 254, 247, 91, 251, 1, 240, 156, 186, 148, 248, 2,
-        128, 99, 120, 79, 234, 8, 40, 152, 68, 31, 250, 136, 248, 79, 234, 216,
-        34, 55, 168, 119, 73, 254, 247, 75, 251, 8, 244, 128, 99, 2, 34, 155,
-        10, 55, 168, 116, 73, 254, 247, 67, 251, 8, 244, 0, 115, 2, 34, 91,
-        10, 55, 168, 113, 73, 254, 247, 59, 251, 8, 244, 248, 115, 2, 34, 27,
-        9, 55, 168, 110, 73, 254, 247, 51, 251, 8, 240, 14, 3, 2, 34, 91, 8,
-        55, 168, 107, 73, 254, 247, 43, 251, 2, 34, 8, 240, 1, 3, 55, 168, 105,
-        73, 254, 247, 36, 251, 35, 121, 228, 120, 27, 2, 28, 25, 164, 178, 226,
-        10, 55, 168, 101, 73, 254, 247, 26, 251, 4, 244, 128, 99, 5, 34, 155,
-        10, 55, 168, 92, 73, 254, 247, 18, 251, 4, 244, 0, 115, 5, 34, 91, 10,
-        55, 168, 89, 73, 254, 247, 10, 251, 4, 244, 248, 115, 5, 34, 27, 9,
-        55, 168, 86, 73, 254, 247, 2, 251, 4, 240, 14, 3, 5, 34, 91, 8, 55,
-        168, 83, 73, 254, 247, 250, 250, 55, 168, 82, 73, 5, 34, 4, 240, 1,
-        3, 254, 247, 243, 250, 1, 240, 52, 186, 162, 120, 99, 120, 18, 2, 210,
-        24, 55, 168, 77, 73, 254, 247, 233, 250, 148, 248, 4, 224, 227, 120,
-        79, 234, 14, 46, 0, 34, 115, 68, 55, 168, 73, 73, 254, 247, 222, 250,
-        33, 122, 226, 121, 9, 2, 138, 24, 148, 248, 6, 224, 99, 121, 0, 146,
-        161, 122, 98, 122, 9, 2, 79, 234, 14, 46, 138, 24, 115, 68, 1, 146,
-        55, 168, 0, 34, 63, 73, 254, 247, 201, 250, 34, 123, 227, 122, 0, 146,
-        98, 123, 55, 168, 1, 146, 162, 123, 59, 73, 2, 146, 0, 34, 254, 247,
-        189, 250, 161, 124, 98, 124, 9, 2, 138, 24, 148, 248, 16, 224, 227,
-        123, 0, 146, 33, 125, 226, 124, 9, 2, 138, 24, 1, 146, 161, 125, 98,
-        125, 9, 2, 138, 24, 2, 146, 33, 126, 226, 125, 9, 2, 138, 24, 3, 146,
-        161, 126, 98, 126, 9, 2, 138, 24, 4, 146, 33, 127, 226, 126, 9, 2, 138,
-        24, 5, 146, 161, 127, 98, 127, 9, 2, 138, 24, 6, 146, 148, 248, 32,
-        16, 226, 127, 9, 2, 138, 24, 7, 146, 148, 248, 34, 16, 148, 248, 33,
-        32, 9, 2, 138, 24, 8, 146, 148, 248, 36, 16, 148, 248, 35, 32, 9, 2,
-        138, 24, 9, 146, 148, 248, 38, 32, 148, 248, 37, 16, 18, 2, 82, 24,
-        79, 234, 14, 46, 10, 146, 55, 168, 24, 73, 0, 34, 115, 68, 254, 247,
-        116, 250, 1, 240, 181, 185, 44, 41, 5, 0, 65, 37, 5, 0, 113, 34, 5,
-        0, 35, 35, 5, 0, 240, 33, 5, 0, 200, 31, 5, 0, 134, 35, 5, 0, 250, 40,
-        5, 0, 120, 41, 5, 0, 3, 42, 5, 0, 95, 37, 5, 0, 140, 41, 5, 0, 2, 39,
-        5, 0, 200, 41, 5, 0, 137, 44, 5, 0, 177, 43, 5, 0, 201, 30, 5, 0, 54,
-        36, 5, 0, 59, 33, 5, 0, 18, 31, 5, 0, 153, 35, 5, 0, 223, 35, 5, 0,
-        148, 248, 2, 224, 99, 120, 79, 234, 14, 46, 1, 34, 115, 68, 55, 168,
-        170, 73, 254, 247, 59, 250, 161, 121, 98, 121, 9, 2, 138, 24, 148, 248,
-        4, 224, 227, 120, 0, 146, 33, 122, 226, 121, 9, 2, 79, 234, 14, 46,
-        138, 24, 115, 68, 1, 146, 55, 168, 1, 34, 161, 73, 254, 247, 38, 250,
-        162, 122, 99, 122, 0, 146, 226, 122, 55, 168, 1, 146, 34, 123, 157,
-        73, 2, 146, 1, 34, 254, 247, 26, 250, 33, 124, 226, 123, 9, 2, 138,
-        24, 148, 248, 14, 224, 99, 123, 0, 146, 161, 124, 98, 124, 9, 2, 138,
-        24, 1, 146, 33, 125, 226, 124, 9, 2, 138, 24, 2, 146, 161, 125, 98,
-        125, 9, 2, 138, 24, 3, 146, 33, 126, 226, 125, 9, 2, 138, 24, 4, 146,
-        161, 126, 98, 126, 9, 2, 138, 24, 5, 146, 33, 127, 226, 126, 9, 2, 138,
-        24, 6, 146, 161, 127, 98, 127, 9, 2, 138, 24, 7, 146, 148, 248, 32,
-        16, 226, 127, 9, 2, 138, 24, 8, 146, 148, 248, 34, 16, 148, 248, 33,
-        32, 9, 2, 138, 24, 9, 146, 148, 248, 36, 32, 148, 248, 35, 16, 18, 2,
-        82, 24, 79, 234, 14, 46, 10, 146, 55, 168, 122, 73, 1, 34, 115, 68,
-        254, 247, 211, 249, 1, 240, 20, 185, 148, 248, 2, 224, 99, 120, 79,
-        234, 14, 46, 2, 34, 115, 68, 55, 168, 112, 73, 254, 247, 198, 249, 161,
-        121, 98, 121, 9, 2, 138, 24, 148, 248, 4, 224, 227, 120, 0, 146, 33,
-        122, 226, 121, 9, 2, 79, 234, 14, 46, 138, 24, 115, 68, 1, 146, 55,
-        168, 2, 34, 102, 73, 254, 247, 177, 249, 162, 122, 99, 122, 0, 146,
-        226, 122, 55, 168, 1, 146, 34, 123, 98, 73, 2, 146, 2, 34, 254, 247,
-        165, 249, 33, 124, 226, 123, 9, 2, 138, 24, 148, 248, 14, 224, 99, 123,
-        0, 146, 161, 124, 98, 124, 9, 2, 138, 24, 1, 146, 33, 125, 226, 124,
-        9, 2, 138, 24, 2, 146, 161, 125, 98, 125, 9, 2, 138, 24, 3, 146, 33,
-        126, 226, 125, 9, 2, 138, 24, 4, 146, 161, 126, 98, 126, 9, 2, 138,
-        24, 5, 146, 33, 127, 226, 126, 9, 2, 138, 24, 6, 146, 161, 127, 98,
-        127, 9, 2, 138, 24, 7, 146, 148, 248, 32, 16, 226, 127, 9, 2, 138, 24,
-        8, 146, 148, 248, 34, 16, 148, 248, 33, 32, 9, 2, 138, 24, 9, 146, 148,
-        248, 36, 32, 148, 248, 35, 16, 18, 2, 82, 24, 79, 234, 14, 46, 10, 146,
-        55, 168, 64, 73, 2, 34, 115, 68, 254, 247, 94, 249, 1, 240, 159, 184,
-        98, 120, 55, 168, 60, 73, 254, 247, 87, 249, 1, 34, 163, 120, 55, 168,
-        58, 73, 254, 247, 81, 249, 2, 34, 227, 120, 55, 168, 55, 73, 254, 247,
-        75, 249, 99, 121, 34, 121, 3, 240, 1, 3, 27, 2, 55, 168, 52, 73, 154,
-        24, 254, 247, 65, 249, 1, 240, 130, 184, 162, 120, 99, 120, 18, 2, 211,
-        24, 0, 147, 40, 34, 0, 35, 55, 168, 46, 73, 254, 247, 52, 249, 34, 121,
-        227, 120, 18, 2, 211, 24, 0, 147, 40, 34, 1, 35, 55, 168, 40, 73, 254,
-        247, 41, 249, 162, 121, 99, 121, 18, 2, 211, 24, 0, 147, 40, 34, 2,
-        35, 55, 168, 35, 73, 254, 247, 30, 249, 34, 122, 227, 121, 18, 2, 211,
-        24, 0, 147, 80, 34, 0, 35, 55, 168, 29, 73, 254, 247, 19, 249, 162,
-        122, 99, 122, 18, 2, 211, 24, 0, 147, 80, 34, 1, 35, 55, 168, 24, 73,
-        254, 247, 8, 249, 35, 123, 226, 122, 27, 2, 155, 24, 0, 147, 55, 168,
-        19, 73, 80, 34, 2, 35, 254, 247, 253, 248, 1, 240, 62, 184, 162, 120,
-        99, 120, 18, 2, 210, 24, 55, 168, 14, 73, 254, 247, 243, 248, 35, 121,
-        226, 120, 27, 2, 55, 168, 12, 73, 154, 24, 254, 247, 235, 248, 1, 240,
-        44, 184, 0, 191, 59, 33, 5, 0, 18, 31, 5, 0, 153, 35, 5, 0, 223, 35,
-        5, 0, 214, 31, 5, 0, 229, 30, 5, 0, 30, 43, 5, 0, 230, 40, 5, 0, 2,
-        32, 5, 0, 67, 42, 5, 0, 148, 248, 4, 224, 227, 120, 79, 234, 14, 110,
-        27, 4, 158, 68, 163, 120, 108, 34, 27, 2, 158, 68, 99, 120, 55, 168,
-        115, 68, 151, 73, 254, 247, 195, 248, 148, 248, 8, 224, 227, 121, 79,
-        234, 14, 110, 27, 4, 158, 68, 163, 121, 108, 34, 27, 2, 158, 68, 99,
-        121, 55, 168, 115, 68, 144, 73, 254, 247, 178, 248, 148, 248, 12, 224,
-        227, 122, 79, 234, 14, 110, 27, 4, 158, 68, 163, 122, 109, 34, 27, 2,
-        158, 68, 99, 122, 55, 168, 115, 68, 134, 73, 254, 247, 161, 248, 148,
-        248, 16, 224, 227, 123, 79, 234, 14, 110, 27, 4, 158, 68, 163, 123,
-        109, 34, 27, 2, 158, 68, 99, 123, 55, 168, 115, 68, 127, 73, 254, 247,
-        144, 248, 148, 248, 20, 224, 227, 124, 79, 234, 14, 110, 27, 4, 158,
-        68, 163, 124, 104, 34, 27, 2, 158, 68, 99, 124, 55, 168, 115, 68, 117,
-        73, 254, 247, 127, 248, 148, 248, 24, 224, 227, 125, 79, 234, 14, 110,
-        27, 4, 158, 68, 163, 125, 104, 34, 27, 2, 158, 68, 99, 125, 55, 168,
-        115, 68, 110, 73, 254, 247, 110, 248, 148, 248, 26, 224, 99, 126, 79,
-        234, 14, 46, 108, 34, 115, 68, 55, 168, 105, 73, 254, 247, 99, 248,
-        148, 248, 28, 224, 227, 126, 79, 234, 14, 46, 109, 34, 115, 68, 55,
-        168, 100, 73, 254, 247, 88, 248, 163, 127, 100, 127, 27, 2, 55, 168,
-        96, 73, 104, 34, 27, 25, 254, 247, 79, 248, 0, 240, 144, 191, 148, 248,
-        2, 224, 99, 120, 79, 234, 14, 46, 115, 68, 104, 34, 55, 168, 90, 73,
-        254, 247, 66, 248, 34, 121, 227, 120, 18, 2, 211, 24, 0, 147, 104, 34,
-        108, 35, 55, 168, 85, 73, 254, 247, 55, 248, 162, 121, 99, 121, 18,
-        2, 211, 24, 0, 147, 104, 34, 108, 35, 55, 168, 81, 73, 254, 247, 44,
-        248, 34, 122, 227, 121, 18, 2, 211, 24, 0, 147, 104, 34, 109, 35, 55,
-        168, 74, 73, 254, 247, 33, 248, 162, 122, 99, 122, 18, 2, 211, 24, 0,
-        147, 104, 34, 109, 35, 55, 168, 70, 73, 254, 247, 22, 248, 34, 123,
-        227, 122, 18, 2, 211, 24, 104, 34, 0, 147, 55, 168, 19, 70, 63, 73,
-        254, 247, 11, 248, 162, 123, 99, 123, 18, 2, 211, 24, 104, 34, 0, 147,
-        55, 168, 19, 70, 59, 73, 254, 247, 0, 248, 148, 248, 16, 224, 227, 123,
-        79, 234, 14, 46, 115, 68, 108, 34, 55, 168, 51, 73, 253, 247, 245, 255,
-        162, 124, 99, 124, 18, 2, 211, 24, 108, 34, 0, 147, 55, 168, 19, 70,
-        47, 73, 253, 247, 234, 255, 34, 125, 227, 124, 18, 2, 211, 24, 108,
-        34, 0, 147, 55, 168, 19, 70, 42, 73, 253, 247, 223, 255, 162, 125, 99,
-        125, 18, 2, 211, 24, 0, 147, 108, 34, 7, 241, 24, 8, 109, 35, 55, 168,
-        35, 73, 253, 247, 210, 255, 22, 248, 8, 32, 227, 125, 18, 2, 211, 24,
-        0, 147, 108, 34, 109, 35, 7, 241, 26, 9, 55, 168, 29, 73, 253, 247,
-        196, 255, 22, 248, 9, 32, 99, 126, 18, 2, 211, 24, 0, 147, 108, 34,
-        104, 35, 55, 168, 22, 73, 253, 247, 184, 255, 34, 127, 227, 126, 18,
-        2, 211, 24, 0, 147, 108, 34, 104, 35, 55, 168, 17, 73, 253, 247, 173,
-        255, 163, 127, 22, 248, 8, 224, 27, 2, 104, 34, 115, 68, 55, 168, 13,
-        73, 253, 247, 163, 255, 148, 248, 32, 48, 22, 248, 9, 64, 27, 2, 55,
-        168, 9, 73, 108, 34, 27, 25, 253, 247, 152, 255, 0, 240, 217, 190, 35,
-        36, 5, 0, 127, 45, 5, 0, 205, 42, 5, 0, 21, 39, 5, 0, 200, 39, 5, 0,
-        51, 35, 5, 0, 89, 35, 5, 0, 99, 120, 0, 34, 55, 168, 170, 73, 3, 240,
-        31, 3, 253, 247, 128, 255, 163, 120, 1, 34, 55, 168, 166, 73, 3, 240,
-        31, 3, 253, 247, 120, 255, 227, 120, 2, 34, 55, 168, 162, 73, 3, 240,
-        31, 3, 253, 247, 112, 255, 98, 121, 35, 121, 2, 240, 31, 2, 0, 146,
-        162, 121, 55, 168, 2, 240, 31, 2, 1, 146, 226, 121, 155, 73, 2, 240,
-        31, 2, 2, 146, 3, 240, 31, 3, 0, 34, 253, 247, 92, 255, 98, 122, 35,
-        122, 2, 240, 31, 2, 0, 146, 162, 122, 55, 168, 2, 240, 31, 2, 1, 146,
-        226, 122, 145, 73, 2, 240, 31, 2, 2, 146, 3, 240, 31, 3, 1, 34, 253,
-        247, 72, 255, 98, 123, 35, 123, 2, 240, 31, 2, 0, 146, 162, 123, 55,
-        168, 2, 240, 31, 2, 1, 146, 226, 123, 135, 73, 2, 240, 31, 2, 2, 146,
-        3, 240, 31, 3, 2, 34, 253, 247, 52, 255, 0, 240, 117, 190, 99, 120,
-        0, 34, 55, 168, 129, 73, 3, 240, 63, 3, 253, 247, 42, 255, 163, 120,
-        1, 34, 55, 168, 125, 73, 3, 240, 31, 3, 253, 247, 34, 255, 227, 120,
-        2, 34, 55, 168, 121, 73, 3, 240, 31, 3, 253, 247, 26, 255, 98, 121,
-        35, 121, 2, 240, 63, 2, 0, 146, 162, 121, 55, 168, 2, 240, 63, 2, 1,
-        146, 226, 121, 114, 73, 2, 240, 63, 2, 2, 146, 3, 240, 63, 3, 0, 34,
-        253, 247, 6, 255, 98, 122, 35, 122, 2, 240, 31, 2, 0, 146, 162, 122,
-        55, 168, 2, 240, 31, 2, 1, 146, 226, 122, 104, 73, 2, 240, 31, 2, 2,
-        146, 3, 240, 31, 3, 1, 34, 253, 247, 242, 254, 98, 123, 35, 123, 2,
-        240, 31, 2, 0, 146, 162, 123, 55, 168, 2, 240, 31, 2, 1, 146, 226, 123,
-        94, 73, 2, 240, 31, 2, 2, 146, 3, 240, 31, 3, 2, 34, 253, 247, 222,
-        254, 0, 240, 31, 190, 0, 34, 99, 120, 55, 168, 88, 73, 253, 247, 214,
-        254, 1, 34, 163, 120, 55, 168, 85, 73, 253, 247, 208, 254, 2, 34, 227,
-        120, 55, 168, 82, 73, 253, 247, 202, 254, 0, 34, 35, 121, 55, 168, 80,
-        73, 253, 247, 196, 254, 1, 34, 99, 121, 55, 168, 77, 73, 253, 247, 190,
-        254, 55, 168, 75, 73, 2, 34, 163, 121, 253, 247, 184, 254, 0, 240, 249,
-        189, 148, 248, 2, 128, 99, 120, 79, 234, 8, 40, 152, 68, 31, 250, 136,
-        248, 79, 234, 216, 51, 0, 147, 5, 34, 0, 35, 55, 168, 65, 73, 253, 247,
-        165, 254, 8, 244, 240, 67, 219, 18, 0, 147, 5, 34, 0, 35, 55, 168, 61,
-        73, 253, 247, 155, 254, 8, 244, 224, 99, 27, 18, 0, 147, 5, 34, 0, 35,
-        55, 168, 57, 73, 253, 247, 145, 254, 8, 240, 128, 3, 219, 17, 0, 147,
-        2, 34, 0, 35, 55, 168, 50, 73, 253, 247, 135, 254, 8, 240, 120, 3, 219,
-        16, 0, 147, 2, 34, 0, 35, 55, 168, 46, 73, 253, 247, 125, 254, 8, 240,
-        7, 3, 0, 147, 2, 34, 0, 35, 55, 168, 43, 73, 253, 247, 116, 254, 35,
-        121, 228, 120, 27, 2, 28, 25, 164, 178, 79, 240, 0, 8, 79, 234, 212,
-        57, 5, 34, 104, 35, 55, 168, 36, 73, 4, 244, 240, 74, 79, 234, 234,
-        42, 141, 232, 0, 3, 4, 244, 224, 100, 253, 247, 93, 254, 5, 34, 104,
-        35, 55, 168, 30, 73, 36, 18, 141, 232, 0, 5, 253, 247, 84, 254, 104,
-        35, 55, 168, 27, 73, 5, 34, 205, 248, 0, 128, 1, 148, 253, 247, 75,
-        254, 5, 34, 55, 168, 109, 35, 20, 73, 141, 232, 0, 3, 253, 247, 67,
-        254, 5, 34, 109, 35, 55, 168, 17, 73, 141, 232, 0, 5, 253, 247, 59,
-        254, 55, 168, 15, 73, 5, 34, 109, 35, 205, 248, 0, 128, 1, 148, 253,
-        247, 50, 254, 0, 240, 115, 189, 162, 36, 5, 0, 87, 33, 5, 0, 35, 33,
-        5, 0, 180, 40, 5, 0, 61, 38, 5, 0, 110, 35, 5, 0, 246, 42, 5, 0, 85,
-        44, 5, 0, 64, 40, 5, 0, 246, 30, 5, 0, 67, 34, 5, 0, 2, 38, 5, 0, 148,
-        248, 2, 128, 99, 120, 79, 234, 8, 40, 152, 68, 31, 250, 136, 248, 79,
-        234, 216, 51, 0, 147, 5, 34, 1, 35, 55, 168, 181, 73, 253, 247, 7, 254,
-        8, 244, 240, 67, 219, 18, 0, 147, 5, 34, 1, 35, 55, 168, 177, 73, 253,
-        247, 253, 253, 8, 244, 224, 99, 27, 18, 0, 147, 5, 34, 1, 35, 55, 168,
-        173, 73, 253, 247, 243, 253, 8, 240, 128, 3, 219, 17, 0, 147, 2, 34,
-        1, 35, 55, 168, 166, 73, 253, 247, 233, 253, 8, 240, 120, 3, 219, 16,
-        0, 147, 2, 34, 1, 35, 55, 168, 162, 73, 253, 247, 223, 253, 8, 240,
-        7, 3, 0, 147, 2, 34, 1, 35, 55, 168, 159, 73, 253, 247, 214, 253, 35,
-        121, 228, 120, 27, 2, 28, 25, 164, 178, 79, 240, 1, 8, 79, 234, 212,
-        57, 5, 34, 104, 35, 55, 168, 152, 73, 4, 244, 240, 74, 79, 234, 234,
-        42, 141, 232, 0, 3, 4, 244, 224, 100, 253, 247, 191, 253, 5, 34, 104,
-        35, 55, 168, 146, 73, 36, 18, 141, 232, 0, 5, 253, 247, 182, 253, 104,
-        35, 55, 168, 143, 73, 5, 34, 205, 248, 0, 128, 1, 148, 253, 247, 173,
-        253, 5, 34, 55, 168, 109, 35, 136, 73, 141, 232, 0, 3, 253, 247, 165,
-        253, 5, 34, 109, 35, 55, 168, 133, 73, 141, 232, 0, 5, 253, 247, 157,
-        253, 55, 168, 131, 73, 5, 34, 109, 35, 205, 248, 0, 128, 1, 148, 253,
-        247, 148, 253, 0, 240, 213, 188, 148, 248, 2, 128, 99, 120, 79, 234,
-        8, 40, 152, 68, 31, 250, 136, 248, 79, 234, 216, 51, 0, 147, 5, 34,
-        2, 35, 55, 168, 114, 73, 253, 247, 129, 253, 8, 244, 240, 67, 219, 18,
-        0, 147, 5, 34, 2, 35, 55, 168, 110, 73, 253, 247, 119, 253, 8, 244,
-        224, 99, 27, 18, 0, 147, 5, 34, 2, 35, 55, 168, 106, 73, 253, 247, 109,
-        253, 8, 240, 128, 3, 2, 34, 219, 17, 0, 147, 55, 168, 19, 70, 99, 73,
-        253, 247, 99, 253, 8, 240, 120, 3, 2, 34, 219, 16, 0, 147, 55, 168,
-        19, 70, 95, 73, 253, 247, 89, 253, 2, 34, 8, 240, 7, 3, 0, 147, 55,
-        168, 19, 70, 92, 73, 253, 247, 80, 253, 35, 121, 228, 120, 27, 2, 28,
-        25, 164, 178, 79, 240, 2, 8, 79, 234, 212, 57, 5, 34, 104, 35, 55, 168,
-        85, 73, 4, 244, 240, 74, 79, 234, 234, 42, 141, 232, 0, 3, 4, 244, 224,
-        100, 253, 247, 57, 253, 5, 34, 104, 35, 55, 168, 79, 73, 36, 18, 141,
-        232, 0, 5, 253, 247, 48, 253, 5, 34, 104, 35, 55, 168, 76, 73, 205,
-        248, 0, 128, 1, 148, 253, 247, 39, 253, 109, 35, 55, 168, 70, 73, 5,
-        34, 141, 232, 0, 3, 253, 247, 31, 253, 5, 34, 55, 168, 109, 35, 66,
-        73, 141, 232, 0, 5, 253, 247, 23, 253, 55, 168, 64, 73, 5, 34, 109,
-        35, 205, 248, 0, 128, 1, 148, 253, 247, 14, 253, 0, 240, 79, 188, 148,
-        248, 2, 224, 99, 120, 79, 234, 14, 46, 40, 34, 115, 68, 55, 168, 56,
-        73, 253, 247, 1, 253, 148, 248, 4, 224, 227, 120, 79, 234, 14, 46, 40,
-        34, 115, 68, 55, 168, 52, 73, 253, 247, 246, 252, 148, 248, 6, 224,
-        99, 121, 79, 234, 14, 46, 80, 34, 115, 68, 55, 168, 45, 73, 253, 247,
-        235, 252, 35, 122, 228, 121, 27, 2, 55, 168, 43, 73, 80, 34, 27, 25,
-        253, 247, 226, 252, 0, 240, 35, 188, 162, 120, 99, 120, 0, 146, 226,
-        120, 37, 33, 1, 146, 34, 121, 29, 168, 2, 146, 98, 121, 3, 146, 162,
-        121, 4, 146, 226, 121, 5, 146, 34, 122, 6, 146, 98, 122, 7, 146, 162,
-        122, 8, 146, 226, 122, 9, 146, 34, 123, 10, 146, 98, 123, 11, 146, 162,
-        123, 12, 146, 226, 123, 13, 146, 34, 124, 14, 146, 24, 74, 188, 243,
-        0, 241, 55, 168, 23, 73, 29, 170, 253, 247, 183, 252, 248, 227, 124,
-        28, 50, 93, 55, 168, 20, 73, 2, 240, 127, 2, 253, 247, 174, 252, 50,
-        93, 55, 168, 17, 73, 210, 9, 253, 247, 168, 252, 233, 227, 163, 120,
-        98, 120, 55, 168, 14, 73, 66, 234, 3, 34, 253, 247, 159, 252, 224, 227,
-        246, 42, 5, 0, 85, 44, 5, 0, 64, 40, 5, 0, 246, 30, 5, 0, 67, 34, 5,
-        0, 2, 38, 5, 0, 61, 41, 5, 0, 5, 33, 5, 0, 46, 186, 3, 0, 89, 41, 5,
-        0, 162, 44, 5, 0, 87, 42, 5, 0, 97, 41, 5, 0, 163, 120, 98, 120, 55,
-        168, 148, 73, 66, 234, 3, 34, 253, 247, 124, 252, 189, 227, 227, 120,
-        34, 121, 27, 4, 67, 234, 2, 99, 98, 120, 55, 168, 19, 67, 162, 120,
-        141, 73, 67, 234, 2, 34, 253, 247, 109, 252, 174, 227, 227, 120, 34,
-        121, 27, 4, 67, 234, 2, 99, 98, 120, 55, 168, 19, 67, 162, 120, 135,
-        73, 67, 234, 2, 34, 253, 247, 94, 252, 159, 227, 227, 120, 34, 121,
-        27, 4, 67, 234, 2, 99, 98, 120, 55, 168, 19, 67, 162, 120, 128, 73,
-        67, 234, 2, 34, 253, 247, 79, 252, 144, 227, 163, 120, 98, 120, 55,
-        168, 125, 73, 66, 234, 3, 34, 253, 247, 70, 252, 135, 227, 163, 120,
-        98, 120, 55, 168, 121, 73, 66, 234, 3, 34, 253, 247, 61, 252, 126, 227,
-        163, 120, 98, 120, 55, 168, 118, 73, 66, 234, 3, 34, 253, 247, 52, 252,
-        117, 227, 163, 120, 98, 120, 55, 168, 114, 73, 66, 234, 3, 34, 253,
-        247, 43, 252, 108, 227, 148, 248, 1, 144, 95, 234, 153, 9, 0, 240, 103,
-        131, 79, 240, 0, 8, 161, 121, 226, 121, 9, 2, 148, 248, 3, 224, 65,
-        234, 2, 65, 98, 121, 35, 121, 10, 67, 79, 234, 14, 46, 78, 234, 3, 78,
-        163, 120, 0, 146, 97, 122, 162, 122, 9, 2, 65, 234, 2, 65, 34, 122,
-        55, 168, 10, 67, 1, 146, 33, 123, 98, 123, 9, 2, 65, 234, 2, 65, 226,
-        122, 78, 234, 3, 3, 10, 67, 2, 146, 91, 73, 66, 70, 8, 241, 1, 8, 253,
-        247, 249, 251, 12, 52, 200, 69, 211, 219, 55, 227, 55, 168, 86, 73,
-        98, 120, 253, 247, 240, 251, 49, 227, 55, 168, 84, 73, 98, 120, 253,
-        247, 234, 251, 43, 227, 34, 122, 225, 121, 35, 121, 17, 67, 162, 121,
-        148, 248, 3, 224, 17, 67, 98, 121, 78, 234, 3, 14, 163, 120, 10, 67,
-        78, 234, 3, 14, 99, 120, 0, 146, 34, 123, 225, 122, 78, 234, 3, 3, 17,
-        67, 162, 122, 55, 168, 17, 67, 98, 122, 10, 67, 1, 146, 34, 124, 225,
-        123, 17, 67, 162, 123, 17, 67, 98, 123, 10, 67, 2, 146, 65, 73, 0, 34,
-        253, 247, 193, 251, 34, 126, 225, 125, 35, 125, 17, 67, 162, 125, 148,
-        248, 19, 224, 17, 67, 98, 125, 78, 234, 3, 14, 163, 124, 10, 67, 78,
-        234, 3, 14, 99, 124, 0, 146, 34, 127, 225, 126, 55, 168, 17, 67, 162,
-        126, 78, 234, 3, 3, 17, 67, 98, 126, 10, 67, 1, 146, 148, 248, 32, 32,
-        225, 127, 17, 67, 162, 127, 10, 67, 97, 127, 10, 67, 2, 146, 44, 73,
-        1, 34, 253, 247, 152, 251, 217, 226, 163, 120, 100, 120, 27, 2, 28,
-        25, 164, 178, 4, 240, 15, 3, 0, 147, 40, 34, 0, 35, 55, 168, 37, 73,
-        253, 247, 137, 251, 4, 240, 240, 3, 27, 17, 0, 147, 40, 34, 1, 35, 55,
-        168, 32, 73, 253, 247, 127, 251, 4, 244, 112, 99, 27, 18, 0, 147, 40,
-        34, 2, 35, 55, 168, 27, 73, 253, 247, 117, 251, 55, 168, 26, 73, 40,
-        34, 227, 11, 253, 247, 111, 251, 176, 226, 33, 121, 226, 120, 9, 2,
-        138, 24, 148, 248, 2, 224, 99, 120, 0, 146, 162, 121, 97, 121, 18, 2,
-        82, 24, 79, 234, 14, 46, 1, 146, 55, 168, 16, 73, 0, 34, 115, 68, 253,
-        247, 89, 251, 154, 226, 196, 32, 5, 0, 48, 43, 5, 0, 72, 43, 5, 0, 96,
-        43, 5, 0, 73, 38, 5, 0, 94, 38, 5, 0, 115, 38, 5, 0, 136, 38, 5, 0,
-        89, 40, 5, 0, 21, 41, 5, 0, 197, 33, 5, 0, 106, 37, 5, 0, 138, 37, 5,
-        0, 222, 42, 5, 0, 68, 31, 5, 0, 33, 121, 226, 120, 9, 2, 138, 24, 148,
-        248, 2, 224, 99, 120, 0, 146, 161, 121, 98, 121, 9, 2, 138, 24, 1, 146,
-        33, 122, 226, 121, 9, 2, 138, 24, 2, 146, 161, 122, 98, 122, 9, 2, 138,
-        24, 3, 146, 33, 123, 226, 122, 9, 2, 138, 24, 4, 146, 161, 123, 98,
-        123, 9, 2, 138, 24, 5, 146, 33, 124, 226, 123, 9, 2, 138, 24, 6, 146,
-        161, 124, 98, 124, 9, 2, 138, 24, 7, 146, 33, 125, 226, 124, 9, 2, 138,
-        24, 8, 146, 161, 125, 98, 125, 9, 2, 138, 24, 9, 146, 34, 126, 225,
-        125, 18, 2, 82, 24, 79, 234, 14, 46, 10, 146, 55, 168, 123, 73, 0, 34,
-        115, 68, 253, 247, 248, 250, 57, 226, 33, 121, 226, 120, 9, 2, 138,
-        24, 148, 248, 2, 224, 99, 120, 0, 146, 161, 121, 98, 121, 9, 2, 138,
-        24, 1, 146, 33, 122, 226, 121, 9, 2, 138, 24, 2, 146, 161, 122, 98,
-        122, 9, 2, 138, 24, 3, 146, 33, 123, 226, 122, 9, 2, 138, 24, 4, 146,
-        161, 123, 98, 123, 9, 2, 138, 24, 5, 146, 33, 124, 226, 123, 9, 2, 138,
-        24, 6, 146, 161, 124, 98, 124, 9, 2, 138, 24, 7, 146, 33, 125, 226,
-        124, 9, 2, 138, 24, 8, 146, 161, 125, 98, 125, 9, 2, 138, 24, 9, 146,
-        34, 126, 225, 125, 18, 2, 82, 24, 79, 234, 14, 46, 10, 146, 55, 168,
-        90, 73, 0, 34, 115, 68, 253, 247, 181, 250, 246, 225, 33, 121, 226,
-        120, 9, 2, 138, 24, 148, 248, 2, 224, 99, 120, 0, 146, 161, 121, 98,
-        121, 9, 2, 138, 24, 1, 146, 33, 122, 226, 121, 9, 2, 138, 24, 2, 146,
-        161, 122, 98, 122, 9, 2, 138, 24, 3, 146, 33, 123, 226, 122, 9, 2, 138,
-        24, 4, 146, 161, 123, 98, 123, 9, 2, 138, 24, 5, 146, 33, 124, 226,
-        123, 9, 2, 138, 24, 6, 146, 161, 124, 98, 124, 9, 2, 138, 24, 7, 146,
-        33, 125, 226, 124, 9, 2, 138, 24, 8, 146, 161, 125, 98, 125, 9, 2, 138,
-        24, 9, 146, 33, 126, 226, 125, 9, 2, 79, 234, 14, 46, 138, 24, 10, 146,
-        115, 68, 0, 34, 55, 168, 57, 73, 253, 247, 114, 250, 33, 127, 226, 126,
-        9, 2, 138, 24, 148, 248, 26, 224, 99, 126, 0, 146, 161, 127, 98, 127,
-        9, 2, 138, 24, 1, 146, 148, 248, 32, 16, 226, 127, 9, 2, 138, 24, 2,
-        146, 148, 248, 34, 16, 148, 248, 33, 32, 9, 2, 138, 24, 3, 146, 148,
-        248, 36, 16, 148, 248, 35, 32, 9, 2, 138, 24, 4, 146, 148, 248, 38,
-        16, 148, 248, 37, 32, 9, 2, 138, 24, 5, 146, 148, 248, 40, 16, 148,
-        248, 39, 32, 9, 2, 138, 24, 6, 146, 148, 248, 42, 16, 148, 248, 41,
-        32, 9, 2, 138, 24, 7, 146, 148, 248, 44, 16, 148, 248, 43, 32, 9, 2,
-        138, 24, 8, 146, 148, 248, 46, 16, 148, 248, 45, 32, 9, 2, 138, 24,
-        9, 146, 148, 248, 48, 32, 148, 248, 47, 16, 18, 2, 82, 24, 79, 234,
-        14, 46, 10, 146, 55, 168, 16, 73, 1, 34, 115, 68, 253, 247, 31, 250,
-        96, 225, 163, 120, 98, 120, 27, 2, 55, 168, 12, 73, 154, 24, 253, 247,
-        22, 250, 87, 225, 55, 168, 10, 73, 98, 120, 253, 247, 16, 250, 81, 225,
-        163, 120, 98, 120, 55, 168, 7, 73, 66, 234, 3, 34, 253, 247, 7, 250,
-        72, 225, 64, 32, 5, 0, 125, 33, 5, 0, 238, 44, 5, 0, 54, 36, 5, 0, 242,
-        31, 5, 0, 111, 31, 5, 0, 226, 120, 35, 121, 18, 4, 66, 234, 3, 98, 99,
-        120, 33, 122, 26, 67, 227, 121, 32, 123, 27, 4, 67, 234, 1, 99, 97,
-        121, 148, 248, 2, 192, 11, 67, 225, 122, 148, 248, 6, 224, 9, 4, 65,
-        234, 0, 97, 96, 122, 66, 234, 12, 34, 1, 67, 160, 122, 67, 234, 14,
-        35, 65, 234, 0, 33, 0, 145, 225, 123, 32, 124, 9, 4, 65, 234, 0, 97,
-        96, 123, 1, 67, 160, 123, 65, 234, 0, 33, 1, 145, 225, 124, 32, 125,
-        9, 4, 65, 234, 0, 97, 96, 124, 1, 67, 160, 124, 65, 234, 0, 33, 2, 145,
-        225, 125, 32, 126, 9, 4, 65, 234, 0, 97, 96, 125, 1, 67, 160, 125, 65,
-        234, 0, 33, 3, 145, 225, 126, 32, 127, 9, 4, 65, 234, 0, 97, 96, 126,
-        1, 67, 160, 126, 65, 234, 0, 33, 4, 145, 225, 127, 148, 248, 32, 0,
-        9, 4, 65, 234, 0, 97, 96, 127, 1, 67, 160, 127, 65, 234, 0, 33, 5, 145,
-        148, 248, 35, 16, 148, 248, 36, 0, 9, 4, 65, 234, 0, 97, 148, 248, 33,
-        0, 1, 67, 148, 248, 34, 0, 65, 234, 0, 33, 6, 145, 148, 248, 39, 0,
-        148, 248, 40, 16, 0, 4, 64, 234, 1, 96, 148, 248, 37, 16, 1, 67, 148,
-        248, 38, 0, 65, 234, 0, 33, 7, 145, 55, 168, 133, 73, 253, 247, 127,
-        249, 192, 224, 226, 120, 35, 121, 18, 4, 66, 234, 3, 98, 99, 120, 33,
-        122, 26, 67, 227, 121, 32, 123, 27, 4, 67, 234, 1, 99, 97, 121, 148,
-        248, 2, 192, 11, 67, 225, 122, 148, 248, 6, 224, 9, 4, 65, 234, 0, 97,
-        96, 122, 66, 234, 12, 34, 1, 67, 160, 122, 67, 234, 14, 35, 65, 234,
-        0, 33, 0, 145, 225, 123, 32, 124, 9, 4, 65, 234, 0, 97, 96, 123, 1,
-        67, 160, 123, 65, 234, 0, 33, 1, 145, 225, 124, 32, 125, 9, 4, 65, 234,
-        0, 97, 96, 124, 1, 67, 160, 124, 65, 234, 0, 33, 2, 145, 225, 125, 32,
-        126, 9, 4, 65, 234, 0, 97, 96, 125, 1, 67, 160, 125, 65, 234, 0, 33,
-        3, 145, 225, 126, 32, 127, 9, 4, 65, 234, 0, 97, 96, 126, 1, 67, 160,
-        126, 65, 234, 0, 33, 4, 145, 225, 127, 148, 248, 32, 0, 9, 4, 65, 234,
-        0, 97, 96, 127, 1, 67, 160, 127, 65, 234, 0, 33, 5, 145, 148, 248, 35,
-        16, 148, 248, 36, 0, 9, 4, 65, 234, 0, 97, 148, 248, 33, 0, 1, 67, 148,
-        248, 34, 0, 65, 234, 0, 33, 6, 145, 148, 248, 39, 0, 148, 248, 40, 16,
-        0, 4, 64, 234, 1, 96, 148, 248, 37, 16, 1, 67, 148, 248, 38, 0, 65,
-        234, 0, 33, 7, 145, 55, 168, 72, 73, 253, 247, 3, 249, 68, 224, 11,
-        45, 5, 208, 70, 73, 42, 70, 70, 72, 187, 243, 255, 244, 60, 224, 163,
-        120, 98, 120, 27, 2, 210, 24, 55, 168, 67, 73, 253, 247, 242, 248, 35,
-        121, 226, 120, 27, 2, 210, 24, 55, 168, 64, 73, 253, 247, 234, 248,
-        163, 121, 98, 121, 27, 2, 210, 24, 55, 168, 61, 73, 253, 247, 226, 248,
-        35, 122, 226, 121, 27, 2, 210, 24, 55, 168, 58, 73, 253, 247, 218, 248,
-        162, 122, 99, 122, 18, 2, 55, 168, 55, 73, 154, 24, 253, 247, 210, 248,
-        19, 224, 227, 120, 34, 121, 27, 4, 67, 234, 2, 99, 98, 120, 55, 168,
-        19, 67, 162, 120, 49, 73, 67, 234, 2, 34, 253, 247, 195, 248, 4, 224,
-        0, 33, 20, 145, 1, 224, 1, 34, 19, 146, 16, 153, 123, 25, 255, 41, 125,
-        244, 91, 169, 21, 154, 1, 50, 21, 146, 21, 155, 27, 153, 139, 66, 125,
-        244, 75, 169, 17, 154, 81, 28, 3, 208, 55, 168, 36, 73, 253, 247, 169,
-        248, 157, 248, 156, 48, 35, 177, 55, 168, 34, 73, 39, 170, 253, 247,
-        161, 248, 22, 155, 10, 43, 12, 216, 0, 32, 31, 73, 190, 247, 106, 250,
-        56, 185, 19, 153, 41, 185, 55, 168, 28, 73, 19, 154, 255, 35, 253, 247,
-        145, 248, 56, 154, 0, 35, 2, 248, 1, 59, 68, 155, 26, 152, 0, 147, 18,
-        153, 24, 155, 56, 146, 253, 247, 101, 248, 4, 70, 18, 152, 192, 247,
-        200, 250, 1, 224, 111, 240, 1, 4, 32, 70, 59, 176, 189, 232, 240, 143,
-        1, 33, 19, 145, 185, 231, 0, 191, 179, 36, 5, 0, 240, 36, 5, 0, 92,
-        29, 5, 0, 115, 186, 3, 0, 64, 39, 5, 0, 84, 39, 5, 0, 104, 39, 5, 0,
-        124, 39, 5, 0, 144, 39, 5, 0, 29, 38, 5, 0, 14, 40, 5, 0, 229, 33, 5,
-        0, 55, 33, 5, 0, 141, 31, 5, 0, 45, 233, 240, 79, 141, 176, 5, 146,
-        5, 70, 138, 70, 6, 168, 0, 33, 20, 34, 152, 70, 11, 145, 187, 243, 43,
-        244, 89, 75, 28, 120, 0, 44, 64, 240, 163, 128, 107, 105, 35, 43, 12,
-        221, 28, 34, 40, 70, 33, 70, 35, 70, 0, 148, 198, 243, 190, 241, 0,
-        40, 6, 218, 1, 38, 2, 39, 177, 70, 5, 224, 4, 39, 1, 38, 1, 224, 12,
-        39, 3, 38, 161, 70, 40, 70, 198, 243, 65, 241, 1, 40, 131, 70, 2, 208,
-        2, 40, 19, 209, 5, 224, 40, 70, 81, 70, 187, 243, 171, 243, 64, 0, 11,
-        224, 40, 70, 189, 247, 112, 252, 4, 70, 56, 177, 189, 247, 69, 252,
-        195, 5, 3, 213, 32, 70, 189, 247, 69, 252, 11, 144, 11, 152, 0, 40,
-        78, 208, 192, 247, 85, 250, 4, 70, 0, 40, 110, 208, 187, 241, 1, 15,
-        3, 208, 187, 241, 2, 15, 27, 209, 11, 224, 11, 155, 0, 33, 1, 147, 2,
-        144, 5, 154, 40, 70, 83, 70, 0, 145, 3, 145, 187, 243, 128, 243, 12,
-        224, 11, 154, 12, 171, 82, 8, 67, 248, 4, 45, 40, 70, 1, 33, 34, 70,
-        189, 247, 123, 252, 11, 155, 91, 0, 11, 147, 0, 40, 64, 209, 34, 136,
-        79, 246, 253, 115, 1, 58, 146, 178, 154, 66, 3, 217, 32, 70, 192, 247,
-        41, 250, 28, 224, 185, 241, 0, 15, 3, 208, 4, 235, 71, 7, 6, 151, 25,
-        224, 227, 25, 98, 136, 6, 147, 163, 136, 167, 245, 128, 87, 7, 235,
-        18, 34, 27, 6, 2, 235, 19, 67, 227, 24, 7, 147, 227, 136, 219, 25, 227,
-        24, 8, 147, 35, 137, 223, 25, 231, 25, 9, 151, 3, 224, 21, 75, 0, 36,
-        6, 147, 1, 38, 22, 154, 80, 70, 0, 146, 6, 169, 50, 70, 67, 70, 253,
-        247, 10, 248, 80, 185, 22, 155, 40, 70, 26, 104, 216, 248, 0, 16, 1,
-        240, 124, 252, 216, 248, 0, 32, 11, 75, 26, 96, 20, 177, 32, 70, 192,
-        247, 239, 249, 6, 74, 1, 35, 19, 112, 22, 155, 0, 32, 200, 248, 0, 0,
-        24, 96, 1, 224, 111, 240, 26, 0, 13, 176, 189, 232, 240, 143, 77, 45,
-        4, 0, 81, 35, 5, 0, 120, 43, 5, 0, 48, 181, 25, 70, 3, 155, 4, 156,
-        67, 177, 76, 177, 0, 37, 29, 96, 37, 96, 3, 148, 189, 232, 48, 64, 255,
-        247, 44, 191, 24, 70, 48, 189, 32, 70, 48, 189, 1, 75, 0, 34, 26, 112,
-        112, 71, 77, 45, 4, 0, 112, 181, 12, 78, 13, 70, 48, 104, 128, 185,
-        11, 73, 189, 247, 126, 255, 1, 36, 4, 224, 32, 70, 0, 33, 189, 247,
-        120, 255, 1, 52, 51, 104, 156, 66, 247, 217, 3, 75, 40, 70, 29, 96,
-        112, 189, 79, 240, 255, 48, 112, 189, 0, 191, 208, 7, 0, 0, 173, 222,
-        173, 222, 6, 75, 26, 104, 25, 70, 50, 177, 1, 35, 0, 224, 1, 51, 147,
-        66, 252, 217, 0, 35, 11, 96, 0, 32, 112, 71, 0, 191, 208, 7, 0, 0, 45,
-        233, 240, 71, 12, 70, 22, 104, 130, 70, 21, 70, 8, 70, 132, 34, 0, 33,
-        152, 70, 157, 248, 36, 112, 187, 243, 30, 243, 32, 70, 188, 243, 71,
-        241, 192, 178, 0, 40, 50, 208, 1, 35, 35, 112, 157, 248, 32, 48, 160,
-        112, 0, 51, 24, 191, 1, 35, 227, 112, 60, 35, 60, 46, 180, 191, 177,
-        70, 79, 240, 60, 9, 164, 248, 14, 128, 103, 112, 163, 129, 0, 38, 21,
-        224, 80, 70, 65, 70, 58, 70, 192, 243, 22, 241, 48, 185, 99, 104, 0,
-        43, 12, 191, 111, 240, 26, 0, 0, 32, 11, 224, 163, 120, 1, 54, 195,
-        112, 99, 104, 67, 97, 35, 137, 96, 96, 1, 51, 35, 129, 78, 69, 231,
-        219, 0, 32, 35, 137, 99, 129, 43, 96, 189, 232, 240, 135, 79, 240, 255,
-        48, 189, 232, 240, 135, 248, 181, 6, 70, 12, 70, 0, 37, 11, 224, 123,
-        105, 48, 70, 99, 96, 0, 35, 123, 97, 251, 112, 57, 70, 226, 120, 192,
-        247, 110, 249, 1, 53, 173, 178, 103, 104, 0, 47, 240, 209, 35, 137,
-        32, 70, 91, 27, 35, 129, 99, 137, 93, 27, 101, 129, 188, 243, 224, 240,
-        167, 112, 39, 112, 56, 70, 248, 189, 16, 181, 195, 124, 3, 43, 8, 208,
-        156, 29, 0, 235, 196, 4, 1, 51, 97, 96, 162, 96, 195, 116, 0, 32, 16,
-        189, 79, 240, 255, 48, 16, 189, 45, 233, 248, 67, 17, 240, 31, 6, 24,
-        191, 1, 38, 6, 235, 81, 23, 7, 241, 7, 9, 79, 234, 137, 9, 72, 70, 13,
-        70, 1, 240, 31, 8, 192, 247, 4, 249, 4, 70, 0, 40, 59, 208, 0, 33, 74,
-        70, 191, 178, 187, 243, 150, 242, 103, 128, 165, 128, 229, 128, 164,
-        96, 33, 70, 34, 70, 0, 35, 3, 224, 79, 240, 255, 48, 144, 97, 1, 51,
-        4, 50, 187, 66, 248, 211, 86, 177, 79, 240, 255, 50, 2, 250, 8, 248,
-        123, 29, 4, 235, 131, 3, 90, 104, 130, 234, 8, 2, 90, 96, 23, 240, 31,
-        3, 24, 191, 1, 35, 7, 240, 31, 0, 3, 235, 87, 23, 39, 128, 0, 34, 3,
-        224, 79, 240, 255, 53, 141, 96, 1, 50, 4, 49, 186, 66, 248, 211, 67,
-        177, 79, 240, 255, 51, 131, 64, 1, 55, 4, 235, 135, 7, 122, 104, 83,
-        64, 123, 96, 32, 70, 189, 232, 248, 131, 8, 70, 192, 247, 194, 184,
-        67, 107, 35, 177, 79, 244, 127, 98, 154, 96, 67, 107, 5, 224, 131, 107,
-        75, 177, 79, 244, 127, 98, 154, 96, 131, 107, 152, 104, 208, 241, 1,
-        0, 56, 191, 0, 32, 112, 71, 1, 32, 112, 71, 3, 70, 0, 32, 1, 224, 1,
-        48, 192, 178, 91, 8, 251, 209, 112, 71, 11, 104, 67, 244, 64, 51, 11,
-        96, 8, 104, 11, 104, 0, 244, 64, 48, 35, 244, 64, 51, 11, 96, 160, 245,
-        64, 49, 72, 66, 64, 235, 1, 0, 112, 71, 8, 181, 65, 107, 9, 185, 129,
-        107, 33, 177, 128, 106, 255, 247, 231, 255, 1, 32, 8, 189, 8, 70, 8,
-        189, 45, 233, 240, 71, 221, 248, 32, 128, 31, 136, 9, 157, 16, 70, 137,
-        70, 20, 70, 30, 70, 57, 70, 66, 70, 43, 70, 191, 243, 144, 245, 130,
-        70, 232, 177, 1, 35, 19, 250, 7, 247, 43, 104, 1, 59, 219, 25, 179,
-        251, 247, 243, 95, 67, 99, 30, 219, 25, 95, 64, 23, 234, 9, 15, 14,
-        208, 32, 70, 255, 247, 184, 255, 48, 128, 80, 70, 191, 243, 130, 245,
-        49, 136, 32, 70, 66, 70, 43, 70, 189, 232, 240, 71, 191, 243, 112, 181,
-        80, 70, 189, 232, 240, 135, 112, 181, 0, 35, 1, 41, 12, 191, 176, 248,
-        70, 32, 176, 248, 108, 32, 134, 176, 4, 147, 176, 248, 68, 48, 18, 1,
-        1, 41, 4, 70, 173, 248, 22, 48, 13, 70, 128, 106, 65, 246, 255, 115,
-        41, 209, 4, 174, 212, 248, 196, 16, 0, 150, 4, 241, 92, 6, 1, 150, 153,
-        66, 20, 191, 79, 244, 128, 49, 79, 244, 0, 81, 4, 241, 80, 6, 13, 241,
-        22, 3, 2, 150, 255, 247, 164, 255, 0, 40, 64, 208, 189, 248, 22, 48,
-        226, 109, 21, 250, 3, 243, 81, 30, 201, 24, 177, 251, 243, 241, 75,
-        67, 163, 101, 155, 26, 155, 178, 192, 24, 164, 248, 96, 48, 4, 155,
-        224, 99, 99, 102, 43, 224, 4, 173, 212, 248, 204, 16, 0, 149, 4, 241,
-        132, 5, 1, 149, 153, 66, 20, 191, 79, 244, 128, 49, 79, 244, 0, 81,
-        4, 241, 120, 5, 13, 241, 22, 3, 2, 149, 255, 247, 122, 255, 184, 177,
-        189, 248, 22, 48, 1, 37, 21, 250, 3, 243, 212, 248, 132, 32, 81, 30,
-        201, 24, 177, 251, 243, 241, 75, 67, 196, 248, 128, 48, 155, 26, 155,
-        178, 192, 24, 164, 248, 136, 48, 4, 155, 32, 100, 196, 248, 140, 48,
-        40, 70, 6, 176, 112, 189, 255, 247, 143, 191, 45, 233, 247, 79, 141,
-        232, 3, 0, 14, 174, 224, 32, 20, 70, 154, 70, 13, 159, 150, 232, 64,
-        10, 221, 248, 76, 128, 191, 247, 211, 255, 5, 70, 0, 40, 0, 240, 121,
-        129, 0, 33, 224, 34, 187, 243, 101, 241, 154, 75, 0, 33, 184, 241, 0,
-        15, 8, 191, 152, 70, 10, 70, 197, 248, 28, 128, 32, 70, 197, 243, 237,
-        246, 12, 155, 192, 243, 0, 48, 171, 99, 147, 75, 3, 33, 43, 96, 0, 34,
-        133, 248, 48, 0, 197, 248, 52, 160, 40, 70, 190, 247, 100, 250, 8, 34,
-        5, 241, 32, 0, 1, 153, 187, 243, 36, 242, 0, 35, 133, 248, 39, 48, 0,
-        155, 236, 98, 171, 98, 187, 241, 255, 63, 20, 191, 91, 70, 204, 35,
-        185, 241, 204, 15, 136, 191, 195, 235, 9, 9, 197, 248, 152, 48, 189,
-        248, 68, 48, 165, 248, 70, 112, 197, 248, 156, 48, 157, 248, 72, 48,
-        165, 248, 108, 96, 197, 248, 160, 48, 12, 155, 165, 248, 148, 144, 0,
-        43, 69, 208, 170, 107, 19, 104, 217, 7, 4, 213, 35, 240, 1, 3, 19, 96,
-        170, 107, 19, 96, 171, 107, 79, 240, 255, 50, 154, 96, 32, 70, 197,
-        243, 167, 246, 64, 246, 60, 3, 152, 66, 18, 209, 232, 106, 197, 243,
-        176, 246, 5, 40, 9, 208, 232, 106, 197, 243, 171, 246, 8, 40, 4, 208,
-        232, 106, 197, 243, 166, 246, 12, 40, 3, 209, 171, 107, 79, 240, 255,
-        50, 154, 96, 171, 107, 154, 104, 18, 5, 18, 13, 26, 177, 90, 104, 66,
-        240, 15, 2, 1, 224, 65, 246, 255, 114, 197, 248, 204, 32, 26, 104, 2,
-        244, 224, 18, 146, 12, 133, 248, 181, 32, 26, 104, 2, 244, 96, 2, 82,
-        13, 133, 248, 186, 32, 27, 104, 3, 240, 64, 115, 27, 14, 133, 248, 187,
-        48, 186, 241, 0, 15, 77, 208, 106, 107, 19, 104, 216, 7, 4, 213, 35,
-        240, 1, 3, 19, 96, 106, 107, 19, 96, 107, 107, 79, 240, 255, 50, 154,
-        96, 232, 106, 197, 243, 94, 246, 64, 246, 60, 3, 152, 66, 18, 209, 232,
-        106, 197, 243, 103, 246, 5, 40, 9, 208, 232, 106, 197, 243, 98, 246,
-        8, 40, 4, 208, 232, 106, 197, 243, 93, 246, 12, 40, 3, 209, 107, 107,
-        79, 240, 255, 50, 154, 96, 107, 107, 154, 104, 18, 5, 18, 13, 26, 177,
-        90, 104, 66, 240, 15, 2, 1, 224, 65, 246, 255, 114, 197, 248, 196, 32,
-        197, 248, 200, 32, 26, 104, 2, 244, 224, 18, 146, 12, 133, 248, 182,
-        32, 26, 104, 2, 244, 224, 114, 146, 9, 133, 248, 183, 32, 26, 104, 2,
-        244, 96, 2, 82, 13, 133, 248, 184, 32, 27, 104, 3, 240, 64, 115, 27,
-        14, 133, 248, 185, 48, 98, 104, 0, 35, 1, 42, 197, 248, 164, 48, 197,
-        248, 172, 48, 24, 209, 162, 104, 178, 245, 2, 111, 3, 208, 64, 246,
-        60, 1, 138, 66, 2, 209, 79, 240, 0, 67, 3, 224, 79, 240, 128, 66, 197,
-        248, 164, 32, 197, 248, 168, 48, 213, 248, 164, 48, 197, 248, 172, 48,
-        213, 248, 168, 48, 197, 248, 176, 48, 32, 70, 197, 243, 252, 245, 64,
-        246, 41, 3, 152, 66, 8, 209, 32, 70, 197, 243, 5, 246, 32, 177, 32,
-        70, 197, 243, 1, 246, 2, 40, 15, 217, 32, 70, 197, 243, 236, 245, 64,
-        246, 52, 3, 152, 66, 12, 209, 32, 70, 197, 243, 245, 245, 32, 177, 32,
-        70, 197, 243, 241, 245, 1, 40, 3, 209, 0, 35, 133, 248, 49, 48, 4, 224,
-        40, 70, 255, 247, 23, 254, 133, 248, 49, 0, 40, 70, 255, 247, 228, 253,
-        133, 248, 180, 0, 104, 177, 13, 35, 255, 47, 165, 248, 68, 48, 12, 216,
-        255, 46, 9, 216, 12, 35, 5, 224, 0, 191, 176, 45, 4, 0, 236, 206, 3,
-        0, 4, 35, 165, 248, 68, 48, 79, 177, 188, 0, 32, 70, 191, 247, 138,
-        254, 232, 100, 104, 179, 0, 33, 34, 70, 187, 243, 30, 240, 78, 177,
-        180, 0, 32, 70, 191, 247, 127, 254, 104, 103, 16, 179, 0, 33, 34, 70,
-        187, 243, 19, 240, 39, 177, 40, 70, 1, 33, 255, 247, 144, 254, 192,
-        177, 38, 177, 40, 70, 2, 33, 255, 247, 138, 254, 144, 177, 213, 248,
-        164, 48, 91, 177, 149, 248, 49, 48, 67, 185, 171, 109, 179, 241, 128,
-        79, 8, 216, 213, 248, 128, 48, 179, 241, 128, 79, 3, 216, 1, 35, 133,
-        248, 221, 48, 3, 224, 40, 70, 190, 243, 35, 243, 0, 37, 40, 70, 189,
-        232, 254, 143, 0, 191, 16, 181, 4, 70, 197, 243, 200, 247, 0, 33, 32,
-        70, 10, 70, 197, 243, 119, 245, 192, 4, 7, 213, 32, 70, 197, 243, 242,
-        244, 0, 40, 12, 191, 32, 32, 64, 32, 16, 189, 32, 32, 16, 189, 45, 233,
-        240, 71, 4, 70, 38, 106, 9, 169, 4, 46, 102, 106, 157, 248, 32, 0, 204,
-        191, 6, 244, 120, 22, 6, 244, 240, 22, 145, 232, 34, 2, 118, 12, 79,
-        240, 0, 8, 75, 224, 49, 248, 40, 160, 31, 250, 131, 252, 226, 69, 1,
-        235, 136, 7, 3, 209, 151, 248, 2, 192, 132, 69, 4, 208, 8, 241, 1, 8,
-        95, 250, 136, 248, 58, 224, 0, 42, 53, 208, 6, 251, 8, 248, 0, 37, 46,
-        224, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 90, 6, 7, 213, 64,
-        246, 39, 1, 0, 34, 197, 243, 244, 245, 1, 70, 32, 70, 0, 224, 0, 33,
-        79, 244, 204, 98, 197, 243, 60, 245, 5, 96, 99, 105, 32, 70, 34, 43,
-        10, 221, 227, 105, 91, 6, 7, 213, 64, 246, 39, 1, 0, 34, 197, 243, 223,
-        245, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242, 100, 98, 197, 243, 39, 245,
-        9, 235, 136, 3, 83, 248, 37, 48, 1, 53, 3, 96, 235, 178, 179, 66, 205,
-        211, 248, 120, 189, 232, 240, 135, 168, 69, 177, 211, 0, 32, 189, 232,
-        240, 135, 45, 233, 248, 67, 4, 70, 30, 70, 0, 43, 0, 240, 180, 128,
-        67, 106, 2, 235, 6, 21, 3, 244, 248, 89, 79, 234, 25, 41, 85, 248, 4,
-        60, 1, 62, 11, 185, 0, 39, 159, 224, 32, 70, 152, 71, 0, 40, 0, 240,
-        158, 128, 247, 231, 1, 34, 186, 64, 85, 248, 16, 60, 26, 66, 0, 240,
-        146, 128, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 90, 6, 7, 213,
-        64, 246, 39, 1, 0, 34, 197, 243, 153, 245, 1, 70, 32, 70, 0, 224, 0,
-        33, 79, 244, 196, 98, 197, 243, 225, 244, 7, 96, 21, 249, 12, 44, 34,
-        177, 1, 42, 25, 208, 1, 50, 117, 209, 68, 224, 99, 105, 32, 70, 34,
-        43, 9, 221, 227, 105, 91, 6, 6, 213, 64, 246, 39, 1, 197, 243, 125,
-        245, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242, 36, 98, 197, 243, 197, 244,
-        85, 248, 8, 60, 3, 96, 93, 224, 99, 105, 32, 70, 34, 43, 10, 221, 227,
-        105, 89, 6, 7, 213, 64, 246, 39, 1, 0, 34, 197, 243, 101, 245, 1, 70,
-        32, 70, 0, 224, 0, 33, 64, 242, 36, 98, 197, 243, 173, 244, 99, 105,
-        128, 70, 34, 43, 32, 70, 10, 221, 227, 105, 90, 6, 7, 213, 64, 246,
-        39, 1, 0, 34, 197, 243, 80, 245, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242,
-        36, 98, 197, 243, 152, 244, 85, 248, 8, 60, 2, 104, 19, 67, 45, 224,
-        99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 91, 6, 7, 213, 64, 246,
-        39, 1, 0, 34, 197, 243, 55, 245, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242,
-        36, 98, 197, 243, 127, 244, 99, 105, 128, 70, 34, 43, 32, 70, 10, 221,
-        227, 105, 89, 6, 7, 213, 64, 246, 39, 1, 0, 34, 197, 243, 34, 245, 1,
-        70, 32, 70, 0, 224, 0, 33, 64, 242, 36, 98, 197, 243, 106, 244, 85,
-        248, 8, 44, 3, 104, 35, 234, 2, 3, 200, 248, 0, 48, 1, 55, 79, 69, 127,
-        244, 99, 175, 16, 61, 0, 46, 127, 244, 83, 175, 189, 232, 248, 131,
-        0, 0, 112, 181, 157, 73, 4, 70, 0, 32, 189, 247, 162, 252, 0, 40, 0,
-        240, 49, 129, 0, 32, 152, 73, 189, 247, 155, 252, 151, 73, 5, 70, 0,
-        32, 189, 247, 150, 252, 148, 73, 6, 70, 0, 32, 189, 247, 145, 252, 21,
-        240, 0, 101, 0, 240, 172, 128, 79, 244, 0, 18, 0, 33, 19, 70, 32, 70,
-        190, 247, 146, 254, 2, 34, 6, 33, 19, 70, 32, 70, 197, 243, 246, 244,
-        99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 90, 6, 7, 213, 64, 246,
-        39, 1, 0, 34, 197, 243, 212, 244, 1, 70, 32, 70, 0, 224, 0, 33, 79,
-        244, 193, 98, 197, 243, 28, 244, 6, 104, 0, 37, 6, 244, 128, 118, 27,
-        224, 79, 244, 122, 112, 191, 243, 221, 241, 99, 105, 32, 70, 34, 43,
-        10, 221, 227, 105, 91, 6, 7, 213, 64, 246, 39, 1, 50, 70, 197, 243,
-        183, 244, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 193, 98, 197, 243,
-        255, 243, 6, 104, 1, 53, 6, 244, 128, 118, 30, 185, 181, 245, 122, 127,
-        223, 209, 112, 189, 181, 245, 122, 127, 0, 240, 212, 128, 79, 244, 122,
-        112, 191, 243, 184, 241, 8, 34, 6, 33, 19, 70, 32, 70, 197, 243, 174,
-        244, 0, 35, 6, 33, 4, 34, 32, 70, 197, 243, 168, 244, 79, 244, 122,
-        112, 191, 243, 168, 241, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105,
-        89, 6, 7, 213, 64, 246, 39, 1, 0, 34, 197, 243, 130, 244, 1, 70, 32,
-        70, 0, 224, 0, 33, 79, 244, 192, 98, 197, 243, 202, 243, 5, 104, 0,
-        38, 5, 240, 1, 5, 27, 224, 79, 244, 122, 112, 191, 243, 139, 241, 99,
-        105, 32, 70, 34, 43, 10, 221, 227, 105, 90, 6, 7, 213, 64, 246, 39,
-        1, 0, 34, 197, 243, 101, 244, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244,
-        192, 98, 197, 243, 173, 243, 5, 104, 1, 54, 5, 240, 1, 5, 29, 177, 182,
-        245, 122, 127, 223, 209, 2, 224, 182, 245, 122, 127, 3, 209, 32, 70,
-        6, 33, 8, 34, 121, 224, 41, 70, 79, 244, 128, 18, 43, 70, 32, 70, 190,
-        247, 242, 253, 32, 70, 6, 33, 1, 34, 43, 70, 110, 224, 115, 1, 112,
-        213, 79, 244, 128, 18, 19, 70, 41, 70, 32, 70, 190, 247, 228, 253, 1,
-        34, 6, 33, 19, 70, 32, 70, 197, 243, 72, 244, 79, 244, 122, 112, 191,
-        243, 72, 241, 4, 34, 6, 33, 19, 70, 32, 70, 197, 243, 62, 244, 6, 33,
-        8, 34, 43, 70, 32, 70, 197, 243, 56, 244, 79, 244, 122, 112, 191, 243,
-        56, 241, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 94, 6, 7, 213,
-        64, 246, 39, 1, 42, 70, 197, 243, 18, 244, 1, 70, 32, 70, 0, 224, 0,
-        33, 79, 244, 192, 98, 197, 243, 90, 243, 6, 104, 0, 37, 6, 240, 1, 6,
-        27, 224, 79, 244, 122, 112, 191, 243, 27, 241, 99, 105, 32, 70, 34,
-        43, 10, 221, 227, 105, 89, 6, 7, 213, 64, 246, 39, 1, 50, 70, 197, 243,
-        245, 243, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 192, 98, 197, 243,
-        61, 243, 6, 104, 1, 53, 6, 240, 1, 6, 30, 185, 181, 245, 122, 127, 223,
-        209, 2, 224, 181, 245, 122, 127, 3, 209, 32, 70, 6, 33, 4, 34, 9, 224,
-        0, 33, 79, 244, 0, 18, 11, 70, 32, 70, 190, 247, 130, 253, 32, 70, 6,
-        33, 2, 34, 0, 35, 189, 232, 112, 64, 197, 243, 228, 179, 112, 189, 0,
-        191, 224, 209, 3, 0, 70, 242, 144, 83, 153, 66, 16, 181, 4, 70, 9, 208,
-        73, 242, 24, 35, 153, 66, 7, 208, 177, 245, 150, 79, 12, 191, 31, 35,
-        0, 35, 2, 224, 42, 35, 0, 224, 60, 35, 5, 33, 255, 34, 32, 70, 190,
-        247, 202, 253, 79, 244, 0, 2, 6, 33, 19, 70, 32, 70, 190, 247, 141,
-        253, 30, 32, 191, 243, 194, 240, 32, 70, 6, 33, 79, 244, 0, 2, 0, 35,
-        189, 232, 16, 64, 190, 247, 129, 189, 0, 0, 240, 181, 3, 106, 70, 106,
-        4, 43, 204, 191, 6, 244, 120, 22, 6, 244, 240, 22, 133, 176, 4, 70,
-        118, 12, 0, 37, 59, 224, 16, 33, 104, 70, 31, 74, 43, 70, 186, 243,
-        156, 245, 0, 32, 105, 70, 189, 247, 36, 251, 0, 40, 46, 208, 0, 33,
-        10, 70, 189, 247, 164, 250, 99, 105, 7, 70, 34, 43, 32, 70, 10, 221,
-        227, 105, 89, 6, 7, 213, 64, 246, 39, 1, 0, 34, 197, 243, 115, 243,
-        1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 204, 98, 197, 243, 187, 242,
-        5, 96, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 90, 6, 7, 213, 64,
-        246, 39, 1, 0, 34, 197, 243, 94, 243, 1, 70, 32, 70, 0, 224, 0, 33,
-        64, 242, 100, 98, 197, 243, 166, 242, 7, 96, 1, 53, 235, 178, 179, 66,
-        192, 211, 5, 176, 240, 189, 0, 191, 197, 45, 5, 0, 240, 181, 3, 106,
-        133, 176, 4, 43, 4, 70, 70, 106, 3, 221, 6, 240, 248, 102, 182, 13,
-        2, 224, 6, 240, 240, 118, 118, 13, 0, 37, 59, 224, 16, 33, 104, 70,
-        31, 74, 43, 70, 186, 243, 72, 245, 0, 32, 105, 70, 189, 247, 208, 250,
-        0, 40, 46, 208, 0, 33, 10, 70, 189, 247, 80, 250, 99, 105, 7, 70, 34,
-        43, 32, 70, 10, 221, 227, 105, 90, 6, 7, 213, 64, 246, 39, 1, 0, 34,
-        197, 243, 31, 243, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 203, 98, 197,
-        243, 103, 242, 5, 96, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 91,
-        6, 7, 213, 64, 246, 39, 1, 0, 34, 197, 243, 10, 243, 1, 70, 32, 70,
-        0, 224, 0, 33, 64, 242, 92, 98, 197, 243, 82, 242, 7, 96, 1, 53, 235,
-        178, 179, 66, 192, 211, 5, 176, 240, 189, 0, 191, 252, 48, 5, 0, 240,
-        181, 3, 106, 133, 176, 4, 43, 4, 70, 70, 106, 1, 221, 246, 14, 2, 224,
-        6, 240, 240, 86, 118, 14, 0, 37, 59, 224, 16, 33, 104, 70, 30, 74, 43,
-        70, 186, 243, 246, 244, 0, 32, 105, 70, 189, 247, 126, 250, 0, 40, 46,
-        208, 0, 33, 10, 70, 189, 247, 254, 249, 99, 105, 7, 70, 34, 43, 32,
-        70, 10, 221, 227, 105, 91, 6, 7, 213, 64, 246, 39, 1, 0, 34, 197, 243,
-        205, 242, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 202, 98, 197, 243,
-        21, 242, 5, 96, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 89, 6, 7,
-        213, 64, 246, 39, 1, 0, 34, 197, 243, 184, 242, 1, 70, 32, 70, 0, 224,
-        0, 33, 64, 242, 84, 98, 197, 243, 0, 242, 7, 96, 1, 53, 181, 66, 193,
-        209, 5, 176, 240, 189, 11, 49, 5, 0, 0, 72, 112, 71, 192, 173, 58, 2,
-        45, 233, 240, 67, 4, 70, 15, 70, 133, 176, 0, 32, 144, 73, 21, 70, 30,
-        70, 189, 247, 57, 250, 96, 185, 32, 70, 57, 70, 21, 177, 255, 247, 235,
-        255, 7, 224, 255, 247, 232, 255, 79, 244, 122, 117, 176, 251, 245, 245,
-        0, 224, 5, 70, 0, 32, 135, 73, 189, 247, 38, 250, 0, 240, 15, 0, 1,
-        40, 8, 208, 2, 40, 9, 208, 131, 75, 132, 74, 3, 40, 20, 191, 145, 70,
-        153, 70, 4, 224, 223, 248, 20, 146, 1, 224, 223, 248, 16, 146, 41, 70,
-        32, 70, 255, 247, 166, 254, 32, 70, 197, 243, 183, 241, 0, 33, 128,
-        70, 32, 70, 197, 243, 0, 245, 121, 75, 2, 70, 0, 46, 75, 209, 1, 147,
-        3, 35, 2, 147, 57, 70, 32, 70, 50, 70, 43, 70, 0, 150, 205, 248, 12,
-        144, 255, 247, 45, 252, 7, 70, 0, 40, 55, 208, 99, 105, 32, 70, 34,
-        43, 10, 221, 227, 105, 91, 6, 7, 213, 64, 246, 39, 1, 50, 70, 197, 243,
-        73, 242, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 192, 98, 197, 243, 145,
-        241, 2, 104, 191, 0, 79, 246, 131, 115, 19, 64, 7, 240, 124, 2, 5, 241,
-        127, 7, 255, 9, 1, 63, 66, 234, 7, 71, 31, 67, 99, 105, 32, 70, 34,
-        43, 10, 221, 227, 105, 89, 6, 7, 213, 64, 246, 39, 1, 0, 34, 197, 243,
-        39, 242, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 192, 98, 197, 243, 111,
-        241, 7, 96, 150, 224, 41, 70, 84, 72, 186, 243, 235, 243, 146, 224,
-        0, 33, 141, 232, 10, 0, 3, 35, 2, 147, 32, 70, 57, 70, 43, 70, 205,
-        248, 12, 144, 255, 247, 225, 251, 0, 45, 0, 240, 131, 128, 32, 70, 190,
-        247, 154, 248, 6, 70, 6, 224, 171, 66, 3, 209, 99, 105, 34, 43, 7, 220,
-        18, 224, 12, 54, 0, 46, 116, 208, 51, 136, 0, 43, 243, 209, 112, 224,
-        227, 105, 90, 6, 8, 213, 64, 246, 39, 1, 32, 70, 0, 34, 197, 243, 238,
-        241, 1, 70, 32, 70, 1, 224, 32, 70, 0, 33, 79, 244, 192, 98, 197, 243,
-        53, 241, 2, 104, 179, 120, 2, 240, 124, 2, 179, 235, 146, 15, 87, 208,
-        53, 121, 243, 120, 45, 6, 27, 5, 5, 240, 112, 101, 3, 244, 112, 3, 0,
-        33, 79, 240, 127, 98, 43, 67, 32, 70, 190, 247, 231, 251, 115, 121,
-        2, 33, 27, 5, 45, 74, 67, 244, 0, 51, 32, 70, 190, 247, 222, 251, 179,
-        104, 111, 240, 127, 66, 3, 33, 19, 64, 32, 70, 190, 247, 214, 251, 99,
-        105, 32, 70, 34, 43, 10, 221, 227, 105, 91, 6, 7, 213, 64, 246, 39,
-        1, 0, 34, 197, 243, 178, 241, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244,
-        192, 98, 197, 243, 250, 240, 2, 104, 79, 246, 131, 115, 53, 136, 19,
-        64, 178, 120, 127, 53, 237, 17, 146, 0, 1, 61, 2, 240, 124, 2, 66, 234,
-        5, 69, 29, 67, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 94, 6, 7,
-        213, 64, 246, 39, 1, 0, 34, 197, 243, 143, 241, 1, 70, 32, 70, 0, 224,
-        0, 33, 79, 244, 192, 98, 197, 243, 215, 240, 5, 96, 1, 38, 32, 70, 65,
-        70, 197, 243, 25, 244, 48, 70, 5, 176, 189, 232, 240, 131, 0, 191, 220,
-        45, 5, 0, 236, 209, 3, 0, 4, 208, 3, 0, 132, 208, 3, 0, 246, 46, 5,
-        0, 147, 45, 5, 0, 0, 0, 254, 31, 248, 209, 3, 0, 112, 210, 3, 0, 45,
-        233, 240, 67, 153, 70, 139, 176, 0, 35, 7, 147, 8, 147, 9, 147, 3, 106,
-        71, 106, 4, 43, 204, 191, 7, 244, 120, 23, 7, 244, 240, 23, 4, 70, 13,
-        70, 144, 70, 127, 12, 0, 38, 12, 224, 16, 33, 3, 168, 51, 74, 51, 70,
-        186, 243, 96, 243, 0, 32, 3, 169, 189, 247, 232, 248, 32, 185, 1, 54,
-        246, 178, 190, 66, 240, 211, 78, 224, 8, 171, 0, 147, 9, 171, 1, 147,
-        32, 70, 41, 70, 66, 70, 7, 171, 190, 247, 21, 253, 1, 35, 41, 70, 74,
-        70, 32, 70, 255, 247, 144, 254, 32, 70, 41, 70, 255, 247, 146, 253,
-        35, 106, 1, 43, 44, 221, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105,
-        94, 6, 7, 213, 64, 246, 39, 1, 0, 34, 197, 243, 33, 241, 1, 70, 32,
-        70, 0, 224, 0, 33, 79, 244, 192, 98, 197, 243, 105, 240, 99, 105, 6,
-        70, 34, 43, 32, 70, 10, 221, 227, 105, 89, 6, 7, 213, 64, 246, 39, 1,
-        0, 34, 197, 243, 12, 241, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 192,
-        98, 197, 243, 84, 240, 3, 104, 67, 244, 128, 99, 51, 96, 8, 155, 32,
-        70, 0, 147, 9, 155, 41, 70, 1, 147, 66, 70, 7, 155, 190, 247, 250, 248,
-        7, 224, 32, 70, 41, 70, 74, 70, 0, 35, 255, 247, 75, 254, 0, 40, 168,
-        209, 11, 176, 189, 232, 240, 131, 197, 45, 5, 0, 45, 233, 240, 79, 0,
-        37, 135, 176, 4, 70, 14, 70, 4, 149, 5, 149, 197, 243, 40, 240, 41,
-        70, 131, 70, 32, 70, 197, 243, 113, 243, 161, 73, 130, 70, 40, 70, 189,
-        247, 114, 248, 72, 177, 1, 35, 132, 248, 96, 51, 41, 70, 42, 70, 188,
-        247, 240, 255, 196, 248, 92, 3, 1, 224, 132, 248, 96, 3, 0, 32, 152,
-        73, 189, 247, 97, 248, 72, 177, 1, 35, 0, 33, 132, 248, 104, 51, 10,
-        70, 188, 247, 223, 255, 196, 248, 100, 3, 1, 224, 132, 248, 104, 3,
-        32, 70, 196, 243, 105, 247, 144, 75, 103, 106, 152, 66, 143, 75, 148,
-        191, 32, 37, 33, 37, 163, 241, 8, 8, 152, 191, 152, 70, 7, 244, 248,
-        87, 63, 10, 8, 235, 197, 8, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105,
-        90, 6, 7, 213, 64, 246, 39, 1, 0, 34, 197, 243, 151, 240, 1, 70, 32,
-        70, 0, 224, 0, 33, 79, 244, 196, 98, 196, 243, 223, 247, 24, 248, 8,
-        60, 1, 61, 3, 96, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 91, 6,
-        7, 213, 64, 246, 39, 1, 0, 34, 197, 243, 127, 240, 1, 70, 32, 70, 0,
-        224, 0, 33, 79, 244, 197, 98, 196, 243, 199, 247, 88, 248, 4, 60, 168,
-        241, 8, 8, 3, 96, 0, 45, 204, 209, 71, 224, 8, 33, 2, 168, 111, 74,
-        43, 70, 186, 243, 123, 242, 0, 32, 2, 169, 189, 247, 3, 248, 0, 40,
-        58, 208, 0, 33, 10, 70, 188, 247, 131, 255, 35, 106, 128, 70, 12, 43,
-        7, 221, 176, 245, 128, 63, 4, 210, 195, 178, 79, 234, 16, 40, 67, 234,
-        8, 72, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 89, 6, 7, 213, 64,
-        246, 39, 1, 0, 34, 197, 243, 71, 240, 1, 70, 32, 70, 0, 224, 0, 33,
-        79, 244, 196, 98, 196, 243, 143, 247, 5, 96, 99, 105, 32, 70, 34, 43,
-        10, 221, 227, 105, 90, 6, 7, 213, 64, 246, 39, 1, 0, 34, 197, 243, 50,
-        240, 1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 197, 98, 196, 243, 122,
-        247, 192, 248, 0, 128, 1, 53, 189, 66, 181, 209, 32, 70, 49, 70, 75,
-        74, 31, 35, 255, 247, 89, 250, 0, 37, 62, 224, 8, 33, 72, 74, 43, 70,
-        2, 168, 186, 243, 41, 242, 0, 32, 2, 169, 188, 247, 177, 255, 129, 70,
-        0, 40, 48, 208, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 91, 6, 7,
-        213, 64, 246, 39, 1, 0, 34, 197, 243, 4, 240, 1, 70, 32, 70, 0, 224,
-        0, 33, 79, 244, 196, 98, 196, 243, 76, 247, 5, 96, 99, 105, 32, 70,
-        34, 43, 10, 221, 227, 105, 89, 6, 7, 213, 64, 246, 39, 1, 0, 34, 196,
-        243, 239, 247, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242, 36, 98, 196, 243,
-        55, 247, 0, 33, 128, 70, 10, 70, 72, 70, 188, 247, 5, 255, 200, 248,
-        0, 0, 1, 53, 189, 66, 190, 209, 32, 70, 4, 169, 5, 170, 189, 247, 53,
-        255, 4, 159, 82, 70, 59, 70, 49, 70, 0, 37, 32, 70, 0, 149, 189, 247,
-        120, 254, 56, 67, 4, 144, 32, 70, 192, 247, 116, 248, 5, 154, 4, 155,
-        0, 42, 60, 208, 26, 67, 99, 105, 5, 146, 34, 43, 32, 70, 10, 221, 227,
-        105, 90, 6, 7, 213, 64, 246, 39, 1, 42, 70, 196, 243, 183, 247, 1, 70,
-        32, 70, 0, 224, 0, 33, 64, 242, 28, 98, 196, 243, 255, 246, 99, 105,
-        5, 70, 34, 43, 32, 70, 10, 221, 227, 105, 91, 6, 7, 213, 64, 246, 39,
-        1, 0, 34, 196, 243, 162, 247, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242,
-        28, 98, 196, 243, 234, 246, 5, 155, 2, 104, 58, 224, 0, 191, 181, 45,
-        5, 0, 240, 46, 5, 0, 191, 173, 58, 2, 240, 45, 5, 0, 215, 45, 5, 0,
-        12, 47, 5, 0, 210, 45, 5, 0, 0, 43, 43, 208, 99, 105, 32, 70, 34, 43,
-        9, 221, 227, 105, 89, 6, 6, 213, 64, 246, 39, 1, 196, 243, 123, 247,
-        1, 70, 32, 70, 0, 224, 0, 33, 64, 242, 28, 98, 196, 243, 195, 246, 99,
-        105, 5, 70, 34, 43, 32, 70, 10, 221, 227, 105, 90, 6, 7, 213, 64, 246,
-        39, 1, 0, 34, 196, 243, 102, 247, 1, 70, 32, 70, 0, 224, 0, 33, 64,
-        242, 28, 98, 196, 243, 174, 246, 4, 155, 2, 104, 19, 67, 43, 96, 4,
-        155, 171, 177, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 91, 6, 7,
-        213, 64, 246, 39, 1, 0, 34, 196, 243, 76, 247, 1, 70, 32, 70, 0, 224,
-        0, 33, 79, 244, 195, 98, 196, 243, 148, 246, 4, 155, 3, 96, 5, 155,
-        171, 177, 99, 105, 32, 70, 34, 43, 10, 221, 227, 105, 89, 6, 7, 213,
-        64, 246, 39, 1, 0, 34, 196, 243, 52, 247, 1, 70, 32, 70, 0, 224, 0,
-        33, 64, 242, 28, 98, 196, 243, 124, 246, 5, 155, 3, 96, 49, 70, 82,
-        70, 32, 70, 190, 247, 211, 250, 79, 244, 250, 96, 190, 243, 59, 244,
-        32, 70, 89, 70, 197, 243, 181, 241, 7, 176, 189, 232, 240, 143, 248,
-        181, 4, 70, 21, 70, 14, 70, 196, 243, 94, 246, 0, 33, 7, 70, 32, 70,
-        197, 243, 167, 241, 49, 70, 2, 70, 43, 70, 32, 70, 255, 247, 159, 253,
-        32, 70, 49, 70, 42, 70, 189, 247, 254, 253, 32, 70, 57, 70, 189, 232,
-        248, 64, 197, 243, 150, 177, 56, 181, 3, 106, 4, 70, 1, 43, 45, 209,
-        67, 105, 34, 43, 10, 221, 195, 105, 90, 6, 7, 213, 64, 246, 39, 1, 0,
-        34, 196, 243, 238, 246, 1, 70, 32, 70, 1, 224, 32, 70, 0, 33, 79, 244,
-        192, 98, 196, 243, 53, 246, 99, 105, 5, 70, 34, 43, 32, 70, 10, 221,
-        227, 105, 91, 6, 7, 213, 64, 246, 39, 1, 0, 34, 196, 243, 216, 246,
-        1, 70, 32, 70, 0, 224, 0, 33, 79, 244, 192, 98, 196, 243, 32, 246, 3,
-        104, 35, 244, 0, 115, 43, 96, 56, 189, 44, 221, 67, 105, 34, 43, 10,
-        221, 195, 105, 89, 6, 7, 213, 64, 246, 39, 1, 0, 34, 196, 243, 191,
-        246, 1, 70, 32, 70, 1, 224, 32, 70, 0, 33, 79, 244, 192, 98, 196, 243,
-        6, 246, 99, 105, 5, 70, 34, 43, 32, 70, 10, 221, 227, 105, 90, 6, 7,
-        213, 64, 246, 39, 1, 0, 34, 196, 243, 169, 246, 1, 70, 32, 70, 0, 224,
-        0, 33, 79, 244, 192, 98, 196, 243, 241, 245, 3, 104, 67, 244, 0, 115,
-        43, 96, 56, 189, 56, 181, 5, 70, 12, 70, 255, 247, 159, 251, 40, 70,
-        33, 70, 0, 34, 190, 247, 27, 254, 40, 70, 33, 70, 189, 232, 56, 64,
-        255, 247, 132, 185, 56, 181, 4, 70, 13, 70, 0, 32, 49, 73, 188, 247,
-        35, 254, 64, 177, 0, 33, 10, 70, 188, 247, 164, 253, 41, 70, 195, 178,
-        1, 34, 32, 70, 3, 224, 32, 70, 41, 70, 1, 34, 5, 35, 190, 247, 225,
-        248, 0, 32, 40, 73, 188, 247, 15, 254, 72, 177, 0, 33, 10, 70, 188,
-        247, 144, 253, 41, 70, 195, 178, 9, 34, 32, 70, 190, 247, 210, 248,
-        0, 32, 34, 73, 188, 247, 0, 254, 72, 177, 0, 33, 10, 70, 188, 247, 129,
-        253, 41, 70, 195, 178, 5, 34, 32, 70, 190, 247, 195, 248, 0, 32, 27,
-        73, 188, 247, 241, 253, 72, 177, 0, 33, 10, 70, 188, 247, 114, 253,
-        41, 70, 195, 178, 6, 34, 32, 70, 190, 247, 180, 248, 0, 33, 32, 70,
-        79, 244, 120, 98, 79, 244, 56, 99, 190, 247, 34, 248, 0, 33, 32, 70,
-        79, 244, 96, 66, 79, 244, 32, 67, 190, 247, 26, 248, 79, 244, 192, 34,
-        0, 33, 19, 70, 32, 70, 190, 247, 19, 248, 1, 34, 0, 33, 32, 70, 19,
-        70, 190, 247, 13, 248, 32, 70, 41, 70, 189, 232, 56, 64, 255, 247, 217,
-        186, 0, 191, 2, 47, 5, 0, 203, 45, 5, 0, 2, 49, 5, 0, 186, 45, 5, 0,
-        56, 181, 3, 106, 4, 70, 9, 43, 105, 221, 67, 105, 34, 43, 10, 221, 195,
-        105, 91, 6, 7, 213, 64, 246, 39, 1, 0, 34, 196, 243, 12, 246, 1, 70,
-        32, 70, 1, 224, 32, 70, 0, 33, 79, 244, 192, 98, 196, 243, 83, 245,
-        2, 104, 18, 240, 1, 2, 83, 209, 99, 105, 32, 70, 34, 43, 9, 221, 227,
-        105, 93, 6, 6, 213, 64, 246, 39, 1, 196, 243, 244, 245, 1, 70, 32, 70,
-        0, 224, 0, 33, 64, 242, 108, 98, 196, 243, 60, 245, 79, 240, 0, 67,
-        3, 96, 79, 244, 122, 112, 190, 243, 255, 242, 99, 105, 32, 70, 34, 43,
-        10, 221, 227, 105, 89, 6, 7, 213, 64, 246, 39, 1, 0, 34, 196, 243, 217,
-        245, 1, 70, 32, 70, 0, 224, 0, 33, 64, 242, 108, 98, 196, 243, 33, 245,
-        5, 104, 99, 105, 237, 4, 237, 12, 34, 43, 32, 70, 10, 221, 227, 105,
-        90, 6, 7, 213, 64, 246, 39, 1, 0, 34, 196, 243, 194, 245, 1, 70, 32,
-        70, 0, 224, 0, 33, 64, 242, 108, 98, 196, 243, 10, 245, 109, 3, 0, 35,
-        3, 96, 5, 245, 66, 69, 6, 72, 5, 245, 168, 117, 181, 251, 240, 245,
-        100, 32, 104, 67, 56, 189, 0, 32, 56, 189, 0, 32, 56, 189, 0, 191, 160,
-        134, 1, 0, 56, 181, 0, 33, 5, 70, 16, 32, 184, 247, 112, 251, 0, 33,
-        4, 70, 16, 34, 185, 243, 71, 247, 101, 96, 32, 70, 56, 189, 8, 177,
-        184, 247, 237, 187, 112, 71, 16, 181, 4, 70, 184, 247, 214, 252, 96,
-        96, 224, 96, 32, 104, 191, 247, 132, 250, 99, 104, 160, 245, 0, 96,
-        32, 97, 24, 24, 1, 35, 160, 96, 35, 118, 16, 189, 56, 181, 5, 70, 196,
-        243, 10, 247, 28, 32, 190, 247, 141, 253, 8, 76, 0, 33, 28, 34, 32,
-        96, 185, 243, 33, 247, 32, 104, 5, 96, 255, 247, 221, 255, 4, 73, 34,
-        104, 40, 70, 189, 232, 56, 64, 0, 240, 238, 184, 192, 45, 4, 0, 237,
-        136, 0, 0, 248, 181, 14, 70, 23, 70, 4, 70, 196, 243, 236, 246, 48,
-        32, 190, 247, 111, 253, 5, 70, 104, 177, 198, 96, 7, 78, 48, 35, 67,
-        96, 51, 104, 135, 96, 3, 96, 41, 70, 32, 70, 190, 247, 92, 254, 53,
-        96, 0, 32, 248, 189, 111, 240, 26, 0, 248, 189, 0, 8, 0, 0, 8, 181,
-        6, 75, 27, 104, 59, 185, 5, 75, 25, 104, 33, 177, 5, 75, 26, 104, 10,
-        177, 255, 247, 214, 255, 0, 32, 8, 189, 0, 8, 0, 0, 144, 16, 4, 0, 148,
-        16, 4, 0, 248, 181, 16, 75, 7, 70, 28, 104, 30, 70, 188, 177, 227, 104,
-        155, 177, 13, 77, 42, 104, 154, 66, 15, 209, 196, 243, 178, 246, 224,
-        104, 190, 247, 56, 253, 0, 35, 43, 96, 7, 224, 56, 70, 37, 104, 196,
-        243, 168, 246, 32, 70, 190, 247, 46, 253, 44, 70, 0, 44, 245, 209, 0,
-        35, 51, 96, 248, 189, 0, 191, 0, 8, 0, 0, 120, 43, 5, 0, 115, 181, 133,
-        110, 4, 70, 109, 177, 208, 248, 204, 48, 0, 235, 131, 3, 211, 248, 212,
-        32, 3, 110, 154, 66, 3, 209, 64, 110, 168, 71, 5, 70, 0, 224, 0, 37,
-        32, 70, 196, 243, 67, 244, 0, 35, 2, 169, 65, 248, 8, 61, 6, 70, 105,
-        70, 32, 70, 1, 170, 10, 240, 25, 255, 157, 232, 6, 0, 79, 244, 255,
-        32, 184, 247, 61, 250, 32, 70, 49, 70, 196, 243, 125, 247, 227, 110,
-        91, 177, 212, 248, 204, 32, 4, 235, 130, 2, 210, 248, 212, 16, 34, 110,
-        145, 66, 2, 209, 96, 110, 41, 70, 152, 71, 124, 189, 248, 181, 4, 70,
-        190, 247, 48, 255, 0, 40, 79, 208, 165, 110, 109, 177, 212, 248, 204,
-        48, 4, 235, 131, 3, 211, 248, 212, 32, 35, 110, 154, 66, 3, 209, 96,
-        110, 168, 71, 5, 70, 0, 224, 0, 37, 32, 70, 196, 243, 7, 244, 0, 33,
-        7, 70, 32, 70, 196, 243, 80, 247, 1, 33, 6, 70, 0, 34, 32, 70, 190,
-        247, 184, 254, 79, 244, 128, 17, 10, 70, 32, 70, 190, 247, 160, 254,
-        64, 33, 10, 70, 32, 70, 190, 247, 164, 254, 79, 240, 128, 113, 10, 70,
-        32, 70, 190, 247, 149, 254, 32, 70, 255, 247, 144, 255, 15, 75, 1, 33,
-        198, 248, 4, 53, 79, 244, 252, 115, 198, 248, 8, 53, 10, 70, 32, 70,
-        190, 247, 152, 254, 32, 70, 57, 70, 196, 243, 38, 247, 227, 110, 91,
-        177, 212, 248, 204, 32, 4, 235, 130, 2, 210, 248, 212, 16, 34, 110,
-        145, 66, 2, 209, 96, 110, 41, 70, 152, 71, 248, 189, 0, 191, 242, 0,
-        57, 64, 112, 181, 12, 70, 22, 70, 190, 247, 213, 254, 128, 177, 0, 37,
-        40, 70, 190, 247, 20, 254, 3, 104, 27, 185, 128, 232, 80, 0, 24, 70,
-        112, 189, 1, 53, 237, 178, 4, 45, 242, 209, 79, 240, 255, 48, 112, 189,
-        79, 240, 255, 48, 112, 189, 1, 32, 112, 71, 195, 107, 68, 242, 88, 50,
-        147, 66, 13, 208, 4, 216, 68, 242, 86, 50, 147, 66, 24, 209, 18, 224,
-        74, 246, 46, 34, 147, 66, 8, 208, 74, 246, 47, 34, 147, 66, 15, 209,
-        192, 248, 132, 51, 74, 246, 50, 35, 3, 224, 192, 248, 132, 51, 74, 246,
-        49, 35, 195, 99, 112, 71, 192, 248, 132, 51, 68, 242, 84, 51, 195, 99,
-        112, 71, 56, 181, 65, 242, 228, 67, 4, 70, 3, 99, 13, 70, 41, 177, 8,
-        70, 15, 73, 188, 247, 209, 251, 160, 98, 64, 185, 40, 70, 13, 73, 188,
-        247, 203, 251, 160, 98, 16, 185, 79, 246, 255, 115, 163, 98, 10, 73,
-        40, 70, 188, 247, 194, 251, 9, 73, 224, 98, 40, 70, 188, 247, 189, 251,
-        8, 73, 96, 99, 40, 70, 188, 247, 184, 251, 132, 248, 85, 0, 56, 189,
-        0, 191, 29, 49, 5, 0, 19, 49, 5, 0, 90, 49, 5, 0, 51, 49, 5, 0, 62,
-        49, 5, 0, 112, 71, 0, 0, 48, 181, 133, 176, 1, 144, 0, 36, 4, 168, 64,
-        248, 4, 77, 1, 169, 4, 34, 184, 247, 81, 249, 1, 157, 181, 177, 43,
-        70, 211, 248, 140, 32, 18, 177, 0, 34, 195, 248, 140, 32, 1, 52, 4,
-        51, 16, 44, 245, 209, 3, 152, 254, 247, 57, 250, 3, 152, 255, 247, 182,
-        254, 3, 75, 157, 66, 2, 208, 40, 70, 190, 247, 249, 251, 5, 176, 48,
-        189, 16, 46, 4, 0, 3, 103, 208, 248, 204, 48, 16, 181, 0, 235, 131,
-        3, 2, 156, 211, 248, 212, 48, 68, 102, 129, 102, 194, 102, 3, 102, 16,
-        189, 0, 35, 131, 102, 195, 102, 3, 103, 112, 71, 45, 233, 248, 67, 4,
-        70, 30, 70, 8, 157, 9, 159, 250, 247, 191, 255, 0, 33, 32, 70, 196,
-        243, 89, 246, 128, 70, 32, 70, 196, 243, 15, 243, 10, 40, 200, 191,
-        216, 248, 44, 48, 96, 97, 200, 191, 163, 100, 34, 40, 216, 248, 4, 48,
-        200, 191, 216, 248, 172, 32, 163, 97, 200, 191, 226, 97, 219, 0, 28,
-        213, 34, 40, 20, 221, 227, 105, 89, 6, 17, 213, 0, 34, 32, 70, 64, 246,
-        39, 1, 196, 243, 160, 243, 1, 70, 32, 70, 196, 243, 52, 246, 208, 248,
-        4, 54, 0, 33, 99, 98, 32, 70, 196, 243, 45, 246, 2, 224, 216, 248, 4,
-        54, 99, 98, 148, 248, 36, 48, 35, 98, 79, 244, 224, 99, 163, 96, 79,
-        240, 255, 51, 227, 96, 17, 35, 35, 97, 161, 70, 79, 240, 0, 8, 23, 224,
-        65, 70, 196, 243, 23, 246, 32, 70, 196, 243, 190, 242, 32, 70, 196,
-        243, 203, 242, 30, 177, 217, 248, 20, 49, 158, 66, 3, 208, 217, 248,
-        140, 48, 159, 66, 1, 209, 197, 248, 0, 128, 8, 241, 1, 8, 9, 241, 4,
-        9, 212, 248, 208, 48, 32, 70, 152, 69, 226, 211, 41, 104, 196, 243,
-        250, 245, 1, 32, 189, 232, 248, 131, 247, 181, 0, 34, 19, 70, 13, 70,
-        1, 33, 4, 70, 189, 247, 3, 253, 0, 33, 40, 34, 11, 70, 7, 70, 32, 70,
-        0, 145, 196, 243, 157, 242, 41, 7, 6, 70, 9, 208, 32, 70, 1, 33, 6,
-        34, 196, 243, 31, 244, 32, 70, 2, 33, 6, 34, 196, 243, 26, 244, 21,
-        240, 240, 15, 4, 208, 32, 70, 0, 33, 2, 34, 196, 243, 18, 244, 1, 33,
-        59, 70, 32, 70, 79, 240, 255, 50, 189, 247, 223, 252, 32, 70, 0, 33,
-        40, 34, 79, 240, 255, 51, 0, 150, 196, 243, 121, 242, 254, 189, 0, 32,
-        188, 247, 199, 186, 0, 0, 16, 181, 12, 73, 4, 70, 255, 247, 247, 255,
-        128, 178, 136, 185, 212, 248, 128, 0, 8, 73, 188, 247, 186, 250, 128,
-        178, 80, 185, 212, 248, 128, 0, 5, 73, 188, 247, 179, 250, 79, 246,
-        255, 115, 128, 178, 0, 40, 8, 191, 24, 70, 16, 189, 84, 49, 5, 0, 148,
-        49, 5, 0, 67, 105, 7, 181, 10, 43, 9, 221, 0, 49, 24, 191, 1, 33, 0,
-        145, 36, 34, 0, 33, 1, 35, 196, 243, 73, 242, 1, 224, 79, 240, 255,
-        48, 14, 189, 7, 181, 0, 33, 248, 34, 11, 70, 0, 145, 196, 243, 62, 242,
-        0, 240, 15, 0, 14, 189, 0, 0, 45, 233, 255, 71, 221, 248, 48, 128, 146,
-        70, 221, 248, 52, 144, 15, 70, 79, 244, 99, 114, 0, 33, 4, 70, 30, 70,
-        14, 157, 184, 241, 1, 15, 8, 191, 79, 240, 0, 8, 185, 243, 131, 244,
-        17, 35, 35, 97, 196, 248, 136, 96, 196, 248, 92, 144, 196, 248, 88,
-        160, 196, 248, 4, 128, 184, 241, 0, 15, 64, 240, 197, 128, 32, 70, 65,
-        70, 58, 70, 75, 70, 255, 247, 97, 254, 0, 40, 0, 240, 192, 128, 79,
-        240, 192, 83, 26, 104, 19, 15, 2, 244, 112, 33, 35, 96, 147, 178, 2,
-        244, 112, 2, 18, 13, 98, 100, 68, 242, 88, 50, 9, 12, 147, 66, 227,
-        99, 33, 100, 10, 208, 4, 216, 68, 242, 86, 50, 147, 66, 8, 209, 4, 224,
-        163, 245, 42, 67, 46, 59, 1, 43, 2, 216, 32, 70, 255, 247, 63, 254,
-        99, 108, 32, 70, 14, 59, 1, 43, 140, 191, 0, 35, 1, 35, 132, 248, 76,
-        48, 79, 240, 192, 81, 58, 70, 250, 247, 3, 253, 212, 248, 208, 48, 0,
-        43, 0, 240, 138, 128, 0, 39, 4, 171, 67, 248, 4, 125, 141, 232, 72,
-        0, 32, 70, 79, 240, 192, 81, 58, 70, 59, 70, 255, 247, 178, 254, 0,
-        40, 124, 208, 32, 70, 255, 247, 50, 253, 15, 155, 0, 149, 1, 147, 32,
-        70, 57, 70, 50, 70, 163, 109, 254, 247, 171, 248, 0, 40, 112, 209, 5,
-        177, 45, 104, 58, 78, 32, 70, 41, 70, 255, 247, 44, 254, 50, 120, 0,
-        42, 66, 209, 99, 105, 19, 43, 25, 221, 79, 244, 0, 97, 32, 70, 196,
-        243, 231, 244, 51, 73, 7, 70, 40, 70, 188, 247, 246, 249, 56, 177, 40,
-        70, 47, 73, 188, 247, 243, 249, 176, 241, 255, 63, 8, 191, 0, 32, 0,
-        35, 187, 101, 3, 153, 248, 101, 32, 70, 196, 243, 224, 244, 32, 70,
-        161, 109, 255, 247, 70, 251, 32, 70, 161, 109, 255, 247, 164, 251, 40,
-        70, 37, 73, 188, 247, 220, 249, 2, 70, 32, 185, 32, 70, 161, 109, 255,
-        247, 26, 252, 2, 70, 196, 248, 136, 35, 161, 109, 32, 70, 255, 247,
-        21, 251, 32, 70, 255, 247, 86, 253, 32, 70, 161, 109, 255, 247, 64,
-        249, 32, 70, 161, 109, 255, 247, 152, 251, 1, 35, 51, 112, 32, 70, 196,
-        243, 169, 243, 40, 70, 21, 73, 188, 247, 185, 249, 56, 177, 19, 73,
-        40, 70, 188, 247, 182, 249, 1, 70, 32, 70, 255, 247, 179, 254, 40, 70,
-        16, 73, 188, 247, 172, 249, 120, 177, 40, 70, 13, 73, 188, 247, 169,
-        249, 1, 70, 32, 70, 255, 247, 251, 253, 6, 224, 0, 36, 4, 224, 28, 70,
-        2, 224, 4, 70, 0, 224, 60, 70, 32, 70, 4, 176, 189, 232, 240, 135, 0,
-        191, 12, 46, 4, 0, 46, 49, 5, 0, 75, 49, 5, 0, 140, 49, 5, 0, 36, 49,
-        5, 0, 31, 181, 15, 76, 2, 70, 35, 120, 187, 185, 16, 185, 3, 70, 1,
-        70, 1, 224, 12, 75, 25, 29, 0, 32, 0, 144, 1, 144, 2, 147, 3, 145, 9,
-        72, 68, 242, 16, 113, 79, 240, 192, 83, 255, 247, 235, 254, 40, 177,
-        6, 75, 32, 34, 26, 96, 1, 35, 35, 112, 3, 72, 4, 176, 16, 189, 156,
-        49, 4, 0, 144, 46, 4, 0, 16, 46, 4, 0, 12, 8, 0, 0, 45, 233, 255, 71,
-        7, 70, 79, 244, 99, 112, 136, 70, 145, 70, 154, 70, 13, 158, 14, 157,
-        190, 247, 204, 249, 4, 70, 200, 177, 12, 155, 57, 70, 1, 147, 66, 70,
-        75, 70, 205, 248, 0, 160, 2, 150, 3, 149, 255, 247, 193, 254, 7, 70,
-        32, 185, 32, 70, 190, 247, 189, 249, 60, 70, 7, 224, 6, 177, 54, 104,
-        196, 248, 128, 96, 5, 177, 45, 104, 196, 248, 132, 80, 32, 70, 4, 176,
-        189, 232, 240, 135, 112, 181, 6, 70, 134, 176, 8, 32, 190, 243, 76,
-        241, 5, 70, 152, 177, 0, 33, 8, 34, 185, 243, 58, 243, 11, 75, 46, 96,
-        0, 36, 0, 147, 48, 104, 10, 73, 10, 74, 43, 70, 1, 148, 2, 148, 3, 148,
-        4, 148, 5, 148, 193, 247, 80, 249, 16, 185, 40, 70, 6, 176, 112, 189,
-        40, 70, 190, 247, 141, 249, 37, 70, 247, 231, 197, 155, 0, 0, 68, 211,
-        3, 0, 92, 211, 3, 0, 16, 181, 4, 70, 104, 177, 0, 33, 191, 247, 120,
-        250, 35, 104, 5, 73, 24, 104, 34, 70, 0, 240, 178, 253, 32, 70, 189,
-        232, 16, 64, 190, 247, 116, 185, 16, 189, 92, 211, 3, 0, 56, 181, 5,
-        70, 24, 32, 190, 247, 105, 249, 4, 70, 160, 177, 0, 33, 24, 34, 185,
-        243, 253, 242, 37, 96, 168, 104, 8, 73, 34, 70, 0, 35, 206, 243, 224,
-        247, 5, 70, 32, 97, 32, 185, 32, 70, 190, 247, 89, 249, 44, 70, 1, 224,
-        4, 35, 227, 96, 32, 70, 56, 189, 201, 58, 129, 0, 16, 181, 4, 70, 40,
-        185, 16, 189, 203, 107, 32, 70, 99, 96, 201, 243, 167, 242, 97, 104,
-        0, 41, 247, 209, 3, 224, 3, 104, 99, 97, 190, 247, 64, 249, 96, 105,
-        0, 40, 248, 209, 35, 104, 33, 105, 152, 104, 206, 243, 51, 247, 35,
-        104, 33, 105, 152, 104, 206, 243, 166, 247, 32, 70, 189, 232, 16, 64,
-        190, 247, 46, 185, 0, 0, 45, 233, 240, 65, 5, 70, 134, 176, 128, 32,
-        190, 247, 35, 249, 4, 70, 0, 40, 68, 208, 0, 33, 128, 34, 185, 243,
-        182, 242, 4, 35, 99, 96, 180, 35, 37, 96, 163, 129, 160, 70, 197, 248,
-        68, 71, 39, 70, 0, 38, 14, 224, 28, 34, 2, 251, 6, 66, 60, 97, 168,
-        104, 27, 73, 16, 50, 0, 35, 206, 243, 139, 247, 56, 98, 28, 55, 0, 40,
-        43, 208, 1, 54, 99, 104, 158, 66, 237, 219, 22, 75, 22, 73, 0, 147,
-        0, 35, 1, 147, 2, 147, 3, 147, 4, 147, 5, 147, 40, 104, 19, 74, 35,
-        70, 193, 247, 176, 248, 192, 185, 19, 224, 216, 248, 32, 16, 49, 177,
-        35, 104, 152, 104, 206, 243, 94, 247, 0, 35, 200, 248, 32, 48, 1, 53,
-        8, 241, 28, 8, 99, 104, 157, 66, 239, 219, 32, 70, 190, 247, 223, 248,
-        0, 36, 32, 70, 6, 176, 189, 232, 240, 129, 0, 37, 242, 231, 0, 191,
-        241, 63, 129, 0, 81, 62, 129, 0, 200, 179, 135, 0, 235, 40, 136, 0,
-        112, 181, 4, 70, 0, 40, 30, 208, 3, 104, 15, 73, 24, 104, 34, 70, 0,
-        240, 254, 252, 37, 70, 0, 38, 13, 224, 41, 106, 41, 177, 35, 104, 152,
-        104, 206, 243, 47, 247, 0, 35, 43, 98, 232, 105, 8, 177, 190, 247, 182,
-        248, 1, 54, 28, 53, 99, 104, 158, 66, 238, 219, 32, 70, 189, 232, 112,
-        64, 190, 247, 172, 184, 112, 189, 235, 40, 136, 0, 16, 181, 4, 70, 208,
-        248, 132, 0, 8, 177, 6, 240, 11, 250, 212, 248, 128, 0, 8, 177, 255,
-        247, 206, 255, 212, 248, 164, 0, 8, 177, 255, 247, 71, 255, 212, 248,
-        180, 0, 8, 177, 0, 240, 28, 249, 212, 248, 184, 0, 8, 177, 255, 247,
-        9, 255, 160, 104, 8, 177, 0, 240, 191, 255, 32, 70, 189, 232, 16, 64,
-        190, 247, 133, 184, 45, 233, 240, 79, 7, 70, 141, 176, 188, 32, 138,
-        70, 144, 70, 29, 70, 23, 158, 190, 247, 119, 248, 4, 70, 0, 40, 0, 240,
-        164, 128, 79, 240, 0, 11, 0, 33, 188, 34, 185, 243, 7, 242, 38, 96,
-        132, 248, 140, 176, 56, 70, 255, 247, 175, 250, 11, 171, 196, 248, 172,
-        176, 42, 70, 1, 144, 6, 147, 129, 70, 65, 242, 228, 65, 32, 70, 51,
-        70, 205, 248, 0, 176, 205, 248, 8, 160, 205, 248, 12, 128, 4, 148, 205,
-        248, 20, 176, 1, 240, 57, 248, 5, 70, 0, 40, 121, 208, 160, 96, 226,
-        243, 151, 240, 43, 105, 16, 33, 227, 96, 62, 75, 96, 96, 163, 100, 62,
-        74, 51, 70, 39, 97, 100, 100, 56, 70, 185, 243, 62, 242, 43, 105, 216,
-        111, 195, 243, 0, 247, 73, 246, 152, 19, 152, 66, 43, 105, 216, 111,
-        6, 216, 195, 243, 248, 246, 8, 33, 3, 70, 52, 74, 9, 168, 5, 224, 195,
-        243, 241, 246, 51, 74, 3, 70, 8, 33, 9, 168, 185, 243, 37, 242, 49,
-        70, 9, 170, 48, 75, 48, 72, 185, 243, 223, 241, 50, 70, 0, 32, 22, 153,
-        46, 75, 141, 232, 128, 1, 248, 247, 105, 255, 6, 70, 0, 40, 63, 209,
-        99, 104, 1, 39, 131, 248, 120, 112, 8, 33, 10, 70, 40, 105, 250, 243,
-        21, 247, 54, 33, 58, 70, 213, 248, 124, 2, 219, 247, 57, 251, 40, 70,
-        255, 247, 216, 254, 196, 248, 128, 0, 80, 179, 40, 70, 255, 247, 142,
-        254, 196, 248, 164, 0, 32, 179, 40, 70, 6, 240, 46, 249, 196, 248, 132,
-        0, 240, 177, 27, 75, 2, 150, 141, 232, 72, 0, 3, 150, 4, 150, 5, 150,
-        40, 104, 24, 73, 24, 74, 35, 70, 192, 247, 165, 255, 128, 185, 40, 70,
-        0, 240, 56, 248, 196, 248, 180, 0, 80, 177, 40, 70, 255, 247, 48, 254,
-        196, 248, 184, 0, 32, 177, 17, 72, 33, 70, 189, 243, 253, 242, 32, 177,
-        32, 70, 73, 70, 255, 247, 42, 255, 0, 36, 32, 70, 13, 176, 189, 232,
-        240, 143, 0, 191, 149, 149, 129, 0, 113, 211, 3, 0, 89, 185, 3, 0, 48,
-        184, 136, 0, 31, 181, 3, 0, 154, 49, 5, 0, 205, 154, 129, 0, 225, 150,
-        129, 0, 20, 182, 135, 0, 118, 211, 3, 0, 189, 150, 129, 0, 1, 32, 112,
-        71, 2, 75, 1, 34, 26, 112, 183, 247, 115, 190, 0, 191, 52, 7, 0, 0,
-        112, 181, 6, 70, 134, 176, 32, 32, 189, 243, 74, 247, 4, 70, 240, 177,
-        0, 33, 32, 34, 185, 243, 56, 241, 79, 244, 225, 83, 227, 128, 75, 35,
-        35, 129, 10, 35, 99, 129, 14, 75, 38, 96, 0, 37, 0, 147, 48, 104, 12,
-        73, 13, 74, 35, 70, 1, 149, 2, 149, 3, 149, 4, 149, 5, 149, 192, 247,
-        71, 255, 48, 185, 51, 104, 1, 34, 131, 248, 103, 33, 32, 70, 6, 176,
-        112, 189, 32, 70, 189, 247, 128, 255, 44, 70, 247, 231, 0, 191, 201,
-        169, 0, 0, 188, 211, 3, 0, 183, 211, 3, 0, 16, 181, 4, 70, 120, 177,
-        191, 247, 212, 255, 35, 104, 34, 70, 24, 104, 5, 73, 0, 240, 165, 251,
-        32, 70, 189, 247, 105, 255, 35, 104, 0, 34, 27, 104, 131, 248, 103,
-        33, 16, 189, 183, 211, 3, 0, 3, 104, 211, 248, 216, 32, 65, 242, 107,
-        3, 17, 107, 153, 66, 11, 209, 147, 106, 239, 43, 40, 208, 1, 216, 214,
-        43, 4, 224, 245, 43, 35, 208, 64, 242, 15, 17, 139, 66, 31, 208, 147,
-        106, 64, 242, 198, 82, 147, 66, 26, 208, 64, 242, 116, 82, 147, 66,
-        22, 208, 3, 106, 127, 34, 16, 224, 72, 34, 131, 248, 5, 33, 6, 224,
-        2, 240, 192, 2, 146, 17, 2, 235, 129, 1, 131, 248, 5, 17, 3, 106, 147,
-        249, 5, 33, 20, 42, 11, 220, 72, 34, 131, 248, 5, 33, 112, 71, 3, 106,
-        147, 248, 5, 17, 74, 178, 178, 241, 255, 63, 232, 209, 227, 231, 112,
-        71, 208, 248, 236, 17, 16, 181, 4, 70, 41, 177, 128, 104, 206, 243,
-        143, 245, 0, 35, 196, 248, 236, 49, 212, 248, 4, 18, 41, 177, 160, 104,
-        206, 243, 134, 245, 0, 35, 196, 248, 4, 50, 212, 248, 116, 52, 211,
-        248, 48, 17, 57, 177, 160, 104, 206, 243, 123, 245, 212, 248, 116, 52,
-        0, 34, 195, 248, 48, 33, 212, 248, 52, 19, 41, 177, 160, 104, 206, 243,
-        112, 245, 0, 35, 196, 248, 52, 51, 212, 248, 60, 21, 41, 177, 160, 104,
-        206, 243, 103, 245, 0, 35, 196, 248, 60, 53, 212, 248, 220, 21, 41,
-        177, 160, 104, 206, 243, 94, 245, 0, 35, 196, 248, 220, 53, 212, 248,
-        180, 23, 41, 177, 160, 104, 206, 243, 85, 245, 0, 35, 196, 248, 180,
-        55, 16, 189, 16, 181, 4, 70, 0, 104, 5, 240, 116, 252, 212, 248, 104,
-        6, 32, 177, 4, 240, 137, 255, 0, 35, 196, 248, 104, 54, 212, 248, 160,
-        1, 32, 177, 7, 240, 159, 248, 0, 35, 196, 248, 160, 49, 212, 248, 144,
-        1, 32, 177, 1, 240, 59, 252, 0, 35, 196, 248, 144, 49, 212, 248, 88,
-        1, 32, 177, 210, 243, 213, 240, 0, 35, 196, 248, 88, 49, 212, 248, 48,
-        1, 32, 177, 2, 240, 35, 250, 0, 35, 196, 248, 48, 49, 212, 248, 52,
-        1, 32, 177, 1, 240, 193, 255, 0, 35, 196, 248, 52, 49, 212, 248, 56,
-        1, 32, 177, 2, 240, 33, 249, 0, 35, 196, 248, 56, 49, 32, 70, 2, 240,
-        213, 248, 212, 248, 96, 1, 32, 177, 6, 240, 168, 252, 0, 35, 196, 248,
-        96, 49, 212, 248, 44, 1, 32, 177, 6, 240, 222, 252, 0, 35, 196, 248,
-        44, 49, 32, 70, 6, 240, 208, 253, 32, 70, 4, 240, 53, 255, 212, 248,
-        116, 1, 32, 177, 1, 240, 226, 250, 0, 35, 196, 248, 116, 49, 212, 248,
-        124, 1, 32, 177, 3, 240, 120, 255, 0, 35, 196, 248, 124, 49, 212, 248,
-        128, 1, 32, 177, 6, 240, 222, 249, 0, 35, 196, 248, 128, 49, 212, 248,
-        120, 1, 32, 177, 6, 240, 182, 255, 0, 35, 196, 248, 120, 49, 212, 248,
-        136, 1, 32, 177, 1, 240, 90, 250, 0, 35, 196, 248, 136, 49, 212, 248,
-        140, 1, 32, 177, 3, 240, 178, 254, 0, 35, 196, 248, 140, 49, 212, 248,
-        104, 4, 32, 177, 6, 240, 102, 248, 0, 35, 196, 248, 104, 52, 212, 248,
-        108, 4, 32, 177, 6, 240, 160, 248, 0, 35, 196, 248, 108, 52, 212, 248,
-        112, 4, 32, 177, 6, 240, 50, 249, 0, 35, 196, 248, 112, 52, 212, 248,
-        152, 1, 32, 177, 7, 240, 230, 248, 0, 35, 196, 248, 152, 49, 212, 248,
-        228, 6, 32, 177, 6, 240, 232, 251, 0, 35, 196, 248, 228, 54, 212, 248,
-        132, 6, 32, 177, 4, 240, 142, 248, 0, 35, 196, 248, 132, 54, 212, 248,
-        136, 6, 32, 177, 1, 240, 172, 251, 0, 35, 196, 248, 136, 54, 212, 248,
-        184, 6, 32, 177, 4, 240, 102, 248, 0, 35, 196, 248, 184, 54, 212, 248,
-        200, 6, 32, 177, 5, 240, 144, 255, 0, 35, 196, 248, 200, 54, 212, 248,
-        156, 6, 8, 177, 4, 240, 127, 254, 212, 248, 152, 6, 8, 177, 4, 240,
-        122, 254, 212, 248, 148, 6, 8, 177, 4, 240, 117, 254, 212, 248, 144,
-        6, 8, 177, 4, 240, 112, 254, 212, 248, 164, 1, 32, 177, 3, 240, 20,
-        252, 0, 35, 196, 248, 164, 49, 212, 248, 220, 6, 32, 177, 4, 240, 0,
-        255, 0, 35, 196, 248, 220, 54, 212, 248, 28, 7, 32, 177, 189, 247, 231,
-        253, 0, 35, 196, 248, 28, 55, 212, 248, 112, 7, 32, 177, 6, 240, 64,
-        252, 0, 35, 196, 248, 112, 55, 212, 248, 140, 6, 32, 177, 4, 240, 38,
-        254, 0, 35, 196, 248, 140, 54, 212, 248, 124, 6, 32, 177, 4, 240, 34,
-        249, 0, 35, 196, 248, 124, 54, 212, 248, 36, 1, 32, 177, 6, 240, 26,
-        251, 0, 35, 196, 248, 36, 49, 212, 248, 40, 1, 32, 177, 3, 240, 4, 251,
-        0, 35, 196, 248, 40, 49, 212, 248, 120, 4, 32, 177, 4, 240, 218, 254,
-        0, 35, 196, 248, 120, 52, 212, 248, 208, 5, 32, 177, 8, 240, 180, 222,
-        0, 35, 196, 248, 208, 53, 212, 248, 32, 6, 32, 177, 250, 247, 58, 251,
-        0, 35, 196, 248, 32, 54, 32, 70, 189, 232, 16, 64, 3, 240, 178, 190,
-        247, 181, 3, 106, 4, 70, 147, 249, 4, 1, 67, 28, 44, 208, 35, 104, 147,
-        248, 124, 32, 10, 42, 2, 216, 209, 243, 162, 247, 37, 224, 211, 248,
-        220, 80, 20, 73, 40, 70, 187, 247, 21, 253, 19, 73, 141, 248, 4, 0,
-        40, 70, 187, 247, 15, 253, 17, 73, 141, 248, 5, 0, 40, 70, 187, 247,
-        9, 253, 0, 37, 141, 248, 6, 0, 46, 70, 1, 175, 120, 87, 209, 243, 135,
-        247, 118, 178, 232, 85, 1, 53, 176, 66, 168, 191, 6, 70, 3, 45, 246,
-        178, 242, 209, 48, 70, 0, 224, 8, 32, 35, 106, 131, 248, 4, 1, 254,
-        189, 0, 191, 215, 49, 5, 0, 221, 49, 5, 0, 24, 51, 5, 0, 3, 104, 208,
-        248, 116, 36, 112, 181, 211, 248, 220, 80, 3, 35, 211, 113, 208, 248,
-        116, 36, 4, 70, 19, 114, 208, 248, 116, 36, 65, 73, 130, 248, 173, 48,
-        208, 248, 116, 36, 40, 70, 130, 248, 174, 48, 187, 247, 210, 252, 64,
-        178, 32, 185, 40, 70, 60, 73, 187, 247, 204, 252, 64, 178, 67, 30, 14,
-        43, 14, 216, 1, 40, 3, 209, 212, 248, 116, 36, 0, 35, 4, 224, 2, 40,
-        6, 209, 212, 248, 116, 36, 1, 35, 211, 113, 212, 248, 116, 36, 19, 114,
-        50, 73, 40, 70, 38, 106, 187, 247, 180, 252, 134, 248, 4, 1, 32, 70,
-        255, 247, 133, 255, 46, 73, 40, 70, 38, 106, 187, 247, 170, 252, 134,
-        248, 5, 1, 32, 70, 255, 247, 185, 253, 35, 106, 147, 248, 5, 33, 131,
-        248, 6, 33, 33, 104, 65, 242, 107, 2, 209, 248, 216, 48, 24, 107, 144,
-        66, 41, 209, 34, 106, 146, 249, 4, 1, 8, 40, 36, 220, 155, 106, 209,
-        43, 18, 208, 233, 43, 16, 208, 144, 43, 14, 208, 139, 43, 12, 208, 141,
-        43, 1, 209, 13, 35, 21, 224, 147, 43, 10, 209, 177, 248, 122, 48, 27,
-        5, 27, 13, 179, 245, 130, 111, 1, 220, 24, 35, 10, 224, 27, 35, 8, 224,
-        142, 43, 1, 209, 16, 35, 4, 224, 214, 43, 1, 208, 228, 43, 2, 209, 23,
-        35, 130, 248, 4, 49, 35, 104, 64, 242, 116, 82, 211, 248, 216, 48, 155,
-        106, 147, 66, 3, 208, 64, 242, 198, 82, 147, 66, 7, 209, 35, 106, 147,
-        249, 4, 33, 8, 42, 2, 220, 23, 34, 131, 248, 4, 33, 1, 32, 112, 189,
-        36, 51, 5, 0, 227, 49, 5, 0, 53, 51, 5, 0, 231, 49, 5, 0, 16, 181, 4,
-        70, 28, 73, 128, 104, 34, 70, 0, 35, 206, 243, 62, 243, 196, 248, 236,
-        1, 112, 179, 160, 104, 24, 73, 34, 70, 0, 35, 206, 243, 53, 243, 196,
-        248, 4, 2, 40, 179, 160, 104, 21, 73, 34, 70, 0, 35, 206, 243, 44, 243,
-        196, 248, 52, 3, 224, 177, 160, 104, 17, 73, 34, 70, 0, 35, 206, 243,
-        35, 243, 196, 248, 60, 5, 152, 177, 160, 104, 14, 73, 34, 70, 0, 35,
-        206, 243, 26, 243, 196, 248, 220, 5, 80, 177, 0, 35, 160, 104, 10, 73,
-        34, 70, 206, 243, 17, 243, 196, 248, 180, 7, 0, 48, 24, 191, 1, 32,
-        16, 189, 0, 191, 49, 56, 130, 0, 133, 255, 129, 0, 237, 239, 129, 0,
-        241, 250, 129, 0, 129, 50, 130, 0, 151, 72, 1, 0, 112, 181, 255, 34,
-        4, 70, 1, 35, 132, 248, 99, 36, 132, 248, 191, 34, 65, 242, 1, 1, 212,
-        248, 116, 36, 0, 38, 3, 118, 164, 248, 72, 20, 100, 32, 3, 33, 132,
-        248, 48, 5, 132, 248, 102, 52, 132, 248, 98, 100, 209, 113, 212, 248,
-        116, 36, 64, 246, 42, 21, 17, 114, 164, 248, 74, 84, 164, 248, 76, 84,
-        164, 248, 78, 84, 164, 248, 80, 84, 164, 248, 82, 84, 164, 248, 84,
-        84, 164, 248, 86, 84, 164, 248, 94, 20, 64, 246, 43, 21, 2, 33, 164,
-        248, 88, 84, 164, 248, 96, 20, 7, 37, 4, 33, 164, 248, 90, 84, 164,
-        248, 92, 20, 164, 248, 22, 6, 164, 248, 88, 99, 132, 248, 36, 98, 164,
-        248, 20, 102, 132, 248, 56, 98, 132, 248, 39, 98, 132, 248, 37, 98,
-        132, 248, 226, 100, 132, 248, 148, 98, 132, 248, 23, 101, 33, 104, 79,
-        240, 255, 48, 129, 248, 83, 48, 72, 99, 33, 104, 32, 70, 129, 248, 66,
-        48, 33, 104, 129, 248, 67, 48, 33, 104, 129, 248, 213, 96, 33, 104,
-        129, 248, 68, 96, 33, 104, 132, 248, 18, 98, 132, 248, 19, 98, 196,
-        248, 56, 102, 129, 248, 57, 96, 34, 104, 130, 248, 249, 48, 34, 104,
-        130, 248, 248, 48, 34, 104, 130, 248, 160, 48, 34, 104, 130, 248, 54,
-        49, 34, 104, 150, 102, 132, 248, 84, 51, 132, 248, 85, 51, 146, 248,
-        79, 16, 137, 7, 24, 191, 130, 248, 82, 48, 3, 35, 0, 34, 1, 37, 164,
-        248, 56, 37, 132, 248, 224, 49, 132, 248, 58, 101, 132, 248, 232, 49,
-        79, 244, 72, 115, 164, 248, 36, 53, 132, 248, 197, 85, 217, 243, 14,
-        241, 5, 35, 132, 248, 8, 54, 35, 104, 132, 248, 32, 97, 132, 248, 64,
-        86, 131, 248, 21, 81, 35, 104, 79, 240, 255, 49, 164, 248, 92, 23, 164,
-        248, 68, 24, 132, 248, 95, 103, 132, 248, 145, 87, 132, 248, 160, 87,
-        131, 248, 70, 81, 35, 104, 131, 248, 71, 81, 35, 104, 131, 248, 96,
-        97, 112, 189, 45, 233, 240, 71, 15, 70, 146, 70, 0, 40, 52, 208, 4,
-        104, 0, 44, 53, 208, 79, 240, 0, 8, 193, 70, 40, 224, 212, 248, 168,
-        2, 57, 70, 64, 68, 184, 243, 215, 245, 232, 185, 212, 248, 172, 50,
-        79, 234, 137, 6, 83, 248, 41, 48, 83, 69, 21, 209, 212, 248, 168, 50,
-        67, 68, 93, 107, 1, 61, 93, 99, 237, 185, 24, 70, 41, 70, 56, 34, 184,
-        243, 54, 245, 212, 248, 172, 2, 41, 70, 128, 25, 4, 34, 184, 243, 47,
-        245, 40, 70, 189, 232, 240, 135, 9, 241, 1, 9, 8, 241, 56, 8, 35, 104,
-        147, 248, 184, 48, 153, 69, 209, 219, 111, 240, 29, 0, 189, 232, 240,
-        135, 111, 240, 29, 0, 189, 232, 240, 135, 0, 0, 19, 181, 0, 35, 4, 70,
-        0, 147, 33, 70, 0, 104, 25, 74, 192, 247, 137, 251, 1, 70, 88, 187,
-        212, 248, 120, 4, 3, 34, 22, 75, 4, 240, 253, 252, 1, 70, 24, 187, 212,
-        248, 120, 4, 2, 34, 19, 75, 4, 240, 245, 252, 1, 70, 216, 185, 212,
-        248, 120, 4, 5, 34, 16, 75, 4, 240, 237, 252, 1, 70, 152, 185, 212,
-        248, 120, 4, 6, 34, 13, 75, 4, 240, 229, 252, 1, 70, 88, 185, 212, 248,
-        120, 4, 8, 34, 10, 75, 4, 240, 221, 252, 0, 40, 20, 191, 79, 240, 255,
-        48, 0, 32, 1, 224, 79, 240, 255, 48, 28, 189, 213, 162, 129, 0, 45,
-        202, 129, 0, 37, 45, 130, 0, 121, 47, 130, 0, 193, 255, 129, 0, 253,
-        250, 129, 0, 2, 104, 16, 181, 210, 248, 176, 2, 0, 35, 14, 224, 4, 104,
-        161, 66, 9, 209, 1, 105, 11, 177, 25, 97, 1, 224, 194, 248, 176, 18,
-        189, 247, 44, 251, 0, 32, 16, 189, 3, 70, 0, 105, 0, 40, 238, 209, 111,
-        240, 29, 0, 16, 189, 65, 242, 228, 67, 152, 66, 8, 209, 0, 35, 6, 74,
-        154, 90, 138, 66, 5, 208, 2, 51, 179, 245, 140, 127, 247, 209, 0, 32,
-        112, 71, 1, 32, 112, 71, 0, 191, 0, 50, 5, 0, 45, 233, 240, 67, 208,
-        248, 56, 83, 0, 33, 135, 176, 4, 70, 79, 244, 146, 114, 40, 70, 184,
-        243, 154, 244, 100, 35, 235, 133, 3, 35, 133, 248, 96, 48, 0, 34, 1,
-        35, 212, 248, 92, 1, 79, 244, 128, 81, 4, 240, 147, 220, 255, 40, 7,
-        70, 5, 209, 35, 106, 24, 105, 25, 104, 221, 247, 25, 252, 7, 70, 35,
-        106, 111, 134, 0, 33, 164, 248, 70, 116, 32, 70, 7, 244, 96, 87, 179,
-        248, 8, 128, 30, 104, 222, 243, 245, 247, 183, 245, 32, 95, 5, 241,
-        56, 9, 8, 208, 183, 245, 192, 95, 7, 208, 183, 245, 128, 95, 20, 191,
-        10, 39, 20, 39, 2, 224, 160, 39, 0, 224, 40, 39, 0, 33, 255, 35, 141,
-        232, 10, 0, 212, 248, 116, 52, 2, 144, 3, 151, 27, 121, 66, 70, 4, 147,
-        72, 70, 51, 70, 233, 247, 35, 252, 35, 104, 147, 248, 79, 48, 154, 7,
-        3, 208, 235, 136, 67, 240, 32, 3, 235, 128, 7, 176, 189, 232, 240, 131,
-        130, 176, 16, 181, 20, 36, 97, 67, 208, 248, 184, 66, 3, 147, 99, 80,
-        5, 155, 96, 24, 67, 96, 6, 155, 2, 97, 131, 96, 4, 155, 195, 96, 189,
-        232, 16, 64, 2, 176, 112, 71, 0, 0, 31, 181, 3, 104, 4, 70, 219, 105,
-        64, 104, 154, 109, 212, 248, 36, 22, 219, 109, 249, 247, 239, 255, 196,
-        248, 32, 6, 0, 40, 0, 240, 94, 129, 32, 70, 3, 240, 101, 252, 196, 248,
-        208, 5, 0, 40, 0, 240, 89, 129, 32, 70, 4, 240, 199, 251, 196, 248,
-        120, 4, 0, 40, 0, 240, 84, 129, 32, 70, 2, 240, 241, 255, 196, 248,
-        40, 1, 0, 40, 0, 240, 79, 129, 32, 70, 5, 240, 145, 255, 196, 248, 36,
-        1, 0, 40, 0, 240, 74, 129, 32, 70, 3, 240, 103, 255, 196, 248, 124,
-        6, 0, 40, 0, 240, 69, 129, 32, 70, 4, 240, 197, 250, 196, 248, 140,
-        6, 0, 40, 0, 240, 64, 129, 32, 70, 4, 240, 41, 249, 0, 40, 64, 240,
-        61, 129, 32, 70, 4, 240, 133, 249, 0, 40, 64, 240, 55, 129, 32, 70,
-        4, 240, 173, 249, 0, 40, 64, 240, 49, 129, 32, 70, 4, 240, 11, 250,
-        0, 40, 64, 240, 43, 129, 32, 70, 4, 240, 65, 250, 0, 40, 64, 240, 37,
-        129, 32, 70, 4, 240, 87, 250, 1, 70, 0, 40, 64, 240, 30, 129, 141, 232,
-        17, 0, 174, 74, 174, 75, 32, 70, 5, 240, 148, 255, 173, 75, 26, 29,
-        7, 202, 27, 104, 141, 232, 7, 0, 8, 33, 34, 70, 32, 70, 255, 247, 116,
-        255, 32, 104, 4, 240, 164, 255, 32, 70, 5, 240, 71, 252, 196, 248, 104,
-        4, 0, 40, 0, 240, 4, 129, 32, 70, 5, 240, 137, 252, 196, 248, 108, 4,
-        0, 40, 0, 240, 254, 128, 32, 70, 5, 240, 23, 253, 196, 248, 112, 4,
-        0, 40, 0, 240, 248, 128, 32, 70, 1, 240, 15, 254, 196, 248, 8, 5, 0,
-        40, 0, 240, 242, 128, 151, 75, 32, 70, 196, 248, 88, 49, 1, 240, 136,
-        253, 196, 248, 48, 1, 0, 40, 0, 240, 233, 128, 32, 70, 1, 240, 54, 251,
-        196, 248, 52, 1, 0, 40, 0, 240, 227, 128, 32, 70, 1, 240, 160, 252,
-        196, 248, 56, 1, 0, 40, 0, 240, 221, 128, 32, 70, 1, 240, 40, 252, 0,
-        40, 64, 240, 218, 128, 32, 70, 5, 240, 162, 255, 196, 248, 96, 1, 0,
-        40, 0, 240, 213, 128, 32, 104, 33, 70, 162, 104, 130, 75, 3, 240, 51,
-        251, 196, 248, 124, 2, 0, 40, 0, 240, 204, 128, 32, 70, 127, 73, 5,
-        240, 236, 255, 196, 248, 44, 1, 0, 40, 0, 240, 197, 128, 32, 70, 3,
-        240, 44, 252, 196, 248, 132, 6, 0, 40, 0, 240, 191, 128, 32, 70, 6,
-        240, 112, 248, 0, 40, 64, 240, 187, 128, 32, 70, 4, 240, 52, 250, 0,
-        40, 64, 240, 183, 128, 32, 70, 0, 240, 38, 254, 196, 248, 116, 1, 0,
-        40, 0, 240, 177, 128, 32, 70, 3, 240, 16, 250, 196, 248, 124, 1, 0,
-        40, 0, 240, 171, 128, 32, 70, 5, 240, 40, 253, 196, 248, 128, 1, 0,
-        40, 0, 240, 166, 128, 32, 70, 6, 240, 250, 250, 196, 248, 120, 1, 0,
-        40, 0, 240, 161, 128, 32, 70, 0, 240, 158, 253, 196, 248, 136, 1, 0,
-        40, 0, 240, 155, 128, 32, 70, 3, 240, 164, 249, 196, 248, 140, 1, 0,
-        40, 0, 240, 149, 128, 32, 70, 6, 240, 168, 251, 196, 248, 152, 1, 0,
-        40, 0, 240, 143, 128, 32, 70, 0, 240, 84, 254, 196, 248, 144, 1, 0,
-        40, 0, 240, 137, 128, 32, 70, 6, 240, 90, 251, 196, 248, 160, 1, 0,
-        40, 0, 240, 131, 128, 32, 70, 5, 240, 232, 254, 196, 248, 228, 6, 0,
-        40, 125, 208, 32, 70, 4, 240, 37, 250, 196, 248, 104, 6, 0, 40, 120,
-        208, 32, 70, 0, 240, 246, 254, 196, 248, 136, 6, 0, 40, 115, 208, 32,
-        70, 3, 240, 73, 251, 196, 248, 184, 6, 0, 40, 110, 208, 32, 70, 5, 240,
-        218, 250, 196, 248, 200, 6, 0, 40, 105, 208, 32, 70, 2, 240, 117, 255,
-        196, 248, 164, 1, 0, 40, 100, 208, 32, 70, 4, 240, 42, 250, 196, 248,
-        220, 6, 0, 40, 107, 208, 32, 70, 5, 240, 171, 255, 196, 248, 112, 7,
-        0, 40, 12, 191, 114, 32, 0, 32, 98, 224, 79, 244, 150, 112, 95, 224,
-        64, 242, 45, 16, 92, 224, 79, 244, 151, 112, 89, 224, 64, 242, 47, 16,
-        86, 224, 79, 244, 152, 112, 83, 224, 64, 242, 49, 16, 80, 224, 79, 244,
-        153, 112, 77, 224, 64, 242, 65, 16, 74, 224, 36, 32, 72, 224, 37, 32,
-        70, 224, 38, 32, 68, 224, 42, 32, 66, 224, 49, 32, 64, 224, 50, 32,
-        62, 224, 64, 242, 245, 16, 59, 224, 79, 244, 251, 112, 56, 224, 53,
-        32, 54, 224, 57, 32, 52, 224, 61, 32, 50, 224, 106, 32, 48, 224, 71,
-        32, 46, 224, 72, 32, 44, 224, 74, 32, 42, 224, 64, 242, 229, 32, 39,
-        224, 64, 242, 230, 32, 36, 224, 75, 32, 34, 224, 90, 32, 32, 224, 91,
-        32, 30, 224, 94, 32, 28, 224, 95, 32, 26, 224, 99, 32, 24, 224, 101,
-        32, 22, 224, 103, 32, 20, 224, 110, 32, 18, 224, 111, 32, 16, 224, 114,
-        32, 14, 224, 115, 32, 12, 224, 153, 48, 130, 0, 101, 48, 130, 0, 240,
-        49, 5, 0, 239, 190, 173, 222, 69, 253, 129, 0, 213, 252, 0, 0, 118,
-        32, 4, 176, 16, 189, 0, 191, 248, 181, 4, 70, 0, 40, 0, 240, 166, 128,
-        225, 243, 209, 241, 212, 248, 220, 21, 208, 241, 1, 6, 56, 191, 0, 38,
-        33, 177, 160, 104, 205, 243, 181, 246, 0, 185, 1, 54, 32, 70, 212, 248,
-        16, 19, 217, 243, 168, 243, 32, 70, 212, 248, 204, 20, 217, 243, 163,
-        243, 32, 70, 212, 248, 24, 19, 217, 243, 158, 243, 212, 248, 36, 3,
-        8, 177, 189, 247, 164, 248, 212, 248, 124, 2, 32, 177, 3, 240, 82, 250,
-        0, 35, 196, 248, 124, 50, 39, 106, 185, 105, 17, 177, 32, 70, 30, 240,
-        39, 222, 0, 37, 189, 97, 212, 248, 104, 50, 89, 89, 17, 177, 32, 70,
-        252, 243, 248, 241, 4, 53, 32, 45, 245, 209, 212, 248, 92, 1, 2, 240,
-        89, 255, 32, 70, 255, 247, 95, 249, 212, 248, 8, 5, 32, 177, 1, 240,
-        95, 252, 0, 35, 196, 248, 8, 53, 32, 70, 255, 247, 154, 249, 32, 70,
-        2, 240, 20, 250, 35, 104, 134, 25, 211, 248, 216, 16, 49, 177, 96, 104,
-        2, 240, 7, 250, 35, 104, 0, 34, 195, 248, 216, 32, 35, 104, 211, 248,
-        220, 0, 40, 177, 189, 247, 99, 248, 35, 104, 0, 34, 195, 248, 220, 32,
-        212, 248, 180, 82, 4, 224, 40, 70, 239, 104, 189, 247, 88, 248, 61,
-        70, 0, 45, 248, 209, 33, 70, 196, 248, 180, 82, 32, 104, 255, 247, 18,
-        253, 32, 104, 24, 73, 34, 70, 255, 247, 131, 252, 212, 248, 104, 1,
-        24, 177, 5, 240, 48, 253, 196, 248, 104, 81, 212, 248, 128, 2, 32, 177,
-        189, 247, 62, 248, 0, 35, 196, 248, 128, 50, 212, 248, 232, 4, 72, 177,
-        189, 247, 54, 248, 0, 35, 196, 248, 232, 52, 3, 224, 32, 70, 97, 104,
-        228, 243, 215, 246, 212, 248, 120, 34, 0, 42, 247, 209, 4, 245, 196,
-        96, 4, 48, 249, 247, 2, 253, 32, 70, 97, 104, 1, 240, 161, 248, 0, 224,
-        6, 70, 48, 70, 248, 189, 70, 217, 3, 0, 45, 233, 240, 79, 145, 176,
-        0, 36, 145, 70, 27, 158, 157, 248, 104, 32, 7, 144, 221, 248, 120, 160,
-        32, 70, 9, 145, 152, 70, 8, 146, 221, 248, 128, 176, 12, 148, 13, 148,
-        14, 148, 187, 247, 32, 248, 72, 70, 49, 70, 28, 154, 29, 155, 205, 248,
-        0, 160, 9, 240, 101, 250, 5, 70, 8, 177, 1, 35, 165, 227, 255, 247,
-        66, 248, 13, 171, 1, 147, 14, 171, 2, 147, 72, 70, 49, 70, 28, 154,
-        29, 155, 205, 248, 0, 160, 2, 240, 128, 249, 7, 70, 24, 185, 1, 35,
-        12, 147, 4, 70, 183, 227, 13, 152, 72, 177, 170, 73, 186, 247, 105,
-        255, 40, 177, 41, 70, 42, 70, 186, 247, 234, 254, 31, 250, 128, 249,
-        31, 155, 48, 70, 0, 147, 65, 70, 12, 170, 75, 70, 1, 240, 132, 248,
-        4, 70, 0, 40, 0, 240, 184, 131, 5, 104, 14, 154, 70, 96, 13, 155, 197,
-        248, 224, 32, 208, 248, 116, 36, 255, 33, 197, 248, 216, 112, 197, 248,
-        220, 48, 130, 248, 96, 16, 66, 106, 0, 35, 194, 97, 7, 154, 13, 147,
-        130, 96, 150, 74, 197, 248, 12, 128, 197, 248, 168, 32, 110, 97, 14,
-        147, 1, 34, 128, 248, 42, 38, 208, 248, 196, 34, 192, 248, 168, 161,
-        99, 243, 23, 34, 192, 248, 196, 34, 8, 154, 65, 70, 133, 248, 33, 32,
-        128, 248, 211, 49, 3, 35, 128, 248, 49, 53, 255, 247, 30, 251, 35, 104,
-        4, 245, 196, 98, 219, 105, 96, 104, 25, 110, 4, 50, 249, 247, 50, 252,
-        7, 70, 0, 40, 64, 240, 97, 131, 32, 70, 57, 70, 216, 243, 193, 244,
-        32, 70, 7, 153, 50, 70, 67, 70, 5, 240, 209, 251, 196, 248, 104, 1,
-        8, 185, 15, 35, 43, 227, 122, 75, 40, 70, 141, 232, 136, 0, 121, 75,
-        122, 73, 4, 147, 122, 75, 122, 74, 5, 147, 35, 70, 2, 151, 3, 151, 191,
-        247, 44, 255, 8, 177, 16, 35, 25, 227, 8, 155, 28, 154, 141, 232, 72,
-        0, 29, 155, 2, 146, 3, 147, 32, 70, 9, 153, 74, 70, 67, 70, 205, 248,
-        16, 160, 2, 240, 223, 249, 12, 144, 0, 40, 64, 240, 45, 131, 35, 105,
-        216, 111, 254, 247, 74, 252, 164, 248, 40, 6, 180, 248, 174, 1, 196,
-        247, 165, 254, 0, 48, 24, 191, 1, 32, 10, 48, 84, 248, 32, 48, 10, 169,
-        35, 98, 32, 105, 250, 243, 252, 243, 0, 40, 61, 209, 10, 155, 7, 70,
-        196, 248, 180, 49, 57, 70, 15, 170, 32, 70, 216, 243, 141, 241, 57,
-        70, 32, 70, 189, 248, 60, 32, 1, 55, 216, 243, 138, 241, 6, 47, 241,
-        209, 79, 244, 0, 115, 197, 248, 236, 48, 42, 35, 197, 248, 188, 48,
-        50, 35, 197, 248, 192, 48, 54, 35, 79, 244, 125, 98, 197, 248, 200,
-        48, 64, 242, 212, 83, 165, 248, 206, 32, 165, 248, 196, 48, 79, 244,
-        93, 114, 0, 35, 133, 248, 187, 112, 165, 248, 204, 32, 132, 248, 132,
-        55, 213, 248, 188, 48, 132, 43, 2, 217, 132, 35, 197, 248, 188, 48,
-        79, 244, 4, 112, 188, 247, 5, 255, 196, 248, 128, 2, 8, 185, 20, 35,
-        175, 226, 79, 244, 4, 114, 0, 33, 184, 243, 149, 240, 34, 70, 0, 35,
-        210, 248, 132, 2, 212, 248, 128, 18, 4, 50, 65, 248, 35, 0, 212, 248,
-        128, 18, 81, 248, 35, 16, 139, 113, 1, 51, 4, 43, 240, 209, 1, 35, 133,
-        248, 147, 48, 35, 106, 24, 105, 221, 247, 247, 252, 0, 240, 1, 0, 133,
-        248, 84, 0, 35, 106, 24, 105, 221, 247, 239, 252, 192, 243, 192, 0,
-        133, 248, 85, 0, 41, 70, 32, 70, 5, 240, 133, 254, 43, 73, 213, 248,
-        220, 0, 186, 247, 92, 254, 213, 248, 216, 32, 64, 242, 110, 81, 147,
-        106, 7, 70, 139, 66, 8, 208, 18, 107, 65, 242, 107, 1, 138, 66, 90,
-        209, 209, 43, 1, 208, 233, 43, 18, 209, 212, 248, 116, 52, 25, 34, 131,
-        248, 73, 32, 212, 248, 116, 52, 79, 240, 255, 50, 90, 100, 100, 34,
-        131, 248, 122, 32, 212, 248, 116, 52, 1, 34, 131, 248, 48, 32, 89, 224,
-        179, 245, 137, 127, 17, 216, 179, 245, 136, 127, 50, 216, 245, 43, 7,
-        216, 244, 43, 46, 210, 228, 43, 44, 208, 239, 43, 42, 208, 214, 43,
-        39, 224, 163, 245, 135, 115, 1, 43, 69, 216, 35, 224, 179, 245, 154,
-        127, 23, 210, 179, 245, 152, 127, 29, 216, 64, 242, 23, 18, 147, 66,
-        24, 224, 0, 191, 30, 51, 5, 0, 95, 98, 45, 7, 229, 91, 130, 0, 212,
-        211, 3, 0, 216, 182, 135, 0, 17, 33, 1, 0, 70, 217, 3, 0, 41, 51, 5,
-        0, 179, 245, 154, 127, 38, 217, 179, 245, 155, 127, 2, 217, 179, 245,
-        165, 127, 32, 209, 212, 248, 116, 52, 50, 34, 131, 248, 122, 32, 212,
-        248, 116, 52, 100, 34, 131, 248, 73, 32, 16, 224, 65, 242, 228, 65,
-        138, 66, 17, 209, 64, 242, 218, 82, 147, 66, 13, 209, 212, 248, 116,
-        36, 100, 35, 130, 248, 122, 48, 212, 248, 116, 36, 130, 248, 73, 48,
-        212, 248, 116, 52, 79, 240, 255, 50, 90, 100, 212, 248, 116, 52, 100,
-        34, 163, 248, 74, 32, 163, 248, 76, 32, 80, 34, 163, 248, 146, 32, 255,
-        34, 163, 248, 150, 32, 163, 248, 154, 32, 40, 34, 163, 248, 148, 32,
-        100, 34, 163, 248, 152, 32, 163, 248, 156, 32, 80, 34, 163, 248, 158,
-        32, 255, 34, 163, 248, 162, 32, 163, 248, 166, 32, 40, 34, 163, 248,
-        160, 32, 100, 34, 163, 248, 164, 32, 163, 248, 168, 32, 79, 240, 1,
-        9, 25, 34, 163, 248, 170, 32, 163, 248, 144, 144, 32, 70, 5, 240, 121,
-        253, 212, 248, 116, 52, 34, 106, 25, 120, 16, 105, 218, 120, 221, 247,
-        10, 254, 212, 248, 96, 54, 131, 248, 52, 144, 225, 105, 32, 105, 4,
-        49, 3, 240, 73, 249, 35, 106, 212, 248, 116, 164, 24, 105, 221, 247,
-        29, 254, 202, 248, 64, 0, 4, 245, 230, 122, 32, 105, 81, 70, 249, 243,
-        164, 245, 6, 34, 40, 29, 81, 70, 182, 247, 61, 251, 35, 106, 24, 105,
-        221, 247, 11, 252, 195, 5, 4, 213, 35, 104, 195, 248, 64, 145, 131,
-        248, 61, 145, 180, 248, 174, 1, 196, 247, 68, 253, 0, 48, 24, 191, 1,
-        32, 10, 48, 84, 248, 32, 48, 32, 70, 35, 98, 255, 247, 134, 248, 8,
-        185, 24, 35, 142, 225, 33, 106, 15, 35, 64, 242, 255, 50, 161, 248,
-        8, 49, 161, 248, 10, 33, 1, 245, 128, 115, 1, 241, 252, 2, 32, 70, 1,
-        240, 42, 252, 35, 106, 211, 248, 252, 32, 195, 248, 248, 32, 195, 248,
-        240, 32, 211, 248, 0, 33, 195, 248, 244, 32, 26, 104, 2, 42, 1, 209,
-        1, 34, 90, 117, 7, 240, 1, 3, 0, 43, 12, 191, 3, 35, 0, 35, 133, 248,
-        79, 48, 35, 106, 24, 105, 221, 247, 200, 251, 16, 244, 0, 96, 35, 104,
-        6, 208, 147, 248, 79, 32, 2, 177, 1, 34, 131, 248, 81, 32, 1, 224, 131,
-        248, 81, 0, 33, 106, 32, 70, 28, 49, 217, 243, 122, 246, 0, 33, 32,
-        70, 212, 248, 32, 144, 222, 243, 180, 242, 0, 34, 127, 35, 9, 241, 80,
-        1, 0, 147, 1, 144, 19, 70, 9, 241, 28, 0, 232, 247, 121, 254, 32, 70,
-        238, 247, 227, 250, 64, 242, 204, 99, 196, 248, 16, 54, 32, 70, 255,
-        247, 235, 250, 12, 144, 0, 40, 64, 240, 89, 129, 212, 248, 112, 4, 2,
-        33, 157, 249, 44, 32, 25, 240, 206, 222, 32, 70, 65, 70, 255, 247, 182,
-        248, 16, 185, 79, 244, 122, 115, 35, 225, 32, 70, 2, 240, 107, 252,
-        196, 248, 92, 1, 16, 185, 64, 242, 233, 51, 26, 225, 32, 70, 255, 247,
-        92, 250, 32, 70, 49, 70, 228, 243, 240, 243, 16, 185, 64, 242, 235,
-        51, 15, 225, 196, 248, 164, 5, 196, 248, 168, 5, 49, 70, 32, 70, 228,
-        243, 228, 243, 16, 185, 79, 244, 123, 115, 3, 225, 1, 35, 196, 248,
-        172, 5, 133, 248, 172, 48, 32, 70, 2, 240, 68, 251, 16, 177, 64, 242,
-        237, 51, 247, 224, 6, 35, 165, 248, 96, 48, 165, 248, 98, 48, 149, 248,
-        156, 48, 1, 43, 4, 209, 64, 34, 165, 248, 96, 32, 165, 248, 98, 32,
-        213, 248, 136, 48, 10, 34, 26, 128, 79, 244, 84, 114, 90, 128, 213,
-        248, 140, 48, 1, 38, 196, 34, 30, 128, 90, 128, 212, 248, 48, 1, 235,
-        243, 183, 240, 8, 177, 132, 248, 18, 98, 180, 248, 197, 50, 67, 244,
-        192, 83, 67, 240, 30, 3, 164, 248, 197, 50, 35, 106, 24, 105, 221, 247,
-        46, 251, 192, 6, 7, 213, 212, 248, 116, 52, 1, 34, 154, 116, 212, 248,
-        116, 52, 255, 34, 218, 116, 180, 248, 197, 34, 79, 242, 255, 115, 19,
-        64, 212, 248, 116, 36, 164, 248, 197, 50, 210, 120, 1, 42, 7, 209, 35,
-        244, 0, 99, 35, 240, 12, 3, 27, 4, 27, 12, 164, 248, 197, 50, 255, 38,
-        2, 33, 1, 34, 132, 248, 196, 98, 132, 248, 195, 98, 132, 248, 194, 98,
-        32, 70, 215, 243, 136, 241, 1, 33, 50, 70, 32, 70, 215, 243, 131, 241,
-        35, 106, 79, 240, 255, 56, 196, 248, 24, 130, 24, 105, 221, 247, 247,
-        250, 16, 240, 4, 6, 32, 70, 5, 208, 3, 33, 210, 243, 112, 246, 132,
-        248, 32, 130, 4, 224, 49, 70, 210, 243, 106, 246, 132, 248, 32, 98,
-        35, 106, 24, 105, 221, 247, 228, 250, 57, 7, 2, 213, 0, 35, 132, 248,
-        32, 50, 250, 6, 3, 213, 32, 70, 0, 33, 210, 243, 89, 246, 187, 7, 14,
-        213, 162, 106, 0, 35, 130, 248, 77, 48, 226, 106, 130, 248, 77, 48,
-        180, 248, 197, 50, 35, 240, 128, 3, 27, 4, 27, 12, 164, 248, 197, 50,
-        126, 7, 3, 213, 32, 70, 0, 33, 237, 247, 28, 251, 56, 6, 7, 213, 180,
-        248, 197, 50, 35, 240, 16, 3, 27, 4, 27, 12, 164, 248, 197, 50, 149,
-        248, 66, 48, 163, 177, 149, 248, 67, 48, 139, 177, 23, 240, 96, 15,
-        14, 208, 7, 240, 32, 1, 209, 241, 1, 1, 7, 240, 64, 2, 56, 191, 0, 33,
-        210, 241, 1, 2, 32, 70, 56, 191, 0, 34, 0, 240, 254, 254, 180, 248,
-        174, 1, 196, 247, 224, 251, 0, 48, 24, 191, 1, 32, 0, 241, 10, 6, 84,
-        248, 38, 112, 212, 248, 108, 18, 32, 70, 56, 74, 59, 70, 30, 240, 204,
-        217, 184, 97, 84, 248, 38, 16, 136, 105, 16, 185, 64, 242, 76, 67, 33,
-        224, 80, 49, 40, 34, 76, 48, 182, 247, 175, 249, 20, 32, 188, 243, 16,
-        244, 196, 248, 28, 7, 16, 185, 64, 242, 77, 67, 19, 224, 171, 109, 32,
-        70, 67, 240, 4, 3, 171, 101, 224, 243, 129, 245, 32, 70, 255, 247, 218,
-        248, 16, 177, 79, 244, 250, 99, 5, 224, 32, 70, 2, 240, 113, 253, 24,
-        177, 64, 242, 209, 115, 12, 147, 35, 224, 35, 104, 33, 73, 211, 248,
-        220, 0, 186, 247, 212, 251, 112, 177, 3, 70, 24, 70, 19, 248, 1, 43,
-        26, 177, 28, 73, 138, 92, 81, 7, 247, 213, 0, 33, 10, 34, 186, 247,
-        76, 251, 196, 248, 108, 6, 160, 104, 0, 33, 205, 243, 180, 242, 1, 35,
-        132, 248, 152, 55, 187, 241, 0, 15, 23, 208, 0, 35, 203, 248, 0, 48,
-        19, 224, 13, 152, 32, 177, 188, 247, 41, 252, 0, 35, 13, 147, 14, 147,
-        20, 177, 32, 70, 255, 247, 87, 251, 187, 241, 0, 15, 4, 208, 12, 155,
-        0, 36, 203, 248, 0, 48, 0, 224, 92, 70, 32, 70, 17, 176, 189, 232, 240,
-        143, 48, 70, 57, 70, 1, 240, 171, 253, 226, 231, 0, 191, 232, 215, 3,
-        0, 206, 49, 5, 0, 22, 119, 135, 0, 56, 181, 4, 70, 112, 177, 5, 104,
-        33, 70, 40, 104, 255, 247, 196, 248, 40, 104, 5, 73, 34, 70, 255, 247,
-        53, 248, 32, 70, 189, 232, 56, 64, 188, 247, 247, 187, 56, 189, 0, 191,
-        238, 219, 3, 0, 112, 181, 6, 106, 142, 176, 5, 70, 56, 32, 188, 243,
-        143, 243, 4, 70, 0, 40, 49, 208, 28, 75, 5, 96, 0, 147, 0, 35, 1, 147,
-        2, 147, 3, 147, 26, 75, 26, 73, 4, 147, 26, 75, 27, 74, 5, 147, 40,
-        104, 35, 70, 191, 247, 148, 251, 248, 185, 24, 75, 33, 70, 0, 147, 40,
-        104, 23, 74, 2, 35, 191, 247, 222, 251, 5, 70, 168, 185, 41, 70, 28,
-        34, 4, 241, 11, 0, 183, 243, 94, 245, 48, 105, 49, 104, 7, 170, 220,
-        247, 197, 252, 35, 70, 7, 170, 217, 122, 170, 92, 1, 53, 10, 67, 218,
-        114, 1, 51, 28, 45, 246, 209, 3, 224, 32, 70, 255, 247, 171, 255, 0,
-        36, 32, 70, 14, 176, 112, 189, 0, 191, 57, 12, 131, 0, 244, 219, 3,
-        0, 108, 194, 135, 0, 149, 102, 1, 0, 238, 219, 3, 0, 92, 194, 135, 0,
-        241, 11, 131, 0, 56, 181, 4, 70, 112, 177, 5, 104, 33, 70, 40, 104,
-        255, 247, 92, 248, 40, 104, 5, 73, 34, 70, 254, 247, 205, 255, 32, 70,
-        189, 232, 56, 64, 188, 247, 143, 187, 56, 189, 0, 191, 24, 220, 3, 0,
-        48, 181, 5, 70, 135, 176, 12, 32, 188, 243, 40, 243, 4, 70, 0, 40, 63,
-        208, 0, 35, 5, 96, 1, 33, 0, 147, 1, 144, 32, 74, 40, 70, 32, 75, 2,
-        240, 67, 249, 0, 40, 96, 96, 50, 219, 30, 75, 213, 248, 124, 6, 141,
-        232, 24, 0, 5, 33, 33, 34, 28, 75, 2, 240, 82, 255, 56, 187, 27, 75,
-        213, 248, 124, 6, 141, 232, 24, 0, 5, 33, 36, 34, 24, 75, 2, 240, 71,
-        255, 224, 185, 23, 75, 1, 144, 0, 147, 2, 144, 3, 144, 4, 144, 5, 144,
-        21, 73, 40, 104, 21, 74, 35, 70, 191, 247, 14, 251, 112, 185, 19, 75,
-        40, 104, 0, 147, 33, 70, 18, 74, 3, 35, 191, 247, 88, 251, 40, 185,
-        42, 104, 1, 35, 163, 96, 130, 248, 173, 48, 3, 224, 32, 70, 255, 247,
-        158, 255, 0, 36, 32, 70, 7, 176, 48, 189, 185, 16, 131, 0, 181, 16,
-        131, 0, 225, 103, 1, 0, 189, 16, 131, 0, 125, 19, 131, 0, 221, 16, 131,
-        0, 221, 17, 131, 0, 168, 194, 135, 0, 24, 220, 3, 0, 144, 194, 135,
-        0, 97, 17, 131, 0, 48, 181, 5, 70, 135, 176, 0, 40, 109, 208, 8, 32,
-        188, 243, 192, 242, 4, 70, 0, 40, 104, 208, 0, 35, 5, 96, 20, 33, 0,
-        147, 1, 144, 53, 74, 40, 70, 53, 75, 2, 240, 219, 248, 0, 40, 96, 96,
-        94, 219, 51, 75, 79, 244, 152, 113, 141, 232, 24, 0, 107, 34, 213, 248,
-        124, 6, 48, 75, 2, 240, 233, 254, 0, 40, 81, 209, 47, 75, 5, 33, 141,
-        232, 24, 0, 107, 34, 213, 248, 124, 6, 44, 75, 2, 240, 221, 254, 0,
-        40, 69, 209, 43, 75, 79, 244, 144, 113, 141, 232, 24, 0, 108, 34, 213,
-        248, 124, 6, 40, 75, 2, 240, 208, 254, 0, 40, 56, 209, 38, 75, 79, 244,
-        144, 113, 141, 232, 24, 0, 111, 34, 213, 248, 124, 6, 35, 75, 2, 240,
-        195, 254, 0, 40, 43, 209, 34, 75, 10, 33, 141, 232, 24, 0, 110, 34,
-        213, 248, 124, 6, 31, 75, 2, 240, 183, 254, 0, 40, 31, 209, 0, 149,
-        213, 248, 124, 6, 10, 33, 110, 34, 27, 75, 3, 240, 157, 248, 176, 185,
-        26, 75, 1, 144, 0, 147, 2, 144, 3, 144, 4, 144, 5, 144, 40, 104, 23,
-        73, 24, 74, 35, 70, 191, 247, 116, 250, 64, 185, 43, 104, 1, 34, 131,
-        248, 176, 32, 0, 224, 4, 70, 32, 70, 7, 176, 48, 189, 32, 70, 188, 247,
-        171, 250, 0, 36, 247, 231, 207, 104, 1, 0, 175, 104, 1, 0, 249, 26,
-        131, 0, 225, 104, 1, 0, 217, 26, 131, 0, 5, 25, 131, 0, 25, 27, 131,
-        0, 65, 25, 131, 0, 133, 27, 131, 0, 129, 25, 131, 0, 177, 27, 131, 0,
-        173, 25, 131, 0, 205, 24, 131, 0, 217, 25, 131, 0, 192, 194, 135, 0,
-        28, 220, 3, 0, 16, 181, 4, 70, 80, 177, 3, 104, 5, 73, 24, 104, 34,
-        70, 254, 247, 185, 254, 32, 70, 189, 232, 16, 64, 188, 247, 123, 186,
-        16, 189, 0, 191, 28, 220, 3, 0, 16, 181, 4, 70, 80, 177, 3, 104, 5,
-        73, 24, 104, 34, 70, 254, 247, 167, 254, 32, 70, 189, 232, 16, 64, 188,
-        247, 105, 186, 16, 189, 0, 191, 57, 51, 5, 0, 112, 181, 5, 70, 134,
-        176, 8, 32, 188, 247, 92, 250, 4, 70, 0, 40, 0, 240, 161, 128, 83, 75,
-        5, 96, 79, 244, 144, 113, 0, 147, 1, 144, 48, 34, 213, 248, 124, 6,
-        80, 75, 2, 240, 54, 254, 0, 40, 64, 240, 146, 128, 78, 75, 213, 248,
-        124, 6, 141, 232, 24, 0, 79, 244, 144, 113, 160, 34, 75, 75, 2, 240,
-        180, 254, 0, 40, 64, 240, 132, 128, 73, 75, 213, 248, 124, 6, 141, 232,
-        24, 0, 79, 244, 144, 113, 196, 34, 70, 75, 2, 240, 166, 254, 0, 40,
-        118, 209, 68, 75, 213, 248, 124, 6, 141, 232, 24, 0, 5, 33, 48, 34,
-        66, 75, 2, 240, 14, 254, 0, 40, 106, 209, 64, 75, 213, 248, 124, 6,
-        141, 232, 24, 0, 5, 33, 160, 34, 62, 75, 2, 240, 142, 254, 0, 40, 94,
-        209, 60, 75, 213, 248, 124, 6, 141, 232, 24, 0, 5, 33, 196, 34, 58,
-        75, 2, 240, 130, 254, 0, 40, 82, 209, 213, 248, 124, 6, 5, 33, 48, 34,
-        54, 75, 0, 148, 2, 240, 220, 255, 0, 40, 72, 209, 213, 248, 124, 6,
-        5, 33, 160, 34, 50, 75, 0, 148, 3, 240, 88, 248, 0, 40, 62, 209, 213,
-        248, 124, 6, 5, 33, 196, 34, 46, 75, 0, 148, 3, 240, 78, 248, 0, 40,
-        52, 209, 213, 248, 124, 6, 192, 33, 48, 34, 42, 75, 0, 148, 2, 240,
-        190, 255, 88, 187, 213, 248, 124, 6, 192, 33, 160, 34, 39, 75, 0, 148,
-        3, 240, 59, 248, 16, 187, 213, 248, 124, 6, 128, 33, 48, 34, 35, 75,
-        0, 148, 2, 240, 104, 254, 6, 70, 192, 185, 141, 232, 17, 0, 1, 33, 40,
-        70, 31, 74, 32, 75, 1, 240, 150, 255, 0, 40, 96, 96, 13, 219, 30, 75,
-        40, 104, 141, 232, 72, 0, 29, 73, 29, 74, 35, 70, 2, 150, 3, 150, 4,
-        150, 5, 150, 191, 247, 119, 249, 24, 177, 32, 70, 255, 247, 64, 255,
-        0, 36, 32, 70, 6, 176, 112, 189, 209, 44, 131, 0, 193, 43, 131, 0, 253,
-        44, 131, 0, 237, 43, 131, 0, 165, 44, 131, 0, 161, 43, 131, 0, 189,
-        42, 131, 0, 253, 39, 131, 0, 233, 42, 131, 0, 41, 40, 131, 0, 145, 42,
-        131, 0, 221, 39, 131, 0, 69, 41, 131, 0, 113, 41, 131, 0, 225, 40, 131,
-        0, 249, 47, 131, 0, 17, 48, 131, 0, 81, 44, 131, 0, 85, 45, 131, 0,
-        81, 45, 131, 0, 117, 46, 131, 0, 124, 195, 135, 0, 57, 51, 5, 0, 32,
-        35, 64, 34, 128, 232, 12, 0, 192, 248, 176, 32, 194, 98, 128, 34, 66,
-        99, 24, 34, 130, 99, 2, 100, 2, 101, 29, 34, 194, 101, 17, 34, 45, 233,
-        240, 65, 130, 101, 11, 37, 5, 34, 10, 36, 79, 244, 240, 97, 69, 97,
-        133, 97, 2, 102, 4, 37, 79, 244, 240, 114, 8, 39, 79, 244, 128, 102,
-        129, 96, 4, 97, 16, 33, 196, 97, 133, 98, 1, 36, 9, 37, 79, 240, 20,
-        12, 130, 102, 79, 240, 39, 8, 3, 34, 192, 248, 180, 48, 193, 96, 4,
-        98, 65, 98, 192, 248, 184, 16, 68, 102, 196, 100, 67, 101, 133, 103,
-        192, 248, 48, 192, 199, 99, 198, 102, 6, 103, 66, 103, 192, 248, 124,
-        128, 192, 248, 164, 64, 176, 36, 192, 248, 192, 64, 72, 36, 192, 248,
-        196, 64, 96, 36, 192, 248, 200, 64, 192, 248, 224, 48, 48, 36, 192,
-        248, 240, 48, 211, 35, 79, 240, 18, 8, 192, 248, 132, 80, 192, 248,
-        136, 80, 192, 248, 204, 64, 2, 37, 6, 36, 192, 248, 212, 16, 192, 248,
-        244, 48, 79, 244, 250, 97, 0, 35, 192, 248, 128, 128, 192, 248, 140,
-        80, 192, 248, 144, 80, 192, 248, 148, 192, 192, 248, 152, 32, 192, 248,
-        156, 80, 192, 248, 160, 80, 192, 248, 168, 32, 192, 248, 172, 112, 192,
-        248, 208, 64, 192, 248, 216, 16, 192, 248, 220, 112, 192, 248, 232,
-        64, 192, 248, 228, 96, 192, 248, 252, 48, 192, 248, 248, 32, 189, 232,
-        240, 129, 1, 32, 112, 71, 112, 71, 56, 181, 4, 70, 208, 248, 16, 3,
-        32, 177, 188, 247, 246, 248, 0, 35, 196, 248, 16, 51, 212, 248, 24,
-        3, 32, 177, 188, 247, 238, 248, 0, 35, 196, 248, 24, 51, 212, 248, 4,
-        7, 48, 177, 35, 104, 35, 177, 188, 247, 228, 248, 0, 35, 196, 248, 4,
-        55, 212, 248, 168, 2, 24, 177, 35, 104, 11, 177, 188, 247, 218, 248,
-        212, 248, 172, 2, 0, 37, 196, 248, 168, 82, 40, 177, 35, 104, 27, 177,
-        188, 247, 208, 248, 196, 248, 172, 82, 212, 248, 104, 2, 8, 177, 188,
-        247, 201, 248, 212, 248, 56, 3, 0, 37, 196, 248, 104, 82, 24, 177, 188,
-        247, 193, 248, 196, 248, 56, 83, 212, 248, 248, 2, 32, 177, 188, 247,
-        186, 248, 0, 35, 196, 248, 248, 50, 212, 248, 184, 2, 8, 177, 188, 247,
-        178, 248, 0, 37, 99, 25, 211, 248, 132, 50, 211, 248, 224, 0, 8, 177,
-        188, 247, 169, 248, 4, 53, 16, 45, 244, 209, 212, 248, 132, 2, 8, 177,
-        188, 247, 161, 248, 212, 248, 116, 4, 32, 177, 188, 247, 156, 248, 0,
-        35, 196, 248, 116, 52, 212, 248, 204, 4, 32, 177, 188, 247, 148, 248,
-        0, 35, 196, 248, 204, 52, 212, 248, 24, 5, 32, 177, 188, 247, 140, 248,
-        0, 35, 196, 248, 24, 53, 56, 189, 16, 181, 12, 70, 209, 177, 200, 105,
-        24, 177, 188, 247, 129, 248, 0, 35, 227, 97, 212, 248, 136, 0, 32, 177,
-        188, 247, 122, 248, 0, 35, 196, 248, 136, 48, 212, 248, 140, 0, 32,
-        177, 188, 247, 114, 248, 0, 35, 196, 248, 140, 48, 32, 70, 189, 232,
-        16, 64, 188, 247, 106, 184, 16, 189, 112, 181, 4, 70, 79, 244, 182,
-        112, 22, 70, 188, 243, 5, 240, 5, 70, 168, 177, 79, 244, 128, 112, 187,
-        243, 255, 247, 232, 97, 120, 177, 49, 70, 255, 247, 210, 254, 79, 244,
-        84, 112, 187, 243, 246, 247, 197, 248, 136, 0, 40, 177, 196, 32, 187,
-        243, 240, 247, 197, 248, 140, 0, 32, 185, 41, 70, 32, 70, 255, 247,
-        190, 255, 0, 37, 40, 70, 112, 189, 45, 233, 240, 65, 29, 70, 0, 38,
-        3, 104, 192, 248, 168, 98, 147, 248, 184, 48, 4, 70, 56, 32, 88, 67,
-        187, 243, 216, 247, 196, 248, 168, 2, 0, 40, 86, 208, 35, 104, 147,
-        248, 184, 0, 128, 0, 187, 243, 206, 247, 196, 248, 172, 2, 16, 185,
-        64, 242, 245, 51, 149, 224, 79, 244, 2, 112, 187, 243, 196, 247, 196,
-        248, 4, 7, 0, 40, 0, 240, 150, 128, 196, 248, 104, 98, 32, 32, 187,
-        243, 186, 247, 196, 248, 104, 2, 16, 185, 79, 244, 126, 115, 129, 224,
-        79, 244, 146, 112, 187, 243, 176, 247, 196, 248, 56, 3, 16, 185, 64,
-        242, 242, 51, 119, 224, 79, 244, 174, 112, 187, 243, 166, 247, 196,
-        248, 116, 4, 16, 185, 64, 242, 249, 51, 109, 224, 128, 32, 102, 106,
-        187, 243, 156, 247, 176, 98, 16, 185, 64, 242, 3, 67, 100, 224, 79,
-        244, 132, 112, 187, 243, 147, 247, 196, 248, 16, 3, 16, 185, 64, 242,
-        239, 51, 90, 224, 79, 244, 132, 112, 187, 243, 137, 247, 196, 248, 24,
-        3, 16, 185, 79, 244, 124, 115, 80, 224, 18, 32, 187, 243, 128, 247,
-        196, 248, 248, 2, 16, 185, 79, 244, 125, 115, 71, 224, 180, 32, 187,
-        243, 119, 247, 196, 248, 184, 2, 16, 185, 64, 242, 246, 51, 62, 224,
-        79, 244, 100, 112, 187, 243, 109, 247, 196, 248, 132, 2, 240, 177, 0,
-        241, 228, 3, 196, 248, 136, 50, 0, 245, 228, 115, 0, 245, 43, 112, 196,
-        248, 140, 50, 196, 248, 144, 2, 38, 70, 4, 241, 16, 7, 35, 104, 214,
-        248, 132, 130, 219, 105, 211, 248, 212, 0, 64, 1, 187, 243, 82, 247,
-        200, 248, 224, 0, 214, 248, 132, 50, 211, 248, 224, 0, 16, 185, 64,
-        242, 247, 51, 21, 224, 4, 54, 190, 66, 233, 209, 79, 244, 132, 112,
-        187, 243, 65, 247, 196, 248, 204, 4, 16, 185, 64, 242, 251, 51, 8, 224,
-        79, 244, 134, 112, 187, 243, 55, 247, 196, 248, 24, 5, 32, 185, 64,
-        242, 255, 51, 43, 96, 189, 232, 240, 129, 56, 32, 187, 243, 44, 247,
-        196, 248, 96, 6, 16, 185, 79, 244, 129, 99, 243, 231, 1, 32, 189, 232,
-        240, 129, 56, 181, 13, 70, 4, 70, 0, 40, 43, 208, 255, 247, 123, 254,
-        32, 70, 41, 70, 255, 247, 120, 254, 160, 106, 8, 177, 187, 247, 113,
-        255, 99, 106, 91, 177, 152, 106, 32, 177, 187, 247, 107, 255, 99, 106,
-        0, 34, 154, 98, 96, 106, 187, 247, 101, 255, 0, 35, 99, 98, 212, 248,
-        96, 6, 32, 177, 187, 247, 94, 255, 0, 35, 196, 248, 96, 54, 33, 104,
-        33, 177, 40, 70, 255, 247, 206, 254, 0, 35, 35, 96, 32, 70, 189, 232,
-        56, 64, 187, 247, 79, 191, 56, 189, 0, 0, 45, 233, 243, 65, 6, 70, 64,
-        246, 100, 0, 136, 70, 21, 70, 31, 70, 187, 243, 230, 246, 4, 70, 16,
-        185, 64, 242, 234, 51, 16, 224, 38, 35, 192, 248, 200, 53, 192, 248,
-        204, 53, 8, 155, 65, 70, 192, 248, 8, 55, 58, 70, 48, 70, 255, 247,
-        200, 254, 32, 96, 24, 185, 64, 242, 235, 51, 43, 96, 45, 224, 65, 35,
-        26, 74, 128, 248, 184, 48, 35, 104, 18, 104, 4, 96, 195, 248, 152, 32,
-        79, 244, 10, 112, 187, 243, 193, 246, 160, 98, 64, 177, 0, 245, 138,
-        112, 224, 98, 44, 32, 187, 243, 185, 246, 96, 98, 48, 185, 2, 224, 64,
-        242, 242, 51, 226, 231, 64, 242, 243, 51, 223, 231, 32, 70, 49, 70,
-        66, 70, 43, 70, 0, 151, 255, 247, 195, 254, 56, 177, 32, 70, 49, 70,
-        66, 70, 43, 70, 0, 151, 255, 247, 254, 253, 32, 185, 32, 70, 49, 70,
-        255, 247, 121, 255, 0, 36, 32, 70, 189, 232, 252, 129, 116, 7, 0, 0,
-        3, 104, 11, 34, 219, 105, 195, 248, 188, 32, 90, 97, 154, 97, 112, 71,
-        16, 181, 4, 70, 248, 177, 208, 248, 80, 2, 8, 177, 187, 247, 227, 254,
-        212, 248, 232, 2, 32, 177, 187, 247, 222, 254, 0, 35, 196, 248, 232,
-        50, 212, 248, 252, 3, 32, 177, 187, 247, 214, 254, 0, 35, 196, 248,
-        252, 51, 35, 104, 5, 73, 24, 104, 34, 70, 254, 247, 6, 251, 32, 70,
-        189, 232, 16, 64, 187, 247, 200, 190, 16, 189, 40, 221, 3, 0, 128, 248,
-        192, 19, 112, 71, 0, 0, 240, 181, 135, 176, 5, 70, 255, 247, 201, 255,
-        64, 242, 4, 64, 187, 247, 181, 254, 4, 70, 0, 40, 0, 240, 212, 128,
-        0, 33, 64, 242, 4, 66, 64, 38, 183, 243, 69, 240, 37, 96, 132, 248,
-        225, 99, 188, 32, 187, 247, 165, 254, 196, 248, 80, 2, 0, 40, 0, 240,
-        186, 128, 0, 33, 188, 34, 183, 243, 54, 240, 1, 35, 163, 114, 99, 115,
-        163, 115, 227, 115, 163, 116, 148, 248, 225, 51, 0, 34, 63, 43, 230,
-        116, 152, 191, 227, 116, 255, 35, 132, 248, 40, 48, 11, 35, 34, 116,
-        98, 116, 34, 115, 226, 114, 5, 33, 2, 34, 132, 248, 222, 51, 0, 35,
-        132, 248, 39, 16, 132, 248, 45, 32, 65, 242, 40, 80, 132, 248, 44, 48,
-        96, 133, 40, 104, 144, 248, 156, 0, 33, 117, 1, 40, 12, 191, 1, 32,
-        16, 70, 132, 248, 46, 0, 1, 32, 132, 248, 192, 3, 79, 244, 0, 96, 162,
-        117, 96, 99, 34, 70, 33, 70, 5, 32, 208, 117, 2, 32, 208, 119, 35, 185,
-        79, 244, 128, 112, 164, 248, 228, 3, 2, 224, 32, 32, 161, 248, 228,
-        3, 1, 51, 1, 50, 2, 49, 8, 43, 237, 209, 0, 38, 1, 39, 32, 70, 65, 242,
-        40, 81, 132, 248, 47, 96, 132, 248, 48, 112, 202, 247, 63, 254, 2, 33,
-        32, 70, 133, 248, 190, 114, 202, 247, 49, 250, 132, 248, 216, 99, 4,
-        33, 40, 70, 50, 74, 50, 75, 0, 150, 1, 148, 1, 240, 7, 252, 176, 66,
-        196, 248, 0, 4, 78, 219, 4, 33, 40, 70, 46, 74, 46, 75, 0, 150, 1, 148,
-        4, 240, 145, 251, 176, 66, 96, 96, 67, 219, 79, 244, 62, 112, 187, 247,
-        38, 254, 196, 248, 232, 2, 0, 40, 59, 208, 49, 70, 79, 244, 62, 114,
-        182, 243, 183, 247, 16, 32, 187, 243, 192, 245, 196, 248, 252, 3, 0,
-        40, 47, 208, 33, 75, 40, 104, 0, 147, 33, 75, 33, 73, 1, 147, 33, 75,
-        34, 74, 3, 147, 35, 70, 2, 150, 4, 150, 5, 150, 190, 247, 198, 253,
-        248, 185, 30, 75, 132, 248, 84, 114, 26, 29, 7, 202, 141, 232, 7, 0,
-        34, 70, 27, 104, 40, 70, 7, 33, 254, 247, 72, 251, 255, 35, 132, 248,
-        221, 51, 43, 104, 32, 70, 147, 248, 66, 16, 205, 247, 107, 252, 200,
-        35, 196, 248, 236, 50, 32, 70, 202, 247, 191, 249, 32, 35, 132, 248,
-        226, 51, 8, 224, 212, 248, 80, 2, 8, 177, 187, 247, 228, 253, 32, 70,
-        187, 247, 225, 253, 0, 36, 32, 70, 7, 176, 240, 189, 133, 123, 1, 0,
-        181, 115, 1, 0, 33, 123, 1, 0, 185, 162, 1, 0, 53, 172, 1, 0, 17, 170,
-        1, 0, 56, 220, 3, 0, 119, 162, 1, 0, 40, 221, 3, 0, 64, 51, 5, 0, 2,
-        70, 24, 177, 0, 104, 2, 73, 254, 247, 252, 185, 112, 71, 0, 191, 118,
-        107, 136, 0, 16, 181, 4, 70, 134, 176, 15, 73, 15, 74, 35, 70, 0, 104,
-        190, 247, 239, 253, 14, 75, 32, 104, 0, 147, 0, 35, 1, 147, 2, 147,
-        3, 147, 11, 75, 12, 73, 4, 147, 12, 75, 6, 74, 5, 147, 35, 70, 190,
-        247, 98, 253, 32, 177, 32, 70, 255, 247, 217, 255, 79, 240, 255, 48,
-        6, 176, 16, 189, 0, 191, 118, 107, 136, 0, 213, 175, 1, 0, 145, 67,
-        131, 0, 232, 222, 3, 0, 160, 195, 135, 0, 157, 175, 1, 0, 56, 181, 4,
-        70, 208, 248, 52, 1, 21, 70, 255, 247, 197, 254, 212, 248, 56, 1, 41,
-        70, 189, 232, 56, 64, 0, 240, 48, 184, 16, 181, 4, 70, 0, 40, 40, 208,
-        65, 105, 105, 177, 144, 248, 41, 48, 27, 177, 3, 104, 152, 104, 204,
-        243, 113, 243, 35, 104, 97, 105, 152, 104, 204, 243, 228, 243, 0, 35,
-        99, 97, 160, 105, 8, 177, 187, 247, 107, 253, 32, 107, 8, 177, 187,
-        247, 103, 253, 224, 105, 24, 177, 187, 247, 99, 253, 0, 35, 227, 97,
-        35, 104, 5, 73, 24, 104, 34, 70, 254, 247, 148, 249, 32, 70, 189, 232,
-        16, 64, 187, 247, 86, 189, 16, 189, 186, 103, 136, 0, 128, 248, 40,
-        16, 112, 71, 0, 0, 112, 181, 6, 70, 134, 176, 56, 32, 187, 247, 70,
-        253, 4, 70, 0, 40, 0, 240, 148, 128, 0, 33, 56, 34, 182, 243, 216, 246,
-        64, 35, 38, 96, 132, 248, 42, 48, 80, 32, 187, 247, 55, 253, 160, 97,
-        0, 40, 121, 208, 0, 33, 80, 34, 182, 243, 202, 246, 1, 35, 132, 248,
-        32, 48, 132, 248, 33, 48, 132, 248, 34, 48, 132, 248, 35, 48, 132, 248,
-        36, 48, 132, 248, 37, 48, 132, 248, 38, 48, 132, 248, 39, 48, 35, 114,
-        16, 35, 99, 114, 148, 248, 42, 48, 15, 43, 152, 191, 99, 114, 51, 106,
-        0, 37, 24, 105, 220, 247, 38, 251, 79, 244, 122, 115, 227, 129, 200,
-        35, 35, 130, 0, 240, 16, 0, 1, 35, 0, 40, 12, 191, 5, 32, 7, 32, 132,
-        248, 40, 48, 3, 35, 32, 115, 227, 114, 32, 70, 165, 114, 233, 243, 97,
-        240, 4, 33, 48, 70, 40, 74, 40, 75, 0, 149, 1, 148, 1, 240, 195, 250,
-        168, 66, 96, 99, 55, 219, 4, 33, 48, 70, 36, 74, 37, 75, 0, 149, 1,
-        148, 4, 240, 78, 250, 168, 66, 96, 96, 44, 219, 176, 104, 33, 73, 34,
-        70, 43, 70, 204, 243, 101, 243, 96, 97, 32, 179, 79, 244, 186, 112,
-        187, 247, 219, 252, 224, 97, 240, 177, 41, 70, 79, 244, 186, 114, 182,
-        243, 110, 246, 25, 75, 48, 104, 0, 147, 25, 75, 25, 73, 1, 147, 25,
-        75, 26, 74, 3, 147, 35, 70, 2, 149, 4, 149, 5, 149, 190, 247, 132, 252,
-        5, 70, 64, 185, 51, 104, 32, 70, 147, 248, 67, 16, 232, 243, 211, 247,
-        132, 248, 41, 80, 11, 224, 160, 105, 8, 177, 187, 247, 185, 252, 32,
-        107, 8, 177, 187, 247, 181, 252, 32, 70, 187, 247, 178, 252, 0, 36,
-        32, 70, 6, 176, 112, 189, 0, 191, 141, 85, 131, 0, 117, 85, 131, 0,
-        233, 85, 131, 0, 201, 85, 131, 0, 13, 185, 1, 0, 101, 86, 131, 0, 177,
-        92, 131, 0, 208, 195, 135, 0, 177, 87, 131, 0, 186, 103, 136, 0, 0,
-        32, 112, 71, 0, 35, 3, 116, 64, 246, 251, 99, 195, 129, 112, 71, 16,
-        181, 4, 70, 144, 177, 206, 247, 231, 254, 96, 104, 8, 73, 34, 70, 254,
-        247, 192, 248, 224, 110, 8, 177, 187, 247, 131, 252, 32, 110, 187, 247,
-        128, 252, 32, 70, 189, 232, 16, 64, 187, 247, 123, 188, 16, 189, 0,
-        191, 135, 106, 136, 0, 48, 181, 5, 70, 135, 176, 112, 32, 187, 247,
-        110, 252, 4, 70, 0, 40, 61, 208, 0, 33, 112, 34, 182, 243, 1, 246, 43,
-        104, 37, 96, 99, 96, 24, 32, 187, 247, 97, 252, 32, 102, 0, 40, 44,
-        208, 0, 33, 24, 34, 182, 243, 244, 245, 100, 32, 187, 247, 87, 252,
-        224, 102, 24, 179, 0, 33, 100, 34, 182, 243, 235, 245, 19, 75, 19, 73,
-        0, 147, 0, 35, 1, 147, 18, 75, 19, 74, 2, 147, 19, 75, 3, 147, 19, 75,
-        4, 147, 19, 75, 5, 147, 96, 104, 35, 70, 190, 247, 254, 251, 96, 185,
-        1, 35, 99, 130, 163, 130, 32, 70, 41, 70, 255, 247, 161, 255, 0, 40,
-        3, 219, 32, 70, 255, 247, 158, 255, 3, 224, 32, 70, 255, 247, 160, 255,
-        0, 36, 32, 70, 7, 176, 48, 189, 213, 100, 131, 0, 36, 196, 135, 0, 25,
-        104, 131, 0, 135, 106, 136, 0, 157, 188, 1, 0, 28, 223, 3, 0, 179, 188,
-        1, 0, 112, 181, 4, 70, 232, 177, 5, 106, 70, 106, 40, 70, 0, 240, 30,
-        249, 225, 108, 65, 177, 168, 104, 204, 243, 13, 242, 168, 104, 225,
-        108, 204, 243, 129, 242, 0, 35, 227, 100, 34, 70, 48, 70, 6, 73, 254,
-        247, 64, 248, 40, 104, 33, 70, 254, 247, 198, 248, 32, 70, 189, 232,
-        112, 64, 187, 247, 254, 187, 112, 189, 145, 83, 136, 0, 45, 233, 240,
-        65, 60, 35, 192, 248, 244, 52, 10, 39, 5, 35, 208, 248, 0, 128, 192,
-        248, 248, 52, 192, 248, 0, 117, 134, 176, 4, 70, 172, 32, 187, 247,
-        230, 251, 5, 70, 0, 40, 0, 240, 181, 128, 0, 33, 172, 34, 0, 38, 182,
-        243, 119, 245, 46, 112, 44, 98, 197, 248, 36, 128, 40, 70, 236, 243,
-        172, 241, 4, 33, 40, 99, 87, 74, 32, 70, 51, 70, 0, 150, 1, 149, 1,
-        240, 155, 249, 176, 66, 40, 103, 192, 242, 156, 128, 32, 70, 0, 240,
-        234, 248, 6, 70, 0, 40, 64, 240, 149, 128, 160, 104, 79, 73, 42, 70,
-        51, 70, 204, 243, 64, 242, 232, 100, 0, 40, 0, 240, 139, 128, 75, 75,
-        64, 70, 0, 147, 75, 75, 75, 73, 1, 147, 75, 75, 76, 74, 2, 147, 76,
-        75, 3, 150, 4, 147, 75, 75, 5, 147, 43, 70, 190, 247, 102, 251, 3, 70,
-        0, 40, 118, 209, 0, 144, 41, 70, 32, 104, 71, 74, 190, 247, 176, 251,
-        6, 70, 0, 40, 109, 209, 141, 232, 33, 0, 108, 33, 32, 70, 50, 70, 66,
-        75, 4, 240, 247, 248, 0, 40, 168, 103, 98, 219, 212, 248, 120, 4, 49,
-        70, 1, 34, 62, 75, 2, 240, 23, 253, 0, 40, 89, 209, 61, 75, 212, 248,
-        124, 6, 141, 232, 24, 0, 57, 70, 1, 34, 58, 75, 1, 240, 103, 255, 0,
-        40, 77, 209, 57, 75, 212, 248, 124, 6, 141, 232, 24, 0, 57, 70, 50,
-        34, 54, 75, 1, 240, 91, 255, 0, 40, 65, 209, 212, 248, 124, 6, 5, 33,
-        0, 34, 51, 75, 0, 148, 2, 240, 65, 249, 0, 40, 55, 209, 212, 248, 124,
-        6, 5, 33, 1, 34, 47, 75, 0, 148, 2, 240, 55, 249, 112, 187, 212, 248,
-        124, 6, 5, 33, 50, 34, 43, 75, 0, 148, 2, 240, 46, 249, 40, 187, 212,
-        248, 124, 6, 5, 33, 164, 34, 40, 75, 0, 148, 2, 240, 171, 249, 224,
-        185, 212, 248, 124, 6, 192, 33, 45, 34, 36, 75, 0, 148, 2, 240, 28,
-        249, 152, 185, 212, 248, 124, 6, 144, 33, 45, 34, 33, 75, 0, 148, 1,
-        240, 207, 255, 80, 185, 216, 248, 220, 0, 30, 73, 185, 247, 193, 250,
-        79, 244, 122, 115, 144, 251, 243, 243, 43, 130, 3, 224, 40, 70, 255,
-        247, 14, 255, 0, 37, 40, 70, 6, 176, 189, 232, 240, 129, 0, 191, 237,
-        112, 131, 0, 193, 139, 131, 0, 245, 112, 131, 0, 221, 199, 1, 0, 240,
-        196, 135, 0, 149, 134, 131, 0, 145, 83, 136, 0, 76, 223, 3, 0, 229,
-        196, 1, 0, 229, 120, 131, 0, 117, 193, 1, 0, 1, 122, 131, 0, 149, 136,
-        131, 0, 177, 134, 131, 0, 121, 136, 131, 0, 161, 134, 131, 0, 157, 135,
-        131, 0, 213, 135, 131, 0, 97, 135, 131, 0, 25, 136, 131, 0, 45, 138,
-        131, 0, 181, 201, 1, 0, 238, 102, 136, 0, 56, 181, 208, 248, 4, 85,
-        4, 70, 117, 177, 8, 73, 2, 70, 29, 240, 113, 222, 7, 73, 34, 70, 32,
-        104, 253, 247, 36, 255, 40, 70, 187, 247, 232, 250, 0, 35, 196, 248,
-        4, 53, 56, 189, 0, 191, 129, 209, 1, 0, 158, 223, 3, 0, 240, 181, 4,
-        70, 135, 176, 79, 244, 10, 96, 187, 247, 213, 250, 5, 70, 32, 185, 196,
-        248, 4, 5, 79, 240, 255, 48, 13, 225, 0, 33, 79, 244, 10, 98, 182, 243,
-        99, 244, 5, 241, 32, 3, 43, 96, 5, 35, 43, 97, 79, 244, 250, 115, 107,
-        97, 35, 104, 0, 38, 218, 105, 248, 33, 18, 105, 32, 70, 2, 235, 130,
-        2, 2, 245, 250, 114, 218, 101, 123, 74, 124, 75, 0, 150, 1, 148, 4,
-        240, 20, 248, 176, 66, 168, 97, 5, 218, 32, 70, 255, 247, 180, 255,
-        111, 240, 1, 0, 230, 224, 118, 75, 0, 34, 67, 248, 4, 43, 242, 7, 31,
-        213, 116, 73, 1, 39, 10, 120, 13, 42, 7, 250, 2, 254, 3, 220, 210, 25,
-        23, 250, 2, 240, 1, 224, 79, 244, 0, 64, 202, 120, 1, 33, 17, 250, 2,
-        247, 13, 42, 71, 234, 14, 7, 71, 234, 0, 0, 3, 220, 82, 24, 17, 250,
-        2, 242, 1, 224, 79, 244, 0, 66, 2, 67, 67, 248, 4, 44, 176, 7, 35, 213,
-        99, 73, 1, 39, 74, 120, 83, 248, 4, 236, 13, 42, 7, 250, 2, 252, 3,
-        220, 210, 25, 23, 250, 2, 240, 1, 224, 79, 244, 0, 64, 138, 120, 1,
-        33, 17, 250, 2, 247, 13, 42, 71, 234, 12, 7, 71, 234, 0, 0, 3, 220,
-        82, 24, 17, 250, 2, 242, 1, 224, 79, 244, 0, 66, 2, 67, 66, 234, 14,
-        2, 67, 248, 4, 44, 113, 7, 35, 213, 80, 73, 1, 39, 10, 121, 83, 248,
-        4, 236, 13, 42, 7, 250, 2, 252, 3, 220, 210, 25, 23, 250, 2, 240, 1,
-        224, 79, 244, 0, 64, 74, 121, 1, 33, 17, 250, 2, 247, 13, 42, 71, 234,
-        12, 7, 71, 234, 0, 0, 3, 220, 82, 24, 17, 250, 2, 242, 1, 224, 79, 244,
-        0, 66, 2, 67, 66, 234, 14, 2, 67, 248, 4, 44, 50, 7, 35, 213, 61, 73,
-        1, 39, 138, 121, 83, 248, 4, 236, 13, 42, 7, 250, 2, 252, 3, 220, 210,
-        25, 23, 250, 2, 240, 1, 224, 79, 244, 0, 64, 202, 121, 1, 33, 17, 250,
-        2, 247, 13, 42, 71, 234, 12, 7, 71, 234, 0, 0, 3, 220, 82, 24, 17, 250,
-        2, 242, 1, 224, 79, 244, 0, 66, 2, 67, 66, 234, 14, 2, 67, 248, 4, 44,
-        1, 54, 16, 46, 127, 244, 101, 175, 42, 75, 0, 33, 3, 147, 32, 104, 41,
-        74, 35, 70, 0, 145, 1, 145, 2, 145, 4, 145, 5, 145, 190, 247, 189, 249,
-        112, 187, 1, 33, 212, 248, 120, 4, 10, 70, 35, 75, 2, 240, 132, 251,
-        72, 187, 212, 248, 120, 4, 1, 33, 2, 34, 32, 75, 2, 240, 124, 251, 32,
-        187, 31, 75, 212, 248, 124, 6, 141, 232, 24, 0, 128, 33, 5, 34, 28,
-        75, 1, 240, 75, 253, 224, 185, 27, 75, 26, 29, 7, 202, 141, 232, 7,
-        0, 32, 70, 3, 33, 34, 70, 27, 104, 253, 247, 38, 255, 32, 70, 22, 73,
-        34, 70, 29, 240, 80, 221, 112, 185, 196, 248, 4, 85, 13, 224, 111, 240,
-        3, 0, 10, 224, 111, 240, 4, 0, 7, 224, 111, 240, 5, 0, 4, 224, 111,
-        240, 6, 0, 1, 224, 111, 240, 8, 0, 7, 176, 240, 189, 217, 170, 131,
-        0, 61, 170, 131, 0, 160, 49, 4, 0, 72, 194, 135, 0, 245, 163, 131, 0,
-        158, 223, 3, 0, 89, 162, 131, 0, 33, 168, 131, 0, 237, 171, 131, 0,
-        229, 163, 131, 0, 80, 51, 5, 0, 129, 209, 1, 0, 112, 181, 30, 70, 139,
-        137, 21, 70, 66, 242, 86, 2, 147, 66, 12, 70, 8, 216, 66, 242, 85, 2,
-        147, 66, 45, 210, 66, 242, 80, 2, 147, 66, 41, 209, 8, 224, 66, 242,
-        96, 2, 147, 66, 26, 208, 78, 242, 245, 66, 147, 66, 32, 209, 26, 224,
-        203, 137, 1, 43, 4, 209, 111, 240, 59, 3, 43, 96, 15, 35, 3, 224, 111,
-        240, 69, 3, 43, 96, 20, 35, 51, 96, 3, 104, 211, 248, 128, 48, 217,
-        4, 18, 213, 43, 104, 2, 59, 43, 96, 14, 224, 111, 240, 74, 3, 43, 96,
-        15, 35, 8, 224, 111, 240, 149, 3, 43, 96, 150, 35, 3, 224, 111, 240,
-        74, 3, 43, 96, 20, 35, 51, 96, 212, 248, 16, 1, 48, 179, 0, 33, 64,
-        34, 182, 243, 249, 242, 212, 248, 16, 33, 128, 35, 19, 112, 212, 248,
-        16, 33, 41, 104, 81, 112, 212, 248, 16, 33, 147, 112, 212, 248, 16,
-        49, 50, 104, 218, 112, 212, 248, 16, 49, 191, 34, 26, 113, 212, 248,
-        16, 49, 0, 34, 90, 113, 212, 248, 16, 49, 3, 34, 218, 128, 70, 34, 26,
-        129, 10, 34, 90, 129, 1, 34, 154, 129, 10, 34, 218, 129, 112, 189, 1,
-        32, 112, 71, 0, 0, 1, 41, 112, 181, 14, 70, 20, 70, 7, 209, 23, 75,
-        3, 33, 16, 70, 211, 248, 184, 48, 10, 70, 152, 71, 112, 189, 25, 187,
-        18, 75, 211, 248, 192, 80, 255, 247, 234, 255, 49, 70, 2, 70, 32, 70,
-        168, 71, 32, 70, 1, 33, 50, 70, 168, 71, 32, 70, 2, 33, 50, 70, 168,
-        71, 32, 70, 3, 33, 1, 34, 168, 71, 32, 70, 79, 244, 129, 113, 1, 34,
-        168, 71, 32, 70, 79, 244, 128, 113, 50, 70, 168, 71, 32, 70, 64, 242,
-        1, 17, 50, 70, 168, 71, 112, 189, 0, 191, 208, 134, 135, 0, 128, 108,
-        32, 56, 31, 40, 5, 216, 128, 35, 51, 250, 0, 240, 0, 240, 1, 0, 112,
-        71, 0, 32, 112, 71, 193, 111, 176, 248, 78, 48, 16, 181, 138, 106, 179,
-        177, 255, 43, 22, 217, 24, 11, 1, 56, 1, 40, 20, 216, 3, 244, 112, 96,
-        0, 10, 9, 40, 15, 216, 120, 177, 3, 240, 240, 0, 144, 40, 10, 216, 3,
-        240, 15, 0, 9, 40, 140, 191, 0, 32, 1, 32, 4, 224, 24, 70, 2, 224, 1,
-        32, 0, 224, 0, 32, 12, 107, 65, 242, 228, 65, 140, 66, 21, 209, 162,
-        245, 130, 97, 7, 57, 1, 41, 3, 216, 63, 43, 152, 191, 0, 32, 16, 189,
-        64, 242, 12, 65, 138, 66, 7, 208, 64, 242, 33, 65, 138, 66, 4, 209,
-        80, 43, 152, 191, 0, 32, 16, 189, 0, 32, 16, 189, 144, 248, 118, 48,
-        16, 181, 4, 70, 59, 185, 4, 75, 4, 73, 26, 104, 247, 243, 72, 241, 1,
-        35, 132, 248, 118, 48, 16, 189, 60, 77, 5, 0, 64, 77, 5, 0, 112, 181,
-        12, 70, 5, 70, 22, 70, 8, 70, 10, 34, 0, 33, 182, 243, 55, 242, 99,
-        136, 30, 67, 43, 109, 102, 128, 152, 6, 3, 213, 35, 136, 67, 244, 128,
-        99, 35, 128, 213, 248, 148, 48, 66, 242, 80, 2, 25, 140, 145, 66, 5,
-        209, 91, 140, 5, 43, 156, 191, 70, 240, 4, 6, 102, 128, 112, 189, 0,
-        0, 208, 248, 128, 0, 1, 73, 185, 247, 11, 184, 0, 191, 247, 51, 5, 0,
-        16, 181, 4, 70, 12, 32, 187, 247, 119, 248, 196, 248, 12, 1, 56, 177,
-        12, 34, 0, 33, 182, 243, 10, 242, 212, 248, 12, 49, 16, 34, 154, 114,
-        16, 189, 16, 181, 4, 70, 208, 248, 12, 1, 32, 177, 187, 247, 103, 248,
-        0, 35, 196, 248, 12, 49, 16, 189, 112, 181, 6, 70, 5, 70, 0, 36, 104,
-        105, 56, 177, 6, 75, 27, 104, 152, 71, 48, 70, 33, 70, 0, 34, 6, 240,
-        172, 220, 1, 52, 4, 53, 6, 44, 241, 209, 112, 189, 0, 191, 208, 134,
-        135, 0, 45, 233, 240, 67, 4, 105, 133, 176, 5, 70, 14, 32, 166, 111,
-        187, 247, 65, 248, 112, 98, 0, 40, 108, 208, 0, 38, 55, 70, 15, 33,
-        104, 70, 54, 74, 51, 70, 182, 243, 54, 242, 212, 248, 128, 0, 105, 70,
-        184, 247, 189, 255, 8, 177, 1, 55, 191, 178, 1, 54, 182, 245, 124, 127,
-        237, 209, 55, 185, 212, 248, 128, 0, 46, 73, 184, 247, 176, 255, 0,
-        40, 66, 208, 184, 0, 6, 48, 187, 247, 30, 248, 197, 248, 68, 6, 0, 40,
-        72, 208, 0, 35, 131, 128, 0, 38, 15, 33, 104, 70, 36, 74, 51, 70, 182,
-        243, 17, 242, 212, 248, 128, 0, 105, 70, 184, 247, 152, 255, 152, 177,
-        213, 248, 68, 134, 105, 70, 212, 248, 128, 0, 184, 248, 4, 144, 184,
-        247, 144, 255, 8, 235, 137, 3, 24, 129, 213, 248, 68, 54, 154, 136,
-        3, 235, 130, 1, 1, 50, 206, 128, 154, 128, 1, 54, 182, 245, 124, 127,
-        219, 209, 212, 248, 128, 0, 19, 73, 184, 247, 122, 255, 213, 248, 68,
-        102, 80, 177, 212, 248, 128, 0, 15, 73, 184, 247, 116, 255, 213, 248,
-        68, 54, 1, 34, 112, 128, 26, 112, 0, 224, 48, 112, 163, 111, 88, 106,
-        96, 177, 1, 35, 3, 128, 131, 128, 195, 128, 3, 129, 2, 35, 67, 129,
-        4, 35, 131, 129, 0, 32, 1, 224, 111, 240, 26, 0, 5, 176, 189, 232, 240,
-        131, 191, 51, 5, 0, 204, 51, 5, 0, 45, 233, 240, 79, 5, 104, 198, 104,
-        43, 104, 143, 176, 223, 105, 0, 35, 4, 70, 0, 147, 136, 70, 11, 168,
-        9, 33, 164, 74, 51, 70, 182, 243, 183, 241, 212, 248, 20, 144, 185,
-        241, 0, 15, 64, 240, 49, 129, 121, 104, 224, 111, 9, 145, 212, 248,
-        136, 16, 212, 248, 8, 160, 1, 245, 0, 113, 215, 248, 0, 176, 251, 247,
-        82, 249, 1, 70, 168, 104, 252, 247, 236, 255, 0, 40, 0, 240, 38, 129,
-        9, 33, 148, 74, 11, 168, 51, 70, 205, 248, 0, 144, 182, 243, 149, 241,
-        226, 111, 212, 248, 136, 16, 184, 241, 0, 15, 2, 208, 1, 245, 0, 115,
-        0, 224, 67, 70, 1, 245, 8, 113, 0, 145, 9, 153, 184, 241, 0, 15, 20,
-        191, 88, 70, 0, 32, 1, 144, 2, 145, 185, 104, 79, 240, 255, 57, 3, 145,
-        205, 248, 16, 144, 249, 104, 223, 248, 28, 130, 5, 145, 213, 248, 200,
-        21, 80, 70, 6, 145, 11, 169, 205, 248, 28, 128, 250, 247, 139, 255,
-        5, 70, 0, 40, 0, 240, 242, 128, 42, 70, 123, 75, 32, 70, 0, 33, 255,
-        247, 43, 254, 42, 70, 32, 70, 0, 33, 6, 240, 184, 219, 1, 35, 0, 37,
-        0, 147, 9, 33, 115, 74, 51, 70, 11, 168, 182, 243, 85, 241, 0, 149,
-        58, 104, 212, 248, 136, 48, 1, 146, 80, 70, 11, 169, 226, 111, 3, 245,
-        16, 115, 2, 149, 3, 149, 205, 248, 16, 144, 5, 149, 6, 149, 205, 248,
-        28, 128, 250, 247, 95, 255, 7, 70, 0, 40, 0, 240, 199, 128, 58, 70,
-        101, 75, 32, 70, 41, 70, 255, 247, 255, 253, 58, 70, 32, 70, 1, 33,
-        6, 240, 140, 219, 2, 33, 0, 145, 94, 74, 9, 33, 51, 70, 11, 168, 182,
-        243, 42, 241, 212, 248, 136, 48, 80, 70, 11, 169, 226, 111, 3, 245,
-        32, 115, 141, 232, 32, 8, 2, 149, 3, 149, 205, 248, 16, 144, 5, 149,
-        6, 149, 205, 248, 28, 128, 250, 247, 53, 255, 7, 70, 0, 40, 0, 240,
-        157, 128, 58, 70, 80, 75, 32, 70, 41, 70, 255, 247, 213, 253, 58, 70,
-        32, 70, 2, 33, 6, 240, 98, 219, 3, 35, 0, 147, 9, 33, 73, 74, 51, 70,
-        11, 168, 182, 243, 0, 241, 212, 248, 136, 48, 80, 70, 11, 169, 226,
-        111, 3, 245, 48, 115, 141, 232, 32, 8, 2, 149, 3, 149, 205, 248, 16,
-        144, 5, 149, 6, 149, 205, 248, 28, 128, 250, 247, 11, 255, 7, 70, 0,
-        40, 115, 208, 58, 70, 60, 75, 32, 70, 41, 70, 255, 247, 172, 253, 58,
-        70, 32, 70, 3, 33, 6, 240, 57, 219, 4, 33, 0, 145, 53, 74, 9, 33, 51,
-        70, 11, 168, 182, 243, 215, 240, 212, 248, 136, 48, 80, 70, 11, 169,
-        226, 111, 3, 245, 64, 115, 141, 232, 32, 8, 2, 149, 3, 149, 205, 248,
-        16, 144, 5, 149, 6, 149, 205, 248, 28, 128, 250, 247, 226, 254, 7, 70,
-        0, 40, 74, 208, 58, 70, 39, 75, 32, 70, 41, 70, 255, 247, 131, 253,
-        58, 70, 32, 70, 4, 33, 6, 240, 16, 219, 5, 39, 51, 70, 9, 33, 32, 74,
-        11, 168, 0, 151, 182, 243, 174, 240, 212, 248, 136, 48, 80, 70, 11,
-        169, 226, 111, 3, 245, 80, 115, 141, 232, 32, 8, 2, 149, 3, 149, 205,
-        248, 16, 144, 5, 149, 6, 149, 205, 248, 28, 128, 250, 247, 185, 254,
-        6, 70, 8, 179, 50, 70, 32, 70, 41, 70, 18, 75, 255, 247, 91, 253, 50,
-        70, 32, 70, 57, 70, 6, 240, 232, 218, 38, 70, 112, 105, 48, 177, 14,
-        75, 14, 73, 211, 248, 140, 48, 152, 71, 198, 248, 192, 0, 1, 53, 4,
-        54, 6, 45, 242, 209, 212, 248, 148, 16, 32, 70, 8, 49, 0, 34, 255, 247,
-        211, 253, 1, 39, 0, 224, 7, 70, 56, 70, 15, 176, 189, 232, 240, 143,
-        118, 51, 5, 0, 192, 17, 4, 0, 208, 134, 135, 0, 187, 25, 136, 0, 8,
-        7, 0, 0, 16, 181, 189, 232, 16, 64, 252, 247, 139, 188, 17, 177, 8,
-        70, 252, 247, 69, 186, 112, 71, 248, 181, 4, 105, 5, 70, 0, 44, 58,
-        208, 224, 111, 8, 177, 252, 247, 113, 250, 32, 70, 255, 247, 242, 253,
-        212, 248, 148, 96, 180, 248, 70, 0, 194, 247, 164, 253, 112, 106, 40,
-        177, 2, 240, 83, 250, 0, 35, 7, 70, 115, 98, 0, 224, 7, 70, 212, 248,
-        144, 0, 2, 240, 41, 250, 0, 38, 63, 24, 212, 248, 140, 0, 2, 240, 105,
-        255, 32, 70, 196, 248, 128, 96, 230, 103, 255, 247, 200, 253, 213, 248,
-        68, 6, 24, 177, 186, 247, 49, 254, 197, 248, 68, 102, 163, 111, 88,
-        106, 32, 177, 186, 247, 42, 254, 163, 111, 0, 34, 90, 98, 32, 70, 1,
-        240, 7, 249, 0, 35, 43, 97, 0, 224, 39, 70, 56, 70, 248, 189, 0, 0,
-        240, 181, 135, 176, 79, 244, 128, 53, 0, 33, 4, 35, 3, 170, 4, 70, 208,
-        248, 136, 112, 0, 149, 247, 243, 9, 243, 35, 75, 6, 174, 70, 248, 8,
-        61, 0, 33, 4, 35, 32, 70, 50, 70, 0, 149, 247, 243, 74, 243, 4, 35,
-        0, 33, 5, 170, 32, 70, 0, 149, 247, 243, 247, 242, 4, 155, 5, 154, 154,
-        66, 42, 209, 25, 75, 0, 33, 4, 147, 32, 70, 4, 35, 50, 70, 0, 149, 247,
-        243, 54, 243, 4, 35, 0, 33, 5, 170, 32, 70, 0, 149, 247, 243, 227, 242,
-        4, 155, 5, 154, 154, 66, 22, 209, 4, 35, 0, 33, 32, 70, 3, 170, 0, 149,
-        247, 243, 36, 243, 0, 35, 199, 248, 140, 49, 215, 248, 32, 49, 179,
-        241, 4, 47, 9, 208, 8, 72, 192, 235, 3, 12, 220, 241, 0, 0, 64, 235,
-        12, 0, 2, 224, 0, 32, 0, 224, 1, 32, 7, 176, 240, 189, 0, 191, 170,
-        85, 85, 170, 85, 170, 170, 85, 0, 4, 0, 132, 30, 75, 112, 181, 79, 240,
-        0, 97, 0, 38, 3, 102, 10, 70, 70, 102, 4, 70, 5, 104, 248, 243, 252,
-        241, 79, 240, 128, 115, 196, 248, 32, 49, 3, 35, 164, 248, 168, 48,
-        2, 35, 164, 248, 170, 48, 7, 35, 164, 248, 164, 48, 4, 35, 164, 248,
-        166, 48, 65, 242, 1, 3, 132, 248, 162, 96, 164, 248, 188, 48, 79, 244,
-        22, 115, 165, 248, 248, 53, 43, 104, 12, 72, 147, 248, 156, 32, 11,
-        73, 1, 42, 12, 191, 12, 34, 6, 34, 165, 248, 246, 37, 147, 248, 156,
-        32, 18, 241, 255, 50, 24, 191, 1, 34, 181, 243, 71, 247, 255, 35, 132,
-        248, 52, 49, 112, 189, 0, 191, 96, 168, 231, 184, 180, 223, 3, 0, 106,
-        29, 5, 0, 45, 233, 240, 79, 151, 176, 155, 70, 79, 240, 0, 9, 22, 171,
-        138, 70, 23, 70, 67, 248, 4, 157, 33, 153, 90, 70, 5, 70, 1, 240, 107,
-        248, 4, 70, 0, 40, 0, 240, 157, 130, 157, 248, 128, 48, 40, 97, 3, 116,
-        43, 104, 64, 246, 18, 1, 211, 248, 216, 0, 211, 248, 220, 96, 211, 248,
-        224, 48, 74, 70, 196, 248, 132, 48, 224, 103, 196, 248, 128, 96, 192,
-        243, 203, 247, 196, 248, 136, 0, 128, 70, 232, 96, 224, 111, 192, 243,
-        140, 244, 160, 100, 32, 70, 255, 247, 136, 255, 48, 70, 161, 73, 184,
-        247, 208, 252, 40, 177, 73, 70, 74, 70, 184, 247, 81, 252, 31, 250,
-        128, 250, 48, 70, 156, 73, 184, 247, 197, 252, 72, 177, 0, 33, 10, 70,
-        184, 247, 70, 252, 79, 246, 255, 115, 128, 178, 152, 66, 24, 191, 7,
-        70, 80, 70, 57, 70, 253, 247, 10, 250, 8, 185, 12, 35, 90, 226, 147,
-        73, 164, 248, 68, 160, 164, 248, 70, 112, 48, 70, 184, 247, 173, 252,
-        144, 73, 196, 248, 92, 1, 48, 70, 184, 247, 167, 252, 196, 248, 96,
-        1, 180, 248, 70, 0, 194, 247, 107, 252, 0, 48, 24, 191, 1, 32, 38, 48,
-        84, 248, 32, 48, 180, 248, 70, 0, 196, 248, 148, 48, 194, 247, 95, 252,
-        0, 48, 24, 191, 1, 32, 10, 48, 85, 248, 32, 48, 32, 70, 43, 98, 255,
-        247, 251, 251, 8, 185, 13, 35, 45, 226, 224, 111, 192, 243, 241, 243,
-        224, 111, 192, 243, 130, 246, 32, 70, 0, 33, 246, 243, 120, 243, 32,
-        70, 79, 240, 255, 49, 247, 243, 215, 242, 32, 70, 255, 247, 206, 254,
-        8, 185, 14, 35, 24, 226, 48, 70, 115, 73, 184, 247, 111, 252, 255, 40,
-        8, 191, 1, 32, 164, 248, 78, 0, 32, 70, 255, 247, 227, 251, 8, 185,
-        15, 35, 9, 226, 109, 73, 48, 70, 184, 247, 96, 252, 108, 73, 132, 248,
-        76, 0, 48, 70, 184, 247, 90, 252, 106, 73, 32, 101, 48, 70, 184, 247,
-        85, 252, 148, 248, 76, 48, 96, 101, 11, 43, 5, 217, 48, 70, 102, 73,
-        184, 247, 76, 252, 196, 248, 80, 1, 100, 73, 48, 70, 184, 247, 70, 252,
-        99, 73, 132, 248, 53, 1, 48, 70, 184, 247, 64, 252, 97, 73, 132, 248,
-        54, 1, 48, 70, 184, 247, 58, 252, 227, 111, 132, 248, 88, 1, 25, 107,
-        65, 242, 107, 2, 145, 66, 32, 209, 155, 106, 78, 43, 8, 209, 180, 248,
-        78, 48, 64, 43, 25, 217, 35, 109, 67, 240, 2, 3, 35, 101, 20, 224, 228,
-        43, 4, 209, 180, 248, 78, 48, 179, 245, 168, 95, 6, 224, 239, 43, 11,
-        209, 180, 248, 78, 32, 65, 242, 1, 35, 154, 66, 5, 216, 35, 109, 67,
-        244, 128, 3, 35, 101, 0, 35, 99, 101, 48, 70, 74, 73, 167, 111, 184,
-        247, 12, 252, 56, 118, 163, 111, 26, 126, 1, 42, 1, 208, 3, 34, 26,
-        118, 35, 109, 152, 6, 4, 213, 1, 33, 32, 70, 10, 70, 247, 243, 111,
-        245, 180, 248, 70, 32, 1, 35, 196, 248, 184, 48, 180, 248, 68, 0, 43,
-        104, 165, 248, 174, 33, 226, 111, 165, 248, 172, 1, 195, 248, 216, 32,
-        162, 108, 26, 97, 148, 248, 76, 32, 131, 248, 124, 32, 43, 104, 34,
-        109, 180, 248, 78, 0, 195, 248, 128, 32, 98, 109, 163, 248, 122, 0,
-        195, 248, 132, 32, 148, 248, 76, 32, 32, 70, 11, 42, 132, 191, 212,
-        248, 80, 33, 195, 248, 76, 33, 212, 248, 184, 32, 1, 39, 131, 248, 62,
-        112, 90, 98, 169, 104, 42, 70, 2, 240, 90, 253, 196, 248, 140, 0, 8,
-        185, 25, 35, 106, 225, 33, 154, 227, 111, 2, 146, 162, 108, 4, 144,
-        6, 146, 180, 248, 70, 32, 180, 248, 68, 0, 173, 248, 42, 32, 218, 107,
-        3, 147, 11, 146, 26, 108, 173, 248, 40, 0, 12, 146, 90, 108, 2, 168,
-        13, 146, 148, 248, 76, 32, 205, 248, 20, 176, 14, 146, 154, 106, 9,
-        150, 15, 146, 180, 248, 78, 32, 16, 146, 26, 107, 17, 146, 34, 109,
-        18, 146, 98, 109, 19, 146, 90, 104, 219, 104, 7, 146, 8, 147, 2, 240,
-        64, 249, 196, 248, 144, 0, 224, 185, 16, 35, 56, 225, 0, 191, 157, 51,
-        5, 0, 255, 51, 5, 0, 169, 51, 5, 0, 180, 51, 5, 0, 238, 51, 5, 0, 149,
-        51, 5, 0, 138, 51, 5, 0, 214, 51, 5, 0, 226, 51, 5, 0, 96, 51, 5, 0,
-        5, 52, 5, 0, 107, 51, 5, 0, 164, 51, 5, 0, 38, 35, 197, 248, 200, 53,
-        197, 248, 204, 53, 79, 244, 255, 115, 196, 248, 56, 49, 180, 248, 70,
-        0, 194, 247, 53, 251, 16, 241, 0, 9, 24, 191, 79, 240, 1, 9, 73, 70,
-        32, 70, 248, 243, 34, 245, 185, 241, 0, 15, 212, 248, 148, 48, 12, 191,
-        2, 34, 1, 34, 195, 248, 4, 144, 26, 96, 43, 106, 20, 191, 1, 34, 2,
-        34, 195, 248, 4, 144, 26, 96, 224, 111, 213, 248, 28, 144, 192, 243,
-        246, 242, 216, 248, 92, 49, 201, 248, 0, 0, 35, 240, 0, 67, 120, 74,
-        227, 102, 35, 103, 163, 108, 12, 33, 1, 251, 3, 35, 48, 59, 196, 248,
-        216, 48, 32, 70, 57, 70, 246, 243, 34, 245, 212, 248, 148, 144, 212,
-        248, 144, 0, 65, 70, 217, 248, 0, 32, 51, 70, 1, 240, 238, 255, 201,
-        248, 36, 0, 8, 185, 17, 35, 206, 224, 79, 240, 255, 49, 32, 70, 247,
-        243, 0, 247, 212, 248, 148, 48, 225, 110, 88, 106, 1, 240, 152, 255,
-        212, 248, 148, 48, 3, 241, 34, 2, 0, 146, 3, 241, 28, 1, 3, 241, 30,
-        2, 88, 106, 32, 51, 1, 240, 120, 255, 212, 248, 148, 128, 216, 248,
-        36, 0, 1, 240, 128, 255, 136, 248, 40, 0, 212, 248, 148, 48, 213, 248,
-        32, 128, 88, 106, 1, 240, 119, 255, 136, 248, 20, 0, 212, 248, 148,
-        128, 216, 248, 36, 0, 1, 240, 114, 255, 212, 248, 148, 48, 200, 248,
-        24, 0, 218, 139, 55, 250, 2, 241, 201, 7, 1, 212, 18, 35, 148, 224,
-        41, 106, 88, 106, 8, 97, 152, 139, 74, 129, 8, 129, 26, 140, 88, 140,
-        138, 129, 200, 129, 15, 34, 64, 242, 255, 48, 216, 130, 154, 130, 32,
-        70, 57, 70, 255, 247, 134, 251, 8, 185, 19, 35, 126, 224, 0, 33, 32,
-        70, 246, 243, 75, 247, 48, 70, 64, 73, 167, 111, 184, 247, 208, 250,
-        35, 109, 192, 178, 218, 7, 56, 96, 32, 213, 99, 109, 27, 6, 29, 212,
-        227, 111, 154, 105, 144, 0, 2, 213, 218, 105, 209, 7, 4, 213, 219, 105,
-        218, 7, 1, 212, 88, 7, 17, 213, 227, 110, 153, 0, 14, 213, 48, 70, 50,
-        73, 184, 247, 179, 250, 48, 177, 48, 73, 48, 70, 184, 247, 176, 250,
-        193, 178, 32, 70, 4, 224, 32, 70, 8, 33, 1, 224, 32, 70, 0, 33, 211,
-        247, 59, 253, 224, 111, 186, 247, 97, 253, 32, 70, 248, 243, 80, 243,
-        0, 148, 224, 111, 38, 73, 39, 74, 0, 35, 251, 247, 25, 255, 32, 70,
-        0, 33, 248, 243, 39, 243, 32, 70, 255, 247, 128, 250, 8, 185, 21, 35,
-        52, 224, 4, 241, 252, 6, 49, 70, 181, 243, 108, 247, 48, 70, 184, 247,
-        109, 250, 24, 185, 48, 70, 184, 247, 117, 250, 8, 177, 22, 35, 37, 224,
-        32, 70, 255, 247, 115, 250, 40, 70, 161, 108, 0, 240, 47, 254, 43, 104,
-        211, 248, 152, 0, 168, 177, 3, 120, 155, 177, 19, 73, 34, 70, 182, 243,
-        253, 243, 43, 104, 17, 73, 211, 248, 152, 0, 34, 70, 250, 247, 180,
-        249, 96, 105, 48, 177, 43, 104, 211, 248, 152, 16, 13, 75, 211, 248,
-        176, 48, 152, 71, 40, 70, 255, 247, 132, 250, 16, 177, 27, 35, 21, 147,
-        21, 152, 23, 176, 189, 232, 240, 143, 0, 191, 216, 17, 4, 0, 129, 51,
-        5, 0, 233, 73, 132, 0, 253, 73, 132, 0, 85, 2, 2, 0, 81, 2, 2, 0, 208,
-        134, 135, 0, 16, 181, 4, 70, 0, 40, 40, 208, 3, 104, 20, 73, 24, 104,
-        34, 70, 252, 247, 234, 254, 35, 106, 27, 177, 4, 241, 32, 0, 180, 243,
-        66, 246, 227, 105, 27, 177, 4, 241, 28, 0, 180, 243, 60, 246, 163, 105,
-        27, 177, 4, 241, 24, 0, 180, 243, 54, 246, 99, 105, 27, 177, 4, 241,
-        20, 0, 180, 243, 48, 246, 35, 105, 27, 177, 4, 241, 16, 0, 180, 243,
-        42, 246, 32, 70, 189, 232, 16, 64, 186, 247, 142, 186, 16, 189, 166,
-        179, 136, 0, 3, 104, 48, 181, 219, 105, 5, 70, 88, 109, 135, 176, 0,
-        1, 36, 48, 186, 243, 36, 242, 4, 70, 0, 40, 56, 208, 3, 70, 67, 248,
-        36, 91, 195, 96, 4, 241, 16, 1, 213, 248, 32, 6, 180, 243, 245, 245,
-        104, 187, 213, 248, 32, 6, 4, 241, 20, 1, 180, 243, 238, 245, 48, 187,
-        213, 248, 32, 6, 4, 241, 24, 1, 180, 243, 231, 245, 248, 185, 213, 248,
-        32, 6, 4, 241, 28, 1, 180, 243, 224, 245, 192, 185, 213, 248, 32, 6,
-        4, 241, 32, 1, 180, 243, 217, 245, 136, 185, 79, 244, 130, 99, 99, 96,
-        11, 75, 1, 144, 0, 147, 10, 75, 3, 144, 2, 147, 4, 144, 5, 144, 9, 73,
-        40, 104, 9, 74, 35, 70, 189, 247, 2, 250, 24, 177, 32, 70, 255, 247,
-        135, 255, 0, 36, 32, 70, 7, 176, 48, 189, 0, 191, 189, 41, 2, 0, 17,
-        118, 132, 0, 200, 223, 3, 0, 166, 179, 136, 0, 240, 181, 208, 248, 40,
-        65, 0, 104, 165, 104, 192, 105, 64, 109, 133, 66, 17, 210, 231, 104,
-        46, 1, 184, 25, 67, 96, 5, 155, 1, 53, 131, 96, 6, 155, 186, 81, 195,
-        96, 96, 104, 165, 96, 195, 28, 89, 24, 33, 240, 3, 1, 97, 96, 240, 189,
-        111, 240, 21, 0, 240, 189, 208, 248, 40, 49, 24, 105, 180, 243, 111,
-        181, 208, 248, 40, 1, 16, 177, 0, 105, 180, 243, 203, 181, 112, 71,
-        115, 181, 5, 70, 212, 247, 129, 248, 4, 70, 184, 177, 43, 104, 79, 240,
-        0, 82, 197, 248, 108, 2, 0, 146, 147, 248, 47, 32, 40, 70, 1, 146, 33,
-        70, 0, 34, 4, 51, 248, 243, 1, 245, 6, 70, 80, 185, 40, 70, 33, 70,
-        212, 247, 213, 250, 6, 70, 32, 185, 1, 224, 111, 240, 26, 6, 48, 70,
-        124, 189, 40, 70, 33, 70, 249, 243, 80, 243, 248, 231, 0, 0, 16, 181,
-        4, 70, 80, 177, 3, 104, 5, 73, 24, 104, 34, 70, 252, 247, 19, 254, 32,
-        70, 189, 232, 16, 64, 186, 247, 213, 185, 16, 189, 0, 191, 14, 224,
-        3, 0, 240, 181, 6, 105, 135, 176, 5, 70, 116, 32, 186, 243, 109, 241,
-        4, 70, 0, 40, 97, 208, 0, 35, 5, 96, 4, 33, 0, 147, 1, 144, 50, 74,
-        40, 70, 50, 75, 2, 240, 30, 255, 0, 40, 32, 100, 84, 219, 40, 70, 47,
-        73, 34, 70, 255, 247, 158, 255, 0, 40, 77, 209, 45, 75, 4, 144, 0, 147,
-        45, 75, 5, 144, 1, 147, 44, 75, 40, 104, 2, 147, 44, 75, 44, 73, 3,
-        147, 44, 74, 35, 70, 189, 247, 95, 249, 0, 40, 59, 209, 42, 75, 213,
-        248, 124, 6, 141, 232, 24, 0, 128, 33, 200, 34, 40, 75, 0, 240, 158,
-        253, 128, 187, 213, 248, 124, 6, 128, 33, 200, 34, 37, 75, 0, 148, 0,
-        240, 131, 255, 7, 70, 48, 187, 132, 248, 44, 0, 43, 105, 33, 73, 211,
-        248, 128, 0, 184, 247, 15, 249, 57, 70, 132, 248, 111, 0, 8, 34, 4,
-        241, 45, 0, 181, 243, 19, 243, 132, 248, 56, 112, 132, 248, 57, 112,
-        231, 134, 214, 248, 128, 0, 24, 73, 184, 247, 251, 248, 56, 177, 214,
-        248, 128, 0, 21, 73, 184, 247, 247, 248, 132, 248, 63, 0, 7, 224, 186,
-        35, 132, 248, 63, 48, 3, 224, 32, 70, 255, 247, 127, 255, 0, 36, 32,
-        70, 7, 176, 240, 189, 0, 191, 195, 43, 2, 0, 219, 43, 2, 0, 193, 43,
-        2, 0, 53, 134, 132, 0, 153, 47, 2, 0, 105, 49, 2, 0, 185, 43, 2, 0,
-        176, 198, 135, 0, 14, 224, 3, 0, 203, 43, 2, 0, 199, 43, 2, 0, 207,
-        43, 2, 0, 16, 52, 5, 0, 32, 52, 5, 0, 16, 181, 4, 70, 48, 177, 212,
-        247, 55, 254, 32, 70, 189, 232, 16, 64, 186, 247, 55, 185, 16, 189,
-        16, 181, 4, 70, 36, 32, 186, 243, 212, 240, 0, 177, 4, 96, 16, 189,
-        0, 0, 16, 181, 4, 70, 224, 177, 67, 104, 14, 73, 24, 104, 34, 70, 252,
-        247, 93, 253, 212, 248, 60, 1, 255, 247, 223, 255, 212, 248, 52, 1,
-        255, 247, 219, 255, 212, 248, 156, 0, 8, 177, 186, 247, 23, 249, 212,
-        248, 148, 0, 8, 177, 186, 247, 18, 249, 32, 70, 189, 232, 16, 64, 186,
-        247, 13, 185, 16, 189, 0, 191, 218, 29, 134, 0, 45, 233, 240, 65, 123,
-        75, 0, 39, 31, 96, 123, 75, 5, 104, 136, 176, 6, 70, 31, 96, 79, 244,
-        160, 112, 186, 247, 248, 248, 4, 70, 0, 40, 0, 240, 227, 128, 57, 70,
-        79, 244, 160, 114, 181, 243, 137, 242, 132, 232, 96, 0, 48, 70, 198,
-        248, 92, 65, 255, 247, 181, 255, 128, 70, 196, 248, 52, 1, 48, 177,
-        48, 70, 255, 247, 174, 255, 128, 70, 196, 248, 60, 1, 32, 185, 32, 70,
-        186, 247, 221, 248, 68, 70, 198, 224, 127, 33, 4, 34, 4, 241, 68, 0,
-        181, 243, 108, 242, 127, 33, 4, 34, 4, 241, 112, 0, 181, 243, 102, 242,
-        4, 34, 7, 168, 57, 70, 181, 243, 97, 242, 51, 104, 147, 248, 124, 32,
-        211, 248, 220, 0, 1, 42, 19, 217, 91, 73, 184, 247, 73, 248, 1, 70,
-        88, 177, 7, 168, 3, 34, 181, 243, 49, 243, 7, 168, 4, 33, 214, 247,
-        129, 254, 144, 177, 7, 168, 85, 73, 12, 224, 7, 168, 84, 73, 9, 224,
-        84, 73, 184, 247, 55, 248, 9, 40, 3, 70, 6, 216, 82, 73, 7, 168, 1,
-        235, 131, 1, 3, 34, 181, 243, 25, 243, 7, 168, 79, 73, 4, 34, 181, 243,
-        240, 242, 32, 185, 7, 168, 77, 73, 3, 34, 181, 243, 14, 243, 3, 34,
-        7, 169, 4, 241, 8, 0, 181, 243, 8, 243, 51, 104, 73, 73, 211, 248, 220,
-        0, 184, 247, 22, 248, 213, 248, 216, 48, 65, 242, 107, 2, 25, 107, 224,
-        96, 145, 66, 14, 209, 155, 106, 139, 43, 1, 208, 144, 43, 9, 209, 2,
-        40, 7, 209, 7, 168, 63, 73, 4, 34, 181, 243, 202, 242, 8, 185, 3, 35,
-        227, 96, 213, 248, 216, 48, 65, 242, 107, 2, 25, 107, 145, 66, 13, 209,
-        155, 106, 147, 43, 10, 209, 7, 168, 55, 73, 4, 34, 181, 243, 184, 242,
-        32, 185, 227, 104, 4, 43, 1, 209, 6, 35, 227, 96, 213, 248, 216, 48,
-        65, 242, 107, 2, 25, 107, 145, 66, 24, 209, 154, 106, 64, 242, 53, 19,
-        154, 66, 19, 209, 7, 168, 45, 73, 4, 34, 181, 243, 161, 242, 88, 177,
-        7, 168, 43, 73, 4, 34, 181, 243, 155, 242, 40, 177, 7, 168, 41, 73,
-        4, 34, 181, 243, 149, 242, 8, 185, 19, 35, 227, 96, 0, 37, 38, 72, 213,
-        247, 228, 255, 7, 169, 4, 34, 196, 248, 148, 80, 196, 248, 152, 80,
-        196, 248, 156, 80, 196, 248, 160, 80, 196, 248, 164, 80, 132, 248, 244,
-        80, 32, 70, 213, 247, 219, 249, 29, 75, 48, 104, 141, 232, 40, 0, 28,
-        75, 28, 73, 4, 147, 28, 75, 29, 74, 5, 147, 35, 70, 2, 149, 3, 149,
-        188, 247, 215, 255, 40, 177, 32, 70, 198, 248, 92, 81, 255, 247, 232,
-        254, 44, 70, 32, 70, 8, 176, 189, 232, 240, 129, 0, 191, 116, 8, 0,
-        0, 124, 8, 0, 0, 51, 52, 5, 0, 61, 224, 3, 0, 162, 153, 136, 0, 57,
-        52, 5, 0, 32, 202, 135, 0, 155, 153, 136, 0, 235, 156, 136, 0, 60, 52,
-        5, 0, 103, 212, 135, 0, 159, 153, 136, 0, 8, 202, 135, 0, 164, 217,
-        135, 0, 173, 217, 135, 0, 136, 226, 3, 0, 129, 233, 132, 0, 20, 224,
-        3, 0, 228, 201, 135, 0, 21, 52, 2, 0, 218, 29, 134, 0, 48, 181, 5, 70,
-        135, 176, 12, 32, 185, 243, 130, 247, 4, 70, 224, 177, 18, 75, 5, 96,
-        79, 244, 144, 113, 0, 147, 1, 144, 7, 34, 213, 248, 124, 6, 15, 75,
-        0, 240, 184, 251, 144, 185, 14, 75, 1, 144, 0, 147, 13, 75, 2, 144,
-        4, 147, 13, 75, 3, 144, 5, 147, 40, 104, 12, 73, 12, 74, 35, 70, 188,
-        247, 125, 255, 16, 185, 32, 70, 7, 176, 48, 189, 32, 70, 185, 247, 186,
-        255, 0, 36, 247, 231, 0, 191, 205, 1, 133, 0, 45, 255, 132, 0, 105,
-        255, 132, 0, 248, 226, 3, 0, 189, 83, 2, 0, 48, 230, 135, 0, 28, 227,
-        3, 0, 3, 104, 16, 181, 4, 70, 5, 73, 24, 104, 34, 70, 252, 247, 218,
-        251, 32, 70, 189, 232, 16, 64, 185, 247, 156, 191, 0, 191, 28, 227,
-        3, 0, 112, 181, 5, 70, 134, 176, 12, 32, 185, 243, 54, 247, 4, 70, 0,
-        40, 99, 208, 5, 96, 0, 38, 1, 144, 4, 33, 40, 70, 51, 74, 52, 75, 0,
-        150, 255, 247, 81, 253, 176, 66, 96, 96, 89, 219, 4, 33, 40, 70, 48,
-        74, 49, 75, 0, 150, 1, 148, 2, 240, 220, 252, 176, 66, 160, 96, 78,
-        219, 40, 70, 45, 73, 34, 70, 255, 247, 92, 253, 0, 40, 71, 209, 43,
-        75, 213, 248, 124, 6, 141, 232, 24, 0, 79, 244, 144, 113, 37, 34, 40,
-        75, 0, 240, 77, 251, 0, 40, 58, 209, 39, 75, 213, 248, 124, 6, 141,
-        232, 24, 0, 79, 244, 144, 113, 60, 34, 36, 75, 0, 240, 64, 251, 0, 40,
-        45, 209, 213, 248, 124, 6, 5, 33, 156, 34, 32, 75, 0, 149, 0, 240, 68,
-        253, 0, 40, 35, 209, 213, 248, 124, 6, 128, 33, 37, 34, 28, 75, 0, 148,
-        0, 240, 216, 251, 208, 185, 213, 248, 124, 6, 128, 33, 60, 34, 25, 75,
-        0, 148, 0, 240, 207, 251, 136, 185, 23, 75, 1, 144, 0, 147, 23, 75,
-        3, 144, 2, 147, 4, 144, 5, 144, 21, 73, 40, 104, 21, 74, 35, 70, 188,
-        247, 233, 254, 16, 185, 32, 70, 6, 176, 112, 189, 32, 70, 185, 247,
-        38, 255, 0, 36, 247, 231, 0, 191, 93, 7, 133, 0, 29, 7, 133, 0, 101,
-        11, 133, 0, 81, 11, 133, 0, 217, 7, 133, 0, 233, 13, 133, 0, 253, 7,
-        133, 0, 25, 14, 133, 0, 37, 8, 133, 0, 61, 6, 133, 0, 221, 6, 133, 0,
-        253, 6, 133, 0, 21, 9, 133, 0, 229, 13, 133, 0, 108, 230, 135, 0, 58,
-        158, 136, 0, 56, 181, 5, 104, 4, 70, 34, 70, 40, 104, 6, 73, 252, 247,
-        52, 251, 40, 70, 5, 73, 34, 70, 255, 247, 228, 252, 32, 70, 189, 232,
-        56, 64, 185, 247, 241, 190, 58, 158, 136, 0, 217, 7, 133, 0, 2, 70,
-        2, 73, 0, 104, 252, 247, 33, 187, 0, 191, 66, 227, 3, 0, 112, 181, 23,
-        75, 134, 176, 5, 104, 4, 70, 0, 147, 0, 35, 1, 147, 2, 147, 3, 147,
-        4, 147, 5, 147, 40, 70, 35, 70, 17, 73, 18, 74, 188, 247, 143, 254,
-        35, 70, 0, 40, 20, 191, 79, 240, 255, 54, 0, 38, 14, 73, 15, 74, 40,
-        70, 188, 247, 1, 255, 32, 70, 214, 247, 156, 255, 35, 70, 40, 70, 11,
-        73, 12, 74, 188, 247, 248, 254, 40, 70, 11, 73, 11, 74, 35, 70, 188,
-        247, 242, 254, 48, 70, 6, 176, 112, 189, 0, 191, 153, 91, 2, 0, 116,
-        227, 3, 0, 66, 227, 3, 0, 1, 84, 136, 0, 209, 89, 2, 0, 88, 227, 3,
-        0, 193, 89, 2, 0, 97, 227, 3, 0, 1, 90, 2, 0, 45, 233, 240, 67, 6, 70,
-        135, 176, 56, 32, 15, 70, 145, 70, 152, 70, 185, 247, 150, 254, 4, 70,
-        0, 40, 56, 208, 0, 33, 56, 34, 181, 243, 41, 240, 215, 248, 36, 6, 64,
-        33, 26, 74, 4, 241, 32, 3, 246, 247, 127, 251, 5, 70, 32, 177, 32, 70,
-        185, 247, 133, 254, 0, 36, 37, 224, 21, 75, 196, 248, 28, 128, 167,
-        96, 196, 248, 12, 144, 38, 97, 19, 73, 0, 147, 1, 144, 2, 144, 3, 144,
-        4, 144, 5, 144, 35, 70, 48, 70, 15, 74, 188, 247, 44, 254, 3, 70, 96,
-        185, 224, 104, 13, 73, 34, 70, 202, 243, 234, 244, 5, 70, 160, 97, 64,
-        185, 32, 105, 10, 73, 34, 70, 252, 247, 154, 250, 32, 70, 185, 247,
-        94, 254, 44, 70, 32, 70, 7, 176, 189, 232, 240, 131, 216, 91, 136, 0,
-        125, 23, 133, 0, 132, 230, 135, 0, 67, 52, 5, 0, 221, 23, 133, 0, 152,
-        227, 3, 0, 16, 181, 4, 70, 2, 240, 120, 222, 15, 73, 32, 105, 34, 70,
-        252, 247, 125, 250, 161, 105, 97, 177, 35, 125, 35, 177, 224, 104, 202,
-        243, 56, 244, 0, 35, 35, 117, 224, 104, 161, 105, 202, 243, 170, 244,
-        0, 35, 163, 97, 163, 104, 4, 241, 32, 1, 211, 248, 36, 6, 246, 247,
-        47, 251, 32, 70, 185, 247, 43, 254, 0, 32, 16, 189, 67, 52, 5, 0, 55,
-        181, 5, 70, 56, 32, 185, 243, 197, 245, 4, 70, 80, 177, 79, 240, 255,
-        51, 5, 96, 5, 73, 1, 147, 5, 74, 6, 75, 0, 149, 4, 240, 73, 223, 1,
-        224, 4, 240, 24, 223, 32, 70, 62, 189, 169, 56, 133, 0, 177, 56, 133,
-        0, 161, 56, 133, 0, 112, 181, 5, 70, 134, 176, 16, 32, 185, 247, 2,
-        254, 4, 70, 0, 40, 56, 208, 0, 33, 16, 34, 180, 243, 149, 247, 0, 38,
-        37, 96, 1, 33, 197, 248, 184, 70, 40, 70, 25, 74, 25, 75, 0, 150, 1,
-        148, 255, 247, 189, 251, 176, 66, 224, 96, 33, 219, 22, 75, 40, 104,
-        141, 232, 72, 0, 21, 73, 22, 74, 35, 70, 2, 150, 3, 150, 4, 150, 5,
-        150, 188, 247, 158, 253, 152, 185, 18, 75, 213, 248, 124, 6, 141, 232,
-        40, 0, 5, 33, 190, 34, 16, 75, 0, 240, 74, 250, 64, 185, 213, 248, 124,
-        6, 192, 33, 190, 34, 13, 75, 0, 149, 0, 240, 43, 252, 24, 177, 32, 70,
-        185, 247, 202, 253, 0, 36, 32, 70, 6, 176, 112, 189, 0, 191, 189, 59,
-        133, 0, 185, 59, 133, 0, 169, 58, 133, 0, 204, 231, 135, 0, 74, 52,
-        5, 0, 141, 59, 133, 0, 109, 59, 133, 0, 193, 59, 133, 0, 16, 181, 4,
-        70, 136, 177, 3, 121, 35, 177, 128, 104, 185, 247, 173, 253, 0, 35,
-        35, 113, 35, 104, 5, 73, 24, 104, 34, 70, 252, 247, 222, 249, 32, 70,
-        189, 232, 16, 64, 185, 247, 160, 189, 16, 189, 74, 52, 5, 0, 8, 177,
-        185, 247, 154, 189, 112, 71, 55, 181, 5, 70, 4, 32, 185, 247, 145, 253,
-        4, 70, 0, 40, 85, 208, 45, 75, 5, 96, 64, 242, 63, 17, 0, 147, 1, 144,
-        45, 34, 213, 248, 124, 6, 42, 75, 0, 240, 108, 249, 0, 40, 71, 209,
-        40, 75, 213, 248, 124, 6, 141, 232, 24, 0, 79, 244, 149, 113, 61, 34,
-        37, 75, 0, 240, 95, 249, 0, 40, 58, 209, 36, 75, 213, 248, 124, 6, 141,
-        232, 24, 0, 79, 244, 149, 113, 74, 34, 33, 75, 0, 240, 82, 249, 112,
-        187, 32, 75, 213, 248, 124, 6, 141, 232, 24, 0, 21, 33, 80, 34, 29,
-        75, 0, 240, 211, 249, 24, 187, 213, 248, 124, 6, 5, 33, 45, 34, 26,
-        75, 0, 148, 0, 240, 46, 251, 208, 185, 213, 248, 124, 6, 192, 33, 45,
-        34, 23, 75, 0, 148, 0, 240, 37, 251, 136, 185, 213, 248, 124, 6, 192,
-        33, 61, 34, 19, 75, 0, 148, 0, 240, 28, 251, 64, 185, 213, 248, 124,
-        6, 192, 33, 80, 34, 16, 75, 0, 148, 0, 240, 153, 251, 24, 177, 32, 70,
-        255, 247, 155, 255, 0, 36, 32, 70, 62, 189, 69, 63, 133, 0, 21, 60,
-        133, 0, 205, 63, 133, 0, 61, 60, 133, 0, 141, 63, 133, 0, 37, 60, 133,
-        0, 241, 62, 133, 0, 253, 59, 133, 0, 157, 60, 133, 0, 93, 61, 133, 0,
-        125, 61, 133, 0, 217, 60, 133, 0, 16, 181, 4, 70, 160, 177, 3, 104,
-        128, 111, 0, 34, 90, 97, 8, 177, 185, 247, 19, 253, 212, 248, 152, 0,
-        8, 177, 185, 247, 14, 253, 96, 104, 8, 177, 185, 247, 10, 253, 32, 70,
-        189, 232, 16, 64, 185, 247, 5, 189, 16, 189, 45, 233, 240, 65, 4, 70,
-        79, 244, 178, 112, 13, 70, 22, 70, 152, 70, 185, 243, 157, 244, 7, 70,
-        16, 185, 64, 242, 242, 51, 30, 224, 4, 96, 133, 96, 198, 96, 40, 32,
-        185, 243, 146, 244, 184, 103, 16, 185, 64, 242, 243, 51, 19, 224, 88,
-        32, 185, 243, 138, 244, 199, 248, 152, 0, 64, 177, 44, 48, 199, 248,
-        156, 0, 48, 32, 185, 243, 129, 244, 120, 96, 96, 185, 2, 224, 79, 244,
-        125, 115, 1, 224, 64, 242, 245, 51, 56, 70, 200, 248, 0, 48, 255, 247,
-        180, 255, 0, 39, 3, 224, 0, 35, 200, 248, 0, 48, 96, 97, 56, 70, 189,
-        232, 240, 129, 0, 35, 194, 24, 210, 248, 192, 32, 202, 80, 4, 51, 24,
-        43, 248, 209, 112, 71, 79, 244, 200, 99, 192, 248, 76, 54, 104, 35,
-        192, 248, 80, 54, 79, 244, 128, 115, 192, 248, 84, 54, 2, 35, 192, 248,
-        88, 54, 192, 248, 92, 54, 112, 71, 0, 0, 16, 181, 4, 70, 80, 177, 3,
-        104, 5, 73, 24, 104, 34, 70, 252, 247, 221, 248, 32, 70, 189, 232, 16,
-        64, 185, 247, 159, 188, 16, 189, 0, 191, 8, 228, 3, 0, 1, 240, 240,
-        1, 45, 233, 240, 79, 14, 17, 1, 104, 176, 248, 16, 128, 9, 104, 137,
-        176, 201, 105, 148, 70, 209, 248, 192, 16, 7, 147, 136, 69, 4, 70, 176,
-        248, 18, 160, 131, 138, 199, 138, 178, 178, 92, 218, 129, 121, 0, 41,
-        92, 209, 50, 77, 5, 235, 194, 0, 128, 136, 6, 224, 85, 248, 50, 144,
-        25, 248, 1, 144, 225, 69, 2, 208, 1, 49, 129, 66, 246, 211, 129, 66,
-        79, 208, 231, 25, 55, 248, 18, 176, 1, 50, 55, 248, 18, 80, 162, 68,
-        69, 69, 35, 68, 26, 210, 197, 235, 8, 8, 5, 241, 1, 9, 10, 235, 5, 1,
-        66, 70, 10, 235, 9, 0, 205, 248, 20, 192, 6, 147, 180, 243, 204, 245,
-        6, 155, 12, 34, 2, 251, 9, 48, 2, 251, 5, 49, 2, 251, 8, 242, 180, 243,
-        194, 245, 221, 248, 20, 192, 6, 155, 49, 70, 0, 34, 7, 224, 7, 235,
-        70, 0, 48, 248, 2, 224, 14, 241, 1, 14, 32, 248, 2, 224, 1, 49, 2, 50,
-        13, 41, 243, 217, 18, 153, 203, 235, 5, 2, 0, 145, 19, 153, 10, 235,
-        11, 0, 1, 145, 12, 33, 1, 251, 11, 49, 146, 178, 7, 155, 205, 248, 8,
-        192, 0, 240, 219, 250, 35, 138, 0, 32, 1, 51, 35, 130, 7, 224, 111,
-        240, 21, 0, 4, 224, 111, 240, 22, 0, 1, 224, 111, 240, 29, 0, 9, 176,
-        189, 232, 240, 143, 0, 191, 160, 227, 3, 0, 45, 233, 243, 71, 221, 248,
-        40, 144, 221, 248, 44, 160, 7, 70, 14, 70, 21, 70, 152, 70, 0, 36, 86,
-        250, 4, 243, 219, 7, 10, 213, 33, 1, 56, 70, 1, 240, 240, 1, 42, 70,
-        67, 70, 141, 232, 0, 6, 255, 247, 101, 255, 24, 185, 1, 52, 13, 44,
-        237, 209, 0, 32, 189, 232, 252, 135, 45, 233, 240, 79, 137, 176, 7,
-        146, 2, 104, 176, 248, 24, 128, 18, 104, 156, 70, 210, 105, 4, 70, 210,
-        248, 196, 32, 176, 248, 26, 160, 144, 69, 131, 139, 199, 139, 80, 218,
-        130, 121, 0, 42, 80, 209, 1, 240, 240, 6, 54, 17, 199, 25, 178, 178,
-        55, 248, 18, 176, 1, 50, 55, 248, 18, 80, 130, 68, 69, 69, 3, 68, 26,
-        210, 197, 235, 8, 8, 5, 241, 1, 9, 10, 235, 5, 1, 66, 70, 10, 235, 9,
-        0, 205, 248, 20, 192, 6, 147, 180, 243, 58, 245, 6, 155, 12, 34, 2,
-        251, 9, 48, 2, 251, 5, 49, 2, 251, 8, 242, 180, 243, 48, 245, 221, 248,
-        20, 192, 6, 155, 49, 70, 0, 34, 7, 224, 7, 235, 70, 0, 48, 248, 2, 224,
-        14, 241, 1, 14, 32, 248, 2, 224, 1, 49, 2, 50, 13, 41, 243, 217, 18,
-        153, 203, 235, 5, 2, 0, 145, 19, 153, 10, 235, 11, 0, 1, 145, 7, 153,
-        146, 178, 2, 145, 12, 33, 1, 251, 11, 49, 99, 70, 0, 240, 73, 250, 35,
-        139, 0, 32, 1, 51, 35, 131, 4, 224, 111, 240, 21, 0, 1, 224, 111, 240,
-        22, 0, 9, 176, 189, 232, 240, 143, 45, 233, 243, 71, 221, 248, 40, 144,
-        221, 248, 44, 160, 7, 70, 14, 70, 21, 70, 152, 70, 0, 36, 86, 250, 4,
-        243, 218, 7, 10, 213, 33, 1, 56, 70, 1, 240, 240, 1, 42, 70, 67, 70,
-        141, 232, 0, 6, 255, 247, 123, 255, 24, 185, 1, 52, 13, 44, 237, 209,
-        0, 32, 189, 232, 252, 135, 45, 233, 240, 79, 135, 176, 5, 146, 2, 104,
-        176, 248, 32, 128, 18, 104, 156, 70, 210, 105, 4, 70, 210, 248, 200,
-        32, 176, 248, 34, 160, 144, 69, 131, 140, 199, 140, 76, 218, 130, 121,
-        0, 42, 76, 209, 1, 240, 240, 6, 54, 17, 199, 25, 178, 178, 55, 248,
-        18, 176, 1, 50, 55, 248, 18, 80, 130, 68, 69, 69, 3, 68, 25, 210, 197,
-        235, 8, 8, 5, 241, 1, 9, 10, 235, 5, 1, 66, 70, 10, 235, 9, 0, 205,
-        248, 12, 192, 4, 147, 180, 243, 174, 244, 4, 155, 79, 234, 200, 2, 3,
-        235, 201, 0, 3, 235, 197, 1, 180, 243, 165, 244, 221, 248, 12, 192,
-        4, 155, 49, 70, 0, 34, 7, 224, 7, 235, 70, 0, 48, 248, 2, 224, 14, 241,
-        1, 14, 32, 248, 2, 224, 1, 49, 2, 50, 13, 41, 243, 217, 16, 153, 203,
-        235, 5, 2, 0, 145, 5, 153, 10, 235, 11, 0, 1, 145, 146, 178, 3, 235,
-        203, 1, 99, 70, 0, 240, 209, 249, 35, 140, 0, 32, 1, 51, 35, 132, 4,
-        224, 111, 240, 21, 0, 1, 224, 111, 240, 22, 0, 7, 176, 189, 232, 240,
-        143, 3, 104, 240, 181, 219, 105, 12, 37, 179, 248, 192, 32, 6, 70, 5,
-        251, 2, 244, 51, 50, 34, 240, 3, 2, 1, 52, 164, 24, 179, 248, 196, 32,
-        79, 246, 254, 113, 2, 241, 31, 0, 106, 67, 33, 64, 65, 24, 80, 28, 79,
-        246, 252, 114, 10, 64, 130, 24, 179, 248, 200, 0, 79, 246, 254, 113,
-        0, 241, 31, 4, 17, 64, 97, 24, 192, 0, 79, 246, 252, 114, 10, 64, 179,
-        248, 204, 48, 1, 48, 128, 24, 79, 246, 254, 114, 3, 241, 31, 1, 2, 64,
-        219, 0, 138, 24, 89, 28, 79, 246, 252, 115, 19, 64, 203, 24, 79, 246,
-        254, 119, 31, 64, 28, 55, 191, 178, 135, 176, 56, 70, 185, 247, 193,
-        250, 4, 70, 0, 40, 0, 240, 132, 128, 0, 33, 58, 70, 180, 243, 83, 244,
-        48, 35, 99, 130, 51, 104, 79, 246, 252, 114, 219, 105, 38, 96, 179,
-        248, 192, 16, 167, 128, 1, 241, 51, 0, 2, 64, 5, 251, 1, 33, 162, 130,
-        1, 49, 79, 246, 254, 114, 10, 64, 179, 248, 196, 16, 226, 130, 28, 50,
-        146, 178, 200, 28, 16, 24, 98, 131, 79, 246, 252, 114, 2, 64, 5, 251,
-        1, 33, 162, 131, 1, 49, 79, 246, 254, 114, 10, 64, 179, 248, 200, 16,
-        226, 131, 28, 50, 146, 178, 200, 28, 16, 24, 98, 132, 79, 246, 252,
-        114, 2, 64, 2, 235, 193, 1, 1, 49, 162, 132, 79, 246, 254, 114, 10,
-        64, 179, 248, 204, 16, 226, 132, 28, 50, 146, 178, 203, 28, 98, 133,
-        210, 24, 79, 246, 252, 115, 19, 64, 163, 133, 3, 235, 193, 3, 1, 51,
-        79, 246, 254, 114, 26, 64, 226, 133, 0, 37, 29, 79, 87, 248, 53, 48,
-        99, 177, 28, 75, 41, 1, 141, 232, 24, 0, 221, 34, 32, 70, 1, 240, 240,
-        1, 25, 75, 255, 247, 198, 253, 0, 40, 34, 219, 1, 53, 13, 45, 235, 209,
-        0, 37, 87, 248, 53, 48, 83, 177, 41, 1, 221, 34, 32, 70, 1, 240, 240,
-        1, 17, 75, 0, 148, 255, 247, 226, 254, 0, 40, 16, 219, 1, 53, 13, 45,
-        238, 209, 14, 75, 0, 33, 2, 147, 48, 104, 13, 74, 35, 70, 0, 145, 1,
-        145, 3, 145, 4, 145, 5, 145, 188, 247, 249, 249, 24, 177, 32, 70, 255,
-        247, 140, 253, 0, 36, 32, 70, 7, 176, 240, 189, 160, 227, 3, 0, 145,
-        65, 133, 0, 229, 65, 133, 0, 49, 66, 133, 0, 29, 65, 133, 0, 8, 228,
-        3, 0, 45, 233, 247, 67, 221, 248, 40, 144, 7, 70, 14, 70, 21, 70, 152,
-        70, 0, 36, 86, 250, 4, 243, 217, 7, 10, 213, 33, 1, 56, 70, 1, 240,
-        240, 1, 42, 70, 67, 70, 205, 248, 0, 144, 255, 247, 165, 254, 24, 185,
-        1, 52, 13, 44, 237, 209, 0, 32, 189, 232, 254, 131, 45, 233, 240, 79,
-        135, 176, 5, 146, 2, 104, 176, 248, 40, 128, 18, 104, 156, 70, 210,
-        105, 4, 70, 210, 248, 204, 32, 176, 248, 42, 160, 144, 69, 131, 141,
-        199, 141, 76, 218, 130, 121, 0, 42, 76, 209, 1, 240, 240, 6, 54, 17,
-        199, 25, 178, 178, 55, 248, 18, 176, 1, 50, 55, 248, 18, 80, 130, 68,
-        69, 69, 3, 68, 25, 210, 197, 235, 8, 8, 5, 241, 1, 9, 10, 235, 5, 1,
-        66, 70, 10, 235, 9, 0, 205, 248, 12, 192, 4, 147, 180, 243, 76, 243,
-        4, 155, 79, 234, 200, 2, 3, 235, 201, 0, 3, 235, 197, 1, 180, 243, 67,
-        243, 221, 248, 12, 192, 4, 155, 49, 70, 0, 34, 7, 224, 7, 235, 70, 0,
-        48, 248, 2, 224, 14, 241, 1, 14, 32, 248, 2, 224, 1, 49, 2, 50, 13,
-        41, 243, 217, 16, 153, 203, 235, 5, 2, 0, 145, 5, 153, 10, 235, 11,
-        0, 1, 145, 146, 178, 3, 235, 203, 1, 99, 70, 0, 240, 111, 248, 35, 141,
-        0, 32, 1, 51, 35, 133, 4, 224, 111, 240, 21, 0, 1, 224, 111, 240, 22,
-        0, 7, 176, 189, 232, 240, 143, 45, 233, 247, 67, 221, 248, 40, 144,
-        7, 70, 14, 70, 21, 70, 152, 70, 0, 36, 86, 250, 4, 243, 216, 7, 10,
-        213, 33, 1, 56, 70, 1, 240, 240, 1, 42, 70, 67, 70, 205, 248, 0, 144,
-        255, 247, 129, 255, 24, 185, 1, 52, 13, 44, 237, 209, 0, 32, 189, 232,
-        254, 131, 45, 233, 240, 71, 8, 159, 154, 70, 4, 70, 157, 248, 36, 96,
-        3, 70, 0, 37, 12, 224, 19, 248, 1, 11, 134, 66, 10, 208, 29, 177, 19,
-        248, 2, 236, 182, 69, 1, 210, 134, 66, 3, 217, 1, 53, 173, 178, 149,
-        66, 240, 209, 170, 66, 7, 251, 5, 24, 14, 217, 197, 235, 2, 9, 65, 70,
-        7, 251, 9, 242, 8, 235, 7, 0, 180, 243, 210, 242, 104, 28, 32, 24, 97,
-        25, 74, 70, 180, 243, 204, 242, 64, 70, 81, 70, 58, 70, 178, 247, 147,
-        254, 102, 85, 189, 232, 240, 135, 127, 181, 3, 147, 8, 155, 4, 147,
-        9, 155, 5, 147, 12, 35, 0, 147, 157, 248, 40, 48, 1, 147, 3, 171, 255,
-        247, 190, 255, 7, 176, 0, 189, 31, 181, 2, 147, 6, 155, 3, 147, 8, 35,
-        0, 147, 157, 248, 28, 48, 1, 147, 2, 171, 255, 247, 176, 255, 5, 176,
-        0, 189, 55, 181, 37, 75, 208, 248, 124, 86, 4, 70, 0, 147, 1, 144, 64,
-        242, 63, 17, 40, 70, 127, 34, 33, 75, 255, 247, 12, 253, 0, 40, 58,
-        209, 31, 75, 40, 70, 141, 232, 24, 0, 65, 246, 63, 81, 64, 34, 29, 75,
-        255, 247, 140, 253, 120, 187, 28, 75, 40, 70, 141, 232, 24, 0, 64, 246,
-        63, 17, 152, 34, 25, 75, 255, 247, 129, 253, 32, 187, 24, 75, 40, 70,
-        141, 232, 24, 0, 64, 242, 47, 17, 168, 34, 22, 75, 255, 247, 118, 253,
-        200, 185, 40, 70, 64, 242, 15, 17, 127, 34, 19, 75, 0, 148, 255, 247,
-        209, 254, 128, 185, 40, 70, 64, 242, 15, 17, 152, 34, 15, 75, 0, 148,
-        255, 247, 78, 255, 56, 185, 40, 70, 64, 242, 15, 17, 168, 34, 12, 75,
-        0, 148, 255, 247, 69, 255, 62, 189, 193, 99, 2, 0, 29, 100, 2, 0, 1,
-        91, 133, 0, 169, 87, 133, 0, 181, 90, 133, 0, 137, 87, 133, 0, 121,
-        91, 133, 0, 29, 88, 133, 0, 205, 88, 133, 0, 141, 88, 133, 0, 49, 96,
-        2, 0, 55, 181, 16, 75, 208, 248, 124, 86, 4, 70, 0, 147, 1, 144, 5,
-        33, 40, 70, 0, 34, 12, 75, 255, 247, 171, 252, 144, 185, 11, 75, 40,
-        70, 141, 232, 24, 0, 5, 33, 1, 34, 9, 75, 255, 247, 161, 252, 64, 185,
-        8, 75, 40, 70, 141, 232, 24, 0, 5, 33, 50, 34, 6, 75, 255, 247, 151,
-        252, 62, 189, 113, 82, 133, 0, 57, 82, 133, 0, 141, 82, 133, 0, 69,
-        82, 133, 0, 85, 82, 133, 0, 41, 82, 133, 0, 55, 181, 37, 75, 208, 248,
-        124, 86, 4, 70, 0, 147, 1, 144, 79, 244, 144, 113, 40, 70, 0, 34, 33,
-        75, 255, 247, 124, 252, 0, 40, 58, 209, 31, 75, 40, 70, 141, 232, 24,
-        0, 79, 244, 144, 113, 1, 34, 29, 75, 255, 247, 112, 252, 120, 187, 28,
-        75, 40, 70, 141, 232, 24, 0, 79, 244, 144, 113, 50, 34, 25, 75, 255,
-        247, 101, 252, 32, 187, 24, 75, 40, 70, 141, 232, 24, 0, 79, 244, 144,
-        113, 3, 34, 22, 75, 255, 247, 90, 252, 200, 185, 21, 75, 40, 70, 141,
-        232, 24, 0, 79, 244, 144, 113, 6, 34, 18, 75, 255, 247, 79, 252, 112,
-        185, 40, 70, 128, 33, 5, 34, 16, 75, 0, 148, 255, 247, 243, 252, 48,
-        185, 40, 70, 128, 33, 5, 34, 13, 75, 0, 148, 255, 247, 235, 252, 62,
-        189, 49, 87, 133, 0, 177, 84, 133, 0, 109, 87, 133, 0, 185, 84, 133,
-        0, 213, 86, 133, 0, 109, 84, 133, 0, 169, 86, 133, 0, 89, 84, 133, 0,
-        253, 86, 133, 0, 137, 84, 133, 0, 121, 100, 2, 0, 73, 86, 133, 0, 55,
-        181, 21, 75, 208, 248, 124, 86, 4, 70, 0, 147, 1, 144, 64, 33, 40, 70,
-        0, 34, 17, 75, 255, 247, 151, 251, 224, 185, 16, 75, 40, 70, 141, 232,
-        24, 0, 64, 33, 1, 34, 14, 75, 255, 247, 141, 251, 144, 185, 13, 75,
-        40, 70, 141, 232, 24, 0, 64, 33, 50, 34, 11, 75, 255, 247, 131, 251,
-        64, 185, 10, 75, 40, 70, 141, 232, 24, 0, 64, 33, 3, 34, 8, 75, 255,
-        247, 121, 251, 62, 189, 237, 92, 133, 0, 145, 92, 133, 0, 5, 93, 133,
-        0, 157, 92, 133, 0, 209, 92, 133, 0, 129, 92, 133, 0, 169, 92, 133,
-        0, 113, 92, 133, 0, 55, 181, 10, 75, 208, 248, 124, 86, 4, 70, 0, 147,
-        1, 144, 176, 33, 40, 70, 16, 34, 6, 75, 255, 247, 91, 251, 48, 185,
-        40, 70, 176, 33, 16, 34, 4, 75, 0, 148, 255, 247, 129, 252, 62, 189,
-        141, 83, 133, 0, 169, 82, 133, 0, 213, 82, 133, 0, 55, 181, 208, 248,
-        124, 86, 4, 70, 0, 144, 192, 33, 40, 70, 0, 34, 17, 75, 255, 247, 179,
-        253, 240, 185, 40, 70, 192, 33, 1, 34, 15, 75, 0, 148, 255, 247, 171,
-        253, 176, 185, 40, 70, 192, 33, 6, 34, 12, 75, 0, 148, 255, 247, 163,
-        253, 112, 185, 40, 70, 192, 33, 168, 34, 9, 75, 0, 148, 255, 247, 33,
-        254, 48, 185, 40, 70, 192, 33, 152, 34, 6, 75, 0, 148, 255, 247, 25,
-        254, 62, 189, 89, 93, 133, 0, 129, 93, 133, 0, 57, 93, 133, 0, 157,
-        93, 133, 0, 33, 93, 133, 0, 16, 181, 4, 70, 80, 177, 3, 104, 5, 73,
-        24, 104, 34, 70, 251, 247, 225, 251, 32, 70, 189, 232, 16, 64, 184,
-        247, 163, 191, 16, 189, 0, 191, 87, 228, 3, 0, 56, 181, 5, 70, 12, 32,
-        184, 247, 151, 255, 4, 70, 56, 177, 0, 33, 12, 34, 180, 243, 43, 241,
-        12, 35, 37, 96, 163, 128, 1, 224, 255, 247, 221, 255, 32, 70, 56, 189,
-        40, 177, 131, 104, 218, 136, 1, 58, 218, 128, 184, 247, 133, 191, 112,
-        71, 0, 0, 48, 181, 16, 75, 135, 176, 0, 147, 0, 35, 1, 147, 2, 147,
-        3, 147, 13, 75, 4, 70, 4, 147, 13, 75, 13, 73, 5, 147, 0, 104, 13, 74,
-        35, 70, 187, 247, 44, 255, 5, 70, 56, 185, 32, 104, 10, 73, 11, 74,
-        35, 70, 187, 247, 161, 255, 40, 70, 1, 224, 79, 240, 255, 48, 7, 176,
-        48, 189, 0, 191, 81, 140, 133, 0, 196, 228, 3, 0, 177, 112, 2, 0, 60,
-        234, 135, 0, 163, 228, 3, 0, 207, 83, 136, 0, 9, 112, 2, 0, 2, 70, 2,
-        73, 0, 104, 251, 247, 135, 187, 0, 191, 163, 228, 3, 0, 16, 181, 4,
-        70, 72, 177, 3, 104, 33, 70, 24, 104, 251, 247, 6, 252, 32, 70, 189,
-        232, 16, 64, 184, 247, 62, 191, 16, 189, 55, 181, 5, 70, 8, 32, 184,
-        243, 219, 246, 4, 70, 160, 177, 5, 96, 0, 34, 1, 144, 12, 33, 40, 70,
-        10, 75, 0, 146, 254, 247, 248, 252, 0, 40, 96, 96, 8, 219, 8, 75, 40,
-        104, 0, 147, 33, 70, 7, 74, 4, 35, 187, 247, 49, 255, 24, 177, 32, 70,
-        255, 247, 211, 255, 0, 36, 32, 70, 62, 189, 221, 146, 133, 0, 216, 234,
-        135, 0, 241, 146, 133, 0, 112, 181, 6, 70, 134, 176, 8, 32, 184, 247,
-        12, 255, 4, 70, 160, 177, 11, 75, 0, 37, 6, 96, 69, 96, 10, 73, 141,
-        232, 40, 0, 48, 104, 9, 74, 35, 70, 2, 149, 3, 149, 4, 149, 5, 149,
-        187, 247, 185, 254, 24, 177, 32, 70, 184, 247, 249, 254, 44, 70, 32,
-        70, 6, 176, 112, 189, 213, 231, 133, 0, 56, 236, 135, 0, 187, 228, 3,
-        0, 16, 181, 4, 70, 80, 177, 3, 104, 5, 73, 24, 104, 34, 70, 251, 247,
-        31, 251, 32, 70, 189, 232, 16, 64, 184, 247, 225, 190, 16, 189, 0, 191,
-        187, 228, 3, 0, 56, 181, 4, 70, 208, 177, 128, 104, 8, 177, 184, 247,
-        214, 254, 35, 105, 67, 185, 14, 224, 35, 105, 83, 248, 53, 0, 8, 177,
-        184, 247, 205, 254, 1, 53, 0, 224, 0, 37, 227, 104, 157, 66, 243, 219,
-        32, 105, 184, 247, 196, 254, 32, 70, 189, 232, 56, 64, 184, 247, 191,
-        190, 56, 189, 0, 0, 45, 233, 240, 65, 5, 70, 24, 32, 184, 243, 90, 246,
-        4, 70, 0, 40, 51, 208, 43, 104, 5, 96, 219, 105, 12, 32, 219, 105, 1,
-        51, 88, 67, 184, 243, 78, 246, 160, 96, 64, 179, 43, 104, 24, 32, 219,
-        105, 218, 105, 91, 111, 98, 96, 227, 96, 184, 247, 157, 254, 32, 97,
-        232, 177, 18, 73, 24, 34, 0, 38, 178, 247, 216, 251, 55, 70, 14, 224,
-        14, 75, 212, 248, 16, 128, 155, 25, 24, 121, 128, 0, 184, 243, 50, 246,
-        35, 105, 72, 248, 6, 0, 155, 89, 8, 54, 67, 177, 1, 55, 227, 104, 159,
-        66, 237, 219, 107, 104, 6, 74, 220, 96, 154, 96, 3, 224, 32, 70, 255,
-        247, 160, 255, 0, 36, 32, 70, 189, 232, 240, 129, 80, 52, 5, 0, 139,
-        113, 2, 0, 16, 181, 196, 104, 161, 66, 11, 218, 0, 105, 0, 235, 193,
-        4, 36, 121, 162, 66, 8, 218, 80, 248, 49, 16, 0, 32, 65, 248, 34, 48,
-        16, 189, 111, 240, 21, 0, 16, 189, 111, 240, 21, 0, 16, 189, 215, 247,
-        126, 187, 16, 181, 4, 70, 255, 247, 250, 255, 224, 132, 0, 12, 132,
-        248, 40, 0, 0, 32, 16, 189, 1, 33, 10, 35, 128, 248, 24, 17, 129, 107,
-        3, 34, 128, 248, 86, 50, 0, 35, 128, 248, 87, 34, 128, 248, 71, 54,
-        128, 248, 73, 54, 128, 248, 75, 54, 128, 248, 77, 54, 128, 248, 79,
-        54, 128, 248, 114, 50, 129, 248, 138, 32, 128, 248, 72, 53, 192, 248,
-        44, 51, 128, 248, 36, 49, 192, 248, 188, 54, 127, 35, 128, 248, 51,
-        49, 79, 240, 255, 51, 160, 248, 80, 49, 0, 245, 41, 115, 255, 34, 192,
-        248, 68, 50, 100, 35, 128, 248, 68, 35, 128, 248, 69, 35, 128, 248,
-        16, 49, 79, 246, 206, 114, 4, 35, 160, 248, 48, 35, 128, 248, 140, 50,
-        128, 248, 142, 50, 112, 71, 208, 248, 200, 54, 16, 181, 4, 70, 131,
-        177, 211, 248, 40, 8, 48, 177, 184, 247, 11, 254, 212, 248, 200, 54,
-        0, 34, 195, 248, 40, 40, 212, 248, 200, 6, 184, 247, 2, 254, 0, 35,
-        196, 248, 200, 54, 16, 189, 208, 248, 244, 48, 16, 181, 4, 70, 147,
-        177, 131, 107, 91, 107, 11, 43, 7, 209, 208, 248, 184, 6, 32, 177, 184,
-        247, 240, 253, 0, 35, 196, 248, 184, 54, 212, 248, 244, 0, 184, 247,
-        233, 253, 0, 35, 196, 248, 244, 48, 16, 189, 16, 181, 4, 70, 1, 32,
-        184, 247, 221, 253, 3, 70, 196, 248, 244, 0, 168, 177, 0, 33, 1, 34,
-        179, 243, 111, 247, 163, 107, 91, 107, 11, 43, 12, 209, 79, 244, 148,
-        112, 184, 247, 205, 253, 3, 70, 196, 248, 184, 6, 40, 177, 0, 33, 79,
-        244, 148, 114, 179, 243, 94, 247, 1, 35, 24, 70, 16, 189, 112, 181,
-        4, 70, 64, 246, 120, 16, 13, 70, 184, 247, 186, 253, 196, 248, 200,
-        6, 0, 40, 49, 208, 0, 33, 64, 246, 120, 18, 179, 243, 75, 247, 180,
-        248, 10, 33, 212, 248, 200, 54, 0, 38, 26, 112, 212, 248, 200, 54, 32,
-        70, 131, 248, 182, 96, 195, 248, 176, 96, 212, 248, 200, 54, 131, 248,
-        180, 96, 163, 107, 131, 248, 132, 96, 163, 107, 30, 103, 158, 103, 60,
-        35, 196, 248, 116, 49, 16, 35, 196, 248, 120, 49, 196, 248, 124, 97,
-        0, 240, 164, 254, 163, 107, 2, 45, 12, 191, 26, 111, 154, 111, 0, 32,
-        218, 102, 132, 248, 151, 101, 132, 248, 150, 101, 112, 189, 111, 240,
-        26, 0, 112, 189, 0, 0, 176, 248, 154, 53, 247, 181, 4, 70, 14, 70, 3,
-        179, 8, 70, 179, 243, 197, 247, 7, 70, 20, 72, 179, 243, 193, 247, 63,
-        24, 16, 55, 191, 178, 56, 70, 184, 247, 109, 253, 5, 70, 200, 177, 180,
-        248, 154, 53, 57, 70, 0, 147, 14, 74, 51, 70, 179, 243, 99, 247, 212,
-        248, 4, 1, 41, 70, 182, 247, 234, 252, 7, 70, 40, 70, 184, 247, 93,
-        253, 71, 185, 212, 248, 4, 1, 49, 70, 3, 176, 189, 232, 240, 64, 182,
-        247, 221, 188, 7, 70, 56, 70, 3, 176, 240, 189, 0, 191, 155, 52, 5,
-        0, 134, 52, 5, 0, 45, 233, 243, 71, 28, 70, 176, 248, 154, 53, 7, 70,
-        136, 70, 145, 70, 208, 248, 4, 97, 0, 43, 50, 208, 8, 70, 179, 243,
-        135, 247, 130, 70, 34, 72, 179, 243, 131, 247, 130, 68, 10, 241, 16,
-        10, 31, 250, 138, 250, 80, 70, 184, 247, 45, 253, 5, 70, 0, 40, 47,
-        208, 183, 248, 154, 53, 81, 70, 0, 147, 26, 74, 67, 70, 179, 243, 34,
-        247, 56, 70, 41, 70, 216, 247, 176, 248, 7, 70, 104, 177, 48, 70, 41,
-        70, 182, 247, 170, 252, 64, 177, 72, 69, 6, 221, 48, 70, 41, 70, 74,
-        70, 182, 247, 160, 252, 130, 70, 0, 224, 162, 70, 40, 70, 184, 247,
-        13, 253, 143, 185, 48, 70, 65, 70, 182, 247, 151, 252, 88, 177, 72,
-        69, 9, 221, 48, 70, 65, 70, 74, 70, 2, 176, 189, 232, 240, 71, 182,
-        247, 138, 188, 130, 70, 0, 224, 162, 70, 80, 70, 2, 176, 189, 232, 240,
-        135, 0, 191, 155, 52, 5, 0, 134, 52, 5, 0, 56, 181, 0, 34, 13, 70, 8,
-        73, 4, 70, 216, 247, 123, 248, 192, 178, 40, 35, 168, 66, 132, 248,
-        62, 6, 132, 248, 141, 50, 204, 191, 132, 248, 62, 54, 132, 248, 141,
-        2, 56, 189, 226, 52, 5, 0, 16, 181, 23, 73, 4, 70, 216, 247, 116, 248,
-        192, 178, 132, 248, 192, 6, 1, 56, 192, 178, 253, 40, 2, 217, 115, 35,
-        132, 248, 192, 54, 148, 248, 192, 54, 32, 70, 132, 248, 193, 54, 14,
-        73, 216, 247, 98, 248, 192, 178, 132, 248, 194, 6, 8, 177, 15, 40, 2,
-        209, 5, 35, 132, 248, 194, 54, 148, 248, 192, 38, 148, 248, 194, 54,
-        211, 26, 132, 248, 195, 54, 0, 35, 132, 248, 196, 54, 132, 248, 198,
-        54, 17, 35, 132, 248, 197, 54, 16, 189, 144, 52, 5, 0, 243, 52, 5, 0,
-        112, 181, 1, 34, 13, 70, 60, 73, 4, 70, 216, 247, 49, 248, 59, 73, 132,
-        248, 64, 6, 0, 34, 32, 70, 216, 247, 42, 248, 56, 73, 132, 248, 4, 6,
-        7, 34, 32, 70, 216, 247, 35, 248, 54, 73, 132, 248, 5, 6, 32, 70, 216,
-        247, 27, 248, 136, 177, 50, 73, 32, 70, 166, 107, 216, 247, 36, 248,
-        48, 73, 48, 103, 32, 70, 166, 107, 216, 247, 30, 248, 163, 107, 176,
-        103, 2, 45, 12, 191, 26, 111, 154, 111, 218, 102, 42, 73, 0, 34, 111,
-        240, 149, 3, 32, 70, 216, 247, 19, 248, 39, 73, 132, 248, 12, 6, 1,
-        34, 32, 70, 111, 240, 149, 3, 216, 247, 10, 248, 2, 37, 132, 248, 13,
-        6, 0, 35, 42, 70, 32, 70, 31, 73, 216, 247, 1, 248, 99, 25, 1, 53, 5,
-        45, 131, 248, 12, 6, 243, 209, 0, 37, 42, 70, 32, 70, 26, 73, 216, 247,
-        9, 248, 99, 25, 1, 53, 14, 45, 131, 248, 47, 6, 244, 209, 1, 37, 6,
-        34, 132, 248, 63, 86, 32, 70, 20, 73, 215, 247, 215, 255, 0, 34, 132,
-        248, 61, 6, 18, 73, 32, 70, 166, 107, 215, 247, 207, 255, 17, 73, 134,
-        248, 44, 1, 42, 70, 32, 70, 215, 247, 200, 255, 0, 35, 132, 248, 22,
-        6, 64, 33, 32, 70, 132, 248, 252, 53, 189, 232, 112, 64, 255, 247, 59,
-        191, 0, 191, 122, 52, 5, 0, 104, 52, 5, 0, 212, 52, 5, 0, 172, 52, 5,
-        0, 4, 53, 5, 0, 205, 52, 5, 0, 161, 52, 5, 0, 185, 52, 5, 0, 117, 52,
-        5, 0, 16, 181, 4, 70, 40, 177, 4, 104, 0, 52, 24, 191, 1, 36, 184, 247,
-        16, 252, 32, 70, 16, 189, 16, 181, 132, 139, 12, 128, 1, 140, 17, 128,
-        64, 242, 218, 50, 26, 128, 144, 248, 54, 32, 2, 155, 1, 32, 26, 128,
-        16, 189, 144, 248, 52, 0, 112, 71, 192, 106, 112, 71, 131, 107, 153,
-        97, 112, 71, 56, 181, 4, 70, 0, 40, 57, 208, 208, 248, 20, 81, 1, 61,
-        192, 248, 20, 81, 0, 45, 50, 209, 255, 247, 214, 253, 32, 70, 255, 247,
-        234, 253, 212, 248, 56, 19, 41, 177, 163, 107, 24, 105, 0, 240, 18,
-        253, 196, 248, 56, 83, 0, 37, 132, 248, 77, 82, 32, 70, 217, 247, 136,
-        251, 162, 107, 19, 104, 163, 66, 3, 209, 212, 248, 0, 49, 19, 96, 5,
-        224, 211, 248, 0, 33, 162, 66, 20, 209, 195, 248, 0, 81, 212, 248, 136,
-        48, 11, 177, 32, 70, 152, 71, 212, 248, 188, 22, 25, 177, 163, 107,
-        152, 104, 227, 247, 51, 254, 32, 70, 184, 247, 188, 251, 0, 32, 56,
-        189, 1, 32, 56, 189, 1, 32, 56, 189, 0, 0, 45, 233, 240, 71, 138, 70,
-        0, 33, 4, 70, 21, 70, 192, 104, 10, 70, 153, 70, 118, 70, 190, 243,
-        212, 242, 3, 7, 128, 70, 14, 213, 39, 104, 103, 177, 187, 107, 199,
-        248, 4, 145, 24, 105, 249, 106, 227, 247, 50, 249, 215, 248, 20, 49,
-        1, 51, 199, 248, 20, 49, 186, 224, 64, 246, 28, 80, 184, 247, 144, 251,
-        7, 70, 40, 185, 111, 240, 26, 0, 49, 70, 218, 247, 179, 253, 178, 224,
-        0, 33, 64, 246, 28, 82, 179, 243, 29, 245, 215, 248, 20, 49, 199, 248,
-        252, 160, 1, 51, 199, 248, 20, 49, 35, 104, 188, 99, 199, 248, 0, 49,
-        1, 35, 199, 248, 4, 145, 39, 96, 135, 248, 17, 49, 226, 108, 65, 242,
-        107, 3, 154, 66, 5, 209, 99, 108, 147, 43, 12, 191, 1, 35, 24, 35, 0,
-        224, 24, 35, 2, 45, 167, 248, 66, 49, 5, 209, 24, 240, 1, 15, 28, 191,
-        79, 244, 0, 83, 251, 98, 187, 107, 249, 106, 24, 105, 227, 247, 239,
-        248, 215, 248, 252, 48, 179, 248, 224, 67, 164, 178, 4, 244, 112, 99,
-        27, 10, 251, 97, 227, 178, 59, 98, 187, 107, 216, 104, 250, 247, 63,
-        248, 251, 105, 167, 248, 154, 5, 9, 43, 4, 209, 4, 35, 251, 97, 59,
-        106, 16, 51, 59, 98, 1, 35, 36, 11, 135, 248, 36, 48, 60, 99, 56, 70,
-        255, 247, 220, 252, 0, 40, 97, 209, 79, 244, 128, 83, 167, 248, 14,
-        49, 77, 242, 36, 2, 65, 242, 1, 3, 2, 45, 24, 191, 19, 70, 167, 248,
-        10, 49, 56, 70, 44, 73, 215, 247, 181, 254, 40, 177, 56, 70, 42, 73,
-        188, 107, 215, 247, 190, 254, 160, 102, 56, 70, 255, 247, 55, 253, 0,
-        40, 68, 208, 56, 70, 41, 70, 255, 247, 111, 254, 56, 70, 255, 247, 192,
-        252, 56, 70, 0, 240, 95, 251, 0, 40, 56, 208, 56, 70, 41, 70, 255, 247,
-        70, 253, 4, 70, 144, 187, 56, 70, 255, 247, 42, 254, 56, 70, 215, 247,
-        68, 248, 56, 70, 1, 33, 216, 247, 6, 248, 56, 70, 33, 70, 216, 247,
-        173, 250, 79, 240, 255, 51, 199, 248, 172, 53, 199, 248, 176, 53, 199,
-        248, 180, 53, 199, 248, 184, 53, 199, 248, 188, 53, 199, 248, 192, 53,
-        199, 248, 196, 53, 199, 248, 200, 53, 7, 241, 28, 1, 28, 34, 56, 70,
-        178, 247, 33, 248, 56, 70, 33, 70, 218, 247, 255, 252, 135, 248, 212,
-        76, 7, 245, 130, 115, 199, 248, 4, 49, 56, 70, 189, 232, 240, 135, 56,
-        70, 255, 247, 218, 254, 0, 32, 189, 232, 240, 135, 20, 53, 5, 0, 112,
-        181, 5, 70, 79, 244, 152, 112, 118, 70, 184, 247, 195, 250, 4, 70, 40,
-        185, 111, 240, 26, 0, 49, 70, 218, 247, 230, 252, 58, 224, 0, 33, 79,
-        244, 152, 114, 179, 243, 80, 244, 43, 104, 163, 96, 107, 104, 227, 96,
-        171, 104, 35, 97, 235, 104, 99, 96, 43, 105, 99, 97, 43, 140, 163, 132,
-        107, 140, 227, 132, 107, 106, 163, 98, 171, 106, 227, 98, 235, 106,
-        35, 99, 43, 107, 99, 99, 107, 107, 99, 100, 171, 107, 163, 100, 235,
-        107, 227, 100, 43, 108, 35, 101, 107, 108, 99, 101, 171, 108, 196, 248,
-        28, 49, 107, 105, 163, 101, 171, 105, 227, 101, 15, 35, 35, 102, 61,
-        35, 99, 102, 64, 246, 17, 99, 163, 102, 1, 35, 196, 248, 24, 49, 3,
-        35, 227, 102, 0, 35, 132, 248, 139, 48, 32, 70, 112, 189, 127, 181,
-        10, 75, 10, 73, 0, 147, 0, 35, 1, 147, 2, 147, 3, 147, 4, 147, 5, 147,
-        7, 74, 3, 104, 187, 247, 47, 250, 0, 40, 20, 191, 79, 240, 255, 48,
-        0, 32, 7, 176, 0, 189, 0, 191, 115, 172, 2, 0, 148, 229, 3, 0, 216,
-        236, 3, 0, 1, 73, 2, 104, 250, 247, 154, 190, 216, 236, 3, 0, 0, 35,
-        240, 181, 28, 70, 7, 224, 206, 24, 53, 104, 199, 24, 197, 80, 117, 104,
-        1, 52, 125, 96, 8, 51, 148, 66, 245, 209, 240, 189, 0, 0, 56, 181, 208,
-        248, 248, 64, 0, 35, 196, 248, 40, 54, 144, 248, 69, 86, 9, 75, 10,
-        74, 79, 244, 128, 96, 0, 45, 12, 191, 21, 70, 29, 70, 184, 247, 58,
-        250, 196, 248, 40, 6, 32, 177, 41, 70, 128, 34, 255, 247, 215, 255,
-        1, 32, 56, 189, 0, 191, 92, 66, 5, 0, 92, 70, 5, 0, 56, 181, 19, 73,
-        79, 240, 255, 50, 208, 248, 248, 64, 5, 70, 215, 247, 183, 253, 23,
-        34, 196, 248, 80, 5, 14, 73, 40, 70, 215, 247, 176, 253, 0, 35, 132,
-        248, 88, 53, 212, 248, 104, 53, 196, 248, 84, 5, 2, 43, 13, 208, 40,
-        70, 8, 73, 111, 240, 37, 2, 215, 247, 161, 253, 164, 248, 72, 5, 0,
-        178, 38, 48, 24, 191, 1, 32, 196, 248, 104, 5, 56, 189, 54, 53, 5, 0,
-        68, 61, 5, 0, 45, 61, 5, 0, 248, 181, 168, 73, 0, 34, 208, 248, 248,
-        80, 4, 70, 215, 247, 174, 253, 164, 73, 133, 248, 188, 4, 1, 34, 32,
-        70, 215, 247, 167, 253, 162, 73, 133, 248, 189, 4, 0, 34, 7, 35, 32,
-        70, 215, 247, 139, 253, 146, 35, 133, 248, 190, 4, 156, 73, 1, 34, 32,
-        70, 215, 247, 131, 253, 155, 73, 133, 248, 191, 4, 0, 34, 32, 70, 215,
-        247, 108, 253, 152, 73, 197, 248, 196, 4, 0, 34, 32, 70, 215, 247, 101,
-        253, 0, 38, 165, 248, 88, 4, 148, 73, 133, 248, 51, 100, 32, 70, 50,
-        70, 215, 247, 91, 253, 146, 73, 165, 248, 10, 4, 32, 70, 215, 247, 98,
-        253, 184, 177, 1, 35, 133, 248, 51, 52, 47, 70, 66, 35, 50, 70, 32,
-        70, 139, 73, 215, 247, 90, 253, 171, 25, 192, 178, 131, 248, 38, 4,
-        181, 248, 10, 52, 1, 54, 192, 24, 167, 248, 12, 4, 2, 55, 13, 46, 236,
-        209, 13, 224, 131, 73, 66, 34, 32, 70, 215, 247, 55, 253, 194, 178,
-        133, 248, 8, 36, 32, 70, 128, 73, 215, 247, 48, 253, 165, 248, 6, 4,
-        126, 73, 0, 34, 32, 70, 215, 247, 41, 253, 125, 73, 133, 248, 56, 4,
-        79, 240, 255, 50, 32, 70, 215, 247, 33, 253, 122, 73, 165, 248, 110,
-        5, 79, 240, 255, 50, 32, 70, 215, 247, 25, 253, 119, 73, 165, 248, 112,
-        5, 79, 240, 255, 50, 32, 70, 215, 247, 17, 253, 116, 73, 165, 248, 116,
-        5, 79, 240, 255, 50, 32, 70, 215, 247, 9, 253, 113, 73, 133, 248, 118,
-        5, 0, 34, 32, 70, 215, 247, 2, 253, 0, 38, 132, 248, 44, 1, 50, 70,
-        32, 70, 108, 73, 215, 247, 30, 253, 171, 25, 1, 54, 14, 46, 131, 248,
-        10, 6, 244, 209, 161, 34, 104, 73, 32, 70, 215, 247, 239, 252, 103,
-        73, 197, 248, 196, 5, 70, 242, 15, 98, 32, 70, 215, 247, 231, 252, 8,
-        34, 197, 248, 200, 5, 98, 73, 32, 70, 215, 247, 224, 252, 97, 73, 197,
-        248, 204, 5, 111, 240, 8, 2, 32, 70, 215, 247, 216, 252, 94, 73, 197,
-        248, 208, 5, 64, 246, 187, 114, 32, 70, 215, 247, 208, 252, 10, 34,
-        197, 248, 212, 5, 90, 73, 32, 70, 215, 247, 201, 252, 89, 73, 197, 248,
-        216, 5, 111, 240, 68, 2, 32, 70, 215, 247, 193, 252, 86, 73, 165, 248,
-        6, 6, 111, 240, 74, 2, 32, 70, 215, 247, 185, 252, 1, 34, 165, 248,
-        8, 6, 81, 73, 32, 70, 215, 247, 178, 252, 128, 178, 3, 28, 24, 191,
-        1, 35, 0, 240, 2, 0, 133, 248, 74, 53, 63, 34, 133, 248, 75, 5, 75,
-        73, 32, 70, 215, 247, 163, 252, 100, 34, 133, 248, 76, 5, 72, 73, 32,
-        70, 215, 247, 156, 252, 71, 73, 197, 248, 92, 5, 79, 240, 255, 50, 32,
-        70, 215, 247, 148, 252, 197, 248, 96, 5, 1, 48, 24, 191, 1, 32, 133,
-        248, 100, 5, 65, 73, 0, 34, 32, 70, 215, 247, 136, 252, 192, 178, 0,
-        240, 15, 3, 0, 9, 0, 240, 1, 0, 133, 248, 24, 54, 133, 248, 27, 6, 58,
-        73, 0, 34, 38, 35, 32, 70, 215, 247, 136, 252, 55, 73, 165, 248, 28,
-        6, 1, 34, 66, 35, 32, 70, 215, 247, 128, 252, 80, 35, 165, 248, 30,
-        6, 50, 73, 2, 34, 32, 70, 215, 247, 120, 252, 48, 73, 165, 248, 32,
-        6, 6, 34, 32, 70, 215, 247, 97, 252, 0, 34, 133, 248, 34, 6, 44, 73,
-        32, 70, 215, 247, 90, 252, 133, 248, 44, 6, 32, 70, 222, 247, 75, 253,
-        148, 248, 69, 38, 32, 70, 0, 42, 79, 209, 38, 73, 215, 247, 113, 252,
-        37, 73, 164, 248, 90, 6, 1, 34, 32, 70, 215, 247, 106, 252, 33, 73,
-        164, 248, 86, 6, 32, 70, 79, 224, 0, 191, 254, 65, 5, 0, 106, 61, 5,
-        0, 26, 61, 5, 0, 100, 65, 5, 0, 118, 61, 5, 0, 132, 65, 5, 0, 184, 65,
-        5, 0, 242, 65, 5, 0, 33, 53, 5, 0, 97, 53, 5, 0, 16, 66, 5, 0, 88, 61,
-        5, 0, 163, 65, 5, 0, 193, 65, 5, 0, 66, 66, 5, 0, 35, 61, 5, 0, 132,
-        61, 5, 0, 216, 65, 5, 0, 232, 65, 5, 0, 45, 53, 5, 0, 85, 66, 5, 0,
-        32, 66, 5, 0, 119, 65, 5, 0, 207, 65, 5, 0, 164, 61, 5, 0, 248, 60,
-        5, 0, 230, 60, 5, 0, 86, 53, 5, 0, 144, 65, 5, 0, 221, 60, 5, 0, 175,
-        61, 5, 0, 59, 66, 5, 0, 37, 73, 0, 34, 215, 247, 32, 252, 35, 73, 164,
-        248, 90, 6, 1, 34, 32, 70, 215, 247, 25, 252, 32, 73, 164, 248, 86,
-        6, 32, 70, 2, 34, 215, 247, 18, 252, 0, 35, 164, 248, 88, 6, 28, 73,
-        133, 248, 55, 54, 32, 70, 2, 34, 215, 247, 244, 251, 16, 177, 1, 35,
-        133, 248, 55, 54, 149, 248, 55, 54, 43, 179, 21, 73, 0, 34, 32, 70,
-        215, 247, 252, 251, 18, 73, 164, 248, 4, 13, 1, 34, 32, 70, 215, 247,
-        245, 251, 15, 73, 164, 248, 0, 13, 2, 34, 32, 70, 215, 247, 238, 251,
-        12, 73, 164, 248, 2, 13, 0, 34, 32, 70, 215, 247, 195, 251, 10, 73,
-        133, 248, 53, 6, 40, 34, 32, 70, 215, 247, 188, 251, 0, 35, 133, 248,
-        54, 6, 132, 248, 63, 54, 1, 32, 248, 189, 0, 191, 8, 61, 5, 0, 172,
-        65, 5, 0, 81, 53, 5, 0, 80, 66, 5, 0, 56, 181, 14, 73, 208, 248, 248,
-        64, 5, 70, 215, 247, 178, 251, 12, 73, 132, 248, 45, 6, 40, 70, 215,
-        247, 172, 251, 255, 34, 132, 248, 46, 6, 8, 73, 40, 70, 215, 247, 152,
-        251, 7, 73, 132, 248, 52, 6, 40, 70, 215, 247, 159, 251, 196, 248, 48,
-        6, 1, 32, 56, 189, 110, 65, 5, 0, 141, 61, 5, 0, 68, 53, 5, 0, 184,
-        61, 5, 0, 56, 181, 4, 70, 208, 248, 248, 80, 79, 244, 103, 112, 183,
-        247, 234, 255, 197, 248, 36, 6, 212, 248, 248, 48, 211, 248, 36, 6,
-        176, 177, 212, 248, 148, 49, 11, 74, 147, 66, 7, 208, 10, 74, 147, 66,
-        6, 208, 10, 74, 147, 66, 10, 209, 9, 73, 2, 224, 9, 73, 0, 224, 9, 73,
-        79, 244, 103, 114, 177, 247, 17, 253, 1, 32, 56, 189, 0, 32, 56, 189,
-        0, 191, 192, 173, 58, 2, 128, 186, 140, 1, 0, 248, 36, 1, 200, 61, 5,
-        0, 142, 53, 5, 0, 52, 57, 5, 0, 16, 181, 4, 70, 222, 247, 168, 252,
-        212, 248, 248, 48, 211, 248, 36, 6, 183, 247, 183, 255, 212, 248, 248,
-        0, 189, 232, 16, 64, 183, 247, 177, 191, 248, 181, 4, 70, 64, 246, 60,
-        96, 183, 247, 168, 255, 5, 70, 196, 248, 248, 0, 0, 40, 125, 208, 0,
-        33, 64, 246, 60, 98, 179, 243, 56, 241, 1, 37, 163, 107, 132, 248, 58,
-        81, 132, 248, 168, 81, 216, 104, 189, 243, 57, 246, 57, 75, 196, 248,
-        148, 1, 227, 99, 56, 75, 32, 70, 35, 100, 55, 75, 99, 100, 55, 75, 163,
-        100, 55, 75, 196, 248, 148, 48, 55, 75, 227, 100, 55, 75, 35, 101, 55,
-        75, 163, 101, 55, 75, 35, 102, 55, 75, 99, 102, 55, 75, 35, 103, 55,
-        75, 196, 248, 168, 48, 54, 75, 196, 248, 164, 48, 54, 75, 196, 248,
-        128, 48, 53, 75, 196, 248, 180, 48, 53, 75, 196, 248, 176, 48, 52, 75,
-        196, 248, 184, 48, 52, 75, 196, 248, 188, 48, 51, 75, 196, 248, 192,
-        48, 51, 75, 196, 248, 136, 48, 50, 75, 196, 248, 196, 48, 50, 75, 196,
-        248, 200, 48, 49, 75, 196, 248, 204, 48, 49, 75, 196, 248, 208, 48,
-        48, 75, 196, 248, 212, 48, 255, 247, 81, 253, 56, 179, 32, 70, 255,
-        247, 89, 255, 24, 179, 32, 70, 255, 247, 251, 252, 248, 177, 32, 70,
-        255, 247, 23, 253, 212, 248, 248, 48, 0, 38, 196, 248, 236, 96, 196,
-        248, 240, 96, 32, 70, 131, 248, 192, 84, 255, 247, 31, 255, 35, 73,
-        50, 70, 32, 70, 212, 248, 248, 112, 215, 247, 196, 250, 32, 73, 135,
-        248, 56, 14, 50, 70, 32, 70, 215, 247, 189, 250, 132, 248, 98, 5, 0,
-        224, 5, 70, 40, 70, 248, 189, 0, 191, 153, 50, 3, 0, 187, 172, 2, 0,
-        139, 49, 3, 0, 209, 231, 2, 0, 115, 230, 2, 0, 189, 172, 2, 0, 225,
-        216, 2, 0, 85, 225, 2, 0, 183, 216, 2, 0, 125, 225, 2, 0, 193, 172,
-        2, 0, 99, 44, 3, 0, 227, 172, 2, 0, 229, 172, 2, 0, 231, 172, 2, 0,
-        233, 172, 2, 0, 1, 219, 2, 0, 157, 211, 2, 0, 1, 43, 3, 0, 101, 8, 5,
-        0, 235, 172, 2, 0, 241, 172, 2, 0, 243, 172, 2, 0, 247, 172, 2, 0, 239,
-        172, 2, 0, 126, 53, 5, 0, 112, 53, 5, 0, 131, 107, 147, 248, 44, 33,
-        10, 177, 4, 34, 0, 224, 3, 34, 26, 103, 218, 102, 112, 71, 248, 181,
-        7, 70, 12, 32, 13, 70, 22, 70, 183, 247, 219, 254, 4, 70, 48, 177, 0,
-        33, 12, 34, 179, 243, 111, 240, 39, 96, 102, 96, 165, 96, 32, 70, 248,
-        189, 8, 177, 183, 247, 208, 190, 112, 71, 128, 104, 200, 243, 63, 181,
-        0, 0, 112, 181, 6, 70, 134, 176, 108, 32, 183, 247, 194, 254, 4, 70,
-        216, 177, 0, 33, 108, 34, 179, 243, 86, 240, 22, 35, 163, 97, 14, 75,
-        38, 96, 0, 147, 14, 75, 0, 37, 4, 147, 48, 104, 13, 73, 13, 74, 35,
-        70, 1, 149, 2, 149, 3, 149, 5, 149, 186, 247, 105, 254, 56, 185, 50,
-        104, 1, 35, 130, 248, 146, 48, 35, 113, 32, 70, 6, 176, 112, 189, 32,
-        70, 183, 247, 161, 254, 44, 70, 247, 231, 97, 54, 134, 0, 84, 4, 4,
-        0, 36, 238, 135, 0, 48, 4, 4, 0, 16, 181, 4, 70, 104, 177, 3, 104, 6,
-        73, 24, 104, 34, 70, 250, 247, 199, 250, 32, 70, 19, 240, 10, 217, 32,
-        70, 189, 232, 16, 64, 183, 247, 134, 190, 16, 189, 48, 4, 4, 0, 16,
-        181, 4, 70, 72, 177, 5, 73, 34, 70, 64, 104, 250, 247, 180, 250, 32,
-        70, 189, 232, 16, 64, 183, 247, 118, 190, 16, 189, 206, 204, 136, 0,
-        112, 181, 6, 70, 134, 176, 16, 32, 183, 247, 106, 254, 4, 70, 48, 179,
-        0, 33, 16, 34, 178, 243, 254, 247, 51, 104, 38, 96, 99, 96, 115, 104,
-        0, 37, 163, 96, 4, 33, 48, 70, 14, 74, 15, 75, 0, 149, 1, 148, 253,
-        247, 36, 252, 168, 66, 224, 96, 13, 219, 12, 75, 48, 104, 141, 232,
-        40, 0, 11, 73, 11, 74, 35, 70, 2, 149, 3, 149, 4, 149, 5, 149, 186,
-        247, 5, 254, 24, 177, 32, 70, 255, 247, 194, 255, 0, 36, 32, 70, 6,
-        176, 112, 189, 157, 64, 134, 0, 133, 64, 134, 0, 241, 64, 134, 0, 228,
-        238, 135, 0, 206, 204, 136, 0, 48, 181, 5, 70, 135, 176, 20, 32, 183,
-        247, 46, 254, 4, 70, 56, 179, 0, 33, 20, 34, 178, 243, 194, 247, 107,
-        104, 40, 104, 163, 96, 18, 75, 37, 96, 96, 96, 0, 37, 0, 147, 16, 73,
-        17, 74, 35, 70, 1, 149, 2, 149, 3, 149, 4, 149, 5, 149, 186, 247, 213,
-        253, 96, 185, 10, 35, 35, 115, 15, 35, 99, 115, 100, 35, 163, 115, 2,
-        35, 227, 115, 6, 35, 35, 116, 1, 35, 99, 116, 3, 224, 32, 70, 183, 247,
-        8, 254, 44, 70, 32, 70, 7, 176, 48, 189, 0, 191, 225, 70, 134, 0, 252,
-        238, 135, 0, 47, 190, 136, 0, 16, 181, 4, 70, 72, 177, 5, 73, 34, 70,
-        64, 104, 250, 247, 46, 250, 32, 70, 189, 232, 16, 64, 183, 247, 240,
-        189, 16, 189, 47, 190, 136, 0, 16, 181, 4, 70, 88, 177, 6, 75, 33, 70,
-        27, 136, 195, 88, 24, 104, 250, 247, 166, 250, 32, 70, 189, 232, 16,
-        64, 183, 247, 222, 189, 16, 189, 16, 7, 0, 0, 115, 181, 5, 70, 12, 32,
-        183, 243, 121, 245, 4, 70, 200, 177, 16, 75, 4, 34, 26, 128, 2, 33,
-        69, 96, 0, 35, 1, 144, 13, 74, 40, 70, 0, 147, 253, 247, 147, 251, 0,
-        40, 32, 96, 10, 219, 1, 35, 35, 129, 9, 75, 40, 104, 0, 147, 33, 70,
-        8, 74, 2, 35, 186, 247, 202, 253, 24, 177, 32, 70, 255, 247, 202, 255,
-        0, 36, 32, 70, 124, 189, 0, 191, 16, 7, 0, 0, 31, 66, 3, 0, 44, 239,
-        135, 0, 17, 72, 134, 0, 56, 181, 4, 70, 128, 177, 9, 75, 33, 70, 27,
-        136, 197, 88, 40, 104, 250, 247, 100, 250, 40, 104, 6, 73, 34, 70, 250,
-        247, 213, 249, 32, 70, 189, 232, 56, 64, 183, 247, 151, 189, 56, 189,
-        0, 191, 18, 7, 0, 0, 191, 4, 4, 0, 240, 181, 5, 70, 135, 176, 20, 32,
-        183, 243, 46, 245, 4, 70, 0, 40, 86, 208, 47, 75, 4, 34, 26, 128, 69,
-        96, 0, 38, 1, 144, 4, 33, 40, 70, 44, 74, 44, 75, 0, 150, 253, 247,
-        70, 251, 176, 66, 32, 96, 70, 219, 1, 35, 163, 129, 12, 35, 35, 130,
-        40, 75, 7, 34, 226, 129, 0, 147, 39, 75, 40, 104, 1, 147, 38, 73, 39,
-        74, 35, 70, 2, 150, 3, 150, 4, 150, 5, 150, 186, 247, 32, 253, 0, 40,
-        48, 209, 35, 75, 40, 104, 0, 147, 33, 70, 34, 74, 5, 35, 186, 247, 105,
-        253, 56, 187, 32, 75, 213, 248, 124, 6, 141, 232, 24, 0, 79, 244, 144,
-        113, 42, 34, 29, 75, 254, 247, 53, 249, 216, 185, 213, 248, 124, 6,
-        128, 33, 42, 34, 26, 75, 0, 148, 254, 247, 216, 249, 144, 185, 181,
-        248, 174, 1, 191, 247, 149, 252, 128, 27, 24, 191, 1, 32, 10, 48, 85,
-        248, 32, 48, 27, 104, 2, 43, 9, 209, 1, 33, 32, 70, 10, 70, 20, 240,
-        75, 217, 3, 224, 32, 70, 255, 247, 131, 255, 0, 36, 32, 70, 7, 176,
-        240, 189, 0, 191, 18, 7, 0, 0, 197, 75, 134, 0, 177, 75, 134, 0, 69,
-        78, 134, 0, 93, 78, 134, 0, 100, 239, 135, 0, 191, 4, 4, 0, 60, 239,
-        135, 0, 113, 77, 134, 0, 97, 79, 134, 0, 81, 76, 134, 0, 97, 75, 134,
-        0, 8, 75, 16, 181, 27, 136, 4, 70, 80, 177, 195, 88, 6, 73, 24, 104,
-        34, 70, 250, 247, 63, 249, 32, 70, 189, 232, 16, 64, 183, 247, 1, 189,
-        16, 189, 0, 191, 20, 7, 0, 0, 198, 4, 4, 0, 112, 181, 5, 70, 134, 176,
-        20, 32, 183, 243, 152, 244, 4, 70, 0, 40, 68, 208, 38, 75, 8, 34, 26,
-        128, 0, 35, 133, 96, 4, 33, 0, 147, 1, 144, 35, 74, 40, 70, 35, 75,
-        253, 247, 176, 250, 0, 40, 32, 96, 52, 219, 2, 35, 163, 129, 5, 34,
-        12, 35, 226, 129, 35, 130, 213, 248, 124, 6, 128, 33, 61, 34, 28, 75,
-        0, 148, 254, 247, 103, 249, 40, 187, 26, 75, 2, 144, 0, 147, 26, 75,
-        3, 144, 1, 147, 4, 144, 5, 144, 24, 73, 40, 104, 24, 74, 35, 70, 186,
-        247, 129, 252, 176, 185, 181, 248, 174, 1, 191, 247, 21, 252, 43, 104,
-        147, 248, 79, 32, 26, 177, 3, 42, 20, 191, 3, 34, 1, 34, 32, 70, 1,
-        33, 20, 240, 3, 222, 32, 70, 2, 33, 79, 240, 255, 50, 20, 240, 253,
-        221, 3, 224, 32, 70, 255, 247, 153, 255, 0, 36, 32, 70, 6, 176, 112,
-        189, 0, 191, 20, 7, 0, 0, 153, 84, 134, 0, 133, 84, 134, 0, 81, 84,
-        134, 0, 1, 86, 134, 0, 105, 87, 134, 0, 112, 239, 135, 0, 198, 4, 4,
-        0, 56, 181, 4, 70, 152, 177, 5, 104, 34, 70, 40, 70, 8, 73, 253, 247,
-        122, 250, 33, 70, 40, 104, 250, 247, 75, 249, 40, 104, 5, 73, 34, 70,
-        250, 247, 188, 248, 32, 70, 189, 232, 56, 64, 183, 247, 126, 188, 56,
-        189, 161, 96, 134, 0, 237, 190, 136, 0, 48, 181, 5, 70, 135, 176, 8,
-        32, 183, 243, 22, 244, 4, 70, 0, 40, 62, 208, 0, 35, 5, 96, 4, 33, 0,
-        147, 1, 144, 32, 74, 40, 70, 32, 75, 253, 247, 49, 250, 0, 40, 96, 96,
-        49, 219, 40, 70, 30, 73, 34, 70, 253, 247, 71, 250, 88, 187, 28, 75,
-        1, 144, 0, 147, 2, 144, 3, 144, 4, 144, 5, 144, 26, 73, 40, 104, 26,
-        74, 35, 70, 186, 247, 12, 252, 232, 185, 24, 75, 40, 104, 0, 147, 33,
-        70, 23, 74, 1, 35, 186, 247, 86, 252, 160, 185, 22, 75, 213, 248, 124,
-        6, 141, 232, 24, 0, 79, 244, 144, 113, 40, 34, 19, 75, 254, 247, 34,
-        248, 64, 185, 213, 248, 124, 6, 128, 33, 40, 34, 16, 75, 0, 148, 254,
-        247, 197, 248, 24, 177, 32, 70, 255, 247, 153, 255, 0, 36, 32, 70, 7,
-        176, 48, 189, 0, 191, 37, 96, 134, 0, 229, 95, 134, 0, 161, 96, 134,
-        0, 69, 97, 134, 0, 204, 239, 135, 0, 237, 190, 136, 0, 196, 239, 135,
-        0, 25, 97, 134, 0, 125, 66, 3, 0, 73, 66, 3, 0, 201, 95, 134, 0, 112,
-        181, 6, 70, 134, 176, 156, 32, 183, 243, 176, 243, 4, 70, 0, 40, 52,
-        208, 6, 96, 27, 75, 48, 104, 0, 37, 96, 96, 26, 73, 0, 147, 26, 74,
-        35, 70, 1, 149, 2, 149, 3, 149, 4, 149, 5, 149, 186, 247, 182, 251,
-        248, 185, 214, 248, 116, 52, 30, 34, 155, 120, 34, 97, 4, 34, 226, 114,
-        2, 34, 35, 119, 34, 115, 1, 35, 10, 34, 227, 118, 35, 114, 99, 97, 98,
-        115, 163, 118, 79, 246, 175, 114, 163, 119, 132, 248, 153, 48, 16, 35,
-        160, 115, 96, 114, 160, 114, 34, 131, 132, 248, 154, 48, 132, 248, 152,
-        48, 3, 224, 32, 70, 183, 247, 214, 251, 44, 70, 32, 70, 6, 176, 112,
-        189, 0, 191, 37, 75, 3, 0, 120, 5, 4, 0, 92, 74, 5, 0, 192, 248, 132,
-        16, 192, 248, 136, 32, 192, 248, 140, 48, 112, 71, 0, 0, 16, 181, 4,
-        70, 72, 177, 5, 73, 34, 70, 64, 104, 249, 247, 244, 255, 32, 70, 189,
-        232, 16, 64, 183, 247, 182, 187, 16, 189, 92, 74, 5, 0, 45, 233, 240,
-        67, 7, 70, 135, 176, 79, 244, 65, 112, 14, 70, 21, 70, 152, 70, 183,
-        247, 165, 251, 4, 70, 0, 40, 122, 208, 0, 33, 79, 244, 65, 114, 178,
-        243, 55, 245, 40, 32, 183, 247, 154, 251, 129, 70, 32, 96, 32, 185,
-        32, 70, 183, 247, 151, 251, 72, 70, 106, 224, 0, 33, 40, 34, 178, 243,
-        40, 245, 35, 104, 79, 244, 65, 114, 28, 96, 98, 97, 229, 96, 79, 240,
-        255, 50, 0, 37, 162, 97, 167, 96, 196, 248, 4, 128, 157, 113, 20, 35,
-        164, 248, 8, 50, 40, 35, 164, 248, 6, 50, 45, 35, 164, 248, 4, 50, 110,
-        35, 164, 248, 10, 50, 2, 35, 132, 248, 12, 50, 100, 35, 164, 248, 56,
-        50, 132, 248, 13, 82, 48, 70, 35, 73, 34, 70, 43, 70, 200, 243, 234,
-        241, 196, 248, 248, 1, 64, 179, 4, 245, 20, 115, 196, 248, 24, 50, 196,
-        248, 20, 50, 29, 75, 5, 38, 196, 248, 28, 98, 0, 147, 27, 75, 2, 149,
-        1, 147, 27, 75, 27, 73, 3, 147, 27, 75, 28, 74, 4, 147, 28, 75, 5, 147,
-        56, 104, 35, 70, 186, 247, 8, 251, 3, 70, 96, 185, 0, 144, 56, 104,
-        33, 104, 23, 74, 186, 247, 83, 251, 40, 185, 132, 248, 64, 98, 132,
-        248, 65, 98, 32, 104, 18, 224, 212, 248, 248, 17, 25, 177, 163, 104,
-        152, 104, 200, 243, 169, 241, 32, 105, 8, 177, 0, 240, 67, 248, 32,
-        104, 8, 177, 183, 247, 46, 251, 32, 70, 183, 247, 43, 251, 0, 32, 7,
-        176, 189, 232, 240, 131, 21, 118, 3, 0, 105, 140, 134, 0, 169, 147,
-        134, 0, 45, 157, 134, 0, 148, 250, 135, 0, 12, 11, 4, 0, 51, 197, 136,
-        0, 161, 115, 3, 0, 89, 158, 134, 0, 56, 181, 5, 70, 240, 177, 4, 104,
-        228, 177, 212, 248, 248, 17, 49, 177, 163, 104, 152, 104, 200, 243,
-        124, 241, 0, 35, 196, 248, 248, 49, 163, 104, 34, 70, 24, 104, 8, 73,
-        249, 247, 57, 255, 163, 104, 33, 104, 24, 104, 249, 247, 190, 255, 40,
-        70, 183, 247, 248, 250, 32, 70, 189, 232, 56, 64, 183, 247, 243, 186,
-        56, 189, 0, 191, 51, 197, 136, 0, 16, 181, 4, 70, 48, 177, 230, 247,
-        190, 251, 32, 70, 189, 232, 16, 64, 183, 247, 229, 186, 16, 189, 0,
-        0, 247, 181, 6, 104, 5, 70, 243, 105, 31, 109, 2, 55, 63, 1, 56, 70,
-        183, 247, 214, 250, 4, 70, 16, 179, 0, 33, 58, 70, 178, 243, 106, 244,
-        132, 232, 96, 0, 16, 33, 0, 38, 40, 70, 14, 74, 14, 75, 0, 150, 1, 148,
-        253, 247, 147, 248, 176, 66, 160, 97, 12, 219, 4, 241, 32, 3, 99, 97,
-        79, 244, 55, 115, 227, 96, 213, 248, 32, 6, 4, 241, 28, 1, 177, 243,
-        58, 246, 24, 177, 32, 70, 183, 247, 181, 250, 52, 70, 32, 70, 254, 189,
-        0, 191, 137, 163, 134, 0, 65, 123, 3, 0, 16, 181, 4, 70, 72, 177, 195,
-        105, 19, 177, 28, 48, 177, 243, 60, 246, 32, 70, 189, 232, 16, 64, 183,
-        247, 160, 186, 16, 189, 240, 181, 208, 248, 36, 65, 0, 104, 37, 105,
-        192, 105, 0, 109, 133, 66, 17, 210, 103, 105, 46, 1, 184, 25, 1, 53,
-        37, 97, 67, 96, 5, 155, 186, 81, 131, 96, 6, 155, 195, 96, 224, 104,
-        195, 28, 89, 24, 33, 240, 3, 1, 225, 96, 240, 189, 79, 240, 255, 48,
-        240, 189, 55, 181, 5, 70, 24, 32, 183, 247, 121, 250, 4, 70, 56, 179,
-        0, 33, 24, 34, 178, 243, 13, 244, 43, 104, 37, 96, 99, 96, 107, 104,
-        40, 70, 163, 96, 255, 247, 55, 252, 224, 96, 136, 177, 26, 240, 207,
-        216, 0, 35, 1, 70, 141, 232, 24, 0, 40, 70, 10, 74, 11, 75, 255, 247,
-        194, 255, 0, 40, 32, 97, 3, 219, 19, 240, 107, 217, 96, 97, 7, 224,
-        224, 104, 8, 177, 255, 247, 89, 252, 32, 70, 183, 247, 83, 250, 0, 36,
-        32, 70, 62, 189, 0, 191, 225, 180, 134, 0, 189, 180, 134, 0, 16, 181,
-        4, 70, 56, 177, 192, 104, 255, 247, 72, 252, 32, 70, 189, 232, 16, 64,
-        183, 247, 64, 186, 16, 189, 115, 181, 5, 70, 24, 32, 183, 247, 55, 250,
-        4, 70, 0, 40, 56, 208, 0, 33, 24, 34, 178, 243, 202, 243, 12, 32, 183,
-        247, 45, 250, 6, 70, 0, 40, 45, 208, 0, 33, 12, 34, 178, 243, 192, 243,
-        43, 104, 102, 97, 37, 96, 99, 96, 40, 70, 255, 247, 15, 254, 160, 96,
-        184, 177, 230, 247, 153, 252, 0, 35, 1, 70, 141, 232, 40, 0, 40, 70,
-        14, 74, 15, 75, 255, 247, 118, 255, 0, 40, 224, 96, 9, 219, 229, 247,
-        67, 254, 12, 73, 32, 97, 12, 74, 160, 104, 12, 75, 255, 247, 62, 254,
-        9, 224, 160, 104, 8, 177, 255, 247, 65, 254, 32, 70, 183, 247, 1, 250,
-        0, 36, 0, 224, 4, 70, 32, 70, 124, 189, 0, 191, 45, 125, 3, 0, 11, 125,
-        3, 0, 225, 124, 3, 0, 237, 124, 3, 0, 249, 124, 3, 0, 16, 181, 4, 70,
-        80, 177, 128, 104, 255, 247, 40, 254, 96, 105, 183, 247, 232, 249, 32,
-        70, 189, 232, 16, 64, 183, 247, 227, 185, 16, 189, 0, 0, 112, 181, 6,
-        70, 134, 176, 24, 32, 13, 70, 183, 247, 215, 249, 4, 70, 176, 177, 0,
-        33, 24, 34, 178, 243, 107, 243, 1, 35, 99, 96, 12, 75, 165, 96, 38,
-        96, 0, 37, 0, 147, 48, 104, 10, 73, 10, 74, 35, 70, 1, 149, 2, 149,
-        3, 149, 4, 149, 5, 149, 186, 247, 126, 249, 16, 185, 32, 70, 6, 176,
-        112, 189, 32, 70, 183, 247, 187, 249, 44, 70, 247, 231, 249, 136, 3,
-        0, 36, 11, 4, 0, 140, 11, 4, 0, 16, 181, 4, 70, 104, 177, 3, 104, 6,
-        73, 24, 104, 34, 70, 249, 247, 227, 253, 32, 70, 231, 247, 25, 250,
-        32, 70, 189, 232, 16, 64, 183, 247, 162, 185, 16, 189, 140, 11, 4, 0,
-        3, 104, 16, 181, 4, 70, 6, 73, 24, 104, 34, 70, 249, 247, 208, 253,
-        96, 104, 183, 247, 148, 249, 32, 70, 189, 232, 16, 64, 183, 247, 143,
-        185, 48, 86, 136, 0, 112, 181, 5, 70, 134, 176, 8, 32, 183, 247, 132,
-        249, 4, 70, 0, 40, 44, 208, 0, 33, 8, 34, 178, 243, 23, 243, 22, 75,
-        37, 96, 0, 147, 0, 35, 1, 147, 2, 147, 3, 147, 4, 147, 5, 147, 40, 104,
-        18, 73, 18, 74, 35, 70, 186, 247, 45, 249, 6, 70, 152, 185, 56, 32,
-        183, 247, 105, 249, 96, 96, 112, 177, 56, 34, 49, 70, 178, 243, 253,
-        242, 99, 104, 10, 34, 218, 96, 111, 240, 0, 66, 154, 96, 43, 104, 1,
-        34, 131, 248, 39, 33, 3, 224, 32, 70, 255, 247, 185, 255, 0, 36, 32,
-        70, 6, 176, 112, 189, 0, 191, 191, 138, 3, 0, 228, 11, 4, 0, 48, 86,
-        136, 0, 112, 181, 67, 75, 134, 176, 0, 147, 0, 35, 1, 147, 2, 147, 3,
-        147, 4, 147, 5, 147, 4, 70, 63, 73, 0, 104, 63, 74, 35, 70, 186, 247,
-        248, 248, 5, 70, 0, 40, 111, 209, 212, 248, 116, 52, 20, 33, 163, 248,
-        100, 16, 163, 106, 1, 38, 131, 248, 76, 0, 227, 106, 32, 70, 131, 248,
-        76, 96, 161, 106, 232, 247, 59, 248, 225, 106, 32, 70, 232, 247, 55,
-        248, 32, 70, 41, 70, 231, 247, 208, 253, 163, 106, 131, 248, 77, 80,
-        227, 106, 131, 248, 77, 80, 35, 106, 24, 105, 215, 247, 40, 255, 131,
-        7, 7, 213, 212, 248, 116, 52, 79, 240, 255, 50, 94, 115, 212, 248, 116,
-        52, 218, 129, 35, 104, 212, 248, 116, 84, 94, 105, 226, 247, 135, 251,
-        1, 70, 48, 70, 226, 247, 105, 251, 232, 98, 0, 40, 54, 208, 212, 248,
-        116, 52, 31, 34, 131, 248, 120, 32, 212, 248, 116, 4, 5, 34, 87, 48,
-        79, 240, 255, 49, 178, 243, 138, 242, 35, 104, 212, 248, 116, 36, 179,
-        248, 204, 16, 211, 248, 220, 0, 81, 133, 10, 33, 81, 99, 20, 73, 181,
-        247, 113, 248, 67, 30, 13, 43, 212, 248, 116, 84, 35, 104, 152, 191,
-        104, 99, 16, 73, 211, 248, 220, 0, 181, 247, 101, 248, 133, 248, 138,
-        0, 212, 248, 116, 52, 1, 34, 131, 248, 81, 32, 212, 248, 116, 52, 0,
-        32, 26, 120, 131, 248, 78, 32, 212, 248, 116, 52, 88, 103, 1, 224, 79,
-        240, 255, 48, 6, 176, 112, 189, 103, 154, 3, 0, 36, 14, 4, 0, 100, 74,
-        5, 0, 119, 74, 5, 0, 104, 74, 5, 0, 208, 248, 116, 52, 16, 181, 217,
-        106, 4, 70, 17, 177, 64, 104, 226, 247, 38, 251, 32, 104, 2, 73, 34,
-        70, 189, 232, 16, 64, 249, 247, 228, 188, 100, 74, 5, 0, 56, 181, 3,
-        104, 4, 70, 208, 248, 116, 84, 39, 73, 211, 248, 220, 0, 181, 247, 42,
-        248, 40, 112, 35, 104, 36, 73, 211, 248, 220, 0, 212, 248, 116, 84,
-        181, 247, 33, 248, 232, 112, 212, 248, 116, 52, 26, 120, 1, 58, 210,
-        178, 253, 42, 1, 217, 1, 34, 26, 112, 212, 248, 116, 52, 26, 120, 90,
-        112, 0, 35, 212, 248, 116, 36, 209, 24, 18, 120, 1, 51, 5, 43, 129,
-        248, 82, 32, 246, 209, 212, 248, 116, 84, 1, 33, 40, 70, 178, 243, 119,
-        244, 168, 112, 212, 248, 116, 52, 218, 120, 1, 58, 210, 178, 253, 42,
-        1, 217, 1, 34, 218, 112, 212, 248, 116, 52, 1, 33, 218, 120, 90, 113,
-        212, 248, 116, 84, 232, 28, 178, 243, 99, 244, 40, 113, 212, 248, 116,
-        52, 32, 70, 26, 121, 154, 113, 231, 247, 25, 250, 180, 248, 72, 20,
-        32, 70, 189, 232, 56, 64, 231, 247, 210, 190, 132, 74, 5, 0, 140, 74,
-        5, 0, 248, 181, 208, 248, 116, 100, 4, 70, 13, 70, 209, 248, 220, 0,
-        180, 73, 180, 247, 210, 255, 134, 248, 28, 1, 178, 73, 213, 248, 220,
-        0, 212, 248, 116, 100, 180, 247, 201, 255, 134, 248, 232, 0, 213, 248,
-        220, 0, 174, 73, 180, 247, 192, 255, 212, 248, 116, 100, 56, 177, 213,
-        248, 220, 0, 170, 73, 180, 247, 186, 255, 134, 248, 88, 1, 2, 224, 255,
-        35, 134, 248, 88, 49, 166, 73, 213, 248, 220, 0, 212, 248, 116, 100,
-        180, 247, 173, 255, 164, 73, 198, 248, 32, 1, 213, 248, 220, 0, 212,
-        248, 116, 100, 180, 247, 164, 255, 160, 73, 166, 248, 42, 1, 213, 248,
-        220, 0, 212, 248, 116, 100, 180, 247, 155, 255, 157, 73, 166, 248, 44,
-        1, 213, 248, 220, 0, 212, 248, 116, 100, 180, 247, 146, 255, 153, 73,
-        166, 248, 46, 1, 213, 248, 220, 0, 212, 248, 116, 100, 180, 247, 137,
-        255, 134, 248, 233, 0, 212, 248, 116, 52, 147, 248, 233, 32, 18, 185,
-        2, 34, 131, 248, 233, 32, 213, 248, 220, 0, 144, 73, 212, 248, 116,
-        100, 180, 247, 120, 255, 166, 248, 198, 0, 212, 248, 116, 100, 182,
-        249, 198, 48, 19, 185, 1, 35, 166, 248, 198, 48, 213, 248, 220, 0, 136,
-        73, 180, 247, 105, 255, 198, 248, 216, 0, 212, 248, 116, 100, 214, 248,
-        216, 48, 27, 185, 76, 242, 80, 51, 198, 248, 216, 48, 150, 248, 233,
-        48, 1, 34, 154, 64, 214, 248, 216, 16, 213, 248, 220, 0, 138, 66, 136,
-        191, 198, 248, 216, 32, 2, 34, 18, 250, 3, 243, 123, 73, 198, 248, 220,
-        48, 180, 247, 74, 255, 198, 248, 228, 0, 212, 248, 116, 100, 214, 248,
-        228, 48, 27, 185, 79, 244, 150, 115, 198, 248, 228, 48, 213, 248, 220,
-        0, 115, 73, 180, 247, 58, 255, 166, 248, 196, 0, 212, 248, 116, 100,
-        182, 249, 196, 48, 19, 185, 25, 35, 166, 248, 196, 48, 109, 73, 213,
-        248, 220, 0, 180, 247, 43, 255, 212, 248, 116, 52, 166, 248, 240, 0,
-        147, 248, 28, 33, 105, 73, 131, 248, 29, 33, 212, 248, 116, 52, 147,
-        248, 29, 33, 131, 248, 72, 33, 212, 248, 116, 52, 218, 121, 131, 248,
-        172, 32, 212, 248, 116, 52, 26, 122, 131, 248, 69, 33, 212, 248, 116,
-        100, 79, 246, 162, 115, 166, 248, 234, 48, 166, 248, 236, 48, 166, 248,
-        238, 48, 213, 248, 220, 0, 180, 247, 4, 255, 166, 248, 242, 0, 212,
-        248, 116, 100, 182, 249, 242, 48, 27, 185, 79, 246, 162, 115, 166, 248,
-        242, 48, 150, 248, 233, 48, 1, 34, 18, 250, 3, 243, 214, 248, 216, 32,
-        80, 73, 147, 66, 136, 191, 198, 248, 216, 48, 0, 35, 166, 248, 178,
-        48, 166, 248, 180, 48, 166, 248, 182, 48, 198, 248, 184, 48, 198, 248,
-        188, 48, 198, 248, 192, 48, 213, 248, 220, 0, 31, 70, 180, 247, 219,
-        254, 134, 248, 68, 1, 69, 73, 213, 248, 220, 0, 212, 248, 116, 100,
-        180, 247, 210, 254, 134, 248, 75, 1, 213, 248, 220, 0, 64, 73, 212,
-        248, 116, 100, 180, 247, 201, 254, 212, 248, 116, 52, 198, 248, 36,
-        1, 131, 248, 41, 113, 212, 248, 116, 52, 211, 248, 36, 33, 26, 185,
-        79, 244, 155, 114, 195, 248, 36, 33, 147, 248, 29, 33, 2, 177, 3, 34,
-        195, 248, 76, 33, 195, 248, 80, 33, 0, 34, 195, 248, 84, 33, 213, 248,
-        220, 0, 49, 73, 180, 247, 168, 254, 64, 177, 213, 248, 220, 0, 46, 73,
-        212, 248, 116, 100, 180, 247, 162, 254, 198, 248, 84, 1, 213, 248, 220,
-        0, 42, 73, 180, 247, 153, 254, 64, 177, 213, 248, 220, 0, 39, 73, 212,
-        248, 116, 100, 180, 247, 147, 254, 198, 248, 76, 1, 213, 248, 220, 0,
-        36, 73, 180, 247, 138, 254, 64, 177, 213, 248, 220, 0, 33, 73, 212,
-        248, 116, 100, 180, 247, 132, 254, 198, 248, 80, 1, 30, 73, 34, 70,
-        0, 35, 160, 104, 212, 248, 116, 84, 199, 243, 112, 245, 27, 73, 197,
-        248, 48, 1, 34, 70, 160, 104, 0, 35, 212, 248, 116, 84, 199, 243, 102,
-        245, 197, 248, 52, 1, 248, 189, 0, 191, 31, 75, 5, 0, 149, 75, 5, 0,
-        101, 75, 5, 0, 72, 75, 5, 0, 193, 74, 5, 0, 225, 74, 5, 0, 243, 74,
-        5, 0, 135, 75, 5, 0, 148, 74, 5, 0, 88, 75, 5, 0, 18, 75, 5, 0, 180,
-        74, 5, 0, 178, 75, 5, 0, 114, 75, 5, 0, 5, 75, 5, 0, 164, 74, 5, 0,
-        211, 74, 5, 0, 160, 75, 5, 0, 40, 75, 5, 0, 56, 75, 5, 0, 61, 167, 3,
-        0, 239, 171, 3, 0, 56, 181, 4, 70, 112, 177, 5, 104, 33, 70, 40, 104,
-        249, 247, 112, 251, 40, 104, 5, 73, 34, 70, 249, 247, 225, 250, 32,
-        70, 189, 232, 56, 64, 182, 247, 163, 190, 56, 189, 0, 191, 28, 16, 4,
-        0, 48, 181, 5, 70, 135, 176, 12, 32, 182, 243, 60, 246, 4, 70, 0, 40,
-        70, 208, 39, 75, 5, 96, 79, 244, 144, 113, 0, 147, 1, 144, 32, 34, 213,
-        248, 124, 6, 35, 75, 253, 247, 113, 250, 0, 40, 56, 209, 34, 75, 213,
-        248, 124, 6, 141, 232, 24, 0, 79, 244, 144, 113, 35, 34, 31, 75, 253,
-        247, 100, 250, 0, 40, 43, 209, 29, 75, 213, 248, 124, 6, 141, 232, 24,
-        0, 64, 33, 136, 34, 27, 75, 253, 247, 120, 250, 0, 187, 213, 248, 124,
-        6, 128, 33, 32, 34, 24, 75, 0, 148, 253, 247, 251, 250, 184, 185, 22,
-        75, 2, 144, 0, 147, 22, 75, 3, 144, 1, 147, 4, 144, 5, 144, 20, 73,
-        40, 104, 20, 74, 35, 70, 185, 247, 21, 254, 64, 185, 19, 75, 40, 104,
-        0, 147, 33, 70, 18, 74, 1, 35, 185, 247, 95, 254, 24, 177, 32, 70, 255,
-        247, 151, 255, 0, 36, 32, 70, 7, 176, 48, 189, 0, 191, 97, 93, 135,
-        0, 165, 91, 135, 0, 149, 93, 135, 0, 201, 91, 135, 0, 1, 93, 135, 0,
-        145, 91, 135, 0, 121, 91, 135, 0, 9, 177, 3, 0, 253, 92, 135, 0, 68,
-        16, 4, 0, 28, 16, 4, 0, 248, 252, 135, 0, 237, 91, 135, 0, 16, 181,
-        4, 70, 96, 177, 7, 75, 7, 73, 27, 136, 34, 70, 195, 88, 24, 104, 249,
-        247, 91, 250, 32, 70, 189, 232, 16, 64, 182, 247, 29, 190, 16, 189,
-        0, 191, 22, 7, 0, 0, 128, 16, 4, 0, 240, 181, 7, 70, 135, 176, 20, 32,
-        182, 243, 180, 245, 5, 70, 32, 179, 21, 75, 6, 70, 0, 36, 4, 34, 6,
-        248, 4, 75, 26, 128, 1, 35, 71, 96, 51, 114, 244, 96, 116, 114, 4, 33,
-        1, 144, 15, 74, 56, 70, 15, 75, 0, 148, 255, 247, 92, 251, 160, 66,
-        112, 96, 13, 219, 13, 75, 0, 148, 1, 147, 2, 148, 3, 148, 4, 148, 5,
-        148, 56, 104, 33, 70, 9, 74, 43, 70, 185, 247, 167, 253, 24, 177, 40,
-        70, 255, 247, 186, 255, 0, 37, 40, 70, 7, 176, 240, 189, 22, 7, 0, 0,
-        169, 94, 135, 0, 137, 94, 135, 0, 249, 94, 135, 0, 128, 16, 4, 0, 112,
-        181, 5, 70, 134, 176, 24, 32, 182, 243, 118, 245, 4, 70, 0, 40, 90,
-        208, 43, 104, 0, 38, 1, 34, 67, 96, 5, 96, 8, 33, 131, 248, 177, 32,
-        1, 144, 50, 70, 40, 70, 51, 70, 0, 150, 255, 247, 34, 251, 176, 66,
-        32, 97, 75, 219, 16, 33, 40, 70, 39, 74, 39, 75, 0, 150, 1, 148, 252,
-        247, 129, 251, 176, 66, 197, 248, 156, 1, 63, 219, 4, 35, 227, 96, 35,
-        75, 160, 96, 5, 33, 141, 232, 24, 0, 213, 248, 124, 6, 68, 34, 32, 75,
-        253, 247, 140, 249, 0, 40, 48, 209, 30, 75, 213, 248, 124, 6, 141, 232,
-        24, 0, 79, 244, 144, 113, 68, 34, 27, 75, 253, 247, 127, 249, 0, 40,
-        35, 209, 213, 248, 124, 6, 5, 33, 68, 34, 24, 75, 0, 148, 253, 247,
-        101, 251, 208, 185, 213, 248, 124, 6, 192, 33, 68, 34, 20, 75, 0, 148,
-        253, 247, 92, 251, 136, 185, 19, 75, 1, 144, 0, 147, 18, 75, 3, 144,
-        2, 147, 4, 144, 5, 144, 17, 73, 40, 104, 17, 74, 35, 70, 185, 247, 50,
-        253, 16, 185, 32, 70, 6, 176, 112, 189, 32, 70, 182, 247, 111, 253,
-        0, 36, 247, 231, 41, 104, 135, 0, 13, 104, 135, 0, 137, 103, 135, 0,
-        217, 102, 135, 0, 229, 103, 135, 0, 177, 103, 135, 0, 253, 102, 135,
-        0, 241, 107, 135, 0, 121, 105, 135, 0, 129, 108, 135, 0, 68, 253, 135,
-        0, 132, 16, 4, 0, 16, 181, 4, 70, 72, 177, 5, 73, 34, 70, 64, 104, 249,
-        247, 134, 249, 32, 70, 189, 232, 16, 64, 182, 247, 72, 189, 16, 189,
-        132, 16, 4, 0, 115, 114, 111, 109, 95, 112, 97, 114, 115, 101, 99, 105,
-        115, 0, 119, 108, 99, 95, 98, 109, 97, 99, 95, 105, 110, 102, 111, 95,
-        105, 110, 105, 116, 0, 100, 101, 97, 100, 109, 97, 110, 95, 116, 111,
-        0, 114, 97, 109, 115, 116, 98, 121, 100, 105, 115, 0, 100, 101, 97,
-        100, 109, 97, 110, 95, 116, 111, 0, 115, 112, 105, 95, 112, 117, 95,
-        101, 110, 97, 98, 0, 83, 68, 73, 79, 68, 69, 86, 0, 103, 115, 112, 105,
-        100, 119, 111, 114, 100, 0, 80, 67, 77, 67, 73, 65, 68, 69, 86, 0, 115,
-        100, 95, 111, 111, 98, 111, 110, 108, 121, 0, 115, 100, 95, 103, 112,
-        111, 117, 116, 0, 71, 83, 80, 73, 32, 68, 119, 111, 114, 100, 32, 77,
-        111, 100, 101, 32, 101, 110, 97, 98, 108, 101, 100, 10, 0, 115, 100,
-        95, 103, 112, 100, 99, 0, 115, 100, 95, 103, 112, 118, 97, 108, 0, 37,
-        115, 58, 32, 66, 114, 111, 97, 100, 99, 111, 109, 32, 83, 68, 80, 67,
-        77, 68, 32, 67, 68, 67, 32, 100, 114, 105, 118, 101, 114, 10, 0, 115,
-        100, 112, 99, 109, 100, 99, 100, 99, 37, 100, 0, 83, 68, 73, 79, 0,
-        10, 82, 84, 69, 32, 40, 37, 115, 45, 37, 115, 37, 115, 37, 115, 41,
-        32, 37, 115, 32, 111, 110, 32, 66, 67, 77, 37, 115, 32, 114, 37, 100,
-        32, 64, 32, 37, 100, 46, 37, 100, 47, 37, 100, 46, 37, 100, 47, 37,
-        100, 46, 37, 100, 77, 72, 122, 10, 0, 0, 67, 68, 67, 0, 110, 111, 99,
-        114, 99, 0, 110, 111, 116, 105, 102, 95, 99, 0, 110, 111, 116, 105,
-        102, 95, 115, 0, 111, 102, 100, 109, 50, 103, 112, 111, 61, 48, 120,
-        37, 120, 0, 112, 97, 37, 100, 103, 119, 37, 100, 97, 37, 100, 61, 48,
-        120, 37, 120, 0, 112, 97, 49, 104, 105, 98, 48, 61, 37, 100, 0, 112,
-        97, 49, 104, 105, 98, 49, 61, 37, 100, 0, 112, 97, 49, 104, 105, 98,
-        50, 61, 37, 100, 0, 103, 97, 105, 110, 99, 116, 114, 108, 115, 112,
-        104, 61, 37, 100, 0, 112, 97, 49, 109, 97, 120, 112, 119, 114, 61, 37,
-        100, 0, 109, 101, 97, 115, 112, 111, 119, 101, 114, 37, 100, 61, 48,
-        120, 37, 120, 0, 114, 120, 103, 97, 105, 110, 115, 37, 100, 103, 37,
-        99, 116, 114, 101, 108, 110, 97, 98, 121, 112, 97, 37, 100, 61, 37,
-        100, 0, 112, 97, 50, 103, 97, 37, 100, 61, 48, 120, 37, 120, 44, 48,
-        120, 37, 120, 44, 48, 120, 37, 120, 0, 114, 115, 115, 105, 115, 109,
-        99, 53, 103, 61, 37, 100, 0, 117, 115, 98, 102, 108, 97, 103, 115, 61,
-        48, 120, 37, 120, 0, 112, 97, 50, 103, 99, 99, 107, 97, 37, 100, 61,
-        48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 0, 112,
-        100, 101, 116, 114, 97, 110, 103, 101, 50, 103, 61, 48, 120, 37, 120,
-        0, 117, 115, 98, 51, 48, 117, 49, 117, 50, 61, 48, 120, 37, 120, 0,
-        115, 117, 98, 118, 101, 110, 100, 105, 100, 61, 48, 120, 37, 120, 0,
-        97, 103, 37, 100, 61, 48, 120, 37, 120, 0, 111, 101, 109, 61, 37, 48,
-        50, 120, 37, 48, 50, 120, 37, 48, 50, 120, 37, 48, 50, 120, 37, 48,
-        50, 120, 37, 48, 50, 120, 37, 48, 50, 120, 37, 48, 50, 120, 0, 111,
-        102, 100, 109, 112, 111, 61, 48, 120, 37, 120, 0, 116, 101, 109, 112,
-        111, 102, 102, 115, 101, 116, 61, 37, 100, 0, 109, 101, 97, 115, 112,
-        111, 119, 101, 114, 61, 48, 120, 37, 120, 0, 114, 115, 115, 105, 115,
-        109, 102, 50, 103, 61, 37, 100, 0, 112, 97, 112, 97, 114, 97, 109, 98,
-        119, 118, 101, 114, 61, 37, 100, 0, 100, 111, 116, 49, 49, 97, 103,
-        111, 102, 100, 109, 104, 114, 98, 119, 50, 48, 50, 103, 112, 111, 61,
-        48, 120, 37, 120, 0, 105, 116, 116, 50, 103, 97, 48, 61, 48, 120, 37,
-        120, 0, 98, 120, 97, 50, 103, 61, 37, 100, 0, 114, 115, 115, 105, 115,
-        109, 99, 50, 103, 61, 37, 100, 0, 112, 97, 53, 103, 98, 119, 52, 48,
-        97, 37, 100, 61, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120,
-        37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37,
-        120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120,
-        44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 0,
-        109, 99, 115, 98, 119, 50, 48, 53, 103, 108, 112, 111, 61, 48, 120,
-        37, 120, 0, 0, 0, 109, 99, 115, 98, 119, 50, 48, 117, 108, 53, 103,
-        108, 112, 111, 61, 48, 120, 37, 120, 0, 109, 99, 115, 98, 119, 52, 48,
-        53, 103, 108, 112, 111, 61, 48, 120, 37, 120, 0, 0, 0, 117, 115, 98,
-        117, 116, 109, 105, 95, 99, 116, 108, 61, 48, 120, 37, 120, 0, 101,
-        120, 116, 112, 97, 103, 97, 105, 110, 50, 103, 61, 48, 120, 37, 120,
-        0, 97, 110, 116, 115, 119, 99, 116, 108, 50, 103, 61, 48, 120, 37, 120,
-        0, 112, 114, 111, 100, 117, 99, 116, 110, 97, 109, 101, 61, 37, 115,
-        0, 116, 120, 95, 100, 117, 116, 121, 95, 99, 121, 99, 108, 101, 95,
-        116, 104, 114, 101, 115, 104, 95, 37, 100, 95, 53, 103, 61, 37, 100,
-        0, 114, 120, 103, 97, 105, 110, 101, 114, 114, 50, 103, 97, 37, 100,
-        61, 48, 120, 37, 120, 0, 97, 103, 48, 0, 109, 97, 120, 112, 50, 103,
-        97, 37, 100, 61, 48, 120, 37, 120, 0, 98, 119, 100, 117, 112, 112, 111,
-        61, 48, 120, 37, 120, 0, 110, 111, 105, 115, 101, 108, 118, 108, 53,
-        103, 97, 37, 100, 61, 37, 100, 44, 37, 100, 44, 37, 100, 44, 37, 100,
-        0, 98, 119, 52, 48, 112, 111, 61, 48, 120, 37, 120, 0, 112, 97, 53,
-        103, 98, 119, 56, 48, 97, 37, 100, 61, 48, 120, 37, 120, 44, 48, 120,
-        37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37,
-        120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120,
-        44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44,
-        48, 120, 37, 120, 0, 117, 115, 98, 51, 48, 117, 49, 117, 50, 61, 48,
-        120, 37, 120, 0, 112, 100, 101, 116, 114, 97, 110, 103, 101, 53, 103,
-        61, 48, 120, 37, 120, 0, 109, 97, 99, 97, 100, 100, 114, 61, 37, 115,
-        0, 116, 101, 109, 112, 115, 95, 104, 121, 115, 116, 101, 114, 101, 115,
-        105, 115, 61, 37, 100, 0, 109, 99, 115, 37, 100, 103, 112, 111, 37,
-        100, 61, 48, 120, 37, 120, 0, 98, 111, 97, 114, 100, 102, 108, 97, 103,
-        115, 50, 61, 48, 120, 37, 120, 0, 98, 111, 97, 114, 100, 102, 108, 97,
-        103, 115, 51, 61, 48, 120, 37, 120, 0, 108, 101, 100, 98, 104, 37, 100,
-        61, 48, 120, 37, 120, 0, 114, 120, 103, 97, 105, 110, 115, 37, 100,
-        103, 37, 99, 116, 114, 105, 115, 111, 97, 37, 100, 61, 37, 100, 0, 97,
-        97, 50, 103, 61, 48, 120, 37, 120, 0, 112, 114, 111, 100, 105, 100,
-        61, 48, 120, 37, 120, 0, 116, 101, 109, 112, 116, 104, 114, 101, 115,
-        104, 61, 37, 100, 0, 99, 104, 105, 112, 114, 101, 118, 61, 37, 100,
-        0, 108, 101, 103, 111, 102, 100, 109, 98, 119, 50, 48, 53, 103, 108,
-        112, 111, 61, 48, 120, 37, 120, 0, 0, 0, 108, 101, 103, 111, 102, 100,
-        109, 98, 119, 50, 48, 117, 108, 53, 103, 108, 112, 111, 61, 48, 120,
-        37, 120, 0, 108, 101, 103, 111, 102, 100, 109, 98, 119, 50, 48, 53,
-        103, 109, 112, 111, 61, 48, 120, 37, 120, 0, 0, 0, 108, 101, 103, 111,
-        102, 100, 109, 98, 119, 50, 48, 117, 108, 53, 103, 109, 112, 111, 61,
-        48, 120, 37, 120, 0, 108, 101, 103, 111, 102, 100, 109, 98, 119, 50,
-        48, 53, 103, 104, 112, 111, 61, 48, 120, 37, 120, 0, 0, 0, 108, 101,
-        103, 111, 102, 100, 109, 98, 119, 50, 48, 117, 108, 53, 103, 104, 112,
-        111, 61, 48, 120, 37, 120, 0, 117, 115, 98, 102, 115, 61, 37, 100, 0,
-        116, 101, 109, 112, 115, 95, 112, 101, 114, 105, 111, 100, 61, 37, 100,
-        0, 115, 98, 52, 48, 97, 110, 100, 56, 48, 37, 99, 114, 53, 103, 37,
-        99, 112, 111, 61, 48, 120, 37, 120, 0, 99, 99, 61, 37, 100, 0, 32, 4,
-        208, 2, 166, 169, 255, 255, 100, 111, 116, 49, 49, 97, 103, 100, 117,
-        112, 37, 99, 114, 112, 111, 61, 48, 120, 37, 120, 0, 97, 103, 97, 37,
-        100, 61, 48, 120, 37, 120, 0, 116, 114, 105, 115, 111, 53, 103, 61,
-        48, 120, 37, 120, 0, 116, 101, 109, 112, 115, 101, 110, 115, 101, 95,
-        115, 108, 111, 112, 101, 61, 37, 100, 0, 109, 97, 120, 112, 53, 103,
-        97, 37, 100, 61, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120,
-        37, 120, 44, 48, 120, 37, 120, 0, 112, 97, 49, 105, 116, 115, 115, 105,
-        116, 61, 37, 100, 0, 112, 97, 48, 98, 48, 61, 37, 100, 0, 112, 97, 48,
-        98, 49, 61, 37, 100, 0, 112, 97, 48, 98, 50, 61, 37, 100, 0, 112, 97,
-        53, 103, 97, 37, 100, 61, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44,
-        48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48,
-        120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120,
-        37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37,
-        120, 0, 109, 99, 115, 98, 119, 56, 48, 53, 103, 37, 99, 112, 111, 61,
-        48, 120, 37, 120, 0, 115, 117, 98, 98, 97, 110, 100, 53, 103, 118, 101,
-        114, 61, 37, 100, 0, 114, 115, 115, 105, 115, 97, 118, 53, 103, 61,
-        37, 100, 0, 109, 99, 115, 98, 119, 50, 48, 50, 103, 112, 111, 61, 48,
-        120, 37, 120, 0, 0, 0, 109, 99, 115, 98, 119, 50, 48, 117, 108, 50,
-        103, 112, 111, 61, 48, 120, 37, 120, 0, 109, 99, 115, 98, 119, 52, 48,
-        50, 103, 112, 111, 61, 48, 120, 37, 120, 0, 0, 0, 114, 101, 103, 114,
-        101, 118, 61, 48, 120, 37, 120, 0, 99, 99, 116, 108, 61, 48, 120, 37,
-        120, 0, 110, 111, 105, 115, 101, 108, 118, 108, 50, 103, 97, 37, 100,
-        61, 37, 100, 0, 117, 115, 98, 51, 48, 114, 101, 103, 115, 48, 61, 48,
-        120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120,
-        37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37,
-        120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120,
-        0, 117, 115, 98, 51, 48, 114, 101, 103, 115, 49, 61, 48, 120, 37, 120,
-        44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44,
-        48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48,
-        120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 0, 99, 99,
-        107, 112, 111, 61, 48, 120, 37, 120, 0, 116, 114, 105, 53, 103, 61,
-        37, 100, 0, 99, 99, 107, 100, 105, 103, 102, 105, 108, 116, 116, 121,
-        112, 101, 61, 37, 100, 0, 118, 101, 110, 100, 105, 100, 61, 48, 120,
-        37, 120, 0, 102, 101, 109, 99, 116, 114, 108, 61, 37, 100, 0, 117, 115,
-        98, 51, 48, 114, 101, 103, 115, 37, 100, 61, 48, 120, 37, 120, 44, 48,
-        120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 0, 112, 100,
-        111, 102, 102, 115, 101, 116, 50, 103, 37, 100, 109, 97, 37, 100, 61,
-        48, 120, 37, 120, 0, 117, 115, 98, 101, 112, 110, 117, 109, 61, 48,
-        120, 37, 120, 0, 112, 97, 49, 104, 105, 109, 97, 120, 112, 119, 114,
-        61, 37, 100, 0, 114, 120, 99, 104, 97, 105, 110, 61, 48, 120, 37, 120,
-        0, 98, 111, 97, 114, 100, 102, 108, 97, 103, 115, 61, 48, 120, 37, 120,
-        0, 112, 97, 49, 98, 48, 61, 37, 100, 0, 112, 97, 49, 98, 49, 61, 37,
-        100, 0, 112, 97, 49, 98, 50, 61, 37, 100, 0, 116, 120, 99, 104, 97,
-        105, 110, 61, 48, 120, 37, 120, 0, 114, 120, 103, 97, 105, 110, 115,
-        37, 100, 103, 37, 99, 101, 108, 110, 97, 103, 97, 105, 110, 97, 37,
-        100, 61, 37, 100, 0, 103, 112, 100, 110, 61, 48, 120, 37, 120, 0, 112,
-        97, 48, 109, 97, 120, 112, 119, 114, 61, 37, 100, 0, 98, 120, 97, 53,
-        103, 61, 37, 100, 0, 97, 103, 98, 103, 37, 100, 61, 48, 120, 37, 120,
-        0, 117, 115, 98, 115, 115, 112, 104, 121, 95, 115, 108, 101, 101, 112,
-        48, 61, 48, 120, 37, 120, 0, 117, 115, 98, 115, 115, 112, 104, 121,
-        95, 115, 108, 101, 101, 112, 49, 61, 48, 120, 37, 120, 0, 117, 115,
-        98, 115, 115, 112, 104, 121, 95, 115, 108, 101, 101, 112, 50, 61, 48,
-        120, 37, 120, 0, 117, 115, 98, 115, 115, 112, 104, 121, 95, 115, 108,
-        101, 101, 112, 51, 61, 48, 120, 37, 120, 0, 108, 101, 100, 100, 99,
-        61, 48, 120, 37, 48, 52, 120, 0, 109, 99, 115, 51, 50, 112, 111, 61,
-        48, 120, 37, 120, 0, 114, 115, 115, 105, 115, 97, 118, 50, 103, 61,
-        37, 100, 0, 111, 112, 111, 61, 37, 100, 0, 105, 116, 116, 50, 103, 97,
-        49, 61, 48, 120, 37, 120, 0, 114, 120, 112, 111, 53, 103, 61, 37, 100,
-        0, 101, 120, 116, 112, 97, 103, 97, 105, 110, 53, 103, 61, 48, 120,
-        37, 120, 0, 111, 102, 100, 109, 53, 103, 104, 112, 111, 61, 48, 120,
-        37, 120, 0, 116, 119, 111, 114, 97, 110, 103, 101, 116, 115, 115, 105,
-        37, 100, 103, 61, 37, 100, 0, 115, 98, 50, 48, 105, 110, 52, 48, 37,
-        99, 114, 112, 111, 61, 48, 120, 37, 120, 0, 109, 97, 110, 102, 105,
-        100, 61, 48, 120, 37, 120, 0, 101, 108, 110, 97, 50, 103, 61, 48, 120,
-        37, 120, 0, 114, 112, 99, 97, 108, 50, 103, 61, 48, 120, 37, 120, 0,
-        0, 0, 0, 0, 0, 0, 0, 114, 112, 99, 97, 108, 53, 103, 98, 48, 61, 48,
-        120, 37, 120, 0, 0, 0, 0, 0, 0, 114, 112, 99, 97, 108, 53, 103, 98,
-        49, 61, 48, 120, 37, 120, 0, 0, 0, 0, 0, 0, 114, 112, 99, 97, 108, 53,
-        103, 98, 50, 61, 48, 120, 37, 120, 0, 0, 0, 0, 0, 0, 114, 112, 99, 97,
-        108, 53, 103, 98, 51, 61, 48, 120, 37, 120, 0, 0, 0, 0, 0, 0, 112, 97,
-        48, 98, 48, 95, 108, 111, 61, 37, 100, 0, 112, 97, 48, 98, 49, 95, 108,
-        111, 61, 37, 100, 0, 112, 97, 48, 98, 50, 95, 108, 111, 61, 37, 100,
-        0, 115, 98, 50, 48, 105, 110, 56, 48, 97, 110, 100, 49, 54, 48, 37,
-        99, 114, 53, 103, 37, 99, 112, 111, 61, 48, 120, 37, 120, 0, 99, 100,
-        100, 112, 111, 61, 48, 120, 37, 120, 0, 98, 111, 97, 114, 100, 116,
-        121, 112, 101, 61, 48, 120, 37, 120, 0, 97, 110, 116, 115, 119, 105,
-        116, 99, 104, 61, 48, 120, 37, 120, 0, 98, 111, 97, 114, 100, 110, 117,
-        109, 61, 37, 100, 0, 114, 100, 108, 105, 100, 61, 48, 120, 37, 120,
-        0, 120, 116, 97, 108, 102, 114, 101, 113, 61, 37, 100, 0, 109, 97, 120,
-        112, 53, 103, 104, 97, 48, 61, 48, 120, 37, 120, 0, 114, 120, 103, 97,
-        105, 110, 115, 37, 100, 103, 101, 108, 110, 97, 103, 97, 105, 110, 97,
-        37, 100, 61, 37, 100, 0, 117, 115, 98, 115, 115, 109, 100, 105, 111,
-        37, 100, 61, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37,
-        120, 44, 48, 120, 37, 120, 0, 115, 117, 98, 100, 101, 118, 105, 100,
-        61, 48, 120, 37, 120, 0, 112, 97, 49, 108, 111, 98, 48, 61, 37, 100,
-        0, 112, 97, 49, 108, 111, 98, 49, 61, 37, 100, 0, 112, 97, 49, 108,
-        111, 98, 50, 61, 37, 100, 0, 115, 116, 98, 99, 112, 111, 61, 48, 120,
-        37, 120, 0, 114, 120, 103, 97, 105, 110, 101, 114, 114, 53, 103, 97,
-        37, 100, 61, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37,
-        120, 44, 48, 120, 37, 120, 0, 112, 97, 49, 108, 111, 109, 97, 120, 112,
-        119, 114, 61, 37, 100, 0, 112, 100, 111, 102, 102, 115, 101, 116, 37,
-        100, 109, 97, 37, 100, 61, 48, 120, 37, 120, 0, 116, 101, 109, 112,
-        99, 111, 114, 114, 120, 61, 37, 100, 0, 111, 102, 100, 109, 53, 103,
-        112, 111, 61, 48, 120, 37, 120, 0, 117, 115, 98, 110, 111, 115, 115,
-        61, 48, 120, 37, 120, 0, 97, 97, 53, 103, 61, 48, 120, 37, 120, 0, 99,
-        117, 115, 116, 111, 109, 118, 97, 114, 37, 100, 61, 48, 120, 37, 120,
-        0, 116, 120, 95, 100, 117, 116, 121, 95, 99, 121, 99, 108, 101, 95,
-        111, 102, 100, 109, 95, 37, 100, 95, 53, 103, 61, 37, 100, 0, 117, 117,
-        105, 100, 61, 37, 115, 0, 117, 115, 98, 100, 101, 115, 99, 95, 99, 111,
-        109, 112, 111, 115, 105, 116, 101, 61, 48, 120, 37, 120, 0, 116, 101,
-        109, 112, 115, 101, 110, 115, 101, 95, 111, 112, 116, 105, 111, 110,
-        61, 37, 100, 0, 112, 97, 112, 100, 99, 97, 112, 37, 100, 103, 61, 37,
-        100, 0, 108, 101, 103, 111, 102, 100, 109, 98, 119, 50, 48, 50, 103,
-        112, 111, 61, 48, 120, 37, 120, 0, 0, 0, 108, 101, 103, 111, 102, 100,
-        109, 98, 119, 50, 48, 117, 108, 50, 103, 112, 111, 61, 48, 120, 37,
-        120, 0, 112, 100, 103, 97, 105, 110, 37, 100, 103, 61, 37, 100, 0, 109,
-        97, 120, 112, 53, 103, 97, 48, 61, 48, 120, 37, 120, 0, 109, 97, 120,
-        112, 53, 103, 97, 49, 61, 48, 120, 37, 120, 0, 109, 99, 115, 37, 100,
-        103, 37, 99, 112, 111, 37, 100, 61, 48, 120, 37, 120, 0, 112, 104, 121,
-        99, 97, 108, 95, 116, 101, 109, 112, 100, 101, 108, 116, 97, 61, 37,
-        100, 0, 112, 97, 37, 100, 103, 37, 99, 119, 37, 100, 97, 37, 100, 61,
-        48, 120, 37, 120, 0, 99, 99, 111, 100, 101, 61, 48, 120, 48, 0, 114,
-        101, 103, 119, 105, 110, 100, 111, 119, 115, 122, 61, 37, 100, 0, 111,
-        102, 100, 109, 108, 114, 98, 119, 50, 48, 50, 103, 112, 111, 61, 48,
-        120, 37, 120, 0, 119, 111, 119, 108, 95, 103, 112, 105, 111, 112, 111,
-        108, 61, 37, 100, 0, 97, 110, 116, 115, 119, 99, 116, 108, 53, 103,
-        61, 48, 120, 37, 120, 0, 99, 99, 107, 50, 103, 112, 111, 61, 48, 120,
-        37, 120, 0, 116, 114, 105, 50, 103, 61, 37, 100, 0, 99, 99, 107, 98,
-        119, 50, 48, 50, 103, 112, 111, 61, 48, 120, 37, 120, 0, 0, 0, 99, 99,
-        107, 98, 119, 50, 48, 117, 108, 50, 103, 112, 111, 61, 48, 120, 37,
-        120, 0, 105, 116, 116, 53, 103, 97, 48, 61, 48, 120, 37, 120, 0, 105,
-        116, 116, 53, 103, 97, 49, 61, 48, 120, 37, 120, 0, 109, 99, 115, 108,
-        114, 53, 103, 37, 99, 112, 111, 61, 48, 120, 37, 120, 0, 112, 100, 111,
-        102, 102, 115, 101, 116, 50, 103, 37, 100, 109, 118, 97, 108, 105, 100,
-        61, 48, 120, 37, 120, 0, 114, 120, 103, 97, 105, 110, 115, 37, 100,
-        103, 116, 114, 101, 108, 110, 97, 98, 121, 112, 97, 37, 100, 61, 37,
-        100, 0, 98, 111, 97, 114, 100, 114, 101, 118, 61, 48, 120, 37, 120,
-        0, 114, 97, 119, 116, 101, 109, 112, 115, 101, 110, 115, 101, 61, 48,
-        120, 37, 120, 0, 117, 115, 98, 115, 115, 112, 104, 121, 95, 117, 116,
-        109, 105, 95, 99, 116, 108, 48, 61, 48, 120, 37, 120, 0, 117, 115, 98,
-        115, 115, 112, 104, 121, 95, 117, 116, 109, 105, 95, 99, 116, 108, 49,
-        61, 48, 120, 37, 120, 0, 117, 115, 98, 115, 115, 112, 104, 121, 95,
-        117, 116, 109, 105, 95, 99, 116, 108, 50, 61, 48, 120, 37, 120, 0, 0,
-        0, 0, 0, 111, 102, 100, 109, 53, 103, 108, 112, 111, 61, 48, 120, 37,
-        120, 0, 112, 97, 48, 105, 116, 115, 115, 105, 116, 61, 37, 100, 0, 116,
-        115, 115, 105, 112, 111, 115, 53, 103, 61, 48, 120, 37, 120, 0, 114,
-        120, 112, 111, 50, 103, 61, 37, 100, 0, 116, 115, 115, 105, 112, 111,
-        115, 115, 108, 111, 112, 101, 37, 100, 103, 61, 37, 100, 0, 116, 114,
-        105, 53, 103, 104, 61, 37, 100, 0, 109, 97, 110, 102, 61, 37, 115, 0,
-        116, 114, 105, 53, 103, 108, 61, 37, 100, 0, 109, 99, 115, 98, 119,
-        50, 48, 53, 103, 104, 112, 111, 61, 48, 120, 37, 120, 0, 0, 0, 109,
-        99, 115, 98, 119, 50, 48, 117, 108, 53, 103, 104, 112, 111, 61, 48,
-        120, 37, 120, 0, 109, 99, 115, 98, 119, 52, 48, 53, 103, 104, 112, 111,
-        61, 48, 120, 37, 120, 0, 0, 0, 115, 114, 111, 109, 114, 101, 118, 61,
-        37, 100, 0, 108, 101, 103, 111, 102, 100, 109, 52, 48, 100, 117, 112,
-        112, 111, 61, 48, 120, 37, 120, 0, 109, 97, 120, 112, 53, 103, 104,
-        97, 49, 61, 48, 120, 37, 120, 0, 100, 101, 118, 105, 100, 61, 48, 120,
-        37, 120, 0, 114, 120, 103, 97, 105, 110, 115, 37, 100, 103, 116, 114,
-        105, 115, 111, 97, 37, 100, 61, 37, 100, 0, 109, 97, 120, 112, 53, 103,
-        108, 97, 48, 61, 48, 120, 37, 120, 0, 109, 97, 120, 112, 53, 103, 108,
-        97, 49, 61, 48, 120, 37, 120, 0, 101, 112, 97, 103, 97, 105, 110, 37,
-        100, 103, 61, 37, 100, 0, 119, 112, 115, 103, 112, 105, 111, 61, 37,
-        100, 0, 119, 111, 119, 108, 95, 103, 112, 105, 111, 61, 37, 100, 0,
-        114, 115, 115, 105, 115, 109, 102, 53, 103, 61, 37, 100, 0, 116, 114,
-        105, 115, 111, 50, 103, 61, 48, 120, 37, 120, 0, 116, 115, 115, 105,
-        112, 111, 115, 50, 103, 61, 48, 120, 37, 120, 0, 119, 112, 115, 108,
-        101, 100, 61, 37, 100, 0, 101, 108, 110, 97, 53, 103, 61, 48, 120, 37,
-        120, 0, 112, 97, 53, 103, 98, 119, 52, 48, 56, 48, 97, 37, 100, 61,
-        48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48,
-        120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120,
-        37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 44, 48, 120, 37,
-        120, 44, 48, 120, 37, 120, 44, 48, 120, 37, 120, 0, 109, 99, 115, 98,
-        119, 50, 48, 53, 103, 109, 112, 111, 61, 48, 120, 37, 120, 0, 0, 0,
-        109, 99, 115, 98, 119, 50, 48, 117, 108, 53, 103, 109, 112, 111, 61,
-        48, 120, 37, 120, 0, 109, 99, 115, 98, 119, 52, 48, 53, 103, 109, 112,
-        111, 61, 48, 120, 37, 120, 0, 0, 0, 99, 99, 111, 100, 101, 61, 37, 99,
-        37, 99, 0, 109, 99, 115, 98, 119, 49, 54, 48, 53, 103, 37, 99, 112,
-        111, 61, 48, 120, 37, 120, 0, 73, 110, 118, 97, 108, 105, 100, 47, 85,
-        110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 120, 116, 97,
-        108, 32, 118, 97, 108, 117, 101, 32, 37, 100, 0, 114, 109, 105, 110,
-        0, 99, 108, 100, 111, 95, 98, 117, 114, 115, 116, 0, 112, 108, 108,
-        37, 100, 0, 108, 110, 108, 100, 111, 49, 0, 114, 37, 100, 100, 0, 114,
-        37, 100, 116, 0, 120, 116, 97, 108, 102, 114, 101, 113, 0, 0, 0, 0,
-        12, 0, 0, 0, 2, 0, 22, 0, 2, 0, 0, 0, 4, 0, 13, 0, 7, 0, 0, 0, 1, 0,
-        10, 0, 8, 0, 0, 0, 4, 0, 13, 0, 10, 0, 0, 0, 4, 0, 13, 0, 13, 0, 0,
-        0, 1, 0, 7, 0, 23, 0, 0, 0, 4, 0, 4, 0, 27, 0, 0, 0, 4, 0, 1, 0, 28,
-        0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 1, 0,
-        3, 0, 0, 0, 2, 0, 2, 0, 4, 0, 0, 0, 1, 0, 1, 0, 5, 0, 0, 0, 1, 0, 1,
-        0, 6, 0, 0, 0, 1, 0, 1, 0, 9, 0, 0, 0, 1, 0, 5, 0, 11, 0, 0, 0, 1, 0,
-        1, 0, 12, 0, 0, 0, 2, 0, 48, 0, 14, 0, 0, 0, 1, 0, 1, 0, 15, 0, 0, 0,
-        1, 0, 1, 0, 16, 0, 0, 0, 1, 0, 1, 0, 17, 0, 0, 0, 1, 0, 1, 0, 18, 0,
-        0, 0, 3, 0, 3, 0, 19, 0, 0, 0, 1, 0, 1, 0, 20, 0, 0, 0, 1, 0, 1, 0,
-        21, 0, 0, 0, 1, 0, 1, 0, 22, 0, 0, 0, 1, 0, 1, 0, 24, 0, 0, 0, 2, 0,
-        19, 0, 25, 0, 0, 0, 2, 0, 19, 0, 26, 0, 0, 0, 2, 0, 19, 0, 29, 0, 0,
-        0, 1, 0, 1, 0, 30, 0, 0, 0, 1, 0, 1, 0, 12, 0, 0, 0, 2, 0, 48, 0, 114,
-        109, 97, 120, 0, 0, 0, 75, 0, 7, 144, 101, 0, 12, 24, 146, 0, 15, 108,
-        112, 108, 100, 111, 49, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0,
-        0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0,
-        32, 0, 0, 0, 0, 0, 0, 0, 87, 17, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
-        0, 0, 23, 1, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 87, 1, 0, 0,
-        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0,
-        0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 0, 0, 0, 0, 0,
-        16, 0, 0, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0,
-        0, 215, 21, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 247, 189, 194,
-        14, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 247, 61, 194, 14, 0, 0, 0,
-        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,
-        0, 0, 247, 61, 192, 14, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 247, 61,
-        194, 14, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 247, 61, 194, 14, 0, 0,
-        0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 247, 61, 192, 6, 0, 0, 0, 0, 0, 0, 32,
-        0, 0, 0, 0, 0, 247, 61, 218, 14, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
-        247, 61, 0, 6, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 247, 61, 64, 6,
-        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        2, 0, 0, 0, 0, 215, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 215,
-        13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 247, 61, 192, 6, 0, 0,
-        0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 247, 61, 202, 14, 0, 0, 0, 0, 0, 0, 0,
-        32, 0, 0, 0, 0, 247, 61, 202, 30, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0,
-        0, 247, 61, 250, 62, 0, 0, 0, 0, 114, 101, 103, 37, 100, 0, 99, 108,
-        100, 111, 95, 112, 119, 109, 0, 99, 104, 105, 112, 99, 37, 100, 0, 98,
-        111, 97, 114, 100, 116, 121, 112, 101, 0, 112, 114, 111, 100, 105, 100,
-        0, 115, 119, 100, 101, 110, 97, 98, 108, 101, 0, 103, 112, 100, 110,
-        0, 98, 111, 97, 114, 100, 102, 108, 97, 103, 115, 0, 98, 116, 99, 120,
-        119, 97, 114, 102, 108, 97, 103, 115, 0, 120, 116, 97, 108, 102, 114,
-        101, 113, 0, 100, 101, 118, 105, 100, 0, 98, 111, 97, 114, 100, 114,
-        101, 118, 0, 0, 128, 186, 140, 1, 0, 194, 1, 0, 242, 0, 0, 0, 129, 0,
-        0, 0, 16, 0, 0, 0, 192, 173, 58, 2, 0, 194, 1, 0, 236, 0, 0, 0, 129,
-        0, 0, 0, 34, 0, 0, 0, 109, 117, 120, 101, 110, 97, 98, 0, 119, 108,
-        48, 105, 100, 0, 119, 108, 37, 100, 58, 32, 66, 114, 111, 97, 100, 99,
-        111, 109, 32, 66, 67, 77, 37, 115, 32, 56, 48, 50, 46, 49, 49, 32, 87,
-        105, 114, 101, 108, 101, 115, 115, 32, 67, 111, 110, 116, 114, 111,
-        108, 108, 101, 114, 32, 37, 115, 10, 0, 78, 86, 82, 65, 77, 82, 101,
-        118, 0, 97, 103, 98, 103, 48, 0, 97, 103, 98, 103, 49, 0, 97, 97, 48,
-        0, 115, 97, 114, 50, 103, 0, 0, 0, 0, 45, 2, 1, 0, 49, 171, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 32, 67, 37, 67, 3, 67, 33, 67, 36, 67, 24, 67,
-        25, 67, 26, 67, 17, 67, 19, 67, 18, 67, 20, 67, 21, 67, 22, 67, 27,
-        67, 28, 67, 29, 67, 40, 67, 41, 67, 42, 67, 43, 67, 44, 67, 45, 67,
-        65, 67, 64, 67, 80, 67, 81, 67, 82, 67, 83, 67, 87, 67, 157, 169, 118,
-        5, 84, 67, 95, 67, 63, 67, 79, 67, 47, 67, 52, 67, 53, 67, 54, 67, 55,
-        67, 56, 67, 57, 67, 22, 71, 72, 71, 39, 71, 67, 67, 96, 67, 70, 67,
-        71, 67, 72, 67, 49, 67, 50, 67, 51, 67, 170, 67, 88, 67, 89, 67, 90,
-        67, 169, 67, 85, 67, 86, 67, 99, 67, 128, 67, 129, 67, 130, 67, 100,
-        67, 101, 67, 102, 67, 116, 67, 103, 67, 160, 67, 161, 67, 162, 67, 174,
-        67, 175, 67, 176, 67, 171, 67, 172, 67, 173, 67, 227, 67, 228, 67, 229,
-        67, 226, 67, 208, 67, 209, 67, 210, 67, 186, 67, 187, 67, 188, 67, 177,
-        67, 178, 67, 179, 67, 163, 67, 164, 67, 165, 67, 183, 67, 184, 67, 185,
-        67, 192, 67, 193, 67, 194, 67, 211, 67, 212, 67, 213, 67, 214, 67, 215,
-        67, 216, 67, 217, 67, 218, 67, 219, 67, 223, 67, 224, 67, 225, 67, 236,
-        67, 237, 67, 238, 67, 233, 67, 234, 67, 235, 67, 34, 67, 214, 168, 103,
-        168, 104, 168, 156, 169, 216, 168, 157, 169, 19, 67, 20, 67, 134, 168,
-        49, 67, 167, 169, 219, 168, 209, 168, 220, 168, 164, 169, 82, 170, 198,
-        169, 2, 170, 49, 170, 50, 170, 97, 103, 98, 103, 50, 0, 100, 101, 118,
-        105, 100, 0, 97, 97, 50, 103, 0, 49, 49, 110, 95, 100, 105, 115, 97,
-        98, 108, 101, 0, 97, 103, 48, 0, 97, 107, 109, 0, 0, 0, 0, 109, 142,
-        1, 0, 79, 113, 1, 0, 115, 162, 1, 0, 0, 0, 0, 0, 229, 214, 1, 0, 209,
-        171, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 110, 116, 115, 119, 99, 116,
-        108, 50, 103, 0, 98, 116, 99, 120, 108, 101, 115, 99, 97, 110, 0, 119,
-        108, 37, 100, 58, 100, 109, 97, 37, 100, 0, 98, 116, 99, 95, 109, 111,
-        100, 101, 0, 98, 111, 97, 114, 100, 102, 108, 97, 103, 115, 0, 115,
-        114, 111, 109, 114, 101, 118, 0, 118, 101, 110, 100, 105, 100, 0, 97,
-        97, 50, 103, 0, 99, 117, 115, 116, 111, 109, 118, 97, 114, 49, 0, 99,
-        117, 115, 116, 111, 109, 118, 97, 114, 50, 0, 98, 116, 99, 95, 112,
-        97, 114, 97, 109, 115, 37, 100, 0, 98, 116, 99, 95, 102, 108, 97, 103,
-        115, 0, 98, 111, 97, 114, 100, 102, 108, 97, 103, 115, 50, 0, 98, 111,
-        97, 114, 100, 102, 108, 97, 103, 115, 52, 0, 98, 111, 97, 114, 100,
-        114, 101, 118, 0, 109, 97, 99, 97, 100, 100, 114, 0, 100, 101, 118,
-        105, 100, 0, 97, 110, 116, 115, 119, 99, 116, 108, 53, 103, 0, 115,
-        99, 111, 95, 114, 115, 115, 105, 95, 116, 104, 114, 101, 115, 104, 0,
-        112, 114, 111, 116, 95, 98, 116, 114, 115, 115, 105, 95, 116, 104, 114,
-        101, 115, 104, 0, 99, 99, 111, 100, 101, 0, 99, 99, 0, 114, 101, 103,
-        114, 101, 118, 0, 101, 118, 101, 110, 116, 113, 0, 104, 115, 50, 48,
-        0, 0, 0, 0, 0, 0, 13, 6, 15, 0, 0, 0, 0, 0, 4, 6, 48, 4, 0, 0, 0, 0,
-        2, 6, 64, 6, 114, 115, 115, 105, 99, 111, 114, 114, 110, 111, 114, 109,
-        0, 108, 100, 112, 99, 0, 116, 115, 115, 105, 108, 105, 109, 117, 99,
-        111, 100, 0, 37, 115, 46, 102, 97, 98, 46, 37, 100, 0, 116, 101, 109,
-        112, 116, 104, 114, 101, 115, 104, 0, 46, 102, 97, 98, 46, 0, 116, 120,
-        112, 119, 114, 98, 99, 107, 111, 102, 0, 105, 110, 116, 101, 114, 102,
-        101, 114, 101, 110, 99, 101, 0, 103, 108, 105, 116, 99, 104, 95, 98,
-        97, 115, 101, 100, 95, 99, 114, 115, 109, 105, 110, 0, 50, 103, 95,
-        99, 103, 97, 0, 114, 115, 115, 105, 99, 111, 114, 114, 97, 116, 116,
-        101, 110, 0, 112, 104, 121, 99, 97, 108, 95, 116, 101, 109, 112, 100,
-        101, 108, 116, 97, 0, 116, 101, 109, 112, 115, 95, 104, 121, 115, 116,
-        101, 114, 101, 115, 105, 115, 0, 114, 115, 115, 105, 99, 111, 114, 114,
-        112, 101, 114, 114, 103, 50, 103, 0, 103, 108, 97, 99, 105, 97, 108,
-        116, 105, 109, 101, 114, 0, 116, 115, 115, 105, 102, 108, 111, 111,
-        114, 50, 103, 0, 118, 98, 97, 116, 95, 97, 100, 100, 0, 112, 97, 112,
-        100, 118, 97, 108, 105, 100, 116, 101, 115, 116, 0, 115, 119, 100, 105,
-        118, 95, 103, 112, 105, 111, 95, 49, 0, 112, 109, 105, 110, 0, 115,
-        112, 117, 114, 99, 111, 110, 102, 105, 103, 0, 99, 99, 107, 100, 105,
-        103, 102, 105, 108, 116, 116, 121, 112, 101, 0, 101, 117, 95, 101, 100,
-        116, 104, 114, 101, 115, 104, 50, 103, 0, 114, 101, 100, 95, 114, 120,
-        98, 108, 111, 99, 107, 105, 110, 103, 0, 0, 1, 0, 108, 9, 75, 0, 118,
-        1, 19, 0, 50, 48, 22, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        37, 0, 0, 0, 145, 9, 0, 0, 108, 9, 0, 0, 0, 0, 5, 3, 91, 231, 8, 0,
-        63, 88, 18, 18, 47, 20, 31, 31, 31, 31, 32, 81, 39, 97, 0, 0, 9, 96,
-        63, 112, 2, 0, 113, 9, 75, 0, 118, 1, 19, 0, 50, 48, 22, 0, 3, 0, 65,
-        126, 0, 6, 0, 10, 217, 3, 39, 0, 37, 0, 0, 0, 145, 9, 0, 0, 113, 9,
-        0, 0, 0, 0, 7, 3, 13, 130, 8, 0, 63, 88, 18, 18, 47, 20, 31, 31, 31,
-        31, 32, 81, 39, 97, 0, 0, 9, 96, 63, 112, 3, 0, 118, 9, 75, 0, 118,
-        1, 19, 0, 50, 48, 22, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        37, 0, 0, 0, 145, 9, 0, 0, 118, 9, 0, 0, 0, 0, 9, 3, 191, 28, 8, 0,
-        63, 88, 18, 18, 47, 20, 31, 31, 31, 31, 32, 81, 39, 97, 0, 0, 9, 96,
-        63, 112, 4, 0, 123, 9, 75, 0, 118, 1, 19, 0, 50, 48, 22, 0, 3, 0, 65,
-        126, 0, 6, 0, 10, 217, 3, 39, 0, 37, 0, 0, 0, 145, 9, 0, 0, 123, 9,
-        0, 0, 0, 0, 10, 3, 113, 183, 8, 0, 63, 88, 18, 18, 47, 20, 31, 31, 31,
-        31, 32, 81, 39, 97, 0, 0, 9, 96, 63, 112, 5, 0, 128, 9, 75, 0, 118,
-        1, 19, 0, 50, 48, 22, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        37, 0, 0, 0, 145, 9, 0, 0, 128, 9, 0, 0, 0, 0, 12, 3, 35, 82, 8, 0,
-        63, 88, 18, 18, 47, 20, 31, 31, 31, 31, 33, 81, 39, 97, 0, 0, 9, 96,
-        63, 112, 6, 0, 133, 9, 75, 0, 118, 1, 19, 0, 50, 48, 22, 0, 3, 0, 65,
-        126, 0, 6, 0, 10, 217, 3, 39, 0, 37, 0, 0, 0, 145, 9, 0, 0, 133, 9,
-        0, 0, 0, 0, 13, 3, 213, 236, 8, 0, 63, 88, 18, 18, 47, 20, 31, 31, 31,
-        31, 33, 81, 39, 97, 0, 0, 9, 96, 63, 112, 7, 0, 138, 9, 75, 0, 118,
-        1, 19, 0, 50, 48, 22, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        37, 0, 0, 0, 145, 9, 0, 0, 138, 9, 0, 0, 0, 0, 15, 3, 135, 135, 8, 0,
-        63, 88, 18, 18, 47, 20, 31, 31, 31, 31, 33, 81, 39, 97, 0, 0, 8, 96,
-        63, 112, 8, 0, 143, 9, 75, 0, 118, 1, 19, 0, 50, 48, 22, 0, 3, 0, 65,
-        126, 0, 6, 0, 10, 217, 3, 39, 0, 37, 0, 0, 0, 145, 9, 0, 0, 143, 9,
-        0, 0, 0, 0, 17, 3, 57, 34, 8, 0, 63, 88, 18, 18, 47, 20, 31, 31, 31,
-        31, 33, 81, 39, 97, 0, 0, 8, 96, 63, 112, 9, 0, 148, 9, 75, 0, 118,
-        1, 19, 0, 50, 48, 22, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        37, 0, 0, 0, 145, 9, 0, 0, 148, 9, 0, 0, 0, 0, 18, 3, 235, 188, 8, 0,
-        63, 88, 18, 18, 47, 20, 31, 31, 31, 31, 33, 81, 39, 97, 0, 0, 8, 96,
-        63, 96, 10, 0, 153, 9, 75, 0, 118, 1, 19, 0, 50, 48, 22, 0, 3, 0, 65,
-        126, 0, 6, 0, 10, 217, 3, 39, 0, 37, 0, 0, 0, 145, 9, 0, 0, 153, 9,
-        0, 0, 0, 0, 20, 3, 157, 87, 8, 0, 63, 88, 18, 18, 47, 20, 31, 31, 31,
-        31, 33, 81, 39, 97, 0, 0, 8, 96, 63, 96, 11, 0, 158, 9, 75, 0, 118,
-        1, 19, 0, 50, 48, 22, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        37, 0, 0, 0, 145, 9, 0, 0, 158, 9, 0, 0, 0, 0, 21, 3, 79, 242, 8, 0,
-        63, 88, 18, 18, 47, 20, 31, 31, 31, 31, 33, 81, 39, 97, 0, 0, 7, 96,
-        63, 96, 12, 0, 163, 9, 75, 0, 118, 1, 19, 0, 50, 48, 22, 0, 3, 0, 65,
-        126, 0, 6, 0, 10, 217, 3, 39, 0, 37, 0, 0, 0, 145, 9, 0, 0, 163, 9,
-        0, 0, 0, 0, 23, 3, 1, 141, 8, 0, 63, 88, 18, 18, 47, 20, 31, 31, 31,
-        31, 33, 81, 39, 97, 0, 0, 7, 96, 63, 96, 13, 0, 168, 9, 75, 0, 118,
-        1, 19, 0, 50, 48, 22, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        37, 0, 0, 0, 145, 9, 0, 0, 168, 9, 0, 0, 0, 0, 25, 3, 179, 39, 8, 0,
-        63, 88, 18, 18, 47, 20, 31, 31, 31, 31, 33, 81, 40, 97, 0, 0, 7, 96,
-        63, 96, 14, 0, 180, 9, 75, 0, 118, 1, 19, 0, 50, 48, 22, 0, 3, 0, 65,
-        126, 0, 6, 0, 10, 217, 3, 39, 0, 37, 0, 0, 0, 145, 9, 0, 0, 180, 9,
-        0, 0, 0, 0, 29, 3, 94, 1, 8, 0, 63, 88, 18, 18, 47, 20, 31, 31, 31,
-        31, 33, 81, 40, 97, 0, 0, 7, 96, 63, 96, 109, 97, 120, 112, 50, 103,
-        97, 48, 0, 0, 1, 0, 108, 9, 52, 0, 4, 1, 13, 0, 35, 48, 79, 0, 3, 0,
-        65, 126, 0, 6, 0, 10, 217, 3, 39, 0, 26, 0, 0, 0, 162, 9, 0, 0, 108,
-        9, 0, 0, 0, 0, 178, 8, 39, 118, 8, 0, 63, 88, 23, 23, 60, 25, 31, 31,
-        31, 31, 59, 81, 25, 97, 0, 0, 9, 96, 63, 112, 2, 0, 113, 9, 52, 0, 4,
-        1, 13, 0, 35, 48, 79, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        26, 0, 0, 0, 162, 9, 0, 0, 113, 9, 0, 0, 0, 0, 183, 8, 177, 19, 8, 0,
-        63, 88, 23, 23, 60, 25, 31, 31, 31, 31, 59, 81, 25, 97, 0, 0, 9, 96,
-        63, 112, 3, 0, 118, 9, 52, 0, 4, 1, 13, 0, 35, 48, 79, 0, 3, 0, 65,
-        126, 0, 6, 0, 10, 217, 3, 39, 0, 26, 0, 0, 0, 162, 9, 0, 0, 118, 9,
-        0, 0, 0, 0, 187, 8, 59, 177, 8, 0, 63, 88, 23, 23, 60, 25, 31, 31, 31,
-        31, 60, 81, 25, 97, 0, 0, 9, 96, 63, 112, 4, 0, 123, 9, 52, 0, 4, 1,
-        13, 0, 35, 48, 79, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0, 26,
-        0, 0, 0, 162, 9, 0, 0, 123, 9, 0, 0, 0, 0, 192, 8, 196, 78, 8, 0, 63,
-        88, 23, 23, 60, 25, 31, 31, 31, 31, 60, 81, 25, 97, 0, 0, 9, 96, 63,
-        112, 5, 0, 128, 9, 52, 0, 4, 1, 13, 0, 35, 48, 79, 0, 3, 0, 65, 126,
-        0, 6, 0, 10, 217, 3, 39, 0, 26, 0, 0, 0, 162, 9, 0, 0, 128, 9, 0, 0,
-        0, 0, 196, 8, 78, 236, 8, 0, 63, 88, 23, 23, 60, 25, 31, 31, 31, 31,
-        60, 81, 25, 97, 0, 0, 9, 96, 63, 112, 6, 0, 133, 9, 52, 0, 4, 1, 13,
-        0, 35, 48, 79, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0, 26, 0,
-        0, 0, 162, 9, 0, 0, 133, 9, 0, 0, 0, 0, 201, 8, 216, 137, 8, 0, 63,
-        88, 23, 23, 60, 25, 31, 31, 31, 31, 60, 81, 25, 97, 0, 0, 9, 96, 63,
-        112, 7, 0, 138, 9, 52, 0, 4, 1, 13, 0, 35, 48, 79, 0, 3, 0, 65, 126,
-        0, 6, 0, 10, 217, 3, 39, 0, 26, 0, 0, 0, 162, 9, 0, 0, 138, 9, 0, 0,
-        0, 0, 206, 8, 98, 39, 8, 0, 63, 88, 23, 23, 60, 25, 31, 31, 31, 31,
-        60, 81, 25, 97, 0, 0, 8, 96, 63, 112, 8, 0, 143, 9, 52, 0, 4, 1, 13,
-        0, 35, 48, 79, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0, 26, 0,
-        0, 0, 162, 9, 0, 0, 143, 9, 0, 0, 0, 0, 210, 8, 236, 196, 8, 0, 63,
-        88, 23, 23, 60, 25, 31, 31, 31, 31, 60, 81, 25, 97, 0, 0, 8, 96, 63,
-        112, 9, 0, 148, 9, 52, 0, 4, 1, 13, 0, 35, 48, 79, 0, 3, 0, 65, 126,
-        0, 6, 0, 10, 217, 3, 39, 0, 26, 0, 0, 0, 162, 9, 0, 0, 148, 9, 0, 0,
-        0, 0, 215, 8, 118, 98, 8, 0, 63, 88, 23, 23, 60, 25, 31, 31, 31, 31,
-        60, 81, 25, 97, 0, 0, 8, 96, 63, 96, 10, 0, 153, 9, 52, 0, 4, 1, 13,
-        0, 35, 48, 79, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0, 26, 0,
-        0, 0, 162, 9, 0, 0, 153, 9, 0, 0, 0, 0, 220, 8, 0, 0, 8, 0, 63, 88,
-        23, 23, 60, 25, 31, 31, 31, 31, 60, 81, 25, 97, 0, 0, 8, 96, 63, 96,
-        11, 0, 158, 9, 52, 0, 4, 1, 13, 0, 35, 48, 79, 0, 3, 0, 65, 126, 0,
-        6, 0, 10, 217, 3, 39, 0, 26, 0, 0, 0, 162, 9, 0, 0, 158, 9, 0, 0, 0,
-        0, 224, 8, 137, 157, 8, 0, 63, 88, 23, 23, 60, 25, 31, 31, 31, 31, 61,
-        81, 25, 97, 0, 0, 7, 96, 63, 96, 12, 0, 163, 9, 52, 0, 4, 1, 13, 0,
-        35, 48, 79, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0, 26, 0, 0,
-        0, 162, 9, 0, 0, 163, 9, 0, 0, 0, 0, 229, 8, 19, 59, 8, 0, 63, 88, 23,
-        23, 60, 25, 31, 31, 31, 31, 61, 81, 25, 97, 0, 0, 7, 96, 63, 96, 13,
-        0, 168, 9, 52, 0, 4, 1, 13, 0, 35, 48, 79, 0, 3, 0, 65, 126, 0, 6, 0,
-        10, 217, 3, 39, 0, 26, 0, 0, 0, 162, 9, 0, 0, 168, 9, 0, 0, 0, 0, 233,
-        8, 157, 216, 8, 0, 63, 88, 23, 23, 60, 25, 31, 31, 31, 31, 61, 81, 25,
-        97, 0, 0, 7, 96, 63, 96, 14, 0, 180, 9, 52, 0, 4, 1, 13, 0, 35, 48,
-        79, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0, 26, 0, 0, 0, 162,
-        9, 0, 0, 180, 9, 0, 0, 0, 0, 244, 8, 78, 236, 8, 0, 63, 88, 23, 23,
-        60, 25, 31, 31, 31, 31, 61, 81, 25, 97, 0, 0, 7, 96, 63, 96, 112, 114,
-        111, 112, 98, 119, 50, 48, 50, 103, 112, 111, 0, 114, 99, 111, 114,
-        95, 97, 99, 105, 0, 99, 97, 108, 105, 100, 120, 101, 115, 116, 116,
-        97, 114, 103, 101, 116, 50, 103, 0, 99, 97, 108, 105, 100, 120, 101,
-        115, 116, 98, 97, 115, 101, 50, 103, 0, 112, 97, 50, 103, 97, 48, 95,
-        108, 111, 0, 99, 99, 107, 50, 103, 112, 111, 0, 116, 115, 115, 105,
-        116, 105, 109, 101, 0, 116, 101, 109, 112, 95, 109, 117, 108, 116, 0,
-        112, 97, 112, 100, 101, 112, 115, 111, 102, 102, 115, 101, 116, 0, 109,
-        99, 115, 50, 103, 112, 111, 48, 0, 112, 97, 99, 97, 108, 105, 100, 120,
-        50, 103, 0, 111, 102, 100, 109, 50, 103, 112, 111, 0, 111, 102, 100,
-        109, 100, 105, 103, 102, 105, 108, 116, 116, 121, 112, 101, 98, 101,
-        0, 65, 118, 86, 109, 105, 100, 73, 81, 99, 97, 108, 0, 99, 99, 107,
-        105, 100, 120, 112, 99, 104, 111, 102, 102, 115, 0, 116, 101, 109, 112,
-        95, 97, 100, 100, 0, 115, 119, 100, 105, 118, 95, 103, 112, 105, 111,
-        0, 109, 99, 115, 98, 119, 50, 48, 50, 103, 112, 111, 0, 112, 97, 112,
-        100, 101, 110, 100, 105, 100, 120, 0, 113, 97, 109, 50, 53, 54, 101,
-        110, 0, 115, 119, 100, 105, 118, 95, 115, 119, 99, 116, 114, 108, 95,
-        101, 110, 0, 1, 0, 108, 9, 38, 0, 192, 0, 10, 0, 26, 48, 128, 0, 3,
-        0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0, 19, 0, 0, 0, 176, 9, 0, 0, 108,
-        9, 0, 0, 0, 0, 199, 11, 0, 0, 8, 0, 63, 88, 23, 23, 60, 25, 31, 31,
-        31, 31, 80, 81, 25, 97, 0, 0, 9, 96, 63, 112, 2, 0, 113, 9, 38, 0, 192,
-        0, 10, 0, 26, 48, 128, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        19, 0, 0, 0, 176, 9, 0, 0, 113, 9, 0, 0, 0, 0, 205, 11, 0, 64, 8, 0,
-        63, 88, 23, 23, 60, 25, 31, 31, 31, 31, 81, 81, 25, 97, 0, 0, 9, 96,
-        63, 112, 3, 0, 118, 9, 38, 0, 192, 0, 10, 0, 26, 48, 128, 0, 3, 0, 65,
-        126, 0, 6, 0, 10, 217, 3, 39, 0, 19, 0, 0, 0, 176, 9, 0, 0, 118, 9,
-        0, 0, 0, 0, 211, 11, 0, 128, 8, 0, 63, 88, 23, 23, 60, 25, 31, 31, 31,
-        31, 81, 81, 25, 97, 0, 0, 9, 96, 63, 112, 4, 0, 123, 9, 38, 0, 192,
-        0, 10, 0, 26, 48, 128, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        19, 0, 0, 0, 176, 9, 0, 0, 123, 9, 0, 0, 0, 0, 217, 11, 0, 192, 8, 0,
-        63, 88, 23, 23, 60, 25, 31, 31, 31, 31, 81, 81, 25, 97, 0, 0, 9, 96,
-        63, 112, 5, 0, 128, 9, 38, 0, 192, 0, 10, 0, 26, 48, 128, 0, 3, 0, 65,
-        126, 0, 6, 0, 10, 217, 3, 39, 0, 19, 0, 0, 0, 176, 9, 0, 0, 128, 9,
-        0, 0, 0, 0, 224, 11, 0, 0, 8, 0, 63, 88, 23, 23, 60, 25, 31, 31, 31,
-        31, 81, 81, 25, 97, 0, 0, 9, 96, 63, 112, 6, 0, 133, 9, 38, 0, 192,
-        0, 10, 0, 26, 48, 128, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        19, 0, 0, 0, 176, 9, 0, 0, 133, 9, 0, 0, 0, 0, 230, 11, 0, 64, 8, 0,
-        63, 88, 23, 23, 60, 25, 31, 31, 31, 31, 81, 81, 25, 97, 0, 0, 9, 96,
-        63, 112, 7, 0, 138, 9, 38, 0, 192, 0, 10, 0, 26, 48, 128, 0, 3, 0, 65,
-        126, 0, 6, 0, 10, 217, 3, 39, 0, 19, 0, 0, 0, 176, 9, 0, 0, 138, 9,
-        0, 0, 0, 0, 236, 11, 0, 128, 8, 0, 63, 88, 23, 23, 60, 25, 31, 31, 31,
-        31, 81, 81, 25, 97, 0, 0, 8, 96, 63, 112, 8, 0, 143, 9, 38, 0, 192,
-        0, 10, 0, 26, 48, 128, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        19, 0, 0, 0, 176, 9, 0, 0, 143, 9, 0, 0, 0, 0, 242, 11, 0, 192, 8, 0,
-        63, 88, 23, 23, 60, 25, 31, 31, 31, 31, 82, 81, 25, 97, 0, 0, 8, 96,
-        63, 112, 9, 0, 148, 9, 38, 0, 192, 0, 10, 0, 26, 48, 128, 0, 3, 0, 65,
-        126, 0, 6, 0, 10, 217, 3, 39, 0, 19, 0, 0, 0, 176, 9, 0, 0, 148, 9,
-        0, 0, 0, 0, 249, 11, 0, 0, 8, 0, 63, 88, 23, 23, 60, 25, 31, 31, 31,
-        31, 82, 81, 25, 97, 0, 0, 8, 96, 63, 96, 10, 0, 153, 9, 38, 0, 192,
-        0, 10, 0, 26, 48, 128, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        19, 0, 0, 0, 176, 9, 0, 0, 153, 9, 0, 0, 0, 0, 255, 11, 0, 64, 8, 0,
-        63, 88, 23, 23, 60, 25, 31, 31, 31, 31, 82, 81, 25, 97, 0, 0, 8, 96,
-        63, 96, 11, 0, 158, 9, 38, 0, 192, 0, 10, 0, 26, 48, 128, 0, 3, 0, 65,
-        126, 0, 6, 0, 10, 217, 3, 39, 0, 19, 0, 0, 0, 176, 9, 0, 0, 158, 9,
-        0, 0, 0, 0, 5, 12, 0, 128, 8, 0, 63, 88, 23, 23, 60, 25, 31, 31, 31,
-        31, 82, 81, 25, 97, 0, 0, 7, 96, 63, 96, 12, 0, 163, 9, 38, 0, 192,
-        0, 10, 0, 26, 48, 128, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        19, 0, 0, 0, 176, 9, 0, 0, 163, 9, 0, 0, 0, 0, 11, 12, 0, 192, 8, 0,
-        63, 88, 23, 23, 60, 25, 31, 31, 31, 31, 82, 81, 25, 97, 0, 0, 7, 96,
-        63, 96, 13, 0, 168, 9, 38, 0, 192, 0, 10, 0, 26, 48, 128, 0, 3, 0, 65,
-        126, 0, 6, 0, 10, 217, 3, 39, 0, 19, 0, 0, 0, 176, 9, 0, 0, 168, 9,
-        0, 0, 0, 0, 18, 12, 0, 0, 8, 0, 63, 88, 23, 23, 60, 25, 31, 31, 31,
-        31, 82, 81, 25, 97, 0, 0, 7, 96, 63, 96, 14, 0, 180, 9, 38, 0, 192,
-        0, 10, 0, 26, 48, 128, 0, 3, 0, 65, 126, 0, 6, 0, 10, 217, 3, 39, 0,
-        19, 0, 0, 0, 176, 9, 0, 0, 180, 9, 0, 0, 0, 0, 33, 12, 0, 0, 8, 0, 63,
-        88, 23, 23, 60, 25, 31, 31, 31, 31, 83, 81, 25, 97, 0, 0, 7, 96, 63,
-        96, 105, 116, 115, 115, 105, 99, 111, 114, 114, 0, 115, 119, 100, 105,
-        118, 95, 101, 110, 0, 101, 100, 111, 102, 102, 116, 104, 100, 50, 48,
-        117, 108, 0, 105, 110, 105, 116, 120, 105, 100, 120, 112, 99, 104, 0,
-        100, 115, 115, 102, 116, 104, 0, 99, 99, 107, 98, 119, 50, 48, 50, 103,
-        112, 111, 0, 99, 99, 107, 115, 99, 97, 108, 101, 0, 112, 97, 50, 103,
-        97, 48, 95, 50, 112, 119, 114, 0, 105, 110, 105, 116, 120, 105, 100,
-        120, 0, 99, 99, 107, 112, 119, 114, 111, 102, 102, 115, 101, 116, 48,
-        0, 112, 97, 112, 100, 109, 111, 100, 101, 0, 116, 101, 109, 112, 95,
-        113, 0, 109, 99, 115, 50, 103, 112, 111, 49, 0, 118, 98, 97, 116, 95,
-        109, 117, 108, 116, 0, 99, 99, 107, 105, 110, 105, 116, 120, 105, 100,
-        120, 0, 65, 118, 86, 109, 105, 100, 95, 99, 48, 0, 115, 114, 111, 109,
-        114, 101, 118, 0, 111, 102, 100, 109, 100, 105, 103, 102, 105, 108,
-        116, 116, 121, 112, 101, 0, 101, 100, 111, 110, 116, 104, 100, 50, 48,
-        108, 0, 108, 101, 103, 111, 102, 100, 109, 98, 119, 50, 48, 50, 103,
-        112, 111, 0, 112, 97, 50, 103, 97, 48, 0, 116, 120, 112, 119, 114, 111,
-        102, 102, 115, 101, 116, 50, 103, 0, 112, 109, 97, 120, 0, 118, 98,
-        97, 116, 95, 113, 0, 6, 7, 63, 3, 138, 0, 0, 0, 6, 7, 63, 3, 132, 0,
-        0, 0, 6, 7, 63, 3, 128, 0, 0, 0, 6, 7, 63, 3, 123, 0, 0, 0, 6, 7, 63,
-        3, 119, 0, 0, 0, 6, 7, 63, 3, 114, 0, 0, 0, 6, 7, 63, 3, 110, 0, 0,
-        0, 6, 7, 63, 3, 106, 0, 0, 0, 6, 7, 63, 3, 103, 0, 0, 0, 6, 7, 63, 3,
-        99, 0, 0, 0, 6, 7, 63, 3, 97, 0, 0, 0, 6, 7, 63, 3, 92, 0, 0, 0, 6,
-        7, 63, 3, 90, 0, 0, 0, 6, 7, 63, 3, 87, 0, 0, 0, 6, 7, 63, 3, 84, 0,
-        0, 0, 6, 7, 63, 3, 81, 0, 0, 0, 6, 7, 63, 3, 79, 0, 0, 0, 6, 7, 63,
-        3, 77, 0, 0, 0, 6, 7, 63, 3, 75, 0, 0, 0, 6, 7, 63, 3, 72, 0, 0, 0,
-        6, 7, 63, 3, 70, 0, 0, 0, 6, 7, 63, 3, 68, 0, 0, 0, 6, 7, 63, 3, 66,
-        0, 0, 0, 6, 7, 63, 3, 64, 0, 0, 0, 6, 7, 63, 3, 63, 0, 0, 0, 6, 7, 63,
-        3, 61, 0, 0, 0, 6, 7, 63, 3, 59, 0, 0, 0, 6, 7, 63, 3, 58, 0, 0, 0,
-        6, 7, 63, 3, 56, 0, 0, 0, 6, 7, 63, 3, 54, 0, 0, 0, 6, 7, 63, 3, 53,
-        0, 0, 0, 6, 7, 63, 3, 52, 0, 0, 0, 6, 7, 63, 3, 50, 0, 0, 0, 6, 7, 63,
-        3, 49, 0, 0, 0, 6, 7, 63, 3, 48, 0, 0, 0, 6, 7, 62, 3, 47, 0, 0, 0,
-        6, 7, 60, 3, 47, 0, 0, 0, 6, 7, 59, 3, 47, 0, 0, 0, 6, 7, 59, 3, 45,
-        0, 0, 0, 6, 7, 58, 3, 45, 0, 0, 0, 6, 7, 58, 3, 44, 0, 0, 0, 6, 7, 58,
-        3, 43, 0, 0, 0, 6, 7, 58, 3, 41, 0, 0, 0, 6, 7, 57, 3, 41, 0, 0, 0,
-        6, 7, 56, 3, 40, 0, 0, 0, 6, 7, 56, 3, 39, 0, 0, 0, 6, 7, 56, 3, 38,
-        0, 0, 0, 6, 7, 56, 3, 37, 0, 0, 0, 6, 7, 56, 3, 36, 0, 0, 0, 6, 7, 55,
-        3, 36, 0, 0, 0, 6, 7, 55, 3, 35, 0, 0, 0, 6, 7, 55, 3, 34, 0, 0, 0,
-        6, 7, 55, 3, 33, 0, 0, 0, 6, 7, 53, 3, 33, 0, 0, 0, 6, 7, 53, 3, 32,
-        0, 0, 0, 6, 7, 52, 3, 32, 0, 0, 0, 6, 7, 52, 3, 31, 0, 0, 0, 6, 7, 50,
-        3, 31, 0, 0, 0, 6, 7, 51, 3, 30, 0, 0, 0, 6, 7, 51, 3, 29, 0, 0, 0,
-        6, 7, 49, 3, 29, 0, 0, 0, 6, 7, 50, 3, 28, 0, 0, 0, 6, 7, 48, 3, 28,
-        0, 0, 0, 6, 7, 47, 3, 28, 0, 0, 0, 6, 7, 45, 3, 28, 0, 0, 0, 6, 7, 43,
-        3, 28, 0, 0, 0, 6, 7, 42, 3, 28, 0, 0, 0, 6, 7, 41, 3, 28, 0, 0, 0,
-        6, 7, 40, 3, 28, 0, 0, 0, 6, 7, 40, 3, 27, 0, 0, 0, 6, 7, 39, 3, 27,
-        0, 0, 0, 6, 7, 39, 3, 26, 0, 0, 0, 6, 7, 38, 3, 26, 0, 0, 0, 6, 7, 36,
-        3, 26, 0, 0, 0, 6, 7, 35, 3, 26, 0, 0, 0, 6, 7, 34, 3, 26, 0, 0, 0,
-        6, 7, 33, 3, 26, 0, 0, 0, 6, 7, 33, 3, 25, 0, 0, 0, 6, 7, 32, 3, 25,
-        0, 0, 0, 6, 7, 31, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30,
-        3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0,
-        6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25,
-        0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30,
-        3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0,
-        6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25,
-        0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30,
-        3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0,
-        6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25,
-        0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30,
-        3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0,
-        6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25,
-        0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30,
-        3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0,
-        6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25,
-        0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30,
-        3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0,
-        6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 7, 30, 3, 25,
-        0, 0, 0, 6, 7, 30, 3, 25, 0, 0, 0, 6, 15, 63, 255, 98, 0, 0, 0, 6, 15,
-        63, 255, 94, 0, 0, 0, 6, 15, 63, 255, 89, 0, 0, 0, 6, 15, 63, 255, 85,
-        0, 0, 0, 6, 15, 63, 255, 81, 0, 0, 0, 6, 15, 63, 255, 77, 0, 0, 0, 6,
-        15, 63, 255, 74, 0, 0, 0, 6, 15, 63, 255, 71, 0, 0, 0, 6, 15, 63, 255,
-        68, 0, 0, 0, 6, 15, 63, 255, 65, 0, 0, 0, 6, 15, 63, 255, 62, 0, 0,
-        0, 6, 15, 63, 255, 60, 0, 0, 0, 6, 15, 63, 255, 58, 0, 0, 0, 6, 15,
-        63, 255, 55, 0, 0, 0, 6, 15, 63, 255, 53, 0, 0, 0, 6, 15, 63, 255, 51,
-        0, 0, 0, 6, 15, 63, 255, 50, 0, 0, 0, 6, 15, 63, 255, 48, 0, 0, 0, 6,
-        15, 63, 255, 46, 0, 0, 0, 6, 15, 61, 255, 46, 0, 0, 0, 6, 15, 57, 255,
-        47, 0, 0, 0, 6, 15, 58, 255, 45, 0, 0, 0, 6, 15, 57, 255, 44, 0, 0,
-        0, 6, 15, 55, 255, 44, 0, 0, 0, 6, 15, 54, 255, 43, 0, 0, 0, 6, 15,
-        54, 255, 42, 0, 0, 0, 6, 15, 53, 255, 41, 0, 0, 0, 6, 15, 53, 255, 40,
-        0, 0, 0, 6, 15, 51, 255, 40, 0, 0, 0, 6, 15, 49, 255, 40, 0, 0, 0, 6,
-        15, 48, 255, 39, 0, 0, 0, 6, 15, 47, 255, 39, 0, 0, 0, 6, 15, 45, 255,
-        39, 0, 0, 0, 6, 15, 46, 255, 37, 0, 0, 0, 6, 15, 44, 255, 37, 0, 0,
-        0, 6, 15, 43, 255, 37, 0, 0, 0, 6, 15, 41, 255, 37, 0, 0, 0, 6, 15,
-        40, 255, 36, 0, 0, 0, 6, 15, 38, 255, 37, 0, 0, 0, 6, 15, 36, 255, 38,
-        0, 0, 0, 6, 15, 34, 255, 38, 0, 0, 0, 6, 15, 33, 255, 38, 0, 0, 0, 6,
-        15, 33, 255, 37, 0, 0, 0, 6, 15, 34, 255, 35, 0, 0, 0, 6, 15, 32, 255,
-        35, 0, 0, 0, 6, 15, 31, 255, 35, 0, 0, 0, 6, 15, 31, 255, 34, 0, 0,
-        0, 6, 15, 31, 255, 33, 0, 0, 0, 6, 15, 28, 255, 34, 0, 0, 0, 6, 15,
-        28, 255, 33, 0, 0, 0, 6, 15, 28, 255, 32, 0, 0, 0, 6, 15, 28, 255, 31,
-        0, 0, 0, 6, 15, 28, 255, 30, 0, 0, 0, 6, 15, 26, 255, 31, 0, 0, 0, 6,
-        15, 26, 255, 30, 0, 0, 0, 6, 15, 25, 255, 30, 0, 0, 0, 6, 15, 25, 255,
-        29, 0, 0, 0, 6, 15, 24, 255, 29, 0, 0, 0, 6, 15, 24, 255, 28, 0, 0,
-        0, 6, 15, 22, 255, 29, 0, 0, 0, 6, 15, 22, 255, 28, 0, 0, 0, 6, 15,
-        23, 255, 27, 0, 0, 0, 6, 15, 23, 255, 26, 0, 0, 0, 6, 15, 23, 255, 25,
-        0, 0, 0, 6, 15, 22, 255, 25, 0, 0, 0, 6, 15, 21, 255, 25, 0, 0, 0, 6,
-        15, 20, 255, 25, 0, 0, 0, 6, 15, 22, 255, 23, 0, 0, 0, 6, 15, 21, 255,
-        23, 0, 0, 0, 6, 15, 23, 255, 21, 0, 0, 0, 6, 15, 22, 255, 21, 0, 0,
-        0, 6, 15, 21, 255, 21, 0, 0, 0, 6, 15, 20, 255, 21, 0, 0, 0, 6, 15,
-        21, 255, 20, 0, 0, 0, 6, 15, 20, 255, 20, 0, 0, 0, 6, 15, 20, 255, 19,
-        0, 0, 0, 6, 15, 21, 255, 18, 0, 0, 0, 6, 15, 18, 255, 19, 0, 0, 0, 6,
-        15, 19, 255, 18, 0, 0, 0, 6, 15, 18, 255, 18, 0, 0, 0, 6, 15, 17, 255,
-        18, 0, 0, 0, 6, 15, 16, 255, 18, 0, 0, 0, 6, 15, 13, 255, 20, 0, 0,
-        0, 6, 15, 15, 255, 18, 0, 0, 0, 6, 15, 14, 255, 18, 0, 0, 0, 6, 15,
-        12, 255, 19, 0, 0, 0, 6, 15, 13, 255, 18, 0, 0, 0, 6, 15, 12, 255, 18,
-        0, 0, 0, 6, 15, 11, 255, 19, 0, 0, 0, 6, 15, 12, 255, 17, 0, 0, 0, 6,
-        15, 8, 255, 20, 0, 0, 0, 6, 15, 9, 255, 19, 0, 0, 0, 6, 15, 8, 255,
-        19, 0, 0, 0, 6, 15, 10, 255, 17, 0, 0, 0, 6, 15, 8, 255, 18, 0, 0, 0,
-        6, 15, 7, 255, 19, 0, 0, 0, 6, 15, 8, 255, 17, 0, 0, 0, 6, 15, 7, 255,
-        18, 0, 0, 0, 6, 15, 7, 255, 17, 0, 0, 0, 6, 15, 5, 255, 19, 0, 0, 0,
-        6, 15, 8, 255, 15, 0, 0, 0, 6, 15, 9, 255, 14, 0, 0, 0, 6, 15, 8, 255,
-        14, 0, 0, 0, 6, 15, 7, 255, 15, 0, 0, 0, 6, 15, 4, 255, 17, 0, 0, 0,
-        6, 15, 5, 255, 16, 0, 0, 0, 6, 15, 3, 255, 18, 0, 0, 0, 6, 15, 4, 255,
-        16, 0, 0, 0, 6, 15, 1, 255, 20, 0, 0, 0, 6, 15, 2, 255, 18, 0, 0, 0,
-        6, 15, 1, 255, 19, 0, 0, 0, 6, 15, 2, 255, 17, 0, 0, 0, 6, 15, 1, 255,
-        18, 0, 0, 0, 6, 15, 2, 255, 16, 0, 0, 0, 6, 15, 1, 255, 17, 0, 0, 0,
-        6, 15, 1, 255, 16, 0, 0, 0, 6, 15, 1, 255, 16, 0, 0, 0, 6, 15, 1, 255,
-        16, 0, 0, 0, 6, 15, 1, 255, 16, 0, 0, 0, 6, 15, 1, 255, 16, 0, 0, 0,
-        6, 15, 1, 255, 16, 0, 0, 0, 6, 15, 1, 255, 16, 0, 0, 0, 6, 15, 1, 255,
-        16, 0, 0, 0, 6, 15, 1, 255, 16, 0, 0, 0, 6, 15, 1, 255, 16, 0, 0, 0,
-        6, 15, 1, 255, 16, 0, 0, 0, 6, 15, 1, 255, 16, 0, 0, 0, 6, 15, 1, 255,
-        16, 0, 0, 0, 114, 97, 116, 101, 115, 101, 108, 0, 115, 116, 102, 0,
-        99, 99, 107, 95, 111, 110, 101, 99, 111, 114, 101, 95, 116, 120, 0,
-        116, 101, 109, 112, 115, 95, 112, 101, 114, 105, 111, 100, 0, 116, 120,
-        99, 104, 97, 105, 110, 0, 114, 120, 99, 104, 97, 105, 110, 0, 115, 119,
-        100, 105, 118, 95, 115, 110, 114, 116, 104, 114, 101, 115, 104, 0, 115,
-        119, 100, 105, 118, 95, 116, 120, 95, 119, 101, 105, 103, 104, 116,
-        0, 115, 119, 100, 105, 118, 95, 115, 110, 114, 108, 105, 109, 0, 115,
-        119, 100, 105, 118, 95, 115, 119, 99, 116, 114, 108, 95, 109, 97, 115,
-        107, 0, 115, 119, 100, 105, 118, 95, 116, 105, 109, 101, 111, 117, 116,
-        0, 115, 119, 100, 105, 118, 95, 115, 119, 99, 116, 114, 108, 95, 97,
-        110, 116, 48, 0, 115, 119, 100, 105, 118, 95, 115, 119, 99, 116, 114,
-        108, 95, 97, 110, 116, 49, 0, 115, 119, 100, 105, 118, 95, 119, 101,
-        105, 103, 104, 116, 0, 115, 119, 100, 105, 118, 95, 115, 101, 116, 116,
-        108, 101, 0, 115, 119, 100, 105, 118, 95, 101, 110, 0, 115, 119, 100,
-        105, 118, 95, 114, 120, 95, 112, 111, 108, 105, 99, 121, 0, 115, 119,
-        100, 105, 118, 95, 116, 120, 95, 112, 111, 108, 105, 99, 121, 0, 115,
-        119, 100, 105, 118, 95, 115, 119, 99, 116, 114, 108, 95, 101, 110, 0,
-        115, 119, 100, 105, 118, 95, 116, 104, 114, 101, 115, 104, 0, 115, 119,
-        100, 105, 118, 95, 103, 112, 105, 111, 95, 49, 0, 115, 119, 100, 105,
-        118, 95, 99, 99, 107, 110, 111, 105, 115, 101, 101, 115, 116, 108, 105,
-        109, 0, 115, 119, 100, 105, 118, 95, 108, 111, 103, 50, 97, 118, 103,
-        0, 115, 119, 100, 105, 118, 95, 103, 112, 105, 111, 0, 115, 119, 100,
-        105, 118, 95, 99, 101, 108, 108, 95, 112, 111, 108, 105, 99, 121, 0,
-        115, 119, 100, 105, 118, 95, 99, 99, 107, 115, 110, 114, 99, 111, 114,
-        114, 0, 0, 115, 181, 67, 105, 22, 70, 0, 34, 47, 43, 4, 70, 13, 70,
-        1, 146, 8, 221, 51, 43, 6, 208, 19, 70, 1, 33, 179, 247, 149, 255, 131,
-        5, 155, 13, 7, 224, 0, 33, 32, 70, 10, 70, 179, 247, 208, 255, 6, 75,
-        3, 64, 27, 12, 27, 2, 32, 70, 51, 96, 1, 169, 42, 70, 0, 240, 5, 248,
-        1, 152, 124, 189, 0, 191, 0, 0, 255, 3, 248, 181, 4, 70, 14, 70, 21,
-        70, 185, 243, 26, 245, 64, 246, 18, 1, 0, 34, 7, 70, 32, 70, 186, 243,
-        83, 240, 32, 70, 185, 243, 24, 245, 32, 70, 57, 70, 186, 243, 90, 240,
-        2, 75, 51, 96, 79, 244, 200, 99, 43, 96, 248, 189, 204, 242, 5, 0, 11,
-        70, 192, 111, 17, 70, 26, 70, 255, 247, 184, 191, 16, 181, 1, 33, 4,
-        70, 192, 111, 180, 247, 2, 248, 224, 111, 186, 243, 111, 240, 0, 32,
-        16, 189, 55, 181, 0, 36, 105, 70, 1, 170, 5, 70, 0, 148, 1, 148, 255,
-        247, 230, 255, 157, 232, 6, 0, 3, 70, 40, 70, 241, 243, 160, 245, 32,
-        70, 62, 189, 56, 181, 4, 70, 192, 111, 179, 247, 241, 255, 72, 177,
-        32, 70, 255, 247, 230, 255, 5, 70, 56, 185, 32, 70, 255, 247, 214, 255,
-        40, 70, 56, 189, 79, 240, 255, 48, 56, 189, 0, 32, 56, 189, 45, 233,
-        255, 65, 7, 70, 79, 244, 178, 112, 14, 70, 21, 70, 152, 70, 179, 247,
-        139, 253, 4, 70, 0, 40, 48, 208, 0, 33, 79, 244, 178, 114, 174, 243,
-        29, 247, 10, 155, 56, 70, 0, 147, 4, 241, 128, 3, 1, 147, 4, 241, 132,
-        3, 2, 147, 49, 70, 42, 70, 67, 70, 245, 247, 157, 251, 224, 103, 176,
-        177, 64, 246, 18, 1, 0, 34, 185, 243, 230, 247, 12, 33, 0, 34, 196,
-        248, 136, 0, 224, 111, 185, 243, 147, 244, 32, 70, 248, 247, 172, 252,
-        32, 70, 255, 247, 183, 255, 224, 111, 245, 247, 68, 249, 0, 37, 0, 224,
-        11, 37, 32, 70, 179, 247, 91, 253, 0, 224, 30, 37, 40, 70, 4, 176, 189,
-        232, 240, 129, 138, 165, 0, 0, 1, 188, 96, 3, 0, 16, 78, 3, 191, 222,
-        2, 240, 13, 223, 3, 168, 94, 2, 240, 0, 16, 3, 166, 94, 2, 240, 0, 16,
-        2, 130, 94, 83, 0, 0, 16, 2, 133, 94, 175, 0, 0, 16, 2, 2, 0, 191, 0,
-        0, 13, 3, 168, 94, 2, 240, 0, 16, 2, 130, 222, 187, 0, 0, 16, 2, 130,
-        222, 179, 0, 0, 16, 2, 132, 94, 183, 0, 0, 16, 2, 132, 94, 179, 0, 0,
-        16, 2, 134, 0, 199, 0, 0, 16, 2, 132, 128, 195, 0, 0, 16, 1, 188, 99,
-        255, 31, 240, 64, 0, 0, 128, 0, 0, 0, 0, 3, 91, 94, 2, 240, 0, 18, 1,
-        188, 96, 19, 0, 16, 67, 0, 1, 94, 2, 240, 0, 0, 0, 2, 94, 2, 240, 23,
-        71, 2, 2, 0, 191, 0, 0, 175, 2, 4, 94, 255, 0, 0, 25, 0, 107, 68, 101,
-        86, 128, 25, 1, 132, 96, 2, 247, 247, 191, 1, 188, 96, 3, 0, 10, 166,
-        0, 2, 94, 2, 240, 17, 58, 2, 2, 222, 255, 0, 0, 30, 0, 107, 68, 101,
-        85, 32, 30, 1, 130, 224, 2, 247, 247, 191, 3, 191, 222, 2, 240, 6, 185,
-        2, 1, 172, 123, 0, 0, 35, 0, 232, 68, 101, 97, 119, 161, 1, 188, 96,
-        127, 8, 23, 162, 0, 109, 94, 134, 244, 64, 35, 0, 168, 44, 123, 1, 11,
-        30, 0, 104, 43, 79, 0, 0, 40, 2, 128, 222, 255, 0, 0, 175, 0, 107, 68,
-        101, 90, 96, 175, 1, 132, 224, 6, 245, 119, 171, 0, 2, 94, 2, 240, 20,
-        142, 2, 4, 128, 199, 0, 0, 42, 2, 129, 128, 199, 0, 0, 44, 1, 128, 96,
-        2, 247, 247, 191, 1, 188, 96, 3, 0, 10, 218, 0, 144, 43, 227, 0, 215,
-        162, 0, 224, 43, 222, 244, 87, 163, 0, 109, 68, 106, 244, 96, 48, 0,
-        176, 43, 215, 0, 10, 240, 1, 135, 96, 2, 247, 247, 191, 0, 104, 43,
-        191, 0, 0, 56, 0, 233, 68, 101, 93, 247, 163, 0, 232, 196, 105, 94,
-        119, 162, 0, 104, 222, 139, 0, 0, 56, 0, 109, 222, 141, 94, 0, 56, 2,
-        134, 171, 211, 0, 0, 56, 1, 135, 96, 6, 247, 247, 191, 2, 7, 222, 255,
-        0, 0, 61, 0, 232, 68, 101, 90, 55, 162, 0, 109, 94, 137, 90, 0, 61,
-        1, 135, 224, 2, 247, 247, 191, 1, 188, 96, 3, 0, 10, 209, 0, 104, 44,
-        111, 0, 0, 67, 1, 188, 97, 247, 0, 23, 161, 0, 232, 68, 101, 99, 119,
-        162, 0, 109, 94, 138, 244, 32, 67, 1, 188, 96, 3, 0, 11, 27, 0, 168,
-        44, 123, 0, 43, 30, 0, 104, 42, 231, 0, 0, 79, 0, 232, 68, 101, 87,
-        55, 161, 0, 109, 222, 133, 86, 64, 74, 0, 104, 43, 35, 0, 0, 79, 0,
-        232, 68, 101, 89, 23, 161, 0, 109, 222, 133, 86, 64, 76, 3, 191, 222,
-        2, 240, 0, 79, 1, 188, 96, 3, 0, 10, 186, 1, 188, 96, 3, 0, 10, 185,
-        1, 188, 96, 3, 0, 10, 200, 1, 188, 96, 3, 0, 10, 192, 0, 168, 44, 123,
-        0, 75, 30, 2, 2, 222, 179, 0, 0, 82, 2, 0, 66, 3, 0, 0, 82, 0, 2, 94,
-        2, 240, 12, 215, 2, 3, 197, 115, 0, 0, 85, 2, 132, 94, 179, 0, 0, 175,
-        0, 104, 170, 239, 0, 0, 175, 2, 132, 222, 183, 0, 0, 87, 2, 1, 128,
-        199, 0, 0, 119, 0, 176, 42, 171, 0, 23, 162, 2, 128, 43, 211, 0, 0,
-        94, 0, 176, 43, 3, 0, 23, 161, 0, 109, 222, 133, 91, 224, 169, 0, 104,
-        94, 135, 0, 0, 94, 0, 104, 43, 231, 0, 0, 94, 0, 176, 43, 231, 0, 23,
-        162, 0, 104, 42, 235, 0, 0, 100, 0, 232, 68, 101, 87, 87, 161, 1, 133,
-        96, 6, 245, 215, 174, 0, 109, 222, 134, 244, 64, 169, 0, 224, 94, 133,
-        84, 247, 161, 0, 109, 222, 134, 244, 64, 169, 1, 133, 96, 2, 245, 215,
-        174, 2, 2, 222, 187, 0, 0, 119, 0, 104, 42, 155, 0, 0, 119, 0, 232,
-        68, 101, 85, 215, 161, 0, 224, 42, 155, 1, 87, 162, 0, 110, 222, 134,
-        244, 64, 112, 1, 130, 224, 2, 245, 215, 174, 1, 129, 96, 1, 99, 203,
-        30, 1, 188, 96, 3, 0, 10, 234, 1, 188, 96, 3, 0, 10, 166, 1, 188, 96,
-        3, 0, 10, 229, 3, 191, 222, 2, 240, 0, 119, 0, 110, 170, 154, 244, 32,
-        118, 0, 232, 42, 154, 244, 55, 161, 0, 144, 42, 155, 0, 55, 162, 0,
-        110, 42, 158, 244, 64, 117, 0, 176, 42, 159, 0, 23, 162, 0, 105, 222,
-        134, 244, 64, 119, 3, 191, 222, 2, 240, 0, 169, 2, 132, 222, 183, 0,
-        0, 156, 2, 136, 129, 171, 0, 0, 154, 2, 4, 94, 183, 0, 0, 175, 2, 4,
-        128, 199, 0, 0, 131, 0, 104, 42, 247, 0, 32, 131, 0, 104, 42, 247, 0,
-        128, 131, 0, 104, 42, 223, 0, 0, 130, 0, 104, 42, 247, 2, 224, 128,
-        0, 104, 170, 247, 8, 96, 130, 0, 232, 68, 101, 86, 55, 161, 0, 109,
-        94, 133, 86, 224, 175, 2, 0, 94, 255, 0, 0, 154, 2, 128, 128, 191, 0,
-        0, 154, 0, 104, 43, 35, 0, 0, 137, 2, 128, 43, 211, 0, 0, 137, 0, 176,
-        43, 43, 0, 23, 187, 0, 110, 43, 2, 247, 96, 175, 3, 191, 222, 2, 240,
-        0, 154, 2, 5, 222, 183, 0, 0, 140, 0, 104, 42, 247, 8, 96, 175, 3, 191,
-        222, 2, 240, 0, 154, 2, 132, 0, 199, 0, 0, 142, 2, 134, 0, 199, 0, 0,
-        144, 0, 104, 42, 235, 0, 0, 154, 2, 129, 44, 39, 0, 0, 154, 0, 232,
-        68, 101, 86, 55, 161, 2, 6, 171, 211, 0, 0, 148, 0, 232, 69, 201, 90,
-        247, 162, 3, 191, 222, 2, 240, 0, 149, 0, 232, 69, 137, 90, 247, 162,
-        2, 134, 171, 211, 0, 0, 152, 0, 232, 94, 134, 244, 87, 161, 0, 105,
-        222, 133, 87, 0, 154, 0, 108, 196, 101, 86, 96, 175, 2, 133, 94, 183,
-        0, 0, 175, 0, 2, 94, 2, 240, 20, 184, 3, 191, 222, 2, 240, 0, 175, 2,
-        133, 171, 211, 0, 0, 163, 2, 6, 171, 211, 0, 0, 161, 1, 188, 99, 255,
-        31, 247, 161, 0, 104, 69, 198, 244, 32, 154, 3, 191, 222, 2, 240, 0,
-        163, 1, 188, 99, 255, 31, 247, 161, 0, 104, 69, 134, 244, 32, 154, 2,
-        3, 197, 115, 0, 0, 169, 2, 133, 94, 183, 0, 0, 169, 2, 1, 0, 199, 0,
-        0, 175, 0, 107, 68, 101, 86, 128, 175, 0, 32, 227, 254, 20, 96, 175,
-        2, 130, 222, 187, 0, 0, 175, 2, 136, 129, 171, 0, 0, 175, 2, 130, 222,
-        179, 0, 0, 175, 2, 128, 128, 191, 0, 0, 175, 2, 132, 222, 175, 0, 0,
-        175, 2, 130, 94, 187, 0, 0, 175, 0, 2, 94, 2, 240, 20, 235, 1, 128,
-        96, 2, 13, 144, 108, 3, 89, 94, 2, 240, 0, 177, 3, 216, 94, 2, 240,
-        0, 178, 3, 216, 222, 2, 240, 0, 179, 1, 188, 97, 131, 0, 17, 41, 0,
-        176, 0, 123, 0, 17, 43, 1, 188, 99, 3, 0, 17, 35, 3, 18, 94, 2, 240,
-        12, 90, 3, 151, 94, 2, 240, 12, 235, 3, 208, 94, 2, 240, 3, 137, 3,
-        208, 222, 2, 240, 6, 42, 3, 213, 222, 2, 240, 12, 9, 3, 145, 94, 2,
-        240, 6, 145, 3, 150, 222, 2, 240, 12, 4, 2, 136, 193, 115, 0, 1, 29,
-        3, 196, 94, 2, 240, 8, 7, 3, 199, 94, 2, 240, 8, 41, 3, 220, 222, 2,
-        240, 21, 50, 3, 170, 94, 2, 240, 8, 153, 3, 134, 222, 2, 240, 12, 75,
-        2, 135, 192, 55, 0, 12, 75, 3, 131, 94, 2, 240, 10, 16, 2, 6, 128, 199,
-        0, 0, 203, 2, 2, 176, 195, 0, 0, 203, 0, 108, 48, 202, 35, 32, 203,
-        1, 130, 224, 1, 134, 12, 48, 1, 188, 96, 127, 31, 247, 162, 1, 224,
-        94, 138, 16, 112, 131, 3, 145, 222, 2, 240, 7, 22, 2, 6, 128, 199, 0,
-        1, 2, 2, 6, 1, 171, 0, 0, 222, 2, 0, 48, 195, 0, 0, 222, 0, 104, 222,
-        75, 6, 32, 222, 2, 0, 66, 3, 0, 0, 222, 2, 132, 69, 35, 0, 0, 222, 2,
-        128, 176, 195, 0, 0, 222, 0, 110, 69, 23, 0, 32, 222, 1, 188, 96, 3,
-        0, 16, 128, 0, 168, 65, 35, 0, 240, 72, 3, 208, 222, 2, 240, 0, 215,
-        3, 208, 94, 2, 240, 0, 216, 3, 213, 222, 2, 240, 0, 217, 0, 224, 1,
-        223, 0, 32, 119, 1, 128, 224, 5, 134, 12, 48, 1, 188, 96, 3, 0, 12,
-        49, 0, 2, 94, 2, 240, 23, 34, 0, 2, 94, 2, 240, 23, 54, 2, 14, 1, 171,
-        0, 0, 235, 2, 132, 69, 35, 0, 0, 235, 2, 1, 48, 195, 0, 0, 235, 0, 224,
-        1, 227, 0, 32, 120, 1, 129, 96, 1, 134, 12, 48, 1, 128, 224, 1, 134,
-        12, 48, 1, 12, 129, 67, 0, 23, 166, 0, 104, 222, 155, 0, 96, 232, 1,
-        188, 96, 3, 0, 76, 49, 3, 191, 222, 2, 240, 0, 234, 0, 104, 222, 155,
-        0, 64, 234, 1, 188, 96, 3, 0, 44, 49, 0, 2, 94, 2, 240, 23, 34, 2, 6,
-        129, 171, 0, 1, 2, 2, 2, 48, 195, 0, 0, 246, 2, 128, 66, 3, 0, 0, 246,
-        2, 132, 69, 35, 0, 0, 246, 3, 145, 94, 2, 240, 6, 145, 0, 224, 1, 235,
-        0, 32, 122, 1, 128, 224, 5, 134, 12, 48, 1, 130, 96, 1, 134, 12, 48,
-        1, 188, 96, 3, 0, 12, 49, 0, 2, 94, 2, 240, 23, 34, 0, 2, 94, 2, 240,
-        23, 54, 2, 1, 176, 195, 0, 0, 249, 0, 108, 48, 206, 35, 32, 249, 1,
-        129, 224, 1, 134, 12, 48, 2, 3, 48, 195, 0, 1, 2, 0, 108, 48, 210, 35,
-        33, 2, 1, 131, 96, 1, 134, 12, 48, 2, 0, 66, 3, 0, 1, 2, 0, 104, 94,
-        75, 4, 65, 0, 0, 104, 94, 75, 0, 65, 0, 3, 191, 222, 2, 240, 1, 2, 1,
-        130, 96, 6, 9, 16, 72, 1, 188, 96, 3, 0, 17, 69, 3, 194, 222, 2, 240,
-        12, 178, 0, 2, 94, 2, 240, 17, 57, 3, 212, 222, 2, 240, 7, 176, 3, 163,
-        222, 2, 240, 0, 2, 3, 200, 94, 2, 240, 5, 232, 2, 4, 222, 179, 0, 1,
-        11, 2, 1, 69, 35, 0, 1, 11, 1, 132, 224, 2, 245, 151, 172, 0, 2, 94,
-        2, 240, 6, 36, 2, 1, 197, 35, 0, 1, 13, 1, 135, 224, 2, 245, 119, 171,
-        0, 2, 94, 2, 240, 16, 122, 2, 24, 46, 3, 0, 1, 16, 0, 2, 94, 2, 240,
-        16, 141, 3, 162, 94, 2, 240, 1, 26, 3, 86, 94, 2, 240, 1, 23, 1, 134,
-        96, 6, 9, 16, 72, 3, 31, 94, 2, 240, 1, 23, 0, 106, 94, 35, 0, 1, 22,
-        0, 176, 0, 39, 0, 23, 136, 0, 232, 94, 35, 0, 55, 136, 3, 166, 94, 2,
-        240, 1, 136, 0, 2, 94, 2, 240, 16, 251, 0, 40, 96, 14, 8, 225, 173,
-        3, 196, 222, 2, 240, 13, 34, 0, 32, 194, 3, 0, 33, 190, 3, 191, 222,
-        2, 240, 2, 14, 3, 129, 94, 2, 240, 1, 31, 3, 0, 222, 2, 240, 0, 190,
-        1, 136, 224, 2, 11, 144, 92, 3, 191, 222, 2, 240, 3, 134, 2, 135, 64,
-        99, 0, 1, 33, 1, 142, 224, 14, 244, 48, 24, 2, 135, 64, 99, 0, 1, 35,
-        0, 2, 222, 2, 240, 0, 0, 2, 135, 64, 99, 0, 1, 37, 0, 176, 94, 139,
-        0, 16, 25, 1, 142, 224, 10, 244, 48, 24, 0, 2, 222, 2, 240, 0, 0, 1,
-        188, 96, 99, 0, 16, 123, 1, 188, 96, 27, 0, 16, 122, 1, 172, 96, 126,
-        244, 112, 117, 2, 135, 65, 215, 0, 1, 44, 0, 2, 222, 2, 240, 0, 0, 1,
-        188, 96, 99, 0, 16, 123, 1, 188, 96, 27, 0, 16, 122, 1, 172, 96, 190,
-        244, 112, 117, 2, 135, 65, 215, 0, 1, 49, 0, 2, 222, 2, 240, 0, 0, 1,
-        188, 96, 99, 0, 16, 123, 0, 176, 94, 139, 0, 16, 122, 1, 172, 96, 126,
-        244, 48, 117, 2, 135, 65, 215, 0, 1, 54, 0, 2, 222, 2, 240, 0, 0, 1,
-        188, 96, 99, 0, 16, 123, 0, 176, 94, 139, 0, 16, 122, 1, 172, 96, 190,
-        244, 48, 117, 2, 135, 65, 215, 0, 1, 59, 0, 2, 222, 2, 240, 0, 0, 1,
-        188, 96, 3, 2, 128, 6, 2, 128, 222, 7, 0, 1, 71, 1, 218, 96, 2, 240,
-        23, 128, 2, 8, 94, 7, 0, 1, 91, 1, 188, 96, 3, 30, 23, 161, 0, 224,
-        94, 2, 244, 48, 101, 1, 188, 96, 3, 28, 23, 161, 0, 224, 94, 2, 244,
-        48, 100, 1, 188, 96, 3, 0, 40, 17, 3, 191, 222, 2, 240, 1, 97, 1, 16,
-        94, 3, 0, 23, 161, 1, 3, 94, 3, 0, 23, 162, 0, 224, 94, 134, 244, 87,
-        161, 0, 136, 94, 135, 0, 55, 162, 0, 224, 94, 134, 244, 87, 161, 0,
-        224, 1, 90, 244, 48, 99, 2, 134, 0, 195, 0, 1, 82, 0, 176, 86, 11, 0,
-        16, 98, 0, 176, 84, 3, 0, 16, 98, 1, 188, 96, 3, 0, 40, 17, 3, 191,
-        222, 2, 240, 1, 99, 0, 176, 65, 143, 0, 16, 98, 1, 9, 222, 3, 0, 23,
-        161, 0, 104, 222, 135, 0, 65, 86, 0, 224, 94, 135, 0, 55, 161, 0, 136,
-        94, 135, 0, 87, 161, 0, 224, 94, 133, 4, 183, 161, 0, 224, 94, 135,
-        3, 192, 6, 1, 188, 96, 3, 0, 72, 17, 3, 191, 222, 2, 240, 1, 99, 1,
-        188, 96, 7, 2, 23, 161, 0, 224, 94, 2, 244, 48, 101, 1, 188, 96, 7,
-        0, 23, 161, 0, 224, 94, 2, 244, 48, 100, 1, 188, 96, 3, 24, 0, 6, 1,
-        188, 96, 3, 0, 8, 17, 0, 176, 90, 3, 0, 16, 98, 0, 176, 88, 3, 0, 16,
-        99, 0, 2, 222, 2, 240, 0, 0, 1, 188, 96, 3, 6, 55, 146, 1, 188, 99,
-        255, 31, 240, 195, 1, 188, 96, 3, 24, 144, 227, 1, 188, 96, 251, 28,
-        16, 229, 1, 188, 96, 3, 0, 80, 16, 0, 176, 64, 67, 0, 24, 0, 0, 176,
-        64, 71, 0, 16, 231, 0, 2, 222, 2, 240, 0, 0, 0, 232, 64, 51, 0, 151,
-        161, 0, 176, 64, 11, 0, 23, 163, 0, 109, 94, 134, 244, 97, 113, 0, 144,
-        94, 143, 0, 55, 163, 3, 191, 222, 2, 240, 1, 114, 0, 144, 94, 135, 0,
-        55, 163, 1, 188, 96, 27, 4, 55, 161, 0, 224, 94, 142, 244, 55, 163,
-        1, 240, 65, 151, 0, 23, 161, 0, 109, 222, 134, 244, 97, 134, 2, 135,
-        193, 151, 0, 1, 122, 1, 56, 90, 3, 0, 23, 161, 1, 60, 90, 3, 0, 23,
-        162, 3, 191, 222, 2, 240, 1, 124, 1, 60, 90, 3, 0, 23, 161, 1, 56, 90,
-        7, 0, 23, 162, 0, 104, 94, 134, 244, 129, 129, 0, 216, 94, 139, 0, 55,
-        162, 0, 225, 65, 150, 244, 80, 101, 0, 225, 193, 151, 0, 48, 101, 3,
-        191, 222, 2, 240, 1, 116, 0, 216, 94, 139, 0, 55, 162, 0, 225, 65, 150,
-        244, 87, 161, 0, 225, 222, 135, 0, 55, 161, 1, 240, 94, 135, 0, 23,
-        161, 0, 110, 222, 134, 244, 97, 135, 1, 188, 99, 255, 31, 247, 164,
-        0, 2, 222, 2, 240, 0, 0, 2, 6, 129, 171, 0, 1, 138, 1, 130, 96, 1, 134,
-        12, 48, 0, 32, 227, 142, 9, 0, 2, 3, 30, 222, 2, 240, 1, 143, 3, 159,
-        94, 2, 240, 1, 143, 0, 2, 94, 2, 240, 1, 180, 3, 191, 222, 2, 240, 0,
-        2, 2, 8, 65, 31, 0, 1, 141, 1, 129, 96, 5, 97, 11, 8, 0, 2, 94, 2, 240,
-        12, 215, 0, 176, 0, 171, 0, 16, 134, 0, 176, 1, 99, 0, 16, 138, 0, 2,
-        94, 2, 240, 15, 118, 1, 188, 96, 3, 4, 23, 146, 0, 176, 0, 59, 0, 17,
-        29, 1, 144, 96, 6, 9, 16, 72, 3, 161, 222, 2, 240, 1, 167, 1, 129, 224,
-        6, 9, 16, 72, 1, 188, 96, 3, 0, 144, 66, 1, 188, 96, 3, 0, 17, 45, 3,
-        158, 222, 2, 240, 1, 170, 1, 132, 96, 2, 242, 151, 148, 0, 176, 69,
-        23, 0, 23, 143, 0, 176, 94, 23, 0, 23, 144, 2, 0, 68, 31, 0, 1, 163,
-        1, 133, 96, 2, 9, 16, 72, 1, 129, 96, 7, 0, 16, 71, 1, 240, 222, 15,
-        0, 55, 161, 2, 4, 0, 191, 0, 1, 166, 1, 240, 132, 199, 0, 55, 161, 0,
-        160, 68, 182, 244, 49, 69, 3, 158, 222, 2, 240, 1, 170, 1, 188, 97,
-        55, 18, 176, 128, 3, 191, 222, 2, 240, 0, 2, 0, 160, 68, 180, 42, 49,
-        69, 1, 188, 97, 39, 18, 112, 128, 3, 191, 222, 2, 240, 0, 2, 0, 32,
-        224, 130, 9, 0, 2, 1, 12, 222, 83, 0, 23, 161, 1, 136, 94, 135, 0, 16,
-        71, 1, 188, 96, 3, 0, 80, 66, 1, 8, 65, 31, 0, 23, 161, 1, 140, 222,
-        134, 242, 151, 148, 3, 191, 222, 2, 240, 0, 2, 1, 188, 96, 3, 0, 144,
-        66, 0, 232, 94, 35, 0, 55, 136, 0, 105, 222, 35, 0, 1, 184, 0, 232,
-        0, 39, 0, 55, 136, 1, 134, 96, 2, 9, 16, 72, 1, 134, 96, 6, 245, 183,
-        173, 0, 136, 0, 155, 0, 209, 38, 0, 144, 0, 155, 1, 81, 40, 1, 188,
-        99, 3, 0, 17, 36, 0, 2, 222, 2, 240, 0, 0, 0, 32, 224, 126, 9, 0, 2,
-        0, 2, 94, 2, 240, 17, 5, 2, 131, 194, 31, 0, 0, 2, 2, 2, 128, 243, 0,
-        1, 200, 0, 176, 68, 103, 0, 23, 161, 1, 124, 94, 134, 35, 87, 163, 2,
-        131, 94, 255, 0, 1, 199, 0, 224, 0, 250, 244, 104, 41, 1, 131, 96, 6,
-        247, 247, 191, 0, 107, 222, 141, 5, 33, 204, 2, 6, 208, 3, 0, 1, 208,
-        0, 233, 80, 134, 35, 55, 161, 0, 232, 208, 138, 35, 87, 162, 0, 105,
-        222, 139, 0, 1, 208, 0, 2, 94, 2, 240, 12, 215, 1, 145, 96, 22, 132,
-        244, 39, 0, 224, 32, 167, 0, 136, 41, 3, 191, 222, 2, 240, 3, 111, 2,
-        4, 0, 191, 0, 1, 215, 3, 148, 94, 2, 240, 0, 2, 0, 32, 194, 143, 6,
-        0, 2, 0, 160, 66, 143, 1, 247, 128, 0, 104, 94, 0, 45, 192, 2, 0, 2,
-        94, 2, 240, 12, 215, 3, 191, 222, 2, 240, 0, 16, 2, 1, 194, 143, 0,
-        0, 2, 1, 20, 0, 99, 0, 23, 161, 0, 104, 94, 135, 0, 96, 2, 0, 2, 94,
-        2, 240, 12, 215, 1, 148, 96, 15, 0, 0, 24, 0, 2, 94, 2, 240, 1, 222,
-        3, 191, 222, 2, 240, 0, 16, 1, 20, 0, 99, 0, 23, 161, 0, 176, 94, 135,
-        0, 16, 165, 1, 188, 96, 19, 27, 144, 96, 0, 104, 94, 135, 0, 1, 229,
-        0, 224, 65, 131, 6, 208, 96, 0, 232, 94, 135, 0, 55, 161, 3, 191, 222,
-        2, 240, 1, 225, 2, 128, 80, 195, 0, 1, 243, 1, 135, 96, 4, 3, 16, 160,
-        0, 176, 0, 99, 0, 16, 180, 0, 176, 66, 211, 0, 24, 0, 0, 136, 65, 131,
-        0, 48, 182, 1, 188, 96, 3, 11, 16, 181, 0, 176, 0, 99, 0, 176, 180,
-        3, 23, 222, 2, 240, 1, 236, 3, 151, 222, 2, 240, 1, 237, 1, 128, 96,
-        6, 134, 20, 48, 0, 104, 208, 211, 0, 1, 243, 0, 104, 208, 215, 0, 1,
-        243, 0, 176, 68, 103, 0, 20, 52, 0, 176, 68, 107, 0, 20, 53, 0, 2, 222,
-        2, 240, 0, 0, 0, 32, 224, 18, 128, 66, 13, 1, 135, 96, 4, 3, 16, 160,
-        0, 176, 0, 99, 0, 16, 180, 1, 188, 96, 3, 14, 16, 181, 0, 176, 0, 99,
-        0, 240, 180, 1, 188, 96, 87, 3, 16, 182, 0, 176, 0, 99, 0, 16, 180,
-        1, 188, 96, 3, 2, 208, 181, 2, 7, 80, 11, 0, 2, 10, 1, 188, 96, 3, 3,
-        208, 181, 1, 142, 96, 2, 242, 151, 148, 2, 4, 80, 11, 0, 2, 3, 2, 4,
-        208, 11, 0, 2, 3, 1, 134, 96, 6, 242, 151, 148, 0, 224, 66, 215, 0,
-        208, 181, 0, 160, 80, 11, 17, 23, 161, 0, 104, 222, 135, 17, 2, 9, 1,
-        134, 224, 6, 242, 151, 148, 0, 224, 66, 215, 0, 80, 181, 2, 7, 208,
-        11, 0, 2, 9, 0, 224, 66, 215, 0, 144, 181, 0, 176, 66, 215, 0, 17, 225,
-        0, 176, 0, 99, 0, 176, 180, 3, 23, 222, 2, 240, 2, 11, 3, 151, 222,
-        2, 240, 2, 12, 0, 2, 222, 2, 240, 0, 0, 0, 104, 32, 195, 0, 2, 17, 0,
-        108, 196, 101, 6, 0, 16, 1, 188, 96, 3, 0, 8, 48, 0, 104, 32, 187, 0,
-        2, 20, 0, 108, 196, 101, 5, 224, 16, 1, 188, 96, 3, 0, 8, 46, 0, 32,
-        224, 190, 9, 0, 2, 2, 6, 129, 171, 0, 2, 24, 2, 129, 176, 195, 0, 0,
-        2, 2, 128, 176, 195, 0, 0, 2, 3, 144, 94, 2, 240, 0, 16, 3, 162, 94,
-        2, 240, 2, 42, 0, 2, 94, 2, 240, 16, 102, 2, 2, 0, 191, 0, 2, 41, 2,
-        132, 222, 175, 0, 2, 33, 2, 4, 94, 183, 0, 2, 41, 0, 2, 94, 2, 240,
-        20, 92, 2, 4, 94, 183, 0, 2, 41, 3, 191, 222, 2, 240, 0, 2, 2, 4, 94,
-        183, 0, 2, 36, 2, 4, 128, 199, 0, 2, 41, 2, 128, 94, 255, 0, 2, 41,
-        0, 2, 94, 2, 240, 20, 10, 2, 6, 171, 211, 0, 2, 40, 2, 5, 44, 35, 0,
-        2, 40, 3, 191, 222, 2, 240, 2, 41, 3, 191, 222, 2, 240, 0, 2, 0, 2,
-        94, 2, 240, 17, 5, 2, 0, 66, 31, 0, 2, 65, 0, 104, 66, 243, 0, 2, 45,
-        0, 109, 66, 243, 0, 98, 65, 1, 20, 0, 99, 0, 23, 161, 0, 176, 94, 135,
-        0, 23, 162, 3, 162, 94, 2, 240, 2, 53, 3, 20, 94, 2, 240, 2, 67, 0,
-        110, 196, 86, 128, 98, 67, 2, 129, 69, 35, 0, 2, 67, 0, 110, 94, 135,
-        0, 98, 65, 1, 188, 96, 3, 0, 119, 162, 0, 136, 96, 6, 244, 87, 163,
-        0, 136, 94, 139, 1, 0, 24, 0, 232, 94, 139, 0, 55, 162, 0, 32, 194,
-        142, 244, 98, 59, 0, 106, 222, 134, 244, 66, 53, 3, 191, 222, 2, 240,
-        2, 65, 2, 4, 0, 191, 0, 2, 109, 0, 144, 0, 99, 1, 1, 101, 0, 128, 133,
-        151, 2, 23, 161, 0, 224, 100, 130, 13, 161, 102, 0, 2, 94, 2, 240, 16,
-        226, 3, 191, 222, 2, 240, 2, 109, 1, 130, 96, 2, 9, 16, 72, 3, 191,
-        222, 2, 240, 0, 2, 1, 188, 96, 3, 0, 17, 21, 0, 176, 1, 127, 0, 23,
-        166, 3, 31, 94, 2, 240, 2, 82, 2, 3, 0, 195, 0, 2, 72, 0, 32, 194, 143,
-        2, 2, 76, 3, 37, 94, 2, 240, 2, 82, 0, 32, 194, 143, 2, 2, 76, 0, 104,
-        129, 83, 255, 224, 16, 3, 191, 222, 2, 240, 2, 78, 1, 148, 96, 19, 0,
-        0, 24, 3, 191, 222, 2, 240, 2, 109, 3, 158, 222, 2, 240, 2, 81, 0, 104,
-        222, 152, 11, 194, 81, 2, 1, 65, 31, 0, 14, 79, 1, 133, 96, 2, 9, 16,
-        72, 0, 104, 94, 152, 11, 194, 86, 0, 105, 94, 159, 0, 98, 112, 2, 152,
-        66, 143, 0, 2, 86, 3, 191, 222, 2, 240, 2, 112, 2, 1, 65, 31, 0, 14,
-        79, 2, 4, 0, 191, 0, 2, 93, 2, 24, 66, 143, 0, 14, 79, 0, 2, 94, 2,
-        240, 16, 196, 0, 2, 94, 2, 240, 16, 226, 1, 148, 5, 135, 0, 0, 24, 3,
-        191, 222, 2, 240, 2, 109, 2, 0, 21, 11, 0, 2, 102, 2, 0, 22, 187, 0,
-        2, 105, 0, 176, 20, 151, 0, 23, 161, 0, 104, 222, 132, 178, 34, 102,
-        0, 176, 20, 155, 0, 23, 161, 0, 104, 222, 132, 178, 66, 102, 0, 176,
-        20, 159, 0, 23, 161, 0, 104, 222, 132, 178, 98, 102, 2, 158, 20, 231,
-        0, 2, 105, 2, 1, 194, 143, 0, 2, 107, 1, 148, 96, 15, 0, 0, 24, 3, 191,
-        222, 2, 240, 2, 109, 2, 1, 194, 143, 0, 2, 107, 1, 128, 96, 6, 13, 144,
-        108, 2, 0, 194, 143, 0, 14, 79, 1, 148, 96, 7, 0, 0, 24, 0, 2, 94, 2,
-        240, 1, 222, 2, 4, 0, 191, 0, 2, 159, 3, 191, 222, 2, 240, 2, 159, 1,
-        188, 96, 3, 24, 16, 96, 1, 41, 80, 11, 0, 23, 146, 0, 176, 1, 123, 0,
-        16, 101, 0, 104, 0, 235, 0, 2, 120, 0, 136, 90, 19, 1, 23, 161, 0, 232,
-        68, 102, 244, 55, 161, 0, 110, 222, 132, 7, 66, 120, 3, 191, 222, 2,
-        240, 7, 169, 1, 144, 96, 18, 9, 16, 72, 1, 148, 96, 31, 0, 0, 24, 1,
-        8, 90, 15, 0, 23, 129, 1, 136, 94, 6, 129, 84, 10, 1, 52, 90, 15, 0,
-        23, 128, 0, 2, 94, 2, 240, 1, 61, 0, 176, 1, 123, 0, 16, 101, 0, 176,
-        86, 35, 0, 23, 161, 0, 224, 94, 134, 160, 151, 161, 0, 232, 94, 132,
-        0, 244, 3, 0, 232, 94, 132, 0, 244, 22, 0, 176, 90, 3, 0, 20, 19, 0,
-        176, 90, 7, 0, 20, 20, 0, 176, 90, 11, 0, 20, 21, 0, 104, 222, 7, 0,
-        66, 144, 0, 232, 0, 151, 0, 87, 161, 1, 188, 94, 134, 240, 20, 27, 1,
-        124, 94, 135, 0, 244, 28, 0, 176, 32, 71, 0, 23, 129, 0, 2, 94, 2, 240,
-        15, 135, 0, 176, 1, 123, 0, 16, 101, 1, 8, 90, 15, 0, 23, 129, 0, 176,
-        94, 135, 0, 20, 30, 3, 191, 222, 2, 240, 2, 147, 0, 176, 86, 23, 0,
-        20, 27, 0, 176, 86, 27, 0, 20, 28, 0, 176, 84, 19, 0, 20, 30, 0, 176,
-        80, 19, 0, 16, 134, 0, 109, 0, 167, 0, 130, 153, 1, 144, 1, 99, 0, 16,
-        138, 0, 176, 65, 143, 0, 16, 98, 0, 2, 94, 2, 240, 20, 255, 0, 176,
-        66, 43, 0, 20, 6, 1, 188, 96, 3, 24, 23, 161, 0, 109, 193, 140, 32,
-        2, 156, 1, 188, 96, 3, 2, 151, 161, 0, 224, 94, 132, 3, 119, 161, 0,
-        224, 94, 134, 176, 17, 29, 3, 191, 222, 2, 240, 3, 54, 2, 3, 0, 199,
-        0, 2, 175, 2, 12, 208, 3, 0, 2, 175, 1, 20, 0, 99, 0, 23, 161, 2, 133,
-        0, 99, 0, 2, 175, 0, 128, 222, 135, 1, 247, 162, 1, 188, 96, 27, 24,
-        87, 162, 0, 224, 94, 138, 13, 176, 101, 0, 176, 65, 151, 0, 20, 50,
-        0, 128, 222, 135, 0, 183, 162, 1, 188, 96, 27, 21, 215, 162, 0, 224,
-        94, 138, 13, 176, 100, 0, 176, 65, 147, 0, 20, 51, 0, 104, 216, 19,
-        0, 2, 188, 2, 0, 90, 27, 0, 2, 177, 1, 128, 96, 6, 132, 244, 39, 3,
-        191, 222, 2, 240, 6, 185, 2, 1, 208, 3, 0, 2, 177, 0, 176, 80, 155,
-        0, 20, 47, 2, 129, 208, 199, 0, 3, 108, 1, 11, 208, 3, 0, 23, 161, 1,
-        60, 80, 43, 0, 23, 162, 1, 140, 94, 134, 244, 87, 161, 1, 72, 1, 67,
-        0, 23, 162, 1, 12, 129, 67, 0, 23, 163, 0, 104, 94, 143, 0, 34, 185,
-        1, 140, 224, 0, 10, 23, 162, 0, 104, 94, 134, 244, 66, 188, 1, 145,
-        96, 18, 132, 244, 39, 3, 191, 222, 2, 240, 3, 111, 0, 2, 94, 2, 240,
-        1, 244, 0, 176, 80, 19, 0, 16, 134, 0, 176, 80, 23, 0, 16, 138, 3, 162,
-        94, 2, 240, 3, 10, 2, 12, 208, 3, 0, 2, 219, 2, 3, 0, 199, 0, 2, 218,
-        0, 176, 80, 203, 0, 16, 101, 0, 2, 94, 2, 240, 21, 149, 2, 3, 80, 199,
-        0, 2, 200, 1, 188, 96, 35, 0, 151, 161, 0, 168, 80, 2, 244, 52, 0, 3,
-        191, 222, 2, 240, 2, 223, 2, 4, 129, 171, 0, 2, 202, 0, 109, 66, 70,
-        192, 128, 16, 0, 176, 90, 19, 0, 23, 128, 0, 2, 94, 2, 240, 1, 71, 0,
-        176, 84, 15, 0, 20, 30, 0, 176, 90, 7, 0, 23, 161, 0, 176, 90, 19, 0,
-        23, 128, 1, 135, 90, 22, 240, 23, 128, 0, 176, 65, 143, 0, 16, 101,
-        0, 2, 94, 2, 240, 21, 8, 0, 224, 94, 134, 160, 116, 3, 2, 135, 94, 3,
-        0, 2, 217, 1, 9, 222, 3, 0, 23, 163, 0, 224, 94, 139, 0, 119, 162, 0,
-        224, 94, 138, 244, 119, 162, 0, 136, 94, 139, 0, 55, 161, 0, 224, 94,
-        134, 244, 80, 137, 3, 191, 222, 2, 240, 2, 223, 0, 109, 66, 74, 132,
-        128, 16, 1, 6, 80, 7, 0, 23, 161, 2, 140, 208, 3, 0, 2, 222, 0, 104,
-        94, 135, 0, 2, 223, 1, 130, 222, 134, 134, 52, 49, 1, 130, 96, 2, 134,
-        52, 49, 0, 32, 208, 3, 4, 2, 229, 0, 176, 80, 79, 0, 17, 242, 0, 176,
-        80, 83, 0, 17, 243, 0, 176, 80, 87, 0, 17, 244, 1, 188, 96, 3, 0, 145,
-        240, 2, 6, 1, 171, 0, 3, 1, 2, 1, 80, 3, 0, 3, 1, 2, 6, 1, 171, 0, 3,
-        1, 3, 162, 94, 2, 240, 3, 1, 2, 128, 48, 195, 0, 3, 1, 1, 128, 96, 5,
-        134, 12, 48, 0, 224, 1, 231, 0, 32, 121, 1, 188, 96, 67, 8, 144, 230,
-        0, 2, 94, 2, 240, 1, 100, 1, 188, 96, 3, 25, 16, 228, 1, 188, 96, 3,
-        0, 0, 6, 1, 188, 96, 3, 1, 215, 130, 1, 210, 222, 8, 119, 240, 224,
-        0, 176, 15, 3, 0, 16, 225, 0, 176, 0, 71, 0, 16, 134, 0, 176, 15, 31,
-        0, 16, 138, 1, 188, 96, 3, 0, 55, 129, 0, 2, 94, 2, 240, 15, 115, 0,
-        176, 5, 155, 0, 16, 100, 0, 232, 88, 26, 40, 241, 69, 0, 176, 5, 139,
-        0, 16, 100, 0, 106, 69, 22, 192, 130, 252, 0, 2, 94, 2, 240, 15, 152,
-        0, 110, 69, 23, 0, 66, 254, 1, 188, 96, 3, 0, 81, 69, 1, 188, 96, 3,
-        0, 16, 187, 1, 188, 97, 3, 3, 176, 128, 3, 191, 222, 2, 240, 0, 16,
-        2, 1, 1, 179, 0, 3, 3, 1, 135, 224, 6, 245, 119, 171, 3, 148, 94, 2,
-        240, 3, 10, 2, 6, 80, 3, 0, 3, 6, 2, 135, 222, 175, 0, 3, 10, 2, 129,
-        80, 3, 0, 5, 201, 2, 2, 208, 199, 0, 3, 9, 2, 8, 80, 43, 0, 3, 10, 2,
-        133, 208, 3, 0, 5, 224, 1, 144, 96, 18, 134, 52, 49, 1, 16, 80, 7, 0,
-        23, 166, 0, 104, 222, 155, 0, 67, 22, 1, 58, 80, 7, 0, 23, 128, 0, 136,
-        94, 3, 0, 119, 128, 0, 224, 0, 174, 240, 16, 100, 0, 176, 94, 7, 0,
-        8, 19, 1, 188, 96, 35, 6, 215, 129, 0, 224, 65, 131, 1, 112, 99, 0,
-        224, 65, 143, 0, 176, 101, 0, 2, 94, 2, 240, 15, 174, 0, 176, 32, 79,
-        0, 23, 129, 3, 162, 94, 2, 240, 3, 34, 0, 176, 80, 15, 0, 17, 22, 2,
-        2, 208, 199, 0, 3, 26, 0, 176, 80, 91, 0, 17, 22, 2, 130, 208, 3, 0,
-        3, 34, 2, 129, 71, 195, 0, 3, 27, 2, 128, 80, 79, 0, 3, 32, 0, 32, 71,
-        199, 63, 131, 34, 0, 32, 199, 219, 0, 195, 110, 3, 191, 222, 2, 240,
-        3, 34, 3, 165, 94, 2, 240, 3, 34, 2, 128, 199, 223, 0, 3, 110, 2, 136,
-        80, 199, 0, 3, 62, 1, 41, 80, 11, 0, 23, 146, 2, 3, 0, 199, 0, 3, 47,
-        2, 12, 208, 3, 0, 3, 47, 2, 131, 80, 199, 0, 3, 47, 0, 176, 80, 203,
-        0, 16, 101, 1, 56, 90, 19, 0, 23, 128, 1, 130, 90, 23, 0, 87, 129, 1,
-        14, 90, 19, 0, 23, 161, 1, 142, 94, 134, 240, 55, 129, 2, 2, 208, 199,
-        0, 3, 62, 0, 176, 80, 27, 0, 16, 138, 3, 191, 222, 2, 240, 3, 62, 2,
-        130, 208, 199, 0, 3, 54, 1, 56, 80, 39, 0, 23, 128, 1, 8, 80, 19, 0,
-        23, 129, 1, 2, 80, 19, 0, 23, 161, 1, 130, 94, 134, 240, 55, 129, 0,
-        176, 80, 127, 0, 16, 137, 3, 191, 222, 2, 240, 3, 62, 1, 56, 80, 111,
-        0, 23, 128, 1, 8, 80, 43, 0, 23, 129, 1, 6, 208, 7, 0, 23, 161, 1, 130,
-        94, 134, 240, 55, 129, 0, 176, 80, 27, 0, 16, 138, 0, 176, 80, 131,
-        0, 16, 137, 1, 14, 80, 115, 0, 23, 161, 1, 142, 94, 134, 240, 55, 129,
-        0, 2, 94, 2, 240, 1, 61, 0, 2, 94, 2, 240, 15, 115, 1, 2, 66, 27, 0,
-        23, 129, 1, 130, 94, 5, 2, 55, 129, 0, 2, 94, 2, 240, 15, 135, 2, 6,
-        128, 199, 0, 3, 74, 1, 12, 129, 67, 0, 23, 166, 0, 104, 222, 155, 0,
-        99, 72, 0, 136, 94, 135, 0, 87, 161, 3, 191, 222, 2, 240, 3, 74, 0,
-        104, 222, 155, 0, 67, 74, 0, 136, 94, 135, 0, 55, 161, 0, 224, 94, 132,
-        1, 23, 161, 1, 217, 222, 135, 0, 16, 131, 2, 0, 1, 179, 0, 3, 78, 1,
-        224, 1, 183, 0, 16, 131, 1, 188, 97, 55, 3, 183, 145, 0, 104, 94, 75,
-        2, 131, 114, 2, 4, 0, 191, 0, 3, 83, 2, 135, 80, 3, 0, 3, 83, 3, 148,
-        94, 2, 240, 3, 84, 3, 34, 94, 2, 240, 3, 97, 2, 6, 129, 171, 0, 3, 95,
-        0, 104, 94, 75, 4, 67, 88, 0, 104, 94, 75, 0, 67, 88, 3, 191, 222, 2,
-        240, 3, 95, 0, 224, 1, 239, 0, 32, 123, 1, 188, 96, 3, 2, 145, 69, 1,
-        131, 96, 5, 134, 12, 48, 0, 224, 68, 103, 10, 12, 52, 1, 140, 96, 14,
-        23, 112, 187, 1, 188, 97, 3, 2, 48, 128, 3, 191, 222, 2, 240, 0, 2,
-        1, 188, 97, 3, 0, 48, 128, 3, 191, 222, 2, 240, 0, 2, 1, 188, 97, 51,
-        3, 183, 145, 2, 133, 0, 99, 0, 3, 103, 0, 144, 0, 99, 0, 151, 161, 0,
-        224, 100, 130, 244, 48, 101, 0, 110, 90, 19, 0, 35, 103, 1, 136, 224,
-        6, 242, 55, 145, 2, 6, 1, 171, 0, 3, 107, 0, 104, 222, 75, 5, 163, 107,
-        1, 188, 97, 3, 0, 48, 128, 3, 191, 222, 2, 240, 0, 2, 3, 191, 222, 2,
-        240, 3, 114, 1, 145, 96, 14, 132, 244, 39, 3, 191, 222, 2, 240, 3, 111,
-        1, 145, 96, 6, 132, 244, 39, 1, 188, 96, 3, 0, 16, 180, 1, 129, 224,
-        6, 134, 52, 49, 3, 191, 222, 2, 240, 6, 185, 3, 196, 222, 2, 240, 13,
-        34, 2, 6, 80, 3, 0, 3, 122, 2, 7, 222, 175, 0, 3, 122, 1, 188, 97, 3,
-        0, 55, 145, 2, 7, 80, 3, 0, 3, 120, 1, 188, 98, 3, 0, 247, 145, 0, 224,
-        1, 11, 0, 32, 66, 3, 191, 222, 2, 240, 3, 123, 1, 188, 96, 3, 0, 32,
-        66, 0, 176, 94, 71, 0, 16, 128, 2, 0, 1, 179, 0, 3, 126, 1, 130, 96,
-        6, 16, 48, 129, 2, 4, 0, 191, 0, 3, 133, 0, 176, 5, 139, 0, 16, 100,
-        0, 110, 69, 23, 0, 0, 2, 0, 104, 222, 75, 2, 131, 132, 0, 160, 68, 180,
-        42, 49, 69, 3, 191, 222, 2, 240, 0, 2, 0, 2, 94, 2, 240, 15, 152, 0,
-        104, 197, 23, 0, 0, 2, 3, 208, 94, 2, 240, 3, 137, 0, 2, 94, 2, 240,
-        15, 152, 3, 191, 222, 2, 240, 0, 2, 2, 6, 1, 171, 0, 3, 140, 0, 104,
-        222, 75, 5, 163, 140, 1, 128, 96, 1, 134, 12, 48, 2, 14, 1, 171, 0,
-        3, 143, 2, 0, 176, 195, 0, 3, 143, 1, 129, 96, 5, 134, 12, 48, 0, 225,
-        13, 178, 40, 227, 108, 0, 224, 141, 183, 0, 3, 109, 1, 131, 96, 2, 247,
-        247, 191, 1, 188, 96, 3, 0, 144, 4, 0, 168, 65, 35, 48, 16, 72, 1, 188,
-        98, 15, 0, 17, 224, 1, 129, 96, 2, 245, 215, 174, 2, 2, 0, 191, 0, 3,
-        180, 0, 104, 222, 75, 2, 3, 153, 0, 2, 94, 2, 240, 22, 209, 0, 104,
-        222, 75, 6, 35, 180, 2, 4, 94, 179, 0, 3, 180, 2, 6, 171, 211, 0, 3,
-        158, 2, 4, 197, 175, 0, 3, 180, 3, 191, 222, 2, 240, 3, 159, 2, 0, 69,
-        111, 0, 3, 180, 0, 232, 68, 101, 86, 55, 161, 0, 232, 42, 150, 244,
-        55, 161, 0, 105, 94, 135, 8, 35, 180, 2, 6, 171, 211, 0, 3, 167, 0,
-        107, 172, 66, 35, 35, 166, 0, 224, 68, 103, 1, 75, 16, 1, 131, 224,
-        2, 43, 145, 92, 3, 191, 222, 2, 240, 3, 180, 1, 131, 224, 2, 43, 145,
-        92, 2, 7, 1, 171, 0, 3, 170, 1, 128, 224, 2, 9, 208, 78, 1, 188, 96,
-        3, 24, 81, 120, 0, 176, 69, 227, 0, 24, 0, 1, 131, 96, 2, 47, 49, 121,
-        2, 7, 222, 179, 0, 3, 177, 1, 135, 224, 2, 245, 151, 172, 0, 225, 14,
-        219, 0, 35, 182, 0, 224, 142, 223, 0, 3, 183, 0, 104, 176, 55, 0, 3,
-        180, 0, 176, 68, 103, 0, 12, 13, 0, 176, 68, 107, 0, 12, 14, 1, 135,
-        224, 2, 245, 119, 171, 0, 104, 129, 11, 0, 35, 183, 0, 176, 68, 103,
-        0, 0, 67, 1, 130, 224, 6, 9, 16, 72, 0, 168, 65, 179, 16, 144, 108,
-        1, 130, 96, 6, 40, 145, 68, 1, 136, 224, 2, 11, 144, 92, 0, 2, 94, 2,
-        240, 17, 57, 1, 133, 224, 2, 247, 247, 191, 2, 136, 66, 27, 0, 3, 191,
-        1, 133, 224, 6, 247, 247, 191, 3, 91, 94, 2, 240, 3, 193, 1, 188, 96,
-        19, 0, 16, 67, 1, 188, 96, 3, 0, 16, 133, 1, 188, 96, 3, 0, 16, 184,
-        0, 136, 80, 119, 0, 144, 185, 2, 8, 80, 43, 0, 3, 200, 1, 56, 80, 115,
-        0, 23, 161, 1, 124, 80, 110, 244, 55, 161, 0, 136, 94, 135, 0, 144,
-        185, 2, 0, 71, 163, 0, 3, 204, 1, 188, 96, 3, 0, 17, 234, 0, 144, 66,
-        231, 0, 145, 235, 0, 176, 71, 163, 0, 209, 232, 2, 0, 71, 179, 0, 3,
-        206, 1, 176, 224, 142, 61, 145, 236, 1, 210, 224, 2, 16, 144, 132, 3,
-        169, 94, 2, 240, 4, 239, 1, 188, 96, 3, 0, 16, 132, 0, 224, 1, 195,
-        0, 32, 112, 0, 176, 68, 103, 0, 12, 4, 0, 176, 68, 107, 0, 12, 5, 3,
-        32, 222, 2, 240, 4, 68, 0, 104, 94, 75, 24, 163, 223, 0, 104, 222, 75,
-        7, 131, 232, 1, 188, 99, 255, 31, 112, 132, 1, 188, 96, 3, 0, 240, 133,
-        1, 56, 19, 99, 0, 16, 181, 0, 224, 66, 215, 0, 208, 181, 1, 188, 96,
-        3, 0, 16, 166, 1, 188, 96, 35, 20, 208, 180, 0, 224, 19, 87, 0, 36,
-        213, 3, 191, 222, 2, 240, 4, 140, 1, 132, 224, 6, 245, 151, 172, 1,
-        188, 96, 255, 31, 240, 132, 0, 2, 94, 2, 240, 4, 33, 1, 188, 96, 3,
-        0, 16, 180, 1, 188, 96, 3, 0, 16, 166, 1, 188, 96, 3, 2, 208, 181, 1,
-        188, 96, 35, 4, 208, 180, 0, 224, 19, 91, 0, 36, 214, 3, 191, 222, 2,
-        240, 4, 140, 1, 129, 96, 6, 245, 183, 173, 0, 104, 222, 75, 4, 163,
-        251, 2, 3, 222, 187, 0, 3, 237, 0, 224, 45, 231, 0, 16, 101, 3, 191,
-        222, 2, 240, 3, 238, 1, 188, 96, 35, 1, 16, 101, 0, 160, 94, 127, 254,
-        16, 236, 0, 176, 90, 3, 0, 16, 237, 0, 176, 90, 7, 0, 16, 238, 0, 176,
-        90, 11, 0, 16, 239, 0, 176, 90, 15, 0, 16, 240, 1, 188, 99, 255, 30,
-        240, 132, 1, 188, 96, 3, 0, 48, 133, 1, 188, 96, 3, 0, 16, 180, 1, 188,
-        96, 3, 1, 208, 166, 1, 188, 96, 3, 4, 80, 181, 1, 188, 96, 35, 4, 208,
-        180, 0, 224, 2, 175, 0, 32, 171, 3, 191, 222, 2, 240, 4, 140, 1, 188,
-        97, 255, 31, 240, 132, 1, 188, 96, 3, 0, 16, 133, 0, 104, 222, 75, 5,
-        36, 3, 1, 188, 96, 3, 0, 16, 180, 1, 188, 96, 7, 19, 80, 166, 1, 188,
-        96, 3, 2, 208, 181, 1, 188, 96, 35, 4, 208, 180, 3, 191, 222, 2, 240,
-        4, 15, 0, 104, 222, 75, 2, 68, 26, 0, 176, 48, 67, 0, 16, 132, 2, 133,
-        195, 143, 0, 4, 7, 0, 224, 94, 39, 0, 55, 137, 1, 218, 94, 39, 0, 16,
-        238, 1, 188, 99, 255, 31, 240, 206, 1, 188, 96, 3, 0, 16, 180, 0, 128,
-        224, 33, 129, 248, 0, 0, 224, 102, 130, 13, 176, 166, 1, 188, 96, 3,
-        3, 208, 181, 1, 188, 96, 35, 4, 208, 180, 0, 224, 1, 211, 0, 32, 116,
-        1, 132, 96, 7, 0, 17, 224, 2, 130, 222, 179, 0, 5, 169, 2, 4, 94, 179,
-        0, 5, 169, 1, 129, 224, 6, 245, 215, 174, 1, 131, 224, 6, 9, 16, 72,
-        0, 176, 65, 35, 0, 24, 0, 1, 188, 96, 3, 6, 183, 142, 1, 136, 32, 70,
-        16, 215, 129, 0, 2, 94, 2, 240, 15, 135, 0, 136, 94, 135, 0, 112, 131,
-        3, 191, 222, 2, 240, 5, 169, 1, 188, 96, 3, 31, 240, 132, 1, 3, 222,
-        83, 0, 23, 162, 2, 0, 94, 255, 0, 4, 30, 1, 188, 96, 3, 0, 55, 162,
-        0, 104, 43, 79, 0, 4, 32, 1, 188, 96, 3, 0, 55, 162, 1, 134, 94, 138,
-        28, 112, 227, 0, 106, 195, 147, 0, 4, 42, 0, 232, 67, 144, 0, 208, 228,
-        2, 2, 66, 27, 0, 4, 40, 0, 144, 0, 27, 0, 55, 161, 0, 32, 66, 27, 0,
-        68, 39, 0, 176, 32, 151, 0, 23, 161, 0, 224, 67, 146, 244, 48, 228,
-        0, 105, 195, 147, 0, 4, 42, 1, 188, 96, 3, 0, 16, 228, 0, 104, 43, 79,
-        0, 4, 44, 0, 224, 67, 145, 91, 48, 228, 1, 188, 96, 3, 0, 16, 180, 1,
-        188, 96, 3, 0, 16, 166, 1, 188, 96, 3, 2, 16, 181, 1, 188, 96, 35, 4,
-        208, 180, 0, 104, 94, 75, 6, 164, 66, 0, 224, 1, 203, 0, 32, 114, 2,
-        6, 129, 171, 0, 4, 140, 2, 128, 176, 195, 0, 4, 140, 2, 3, 176, 195,
-        0, 4, 140, 1, 188, 96, 7, 4, 247, 166, 2, 136, 66, 27, 0, 4, 58, 1,
-        188, 96, 15, 0, 23, 166, 2, 130, 66, 27, 0, 4, 58, 1, 188, 96, 23, 0,
-        23, 166, 1, 12, 129, 67, 0, 23, 165, 0, 104, 222, 151, 0, 100, 61, 0,
-        136, 94, 155, 0, 55, 166, 0, 224, 68, 102, 244, 204, 51, 1, 129, 224,
-        5, 134, 12, 48, 1, 130, 96, 5, 134, 12, 48, 1, 131, 224, 1, 134, 12,
-        48, 3, 191, 222, 2, 240, 4, 140, 0, 224, 1, 207, 0, 32, 115, 3, 191,
-        222, 2, 240, 4, 140, 3, 32, 94, 2, 240, 4, 147, 1, 129, 224, 2, 9, 16,
-        72, 0, 224, 1, 215, 0, 32, 117, 3, 30, 222, 2, 240, 4, 115, 1, 188,
-        96, 3, 0, 23, 162, 0, 106, 94, 35, 0, 4, 76, 1, 2, 66, 143, 0, 23, 162,
-        1, 133, 94, 138, 9, 16, 72, 1, 128, 224, 6, 16, 48, 129, 2, 132, 222,
-        83, 0, 4, 83, 0, 176, 0, 119, 0, 23, 161, 0, 224, 94, 132, 4, 55, 161,
-        0, 136, 94, 135, 0, 87, 161, 0, 224, 94, 135, 13, 87, 161, 3, 191, 222,
-        2, 240, 4, 84, 1, 188, 96, 3, 13, 87, 161, 0, 104, 0, 39, 0, 4, 115,
-        0, 224, 94, 132, 1, 247, 161, 1, 188, 96, 35, 0, 144, 101, 0, 136, 65,
-        151, 0, 48, 182, 1, 188, 96, 3, 0, 16, 180, 0, 144, 94, 135, 0, 80,
-        166, 1, 188, 96, 3, 1, 16, 181, 1, 188, 96, 35, 0, 176, 180, 3, 23,
-        222, 2, 240, 4, 92, 3, 151, 222, 2, 240, 4, 93, 0, 32, 222, 135, 0,
-        68, 102, 0, 32, 222, 135, 0, 36, 99, 1, 184, 94, 34, 208, 22, 128, 1,
-        128, 94, 138, 208, 54, 129, 3, 191, 222, 2, 240, 4, 108, 1, 188, 94,
-        34, 208, 22, 128, 1, 132, 94, 138, 208, 54, 129, 3, 191, 222, 2, 240,
-        4, 108, 0, 32, 222, 135, 0, 36, 106, 1, 184, 94, 34, 208, 54, 129, 1,
-        128, 94, 138, 208, 86, 130, 3, 191, 222, 2, 240, 4, 108, 1, 188, 94,
-        34, 208, 54, 129, 1, 132, 94, 138, 208, 86, 130, 1, 136, 96, 2, 244,
-        48, 168, 0, 176, 90, 3, 0, 16, 176, 0, 176, 90, 7, 0, 16, 177, 2, 128,
-        66, 163, 0, 4, 111, 0, 224, 66, 163, 0, 144, 168, 0, 176, 90, 11, 0,
-        16, 176, 0, 176, 90, 15, 0, 16, 177, 1, 135, 96, 6, 16, 144, 132, 0,
-        224, 94, 39, 0, 55, 137, 1, 218, 94, 39, 0, 16, 238, 1, 188, 96, 3,
-        0, 16, 180, 1, 188, 96, 3, 3, 80, 166, 0, 176, 0, 51, 0, 16, 181, 2,
-        132, 222, 83, 0, 4, 125, 0, 224, 96, 104, 3, 176, 166, 0, 224, 66, 152,
-        4, 48, 166, 0, 176, 0, 55, 0, 16, 181, 1, 188, 96, 35, 4, 208, 180,
-        1, 132, 96, 6, 242, 151, 148, 1, 134, 96, 2, 9, 16, 72, 3, 158, 222,
-        2, 240, 4, 135, 2, 128, 68, 31, 0, 4, 138, 0, 176, 94, 63, 0, 17, 69,
-        1, 188, 96, 3, 0, 23, 143, 0, 176, 94, 67, 0, 23, 133, 0, 176, 94, 15,
-        0, 23, 144, 3, 191, 222, 2, 240, 4, 138, 0, 176, 94, 15, 0, 23, 133,
-        2, 128, 68, 31, 0, 4, 138, 0, 160, 68, 182, 240, 177, 69, 1, 188, 96,
-        3, 1, 16, 66, 1, 131, 96, 6, 242, 151, 148, 1, 132, 96, 7, 0, 17, 224,
-        3, 160, 94, 2, 240, 5, 167, 2, 6, 94, 175, 0, 5, 169, 1, 134, 224, 6,
-        245, 119, 171, 1, 188, 96, 3, 0, 16, 128, 0, 2, 94, 2, 240, 12, 223,
-        3, 191, 222, 2, 240, 7, 22, 3, 161, 94, 2, 240, 5, 25, 1, 20, 0, 99,
-        0, 23, 161, 0, 104, 222, 135, 0, 228, 152, 1, 129, 96, 6, 9, 16, 72,
-        3, 191, 222, 2, 240, 5, 25, 2, 133, 0, 99, 0, 4, 154, 1, 131, 224, 6,
-        13, 144, 108, 1, 129, 96, 6, 245, 215, 174, 0, 32, 96, 14, 134, 36,
-        194, 1, 135, 96, 4, 3, 16, 160, 0, 176, 0, 99, 0, 16, 180, 1, 188, 96,
-        3, 11, 16, 181, 0, 176, 0, 99, 0, 240, 180, 2, 3, 0, 199, 0, 4, 173,
-        2, 12, 208, 3, 0, 4, 173, 2, 128, 80, 199, 0, 4, 165, 0, 176, 84, 19,
-        0, 23, 161, 0, 224, 94, 134, 128, 116, 26, 0, 176, 80, 107, 0, 16, 228,
-        0, 176, 66, 19, 2, 16, 132, 2, 9, 80, 43, 0, 4, 173, 0, 176, 66, 19,
-        0, 48, 132, 1, 210, 224, 58, 160, 48, 224, 2, 128, 80, 199, 0, 4, 179,
-        1, 210, 224, 82, 160, 48, 224, 3, 191, 222, 2, 240, 4, 179, 2, 2, 208,
-        199, 0, 4, 179, 0, 176, 80, 95, 0, 16, 224, 0, 176, 80, 99, 0, 16, 225,
-        0, 176, 80, 103, 0, 16, 226, 0, 176, 80, 107, 0, 16, 228, 0, 176, 66,
-        19, 2, 240, 132, 2, 0, 80, 199, 0, 4, 189, 1, 138, 224, 14, 16, 144,
-        132, 1, 188, 96, 251, 28, 16, 229, 1, 188, 96, 3, 8, 144, 230, 0, 176,
-        0, 99, 0, 16, 180, 1, 188, 96, 3, 2, 16, 181, 0, 176, 0, 99, 4, 208,
-        180, 1, 132, 96, 7, 0, 17, 224, 1, 188, 96, 3, 0, 23, 142, 3, 191, 222,
-        2, 240, 5, 180, 0, 224, 1, 199, 0, 32, 113, 0, 176, 0, 99, 0, 16, 180,
-        1, 188, 96, 3, 2, 208, 181, 0, 176, 0, 99, 4, 208, 180, 3, 191, 222,
-        2, 240, 5, 70, 3, 34, 94, 2, 240, 4, 196, 0, 224, 2, 167, 0, 32, 169,
-        1, 3, 80, 3, 0, 23, 161, 0, 184, 94, 135, 0, 55, 161, 1, 135, 94, 134,
-        16, 16, 128, 2, 4, 0, 191, 0, 4, 210, 3, 43, 222, 2, 240, 4, 210, 2,
-        0, 0, 243, 0, 4, 204, 0, 232, 0, 35, 0, 81, 66, 1, 188, 96, 10, 40,
-        81, 66, 3, 148, 94, 2, 240, 4, 210, 0, 176, 5, 139, 0, 16, 100, 0, 224,
-        88, 35, 0, 54, 8, 0, 104, 88, 3, 0, 4, 210, 0, 176, 68, 103, 0, 17,
-        18, 0, 176, 88, 3, 0, 17, 21, 2, 12, 208, 3, 0, 5, 24, 2, 3, 0, 199,
-        0, 4, 229, 0, 176, 80, 203, 0, 16, 101, 1, 188, 96, 3, 0, 22, 133, 0,
-        224, 90, 51, 0, 54, 140, 2, 3, 80, 199, 0, 4, 218, 0, 224, 90, 39, 0,
-        54, 137, 3, 191, 222, 2, 240, 5, 25, 1, 188, 96, 3, 0, 23, 178, 0, 176,
-        90, 11, 0, 11, 122, 1, 56, 90, 19, 0, 23, 161, 1, 188, 90, 6, 244, 48,
-        224, 1, 60, 90, 19, 0, 23, 161, 1, 124, 90, 6, 244, 48, 225, 1, 129,
-        224, 6, 16, 144, 132, 1, 133, 224, 7, 0, 16, 227, 1, 133, 224, 7, 0,
-        16, 195, 2, 130, 208, 199, 0, 4, 234, 3, 191, 222, 2, 240, 4, 237, 2,
-        2, 208, 199, 0, 4, 239, 0, 176, 42, 51, 0, 23, 161, 1, 184, 80, 110,
-        244, 48, 224, 0, 176, 80, 115, 0, 23, 161, 1, 184, 42, 54, 244, 48,
-        225, 2, 130, 66, 19, 0, 4, 237, 0, 176, 80, 123, 0, 16, 228, 0, 176,
-        66, 19, 2, 16, 132, 1, 133, 224, 6, 28, 48, 225, 0, 176, 66, 19, 0,
-        112, 132, 1, 135, 96, 4, 3, 16, 160, 2, 3, 0, 199, 0, 5, 5, 0, 176,
-        80, 203, 0, 16, 101, 0, 109, 94, 202, 209, 196, 245, 1, 133, 224, 2,
-        24, 112, 195, 0, 224, 94, 203, 0, 54, 142, 1, 188, 96, 27, 31, 208,
-        101, 0, 224, 65, 150, 246, 80, 101, 0, 176, 80, 151, 0, 22, 128, 0,
-        104, 222, 203, 0, 4, 253, 1, 188, 96, 35, 1, 80, 184, 0, 224, 1, 243,
-        0, 32, 124, 0, 104, 45, 235, 0, 37, 3, 3, 191, 222, 2, 240, 5, 16, 0,
-        176, 94, 203, 0, 16, 181, 0, 176, 0, 99, 8, 112, 180, 2, 131, 66, 211,
-        0, 4, 255, 1, 188, 96, 3, 1, 112, 184, 0, 104, 173, 235, 0, 37, 16,
-        1, 188, 96, 3, 1, 112, 184, 2, 188, 80, 103, 0, 5, 15, 3, 191, 222,
-        2, 240, 5, 14, 1, 12, 208, 3, 0, 23, 161, 3, 169, 94, 2, 240, 5, 11,
-        1, 188, 96, 35, 1, 80, 184, 0, 224, 1, 243, 0, 32, 124, 0, 104, 94,
-        135, 0, 101, 14, 3, 191, 222, 2, 240, 5, 16, 1, 188, 96, 3, 1, 112,
-        184, 0, 104, 94, 135, 0, 69, 16, 1, 188, 96, 3, 1, 112, 184, 1, 129,
-        224, 2, 23, 16, 184, 1, 188, 96, 3, 0, 240, 165, 1, 188, 96, 3, 14,
-        16, 181, 0, 224, 1, 247, 0, 32, 125, 0, 176, 0, 99, 0, 16, 180, 0, 176,
-        0, 99, 0, 240, 180, 0, 176, 66, 211, 0, 24, 0, 1, 136, 96, 8, 3, 16,
-        180, 1, 129, 96, 6, 13, 144, 108, 3, 191, 222, 2, 240, 5, 70, 2, 2,
-        208, 199, 0, 5, 31, 0, 176, 80, 111, 0, 16, 224, 0, 176, 80, 115, 0,
-        16, 225, 0, 176, 80, 119, 0, 16, 226, 2, 130, 66, 19, 0, 5, 30, 0, 176,
-        80, 123, 0, 16, 228, 0, 176, 66, 19, 2, 240, 132, 0, 224, 94, 159, 0,
-        55, 167, 3, 161, 94, 2, 240, 5, 40, 1, 188, 96, 3, 0, 23, 167, 1, 135,
-        96, 4, 3, 16, 160, 0, 176, 0, 99, 0, 16, 180, 1, 188, 96, 3, 14, 16,
-        181, 0, 176, 0, 99, 0, 240, 180, 1, 136, 96, 8, 3, 16, 180, 3, 191,
-        222, 2, 240, 5, 59, 0, 176, 1, 123, 0, 16, 101, 0, 176, 90, 3, 0, 16,
-        229, 0, 176, 90, 7, 0, 16, 230, 0, 176, 90, 11, 0, 16, 231, 0, 104,
-        160, 75, 0, 5, 46, 0, 224, 94, 39, 0, 55, 137, 0, 104, 32, 75, 0, 5,
-        50, 1, 133, 224, 7, 0, 16, 227, 1, 133, 224, 7, 0, 16, 195, 0, 176,
-        66, 19, 1, 16, 132, 1, 218, 94, 39, 0, 16, 238, 1, 135, 96, 6, 16, 144,
-        132, 0, 176, 66, 19, 28, 16, 132, 1, 188, 96, 3, 0, 16, 180, 0, 224,
-        96, 104, 3, 176, 166, 0, 176, 0, 151, 0, 16, 181, 1, 188, 96, 35, 4,
-        208, 180, 1, 132, 96, 7, 0, 17, 224, 3, 191, 222, 2, 240, 5, 150, 1,
-        8, 94, 75, 0, 23, 161, 0, 104, 94, 135, 0, 37, 70, 2, 2, 80, 3, 0, 5,
-        69, 2, 158, 80, 159, 0, 5, 66, 2, 1, 208, 3, 0, 5, 66, 0, 224, 94, 39,
-        0, 55, 137, 1, 88, 94, 39, 0, 20, 45, 1, 218, 80, 183, 0, 16, 238, 1,
-        135, 96, 6, 16, 144, 132, 3, 191, 222, 2, 240, 5, 70, 1, 188, 96, 3,
-        0, 20, 45, 1, 4, 193, 7, 0, 23, 161, 3, 34, 94, 2, 240, 5, 73, 1, 3,
-        222, 83, 0, 23, 161, 0, 176, 94, 135, 0, 23, 162, 2, 0, 94, 255, 0,
-        5, 76, 1, 188, 96, 3, 0, 55, 162, 0, 104, 43, 79, 0, 5, 78, 1, 188,
-        96, 3, 0, 55, 162, 2, 136, 94, 75, 0, 5, 81, 0, 104, 94, 75, 6, 133,
-        81, 1, 188, 96, 3, 0, 23, 162, 1, 131, 222, 134, 242, 151, 148, 1, 131,
-        222, 134, 132, 244, 39, 2, 129, 194, 19, 0, 5, 88, 1, 134, 94, 139,
-        0, 16, 227, 1, 134, 96, 7, 0, 16, 195, 1, 129, 224, 6, 16, 144, 132,
-        3, 191, 222, 2, 240, 5, 90, 1, 134, 94, 138, 28, 112, 227, 1, 134, 96,
-        6, 24, 112, 195, 2, 184, 71, 167, 0, 5, 146, 2, 160, 71, 183, 0, 5,
-        148, 3, 169, 94, 2, 240, 5, 98, 1, 8, 94, 75, 0, 23, 161, 0, 104, 94,
-        135, 0, 37, 147, 2, 30, 80, 159, 0, 5, 98, 1, 133, 224, 6, 28, 112,
-        227, 1, 133, 224, 6, 24, 112, 195, 1, 20, 0, 99, 0, 23, 161, 0, 104,
-        222, 135, 0, 133, 107, 0, 176, 1, 83, 0, 23, 162, 0, 104, 222, 139,
-        255, 229, 103, 0, 104, 66, 71, 0, 37, 104, 0, 104, 222, 138, 132, 197,
-        107, 1, 133, 96, 2, 9, 16, 72, 1, 134, 224, 2, 28, 112, 227, 1, 134,
-        224, 6, 24, 112, 195, 1, 16, 80, 7, 0, 23, 166, 0, 104, 94, 155, 0,
-        5, 147, 1, 188, 96, 3, 0, 17, 228, 1, 58, 80, 7, 0, 23, 128, 0, 136,
-        94, 3, 0, 119, 128, 0, 224, 0, 174, 240, 16, 100, 0, 104, 222, 155,
-        0, 69, 120, 2, 7, 208, 3, 0, 5, 118, 1, 188, 96, 43, 17, 247, 162, 0,
-        224, 94, 0, 11, 55, 163, 0, 2, 94, 2, 240, 15, 217, 1, 188, 96, 35,
-        6, 144, 100, 1, 188, 96, 71, 0, 23, 162, 0, 2, 94, 2, 240, 16, 1, 0,
-        104, 94, 155, 0, 69, 148, 1, 164, 96, 70, 244, 113, 224, 0, 104, 222,
-        155, 0, 197, 134, 1, 188, 97, 19, 0, 183, 161, 2, 6, 0, 243, 0, 5, 127,
-        1, 188, 96, 19, 0, 183, 161, 1, 146, 194, 26, 244, 55, 162, 3, 41, 94,
-        2, 240, 5, 132, 1, 188, 96, 3, 0, 17, 238, 0, 144, 66, 231, 0, 145,
-        239, 1, 146, 224, 14, 244, 55, 162, 0, 176, 94, 139, 0, 17, 236, 3,
-        191, 222, 2, 240, 5, 148, 0, 104, 94, 155, 0, 101, 139, 0, 104, 94,
-        155, 0, 165, 139, 0, 176, 80, 47, 0, 17, 226, 0, 176, 80, 51, 0, 17,
-        226, 3, 191, 222, 2, 240, 5, 148, 1, 135, 96, 2, 61, 17, 232, 0, 104,
-        222, 155, 0, 165, 142, 1, 135, 96, 6, 61, 17, 232, 1, 188, 96, 3, 0,
-        17, 234, 0, 144, 66, 231, 0, 145, 235, 1, 146, 194, 27, 0, 183, 162,
-        1, 184, 94, 138, 61, 17, 232, 3, 191, 222, 2, 240, 5, 148, 1, 132, 96,
-        7, 0, 17, 224, 1, 188, 96, 3, 0, 17, 45, 0, 176, 68, 131, 0, 20, 44,
-        3, 163, 222, 2, 240, 5, 170, 1, 188, 96, 3, 0, 23, 142, 0, 104, 94,
-        75, 5, 165, 154, 2, 0, 80, 3, 0, 5, 164, 1, 131, 224, 6, 9, 16, 72,
-        0, 176, 65, 35, 0, 24, 0, 1, 188, 96, 3, 6, 55, 142, 0, 104, 94, 75,
-        5, 165, 169, 0, 224, 2, 163, 0, 32, 168, 1, 188, 96, 3, 4, 183, 142,
-        3, 169, 94, 2, 240, 5, 169, 0, 104, 94, 75, 4, 37, 169, 1, 188, 96,
-        3, 6, 183, 142, 3, 191, 222, 2, 240, 5, 169, 1, 129, 96, 6, 245, 119,
-        171, 0, 176, 94, 15, 0, 23, 133, 0, 2, 94, 2, 240, 15, 152, 1, 188,
-        96, 3, 0, 23, 140, 1, 188, 96, 3, 0, 23, 141, 3, 35, 222, 2, 240, 5,
-        180, 2, 6, 128, 199, 0, 5, 179, 1, 12, 129, 67, 0, 23, 161, 0, 104,
-        222, 135, 0, 101, 179, 1, 8, 66, 27, 0, 23, 161, 0, 104, 222, 135, 0,
-        5, 179, 1, 188, 96, 127, 31, 247, 161, 1, 224, 94, 134, 16, 112, 131,
-        1, 130, 224, 5, 134, 12, 48, 0, 224, 68, 103, 37, 140, 50, 1, 135, 224,
-        6, 16, 112, 131, 0, 109, 0, 167, 0, 133, 198, 3, 41, 94, 2, 240, 5,
-        198, 2, 3, 0, 199, 0, 5, 195, 0, 176, 80, 203, 0, 16, 101, 2, 130, 208,
-        199, 0, 5, 187, 0, 224, 90, 35, 0, 54, 136, 3, 191, 222, 2, 240, 5,
-        188, 0, 224, 90, 39, 0, 54, 137, 0, 104, 45, 235, 0, 37, 195, 0, 224,
-        94, 203, 0, 55, 178, 1, 10, 94, 203, 0, 23, 161, 0, 224, 80, 202, 244,
-        48, 101, 0, 208, 96, 6, 246, 87, 162, 0, 32, 90, 26, 244, 69, 195, 3,
-        191, 222, 2, 240, 5, 189, 0, 2, 94, 2, 240, 17, 57, 3, 80, 222, 2, 240,
-        5, 195, 3, 191, 222, 2, 240, 6, 42, 2, 5, 94, 175, 0, 5, 200, 1, 135,
-        224, 6, 38, 113, 51, 3, 191, 222, 2, 240, 0, 2, 1, 144, 96, 10, 134,
-        52, 49, 2, 130, 208, 199, 0, 5, 210, 1, 60, 80, 39, 0, 23, 128, 1, 9,
-        80, 43, 0, 23, 129, 1, 7, 80, 7, 0, 23, 161, 1, 130, 94, 134, 240, 55,
-        129, 0, 176, 80, 31, 0, 16, 138, 0, 176, 80, 15, 0, 17, 22, 3, 191,
-        222, 2, 240, 5, 216, 1, 56, 80, 95, 0, 23, 128, 1, 10, 80, 43, 0, 23,
-        129, 1, 7, 208, 7, 0, 23, 161, 1, 130, 94, 134, 240, 55, 129, 0, 176,
-        80, 35, 0, 16, 138, 0, 176, 80, 91, 0, 17, 22, 2, 3, 0, 199, 0, 5, 221,
-        2, 12, 208, 3, 0, 5, 221, 2, 8, 94, 7, 0, 5, 221, 1, 56, 84, 7, 0, 23,
-        128, 1, 144, 66, 42, 161, 48, 138, 2, 128, 80, 199, 0, 5, 230, 1, 188,
-        96, 3, 5, 183, 146, 3, 191, 222, 2, 240, 3, 26, 1, 144, 96, 6, 134,
-        52, 49, 2, 3, 0, 199, 0, 5, 202, 2, 12, 208, 3, 0, 5, 202, 0, 176, 0,
-        31, 0, 23, 161, 0, 224, 94, 134, 128, 116, 26, 3, 191, 222, 2, 240,
-        5, 202, 1, 188, 96, 3, 6, 55, 146, 3, 191, 222, 2, 240, 3, 26, 0, 224,
-        19, 95, 0, 36, 215, 2, 4, 222, 179, 0, 0, 2, 0, 176, 19, 11, 0, 16,
-        101, 1, 25, 152, 135, 0, 23, 161, 1, 9, 90, 19, 0, 23, 162, 1, 137,
-        94, 134, 208, 150, 132, 0, 176, 19, 7, 0, 23, 163, 0, 109, 222, 132,
-        152, 37, 241, 0, 176, 94, 135, 0, 23, 163, 1, 136, 94, 142, 208, 150,
-        132, 0, 104, 222, 138, 244, 33, 9, 1, 188, 99, 255, 31, 240, 208, 0,
-        176, 90, 19, 0, 16, 240, 1, 188, 96, 3, 0, 23, 165, 1, 130, 94, 150,
-        30, 16, 240, 1, 188, 99, 255, 31, 240, 207, 1, 188, 96, 27, 0, 240,
-        239, 1, 188, 99, 255, 31, 240, 209, 0, 176, 68, 103, 0, 16, 241, 1,
-        188, 99, 255, 31, 240, 210, 0, 176, 68, 107, 0, 16, 242, 1, 188, 96,
-        3, 4, 4, 216, 1, 188, 99, 255, 31, 240, 195, 1, 188, 96, 3, 28, 16,
-        227, 1, 188, 99, 255, 31, 240, 196, 0, 176, 82, 19, 0, 16, 228, 1, 188,
-        99, 255, 31, 240, 197, 0, 176, 82, 47, 0, 16, 229, 1, 188, 99, 255,
-        31, 240, 198, 0, 176, 82, 51, 0, 16, 230, 1, 188, 99, 255, 31, 240,
-        199, 0, 176, 82, 55, 0, 16, 231, 1, 188, 99, 255, 31, 240, 200, 0, 176,
-        82, 23, 0, 16, 232, 1, 188, 99, 255, 31, 240, 201, 0, 176, 82, 27, 0,
-        16, 233, 1, 188, 99, 255, 31, 240, 202, 0, 176, 82, 31, 0, 16, 234,
-        1, 188, 99, 255, 31, 240, 203, 0, 176, 19, 71, 0, 16, 235, 1, 188, 99,
-        255, 31, 240, 204, 0, 176, 19, 75, 0, 16, 236, 1, 188, 99, 255, 31,
-        240, 205, 0, 176, 19, 79, 0, 16, 237, 0, 176, 19, 103, 0, 16, 98, 1,
-        188, 96, 3, 0, 40, 17, 0, 2, 94, 2, 240, 15, 119, 0, 2, 94, 2, 240,
-        12, 215, 1, 188, 96, 43, 24, 119, 161, 0, 2, 94, 2, 240, 1, 33, 1, 96,
-        64, 103, 0, 17, 192, 0, 224, 64, 100, 155, 23, 161, 0, 224, 94, 135,
-        0, 151, 161, 1, 188, 99, 255, 31, 240, 192, 1, 188, 96, 3, 1, 85, 1,
-        1, 210, 222, 134, 160, 48, 224, 0, 144, 94, 135, 1, 119, 161, 1, 188,
-        96, 3, 7, 151, 146, 1, 144, 96, 10, 9, 16, 72, 3, 191, 222, 2, 240,
-        3, 84, 1, 188, 96, 7, 0, 17, 193, 1, 188, 96, 43, 24, 23, 161, 1, 188,
-        96, 3, 0, 23, 162, 0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 3, 0, 17, 193,
-        0, 2, 222, 2, 240, 0, 0, 2, 1, 194, 227, 0, 6, 82, 2, 3, 0, 199, 0,
-        6, 47, 0, 104, 45, 235, 0, 38, 63, 0, 110, 66, 70, 246, 70, 63, 3, 191,
-        222, 2, 240, 6, 49, 0, 110, 66, 71, 0, 38, 63, 2, 3, 0, 199, 0, 6, 60,
-        3, 85, 222, 2, 240, 6, 49, 1, 128, 96, 2, 134, 20, 48, 1, 56, 80, 131,
-        0, 23, 161, 0, 176, 80, 203, 0, 16, 101, 0, 109, 218, 50, 244, 44, 9,
-        0, 168, 65, 35, 20, 16, 72, 1, 20, 0, 99, 0, 16, 101, 0, 224, 65, 151,
-        14, 208, 101, 0, 224, 90, 3, 0, 54, 128, 1, 188, 98, 31, 0, 17, 224,
-        3, 191, 222, 2, 240, 0, 16, 1, 129, 224, 6, 134, 52, 49, 1, 145, 96,
-        14, 132, 244, 39, 3, 191, 222, 2, 240, 6, 82, 1, 60, 80, 103, 0, 23,
-        161, 1, 172, 94, 134, 23, 80, 186, 1, 188, 96, 3, 1, 144, 184, 2, 3,
-        0, 199, 0, 6, 76, 0, 104, 173, 235, 0, 38, 71, 1, 129, 224, 2, 23, 16,
-        184, 3, 80, 222, 2, 240, 6, 69, 3, 191, 222, 2, 240, 6, 82, 0, 232,
-        45, 235, 0, 43, 122, 0, 176, 94, 203, 0, 16, 181, 0, 176, 0, 99, 8,
-        112, 180, 2, 131, 66, 211, 0, 6, 74, 3, 191, 222, 2, 240, 6, 77, 1,
-        134, 224, 4, 3, 16, 160, 0, 2, 94, 2, 240, 1, 231, 3, 213, 222, 2, 240,
-        12, 9, 3, 214, 222, 2, 240, 12, 33, 3, 80, 222, 2, 240, 6, 78, 3, 191,
-        222, 2, 240, 3, 191, 1, 188, 96, 3, 0, 240, 165, 1, 130, 224, 2, 9,
-        16, 72, 1, 188, 98, 31, 0, 17, 224, 1, 188, 96, 3, 0, 17, 236, 1, 188,
-        96, 15, 0, 17, 232, 2, 133, 80, 11, 0, 6, 89, 1, 130, 96, 2, 9, 16,
-        72, 3, 160, 222, 2, 240, 6, 93, 3, 213, 222, 2, 240, 12, 9, 3, 214,
-        222, 2, 240, 12, 33, 3, 32, 94, 2, 240, 6, 99, 1, 136, 96, 2, 9, 16,
-        72, 1, 188, 96, 3, 0, 8, 49, 0, 104, 94, 75, 24, 160, 2, 0, 104, 222,
-        75, 7, 134, 98, 0, 2, 94, 2, 240, 6, 36, 3, 191, 222, 2, 240, 0, 16,
-        1, 188, 96, 3, 0, 55, 161, 2, 0, 1, 179, 0, 6, 109, 2, 4, 1, 179, 0,
-        6, 108, 0, 233, 1, 187, 0, 32, 110, 0, 232, 129, 191, 0, 0, 111, 0,
-        104, 129, 187, 0, 6, 108, 0, 104, 129, 191, 0, 6, 108, 1, 188, 96, 3,
-        0, 0, 108, 3, 191, 222, 2, 240, 6, 185, 1, 188, 96, 3, 0, 23, 161, 0,
-        2, 94, 2, 240, 14, 25, 2, 1, 1, 179, 0, 6, 112, 3, 191, 222, 2, 240,
-        0, 16, 3, 163, 222, 2, 240, 0, 16, 2, 0, 80, 199, 0, 6, 121, 1, 188,
-        96, 3, 0, 16, 128, 1, 130, 96, 6, 9, 16, 72, 1, 128, 96, 2, 134, 52,
-        49, 1, 4, 193, 7, 0, 23, 161, 1, 131, 222, 134, 242, 151, 148, 0, 224,
-        1, 203, 0, 32, 114, 3, 191, 222, 2, 240, 2, 14, 2, 1, 1, 179, 0, 6,
-        123, 1, 135, 224, 6, 245, 119, 171, 0, 176, 1, 11, 0, 23, 161, 0, 109,
-        222, 132, 8, 6, 185, 0, 232, 68, 100, 8, 119, 161, 0, 110, 94, 132,
-        8, 38, 185, 1, 135, 224, 6, 245, 119, 171, 2, 2, 0, 191, 0, 6, 144,
-        2, 136, 129, 171, 0, 6, 144, 2, 132, 0, 199, 0, 6, 144, 1, 41, 80, 11,
-        0, 23, 161, 0, 104, 222, 135, 2, 6, 144, 2, 130, 222, 187, 0, 6, 144,
-        2, 3, 197, 115, 0, 6, 143, 2, 131, 222, 179, 0, 6, 143, 2, 134, 171,
-        211, 0, 6, 139, 2, 130, 222, 187, 0, 6, 139, 0, 104, 42, 231, 0, 6,
-        144, 0, 109, 222, 47, 1, 230, 144, 1, 130, 224, 6, 247, 247, 191, 1,
-        188, 97, 59, 4, 23, 161, 0, 224, 68, 102, 244, 42, 169, 3, 191, 222,
-        2, 240, 0, 16, 3, 191, 222, 2, 240, 6, 185, 1, 188, 96, 3, 0, 17, 73,
-        2, 130, 94, 175, 0, 6, 169, 1, 130, 96, 6, 245, 119, 171, 0, 176, 68,
-        103, 0, 8, 28, 2, 4, 0, 191, 0, 6, 156, 0, 104, 69, 31, 0, 6, 156, 1,
-        133, 224, 2, 245, 119, 171, 3, 43, 222, 2, 240, 6, 154, 1, 133, 224,
-        6, 245, 119, 171, 0, 176, 5, 139, 0, 16, 100, 0, 2, 94, 2, 240, 16,
-        154, 0, 176, 1, 75, 0, 23, 162, 2, 8, 66, 27, 0, 6, 159, 0, 176, 1,
-        107, 0, 23, 162, 0, 104, 94, 139, 0, 6, 165, 0, 144, 69, 43, 0, 151,
-        161, 0, 128, 222, 134, 244, 87, 161, 0, 110, 32, 186, 13, 166, 165,
-        0, 176, 65, 183, 0, 8, 46, 0, 224, 32, 186, 35, 40, 47, 2, 5, 94, 175,
-        0, 6, 167, 1, 188, 97, 3, 0, 17, 51, 0, 225, 13, 130, 41, 67, 96, 0,
-        224, 141, 135, 0, 3, 97, 0, 232, 68, 101, 3, 151, 165, 0, 109, 94, 151,
-        1, 0, 188, 2, 2, 0, 191, 0, 6, 183, 0, 104, 222, 75, 6, 166, 174, 1,
-        132, 224, 2, 247, 247, 191, 0, 104, 222, 75, 4, 6, 177, 2, 130, 222,
-        179, 0, 6, 177, 1, 188, 96, 3, 0, 11, 10, 2, 4, 94, 179, 0, 6, 180,
-        0, 104, 222, 75, 6, 38, 180, 0, 2, 94, 2, 240, 20, 130, 0, 2, 94, 2,
-        240, 17, 58, 3, 163, 222, 2, 240, 6, 183, 1, 131, 224, 2, 245, 151,
-        172, 1, 130, 96, 2, 245, 119, 171, 3, 209, 94, 2, 240, 0, 2, 2, 0, 80,
-        195, 0, 7, 15, 3, 37, 222, 2, 240, 6, 189, 1, 131, 96, 6, 132, 244,
-        39, 3, 191, 222, 2, 240, 6, 239, 2, 12, 208, 3, 0, 6, 237, 2, 3, 0,
-        199, 0, 6, 220, 1, 20, 0, 99, 0, 23, 161, 0, 109, 222, 135, 0, 134,
-        237, 1, 188, 96, 3, 0, 23, 128, 0, 176, 80, 203, 0, 16, 101, 0, 176,
-        80, 207, 0, 16, 100, 1, 129, 96, 6, 13, 144, 108, 1, 130, 96, 6, 134,
-        52, 49, 0, 176, 90, 35, 0, 23, 161, 1, 188, 96, 3, 0, 22, 136, 1, 188,
-        90, 42, 244, 55, 161, 1, 188, 96, 3, 0, 22, 138, 0, 176, 94, 135, 0,
-        20, 143, 0, 176, 90, 39, 0, 23, 161, 1, 188, 96, 3, 0, 22, 137, 1, 188,
-        90, 46, 244, 55, 161, 1, 188, 96, 3, 0, 22, 139, 0, 176, 94, 135, 0,
-        20, 144, 0, 176, 90, 27, 0, 20, 141, 0, 176, 90, 31, 0, 20, 142, 1,
-        188, 96, 3, 0, 22, 4, 0, 104, 222, 3, 0, 6, 217, 2, 3, 80, 199, 0, 6,
-        216, 1, 0, 80, 159, 0, 23, 128, 1, 128, 94, 2, 145, 180, 141, 1, 188,
-        94, 2, 146, 20, 144, 1, 188, 96, 3, 0, 55, 128, 0, 2, 94, 2, 240, 21,
-        225, 0, 176, 94, 3, 0, 20, 140, 3, 191, 222, 2, 240, 6, 232, 0, 104,
-        194, 71, 0, 6, 225, 1, 129, 224, 6, 134, 52, 49, 1, 145, 96, 14, 132,
-        244, 39, 1, 188, 96, 3, 0, 20, 48, 3, 191, 222, 2, 240, 0, 2, 0, 176,
-        80, 159, 0, 23, 161, 0, 2, 94, 2, 240, 1, 230, 0, 176, 94, 135, 0, 20,
-        39, 1, 134, 224, 4, 3, 16, 160, 0, 176, 66, 131, 0, 24, 0, 1, 12, 208,
-        3, 0, 23, 161, 0, 104, 222, 135, 0, 102, 220, 1, 2, 80, 199, 0, 23,
-        161, 1, 128, 94, 134, 132, 244, 39, 1, 138, 224, 14, 132, 244, 39, 0,
-        176, 80, 191, 0, 20, 38, 3, 191, 222, 2, 240, 6, 239, 1, 134, 224, 4,
-        3, 16, 160, 2, 0, 80, 159, 0, 6, 239, 2, 134, 193, 7, 0, 7, 10, 3, 41,
-        94, 2, 240, 6, 244, 0, 176, 82, 51, 0, 20, 45, 0, 176, 82, 55, 0, 23,
-        161, 1, 158, 94, 134, 132, 244, 39, 0, 176, 80, 159, 0, 23, 161, 1,
-        128, 222, 134, 244, 55, 161, 2, 5, 128, 195, 0, 6, 251, 0, 176, 48,
-        23, 0, 16, 143, 0, 176, 48, 19, 0, 16, 142, 0, 176, 80, 215, 0, 16,
-        141, 0, 176, 80, 211, 0, 48, 140, 0, 176, 80, 187, 0, 16, 143, 0, 176,
-        80, 183, 0, 16, 142, 0, 176, 80, 155, 0, 16, 141, 1, 128, 96, 6, 244,
-        48, 140, 2, 2, 80, 199, 0, 7, 7, 0, 176, 82, 67, 0, 16, 143, 0, 176,
-        82, 63, 0, 16, 142, 0, 176, 82, 59, 0, 16, 141, 1, 26, 82, 55, 0, 23,
-        161, 1, 152, 222, 135, 4, 55, 161, 1, 184, 94, 134, 145, 176, 140, 1,
-        130, 96, 2, 134, 52, 49, 1, 129, 96, 2, 13, 144, 108, 1, 188, 96, 3,
-        0, 20, 52, 1, 188, 96, 3, 0, 20, 53, 3, 37, 222, 2, 240, 7, 13, 1, 156,
-        96, 2, 132, 244, 39, 3, 191, 222, 2, 240, 7, 17, 2, 133, 80, 11, 0,
-        7, 15, 0, 168, 80, 199, 13, 20, 49, 1, 188, 96, 3, 0, 20, 48, 1, 129,
-        96, 2, 245, 215, 174, 1, 131, 96, 2, 132, 244, 39, 1, 133, 224, 2, 9,
-        16, 72, 1, 188, 96, 3, 0, 20, 46, 3, 162, 94, 2, 240, 2, 14, 3, 191,
-        222, 2, 240, 0, 16, 3, 35, 222, 2, 240, 7, 135, 3, 163, 94, 2, 240,
-        7, 135, 3, 162, 222, 2, 240, 7, 135, 1, 129, 96, 6, 245, 119, 171, 3,
-        170, 94, 2, 240, 7, 135, 1, 131, 224, 2, 9, 16, 72, 3, 81, 222, 2, 240,
-        7, 34, 2, 6, 128, 199, 0, 7, 31, 1, 130, 224, 1, 134, 12, 48, 0, 224,
-        2, 107, 0, 32, 154, 1, 128, 224, 6, 245, 119, 171, 3, 191, 222, 2, 240,
-        7, 39, 3, 1, 222, 2, 240, 7, 37, 0, 104, 94, 79, 6, 39, 37, 1, 188,
-        96, 3, 0, 23, 168, 3, 164, 94, 2, 240, 7, 39, 3, 193, 222, 2, 240, 7,
-        138, 2, 4, 94, 179, 0, 7, 48, 1, 132, 96, 2, 245, 151, 172, 1, 131,
-        224, 2, 9, 16, 72, 0, 176, 43, 63, 0, 23, 161, 0, 109, 42, 238, 244,
-        32, 2, 0, 224, 2, 123, 0, 32, 158, 1, 188, 96, 3, 0, 10, 187, 0, 2,
-        94, 2, 240, 20, 133, 3, 191, 222, 2, 240, 0, 2, 2, 3, 222, 179, 0, 7,
-        64, 1, 131, 224, 2, 245, 151, 172, 0, 224, 32, 207, 0, 40, 51, 2, 1,
-        94, 187, 0, 7, 64, 0, 176, 42, 131, 0, 23, 161, 0, 109, 32, 206, 244,
-        39, 59, 1, 188, 96, 3, 0, 8, 51, 0, 224, 2, 127, 0, 32, 159, 3, 169,
-        94, 2, 240, 7, 62, 1, 145, 96, 26, 132, 244, 39, 3, 191, 222, 2, 240,
-        3, 111, 1, 188, 99, 255, 31, 247, 161, 0, 2, 94, 2, 240, 14, 25, 3,
-        41, 94, 2, 240, 7, 64, 1, 145, 96, 26, 132, 244, 39, 3, 191, 222, 2,
-        240, 7, 64, 1, 132, 96, 2, 9, 16, 72, 0, 225, 13, 194, 41, 67, 112,
-        0, 224, 141, 199, 0, 3, 113, 2, 4, 0, 191, 0, 7, 71, 1, 188, 96, 3,
-        0, 17, 21, 1, 20, 0, 99, 0, 23, 161, 0, 224, 102, 2, 244, 48, 101, 0,
-        2, 94, 2, 240, 15, 157, 1, 130, 96, 2, 9, 16, 72, 0, 104, 94, 59, 24,
-        167, 75, 0, 104, 222, 59, 7, 7, 76, 3, 191, 222, 2, 240, 0, 2, 3, 41,
-        94, 2, 240, 7, 79, 2, 1, 80, 3, 0, 7, 79, 0, 104, 94, 59, 4, 167, 86,
-        1, 240, 222, 23, 0, 55, 133, 0, 160, 94, 22, 240, 151, 133, 0, 104,
-        94, 59, 6, 39, 86, 2, 1, 80, 3, 0, 7, 85, 2, 135, 128, 191, 0, 7, 85,
-        1, 133, 224, 6, 9, 16, 72, 2, 128, 208, 3, 0, 7, 102, 0, 176, 94, 27,
-        0, 23, 163, 0, 176, 0, 139, 0, 23, 164, 2, 4, 0, 191, 0, 7, 92, 0, 110,
-        65, 151, 48, 103, 92, 1, 24, 90, 3, 0, 23, 163, 1, 26, 90, 3, 0, 23,
-        164, 0, 104, 193, 131, 24, 7, 95, 0, 224, 2, 147, 0, 32, 164, 3, 191,
-        222, 2, 240, 7, 97, 0, 109, 94, 46, 244, 135, 97, 1, 130, 224, 6, 134,
-        52, 49, 0, 224, 94, 51, 0, 55, 140, 0, 104, 222, 50, 244, 103, 100,
-        0, 176, 94, 15, 0, 23, 133, 0, 109, 222, 46, 244, 103, 114, 3, 191,
-        222, 2, 240, 7, 130, 0, 176, 94, 31, 0, 23, 163, 0, 176, 0, 143, 0,
-        23, 164, 2, 4, 0, 191, 0, 7, 108, 0, 110, 65, 151, 48, 103, 108, 1,
-        28, 90, 3, 0, 23, 163, 1, 30, 90, 3, 0, 23, 164, 0, 109, 94, 46, 244,
-        135, 110, 1, 130, 224, 6, 134, 52, 49, 0, 224, 94, 55, 0, 55, 141, 0,
-        104, 222, 54, 244, 103, 113, 0, 176, 94, 15, 0, 23, 133, 0, 109, 94,
-        46, 244, 103, 130, 1, 133, 224, 2, 9, 16, 72, 3, 209, 222, 2, 240, 7,
-        116, 3, 41, 94, 2, 240, 7, 118, 2, 3, 0, 199, 0, 7, 119, 0, 176, 94,
-        15, 0, 23, 133, 0, 2, 94, 2, 240, 15, 152, 0, 104, 65, 131, 24, 7, 169,
-        2, 3, 0, 199, 0, 7, 126, 2, 12, 208, 3, 0, 7, 126, 2, 131, 80, 199,
-        0, 7, 126, 0, 104, 222, 75, 5, 167, 126, 3, 191, 222, 2, 240, 21, 97,
-        1, 129, 224, 6, 134, 52, 49, 0, 104, 222, 59, 6, 39, 129, 0, 224, 2,
-        159, 0, 32, 167, 3, 191, 222, 2, 240, 6, 185, 0, 2, 94, 2, 240, 15,
-        152, 1, 129, 96, 2, 9, 16, 72, 3, 41, 94, 2, 240, 7, 135, 2, 131, 0,
-        199, 0, 21, 97, 3, 191, 222, 2, 240, 6, 185, 3, 209, 222, 2, 240, 7,
-        136, 3, 165, 222, 2, 240, 6, 185, 3, 191, 222, 2, 240, 0, 16, 0, 225,
-        13, 186, 41, 67, 110, 0, 224, 141, 191, 0, 3, 111, 2, 128, 1, 179, 0,
-        0, 16, 2, 6, 80, 3, 0, 7, 147, 0, 176, 1, 3, 0, 23, 161, 0, 109, 129,
-        10, 244, 39, 147, 0, 232, 68, 100, 8, 119, 161, 0, 110, 94, 132, 8,
-        39, 147, 1, 135, 224, 6, 245, 119, 171, 1, 8, 94, 75, 0, 23, 161, 0,
-        104, 94, 75, 5, 39, 150, 0, 104, 94, 135, 0, 39, 151, 0, 176, 94, 15,
-        0, 23, 133, 0, 2, 94, 2, 240, 15, 152, 0, 104, 94, 59, 6, 39, 157, 1,
-        188, 96, 3, 0, 23, 140, 2, 0, 208, 3, 0, 7, 162, 1, 188, 96, 3, 0, 23,
-        141, 3, 191, 222, 2, 240, 7, 162, 1, 188, 96, 3, 0, 23, 140, 2, 3, 0,
-        199, 0, 2, 14, 2, 12, 208, 3, 0, 2, 14, 1, 156, 96, 2, 132, 244, 39,
-        3, 191, 222, 2, 240, 2, 14, 0, 104, 65, 131, 24, 7, 168, 1, 128, 96,
-        6, 132, 244, 39, 3, 41, 94, 2, 240, 6, 185, 1, 130, 96, 6, 134, 52,
-        49, 2, 131, 0, 199, 0, 21, 97, 3, 191, 222, 2, 240, 6, 185, 0, 224,
-        2, 151, 0, 32, 165, 1, 129, 96, 2, 9, 16, 72, 1, 188, 96, 3, 0, 8, 18,
-        0, 224, 1, 123, 0, 160, 94, 1, 188, 96, 19, 20, 23, 161, 0, 109, 1,
-        122, 244, 32, 16, 1, 188, 96, 19, 12, 128, 94, 3, 191, 222, 2, 240,
-        0, 16, 0, 2, 94, 2, 240, 12, 215, 3, 56, 222, 2, 240, 0, 16, 3, 158,
-        222, 2, 240, 0, 16, 0, 232, 68, 76, 0, 247, 161, 0, 232, 94, 132, 1,
-        23, 161, 0, 106, 222, 132, 1, 7, 185, 0, 232, 94, 132, 1, 17, 135, 1,
-        188, 96, 3, 0, 17, 136, 1, 165, 224, 34, 48, 17, 128, 1, 188, 96, 3,
-        0, 17, 19, 1, 188, 96, 3, 0, 17, 20, 0, 176, 68, 103, 0, 23, 161, 0,
-        176, 68, 107, 0, 23, 162, 0, 176, 94, 135, 0, 17, 4, 0, 176, 94, 139,
-        0, 17, 5, 3, 184, 222, 2, 240, 7, 187, 3, 191, 222, 2, 240, 0, 16, 1,
-        188, 96, 3, 4, 183, 146, 1, 188, 96, 3, 4, 23, 161, 1, 188, 99, 255,
-        31, 240, 206, 0, 176, 82, 23, 0, 16, 232, 0, 176, 82, 27, 0, 16, 233,
-        0, 176, 82, 31, 0, 16, 234, 1, 188, 96, 3, 0, 16, 228, 2, 134, 0, 195,
-        0, 7, 217, 0, 176, 84, 15, 0, 23, 162, 0, 105, 222, 138, 144, 135, 204,
-        0, 232, 82, 18, 244, 80, 228, 0, 104, 160, 71, 0, 7, 217, 1, 188, 96,
-        3, 0, 16, 228, 0, 176, 84, 39, 0, 16, 224, 0, 176, 84, 47, 0, 16, 225,
-        3, 191, 222, 2, 240, 7, 226, 1, 188, 96, 3, 2, 151, 161, 1, 188, 96,
-        3, 24, 144, 232, 1, 188, 96, 3, 0, 16, 233, 1, 188, 96, 3, 0, 16, 234,
-        3, 191, 222, 2, 240, 7, 217, 3, 164, 222, 2, 240, 10, 16, 3, 169, 222,
-        2, 240, 10, 16, 1, 188, 96, 3, 1, 215, 161, 2, 6, 0, 195, 0, 7, 219,
-        2, 128, 222, 95, 0, 7, 224, 0, 176, 84, 7, 0, 16, 224, 0, 104, 32, 71,
-        0, 7, 222, 1, 210, 222, 134, 160, 48, 224, 0, 176, 84, 11, 0, 16, 225,
-        3, 191, 222, 2, 240, 7, 226, 1, 188, 94, 134, 144, 16, 224, 1, 188,
-        96, 31, 0, 16, 225, 1, 188, 96, 3, 0, 16, 226, 0, 176, 82, 35, 0, 16,
-        229, 0, 176, 82, 39, 0, 16, 230, 0, 176, 82, 43, 0, 16, 231, 0, 2, 94,
-        2, 240, 15, 119, 3, 169, 222, 2, 240, 10, 142, 0, 104, 94, 79, 4, 39,
-        254, 1, 188, 99, 255, 31, 240, 195, 0, 104, 94, 79, 22, 167, 240, 0,
-        104, 94, 79, 5, 167, 243, 1, 188, 96, 3, 26, 144, 227, 1, 188, 96, 3,
-        6, 183, 146, 0, 104, 94, 79, 5, 39, 254, 3, 191, 222, 2, 240, 7, 248,
-        1, 188, 96, 3, 24, 183, 146, 1, 188, 96, 3, 14, 144, 227, 3, 191, 222,
-        2, 240, 7, 245, 1, 188, 96, 3, 6, 55, 146, 1, 188, 96, 3, 24, 144, 227,
-        2, 142, 1, 171, 0, 7, 248, 2, 152, 68, 7, 0, 11, 133, 2, 128, 70, 7,
-        0, 11, 133, 0, 176, 32, 71, 0, 23, 129, 0, 2, 94, 2, 240, 15, 135, 0,
-        232, 94, 132, 0, 215, 161, 0, 106, 94, 134, 144, 135, 254, 0, 232, 82,
-        18, 244, 48, 228, 3, 191, 222, 2, 240, 8, 1, 1, 188, 96, 3, 0, 16, 228,
-        3, 56, 222, 2, 240, 8, 1, 1, 135, 224, 6, 28, 144, 228, 1, 144, 96,
-        10, 9, 16, 72, 1, 188, 97, 3, 4, 55, 145, 0, 104, 94, 79, 22, 171, 231,
-        0, 104, 94, 79, 5, 171, 133, 3, 131, 94, 2, 240, 10, 16, 3, 191, 222,
-        2, 240, 0, 2, 2, 4, 65, 99, 0, 8, 19, 1, 188, 96, 3, 0, 17, 73, 1, 188,
-        96, 3, 1, 11, 128, 0, 225, 13, 178, 40, 227, 108, 0, 224, 141, 183,
-        0, 3, 109, 1, 132, 96, 2, 11, 16, 88, 2, 5, 94, 175, 0, 8, 15, 1, 135,
-        224, 6, 38, 113, 51, 2, 4, 0, 191, 0, 8, 18, 1, 133, 224, 2, 245, 119,
-        171, 0, 2, 94, 2, 240, 16, 154, 3, 191, 222, 2, 240, 0, 2, 3, 163, 94,
-        2, 240, 8, 21, 0, 2, 94, 2, 240, 22, 215, 2, 133, 197, 35, 0, 0, 2,
-        1, 132, 96, 6, 11, 16, 88, 2, 0, 222, 255, 0, 8, 27, 1, 128, 224, 2,
-        247, 247, 191, 0, 104, 43, 79, 0, 8, 27, 0, 224, 68, 101, 90, 74, 211,
-        2, 5, 94, 175, 0, 8, 29, 1, 188, 97, 3, 0, 17, 51, 2, 5, 128, 191, 0,
-        8, 35, 1, 188, 96, 19, 17, 87, 161, 0, 2, 94, 2, 240, 1, 33, 1, 150,
-        96, 14, 3, 48, 25, 0, 176, 64, 103, 0, 23, 162, 0, 2, 94, 2, 240, 1,
-        37, 2, 3, 192, 55, 0, 8, 37, 3, 191, 222, 2, 240, 0, 16, 0, 224, 2,
-        31, 0, 32, 135, 1, 130, 96, 6, 40, 145, 68, 1, 188, 96, 3, 1, 11, 128,
-        3, 191, 222, 2, 240, 0, 16, 2, 6, 1, 171, 0, 8, 43, 1, 128, 96, 1, 134,
-        12, 48, 2, 6, 129, 171, 0, 8, 45, 1, 131, 224, 1, 134, 12, 48, 1, 131,
-        224, 2, 15, 16, 120, 2, 129, 64, 19, 0, 0, 2, 2, 0, 66, 3, 0, 8, 50,
-        1, 132, 96, 2, 245, 151, 172, 1, 188, 96, 3, 0, 10, 187, 1, 188, 96,
-        3, 0, 16, 128, 3, 163, 222, 2, 240, 8, 53, 1, 144, 96, 2, 9, 16, 72,
-        0, 176, 68, 103, 0, 23, 158, 0, 176, 68, 107, 0, 23, 157, 0, 176, 68,
-        111, 0, 23, 156, 0, 176, 68, 115, 0, 23, 155, 0, 104, 222, 122, 35,
-        40, 53, 0, 224, 2, 35, 0, 32, 136, 1, 21, 64, 59, 0, 23, 151, 0, 109,
-        128, 167, 0, 136, 64, 0, 160, 94, 95, 0, 55, 151, 0, 104, 128, 167,
-        0, 8, 64, 1, 188, 96, 3, 0, 55, 151, 0, 176, 1, 67, 0, 23, 161, 1, 12,
-        129, 67, 0, 23, 163, 0, 104, 94, 143, 0, 40, 68, 1, 140, 224, 0, 10,
-        23, 161, 1, 201, 222, 132, 5, 39, 255, 1, 188, 96, 3, 16, 119, 149,
-        1, 145, 224, 2, 13, 144, 108, 2, 134, 64, 55, 0, 8, 74, 0, 224, 2, 187,
-        0, 32, 174, 3, 191, 222, 2, 240, 12, 78, 1, 188, 96, 3, 0, 20, 128,
-        1, 188, 96, 3, 0, 20, 129, 1, 184, 96, 10, 4, 144, 36, 1, 188, 96, 3,
-        4, 8, 36, 1, 188, 96, 3, 0, 72, 35, 1, 188, 96, 3, 0, 208, 42, 1, 179,
-        96, 7, 0, 16, 4, 1, 188, 96, 3, 0, 8, 8, 1, 188, 96, 3, 0, 8, 9, 1,
-        188, 96, 3, 0, 8, 10, 1, 188, 96, 3, 0, 8, 11, 1, 131, 224, 2, 245,
-        215, 174, 0, 224, 68, 103, 31, 76, 46, 2, 135, 192, 55, 0, 12, 72, 0,
-        2, 94, 2, 240, 17, 57, 2, 134, 64, 55, 0, 8, 92, 3, 195, 94, 2, 240,
-        8, 110, 3, 191, 222, 2, 240, 12, 73, 0, 104, 192, 51, 0, 72, 108, 0,
-        107, 68, 101, 133, 200, 108, 0, 176, 65, 39, 0, 23, 161, 0, 176, 65,
-        39, 1, 208, 73, 0, 176, 94, 135, 0, 23, 161, 0, 176, 94, 135, 0, 23,
-        161, 0, 176, 94, 135, 0, 23, 161, 0, 176, 94, 135, 0, 23, 161, 0, 176,
-        94, 135, 0, 23, 161, 0, 176, 94, 135, 0, 23, 161, 0, 176, 94, 135, 0,
-        23, 161, 0, 176, 94, 135, 0, 23, 161, 0, 176, 94, 135, 0, 23, 161, 0,
-        176, 94, 135, 0, 23, 161, 0, 176, 94, 135, 0, 16, 73, 3, 191, 222, 2,
-        240, 12, 187, 3, 67, 94, 2, 240, 8, 87, 2, 134, 64, 55, 0, 8, 122, 0,
-        104, 94, 95, 0, 12, 73, 0, 104, 94, 95, 0, 76, 73, 1, 82, 210, 3, 0,
-        23, 161, 1, 133, 210, 6, 244, 55, 162, 3, 191, 222, 2, 240, 8, 117,
-        1, 60, 82, 3, 0, 23, 161, 1, 188, 82, 6, 244, 55, 162, 3, 35, 222, 2,
-        240, 8, 120, 0, 104, 222, 139, 1, 204, 73, 3, 191, 222, 2, 240, 8, 122,
-        0, 104, 94, 139, 2, 136, 122, 0, 104, 222, 139, 3, 140, 73, 0, 109,
-        64, 51, 0, 204, 78, 0, 104, 94, 95, 0, 72, 141, 0, 104, 94, 95, 0, 40,
-        138, 0, 104, 0, 167, 0, 200, 127, 0, 104, 128, 167, 0, 168, 128, 0,
-        224, 68, 102, 144, 40, 48, 1, 188, 98, 195, 0, 23, 161, 2, 128, 82,
-        3, 0, 8, 131, 1, 150, 82, 3, 0, 23, 161, 0, 128, 222, 134, 144, 55,
-        154, 2, 3, 82, 3, 0, 8, 136, 0, 224, 94, 106, 144, 55, 154, 2, 7, 210,
-        3, 0, 8, 136, 0, 232, 94, 107, 0, 55, 154, 2, 158, 94, 107, 0, 12, 78,
-        3, 191, 222, 2, 240, 8, 145, 1, 82, 210, 3, 0, 23, 161, 1, 133, 210,
-        6, 244, 55, 154, 3, 191, 222, 2, 240, 8, 145, 1, 60, 82, 3, 0, 23, 161,
-        1, 188, 82, 6, 244, 55, 154, 0, 110, 94, 104, 11, 172, 78, 0, 104, 94,
-        107, 0, 12, 187, 2, 4, 192, 59, 0, 8, 163, 1, 129, 224, 6, 13, 144,
-        108, 2, 7, 192, 175, 0, 8, 153, 2, 7, 64, 55, 0, 8, 151, 0, 224, 2,
-        115, 0, 32, 156, 3, 191, 222, 2, 240, 12, 78, 0, 2, 94, 2, 240, 17,
-        57, 3, 191, 222, 2, 240, 8, 147, 0, 176, 32, 35, 0, 12, 8, 0, 176, 32,
-        39, 0, 12, 9, 0, 176, 32, 43, 0, 12, 10, 0, 176, 32, 47, 0, 12, 11,
-        0, 176, 94, 127, 0, 12, 12, 2, 135, 192, 175, 0, 12, 72, 2, 130, 64,
-        59, 0, 12, 72, 1, 88, 64, 175, 0, 23, 154, 1, 188, 96, 63, 30, 23, 161,
-        0, 109, 222, 106, 244, 44, 72, 3, 91, 94, 2, 240, 8, 165, 1, 188, 96,
-        19, 0, 16, 67, 1, 188, 96, 255, 30, 23, 161, 0, 110, 94, 106, 244, 44,
-        72, 0, 176, 65, 35, 40, 16, 72, 1, 128, 96, 2, 242, 151, 148, 1, 132,
-        224, 2, 9, 16, 72, 1, 88, 64, 175, 0, 16, 42, 0, 104, 64, 171, 0, 44,
-        72, 1, 187, 94, 86, 0, 144, 4, 2, 3, 94, 87, 0, 8, 182, 2, 0, 71, 163,
-        0, 8, 179, 1, 188, 98, 30, 60, 17, 224, 1, 188, 96, 3, 0, 17, 234, 0,
-        176, 94, 107, 0, 17, 235, 1, 152, 96, 30, 61, 17, 232, 2, 0, 71, 179,
-        0, 8, 182, 0, 176, 94, 107, 0, 17, 239, 1, 176, 224, 206, 61, 145, 236,
-        3, 131, 94, 2, 240, 8, 185, 0, 2, 94, 2, 240, 17, 57, 0, 109, 64, 51,
-        4, 200, 182, 1, 188, 96, 3, 0, 7, 252, 1, 136, 224, 15, 0, 7, 253, 0,
-        109, 64, 51, 2, 10, 10, 1, 41, 82, 15, 0, 23, 147, 1, 9, 82, 15, 0,
-        23, 170, 0, 104, 222, 79, 3, 168, 193, 1, 41, 82, 35, 0, 23, 147, 1,
-        169, 94, 79, 0, 55, 147, 1, 150, 96, 2, 242, 151, 148, 0, 224, 65, 135,
-        1, 240, 101, 1, 188, 96, 15, 0, 23, 161, 0, 40, 222, 134, 144, 104,
-        200, 1, 134, 96, 6, 242, 151, 148, 0, 224, 65, 151, 0, 112, 101, 0,
-        224, 32, 147, 0, 200, 36, 1, 6, 94, 83, 0, 23, 162, 0, 160, 94, 79,
-        4, 119, 161, 0, 104, 222, 135, 4, 72, 214, 1, 134, 224, 6, 242, 151,
-        148, 0, 184, 94, 139, 0, 55, 162, 0, 176, 90, 3, 0, 23, 160, 2, 10,
-        218, 3, 0, 8, 208, 1, 135, 96, 6, 242, 151, 148, 2, 132, 192, 59, 0,
-        8, 214, 2, 3, 218, 3, 0, 8, 214, 3, 176, 94, 2, 240, 8, 212, 2, 4, 65,
-        7, 0, 8, 214, 1, 128, 96, 4, 255, 167, 253, 1, 6, 94, 83, 0, 23, 162,
-        1, 130, 222, 138, 0, 144, 4, 3, 170, 222, 2, 240, 9, 14, 3, 176, 94,
-        2, 240, 8, 219, 2, 0, 82, 23, 0, 9, 7, 3, 49, 94, 2, 240, 9, 7, 2, 2,
-        0, 191, 0, 9, 7, 1, 128, 224, 1, 97, 11, 8, 2, 0, 82, 23, 0, 8, 226,
-        0, 104, 222, 79, 4, 8, 225, 0, 176, 42, 215, 0, 23, 162, 0, 109, 222,
-        137, 85, 8, 245, 2, 2, 171, 47, 0, 9, 2, 2, 131, 43, 47, 0, 8, 228,
-        0, 104, 94, 95, 0, 8, 239, 1, 188, 96, 3, 0, 23, 163, 1, 56, 82, 3,
-        0, 23, 163, 2, 131, 171, 47, 0, 8, 235, 0, 104, 222, 95, 0, 40, 235,
-        1, 8, 94, 143, 0, 23, 163, 0, 105, 94, 143, 0, 105, 2, 3, 191, 222,
-        2, 240, 8, 239, 0, 109, 222, 95, 0, 72, 237, 3, 191, 222, 2, 240, 9,
-        2, 2, 132, 43, 47, 0, 9, 2, 0, 104, 222, 143, 0, 9, 2, 0, 104, 42, 155,
-        0, 9, 2, 0, 176, 43, 147, 0, 23, 162, 0, 109, 170, 154, 244, 73, 2,
-        0, 104, 94, 171, 0, 72, 245, 0, 104, 94, 79, 6, 136, 245, 3, 191, 222,
-        2, 240, 8, 254, 0, 176, 43, 155, 0, 23, 162, 0, 176, 42, 155, 0, 23,
-        161, 2, 131, 172, 39, 0, 8, 250, 0, 104, 44, 135, 0, 8, 251, 0, 109,
-        94, 133, 100, 40, 251, 0, 176, 44, 127, 0, 23, 162, 0, 109, 94, 137,
-        92, 168, 253, 0, 176, 44, 75, 0, 11, 17, 1, 132, 224, 6, 247, 247, 191,
-        0, 104, 222, 79, 2, 137, 2, 0, 2, 94, 2, 240, 22, 209, 2, 6, 222, 255,
-        0, 9, 2, 0, 224, 43, 199, 0, 42, 241, 0, 104, 222, 95, 0, 9, 5, 0, 104,
-        222, 171, 0, 73, 5, 1, 128, 224, 5, 97, 11, 8, 0, 104, 43, 79, 0, 9,
-        7, 1, 128, 224, 6, 247, 247, 191, 1, 188, 99, 255, 31, 247, 165, 3,
-        48, 94, 2, 240, 9, 15, 1, 188, 99, 255, 31, 231, 147, 0, 224, 65, 135,
-        1, 16, 101, 0, 2, 94, 2, 240, 14, 73, 2, 0, 192, 119, 0, 9, 15, 1, 41,
-        64, 119, 0, 7, 147, 0, 176, 30, 79, 0, 23, 165, 2, 7, 82, 15, 0, 9,
-        130, 2, 128, 71, 163, 0, 9, 127, 2, 128, 71, 179, 0, 9, 127, 0, 224,
-        32, 147, 0, 136, 36, 0, 232, 32, 143, 0, 136, 35, 1, 188, 96, 3, 0,
-        17, 228, 1, 188, 96, 3, 3, 209, 225, 2, 6, 94, 83, 0, 9, 24, 1, 188,
-        96, 3, 4, 145, 225, 2, 6, 222, 83, 0, 9, 28, 0, 224, 71, 135, 0, 81,
-        225, 2, 7, 210, 15, 0, 9, 28, 0, 224, 71, 135, 0, 145, 225, 0, 109,
-        64, 51, 2, 202, 10, 0, 104, 94, 79, 5, 137, 31, 0, 104, 222, 171, 0,
-        73, 130, 3, 176, 94, 2, 240, 9, 34, 2, 0, 82, 23, 0, 9, 130, 2, 5, 128,
-        243, 0, 9, 39, 0, 104, 94, 151, 255, 233, 36, 0, 224, 94, 151, 0, 151,
-        165, 0, 104, 222, 151, 255, 233, 39, 2, 128, 82, 23, 0, 9, 130, 2, 7,
-        0, 191, 0, 9, 130, 1, 188, 96, 27, 4, 55, 162, 0, 144, 71, 135, 0, 48,
-        101, 0, 224, 65, 150, 244, 80, 101, 0, 224, 71, 135, 1, 8, 26, 3, 131,
-        94, 2, 240, 9, 46, 0, 2, 94, 2, 240, 17, 57, 0, 109, 64, 49, 3, 73,
-        43, 0, 109, 64, 49, 3, 74, 10, 1, 188, 96, 11, 29, 87, 161, 0, 104,
-        222, 151, 255, 233, 53, 1, 15, 90, 7, 0, 23, 165, 3, 30, 222, 2, 240,
-        9, 53, 2, 0, 82, 23, 0, 9, 53, 3, 49, 94, 2, 240, 9, 130, 0, 224, 94,
-        150, 244, 48, 100, 1, 42, 88, 3, 0, 23, 153, 2, 5, 128, 243, 0, 9, 68,
-        1, 130, 224, 2, 243, 55, 153, 2, 0, 82, 23, 0, 9, 68, 1, 22, 216, 3,
-        0, 23, 166, 1, 15, 90, 7, 0, 23, 164, 1, 12, 216, 3, 0, 23, 161, 0,
-        104, 222, 146, 244, 41, 64, 0, 224, 94, 103, 2, 23, 153, 3, 191, 222,
-        2, 240, 9, 73, 1, 13, 216, 3, 0, 23, 161, 0, 104, 222, 146, 244, 41,
-        130, 0, 224, 94, 103, 4, 23, 153, 3, 191, 222, 2, 240, 9, 73, 1, 16,
-        88, 3, 0, 23, 166, 0, 104, 222, 155, 0, 201, 73, 1, 129, 218, 3, 0,
-        23, 161, 0, 184, 94, 134, 192, 23, 161, 2, 129, 222, 135, 0, 9, 130,
-        0, 136, 94, 103, 0, 119, 128, 0, 224, 0, 174, 240, 16, 100, 1, 170,
-        222, 100, 255, 135, 252, 0, 104, 222, 155, 0, 73, 99, 2, 7, 129, 135,
-        0, 9, 86, 0, 109, 222, 3, 12, 9, 86, 2, 133, 82, 15, 0, 9, 86, 2, 152,
-        82, 59, 0, 9, 86, 1, 129, 224, 4, 255, 167, 253, 0, 224, 94, 0, 11,
-        55, 163, 0, 224, 94, 143, 0, 151, 163, 0, 224, 65, 135, 0, 119, 162,
-        0, 2, 94, 2, 240, 15, 217, 0, 232, 32, 143, 1, 8, 35, 1, 188, 96, 35,
-        6, 215, 129, 0, 136, 94, 151, 0, 119, 161, 0, 232, 94, 134, 244, 176,
-        99, 1, 188, 96, 7, 14, 23, 161, 0, 224, 65, 142, 244, 48, 99, 0, 176,
-        86, 23, 0, 23, 161, 0, 176, 86, 27, 0, 23, 162, 0, 104, 222, 134, 208,
-        73, 130, 0, 104, 222, 138, 208, 105, 130, 0, 2, 94, 2, 240, 15, 174,
-        1, 188, 96, 35, 6, 144, 100, 1, 188, 98, 79, 0, 23, 162, 0, 2, 94, 2,
-        240, 16, 1, 0, 224, 71, 135, 2, 23, 161, 3, 131, 94, 2, 240, 9, 103,
-        0, 110, 192, 50, 244, 41, 101, 0, 110, 192, 50, 244, 44, 72, 0, 104,
-        94, 155, 0, 73, 127, 1, 188, 98, 30, 244, 113, 224, 0, 104, 222, 155,
-        0, 201, 114, 1, 188, 97, 19, 0, 183, 161, 2, 6, 0, 243, 0, 9, 110, 1,
-        188, 96, 19, 0, 183, 161, 1, 188, 96, 3, 0, 17, 238, 0, 176, 94, 107,
-        0, 17, 239, 1, 146, 224, 14, 244, 49, 236, 3, 191, 222, 2, 240, 9, 127,
-        0, 104, 94, 155, 0, 105, 116, 0, 104, 222, 155, 0, 169, 127, 1, 152,
-        96, 6, 61, 17, 232, 0, 224, 32, 147, 0, 136, 36, 0, 232, 32, 143, 0,
-        136, 35, 1, 188, 96, 3, 0, 17, 234, 0, 104, 222, 95, 0, 73, 122, 0,
-        176, 94, 107, 0, 17, 235, 1, 146, 222, 94, 61, 17, 232, 1, 135, 96,
-        2, 61, 17, 232, 0, 104, 222, 155, 0, 169, 126, 1, 135, 96, 6, 61, 17,
-        232, 1, 152, 96, 22, 61, 17, 232, 1, 129, 224, 4, 255, 135, 252, 1,
-        170, 222, 100, 255, 135, 252, 3, 191, 222, 2, 240, 9, 135, 1, 188, 98,
-        15, 0, 17, 224, 1, 188, 96, 3, 0, 17, 228, 1, 129, 224, 0, 255, 167,
-        253, 1, 188, 96, 15, 0, 17, 232, 1, 188, 96, 3, 0, 17, 236, 2, 0, 31,
-        247, 0, 9, 142, 0, 224, 32, 142, 243, 72, 35, 0, 176, 32, 147, 0, 16,
-        37, 0, 232, 32, 142, 4, 168, 35, 0, 106, 160, 143, 1, 201, 142, 1, 184,
-        96, 6, 4, 144, 36, 1, 130, 224, 6, 242, 151, 148, 1, 136, 96, 10, 0,
-        144, 4, 1, 188, 96, 3, 24, 119, 149, 3, 160, 222, 2, 240, 9, 155, 0,
-        104, 94, 79, 6, 169, 160, 1, 56, 82, 3, 0, 23, 128, 0, 176, 94, 95,
-        0, 23, 129, 2, 4, 222, 183, 0, 9, 154, 0, 104, 94, 7, 0, 9, 153, 1,
-        188, 96, 3, 1, 119, 128, 1, 188, 96, 3, 0, 55, 129, 3, 191, 222, 2,
-        240, 9, 154, 1, 188, 96, 3, 1, 87, 128, 0, 2, 94, 2, 240, 1, 61, 0,
-        104, 222, 171, 0, 73, 160, 0, 160, 94, 79, 4, 119, 161, 0, 104, 94,
-        135, 0, 75, 212, 0, 104, 94, 135, 4, 75, 212, 3, 191, 222, 2, 240, 13,
-        187, 1, 128, 96, 1, 133, 172, 45, 0, 110, 176, 91, 0, 41, 220, 0, 104,
-        222, 79, 4, 9, 220, 3, 51, 94, 2, 240, 9, 220, 1, 128, 96, 1, 131, 108,
-        27, 0, 224, 48, 139, 0, 44, 34, 3, 146, 222, 2, 240, 9, 220, 0, 224,
-        48, 107, 0, 44, 26, 0, 176, 48, 91, 0, 23, 161, 0, 109, 48, 106, 244,
-        41, 171, 3, 191, 222, 2, 240, 9, 218, 1, 128, 96, 5, 131, 108, 27, 1,
-        188, 96, 39, 8, 151, 161, 0, 2, 94, 2, 240, 1, 33, 1, 135, 224, 6, 3,
-        44, 32, 0, 176, 1, 67, 0, 12, 33, 3, 131, 94, 2, 240, 9, 216, 0, 109,
-        192, 51, 5, 201, 187, 0, 232, 96, 186, 1, 151, 166, 0, 128, 222, 155,
-        1, 23, 165, 0, 104, 94, 95, 0, 9, 182, 0, 128, 222, 155, 0, 87, 165,
-        0, 176, 65, 183, 0, 12, 44, 0, 128, 176, 179, 12, 140, 44, 0, 176, 65,
-        183, 0, 12, 44, 0, 176, 48, 179, 0, 16, 64, 0, 0, 128, 0, 0, 0, 0, 1,
-        188, 96, 27, 6, 208, 101, 1, 188, 96, 3, 0, 183, 164, 0, 2, 94, 2, 240,
-        1, 108, 0, 104, 94, 147, 0, 169, 195, 3, 131, 94, 2, 240, 9, 216, 0,
-        109, 192, 49, 130, 233, 216, 1, 188, 96, 3, 6, 76, 44, 3, 191, 222,
-        2, 240, 9, 183, 2, 7, 193, 151, 0, 9, 198, 1, 56, 90, 7, 0, 23, 187,
-        3, 191, 222, 2, 240, 9, 199, 1, 60, 90, 3, 0, 23, 187, 1, 188, 96, 27,
-        4, 55, 166, 0, 232, 65, 150, 244, 215, 163, 0, 136, 94, 143, 0, 55,
-        163, 0, 224, 94, 142, 247, 119, 165, 0, 224, 94, 151, 0, 87, 165, 3,
-        131, 94, 2, 240, 9, 216, 0, 109, 192, 49, 130, 233, 216, 0, 109, 192,
-        50, 244, 169, 216, 0, 232, 94, 150, 1, 151, 166, 0, 128, 222, 155, 1,
-        23, 164, 0, 104, 94, 95, 0, 9, 211, 0, 128, 222, 155, 0, 87, 164, 0,
-        176, 65, 183, 0, 23, 164, 0, 128, 222, 147, 12, 151, 164, 0, 176, 65,
-        183, 0, 16, 64, 0, 0, 128, 0, 0, 0, 0, 3, 191, 222, 2, 240, 9, 204,
-        3, 134, 222, 2, 240, 12, 75, 3, 191, 222, 2, 240, 13, 51, 1, 128, 96,
-        1, 131, 108, 27, 1, 188, 96, 3, 0, 12, 26, 3, 134, 222, 2, 240, 12,
-        75, 2, 135, 192, 55, 0, 12, 72, 0, 2, 94, 2, 240, 17, 57, 3, 3, 94,
-        2, 240, 9, 220, 3, 169, 222, 2, 240, 9, 230, 0, 2, 94, 2, 240, 17, 57,
-        2, 7, 64, 55, 0, 9, 225, 3, 134, 222, 2, 240, 12, 75, 2, 135, 192, 55,
-        0, 12, 72, 0, 2, 94, 2, 240, 14, 38, 0, 110, 64, 48, 2, 10, 16, 3, 1,
-        222, 2, 240, 10, 16, 0, 104, 222, 171, 0, 9, 247, 3, 48, 94, 2, 240,
-        9, 236, 0, 224, 2, 43, 0, 32, 138, 3, 191, 222, 2, 240, 9, 240, 2, 128,
-        82, 23, 0, 9, 239, 0, 224, 2, 67, 0, 32, 144, 3, 191, 222, 2, 240, 9,
-        240, 0, 224, 2, 87, 0, 32, 149, 0, 104, 94, 79, 4, 13, 45, 0, 104, 94,
-        79, 2, 141, 45, 0, 104, 94, 79, 2, 11, 145, 0, 104, 94, 79, 5, 13, 171,
-        0, 104, 94, 79, 6, 13, 171, 0, 104, 94, 79, 6, 141, 181, 3, 191, 222,
-        2, 240, 13, 187, 0, 104, 222, 171, 0, 42, 9, 3, 48, 94, 2, 240, 9, 251,
-        0, 224, 2, 47, 0, 32, 139, 3, 191, 222, 2, 240, 9, 255, 2, 128, 82,
-        23, 0, 9, 254, 0, 224, 2, 71, 0, 32, 145, 3, 191, 222, 2, 240, 9, 255,
-        0, 224, 2, 91, 0, 32, 150, 0, 104, 94, 79, 6, 171, 94, 0, 104, 94, 79,
-        4, 45, 208, 0, 104, 94, 79, 4, 173, 208, 0, 104, 94, 79, 5, 171, 217,
-        0, 104, 94, 79, 6, 43, 94, 0, 104, 94, 79, 5, 45, 169, 0, 160, 94, 79,
-        255, 119, 161, 0, 104, 94, 135, 7, 45, 198, 0, 104, 94, 79, 22, 171,
-        228, 3, 191, 222, 2, 240, 11, 133, 3, 191, 222, 2, 240, 11, 137, 0,
-        224, 2, 15, 0, 32, 131, 1, 188, 96, 3, 0, 17, 236, 1, 188, 96, 15, 0,
-        17, 232, 2, 132, 192, 59, 0, 9, 130, 1, 132, 224, 6, 9, 16, 72, 3, 191,
-        222, 2, 240, 9, 130, 2, 0, 192, 147, 0, 0, 2, 3, 163, 94, 2, 240, 10,
-        20, 3, 195, 94, 2, 240, 10, 19, 3, 191, 222, 2, 240, 12, 185, 0, 2,
-        94, 2, 240, 17, 57, 2, 7, 192, 175, 0, 10, 23, 2, 7, 64, 55, 0, 10,
-        20, 1, 7, 192, 175, 0, 23, 161, 0, 184, 94, 135, 0, 55, 161, 1, 130,
-        94, 134, 13, 144, 108, 0, 176, 68, 127, 0, 7, 254, 1, 131, 96, 2, 9,
-        16, 72, 2, 135, 192, 55, 0, 12, 72, 3, 134, 222, 2, 240, 12, 75, 0,
-        2, 94, 2, 240, 17, 57, 3, 67, 94, 2, 240, 10, 28, 2, 135, 192, 55, 0,
-        12, 72, 2, 0, 129, 179, 0, 10, 57, 1, 128, 96, 6, 242, 151, 148, 3,
-        1, 222, 2, 240, 10, 57, 1, 56, 82, 3, 0, 23, 128, 0, 176, 94, 95, 0,
-        23, 164, 0, 2, 94, 2, 240, 22, 196, 1, 188, 96, 47, 17, 23, 164, 0,
-        224, 94, 134, 244, 144, 101, 0, 224, 90, 3, 0, 54, 128, 3, 176, 94,
-        2, 240, 10, 45, 0, 224, 2, 7, 0, 32, 129, 3, 191, 222, 2, 240, 10, 46,
-        0, 224, 2, 3, 0, 32, 128, 2, 132, 129, 179, 0, 10, 51, 1, 132, 224,
-        4, 13, 128, 108, 1, 188, 96, 3, 0, 0, 110, 1, 188, 96, 3, 0, 0, 111,
-        3, 191, 222, 2, 240, 10, 56, 0, 232, 82, 58, 247, 183, 161, 0, 232,
-        94, 135, 2, 23, 161, 0, 144, 94, 135, 0, 151, 161, 0, 225, 1, 186, 244,
-        32, 110, 0, 224, 129, 191, 0, 0, 111, 0, 176, 82, 59, 0, 23, 189, 3,
-        1, 222, 2, 240, 10, 83, 3, 48, 94, 2, 240, 10, 83, 1, 188, 96, 31, 21,
-        80, 101, 0, 224, 65, 148, 245, 48, 101, 1, 56, 64, 43, 0, 22, 128, 1,
-        45, 64, 107, 0, 23, 162, 0, 136, 94, 139, 1, 55, 162, 2, 136, 64, 39,
-        0, 10, 66, 1, 132, 96, 6, 208, 22, 128, 0, 176, 90, 2, 244, 86, 128,
-        2, 5, 192, 39, 0, 10, 69, 1, 135, 224, 6, 208, 22, 128, 1, 188, 96,
-        27, 13, 215, 161, 0, 2, 94, 2, 240, 1, 33, 0, 176, 64, 103, 0, 22, 129,
-        1, 188, 96, 27, 13, 247, 161, 0, 2, 94, 2, 240, 1, 33, 0, 176, 64, 103,
-        0, 22, 130, 0, 176, 90, 11, 0, 23, 161, 0, 232, 90, 6, 244, 55, 162,
-        0, 225, 94, 138, 244, 87, 161, 0, 224, 222, 134, 244, 87, 161, 0, 152,
-        94, 135, 0, 183, 161, 0, 224, 30, 167, 0, 103, 169, 0, 105, 30, 167,
-        1, 138, 83, 1, 188, 96, 3, 0, 7, 169, 2, 0, 129, 179, 0, 10, 85, 2,
-        5, 1, 179, 0, 12, 187, 2, 128, 31, 247, 0, 10, 87, 0, 110, 64, 48, 2,
-        11, 89, 3, 129, 222, 2, 240, 10, 100, 0, 224, 2, 23, 0, 32, 133, 3,
-        41, 222, 2, 240, 10, 91, 2, 144, 46, 3, 0, 10, 92, 1, 188, 96, 3, 0,
-        43, 128, 3, 169, 222, 2, 240, 10, 96, 1, 132, 224, 6, 9, 16, 72, 1,
-        128, 224, 2, 9, 16, 72, 1, 132, 224, 2, 247, 247, 191, 3, 134, 222,
-        2, 240, 12, 75, 1, 128, 96, 4, 255, 135, 252, 1, 128, 96, 6, 242, 151,
-        148, 3, 191, 222, 2, 240, 11, 13, 0, 104, 222, 79, 4, 10, 103, 3, 51,
-        94, 2, 240, 10, 103, 1, 188, 96, 3, 0, 12, 26, 1, 131, 96, 2, 247, 247,
-        191, 3, 41, 222, 2, 240, 10, 107, 2, 136, 174, 3, 0, 10, 125, 1, 188,
-        96, 3, 0, 11, 128, 3, 176, 94, 2, 240, 10, 120, 0, 104, 94, 171, 0,
-        42, 124, 0, 104, 94, 171, 0, 10, 118, 1, 12, 82, 15, 0, 23, 161, 0,
-        104, 94, 135, 0, 42, 114, 0, 104, 94, 135, 0, 74, 116, 3, 191, 222,
-        2, 240, 10, 124, 3, 176, 222, 2, 240, 10, 120, 3, 191, 222, 2, 240,
-        10, 122, 3, 177, 94, 2, 240, 10, 120, 3, 191, 222, 2, 240, 10, 122,
-        3, 179, 94, 2, 240, 10, 120, 3, 191, 222, 2, 240, 10, 122, 1, 188, 96,
-        3, 0, 75, 128, 3, 191, 222, 2, 240, 10, 125, 1, 188, 96, 3, 0, 139,
-        128, 3, 191, 222, 2, 240, 10, 125, 1, 188, 96, 3, 0, 43, 128, 3, 134,
-        222, 2, 240, 12, 75, 3, 176, 94, 2, 240, 10, 130, 1, 240, 82, 19, 0,
-        17, 134, 1, 165, 224, 10, 48, 17, 128, 3, 191, 222, 2, 240, 10, 167,
-        2, 7, 128, 243, 0, 10, 133, 0, 104, 222, 171, 0, 74, 133, 0, 104, 30,
-        79, 255, 234, 214, 3, 169, 222, 2, 240, 10, 139, 0, 104, 222, 171, 0,
-        74, 167, 0, 176, 82, 59, 0, 23, 159, 0, 176, 82, 59, 0, 23, 190, 1,
-        188, 96, 3, 0, 40, 8, 3, 191, 222, 2, 240, 10, 167, 2, 135, 94, 83,
-        0, 10, 180, 3, 160, 222, 2, 240, 10, 150, 3, 191, 222, 2, 240, 7, 193,
-        1, 144, 96, 10, 9, 16, 72, 0, 176, 82, 59, 0, 23, 159, 0, 176, 82, 59,
-        0, 23, 190, 1, 158, 94, 131, 0, 176, 235, 1, 6, 82, 15, 0, 23, 161,
-        0, 184, 94, 135, 0, 55, 161, 1, 130, 222, 134, 245, 119, 171, 1, 188,
-        97, 3, 0, 48, 128, 0, 232, 82, 58, 243, 247, 162, 0, 107, 210, 58, 243,
-        234, 153, 0, 232, 94, 126, 145, 215, 162, 0, 144, 94, 139, 0, 151, 161,
-        1, 188, 96, 35, 1, 16, 100, 0, 107, 82, 58, 243, 234, 164, 1, 24, 94,
-        135, 0, 23, 162, 1, 10, 94, 135, 0, 23, 163, 0, 136, 96, 6, 244, 87,
-        162, 0, 224, 65, 146, 244, 112, 100, 0, 176, 88, 2, 244, 86, 0, 0, 107,
-        222, 250, 145, 202, 167, 0, 176, 82, 59, 0, 23, 190, 3, 191, 222, 2,
-        240, 10, 167, 0, 2, 94, 2, 240, 21, 76, 0, 176, 32, 35, 0, 40, 8, 0,
-        176, 82, 59, 0, 23, 159, 3, 32, 222, 2, 240, 10, 180, 2, 7, 94, 83,
-        0, 10, 171, 1, 128, 224, 2, 9, 16, 72, 3, 191, 222, 2, 240, 10, 180,
-        0, 104, 222, 95, 0, 10, 177, 2, 26, 84, 7, 0, 10, 175, 1, 3, 192, 39,
-        0, 23, 161, 1, 130, 94, 134, 16, 208, 134, 1, 2, 192, 39, 0, 23, 161,
-        0, 224, 66, 42, 244, 48, 138, 1, 128, 224, 4, 255, 135, 252, 3, 169,
-        222, 2, 240, 10, 180, 0, 176, 94, 71, 0, 16, 128, 1, 8, 94, 79, 0, 23,
-        161, 0, 104, 94, 135, 0, 42, 222, 3, 176, 94, 2, 240, 10, 226, 2, 0,
-        82, 23, 0, 10, 202, 0, 104, 222, 171, 0, 74, 186, 0, 224, 2, 83, 0,
-        32, 148, 2, 134, 94, 83, 0, 11, 13, 2, 132, 82, 15, 0, 12, 187, 2, 132,
-        210, 15, 0, 10, 191, 3, 179, 94, 2, 240, 10, 200, 3, 191, 222, 2, 240,
-        10, 209, 3, 49, 94, 2, 240, 10, 209, 0, 104, 94, 79, 4, 10, 200, 1,
-        6, 210, 15, 0, 23, 161, 1, 132, 94, 134, 242, 151, 148, 1, 135, 222,
-        134, 36, 145, 36, 0, 104, 48, 83, 255, 234, 200, 0, 176, 68, 103, 0,
-        12, 21, 2, 0, 94, 135, 0, 10, 200, 0, 224, 68, 101, 130, 140, 21, 0,
-        104, 94, 79, 2, 11, 13, 3, 191, 222, 2, 240, 10, 253, 3, 30, 222, 2,
-        240, 10, 206, 3, 49, 94, 2, 240, 10, 206, 0, 104, 222, 171, 0, 74, 206,
-        1, 132, 96, 2, 242, 151, 148, 0, 104, 222, 171, 0, 74, 211, 0, 224,
-        2, 63, 0, 32, 143, 3, 191, 222, 2, 240, 10, 214, 0, 104, 94, 171, 0,
-        74, 214, 2, 128, 82, 47, 0, 11, 13, 2, 2, 65, 7, 0, 10, 214, 0, 104,
-        94, 79, 4, 11, 13, 0, 104, 94, 79, 2, 139, 13, 2, 6, 222, 83, 0, 10,
-        219, 0, 40, 224, 30, 244, 10, 219, 0, 160, 68, 183, 3, 225, 69, 0, 176,
-        5, 19, 0, 23, 161, 0, 224, 94, 132, 40, 161, 70, 2, 132, 65, 7, 0, 11,
-        13, 1, 128, 96, 6, 242, 151, 148, 3, 191, 222, 2, 240, 11, 13, 3, 48,
-        94, 2, 240, 11, 13, 0, 104, 94, 79, 5, 170, 253, 0, 104, 94, 79, 5,
-        42, 253, 3, 191, 222, 2, 240, 11, 13, 0, 104, 222, 171, 0, 74, 235,
-        0, 109, 142, 207, 0, 42, 235, 1, 188, 96, 3, 0, 10, 181, 1, 130, 96,
-        2, 245, 215, 174, 2, 128, 94, 255, 0, 10, 233, 0, 104, 43, 79, 0, 10,
-        235, 0, 224, 68, 101, 90, 74, 211, 0, 104, 43, 107, 255, 202, 235, 0,
-        224, 43, 107, 0, 42, 218, 2, 6, 94, 83, 0, 10, 238, 0, 224, 2, 99, 0,
-        32, 152, 3, 191, 222, 2, 240, 11, 13, 3, 35, 222, 2, 240, 10, 248, 1,
-        41, 80, 11, 0, 23, 163, 0, 104, 222, 143, 5, 42, 248, 2, 6, 128, 199,
-        0, 10, 243, 1, 130, 224, 1, 134, 12, 48, 1, 135, 224, 2, 16, 112, 131,
-        1, 132, 96, 2, 9, 16, 72, 0, 176, 94, 135, 0, 23, 161, 0, 110, 224,
-        3, 0, 42, 247, 3, 209, 222, 2, 240, 10, 248, 0, 104, 222, 171, 0, 74,
-        250, 0, 224, 2, 39, 0, 32, 137, 0, 104, 94, 79, 0, 11, 13, 0, 104, 94,
-        79, 1, 11, 13, 0, 104, 94, 79, 5, 139, 13, 2, 128, 71, 199, 0, 11, 87,
-        3, 41, 222, 2, 240, 11, 3, 1, 2, 222, 175, 0, 23, 161, 1, 6, 82, 15,
-        0, 23, 162, 0, 56, 94, 134, 244, 75, 13, 1, 130, 222, 138, 245, 119,
-        171, 0, 176, 82, 35, 0, 17, 242, 0, 176, 82, 39, 0, 17, 243, 0, 176,
-        82, 43, 0, 17, 244, 1, 6, 82, 15, 0, 23, 161, 0, 224, 94, 135, 0, 49,
-        245, 0, 176, 0, 91, 0, 17, 240, 0, 176, 71, 195, 0, 24, 0, 1, 52, 199,
-        199, 0, 23, 161, 0, 110, 222, 132, 2, 171, 13, 1, 188, 96, 3, 8, 16,
-        66, 2, 131, 193, 7, 0, 11, 15, 2, 128, 94, 83, 0, 12, 187, 0, 176, 64,
-        51, 0, 23, 161, 1, 8, 159, 247, 0, 23, 162, 0, 104, 94, 139, 0, 107,
-        23, 0, 232, 64, 49, 4, 151, 161, 2, 129, 31, 247, 0, 11, 23, 0, 176,
-        32, 147, 0, 23, 161, 2, 128, 159, 247, 0, 11, 23, 0, 176, 94, 99, 0,
-        23, 161, 0, 110, 94, 132, 2, 11, 89, 0, 176, 94, 135, 0, 7, 244, 1,
-        129, 96, 0, 255, 135, 252, 2, 2, 192, 19, 0, 11, 29, 0, 224, 94, 132,
-        3, 71, 244, 1, 129, 96, 4, 255, 135, 252, 2, 1, 31, 247, 0, 11, 82,
-        1, 3, 94, 83, 0, 23, 161, 1, 135, 222, 132, 255, 135, 252, 3, 134, 222,
-        2, 240, 12, 75, 0, 2, 94, 2, 240, 17, 57, 3, 133, 94, 2, 240, 11, 32,
-        1, 142, 96, 2, 61, 17, 232, 1, 7, 199, 131, 0, 23, 161, 1, 130, 94,
-        132, 255, 135, 252, 2, 1, 159, 247, 0, 11, 41, 1, 3, 199, 151, 0, 23,
-        161, 1, 130, 94, 132, 255, 167, 253, 0, 176, 32, 51, 0, 23, 161, 1,
-        142, 94, 132, 255, 167, 253, 3, 42, 94, 2, 240, 11, 49, 0, 2, 94, 2,
-        240, 14, 10, 3, 41, 222, 2, 240, 11, 48, 3, 1, 222, 2, 240, 11, 48,
-        1, 130, 224, 6, 13, 144, 108, 3, 191, 222, 2, 240, 8, 153, 1, 188, 96,
-        3, 0, 17, 236, 1, 188, 96, 15, 0, 17, 232, 1, 132, 96, 4, 255, 167,
-        253, 0, 176, 64, 39, 0, 7, 246, 0, 176, 64, 107, 0, 7, 248, 0, 176,
-        64, 111, 0, 7, 249, 0, 176, 64, 43, 0, 7, 247, 1, 188, 96, 27, 13, 215,
-        161, 0, 2, 94, 2, 240, 1, 33, 0, 176, 64, 103, 0, 23, 162, 1, 188, 96,
-        27, 13, 247, 161, 0, 2, 94, 2, 240, 1, 33, 0, 176, 64, 103, 0, 23, 161,
-        0, 232, 94, 138, 244, 55, 162, 0, 225, 94, 138, 244, 87, 161, 0, 224,
-        222, 134, 244, 87, 161, 0, 152, 94, 135, 0, 183, 161, 1, 188, 94, 134,
-        1, 71, 247, 0, 104, 31, 51, 0, 11, 78, 1, 143, 96, 6, 1, 39, 246, 0,
-        104, 31, 51, 0, 43, 75, 0, 176, 31, 199, 0, 23, 161, 0, 2, 94, 2, 240,
-        1, 33, 0, 160, 64, 100, 249, 215, 162, 0, 184, 94, 136, 254, 23, 161,
-        3, 191, 222, 2, 240, 11, 76, 0, 160, 65, 56, 254, 23, 161, 0, 104, 222,
-        135, 0, 11, 78, 1, 143, 96, 2, 1, 39, 246, 1, 132, 96, 4, 255, 167,
-        253, 0, 2, 94, 2, 240, 14, 38, 1, 188, 99, 255, 31, 215, 168, 0, 2,
-        94, 2, 240, 15, 157, 0, 2, 94, 2, 240, 14, 10, 1, 168, 96, 10, 0, 144,
-        4, 2, 1, 31, 247, 0, 21, 56, 0, 168, 64, 19, 0, 80, 4, 3, 191, 222,
-        2, 240, 7, 22, 0, 224, 2, 135, 0, 32, 161, 3, 191, 222, 2, 240, 11,
-        90, 0, 224, 2, 11, 0, 32, 130, 3, 169, 222, 2, 240, 12, 187, 1, 132,
-        96, 6, 9, 16, 72, 1, 132, 224, 6, 9, 16, 72, 3, 191, 222, 2, 240, 12,
-        187, 3, 48, 94, 2, 240, 11, 129, 0, 104, 222, 79, 6, 171, 98, 0, 224,
-        2, 59, 0, 32, 142, 3, 191, 222, 2, 240, 11, 99, 0, 224, 2, 55, 0, 32,
-        141, 3, 35, 222, 2, 240, 11, 133, 0, 104, 222, 78, 241, 203, 133, 2,
-        6, 128, 199, 0, 11, 103, 1, 130, 224, 1, 134, 12, 48, 1, 135, 224, 2,
-        16, 112, 131, 1, 132, 96, 2, 9, 16, 72, 0, 176, 94, 135, 0, 23, 161,
-        0, 110, 224, 3, 0, 43, 107, 3, 209, 222, 2, 240, 11, 108, 0, 104, 94,
-        79, 6, 43, 127, 1, 188, 96, 3, 0, 8, 51, 3, 41, 94, 2, 240, 11, 113,
-        2, 3, 222, 179, 0, 11, 114, 1, 145, 96, 26, 132, 244, 39, 1, 131, 224,
-        2, 245, 151, 172, 2, 2, 0, 191, 0, 11, 126, 2, 6, 171, 211, 0, 11, 119,
-        2, 3, 69, 175, 0, 11, 121, 1, 133, 224, 6, 45, 113, 107, 3, 191, 222,
-        2, 240, 11, 121, 2, 3, 69, 111, 0, 11, 121, 1, 133, 224, 6, 43, 113,
-        91, 2, 4, 94, 179, 0, 11, 126, 1, 135, 224, 2, 16, 112, 131, 1, 131,
-        224, 2, 9, 16, 72, 0, 2, 94, 2, 240, 20, 134, 3, 191, 222, 2, 240, 11,
-        133, 2, 5, 80, 11, 0, 11, 133, 1, 130, 96, 6, 9, 16, 72, 3, 191, 222,
-        2, 240, 11, 133, 0, 2, 94, 2, 240, 11, 140, 0, 104, 222, 79, 6, 43,
-        133, 0, 224, 2, 79, 0, 32, 147, 3, 191, 222, 2, 240, 11, 133, 3, 176,
-        94, 2, 240, 11, 135, 2, 4, 65, 7, 0, 11, 138, 2, 131, 65, 7, 0, 10,
-        16, 3, 191, 222, 2, 240, 11, 138, 2, 132, 65, 7, 0, 10, 16, 1, 128,
-        96, 6, 242, 151, 148, 3, 191, 222, 2, 240, 10, 16, 2, 135, 0, 195, 0,
-        11, 144, 0, 104, 210, 19, 0, 11, 144, 1, 188, 96, 3, 0, 17, 131, 1,
-        188, 96, 3, 0, 17, 130, 0, 2, 222, 2, 240, 0, 0, 3, 159, 94, 2, 240,
-        11, 148, 3, 158, 222, 2, 240, 13, 187, 2, 3, 94, 83, 0, 13, 187, 1,
-        12, 129, 67, 0, 23, 161, 0, 104, 222, 135, 0, 43, 153, 1, 0, 1, 99,
-        0, 23, 161, 1, 2, 192, 39, 0, 23, 162, 0, 56, 222, 134, 244, 75, 137,
-        3, 176, 94, 2, 240, 11, 155, 2, 0, 82, 23, 0, 11, 137, 2, 128, 82, 47,
-        0, 11, 157, 3, 51, 94, 2, 240, 13, 187, 2, 60, 82, 63, 0, 11, 174, 1,
-        60, 82, 63, 0, 23, 161, 0, 104, 222, 132, 4, 139, 206, 1, 188, 96, 3,
-        22, 16, 100, 1, 188, 96, 27, 6, 48, 101, 0, 104, 94, 135, 0, 43, 170,
-        0, 176, 90, 3, 0, 23, 162, 0, 104, 222, 138, 192, 11, 206, 0, 224, 65,
-        151, 0, 48, 101, 0, 224, 65, 147, 0, 48, 100, 0, 232, 94, 135, 0, 87,
-        161, 0, 106, 94, 135, 0, 43, 163, 0, 104, 94, 135, 0, 11, 175, 1, 56,
-        90, 3, 0, 23, 161, 1, 56, 88, 3, 0, 23, 162, 0, 104, 222, 134, 244,
-        75, 206, 3, 191, 222, 2, 240, 11, 175, 2, 133, 193, 7, 0, 13, 187, 1,
-        188, 96, 27, 6, 16, 101, 1, 188, 96, 3, 5, 183, 164, 0, 2, 94, 2, 240,
-        1, 108, 2, 128, 0, 195, 0, 11, 206, 1, 188, 96, 19, 20, 23, 166, 0,
-        224, 1, 127, 0, 183, 165, 0, 109, 94, 150, 244, 203, 183, 1, 188, 96,
-        19, 12, 151, 165, 0, 104, 94, 148, 11, 203, 210, 0, 176, 1, 123, 0,
-        16, 101, 0, 176, 82, 39, 0, 23, 162, 0, 176, 82, 43, 0, 23, 163, 0,
-        104, 65, 148, 11, 235, 194, 0, 104, 222, 142, 208, 75, 190, 0, 104,
-        94, 138, 208, 43, 206, 0, 224, 65, 151, 0, 176, 101, 0, 109, 65, 150,
-        244, 203, 187, 1, 188, 96, 19, 12, 144, 101, 3, 191, 222, 2, 240, 11,
-        187, 0, 224, 2, 139, 0, 32, 162, 0, 176, 1, 127, 0, 16, 101, 0, 176,
-        82, 35, 0, 22, 128, 0, 176, 82, 39, 0, 22, 129, 0, 176, 82, 43, 0, 22,
-        130, 1, 188, 82, 2, 242, 247, 161, 1, 169, 94, 2, 244, 54, 131, 0, 144,
-        68, 103, 1, 22, 132, 2, 2, 129, 171, 0, 11, 204, 0, 104, 222, 147, 5,
-        171, 205, 1, 132, 96, 6, 208, 150, 132, 0, 176, 94, 151, 0, 0, 95, 2,
-        7, 129, 171, 0, 11, 208, 1, 128, 96, 6, 242, 151, 148, 3, 176, 94, 2,
-        240, 7, 214, 3, 191, 222, 2, 240, 10, 16, 0, 224, 2, 143, 0, 32, 163,
-        3, 191, 222, 2, 240, 11, 137, 3, 131, 94, 2, 240, 11, 214, 0, 109, 64,
-        51, 3, 139, 212, 0, 109, 64, 51, 3, 139, 137, 3, 48, 94, 2, 240, 13,
-        191, 3, 191, 222, 2, 240, 7, 214, 3, 48, 94, 2, 240, 11, 222, 0, 224,
-        2, 51, 0, 32, 140, 2, 6, 129, 171, 0, 11, 221, 1, 131, 224, 5, 134,
-        12, 48, 3, 191, 222, 2, 240, 7, 216, 0, 224, 2, 75, 0, 32, 146, 0, 136,
-        0, 35, 0, 55, 162, 0, 224, 94, 136, 0, 247, 162, 0, 224, 0, 26, 244,
-        81, 137, 1, 134, 224, 6, 48, 17, 128, 3, 191, 222, 2, 240, 11, 133,
-        3, 48, 94, 2, 240, 11, 223, 0, 224, 19, 83, 0, 36, 212, 3, 191, 222,
-        2, 240, 7, 209, 2, 4, 82, 71, 0, 11, 133, 1, 188, 96, 31, 16, 240, 100,
-        1, 188, 96, 3, 1, 119, 161, 1, 188, 99, 255, 31, 231, 147, 0, 224, 65,
-        134, 244, 48, 101, 1, 188, 99, 255, 31, 246, 0, 0, 224, 94, 135, 0,
-        119, 161, 0, 2, 94, 2, 240, 14, 73, 2, 0, 192, 119, 0, 11, 133, 1, 41,
-        64, 119, 0, 23, 162, 0, 109, 94, 139, 4, 203, 133, 0, 232, 94, 139,
-        4, 214, 0, 1, 188, 96, 31, 5, 240, 99, 0, 224, 65, 142, 192, 16, 99,
-        2, 0, 214, 3, 0, 11, 133, 2, 6, 86, 3, 0, 11, 133, 1, 132, 224, 6, 245,
-        151, 172, 1, 22, 214, 3, 0, 23, 162, 0, 136, 94, 139, 0, 119, 162, 0,
-        224, 1, 158, 244, 80, 101, 0, 176, 65, 151, 0, 4, 194, 1, 188, 96, 43,
-        24, 23, 161, 0, 176, 90, 15, 0, 23, 162, 0, 2, 94, 2, 240, 1, 37, 1,
-        188, 96, 43, 24, 55, 161, 0, 176, 90, 19, 0, 23, 162, 0, 2, 94, 2, 240,
-        1, 37, 0, 176, 65, 139, 0, 4, 217, 3, 191, 222, 2, 240, 11, 133, 3,
-        162, 222, 2, 240, 0, 189, 3, 163, 222, 2, 240, 12, 33, 0, 224, 1, 255,
-        0, 32, 127, 1, 188, 96, 3, 0, 23, 163, 3, 191, 222, 2, 240, 12, 35,
-        1, 135, 96, 4, 3, 16, 160, 1, 188, 96, 3, 0, 81, 228, 0, 176, 71, 147,
-        0, 24, 0, 1, 188, 96, 3, 2, 144, 4, 1, 188, 98, 15, 0, 17, 224, 1, 188,
-        96, 15, 1, 49, 232, 0, 176, 71, 163, 0, 24, 0, 1, 188, 96, 15, 0, 17,
-        232, 1, 188, 96, 3, 1, 49, 236, 0, 176, 71, 179, 0, 24, 0, 1, 188, 96,
-        3, 0, 17, 236, 1, 132, 96, 6, 9, 16, 72, 0, 32, 96, 30, 9, 12, 24, 0,
-        224, 1, 251, 0, 32, 126, 3, 191, 222, 2, 240, 12, 44, 1, 188, 96, 3,
-        14, 215, 161, 1, 20, 0, 99, 0, 23, 162, 0, 224, 94, 134, 244, 80, 101,
-        0, 224, 90, 3, 0, 54, 128, 2, 3, 0, 199, 0, 12, 30, 3, 169, 94, 2, 240,
-        12, 35, 2, 145, 80, 159, 0, 12, 34, 1, 145, 96, 26, 132, 244, 39, 3,
-        191, 222, 2, 240, 12, 34, 0, 224, 1, 255, 0, 32, 127, 1, 188, 96, 3,
-        0, 55, 163, 3, 35, 222, 2, 240, 12, 44, 1, 131, 224, 2, 9, 16, 72, 1,
-        132, 96, 2, 245, 151, 172, 1, 188, 96, 3, 0, 10, 187, 1, 188, 96, 3,
-        0, 23, 142, 2, 6, 128, 199, 0, 12, 42, 1, 130, 224, 1, 134, 12, 48,
-        1, 135, 224, 2, 16, 112, 131, 1, 130, 96, 2, 9, 16, 72, 3, 208, 222,
-        2, 240, 12, 45, 3, 208, 94, 2, 240, 12, 46, 1, 130, 224, 2, 9, 16, 72,
-        3, 213, 222, 2, 240, 12, 48, 1, 188, 96, 3, 0, 16, 180, 1, 188, 96,
-        3, 0, 247, 161, 0, 104, 0, 167, 0, 12, 52, 1, 133, 66, 26, 244, 55,
-        161, 0, 2, 94, 2, 240, 1, 33, 0, 176, 64, 103, 0, 23, 165, 1, 188, 99,
-        255, 31, 247, 162, 0, 2, 94, 2, 240, 1, 37, 0, 136, 96, 7, 1, 87, 164,
-        0, 184, 94, 134, 244, 151, 161, 0, 2, 94, 2, 240, 1, 37, 2, 131, 194,
-        31, 0, 12, 59, 0, 2, 94, 2, 240, 16, 79, 2, 132, 69, 35, 0, 12, 61,
-        3, 208, 222, 2, 240, 12, 63, 0, 104, 94, 143, 0, 0, 2, 0, 104, 1, 179,
-        0, 12, 67, 1, 188, 96, 3, 0, 5, 66, 3, 191, 222, 2, 240, 12, 70, 0,
-        32, 224, 30, 9, 12, 70, 0, 176, 94, 151, 0, 20, 46, 3, 191, 222, 2,
-        240, 3, 111, 0, 168, 65, 35, 0, 240, 72, 3, 191, 222, 2, 240, 0, 2,
-        1, 131, 96, 2, 9, 16, 72, 0, 224, 2, 19, 0, 32, 132, 3, 191, 222, 2,
-        240, 12, 78, 1, 188, 96, 7, 0, 16, 66, 0, 110, 64, 48, 2, 12, 78, 0,
-        224, 2, 119, 0, 32, 157, 0, 2, 94, 2, 240, 22, 7, 3, 163, 94, 2, 240,
-        10, 16, 3, 198, 222, 2, 240, 12, 81, 3, 42, 222, 2, 240, 12, 88, 0,
-        176, 48, 35, 0, 8, 8, 0, 176, 48, 39, 0, 8, 9, 0, 176, 48, 43, 0, 8,
-        10, 0, 176, 48, 47, 0, 8, 11, 0, 176, 48, 51, 0, 23, 159, 3, 191, 222,
-        2, 240, 12, 187, 1, 132, 224, 6, 9, 16, 72, 3, 191, 222, 2, 240, 12,
-        187, 2, 6, 129, 171, 0, 12, 93, 2, 129, 176, 195, 0, 0, 184, 2, 131,
-        48, 195, 0, 0, 184, 2, 132, 69, 35, 0, 0, 184, 3, 32, 222, 2, 240, 12,
-        101, 0, 104, 160, 199, 0, 12, 98, 1, 188, 96, 159, 2, 23, 161, 0, 224,
-        68, 102, 244, 40, 49, 0, 107, 68, 101, 6, 44, 102, 0, 32, 225, 2, 9,
-        0, 184, 0, 2, 94, 2, 240, 12, 215, 1, 188, 96, 3, 0, 8, 49, 0, 32, 227,
-        138, 9, 0, 184, 2, 132, 69, 35, 0, 0, 184, 0, 176, 94, 135, 0, 23, 161,
-        3, 145, 94, 2, 240, 0, 184, 3, 150, 222, 2, 240, 0, 184, 3, 150, 94,
-        2, 240, 0, 184, 0, 2, 94, 2, 240, 12, 215, 0, 225, 13, 178, 40, 227,
-        108, 0, 224, 141, 183, 0, 3, 109, 1, 188, 96, 3, 0, 17, 71, 1, 188,
-        96, 3, 0, 96, 32, 0, 104, 1, 115, 0, 12, 129, 1, 188, 96, 19, 8, 144,
-        230, 0, 2, 94, 2, 240, 1, 100, 0, 176, 1, 115, 0, 16, 228, 1, 188, 96,
-        3, 0, 0, 6, 1, 188, 96, 3, 0, 0, 92, 1, 188, 96, 3, 1, 215, 130, 1,
-        210, 222, 8, 119, 240, 224, 0, 176, 15, 3, 0, 16, 225, 0, 176, 0, 71,
-        0, 16, 134, 0, 176, 15, 31, 0, 16, 138, 1, 188, 96, 3, 0, 55, 129, 0,
-        2, 94, 2, 240, 15, 115, 1, 144, 96, 10, 9, 16, 72, 1, 188, 97, 3, 0,
-        48, 128, 3, 191, 222, 2, 240, 0, 2, 1, 188, 96, 3, 0, 48, 66, 1, 135,
-        224, 2, 36, 113, 35, 0, 2, 94, 2, 240, 19, 208, 2, 131, 193, 31, 0,
-        22, 174, 3, 151, 94, 2, 240, 12, 235, 3, 18, 94, 2, 240, 12, 132, 1,
-        188, 96, 3, 0, 64, 32, 1, 188, 96, 3, 0, 11, 128, 1, 188, 96, 3, 0,
-        17, 73, 1, 188, 97, 131, 0, 17, 37, 0, 176, 0, 123, 0, 17, 39, 1, 188,
-        96, 19, 12, 128, 94, 1, 188, 96, 19, 12, 128, 95, 1, 128, 224, 6, 245,
-        215, 174, 1, 7, 193, 7, 0, 23, 161, 1, 128, 94, 134, 245, 119, 171,
-        1, 188, 96, 15, 0, 17, 232, 1, 188, 98, 15, 0, 17, 224, 0, 2, 94, 2,
-        240, 12, 160, 1, 188, 97, 207, 12, 16, 92, 1, 188, 96, 3, 0, 16, 93,
-        1, 188, 97, 207, 1, 240, 94, 1, 188, 96, 59, 10, 240, 95, 0, 2, 94,
-        2, 240, 19, 62, 1, 188, 96, 3, 0, 8, 46, 2, 3, 0, 199, 0, 0, 16, 1,
-        188, 96, 3, 0, 6, 178, 1, 188, 96, 3, 0, 6, 183, 1, 188, 96, 3, 0, 6,
-        188, 1, 188, 96, 3, 0, 6, 193, 3, 191, 222, 2, 240, 0, 16, 1, 188, 96,
-        3, 0, 16, 72, 1, 188, 99, 255, 31, 240, 84, 1, 188, 99, 255, 31, 240,
-        85, 1, 188, 99, 191, 31, 240, 86, 1, 188, 99, 255, 15, 240, 87, 0, 2,
-        94, 2, 240, 22, 7, 1, 135, 224, 6, 36, 113, 35, 1, 188, 96, 3, 0, 16,
-        84, 1, 188, 96, 3, 0, 16, 85, 1, 188, 96, 3, 0, 16, 86, 1, 188, 96,
-        3, 0, 16, 87, 1, 188, 96, 15, 0, 32, 23, 1, 6, 193, 7, 0, 23, 161, 1,
-        130, 94, 132, 2, 224, 23, 1, 7, 65, 7, 0, 23, 161, 0, 184, 94, 135,
-        0, 55, 161, 1, 128, 222, 135, 0, 0, 22, 0, 2, 222, 2, 240, 0, 0, 2,
-        133, 192, 55, 0, 0, 2, 0, 2, 94, 2, 240, 17, 57, 2, 134, 64, 55, 0,
-        12, 178, 0, 224, 2, 27, 0, 32, 134, 1, 188, 96, 3, 1, 11, 128, 3, 134,
-        222, 2, 240, 12, 75, 2, 135, 192, 55, 0, 12, 75, 0, 2, 94, 2, 240, 22,
-        235, 3, 191, 222, 2, 240, 0, 16, 1, 184, 96, 10, 4, 144, 36, 3, 170,
-        94, 2, 240, 12, 190, 1, 88, 96, 3, 0, 16, 42, 1, 188, 96, 3, 2, 144,
-        4, 0, 176, 64, 19, 0, 24, 0, 1, 131, 96, 2, 9, 16, 72, 1, 128, 96, 0,
-        255, 167, 253, 0, 2, 94, 2, 240, 17, 57, 3, 133, 94, 2, 240, 12, 194,
-        1, 188, 98, 15, 0, 17, 224, 1, 188, 96, 15, 1, 49, 232, 0, 176, 71,
-        163, 0, 24, 0, 1, 188, 96, 15, 0, 17, 232, 1, 188, 96, 3, 1, 87, 161,
-        0, 232, 94, 135, 0, 55, 161, 0, 104, 222, 135, 0, 12, 201, 1, 188, 96,
-        3, 2, 144, 4, 0, 176, 64, 19, 0, 24, 0, 1, 188, 96, 3, 1, 49, 236, 0,
-        176, 71, 179, 0, 24, 0, 1, 188, 96, 3, 0, 17, 236, 3, 36, 222, 2, 240,
-        7, 22, 1, 134, 96, 6, 245, 119, 171, 0, 2, 94, 2, 240, 12, 215, 1, 128,
-        96, 6, 16, 48, 129, 0, 176, 94, 135, 0, 23, 161, 1, 128, 96, 2, 16,
-        48, 129, 3, 191, 222, 2, 240, 7, 22, 2, 6, 1, 171, 0, 12, 217, 1, 128,
-        96, 1, 134, 12, 48, 1, 188, 97, 3, 0, 16, 128, 0, 176, 66, 3, 0, 24,
-        0, 0, 110, 224, 3, 0, 44, 220, 3, 80, 94, 2, 240, 12, 223, 0, 1, 94,
-        2, 240, 0, 0, 3, 191, 222, 2, 240, 3, 137, 1, 132, 96, 2, 245, 151,
-        172, 1, 188, 96, 3, 0, 10, 187, 0, 168, 65, 35, 4, 240, 72, 1, 130,
-        96, 2, 9, 16, 72, 2, 6, 222, 175, 0, 12, 230, 3, 213, 222, 2, 240, 12,
-        230, 3, 80, 222, 2, 240, 12, 228, 1, 188, 96, 3, 0, 16, 180, 2, 132,
-        199, 131, 0, 12, 233, 1, 188, 96, 11, 0, 17, 224, 1, 142, 96, 2, 245,
-        119, 171, 0, 2, 222, 2, 240, 0, 0, 3, 162, 222, 2, 240, 0, 184, 2, 188,
-        66, 135, 0, 12, 242, 1, 188, 96, 3, 0, 55, 164, 1, 188, 96, 3, 31, 247,
-        163, 1, 20, 0, 99, 0, 23, 162, 0, 136, 96, 6, 244, 87, 162, 3, 191,
-        222, 2, 240, 12, 247, 0, 136, 96, 7, 1, 23, 164, 1, 188, 99, 255, 0,
-        23, 163, 1, 20, 0, 99, 0, 23, 162, 0, 224, 94, 139, 1, 23, 162, 0, 136,
-        96, 6, 244, 87, 162, 1, 188, 96, 19, 27, 144, 101, 1, 188, 96, 27, 24,
-        80, 100, 1, 188, 96, 3, 0, 23, 165, 0, 32, 194, 134, 244, 141, 1, 0,
-        224, 65, 151, 6, 208, 101, 0, 224, 65, 147, 1, 240, 100, 0, 224, 94,
-        151, 0, 55, 165, 0, 136, 94, 147, 0, 55, 164, 0, 32, 94, 146, 244, 109,
-        32, 3, 191, 222, 2, 240, 12, 250, 0, 104, 222, 146, 244, 77, 6, 0, 104,
-        0, 131, 0, 109, 6, 3, 160, 222, 2, 240, 13, 6, 0, 32, 193, 35, 22, 12,
-        251, 0, 2, 94, 2, 240, 12, 215, 0, 109, 222, 147, 32, 13, 28, 2, 3,
-        0, 199, 0, 13, 16, 0, 109, 222, 151, 0, 141, 16, 1, 188, 96, 3, 0, 22,
-        8, 1, 188, 96, 3, 0, 22, 9, 1, 188, 96, 3, 0, 22, 10, 1, 188, 96, 3,
-        0, 22, 11, 1, 188, 96, 3, 0, 22, 12, 1, 188, 96, 3, 0, 22, 13, 1, 188,
-        96, 3, 0, 22, 14, 2, 0, 90, 195, 0, 13, 27, 2, 60, 90, 159, 0, 13, 27,
-        0, 104, 0, 131, 0, 109, 27, 3, 133, 222, 2, 240, 0, 184, 3, 133, 94,
-        2, 240, 0, 184, 3, 162, 222, 2, 240, 0, 184, 3, 163, 222, 2, 240, 0,
-        184, 3, 151, 222, 2, 240, 0, 184, 0, 176, 65, 151, 0, 16, 96, 1, 145,
-        96, 10, 132, 244, 39, 3, 191, 222, 2, 240, 3, 111, 1, 128, 96, 2, 214,
-        22, 176, 0, 176, 94, 147, 0, 16, 161, 1, 131, 96, 2, 247, 247, 191,
-        1, 188, 96, 3, 0, 48, 67, 3, 191, 222, 2, 240, 12, 251, 0, 104, 128,
-        131, 0, 96, 184, 3, 191, 222, 2, 240, 12, 134, 2, 131, 194, 31, 0, 0,
-        2, 0, 176, 94, 135, 0, 23, 161, 3, 208, 222, 2, 240, 6, 42, 1, 188,
-        96, 3, 4, 16, 66, 3, 158, 222, 2, 240, 0, 16, 0, 176, 94, 63, 0, 17,
-        69, 1, 188, 96, 3, 0, 23, 143, 0, 176, 94, 67, 0, 23, 133, 0, 176, 94,
-        15, 0, 23, 144, 0, 2, 94, 2, 240, 12, 215, 3, 191, 222, 2, 240, 0, 16,
-        0, 109, 64, 51, 5, 139, 138, 3, 179, 94, 2, 240, 13, 50, 0, 104, 94,
-        79, 2, 141, 115, 0, 224, 2, 103, 0, 32, 153, 3, 191, 222, 2, 240, 13,
-        115, 0, 104, 94, 79, 2, 141, 115, 2, 128, 48, 183, 0, 13, 54, 0, 224,
-        2, 95, 0, 32, 151, 1, 128, 96, 5, 133, 172, 45, 1, 134, 96, 2, 245,
-        183, 173, 1, 130, 96, 2, 245, 215, 174, 1, 188, 96, 3, 0, 10, 181, 3,
-        159, 94, 2, 240, 13, 167, 3, 158, 222, 2, 240, 13, 72, 3, 33, 222, 2,
-        240, 13, 72, 0, 224, 2, 111, 0, 32, 155, 0, 2, 94, 2, 240, 12, 215,
-        1, 134, 96, 2, 9, 16, 72, 0, 168, 65, 35, 1, 48, 72, 1, 188, 96, 3,
-        2, 16, 66, 2, 128, 68, 31, 0, 13, 71, 0, 176, 94, 63, 0, 17, 69, 1,
-        188, 96, 3, 0, 23, 143, 0, 176, 94, 67, 0, 23, 133, 0, 176, 94, 15,
-        0, 23, 144, 3, 191, 222, 2, 240, 13, 72, 0, 160, 68, 182, 240, 113,
-        69, 3, 159, 94, 2, 240, 13, 167, 2, 130, 0, 195, 0, 13, 115, 2, 0, 48,
-        111, 0, 13, 81, 0, 232, 94, 122, 145, 247, 161, 0, 109, 222, 122, 145,
-        237, 78, 0, 232, 82, 62, 243, 215, 161, 0, 109, 94, 133, 131, 13, 81,
-        0, 224, 48, 155, 0, 44, 38, 3, 191, 222, 2, 240, 9, 218, 0, 176, 0,
-        115, 0, 23, 161, 0, 224, 94, 134, 176, 23, 161, 0, 225, 94, 122, 244,
-        55, 158, 0, 225, 222, 119, 0, 23, 157, 0, 225, 222, 115, 0, 23, 156,
-        0, 224, 222, 111, 0, 23, 155, 3, 158, 222, 2, 240, 13, 95, 0, 110, 94,
-        110, 146, 77, 167, 0, 109, 94, 110, 146, 77, 95, 0, 110, 94, 114, 146,
-        45, 167, 0, 109, 94, 114, 146, 45, 95, 0, 110, 94, 118, 146, 13, 167,
-        0, 109, 94, 118, 146, 13, 95, 0, 109, 222, 122, 145, 237, 167, 2, 0,
-        48, 111, 0, 13, 100, 0, 176, 94, 123, 0, 12, 40, 0, 176, 94, 119, 0,
-        12, 41, 0, 176, 94, 115, 0, 12, 42, 0, 176, 94, 111, 0, 12, 43, 0, 176,
-        68, 103, 0, 8, 45, 0, 176, 68, 107, 0, 8, 44, 0, 176, 68, 111, 0, 8,
-        43, 0, 176, 68, 115, 0, 8, 42, 0, 104, 160, 182, 35, 45, 95, 0, 233,
-        32, 182, 243, 215, 158, 0, 233, 160, 178, 243, 183, 157, 0, 233, 160,
-        174, 243, 151, 156, 0, 232, 160, 170, 243, 119, 155, 0, 225, 94, 122,
-        145, 247, 161, 0, 176, 94, 135, 0, 17, 25, 0, 225, 222, 118, 146, 17,
-        26, 0, 225, 222, 114, 146, 49, 27, 0, 224, 222, 110, 146, 81, 28, 0,
-        104, 222, 134, 35, 45, 109, 3, 30, 222, 2, 240, 13, 167, 3, 159, 94,
-        2, 240, 13, 167, 0, 104, 94, 79, 2, 141, 167, 3, 51, 94, 2, 240, 13,
-        167, 1, 188, 96, 27, 6, 208, 101, 1, 188, 96, 3, 0, 183, 164, 0, 2,
-        94, 2, 240, 1, 108, 2, 0, 48, 111, 0, 13, 126, 0, 104, 94, 147, 0, 173,
-        126, 0, 224, 48, 159, 0, 44, 39, 3, 191, 222, 2, 240, 23, 159, 0, 104,
-        222, 147, 0, 173, 167, 2, 7, 193, 151, 0, 13, 132, 1, 60, 90, 7, 0,
-        23, 187, 1, 60, 90, 11, 0, 23, 161, 1, 56, 90, 7, 0, 12, 28, 3, 191,
-        222, 2, 240, 13, 135, 1, 56, 90, 7, 0, 23, 187, 1, 56, 90, 11, 0, 23,
-        161, 1, 60, 90, 3, 0, 12, 28, 0, 176, 94, 135, 0, 12, 29, 0, 176, 94,
-        239, 0, 23, 136, 1, 132, 94, 134, 242, 151, 148, 0, 104, 48, 79, 255,
-        237, 142, 2, 0, 94, 135, 0, 13, 142, 0, 136, 48, 79, 0, 113, 38, 0,
-        144, 48, 79, 1, 177, 40, 0, 104, 48, 83, 255, 237, 146, 0, 176, 68,
-        103, 0, 12, 21, 2, 0, 94, 135, 0, 13, 146, 0, 224, 68, 101, 130, 140,
-        21, 1, 135, 222, 134, 36, 145, 36, 2, 6, 128, 243, 0, 13, 150, 1, 132,
-        96, 2, 242, 151, 148, 1, 135, 224, 2, 36, 145, 36, 2, 0, 48, 111, 0,
-        13, 167, 0, 224, 48, 143, 0, 44, 35, 2, 134, 128, 243, 0, 13, 154, 2,
-        132, 94, 83, 0, 13, 165, 0, 176, 48, 119, 0, 23, 161, 0, 2, 94, 2, 240,
-        14, 50, 2, 128, 94, 139, 0, 13, 165, 0, 232, 94, 105, 131, 151, 161,
-        0, 104, 94, 133, 131, 45, 161, 0, 224, 48, 151, 0, 44, 37, 3, 191, 222,
-        2, 240, 13, 165, 0, 224, 48, 147, 0, 44, 36, 1, 188, 96, 3, 0, 12, 27,
-        1, 188, 96, 7, 0, 16, 67, 3, 191, 222, 2, 240, 12, 187, 0, 232, 94,
-        105, 131, 140, 25, 3, 191, 222, 2, 240, 23, 159, 3, 176, 94, 2, 240,
-        7, 214, 3, 191, 222, 2, 240, 10, 16, 3, 48, 94, 2, 240, 11, 137, 3,
-        191, 222, 2, 240, 7, 214, 3, 176, 94, 2, 240, 13, 174, 3, 51, 94, 2,
-        240, 11, 137, 3, 191, 222, 2, 240, 13, 191, 0, 176, 82, 35, 0, 17, 242,
-        0, 176, 82, 39, 0, 17, 243, 0, 176, 82, 43, 0, 17, 244, 1, 188, 96,
-        3, 0, 145, 245, 1, 188, 96, 3, 8, 16, 66, 0, 176, 0, 91, 0, 17, 240,
-        3, 191, 222, 2, 240, 7, 214, 1, 56, 82, 63, 0, 23, 161, 2, 6, 94, 83,
-        0, 13, 184, 1, 56, 82, 75, 0, 23, 161, 0, 104, 222, 135, 0, 141, 187,
-        3, 176, 94, 2, 240, 7, 214, 3, 191, 222, 2, 240, 10, 16, 0, 104, 222,
-        79, 2, 13, 190, 2, 7, 129, 171, 0, 13, 190, 1, 128, 96, 6, 242, 151,
-        148, 3, 176, 94, 2, 240, 7, 214, 2, 0, 0, 243, 0, 13, 196, 2, 6, 222,
-        83, 0, 13, 196, 1, 24, 94, 131, 0, 23, 161, 0, 104, 222, 135, 0, 173,
-        196, 1, 188, 96, 11, 2, 81, 66, 2, 0, 82, 23, 0, 11, 137, 3, 191, 222,
-        2, 240, 10, 16, 1, 188, 96, 3, 0, 17, 131, 1, 188, 96, 3, 0, 17, 130,
-        1, 25, 64, 47, 0, 23, 161, 0, 104, 94, 135, 0, 11, 133, 1, 153, 222,
-        134, 32, 17, 0, 3, 49, 94, 2, 240, 11, 133, 0, 160, 94, 59, 0, 151,
-        162, 0, 32, 94, 78, 244, 75, 133, 1, 132, 96, 2, 9, 16, 72, 3, 191,
-        222, 2, 240, 11, 133, 3, 176, 94, 2, 240, 13, 211, 0, 2, 94, 2, 240,
-        11, 140, 3, 191, 222, 2, 240, 11, 133, 0, 104, 222, 79, 4, 45, 215,
-        0, 176, 82, 51, 0, 23, 159, 0, 176, 82, 47, 0, 16, 235, 2, 129, 82,
-        47, 0, 7, 193, 0, 224, 2, 171, 0, 32, 170, 2, 129, 82, 47, 0, 11, 99,
-        3, 41, 94, 2, 240, 13, 221, 2, 3, 222, 179, 0, 13, 221, 1, 145, 96,
-        26, 132, 244, 39, 1, 131, 224, 2, 245, 151, 172, 2, 8, 82, 47, 0, 7,
-        214, 3, 191, 222, 2, 240, 10, 16, 1, 188, 96, 3, 0, 16, 103, 1, 188,
-        96, 3, 0, 16, 70, 1, 128, 224, 6, 9, 48, 73, 2, 130, 193, 31, 0, 13,
-        231, 1, 188, 96, 63, 31, 240, 101, 1, 188, 96, 3, 0, 22, 128, 0, 232,
-        65, 151, 0, 48, 101, 0, 105, 193, 151, 0, 13, 228, 1, 188, 96, 11, 0,
-        23, 148, 1, 188, 96, 3, 0, 23, 171, 1, 188, 96, 3, 0, 23, 172, 1, 188,
-        96, 3, 0, 23, 173, 1, 188, 96, 3, 0, 23, 174, 1, 188, 96, 3, 0, 23,
-        191, 1, 188, 99, 255, 31, 247, 181, 1, 188, 96, 3, 0, 32, 32, 1, 188,
-        96, 3, 0, 23, 161, 0, 2, 94, 2, 240, 1, 33, 1, 56, 64, 103, 0, 0, 40,
-        1, 28, 64, 103, 0, 0, 41, 1, 188, 96, 3, 0, 80, 73, 1, 188, 96, 3, 0,
-        23, 167, 1, 188, 96, 3, 0, 23, 168, 1, 188, 96, 3, 0, 23, 169, 1, 188,
-        96, 3, 0, 23, 172, 1, 188, 96, 3, 0, 23, 173, 1, 130, 224, 6, 15, 16,
-        120, 2, 6, 193, 227, 0, 13, 250, 0, 104, 128, 167, 0, 13, 253, 3, 191,
-        222, 2, 240, 13, 254, 0, 104, 128, 167, 0, 141, 254, 1, 188, 96, 19,
-        2, 96, 0, 1, 188, 96, 35, 11, 32, 1, 1, 188, 98, 55, 22, 128, 2, 1,
-        188, 96, 3, 0, 0, 3, 1, 188, 96, 3, 0, 0, 4, 1, 188, 96, 83, 5, 0, 5,
-        1, 188, 96, 27, 4, 48, 97, 1, 188, 96, 23, 2, 80, 96, 1, 188, 96, 3,
-        0, 8, 34, 0, 176, 94, 15, 0, 23, 133, 0, 160, 68, 182, 240, 113, 69,
-        3, 191, 222, 2, 240, 12, 109, 1, 131, 224, 6, 15, 16, 120, 1, 136, 94,
-        92, 254, 199, 246, 1, 188, 96, 31, 30, 144, 7, 1, 188, 96, 3, 1, 144,
-        8, 1, 136, 96, 6, 0, 144, 4, 3, 134, 222, 2, 240, 12, 75, 3, 5, 222,
-        2, 240, 14, 15, 3, 134, 222, 2, 240, 12, 75, 3, 133, 222, 2, 240, 14,
-        17, 0, 176, 94, 135, 0, 23, 161, 0, 110, 224, 3, 0, 46, 21, 3, 134,
-        222, 2, 240, 12, 75, 0, 110, 192, 20, 111, 238, 24, 1, 188, 96, 7, 0,
-        16, 66, 0, 2, 222, 2, 240, 0, 0, 3, 33, 94, 2, 240, 14, 29, 0, 224,
-        32, 74, 244, 40, 18, 0, 176, 32, 75, 0, 23, 139, 3, 191, 222, 2, 240,
-        14, 37, 2, 129, 80, 199, 0, 14, 34, 1, 28, 80, 159, 0, 23, 139, 0, 224,
-        94, 46, 244, 55, 139, 1, 156, 94, 46, 132, 244, 39, 3, 191, 222, 2,
-        240, 14, 37, 1, 30, 80, 159, 0, 23, 139, 0, 224, 94, 46, 244, 55, 139,
-        1, 158, 94, 46, 132, 244, 39, 0, 2, 222, 2, 240, 0, 0, 0, 104, 0, 167,
-        0, 142, 43, 1, 2, 192, 39, 0, 8, 33, 0, 104, 128, 167, 0, 174, 49, 0,
-        224, 32, 135, 0, 40, 33, 0, 2, 222, 2, 240, 0, 0, 1, 188, 96, 3, 0,
-        40, 33, 1, 188, 64, 43, 0, 23, 161, 0, 152, 94, 135, 1, 23, 161, 0,
-        152, 64, 43, 1, 23, 162, 0, 106, 222, 138, 244, 46, 49, 1, 188, 96,
-        3, 0, 136, 33, 0, 2, 222, 2, 240, 0, 0, 1, 188, 96, 3, 0, 23, 162, 0,
-        104, 1, 139, 0, 14, 72, 0, 144, 1, 139, 0, 119, 162, 1, 128, 96, 2,
-        244, 55, 161, 0, 110, 94, 134, 244, 78, 72, 2, 7, 193, 151, 0, 14, 58,
-        1, 56, 90, 7, 0, 23, 163, 3, 191, 222, 2, 240, 14, 59, 1, 60, 90, 3,
-        0, 23, 163, 0, 232, 94, 143, 0, 151, 163, 0, 232, 94, 138, 244, 55,
-        162, 0, 106, 94, 138, 244, 110, 72, 0, 208, 65, 151, 0, 48, 100, 0,
-        224, 94, 139, 0, 183, 163, 0, 224, 65, 146, 244, 112, 100, 0, 216, 65,
-        147, 0, 48, 100, 2, 7, 193, 147, 0, 14, 69, 1, 60, 88, 3, 0, 23, 161,
-        3, 191, 222, 2, 240, 14, 70, 1, 56, 88, 3, 0, 23, 161, 0, 160, 1, 139,
-        0, 247, 162, 0, 144, 94, 134, 244, 87, 162, 0, 2, 222, 2, 240, 0, 0,
-        0, 176, 90, 3, 0, 16, 31, 0, 176, 90, 7, 0, 16, 32, 0, 176, 90, 11,
-        0, 16, 33, 1, 128, 96, 7, 0, 16, 29, 2, 128, 64, 119, 0, 14, 77, 0,
-        2, 222, 2, 240, 0, 0, 1, 135, 224, 2, 245, 119, 171, 3, 145, 94, 2,
-        240, 0, 2, 0, 32, 227, 254, 9, 0, 2, 2, 0, 66, 31, 0, 0, 2, 0, 104,
-        194, 243, 0, 0, 2, 2, 132, 69, 35, 0, 0, 2, 0, 104, 192, 23, 0, 0, 2,
-        0, 104, 171, 151, 0, 0, 2, 2, 129, 94, 83, 0, 14, 100, 2, 131, 65, 31,
-        0, 14, 90, 2, 129, 222, 83, 0, 14, 117, 1, 188, 96, 3, 0, 17, 81, 1,
-        188, 96, 3, 0, 17, 82, 1, 188, 98, 3, 0, 17, 83, 1, 188, 96, 3, 0, 81,
-        80, 1, 137, 96, 6, 242, 151, 148, 1, 188, 96, 231, 0, 16, 119, 1, 188,
-        96, 3, 0, 16, 118, 1, 188, 96, 3, 17, 23, 163, 0, 2, 94, 2, 240, 1,
-        46, 3, 191, 222, 2, 240, 0, 2, 2, 128, 197, 67, 0, 0, 2, 1, 240, 197,
-        71, 0, 17, 86, 1, 7, 197, 71, 0, 23, 161, 1, 240, 197, 74, 244, 49,
-        85, 0, 176, 69, 87, 0, 16, 119, 0, 176, 69, 91, 0, 16, 118, 1, 188,
-        96, 3, 14, 151, 163, 0, 2, 94, 2, 240, 1, 46, 0, 176, 69, 87, 0, 12,
-        7, 0, 176, 69, 91, 0, 12, 6, 1, 188, 96, 3, 0, 17, 85, 1, 188, 96, 3,
-        0, 17, 86, 0, 144, 48, 27, 0, 204, 6, 0, 176, 48, 31, 0, 23, 161, 1,
-        173, 94, 133, 128, 204, 6, 1, 137, 96, 10, 242, 151, 148, 1, 188, 96,
-        3, 8, 16, 71, 3, 146, 222, 2, 240, 0, 2, 2, 4, 128, 191, 0, 14, 122,
-        1, 188, 99, 255, 31, 231, 243, 1, 188, 97, 255, 31, 232, 14, 3, 191,
-        222, 2, 240, 14, 181, 1, 134, 96, 2, 245, 151, 172, 2, 4, 193, 7, 0,
-        0, 2, 3, 158, 222, 2, 240, 14, 129, 3, 184, 222, 2, 240, 0, 2, 0, 176,
-        1, 127, 0, 23, 161, 0, 104, 222, 132, 11, 192, 2, 3, 191, 222, 2, 240,
-        14, 131, 2, 3, 222, 83, 0, 0, 2, 0, 104, 222, 35, 0, 14, 139, 0, 104,
-        48, 79, 255, 238, 134, 2, 7, 196, 147, 0, 14, 140, 0, 104, 48, 83, 255,
-        224, 2, 0, 104, 48, 83, 255, 238, 138, 0, 104, 48, 87, 0, 14, 139, 0,
-        107, 196, 101, 130, 174, 140, 3, 191, 222, 2, 240, 0, 2, 2, 132, 94,
-        83, 0, 0, 2, 2, 135, 196, 147, 0, 0, 2, 2, 130, 222, 187, 0, 14, 142,
-        0, 104, 42, 231, 0, 14, 145, 0, 104, 43, 111, 255, 224, 2, 0, 176, 42,
-        215, 0, 23, 161, 0, 109, 222, 133, 85, 0, 2, 0, 176, 1, 47, 0, 23, 163,
-        0, 224, 94, 140, 9, 87, 163, 2, 130, 222, 187, 0, 14, 149, 0, 104, 42,
-        231, 0, 14, 150, 0, 224, 94, 141, 91, 119, 163, 0, 176, 68, 11, 0, 23,
-        161, 0, 176, 68, 15, 0, 23, 162, 0, 233, 94, 134, 35, 55, 161, 0, 232,
-        222, 138, 35, 87, 162, 0, 233, 94, 134, 244, 103, 243, 0, 232, 222,
-        139, 0, 8, 14, 0, 176, 68, 31, 0, 24, 0, 0, 136, 68, 35, 1, 87, 163,
-        0, 144, 68, 35, 0, 215, 164, 0, 110, 94, 138, 244, 140, 146, 0, 104,
-        129, 111, 0, 14, 163, 0, 104, 94, 35, 0, 46, 181, 0, 104, 0, 39, 0,
-        46, 181, 0, 232, 94, 35, 0, 55, 161, 0, 105, 222, 135, 0, 14, 166, 0,
-        224, 94, 132, 1, 55, 161, 1, 60, 1, 111, 0, 23, 165, 0, 104, 222, 151,
-        0, 14, 173, 1, 56, 1, 111, 0, 23, 165, 0, 104, 94, 151, 0, 14, 177,
-        0, 232, 94, 151, 0, 55, 161, 0, 104, 94, 135, 0, 14, 181, 3, 191, 222,
-        2, 240, 14, 177, 0, 232, 94, 151, 0, 55, 165, 0, 128, 222, 148, 1, 55,
-        165, 0, 224, 94, 134, 13, 183, 161, 0, 104, 94, 135, 0, 14, 181, 0,
-        225, 31, 206, 244, 103, 243, 0, 224, 160, 58, 244, 136, 14, 0, 232,
-        94, 135, 0, 55, 161, 0, 106, 94, 135, 0, 14, 177, 1, 188, 97, 3, 0,
-        17, 35, 0, 105, 32, 59, 0, 14, 185, 1, 128, 224, 6, 242, 151, 148, 3,
-        191, 222, 2, 240, 14, 187, 1, 128, 224, 2, 242, 151, 148, 3, 191, 222,
-        2, 240, 0, 2, 0, 104, 65, 39, 0, 14, 200, 2, 132, 69, 35, 0, 14, 188,
-        0, 104, 0, 167, 0, 174, 192, 0, 104, 0, 167, 0, 206, 192, 0, 104, 128,
-        167, 1, 14, 195, 0, 176, 68, 103, 0, 23, 161, 0, 232, 68, 102, 244,
-        55, 162, 0, 109, 94, 139, 0, 78, 193, 3, 146, 222, 2, 240, 12, 146,
-        0, 2, 94, 2, 240, 19, 220, 0, 2, 94, 2, 240, 16, 64, 0, 2, 94, 2, 240,
-        16, 59, 0, 2, 94, 2, 240, 16, 75, 1, 188, 96, 15, 0, 17, 232, 3, 30,
-        222, 2, 240, 14, 207, 1, 188, 96, 3, 0, 16, 92, 1, 188, 96, 3, 0, 144,
-        93, 1, 188, 96, 83, 4, 16, 94, 1, 188, 96, 3, 0, 16, 95, 3, 191, 222,
-        2, 240, 14, 211, 1, 188, 96, 11, 0, 16, 92, 1, 188, 96, 3, 0, 144, 93,
-        1, 188, 96, 67, 4, 16, 94, 1, 188, 96, 3, 0, 16, 95, 1, 188, 96, 3,
-        0, 12, 21, 1, 188, 96, 3, 0, 128, 32, 2, 133, 0, 191, 0, 15, 97, 0,
-        176, 31, 207, 0, 17, 81, 0, 176, 32, 59, 0, 17, 82, 0, 110, 31, 206,
-        42, 142, 220, 0, 104, 160, 59, 0, 14, 220, 0, 224, 31, 206, 35, 40,
-        15, 3, 191, 222, 2, 240, 14, 253, 0, 176, 68, 103, 0, 8, 15, 0, 233,
-        31, 206, 42, 145, 81, 0, 232, 160, 59, 0, 17, 82, 1, 188, 97, 255, 31,
-        112, 119, 1, 188, 99, 255, 31, 240, 118, 1, 188, 96, 3, 17, 151, 163,
-        0, 2, 94, 2, 240, 1, 46, 0, 176, 69, 75, 0, 16, 119, 0, 176, 69, 71,
-        0, 16, 118, 1, 188, 96, 3, 15, 23, 163, 0, 2, 94, 2, 240, 1, 46, 1,
-        188, 96, 47, 25, 144, 101, 0, 176, 69, 87, 0, 22, 145, 0, 176, 69, 91,
-        0, 22, 146, 0, 176, 68, 11, 0, 22, 147, 0, 176, 68, 15, 0, 22, 148,
-        1, 188, 99, 255, 31, 241, 82, 1, 188, 99, 255, 31, 241, 81, 1, 188,
-        96, 3, 0, 17, 85, 1, 188, 96, 3, 0, 17, 86, 1, 172, 96, 127, 2, 144,
-        117, 2, 135, 65, 215, 0, 14, 241, 0, 176, 65, 219, 0, 3, 177, 0, 176,
-        65, 223, 0, 3, 178, 0, 176, 68, 103, 0, 8, 45, 0, 176, 68, 107, 0, 8,
-        44, 0, 176, 68, 111, 0, 8, 43, 0, 176, 68, 115, 0, 8, 42, 0, 225, 68,
-        100, 254, 108, 17, 0, 224, 196, 105, 1, 204, 18, 1, 188, 96, 3, 2, 49,
-        80, 0, 176, 69, 67, 0, 24, 0, 0, 104, 96, 3, 0, 14, 253, 1, 188, 96,
-        3, 0, 16, 64, 0, 0, 128, 0, 0, 0, 0, 2, 4, 128, 191, 0, 15, 1, 3, 18,
-        222, 2, 240, 14, 253, 0, 104, 197, 87, 0, 15, 9, 1, 188, 96, 47, 25,
-        144, 101, 0, 176, 90, 71, 0, 17, 85, 0, 176, 90, 75, 0, 17, 86, 0, 176,
-        90, 79, 0, 17, 2, 0, 176, 90, 83, 0, 17, 3, 1, 188, 96, 3, 0, 23, 167,
-        1, 188, 96, 3, 0, 23, 168, 1, 188, 96, 3, 0, 0, 102, 1, 172, 96, 127,
-        15, 16, 117, 2, 135, 65, 215, 0, 15, 11, 0, 176, 65, 219, 0, 17, 81,
-        0, 176, 65, 223, 0, 17, 82, 0, 104, 69, 71, 0, 15, 18, 0, 233, 31, 206,
-        42, 135, 243, 0, 232, 160, 59, 0, 8, 14, 1, 134, 96, 6, 245, 151, 172,
-        1, 188, 96, 3, 0, 16, 119, 1, 188, 96, 3, 0, 16, 118, 1, 188, 96, 3,
-        15, 23, 163, 0, 2, 94, 2, 240, 1, 46, 1, 188, 96, 3, 0, 17, 80, 2, 132,
-        69, 67, 0, 15, 23, 2, 7, 193, 227, 0, 15, 24, 0, 176, 68, 103, 0, 23,
-        161, 0, 104, 94, 134, 35, 47, 26, 1, 130, 224, 6, 15, 16, 120, 2, 6,
-        193, 227, 0, 15, 28, 1, 188, 96, 3, 0, 64, 32, 1, 188, 96, 3, 0, 0,
-        102, 1, 134, 96, 6, 32, 17, 0, 1, 188, 96, 99, 0, 16, 123, 1, 188, 96,
-        27, 0, 16, 122, 1, 172, 96, 127, 2, 144, 117, 2, 135, 65, 215, 0, 15,
-        35, 0, 233, 65, 216, 118, 55, 156, 0, 232, 193, 220, 118, 87, 155, 0,
-        176, 48, 27, 0, 23, 161, 0, 128, 222, 114, 244, 55, 157, 0, 176, 65,
-        183, 0, 23, 158, 0, 128, 222, 110, 244, 55, 156, 0, 225, 94, 118, 13,
-        183, 157, 0, 224, 222, 115, 0, 23, 156, 1, 125, 94, 122, 243, 183, 161,
-        1, 125, 94, 118, 243, 151, 162, 0, 144, 94, 115, 1, 87, 163, 0, 225,
-        32, 182, 244, 49, 25, 0, 225, 160, 178, 244, 81, 26, 0, 225, 160, 174,
-        244, 113, 27, 0, 224, 160, 171, 0, 17, 28, 0, 225, 13, 170, 244, 35,
-        106, 0, 224, 141, 174, 244, 67, 107, 0, 176, 68, 31, 0, 24, 0, 0, 136,
-        68, 35, 1, 87, 163, 0, 144, 68, 35, 0, 215, 164, 0, 176, 68, 11, 0,
-        23, 161, 0, 176, 68, 15, 0, 23, 162, 0, 233, 94, 134, 35, 55, 161, 0,
-        232, 222, 138, 35, 87, 162, 0, 105, 222, 139, 0, 15, 67, 0, 225, 68,
-        10, 244, 113, 2, 0, 224, 196, 14, 244, 145, 3, 0, 232, 94, 35, 0, 55,
-        136, 0, 105, 222, 35, 0, 15, 56, 0, 232, 0, 39, 0, 55, 136, 3, 191,
-        222, 2, 240, 15, 56, 1, 134, 96, 2, 32, 17, 0, 1, 188, 96, 3, 0, 64,
-        32, 0, 233, 48, 70, 35, 55, 161, 0, 232, 176, 74, 35, 87, 162, 0, 104,
-        222, 139, 0, 15, 82, 1, 188, 96, 79, 17, 23, 163, 0, 109, 222, 134,
-        244, 111, 82, 1, 188, 96, 3, 0, 16, 64, 1, 188, 96, 3, 0, 16, 93, 1,
-        130, 96, 6, 11, 240, 95, 0, 208, 94, 135, 0, 113, 52, 1, 225, 222, 138,
-        38, 145, 53, 1, 188, 99, 3, 0, 17, 51, 0, 0, 128, 0, 0, 0, 0, 1, 130,
-        96, 2, 11, 240, 95, 2, 0, 222, 83, 0, 15, 100, 1, 128, 224, 2, 242,
-        151, 148, 0, 2, 94, 2, 240, 16, 62, 1, 188, 96, 3, 0, 16, 64, 3, 191,
-        222, 2, 240, 15, 88, 2, 0, 128, 195, 0, 15, 90, 0, 224, 68, 100, 9,
-        87, 161, 3, 191, 222, 2, 240, 15, 100, 0, 176, 1, 43, 0, 7, 243, 1,
-        188, 96, 3, 0, 8, 14, 0, 176, 31, 207, 0, 17, 81, 1, 188, 96, 3, 0,
-        17, 82, 1, 188, 96, 3, 0, 49, 80, 2, 128, 69, 67, 0, 15, 95, 3, 191,
-        222, 2, 240, 15, 30, 1, 188, 96, 3, 0, 16, 64, 0, 176, 1, 47, 0, 23,
-        161, 0, 224, 1, 42, 244, 49, 9, 0, 0, 128, 0, 0, 0, 0, 3, 86, 94, 2,
-        240, 15, 103, 0, 2, 94, 2, 240, 1, 180, 0, 176, 1, 47, 0, 17, 9, 1,
-        188, 97, 207, 12, 16, 92, 1, 188, 96, 3, 0, 16, 93, 1, 188, 97, 207,
-        1, 240, 94, 1, 188, 96, 59, 10, 240, 95, 0, 2, 94, 2, 240, 16, 71, 0,
-        2, 94, 2, 240, 16, 78, 0, 2, 94, 2, 240, 16, 68, 0, 109, 128, 167, 0,
-        140, 146, 0, 224, 68, 103, 4, 119, 161, 0, 104, 222, 134, 35, 47, 113,
-        3, 191, 222, 2, 240, 12, 146, 1, 136, 94, 6, 16, 208, 134, 1, 2, 94,
-        7, 0, 23, 161, 1, 130, 94, 134, 16, 208, 134, 0, 2, 222, 2, 240, 0,
-        0, 0, 176, 0, 71, 0, 16, 134, 1, 8, 32, 71, 0, 23, 129, 1, 56, 82, 3,
-        0, 23, 128, 1, 2, 192, 39, 0, 23, 166, 0, 2, 94, 2, 240, 20, 245, 0,
-        104, 32, 71, 0, 79, 126, 0, 176, 84, 7, 0, 23, 128, 0, 2, 94, 2, 240,
-        15, 115, 0, 104, 32, 71, 0, 47, 134, 0, 104, 160, 71, 0, 15, 130, 2,
-        26, 84, 7, 0, 15, 134, 1, 3, 192, 39, 0, 23, 161, 3, 191, 222, 2, 240,
-        15, 133, 1, 6, 192, 59, 0, 23, 161, 1, 130, 94, 134, 16, 208, 134, 0,
-        2, 222, 2, 240, 0, 0, 0, 176, 84, 19, 0, 23, 161, 0, 104, 222, 79, 22,
-        175, 138, 0, 176, 84, 19, 0, 23, 161, 2, 0, 222, 7, 0, 15, 146, 0, 176,
-        65, 139, 0, 16, 101, 1, 188, 96, 3, 1, 215, 161, 0, 104, 222, 79, 22,
-        175, 143, 1, 188, 96, 3, 2, 151, 161, 0, 2, 94, 2, 240, 21, 8, 0, 224,
-        94, 132, 0, 247, 161, 3, 191, 222, 2, 240, 15, 151, 2, 4, 128, 243,
-        0, 15, 151, 2, 2, 94, 7, 0, 15, 151, 2, 128, 94, 7, 0, 15, 151, 0, 144,
-        0, 27, 0, 55, 162, 0, 232, 84, 18, 244, 87, 161, 0, 2, 222, 2, 240,
-        0, 0, 2, 4, 0, 191, 0, 15, 155, 0, 2, 94, 2, 240, 16, 236, 3, 191, 222,
-        2, 240, 15, 156, 0, 160, 68, 182, 240, 177, 69, 0, 2, 222, 2, 240, 0,
-        0, 2, 0, 0, 191, 0, 15, 173, 0, 104, 171, 239, 0, 15, 173, 0, 224, 94,
-        163, 0, 55, 168, 0, 109, 94, 160, 5, 207, 173, 0, 176, 46, 11, 0, 23,
-        161, 0, 2, 94, 2, 240, 1, 33, 0, 176, 64, 103, 0, 23, 162, 0, 104, 222,
-        163, 255, 239, 170, 0, 176, 94, 137, 112, 119, 162, 0, 109, 0, 167,
-        0, 143, 169, 0, 109, 160, 135, 0, 79, 171, 3, 191, 222, 2, 240, 15,
-        170, 0, 104, 160, 135, 0, 15, 171, 0, 184, 94, 137, 112, 119, 162, 0,
-        2, 94, 2, 240, 1, 37, 1, 188, 96, 3, 0, 23, 168, 0, 2, 222, 2, 240,
-        0, 0, 0, 216, 90, 3, 1, 23, 162, 1, 184, 90, 6, 244, 87, 162, 0, 176,
-        86, 3, 0, 8, 54, 0, 176, 86, 7, 0, 8, 55, 0, 176, 86, 11, 0, 8, 56,
-        0, 176, 86, 15, 0, 8, 57, 0, 176, 86, 19, 0, 8, 58, 0, 224, 86, 18,
-        244, 72, 59, 0, 176, 90, 3, 0, 8, 52, 1, 56, 94, 139, 0, 8, 53, 0, 176,
-        32, 239, 0, 23, 164, 1, 188, 96, 3, 0, 23, 162, 0, 176, 65, 147, 0,
-        16, 101, 0, 184, 94, 146, 208, 23, 164, 0, 224, 94, 6, 244, 80, 99,
-        0, 240, 94, 147, 0, 23, 163, 0, 240, 94, 147, 0, 119, 164, 0, 224, 94,
-        139, 0, 55, 162, 0, 184, 94, 146, 244, 119, 164, 0, 224, 65, 146, 244,
-        80, 101, 0, 224, 86, 2, 244, 149, 128, 0, 176, 86, 3, 0, 23, 164, 0,
-        110, 222, 139, 0, 175, 187, 0, 184, 94, 146, 192, 215, 162, 0, 216,
-        94, 139, 0, 55, 162, 0, 224, 32, 218, 244, 72, 54, 0, 176, 32, 219,
-        0, 23, 164, 0, 184, 94, 146, 192, 247, 162, 0, 216, 94, 139, 0, 55,
-        162, 0, 224, 32, 222, 244, 72, 55, 0, 216, 32, 223, 0, 55, 162, 0, 224,
-        32, 226, 244, 72, 56, 0, 216, 32, 227, 0, 55, 162, 0, 224, 32, 230,
-        244, 72, 57, 0, 216, 32, 231, 0, 55, 162, 0, 224, 32, 234, 244, 72,
-        58, 0, 216, 32, 235, 0, 55, 162, 0, 224, 32, 238, 244, 72, 59, 0, 176,
-        32, 239, 0, 23, 162, 0, 184, 94, 138, 192, 23, 162, 0, 144, 94, 139,
-        0, 55, 162, 1, 188, 94, 137, 6, 168, 53, 0, 2, 222, 2, 240, 0, 0, 1,
-        128, 96, 6, 60, 145, 228, 1, 135, 96, 6, 60, 209, 230, 1, 168, 96, 2,
-        60, 209, 230, 1, 139, 96, 2, 60, 209, 230, 0, 176, 94, 143, 0, 16, 99,
-        0, 176, 86, 3, 0, 17, 231, 0, 176, 86, 7, 0, 17, 231, 0, 176, 86, 11,
-        0, 17, 231, 0, 176, 86, 15, 0, 17, 231, 1, 169, 96, 66, 60, 145, 228,
-        1, 168, 96, 2, 60, 209, 230, 1, 139, 96, 6, 60, 209, 230, 0, 176, 94,
-        139, 0, 16, 99, 1, 188, 96, 3, 0, 87, 161, 2, 4, 86, 3, 0, 15, 233,
-        1, 188, 96, 3, 1, 23, 161, 0, 224, 65, 142, 244, 48, 99, 0, 176, 86,
-        3, 0, 17, 231, 0, 176, 86, 7, 0, 17, 231, 0, 176, 86, 11, 0, 17, 231,
-        0, 176, 94, 139, 0, 16, 99, 1, 188, 96, 3, 0, 183, 161, 2, 4, 214, 3,
-        0, 15, 243, 1, 188, 96, 3, 1, 23, 161, 2, 6, 94, 83, 0, 15, 243, 1,
-        188, 96, 3, 1, 151, 161, 0, 224, 65, 142, 244, 48, 99, 0, 176, 86, 3,
-        0, 17, 231, 0, 176, 86, 7, 0, 17, 231, 0, 176, 86, 11, 0, 17, 231, 1,
-        188, 96, 3, 0, 23, 161, 2, 6, 222, 83, 0, 15, 254, 0, 176, 94, 139,
-        0, 16, 99, 2, 6, 94, 83, 0, 15, 253, 0, 160, 86, 63, 1, 247, 161, 3,
-        191, 222, 2, 240, 15, 254, 0, 160, 86, 51, 1, 247, 161, 0, 176, 94,
-        135, 0, 17, 231, 1, 188, 96, 3, 0, 17, 231, 0, 2, 222, 2, 240, 0, 0,
-        0, 104, 94, 155, 0, 208, 27, 1, 188, 96, 7, 2, 17, 227, 0, 104, 222,
-        155, 0, 80, 14, 0, 232, 71, 135, 1, 17, 225, 1, 188, 96, 3, 0, 17, 226,
-        1, 188, 96, 3, 0, 17, 226, 1, 188, 96, 3, 0, 17, 226, 1, 188, 96, 3,
-        0, 17, 226, 1, 188, 96, 3, 0, 17, 226, 1, 188, 96, 3, 0, 17, 226, 1,
-        188, 96, 3, 0, 17, 226, 1, 188, 96, 3, 0, 17, 226, 0, 176, 97, 66, 244,
-        81, 224, 0, 176, 88, 3, 0, 17, 226, 0, 176, 88, 7, 0, 17, 226, 0, 176,
-        88, 11, 0, 17, 226, 0, 176, 88, 15, 0, 17, 226, 0, 176, 88, 19, 0, 17,
-        226, 0, 176, 88, 23, 0, 17, 226, 0, 176, 88, 27, 0, 17, 226, 0, 176,
-        88, 31, 0, 17, 226, 0, 176, 94, 155, 0, 23, 164, 0, 104, 222, 155, 0,
-        176, 25, 1, 188, 96, 3, 0, 119, 164, 1, 146, 222, 147, 2, 23, 163, 0,
-        2, 222, 2, 240, 0, 0, 1, 188, 96, 7, 0, 17, 227, 0, 176, 88, 3, 0, 17,
-        226, 0, 176, 88, 7, 0, 17, 226, 0, 176, 88, 11, 0, 17, 226, 0, 176,
-        88, 15, 0, 17, 226, 0, 176, 88, 19, 0, 17, 226, 0, 176, 88, 23, 0, 17,
-        226, 0, 176, 88, 27, 0, 17, 226, 0, 176, 88, 31, 0, 17, 226, 0, 224,
-        1, 70, 240, 16, 100, 1, 188, 96, 7, 0, 49, 227, 0, 176, 88, 3, 0, 17,
-        226, 0, 176, 88, 7, 0, 17, 226, 0, 176, 88, 11, 0, 17, 226, 0, 176,
-        88, 15, 0, 17, 226, 0, 176, 88, 19, 0, 17, 226, 0, 176, 88, 23, 0, 17,
-        226, 0, 176, 88, 27, 0, 17, 226, 0, 176, 88, 31, 0, 17, 226, 1, 146,
-        224, 27, 0, 23, 163, 0, 2, 222, 2, 240, 0, 0, 2, 135, 64, 195, 0, 16,
-        48, 1, 134, 96, 6, 240, 16, 48, 2, 134, 64, 195, 0, 16, 50, 0, 176,
-        64, 199, 0, 23, 129, 0, 2, 222, 2, 240, 0, 0, 2, 135, 64, 195, 0, 16,
-        53, 0, 176, 94, 7, 0, 16, 49, 1, 134, 224, 6, 240, 16, 48, 0, 2, 222,
-        2, 240, 0, 0, 0, 104, 0, 167, 1, 150, 141, 3, 191, 222, 2, 240, 16,
-        77, 0, 2, 94, 2, 240, 16, 62, 0, 2, 94, 2, 240, 16, 78, 0, 2, 222, 2,
-        240, 0, 0, 0, 104, 0, 167, 1, 150, 12, 0, 2, 222, 2, 240, 0, 0, 1, 129,
-        96, 6, 9, 48, 73, 0, 104, 0, 167, 0, 144, 67, 0, 2, 94, 2, 240, 16,
-        79, 0, 2, 222, 2, 240, 0, 0, 0, 2, 94, 2, 240, 16, 79, 1, 129, 96, 2,
-        9, 48, 73, 0, 2, 222, 2, 240, 0, 0, 1, 136, 224, 14, 9, 48, 73, 0, 176,
-        65, 39, 0, 24, 0, 0, 176, 0, 43, 0, 16, 2, 0, 2, 222, 2, 240, 0, 0,
-        1, 188, 96, 3, 0, 16, 2, 1, 130, 224, 2, 15, 16, 120, 0, 2, 222, 2,
-        240, 0, 0, 0, 104, 0, 167, 1, 150, 140, 0, 176, 65, 39, 0, 23, 161,
-        0, 176, 65, 39, 1, 208, 73, 0, 176, 94, 135, 0, 23, 161, 0, 176, 94,
-        135, 0, 23, 161, 0, 176, 94, 135, 0, 23, 161, 0, 176, 94, 135, 0, 23,
-        161, 0, 176, 94, 135, 0, 23, 161, 0, 176, 94, 135, 0, 23, 161, 0, 176,
-        94, 135, 0, 23, 161, 0, 176, 94, 135, 0, 23, 161, 0, 176, 94, 135, 0,
-        23, 161, 0, 176, 94, 135, 0, 23, 161, 0, 176, 94, 135, 0, 16, 73, 0,
-        2, 222, 2, 240, 0, 0, 1, 0, 222, 83, 0, 23, 166, 1, 188, 96, 3, 0, 55,
-        161, 3, 191, 222, 2, 240, 16, 96, 0, 2, 94, 2, 240, 1, 33, 1, 135, 96,
-        6, 3, 55, 162, 0, 104, 222, 155, 0, 16, 100, 1, 135, 96, 2, 3, 55, 162,
-        0, 2, 94, 2, 240, 1, 37, 0, 2, 222, 2, 240, 0, 0, 2, 2, 65, 31, 0, 16,
-        121, 2, 130, 94, 83, 0, 16, 107, 1, 130, 96, 6, 242, 151, 148, 0, 176,
-        68, 103, 0, 24, 0, 0, 176, 68, 107, 0, 8, 27, 0, 176, 68, 103, 0, 24,
-        0, 0, 232, 68, 105, 3, 119, 164, 0, 104, 0, 167, 0, 144, 110, 0, 109,
-        222, 147, 0, 80, 115, 0, 224, 68, 103, 3, 23, 163, 3, 144, 94, 2, 240,
-        16, 118, 2, 133, 197, 35, 0, 16, 118, 0, 104, 222, 142, 35, 48, 112,
-        1, 188, 96, 3, 2, 16, 71, 1, 188, 96, 3, 0, 144, 67, 1, 130, 96, 2,
-        242, 151, 148, 1, 130, 96, 2, 245, 183, 173, 0, 104, 0, 167, 0, 144,
-        121, 0, 104, 0, 167, 0, 176, 121, 0, 2, 222, 2, 240, 0, 0, 2, 1, 193,
-        31, 0, 16, 140, 2, 133, 94, 175, 0, 16, 127, 1, 133, 96, 6, 245, 119,
-        171, 0, 176, 68, 103, 0, 8, 30, 0, 176, 68, 107, 0, 8, 31, 0, 233, 68,
-        101, 3, 215, 161, 0, 232, 196, 105, 3, 247, 162, 0, 208, 94, 135, 0,
-        119, 161, 1, 225, 222, 138, 244, 55, 162, 0, 233, 94, 134, 38, 151,
-        161, 0, 232, 222, 138, 38, 183, 162, 0, 105, 94, 139, 0, 16, 140, 1,
-        188, 97, 3, 0, 17, 51, 0, 225, 68, 218, 244, 49, 54, 0, 225, 68, 222,
-        244, 81, 55, 1, 133, 96, 2, 245, 119, 171, 1, 188, 96, 3, 1, 16, 71,
-        1, 188, 96, 3, 0, 80, 67, 0, 2, 222, 2, 240, 0, 0, 2, 1, 174, 3, 0,
-        16, 143, 2, 132, 197, 35, 0, 16, 153, 1, 188, 96, 15, 12, 16, 101, 0,
-        224, 65, 149, 112, 16, 101, 2, 0, 46, 3, 0, 16, 147, 0, 224, 65, 151,
-        0, 176, 101, 1, 188, 96, 15, 13, 23, 161, 0, 110, 65, 150, 244, 48,
-        151, 0, 225, 90, 2, 41, 54, 128, 0, 224, 218, 7, 0, 22, 129, 1, 188,
-        96, 3, 0, 11, 128, 1, 188, 96, 3, 0, 17, 73, 0, 2, 222, 2, 240, 0, 0,
-        0, 176, 69, 31, 0, 23, 129, 0, 176, 5, 183, 0, 23, 166, 1, 188, 96,
-        7, 4, 16, 100, 1, 188, 96, 19, 27, 144, 101, 1, 188, 96, 3, 0, 23, 161,
-        2, 5, 222, 175, 0, 16, 180, 0, 176, 88, 15, 0, 23, 128, 0, 104, 222,
-        132, 44, 48, 164, 0, 224, 88, 35, 0, 54, 8, 3, 191, 222, 2, 240, 16,
-        188, 2, 0, 94, 155, 0, 16, 180, 2, 128, 218, 3, 0, 16, 170, 1, 24, 88,
-        31, 0, 23, 130, 0, 224, 94, 11, 0, 55, 130, 1, 152, 94, 10, 192, 246,
-        7, 3, 191, 222, 2, 240, 16, 173, 1, 26, 88, 31, 0, 23, 130, 0, 224,
-        94, 11, 0, 55, 130, 1, 154, 94, 10, 192, 246, 7, 1, 240, 222, 3, 0,
-        55, 128, 0, 160, 94, 2, 192, 87, 128, 0, 176, 94, 3, 0, 22, 3, 0, 160,
-        68, 182, 240, 23, 130, 0, 176, 94, 11, 0, 22, 5, 0, 224, 94, 10, 192,
-        150, 6, 3, 191, 222, 2, 240, 16, 188, 0, 176, 88, 19, 0, 23, 130, 0,
-        232, 94, 6, 240, 87, 165, 0, 106, 222, 151, 0, 16, 186, 0, 232, 88,
-        22, 244, 182, 5, 0, 105, 216, 23, 0, 16, 186, 1, 188, 96, 3, 0, 22,
-        5, 0, 176, 88, 23, 0, 23, 165, 0, 224, 88, 18, 244, 182, 6, 0, 224,
-        65, 147, 2, 16, 100, 0, 224, 65, 151, 6, 208, 101, 0, 224, 94, 135,
-        0, 55, 161, 0, 144, 94, 155, 0, 55, 166, 0, 104, 222, 135, 0, 144, 159,
-        1, 188, 96, 3, 0, 17, 71, 1, 188, 96, 3, 0, 1, 109, 0, 2, 222, 2, 240,
-        0, 0, 1, 188, 96, 3, 0, 1, 108, 1, 188, 96, 3, 0, 1, 109, 1, 188, 96,
-        7, 10, 16, 100, 1, 188, 96, 3, 0, 119, 161, 0, 176, 66, 143, 0, 23,
-        128, 0, 160, 94, 3, 1, 247, 128, 0, 176, 94, 3, 0, 1, 110, 1, 188, 99,
-        255, 31, 247, 162, 0, 104, 222, 3, 0, 16, 206, 1, 188, 96, 3, 0, 23,
-        162, 0, 136, 96, 6, 244, 55, 129, 0, 32, 5, 186, 240, 48, 211, 0, 104,
-        222, 138, 192, 208, 211, 0, 224, 5, 179, 0, 33, 108, 0, 176, 5, 182,
-        240, 33, 109, 0, 104, 94, 3, 0, 16, 215, 0, 32, 94, 6, 240, 16, 221,
-        0, 110, 222, 138, 192, 208, 221, 3, 191, 222, 2, 240, 16, 216, 0, 109,
-        222, 138, 192, 208, 221, 0, 176, 94, 135, 0, 23, 163, 0, 176, 65, 147,
-        0, 1, 102, 0, 176, 88, 27, 0, 23, 162, 1, 188, 96, 3, 0, 1, 108, 1,
-        188, 96, 3, 0, 1, 109, 0, 232, 65, 147, 2, 16, 100, 0, 232, 94, 135,
-        0, 55, 161, 0, 105, 222, 135, 0, 16, 206, 0, 176, 94, 143, 0, 1, 101,
-        0, 2, 222, 2, 240, 0, 0, 0, 176, 5, 155, 0, 16, 100, 0, 176, 88, 27,
-        0, 17, 69, 0, 176, 5, 155, 0, 1, 98, 0, 176, 5, 151, 0, 1, 97, 0, 176,
-        88, 15, 0, 23, 133, 0, 176, 88, 7, 0, 23, 131, 0, 176, 88, 11, 0, 23,
-        132, 1, 24, 88, 31, 0, 23, 140, 1, 26, 88, 31, 0, 23, 141, 0, 2, 222,
-        2, 240, 0, 0, 0, 176, 5, 139, 0, 16, 100, 0, 110, 65, 147, 42, 16, 249,
-        0, 160, 68, 182, 240, 183, 161, 0, 176, 94, 135, 0, 22, 5, 0, 224, 88,
-        18, 244, 54, 6, 0, 176, 88, 27, 0, 17, 69, 2, 0, 0, 243, 0, 16, 246,
-        0, 109, 65, 147, 40, 16, 246, 2, 0, 222, 175, 0, 16, 246, 1, 188, 96,
-        11, 2, 81, 66, 0, 176, 94, 135, 0, 1, 111, 2, 1, 94, 175, 0, 16, 249,
-        0, 176, 94, 23, 0, 22, 3, 1, 129, 96, 2, 245, 119, 171, 0, 2, 222, 2,
-        240, 0, 0, 2, 1, 69, 35, 0, 17, 4, 2, 135, 196, 147, 0, 17, 4, 1, 130,
-        96, 2, 245, 215, 174, 2, 1, 44, 35, 0, 17, 1, 0, 224, 44, 43, 0, 43,
-        10, 1, 129, 96, 1, 97, 11, 8, 2, 6, 94, 183, 0, 17, 4, 0, 224, 42, 215,
-        0, 42, 181, 1, 134, 96, 2, 245, 183, 173, 0, 2, 222, 2, 240, 0, 0, 2,
-        2, 0, 191, 0, 17, 18, 0, 2, 94, 2, 240, 17, 58, 2, 2, 222, 179, 0, 17,
-        10, 0, 104, 66, 143, 0, 14, 79, 3, 191, 222, 2, 240, 0, 2, 2, 136, 129,
-        171, 0, 17, 18, 2, 132, 94, 255, 0, 17, 8, 2, 132, 94, 179, 0, 17, 8,
-        2, 130, 222, 255, 0, 17, 8, 2, 130, 43, 47, 0, 17, 16, 0, 104, 42, 155,
-        0, 17, 18, 2, 132, 222, 175, 0, 17, 8, 2, 132, 94, 183, 0, 17, 8, 0,
-        176, 94, 135, 0, 23, 161, 0, 2, 222, 2, 240, 0, 0, 1, 130, 224, 2, 245,
-        151, 172, 2, 3, 222, 255, 0, 17, 28, 2, 132, 69, 35, 0, 17, 28, 2, 1,
-        43, 47, 0, 17, 28, 1, 128, 224, 6, 242, 151, 148, 0, 2, 94, 2, 240,
-        16, 79, 1, 128, 224, 2, 242, 151, 148, 0, 2, 94, 2, 240, 16, 79, 1,
-        128, 224, 2, 242, 151, 148, 2, 1, 172, 35, 0, 16, 57, 1, 129, 224, 1,
-        97, 11, 8, 3, 191, 222, 2, 240, 16, 59, 2, 4, 0, 199, 0, 17, 42, 2,
-        6, 171, 211, 0, 17, 36, 2, 132, 197, 175, 0, 17, 56, 3, 191, 222, 2,
-        240, 17, 37, 2, 132, 197, 111, 0, 17, 56, 2, 132, 69, 35, 0, 17, 39,
-        2, 0, 66, 3, 0, 17, 56, 0, 104, 94, 75, 4, 177, 56, 0, 104, 94, 75,
-        6, 177, 56, 0, 104, 94, 75, 6, 49, 56, 1, 130, 224, 6, 245, 151, 172,
-        2, 132, 69, 35, 0, 17, 45, 3, 35, 222, 2, 240, 17, 46, 1, 131, 224,
-        6, 245, 151, 172, 1, 128, 224, 6, 242, 151, 148, 2, 132, 0, 199, 0,
-        16, 57, 0, 176, 42, 215, 0, 23, 162, 0, 109, 222, 137, 85, 16, 57, 2,
-        135, 43, 47, 0, 17, 53, 2, 0, 94, 255, 0, 16, 57, 2, 7, 171, 47, 0,
-        16, 57, 1, 129, 224, 5, 97, 11, 8, 3, 191, 222, 2, 240, 16, 59, 3, 191,
-        222, 2, 240, 16, 57, 0, 2, 222, 2, 240, 0, 0, 2, 2, 0, 191, 0, 19, 47,
-        2, 6, 171, 211, 0, 17, 71, 1, 4, 193, 7, 0, 23, 161, 1, 133, 94, 133,
-        97, 11, 8, 2, 4, 44, 35, 0, 17, 71, 1, 132, 96, 1, 97, 11, 8, 1, 188,
-        96, 55, 0, 23, 162, 1, 188, 96, 3, 20, 23, 161, 0, 176, 69, 227, 0,
-        24, 0, 0, 176, 69, 227, 0, 24, 0, 0, 176, 69, 227, 0, 24, 0, 1, 188,
-        98, 3, 0, 16, 119, 1, 188, 96, 3, 27, 80, 118, 0, 2, 94, 2, 240, 1,
-        56, 0, 104, 42, 235, 0, 17, 76, 0, 232, 68, 101, 87, 87, 161, 1, 188,
-        99, 247, 29, 23, 162, 0, 109, 94, 134, 244, 81, 76, 0, 232, 68, 102,
-        244, 74, 186, 0, 108, 196, 101, 86, 113, 78, 0, 232, 68, 103, 0, 42,
-        179, 2, 6, 171, 211, 0, 17, 83, 0, 109, 196, 103, 1, 81, 81, 1, 188,
-        96, 3, 0, 11, 16, 2, 132, 197, 175, 0, 17, 182, 3, 191, 222, 2, 240,
-        17, 84, 2, 128, 69, 111, 0, 17, 182, 2, 7, 1, 171, 0, 17, 86, 1, 128,
-        96, 2, 9, 208, 78, 1, 135, 224, 2, 245, 151, 172, 2, 4, 222, 183, 0,
-        19, 47, 1, 132, 224, 2, 245, 183, 173, 1, 132, 224, 1, 97, 11, 8, 2,
-        2, 222, 179, 0, 17, 116, 2, 6, 171, 211, 0, 17, 102, 0, 104, 170, 247,
-        0, 145, 94, 0, 104, 43, 3, 0, 17, 95, 3, 191, 222, 2, 240, 17, 100,
-        1, 139, 96, 14, 43, 145, 92, 2, 135, 171, 211, 0, 17, 99, 1, 130, 96,
-        2, 9, 208, 78, 3, 191, 222, 2, 240, 17, 100, 1, 130, 96, 6, 9, 208,
-        78, 0, 2, 94, 2, 240, 17, 20, 3, 191, 222, 2, 240, 17, 104, 1, 131,
-        96, 6, 43, 145, 92, 0, 2, 94, 2, 240, 17, 20, 2, 130, 222, 187, 0, 17,
-        116, 0, 104, 170, 247, 0, 145, 108, 1, 6, 171, 23, 0, 23, 187, 0, 104,
-        222, 239, 0, 17, 112, 2, 132, 128, 199, 0, 17, 116, 0, 104, 170, 247,
-        0, 49, 111, 0, 108, 196, 101, 86, 113, 115, 0, 104, 170, 247, 0, 145,
-        116, 0, 104, 43, 3, 0, 17, 116, 0, 232, 69, 137, 90, 247, 161, 0, 109,
-        94, 133, 96, 81, 116, 1, 132, 96, 2, 245, 183, 173, 2, 131, 94, 187,
-        0, 17, 122, 2, 6, 171, 211, 0, 17, 120, 0, 232, 69, 201, 90, 247, 161,
-        3, 191, 222, 2, 240, 17, 121, 0, 232, 69, 137, 90, 247, 161, 0, 110,
-        94, 133, 84, 177, 151, 2, 5, 222, 183, 0, 17, 147, 0, 224, 43, 151,
-        0, 42, 229, 1, 188, 96, 3, 0, 10, 231, 0, 104, 44, 71, 0, 17, 127, 0,
-        232, 44, 71, 0, 43, 17, 1, 134, 96, 2, 245, 183, 173, 2, 4, 222, 255,
-        0, 17, 137, 0, 176, 43, 155, 0, 23, 162, 0, 176, 42, 155, 0, 23, 161,
-        2, 131, 172, 39, 0, 17, 134, 0, 104, 44, 135, 0, 17, 135, 0, 109, 94,
-        133, 100, 49, 135, 0, 176, 44, 127, 0, 23, 162, 0, 109, 43, 150, 244,
-        81, 137, 1, 132, 224, 2, 247, 247, 191, 2, 6, 222, 255, 0, 17, 147,
-        0, 224, 43, 199, 2, 10, 241, 0, 176, 68, 103, 0, 10, 252, 1, 24, 43,
-        199, 0, 23, 161, 1, 26, 43, 199, 0, 23, 162, 0, 110, 94, 135, 0, 17,
-        145, 0, 109, 222, 137, 94, 81, 145, 3, 191, 222, 2, 240, 17, 147, 1,
-        188, 96, 3, 0, 10, 241, 1, 134, 224, 2, 247, 247, 191, 2, 2, 94, 255,
-        0, 19, 47, 0, 104, 170, 235, 0, 19, 47, 0, 176, 42, 199, 0, 10, 186,
-        3, 191, 222, 2, 240, 19, 47, 1, 130, 224, 2, 247, 247, 191, 2, 2, 94,
-        255, 0, 17, 160, 2, 6, 0, 199, 0, 17, 157, 2, 128, 43, 211, 0, 17, 157,
-        0, 176, 43, 43, 0, 23, 187, 0, 110, 43, 2, 247, 115, 47, 2, 2, 94, 255,
-        0, 17, 160, 0, 176, 68, 103, 0, 10, 186, 3, 191, 222, 2, 240, 19, 47,
-        2, 5, 222, 183, 0, 17, 174, 0, 104, 42, 247, 8, 113, 163, 0, 232, 68,
-        101, 85, 202, 182, 0, 104, 44, 71, 0, 17, 165, 0, 232, 44, 71, 0, 43,
-        17, 0, 224, 43, 159, 0, 42, 231, 0, 176, 43, 163, 0, 23, 161, 0, 176,
-        42, 155, 0, 23, 162, 2, 131, 172, 39, 0, 17, 171, 0, 104, 44, 135, 0,
-        17, 172, 0, 109, 94, 137, 100, 49, 172, 0, 176, 44, 131, 0, 23, 161,
-        0, 109, 43, 158, 244, 49, 174, 1, 188, 96, 3, 0, 10, 229, 0, 104, 170,
-        247, 0, 177, 177, 0, 176, 68, 103, 0, 10, 239, 0, 176, 68, 107, 0, 10,
-        243, 0, 104, 170, 247, 1, 49, 181, 0, 176, 68, 103, 0, 11, 11, 2, 6,
-        43, 211, 0, 17, 181, 0, 176, 44, 123, 1, 11, 30, 3, 191, 222, 2, 240,
-        19, 47, 2, 7, 1, 171, 0, 17, 184, 1, 128, 96, 6, 9, 208, 78, 2, 4, 222,
-        183, 0, 17, 191, 2, 130, 222, 179, 0, 19, 47, 2, 3, 197, 115, 0, 18,
-        242, 0, 232, 68, 101, 86, 55, 161, 0, 109, 94, 133, 85, 179, 47, 1,
-        131, 96, 6, 245, 215, 174, 3, 191, 222, 2, 240, 19, 47, 1, 135, 224,
-        6, 245, 151, 172, 0, 225, 14, 211, 0, 35, 180, 0, 224, 142, 215, 0,
-        3, 181, 2, 6, 171, 211, 0, 17, 201, 1, 188, 96, 3, 0, 10, 215, 0, 109,
-        69, 199, 31, 81, 198, 0, 176, 69, 199, 0, 10, 215, 0, 224, 68, 101,
-        90, 247, 187, 0, 232, 94, 238, 46, 42, 177, 3, 191, 222, 2, 240, 17,
-        206, 1, 188, 96, 3, 0, 10, 215, 0, 109, 69, 135, 31, 81, 204, 0, 176,
-        69, 135, 0, 10, 215, 0, 224, 68, 101, 90, 247, 187, 0, 232, 94, 238,
-        44, 42, 177, 1, 131, 96, 2, 245, 215, 174, 1, 132, 224, 6, 245, 183,
-        173, 1, 133, 224, 2, 245, 183, 173, 1, 130, 96, 2, 247, 247, 191, 1,
-        133, 96, 2, 245, 183, 173, 2, 6, 171, 211, 0, 17, 214, 1, 1, 69, 175,
-        0, 23, 161, 3, 191, 222, 2, 240, 17, 215, 1, 1, 69, 111, 0, 23, 161,
-        1, 135, 94, 134, 245, 119, 171, 1, 188, 96, 3, 0, 11, 5, 0, 232, 68,
-        101, 86, 55, 161, 0, 109, 94, 133, 93, 209, 217, 0, 109, 94, 133, 85,
-        177, 221, 0, 224, 43, 99, 0, 42, 216, 0, 176, 42, 147, 0, 23, 179, 2,
-        6, 171, 211, 0, 17, 236, 1, 188, 96, 3, 1, 145, 120, 0, 176, 69, 227,
-        0, 24, 0, 0, 176, 69, 231, 0, 10, 196, 1, 188, 96, 3, 1, 177, 120, 0,
-        176, 69, 227, 0, 24, 0, 0, 176, 69, 231, 0, 10, 197, 1, 188, 96, 3,
-        1, 209, 120, 0, 176, 69, 227, 0, 24, 0, 0, 176, 69, 231, 0, 10, 198,
-        1, 188, 96, 3, 1, 241, 120, 0, 176, 69, 227, 0, 24, 0, 0, 176, 69, 231,
-        0, 10, 199, 3, 191, 222, 2, 240, 17, 248, 1, 188, 96, 3, 0, 17, 120,
-        0, 176, 69, 227, 0, 24, 0, 0, 176, 69, 231, 0, 10, 196, 1, 188, 96,
-        3, 0, 49, 120, 0, 176, 69, 227, 0, 24, 0, 0, 176, 69, 231, 0, 10, 197,
-        1, 188, 96, 3, 0, 81, 120, 0, 176, 69, 227, 0, 24, 0, 0, 176, 69, 231,
-        0, 10, 198, 1, 188, 96, 3, 0, 113, 120, 0, 176, 69, 227, 0, 24, 0, 0,
-        176, 69, 231, 0, 10, 199, 1, 130, 224, 1, 97, 11, 8, 2, 7, 171, 27,
-        0, 17, 251, 1, 130, 224, 5, 97, 11, 8, 0, 176, 43, 23, 0, 23, 187, 1,
-        40, 94, 239, 0, 10, 189, 1, 188, 96, 19, 28, 87, 187, 2, 24, 43, 27,
-        0, 18, 2, 1, 24, 43, 27, 0, 23, 166, 0, 128, 222, 154, 247, 119, 187,
-        0, 176, 65, 183, 0, 23, 179, 2, 3, 43, 211, 0, 18, 10, 0, 104, 42, 247,
-        2, 210, 5, 0, 104, 170, 247, 2, 178, 10, 1, 188, 96, 19, 28, 87, 187,
-        2, 52, 171, 23, 0, 18, 10, 1, 52, 171, 23, 0, 23, 166, 0, 128, 222,
-        154, 247, 119, 187, 0, 176, 65, 183, 0, 23, 179, 0, 110, 42, 247, 1,
-        242, 14, 0, 136, 96, 5, 87, 183, 187, 0, 32, 222, 237, 92, 82, 17, 3,
-        191, 222, 2, 240, 18, 20, 0, 232, 42, 247, 2, 23, 187, 0, 136, 96, 6,
-        247, 119, 187, 0, 32, 94, 237, 92, 114, 20, 1, 133, 96, 6, 245, 183,
-        173, 2, 4, 128, 195, 0, 18, 20, 1, 132, 224, 5, 96, 171, 5, 0, 110,
-        42, 247, 1, 242, 26, 0, 136, 96, 5, 87, 183, 187, 0, 32, 94, 239, 1,
-        146, 24, 0, 104, 172, 71, 0, 18, 30, 0, 32, 222, 237, 90, 146, 29, 3,
-        191, 222, 2, 240, 18, 30, 0, 232, 42, 247, 2, 23, 187, 0, 136, 96, 6,
-        247, 119, 187, 0, 32, 94, 237, 90, 178, 30, 1, 132, 96, 5, 96, 171,
-        5, 0, 104, 170, 247, 2, 242, 38, 1, 13, 171, 23, 0, 23, 161, 1, 14,
-        171, 23, 0, 23, 162, 0, 104, 94, 135, 0, 18, 38, 0, 224, 94, 134, 244,
-        87, 161, 0, 224, 94, 135, 8, 10, 189, 0, 104, 44, 71, 0, 18, 38, 1,
-        132, 96, 1, 96, 171, 5, 2, 3, 43, 211, 0, 18, 50, 1, 131, 96, 1, 90,
-        170, 213, 0, 104, 42, 247, 2, 210, 45, 0, 104, 170, 247, 2, 178, 66,
-        0, 104, 170, 231, 0, 18, 48, 0, 104, 171, 35, 0, 18, 48, 2, 130, 222,
-        187, 0, 18, 48, 2, 7, 43, 27, 0, 18, 48, 1, 132, 96, 5, 96, 171, 5,
-        3, 191, 222, 2, 240, 18, 66, 2, 131, 197, 115, 0, 18, 66, 0, 2, 94,
-        2, 240, 20, 184, 0, 104, 170, 247, 2, 178, 66, 1, 131, 96, 5, 90, 170,
-        213, 0, 224, 44, 143, 0, 43, 35, 1, 133, 96, 2, 245, 183, 173, 0, 104,
-        170, 231, 0, 18, 66, 0, 104, 171, 35, 0, 18, 66, 2, 130, 222, 187, 0,
-        18, 66, 0, 176, 42, 195, 0, 23, 162, 1, 52, 43, 27, 0, 23, 161, 0, 110,
-        222, 135, 6, 18, 61, 0, 176, 42, 191, 0, 23, 162, 0, 110, 94, 137, 100,
-        114, 66, 1, 188, 96, 3, 0, 11, 35, 1, 188, 96, 3, 0, 10, 218, 1, 133,
-        96, 6, 245, 183, 173, 1, 132, 224, 5, 97, 11, 8, 0, 104, 170, 247, 0,
-        178, 76, 2, 7, 94, 255, 0, 18, 76, 1, 52, 43, 27, 0, 23, 163, 0, 109,
-        222, 141, 96, 50, 76, 0, 104, 94, 143, 0, 18, 76, 2, 131, 171, 23, 0,
-        18, 74, 1, 131, 96, 5, 96, 171, 5, 3, 191, 222, 2, 240, 18, 76, 0, 176,
-        43, 219, 0, 10, 240, 0, 176, 68, 107, 0, 10, 247, 0, 104, 170, 247,
-        1, 50, 89, 2, 129, 171, 211, 0, 18, 89, 1, 188, 96, 3, 0, 10, 218, 0,
-        104, 44, 47, 0, 18, 89, 0, 232, 68, 101, 97, 119, 161, 0, 109, 94, 133,
-        97, 146, 86, 0, 176, 44, 51, 0, 23, 162, 0, 224, 94, 137, 97, 183, 162,
-        0, 109, 222, 134, 244, 82, 88, 2, 0, 172, 35, 0, 18, 89, 1, 133, 96,
-        5, 96, 171, 5, 3, 191, 222, 2, 240, 18, 89, 1, 128, 224, 1, 97, 11,
-        8, 0, 104, 170, 247, 1, 18, 92, 0, 176, 42, 199, 0, 10, 209, 1, 135,
-        224, 6, 247, 247, 191, 2, 7, 222, 255, 0, 18, 94, 1, 129, 224, 5, 96,
-        171, 5, 0, 104, 42, 247, 0, 50, 99, 0, 104, 42, 247, 1, 242, 99, 2,
-        133, 43, 211, 0, 18, 98, 0, 104, 42, 247, 3, 18, 99, 0, 104, 170, 247,
-        0, 146, 116, 1, 130, 96, 6, 247, 247, 191, 0, 176, 42, 199, 0, 10, 185,
-        0, 104, 170, 247, 3, 18, 106, 0, 104, 43, 35, 0, 18, 106, 0, 176, 0,
-        19, 0, 10, 189, 0, 176, 43, 127, 0, 10, 192, 3, 191, 222, 2, 240, 18,
-        115, 0, 104, 170, 247, 0, 146, 116, 1, 28, 43, 23, 0, 10, 192, 1, 6,
-        171, 23, 0, 23, 187, 0, 104, 94, 239, 0, 18, 113, 1, 188, 96, 3, 0,
-        106, 195, 0, 176, 44, 123, 0, 75, 30, 3, 191, 222, 2, 240, 18, 115,
-        0, 168, 44, 123, 0, 75, 30, 1, 188, 96, 3, 0, 138, 195, 0, 176, 42,
-        199, 0, 10, 200, 2, 2, 222, 187, 0, 18, 129, 2, 132, 222, 255, 0, 18,
-        119, 2, 6, 222, 255, 0, 18, 129, 0, 176, 42, 215, 0, 23, 162, 0, 109,
-        222, 137, 85, 18, 128, 0, 176, 43, 155, 0, 23, 162, 0, 176, 42, 155,
-        0, 23, 161, 2, 131, 172, 39, 0, 18, 126, 0, 104, 44, 135, 0, 18, 127,
-        0, 109, 94, 133, 100, 50, 127, 0, 176, 44, 127, 0, 23, 162, 0, 109,
-        171, 150, 244, 82, 129, 1, 130, 224, 5, 96, 171, 5, 2, 134, 171, 211,
-        0, 18, 143, 0, 136, 96, 5, 87, 183, 161, 0, 32, 222, 133, 99, 146, 135,
-        0, 232, 42, 247, 2, 23, 161, 0, 136, 96, 6, 244, 55, 161, 0, 32, 94,
-        133, 99, 178, 141, 0, 104, 44, 111, 0, 18, 141, 1, 52, 43, 27, 0, 23,
-        162, 0, 110, 94, 139, 2, 146, 140, 0, 176, 44, 123, 0, 43, 30, 3, 191,
-        222, 2, 240, 18, 141, 0, 168, 44, 123, 0, 43, 30, 0, 104, 170, 247,
-        2, 242, 143, 0, 176, 68, 103, 0, 11, 27, 0, 224, 94, 205, 84, 183, 179,
-        1, 130, 96, 2, 245, 215, 174, 0, 176, 44, 43, 0, 23, 161, 0, 176, 42,
-        215, 0, 23, 162, 0, 109, 94, 137, 85, 18, 150, 2, 134, 94, 183, 0, 18,
-        158, 3, 191, 222, 2, 240, 18, 152, 0, 109, 94, 133, 95, 242, 163, 2,
-        129, 44, 35, 0, 18, 158, 0, 176, 68, 11, 0, 23, 163, 0, 176, 68, 15,
-        0, 23, 162, 0, 233, 94, 142, 35, 55, 163, 0, 232, 222, 138, 35, 87,
-        162, 0, 104, 222, 139, 0, 18, 163, 0, 110, 94, 142, 246, 114, 163, 0,
-        104, 42, 247, 0, 146, 163, 0, 104, 42, 247, 0, 82, 163, 0, 104, 42,
-        247, 0, 114, 163, 1, 130, 96, 6, 245, 215, 174, 0, 2, 94, 2, 240, 20,
-        184, 1, 188, 96, 19, 28, 87, 187, 1, 52, 43, 27, 0, 23, 162, 0, 128,
-        222, 138, 247, 119, 187, 0, 176, 65, 183, 0, 23, 162, 0, 104, 42, 247,
-        0, 82, 176, 0, 104, 42, 247, 2, 82, 176, 0, 104, 42, 247, 2, 114, 176,
-        0, 104, 42, 247, 0, 114, 176, 0, 104, 42, 247, 8, 82, 176, 0, 104, 42,
-        247, 8, 114, 176, 0, 104, 42, 247, 8, 146, 176, 0, 104, 42, 247, 3,
-        210, 176, 3, 191, 222, 2, 240, 18, 191, 1, 133, 224, 6, 245, 183, 173,
-        0, 104, 94, 139, 0, 18, 186, 0, 176, 94, 139, 0, 10, 166, 1, 130, 224,
-        6, 245, 215, 174, 0, 104, 44, 139, 0, 18, 183, 0, 110, 94, 137, 100,
-        82, 183, 1, 129, 96, 5, 99, 203, 30, 0, 224, 43, 171, 0, 42, 234, 0,
-        110, 94, 137, 96, 18, 186, 1, 130, 96, 5, 96, 171, 5, 0, 232, 68, 101,
-        86, 55, 161, 0, 176, 68, 103, 0, 23, 163, 0, 104, 42, 247, 8, 146, 190,
-        0, 232, 94, 142, 244, 42, 174, 1, 132, 96, 2, 247, 247, 191, 2, 130,
-        222, 179, 0, 19, 47, 2, 3, 197, 115, 0, 18, 242, 0, 176, 42, 171, 0,
-        23, 162, 0, 176, 42, 179, 0, 23, 163, 0, 104, 170, 247, 0, 146, 207,
-        2, 128, 43, 211, 0, 18, 207, 0, 176, 43, 3, 0, 23, 161, 0, 109, 94,
-        133, 88, 114, 203, 1, 128, 224, 5, 96, 171, 5, 0, 104, 43, 79, 0, 18,
-        203, 1, 188, 96, 3, 0, 10, 188, 0, 2, 94, 2, 240, 20, 142, 0, 104, 94,
-        135, 0, 18, 207, 0, 104, 43, 231, 0, 18, 207, 0, 176, 43, 231, 0, 23,
-        162, 0, 176, 43, 235, 0, 23, 163, 0, 104, 94, 143, 0, 18, 216, 0, 104,
-        42, 235, 0, 18, 216, 0, 232, 68, 101, 87, 87, 161, 0, 224, 94, 142,
-        244, 87, 162, 0, 109, 94, 134, 244, 82, 216, 1, 129, 96, 5, 96, 171,
-        5, 0, 104, 43, 79, 0, 18, 216, 1, 188, 96, 3, 0, 10, 188, 0, 2, 94,
-        2, 240, 20, 142, 2, 129, 171, 47, 0, 18, 221, 2, 0, 94, 255, 0, 18,
-        221, 2, 4, 69, 35, 0, 18, 221, 3, 160, 222, 2, 240, 18, 221, 1, 131,
-        224, 5, 96, 171, 5, 2, 128, 128, 191, 0, 19, 47, 2, 130, 94, 187, 0,
-        19, 47, 2, 130, 43, 211, 0, 18, 242, 2, 129, 172, 23, 0, 18, 242, 2,
-        128, 172, 23, 0, 18, 242, 2, 129, 44, 23, 0, 18, 242, 2, 130, 44, 23,
-        0, 18, 242, 2, 136, 129, 171, 0, 18, 242, 2, 130, 172, 23, 0, 18, 235,
-        2, 131, 43, 23, 0, 18, 242, 2, 131, 44, 23, 0, 18, 235, 2, 133, 44,
-        23, 0, 18, 235, 2, 132, 44, 23, 0, 18, 242, 2, 132, 172, 23, 0, 18,
-        242, 2, 131, 172, 23, 0, 18, 242, 2, 132, 94, 183, 0, 18, 241, 2, 4,
-        222, 175, 0, 18, 241, 2, 129, 222, 187, 0, 18, 241, 1, 132, 224, 2,
-        245, 119, 171, 0, 2, 94, 2, 240, 20, 146, 3, 191, 222, 2, 240, 19, 47,
-        0, 232, 68, 101, 86, 55, 161, 0, 109, 222, 133, 84, 179, 5, 2, 6, 171,
-        211, 0, 18, 247, 1, 131, 224, 2, 43, 145, 92, 3, 191, 222, 2, 240, 19,
-        47, 1, 131, 224, 2, 43, 145, 92, 2, 7, 1, 171, 0, 18, 250, 1, 128, 224,
-        2, 9, 208, 78, 1, 188, 96, 3, 24, 81, 120, 0, 176, 69, 227, 0, 24, 0,
-        1, 131, 96, 2, 47, 49, 121, 2, 7, 222, 179, 0, 19, 1, 1, 135, 224, 2,
-        245, 151, 172, 0, 225, 14, 219, 0, 35, 182, 0, 224, 142, 223, 0, 3,
-        183, 0, 104, 176, 55, 0, 19, 4, 0, 176, 68, 103, 0, 12, 13, 0, 176,
-        68, 107, 0, 12, 14, 3, 191, 222, 2, 240, 19, 47, 2, 129, 1, 171, 0,
-        19, 9, 2, 0, 129, 171, 0, 19, 20, 2, 132, 44, 23, 0, 19, 20, 2, 128,
-        172, 23, 0, 19, 20, 2, 6, 171, 211, 0, 19, 18, 0, 107, 172, 66, 35,
-        51, 13, 0, 224, 68, 103, 1, 75, 16, 1, 139, 96, 2, 43, 145, 92, 2, 135,
-        171, 211, 0, 19, 16, 1, 130, 96, 6, 9, 208, 78, 3, 191, 222, 2, 240,
-        19, 17, 1, 130, 96, 2, 9, 208, 78, 3, 191, 222, 2, 240, 19, 19, 1, 131,
-        96, 2, 43, 145, 92, 3, 191, 222, 2, 240, 19, 47, 2, 6, 171, 211, 0,
-        19, 29, 0, 107, 172, 66, 35, 51, 24, 0, 224, 68, 103, 1, 75, 16, 1,
-        139, 96, 2, 43, 145, 92, 2, 135, 171, 211, 0, 19, 27, 1, 130, 96, 6,
-        9, 208, 78, 3, 191, 222, 2, 240, 19, 28, 1, 130, 96, 2, 9, 208, 78,
-        3, 191, 222, 2, 240, 19, 40, 1, 139, 96, 2, 43, 145, 92, 1, 188, 96,
-        3, 24, 81, 120, 0, 176, 69, 227, 0, 24, 0, 1, 131, 96, 2, 47, 49, 121,
-        2, 7, 222, 179, 0, 19, 37, 1, 135, 224, 2, 245, 151, 172, 0, 225, 14,
-        219, 0, 35, 182, 0, 224, 142, 223, 0, 3, 183, 0, 104, 176, 55, 0, 19,
-        40, 0, 176, 68, 103, 0, 12, 13, 0, 176, 68, 107, 0, 12, 14, 0, 2, 94,
-        2, 240, 17, 32, 2, 132, 94, 183, 0, 19, 47, 2, 131, 43, 211, 0, 19,
-        44, 0, 104, 42, 247, 2, 179, 47, 1, 132, 224, 6, 245, 119, 171, 0, 224,
-        43, 39, 0, 42, 201, 3, 191, 222, 2, 240, 20, 122, 0, 2, 222, 2, 240,
-        0, 0, 1, 133, 224, 2, 245, 183, 173, 1, 131, 96, 2, 245, 215, 174, 1,
-        130, 224, 2, 245, 215, 174, 1, 130, 224, 2, 247, 247, 191, 1, 132, 224,
-        2, 247, 247, 191, 1, 188, 96, 3, 0, 10, 211, 1, 188, 96, 3, 0, 10, 200,
-        1, 188, 96, 3, 0, 10, 192, 1, 188, 96, 3, 0, 10, 234, 1, 135, 96, 1,
-        95, 106, 251, 0, 176, 68, 103, 0, 12, 13, 0, 176, 68, 107, 0, 12, 14,
-        1, 129, 96, 1, 99, 203, 30, 0, 2, 222, 2, 240, 0, 0, 2, 2, 0, 191, 0,
-        19, 157, 2, 131, 222, 255, 0, 19, 207, 1, 131, 224, 6, 247, 247, 191,
-        1, 133, 96, 6, 11, 112, 91, 1, 133, 96, 6, 11, 240, 95, 2, 6, 171, 211,
-        0, 19, 72, 1, 188, 96, 3, 2, 17, 109, 0, 176, 42, 151, 0, 17, 110, 2,
-        128, 69, 171, 0, 19, 97, 3, 191, 222, 2, 240, 19, 75, 1, 188, 96, 3,
-        2, 17, 93, 0, 176, 42, 151, 0, 17, 94, 2, 128, 69, 107, 0, 19, 97, 2,
-        6, 171, 211, 0, 19, 85, 0, 107, 172, 66, 35, 51, 79, 0, 224, 68, 103,
-        1, 75, 16, 1, 139, 96, 2, 43, 145, 92, 2, 135, 171, 211, 0, 19, 82,
-        1, 130, 96, 6, 9, 208, 78, 3, 191, 222, 2, 240, 19, 83, 1, 130, 96,
-        2, 9, 208, 78, 1, 136, 96, 14, 45, 81, 106, 3, 191, 222, 2, 240, 19,
-        97, 1, 139, 96, 2, 43, 145, 92, 1, 188, 96, 3, 24, 81, 120, 0, 176,
-        69, 227, 0, 24, 0, 1, 131, 96, 2, 47, 49, 121, 2, 7, 222, 179, 0, 19,
-        93, 1, 135, 224, 2, 245, 151, 172, 0, 225, 14, 219, 0, 35, 182, 0, 224,
-        142, 223, 0, 3, 183, 0, 104, 176, 55, 0, 19, 96, 0, 176, 68, 103, 0,
-        12, 13, 0, 176, 68, 107, 0, 12, 14, 1, 136, 96, 14, 43, 81, 90, 0, 176,
-        65, 63, 31, 240, 79, 0, 104, 42, 187, 0, 19, 103, 1, 132, 96, 6, 247,
-        247, 191, 1, 188, 96, 47, 23, 23, 163, 0, 224, 68, 102, 244, 106, 180,
-        1, 188, 96, 3, 0, 10, 174, 0, 2, 94, 2, 240, 19, 48, 0, 232, 68, 105,
-        95, 215, 161, 0, 110, 222, 135, 0, 51, 113, 0, 176, 43, 215, 0, 10,
-        240, 1, 188, 96, 3, 0, 10, 239, 0, 104, 42, 235, 0, 19, 113, 0, 176,
-        68, 103, 0, 10, 185, 0, 232, 68, 101, 85, 74, 186, 0, 176, 42, 179,
-        0, 23, 161, 0, 232, 42, 234, 244, 42, 186, 2, 128, 128, 191, 0, 19,
-        126, 2, 129, 222, 187, 0, 19, 147, 2, 6, 171, 211, 0, 19, 118, 2, 4,
-        197, 175, 0, 19, 126, 3, 191, 222, 2, 240, 19, 119, 2, 0, 69, 111, 0,
-        19, 126, 2, 131, 197, 115, 0, 19, 126, 2, 6, 171, 211, 0, 19, 124, 1,
-        188, 99, 255, 31, 247, 161, 0, 104, 197, 198, 244, 51, 147, 3, 191,
-        222, 2, 240, 19, 126, 1, 188, 99, 255, 31, 247, 161, 0, 104, 197, 134,
-        244, 51, 147, 2, 6, 171, 211, 0, 19, 133, 1, 139, 96, 14, 43, 145, 92,
-        2, 135, 171, 211, 0, 19, 131, 1, 130, 96, 2, 9, 208, 78, 3, 191, 222,
-        2, 240, 19, 132, 1, 130, 96, 6, 9, 208, 78, 3, 191, 222, 2, 240, 19,
-        143, 1, 139, 96, 14, 43, 145, 92, 1, 188, 96, 3, 24, 81, 120, 0, 176,
-        69, 227, 0, 24, 0, 1, 139, 43, 46, 47, 49, 121, 0, 104, 48, 55, 0, 19,
-        143, 0, 233, 68, 101, 129, 183, 166, 0, 232, 196, 105, 129, 215, 187,
-        0, 225, 14, 226, 244, 195, 184, 0, 224, 142, 230, 247, 99, 185, 1, 188,
-        96, 3, 0, 12, 13, 1, 132, 224, 2, 245, 183, 173, 1, 132, 224, 2, 245,
-        119, 171, 1, 133, 224, 1, 97, 11, 8, 3, 191, 222, 2, 240, 20, 133, 2,
-        6, 171, 211, 0, 19, 150, 0, 2, 94, 2, 240, 17, 32, 3, 191, 222, 2, 240,
-        19, 152, 1, 131, 96, 2, 43, 145, 92, 0, 2, 94, 2, 240, 17, 32, 1, 132,
-        224, 6, 245, 183, 173, 1, 132, 224, 6, 245, 119, 171, 2, 6, 171, 211,
-        0, 19, 156, 1, 132, 96, 5, 97, 11, 8, 3, 191, 222, 2, 240, 20, 133,
-        1, 141, 96, 2, 11, 240, 95, 2, 6, 171, 211, 0, 19, 161, 1, 136, 96,
-        14, 45, 81, 106, 3, 191, 222, 2, 240, 19, 162, 1, 136, 96, 14, 43, 81,
-        90, 2, 129, 129, 171, 0, 19, 184, 2, 6, 171, 211, 0, 19, 172, 0, 107,
-        172, 66, 35, 51, 167, 0, 224, 68, 103, 1, 75, 16, 1, 139, 96, 6, 43,
-        145, 92, 2, 135, 171, 211, 0, 19, 170, 1, 130, 96, 2, 9, 208, 78, 3,
-        191, 222, 2, 240, 19, 171, 1, 130, 96, 6, 9, 208, 78, 3, 191, 222, 2,
-        240, 19, 204, 1, 139, 96, 6, 43, 145, 92, 1, 188, 96, 3, 24, 81, 120,
-        0, 176, 69, 227, 0, 24, 0, 1, 131, 96, 2, 47, 49, 121, 2, 7, 222, 179,
-        0, 19, 180, 1, 135, 224, 2, 245, 151, 172, 0, 225, 14, 219, 0, 35, 182,
-        0, 224, 142, 223, 0, 3, 183, 0, 104, 176, 55, 0, 19, 183, 0, 176, 68,
-        103, 0, 12, 13, 0, 176, 68, 107, 0, 12, 14, 3, 191, 222, 2, 240, 19,
-        204, 2, 6, 171, 211, 0, 19, 193, 0, 107, 172, 66, 35, 51, 188, 0, 224,
-        68, 103, 1, 75, 16, 1, 139, 96, 2, 43, 145, 92, 2, 135, 171, 211, 0,
-        19, 191, 1, 130, 96, 6, 9, 208, 78, 3, 191, 222, 2, 240, 19, 192, 1,
-        130, 96, 2, 9, 208, 78, 3, 191, 222, 2, 240, 19, 204, 1, 139, 96, 2,
-        43, 145, 92, 1, 188, 96, 3, 24, 81, 120, 0, 176, 69, 227, 0, 24, 0,
-        1, 131, 96, 2, 47, 49, 121, 2, 7, 222, 179, 0, 19, 201, 1, 135, 224,
-        2, 245, 151, 172, 0, 225, 14, 219, 0, 35, 182, 0, 224, 142, 223, 0,
-        3, 183, 0, 104, 176, 55, 0, 19, 204, 0, 176, 68, 103, 0, 12, 13, 0,
-        176, 68, 107, 0, 12, 14, 1, 132, 224, 2, 245, 183, 173, 1, 132, 224,
-        2, 245, 119, 171, 0, 2, 94, 2, 240, 19, 48, 0, 2, 222, 2, 240, 0, 0,
-        0, 176, 68, 107, 0, 10, 254, 2, 2, 222, 179, 0, 19, 220, 2, 6, 171,
-        211, 0, 19, 218, 1, 131, 96, 6, 43, 145, 92, 2, 135, 171, 211, 0, 19,
-        215, 1, 130, 96, 2, 9, 208, 78, 3, 191, 222, 2, 240, 19, 216, 1, 130,
-        96, 6, 9, 208, 78, 0, 2, 94, 2, 240, 17, 20, 3, 191, 222, 2, 240, 19,
-        220, 1, 131, 96, 6, 43, 145, 92, 0, 2, 94, 2, 240, 17, 20, 2, 2, 0,
-        191, 0, 20, 9, 1, 131, 224, 2, 247, 247, 191, 2, 3, 197, 115, 0, 19,
-        244, 2, 0, 128, 191, 0, 19, 244, 2, 6, 171, 211, 0, 19, 233, 0, 107,
-        172, 66, 35, 51, 228, 0, 224, 68, 103, 1, 75, 16, 1, 139, 96, 14, 43,
-        145, 92, 2, 135, 171, 211, 0, 19, 231, 1, 130, 96, 2, 9, 208, 78, 3,
-        191, 222, 2, 240, 19, 232, 1, 130, 96, 6, 9, 208, 78, 3, 191, 222, 2,
-        240, 20, 8, 1, 139, 96, 14, 43, 145, 92, 1, 188, 96, 3, 24, 81, 120,
-        0, 176, 69, 227, 0, 24, 0, 1, 139, 43, 46, 47, 49, 121, 0, 104, 48,
-        55, 0, 19, 243, 0, 233, 68, 101, 129, 183, 166, 0, 232, 196, 105, 129,
-        215, 187, 0, 225, 14, 226, 244, 195, 184, 0, 224, 142, 230, 247, 99,
-        185, 1, 188, 96, 3, 0, 12, 13, 3, 191, 222, 2, 240, 20, 8, 2, 6, 171,
-        211, 0, 19, 253, 0, 224, 68, 103, 0, 183, 187, 0, 108, 196, 102, 247,
-        115, 246, 1, 139, 96, 2, 43, 145, 92, 2, 135, 171, 211, 0, 19, 251,
-        1, 130, 96, 6, 9, 208, 78, 3, 191, 222, 2, 240, 19, 252, 1, 130, 96,
-        2, 9, 208, 78, 3, 191, 222, 2, 240, 20, 8, 1, 139, 96, 2, 43, 145, 92,
-        1, 188, 96, 3, 24, 81, 120, 0, 176, 69, 227, 0, 24, 0, 1, 131, 96, 2,
-        47, 49, 121, 2, 7, 222, 179, 0, 20, 5, 1, 135, 224, 2, 245, 151, 172,
-        0, 225, 14, 219, 0, 35, 182, 0, 224, 142, 223, 0, 3, 183, 0, 104, 176,
-        55, 0, 20, 8, 0, 176, 68, 103, 0, 12, 13, 0, 176, 68, 107, 0, 12, 14,
-        1, 130, 224, 2, 245, 151, 172, 0, 2, 222, 2, 240, 0, 0, 1, 188, 96,
-        3, 0, 55, 162, 0, 32, 227, 254, 9, 20, 91, 0, 32, 224, 66, 13, 148,
-        91, 2, 132, 94, 179, 0, 20, 91, 2, 128, 66, 3, 0, 20, 91, 2, 132, 69,
-        35, 0, 20, 91, 3, 145, 94, 2, 240, 20, 91, 0, 104, 171, 79, 0, 20, 91,
-        2, 130, 222, 255, 0, 20, 91, 0, 104, 42, 187, 0, 20, 22, 0, 232, 68,
-        101, 85, 215, 185, 0, 232, 42, 154, 247, 55, 185, 2, 128, 94, 255, 0,
-        20, 142, 2, 1, 128, 199, 0, 20, 133, 0, 176, 42, 215, 0, 23, 161, 0,
-        109, 222, 133, 85, 20, 133, 2, 130, 222, 179, 0, 20, 91, 2, 4, 128,
-        199, 0, 20, 64, 2, 3, 197, 115, 0, 20, 64, 0, 104, 94, 139, 0, 20, 42,
-        2, 2, 171, 211, 0, 20, 32, 2, 133, 94, 187, 0, 20, 33, 2, 130, 222,
-        187, 0, 20, 64, 0, 176, 43, 131, 0, 23, 161, 0, 110, 171, 106, 244,
-        52, 42, 2, 3, 197, 115, 0, 20, 64, 0, 104, 42, 155, 0, 20, 40, 0, 104,
-        42, 187, 0, 20, 42, 0, 106, 222, 229, 84, 244, 64, 0, 106, 222, 229,
-        90, 84, 64, 2, 132, 172, 35, 0, 20, 42, 0, 104, 42, 231, 0, 20, 64,
-        2, 3, 222, 83, 0, 20, 46, 3, 191, 222, 2, 240, 20, 44, 0, 176, 43, 135,
-        0, 10, 167, 3, 191, 222, 2, 240, 20, 133, 1, 188, 96, 3, 2, 87, 146,
-        1, 188, 99, 255, 31, 240, 195, 1, 188, 96, 3, 9, 16, 227, 1, 134, 94,
-        138, 28, 112, 227, 1, 132, 96, 6, 28, 112, 227, 0, 104, 42, 239, 0,
-        20, 53, 1, 133, 224, 6, 28, 112, 227, 1, 188, 96, 3, 3, 151, 130, 0,
-        2, 94, 2, 240, 20, 101, 0, 176, 84, 19, 0, 16, 228, 0, 224, 67, 145,
-        91, 48, 228, 1, 188, 96, 3, 0, 16, 238, 1, 188, 99, 255, 31, 240, 206,
-        0, 224, 42, 239, 0, 42, 187, 1, 188, 97, 3, 0, 119, 166, 1, 188, 96,
-        3, 0, 12, 15, 1, 188, 97, 3, 3, 236, 16, 3, 191, 222, 2, 240, 20, 85,
-        2, 132, 94, 183, 0, 20, 91, 1, 188, 96, 35, 8, 144, 230, 0, 2, 94, 2,
-        240, 1, 100, 0, 176, 94, 207, 0, 16, 228, 0, 104, 170, 247, 0, 52, 73,
-        2, 5, 172, 35, 0, 20, 73, 0, 232, 42, 206, 35, 55, 163, 0, 109, 222,
-        142, 28, 148, 73, 0, 176, 94, 143, 0, 16, 228, 0, 104, 42, 155, 0, 20,
-        81, 0, 176, 42, 219, 0, 16, 228, 2, 6, 171, 211, 0, 20, 78, 2, 132,
-        197, 175, 0, 20, 81, 3, 191, 222, 2, 240, 20, 79, 2, 128, 69, 111, 0,
-        20, 81, 0, 105, 94, 231, 0, 20, 81, 0, 224, 94, 229, 86, 208, 228, 1,
-        188, 96, 3, 1, 215, 130, 0, 2, 94, 2, 240, 20, 101, 1, 188, 97, 3, 0,
-        119, 166, 3, 191, 222, 2, 240, 20, 85, 0, 176, 0, 71, 0, 16, 134, 0,
-        2, 94, 2, 240, 20, 245, 0, 2, 94, 2, 240, 15, 115, 1, 144, 96, 10, 9,
-        16, 72, 1, 132, 96, 6, 245, 151, 172, 0, 176, 94, 155, 0, 16, 128, 0,
-        2, 222, 2, 240, 0, 0, 2, 128, 94, 255, 0, 20, 96, 2, 129, 222, 187,
-        0, 20, 96, 2, 1, 128, 199, 0, 20, 133, 2, 4, 128, 199, 0, 20, 133, 1,
-        128, 96, 2, 247, 247, 191, 2, 128, 194, 143, 0, 20, 134, 2, 1, 222,
-        187, 0, 20, 134, 1, 188, 96, 3, 0, 23, 162, 3, 191, 222, 2, 240, 20,
-        11, 0, 104, 94, 75, 6, 52, 108, 2, 133, 222, 255, 0, 20, 115, 0, 176,
-        43, 55, 0, 23, 161, 0, 109, 170, 238, 244, 52, 115, 1, 188, 96, 3, 1,
-        55, 128, 0, 176, 43, 59, 0, 23, 161, 0, 109, 42, 238, 244, 52, 110,
-        2, 129, 43, 211, 0, 20, 110, 1, 188, 96, 3, 1, 119, 128, 1, 188, 96,
-        3, 0, 55, 129, 0, 2, 94, 2, 240, 1, 61, 1, 210, 222, 10, 160, 48, 224,
-        0, 176, 84, 11, 0, 16, 225, 3, 191, 222, 2, 240, 20, 121, 2, 128, 171,
-        211, 0, 20, 108, 1, 188, 96, 3, 1, 87, 128, 1, 188, 96, 3, 0, 23, 129,
-        0, 2, 94, 2, 240, 1, 61, 0, 176, 84, 7, 0, 16, 224, 0, 136, 94, 11,
-        0, 112, 225, 0, 2, 222, 2, 240, 0, 0, 0, 104, 42, 243, 0, 20, 133, 2,
-        4, 222, 175, 0, 20, 133, 0, 232, 68, 101, 87, 151, 164, 0, 110, 94,
-        145, 84, 244, 133, 0, 136, 94, 147, 0, 55, 164, 0, 109, 94, 145, 84,
-        244, 133, 0, 2, 94, 2, 240, 20, 224, 3, 191, 222, 2, 240, 20, 146, 0,
-        232, 68, 101, 87, 151, 164, 0, 136, 94, 147, 0, 55, 164, 0, 2, 94, 2,
-        240, 20, 224, 3, 191, 222, 2, 240, 20, 146, 2, 132, 222, 175, 0, 20,
-        137, 1, 129, 224, 2, 245, 215, 174, 3, 191, 222, 2, 240, 20, 146, 0,
-        104, 43, 103, 0, 20, 142, 0, 224, 68, 101, 91, 42, 211, 0, 104, 43,
-        107, 0, 20, 141, 0, 224, 68, 101, 90, 74, 211, 0, 2, 222, 2, 240, 0,
-        0, 1, 128, 96, 6, 247, 247, 191, 0, 104, 42, 243, 0, 20, 146, 0, 232,
-        68, 101, 87, 151, 164, 0, 2, 94, 2, 240, 20, 224, 1, 132, 96, 2, 245,
-        151, 172, 1, 188, 96, 3, 0, 10, 188, 1, 188, 96, 3, 0, 10, 211, 1, 188,
-        96, 3, 0, 10, 187, 1, 4, 222, 175, 0, 23, 161, 1, 132, 94, 134, 245,
-        183, 173, 2, 132, 222, 175, 0, 20, 155, 1, 128, 96, 6, 13, 144, 108,
-        0, 2, 222, 2, 240, 0, 0, 2, 133, 172, 35, 0, 20, 183, 2, 3, 197, 115,
-        0, 20, 183, 0, 176, 42, 143, 0, 23, 163, 2, 2, 172, 35, 0, 20, 160,
-        0, 176, 42, 175, 0, 23, 163, 2, 2, 222, 187, 0, 20, 162, 0, 176, 42,
-        139, 0, 23, 163, 0, 224, 68, 102, 244, 106, 179, 1, 133, 224, 5, 97,
-        11, 8, 0, 176, 68, 103, 0, 11, 3, 2, 6, 171, 211, 0, 20, 170, 0, 107,
-        172, 66, 35, 52, 169, 0, 224, 68, 103, 1, 75, 16, 1, 131, 224, 2, 43,
-        145, 92, 3, 191, 222, 2, 240, 20, 183, 1, 131, 224, 2, 43, 145, 92,
-        2, 7, 1, 171, 0, 20, 173, 1, 128, 224, 2, 9, 208, 78, 1, 188, 96, 3,
-        24, 81, 120, 0, 176, 69, 227, 0, 24, 0, 1, 131, 96, 2, 47, 49, 121,
-        2, 7, 222, 179, 0, 20, 180, 1, 135, 224, 2, 245, 151, 172, 0, 225, 14,
-        219, 0, 35, 182, 0, 224, 142, 223, 0, 3, 183, 0, 104, 176, 55, 0, 20,
-        183, 0, 176, 68, 103, 0, 12, 13, 0, 176, 68, 107, 0, 12, 14, 0, 2, 222,
-        2, 240, 0, 0, 2, 2, 222, 179, 0, 20, 195, 2, 6, 171, 211, 0, 20, 193,
-        1, 139, 96, 14, 43, 145, 92, 2, 135, 171, 211, 0, 20, 190, 1, 130, 96,
-        2, 9, 208, 78, 3, 191, 222, 2, 240, 20, 191, 1, 130, 96, 6, 9, 208,
-        78, 0, 2, 94, 2, 240, 17, 20, 3, 191, 222, 2, 240, 20, 217, 1, 131,
-        96, 6, 43, 145, 92, 0, 2, 94, 2, 240, 17, 20, 2, 3, 197, 115, 0, 20,
-        200, 2, 132, 222, 175, 0, 20, 200, 2, 129, 222, 187, 0, 20, 200, 2,
-        128, 94, 255, 0, 20, 200, 2, 4, 94, 183, 0, 20, 223, 2, 6, 171, 211,
-        0, 20, 207, 1, 139, 96, 14, 43, 145, 92, 2, 135, 171, 211, 0, 20, 205,
-        1, 130, 96, 2, 9, 208, 78, 3, 191, 222, 2, 240, 20, 206, 1, 130, 96,
-        6, 9, 208, 78, 3, 191, 222, 2, 240, 20, 217, 1, 139, 96, 14, 43, 145,
-        92, 1, 188, 96, 3, 24, 81, 120, 0, 176, 69, 227, 0, 24, 0, 1, 139, 43,
-        46, 47, 49, 121, 0, 104, 48, 55, 0, 20, 217, 0, 233, 68, 101, 129, 183,
-        166, 0, 232, 196, 105, 129, 215, 187, 0, 225, 14, 226, 244, 195, 184,
-        0, 224, 142, 230, 247, 99, 185, 1, 188, 96, 3, 0, 12, 13, 1, 131, 224,
-        1, 97, 11, 8, 1, 132, 96, 6, 245, 183, 173, 1, 132, 224, 2, 245, 119,
-        171, 1, 188, 96, 3, 0, 10, 187, 1, 132, 96, 2, 245, 151, 172, 1, 133,
-        224, 1, 97, 11, 8, 0, 2, 222, 2, 240, 0, 0, 0, 104, 43, 91, 0, 20, 226,
-        0, 176, 43, 91, 0, 23, 164, 0, 109, 94, 145, 85, 84, 228, 0, 176, 42,
-        171, 0, 23, 164, 0, 136, 43, 7, 0, 55, 165, 0, 232, 43, 10, 244, 170,
-        194, 0, 136, 94, 147, 0, 55, 164, 0, 224, 43, 10, 244, 138, 194, 0,
-        144, 43, 11, 0, 170, 193, 0, 176, 43, 7, 0, 10, 167, 0, 2, 222, 2, 240,
-        0, 0, 3, 160, 222, 2, 240, 20, 238, 2, 0, 66, 3, 0, 20, 238, 0, 2, 94,
-        2, 240, 12, 215, 1, 131, 224, 5, 97, 11, 8, 1, 132, 96, 2, 245, 183,
-        173, 1, 132, 224, 6, 245, 119, 171, 1, 188, 96, 3, 0, 10, 187, 1, 132,
-        96, 2, 245, 151, 172, 0, 176, 68, 103, 0, 10, 188, 0, 2, 222, 2, 240,
-        0, 0, 1, 12, 129, 67, 0, 23, 161, 1, 188, 96, 3, 0, 80, 138, 0, 104,
-        94, 7, 0, 20, 255, 0, 104, 222, 135, 0, 52, 255, 1, 188, 96, 3, 0, 176,
-        138, 0, 104, 94, 7, 0, 52, 255, 2, 130, 222, 3, 0, 20, 255, 1, 188,
-        96, 3, 0, 144, 138, 2, 131, 222, 3, 0, 20, 255, 0, 224, 96, 10, 244,
-        208, 138, 0, 104, 94, 7, 0, 21, 7, 1, 144, 66, 42, 161, 48, 138, 0,
-        104, 94, 7, 0, 53, 7, 1, 144, 66, 42, 160, 16, 138, 1, 9, 222, 3, 0,
-        23, 162, 1, 143, 94, 138, 17, 80, 138, 0, 104, 94, 139, 0, 21, 7, 1,
-        145, 224, 14, 17, 80, 138, 0, 2, 222, 2, 240, 0, 0, 1, 9, 222, 3, 0,
-        23, 164, 0, 224, 90, 6, 244, 151, 165, 0, 144, 94, 150, 244, 151, 165,
-        2, 3, 222, 3, 0, 21, 15, 2, 130, 222, 3, 0, 21, 15, 1, 188, 97, 239,
-        8, 87, 166, 0, 128, 222, 150, 244, 215, 165, 1, 22, 222, 135, 0, 23,
-        163, 0, 136, 94, 135, 0, 119, 161, 0, 225, 94, 135, 2, 215, 161, 0,
-        224, 222, 143, 0, 23, 163, 1, 188, 96, 3, 0, 23, 162, 2, 14, 94, 3,
-        0, 21, 22, 1, 188, 96, 3, 0, 55, 162, 0, 144, 94, 150, 244, 87, 165,
-        0, 128, 222, 150, 244, 55, 161, 0, 225, 65, 183, 255, 247, 166, 0, 225,
-        222, 135, 1, 247, 161, 0, 128, 222, 150, 244, 119, 163, 0, 225, 222,
-        134, 13, 183, 161, 0, 224, 222, 143, 0, 23, 163, 1, 122, 94, 134, 244,
-        119, 161, 0, 136, 94, 134, 244, 87, 161, 0, 176, 94, 135, 0, 23, 162,
-        2, 135, 222, 3, 0, 21, 35, 0, 136, 94, 135, 0, 87, 161, 3, 191, 222,
-        2, 240, 21, 48, 2, 135, 94, 3, 0, 21, 42, 1, 188, 99, 155, 12, 215,
-        165, 0, 128, 222, 134, 244, 183, 161, 0, 225, 65, 183, 255, 247, 165,
-        0, 224, 222, 135, 0, 23, 161, 0, 136, 94, 135, 0, 87, 161, 3, 191, 222,
-        2, 240, 21, 48, 0, 136, 94, 135, 0, 87, 161, 1, 188, 99, 155, 12, 247,
-        165, 0, 128, 222, 134, 244, 183, 161, 1, 188, 98, 3, 0, 23, 165, 0,
-        225, 65, 182, 244, 183, 165, 0, 224, 222, 135, 0, 23, 161, 0, 224, 94,
-        132, 0, 215, 161, 0, 2, 222, 2, 240, 0, 0, 2, 0, 31, 247, 0, 0, 16,
-        2, 130, 222, 83, 0, 21, 56, 1, 136, 96, 2, 4, 144, 36, 0, 224, 32, 146,
-        243, 8, 36, 0, 232, 32, 142, 243, 8, 35, 3, 191, 222, 2, 240, 11, 13,
-        1, 184, 96, 22, 4, 144, 36, 1, 188, 96, 3, 1, 208, 37, 3, 5, 94, 2,
-        240, 21, 73, 2, 135, 192, 55, 0, 12, 72, 3, 134, 222, 2, 240, 12, 75,
-        0, 2, 94, 2, 240, 17, 57, 3, 92, 222, 2, 240, 21, 58, 0, 216, 64, 155,
-        1, 23, 161, 0, 224, 94, 135, 2, 55, 152, 0, 168, 94, 99, 0, 119, 152,
-        1, 2, 222, 83, 0, 23, 161, 1, 130, 224, 2, 242, 151, 148, 1, 136, 222,
-        132, 255, 167, 253, 0, 110, 160, 142, 243, 21, 73, 0, 232, 94, 99, 1,
-        208, 37, 1, 184, 96, 6, 4, 144, 36, 3, 191, 222, 2, 240, 0, 2, 1, 129,
-        96, 4, 255, 167, 253, 1, 184, 96, 10, 4, 144, 36, 3, 191, 222, 2, 240,
-        0, 2, 2, 40, 94, 135, 0, 21, 95, 0, 176, 65, 147, 0, 23, 164, 0, 224,
-        65, 147, 0, 112, 100, 1, 10, 94, 135, 0, 23, 162, 0, 232, 65, 146, 244,
-        80, 99, 1, 24, 94, 135, 0, 23, 161, 0, 232, 96, 66, 244, 55, 162, 0,
-        136, 86, 2, 244, 54, 0, 0, 104, 65, 142, 244, 149, 91, 0, 232, 65, 143,
-        0, 48, 99, 0, 232, 65, 147, 0, 48, 100, 0, 104, 94, 139, 2, 21, 83,
-        0, 144, 86, 2, 244, 87, 163, 0, 176, 88, 6, 244, 118, 1, 3, 191, 222,
-        2, 240, 21, 83, 0, 104, 65, 146, 244, 149, 95, 0, 232, 65, 147, 0, 48,
-        100, 1, 188, 96, 3, 0, 22, 0, 3, 191, 222, 2, 240, 21, 91, 0, 176, 94,
-        135, 0, 23, 161, 0, 2, 222, 2, 240, 0, 0, 1, 128, 96, 2, 134, 20, 48,
-        0, 176, 80, 203, 0, 16, 101, 1, 56, 80, 131, 0, 23, 161, 0, 104, 222,
-        59, 6, 53, 103, 0, 224, 90, 51, 0, 54, 140, 0, 110, 218, 50, 244, 32,
-        16, 0, 176, 90, 11, 0, 23, 162, 1, 188, 99, 255, 31, 247, 163, 0, 176,
-        80, 207, 0, 16, 100, 0, 110, 218, 50, 244, 53, 108, 0, 176, 90, 55,
-        0, 23, 163, 0, 176, 88, 19, 0, 23, 130, 1, 188, 96, 3, 0, 22, 4, 1,
-        188, 96, 27, 31, 215, 182, 1, 2, 208, 199, 0, 23, 161, 0, 224, 65, 150,
-        244, 48, 101, 0, 224, 80, 203, 0, 208, 100, 1, 188, 96, 3, 0, 23, 180,
-        1, 188, 96, 3, 0, 23, 128, 1, 188, 96, 3, 0, 55, 129, 1, 135, 96, 4,
-        3, 16, 160, 0, 144, 82, 51, 0, 151, 164, 0, 224, 65, 135, 1, 183, 181,
-        0, 104, 94, 210, 240, 85, 147, 0, 224, 94, 218, 246, 144, 99, 0, 32,
-        216, 2, 240, 53, 135, 2, 2, 80, 199, 0, 21, 141, 0, 144, 86, 3, 0, 151,
-        161, 0, 232, 94, 134, 244, 151, 161, 1, 158, 96, 2, 244, 55, 161, 0,
-        109, 222, 135, 8, 21, 141, 1, 10, 94, 135, 0, 23, 162, 1, 218, 96, 2,
-        244, 55, 161, 0, 224, 94, 214, 244, 80, 99, 0, 136, 96, 6, 244, 55,
-        161, 0, 32, 86, 2, 244, 53, 141, 0, 176, 88, 2, 240, 54, 0, 0, 224,
-        90, 43, 0, 54, 138, 0, 106, 222, 210, 244, 117, 137, 0, 104, 222, 210,
-        240, 21, 142, 0, 224, 94, 3, 0, 55, 128, 0, 104, 94, 3, 0, 53, 142,
-        1, 134, 224, 4, 3, 16, 160, 3, 191, 222, 2, 240, 21, 142, 0, 106, 222,
-        210, 244, 117, 137, 0, 224, 94, 211, 0, 55, 180, 0, 208, 94, 7, 0, 55,
-        129, 2, 152, 94, 211, 0, 21, 120, 0, 224, 65, 147, 0, 48, 100, 3, 191,
-        222, 2, 240, 21, 120, 0, 104, 94, 3, 0, 0, 16, 3, 191, 222, 2, 240,
-        6, 194, 2, 130, 208, 199, 0, 21, 157, 0, 176, 42, 55, 0, 23, 161, 1,
-        184, 42, 50, 244, 54, 132, 1, 2, 80, 19, 0, 22, 133, 1, 60, 80, 131,
-        0, 23, 161, 0, 176, 80, 167, 0, 23, 164, 0, 109, 90, 50, 244, 53, 166,
-        1, 130, 224, 6, 134, 52, 49, 2, 136, 80, 43, 0, 21, 162, 0, 176, 90,
-        51, 0, 23, 161, 1, 158, 94, 134, 132, 244, 39, 1, 131, 96, 6, 134, 52,
-        49, 0, 2, 222, 2, 240, 0, 0, 0, 176, 80, 115, 0, 23, 161, 1, 184, 80,
-        110, 244, 54, 132, 1, 6, 208, 7, 0, 22, 133, 0, 176, 80, 171, 0, 23,
-        164, 0, 208, 96, 6, 192, 151, 128, 0, 224, 65, 151, 0, 215, 181, 1,
-        10, 88, 19, 0, 23, 161, 0, 224, 94, 214, 244, 55, 181, 0, 176, 88, 15,
-        0, 16, 99, 1, 22, 86, 3, 0, 23, 129, 0, 104, 216, 19, 0, 21, 187, 1,
-        20, 0, 99, 0, 23, 161, 0, 104, 222, 135, 0, 21, 177, 0, 136, 1, 59,
-        1, 22, 128, 3, 191, 222, 2, 240, 21, 182, 0, 104, 222, 135, 0, 117,
-        180, 0, 160, 1, 59, 224, 22, 128, 3, 191, 222, 2, 240, 21, 182, 0, 224,
-        94, 135, 9, 112, 98, 0, 136, 84, 3, 1, 22, 128, 0, 232, 90, 3, 48, 22,
-        128, 1, 188, 96, 3, 0, 22, 129, 1, 188, 96, 3, 0, 22, 130, 1, 188, 96,
-        3, 0, 22, 131, 3, 191, 222, 2, 240, 21, 192, 0, 224, 65, 142, 192, 144,
-        99, 0, 110, 193, 142, 192, 53, 192, 0, 232, 65, 142, 192, 48, 99, 0,
-        232, 88, 3, 0, 55, 161, 0, 224, 65, 142, 244, 48, 99, 1, 56, 80, 163,
-        0, 23, 165, 0, 104, 88, 19, 3, 245, 219, 0, 104, 65, 142, 192, 85, 219,
-        0, 109, 218, 10, 244, 181, 219, 1, 22, 86, 3, 0, 23, 161, 0, 104, 222,
-        134, 240, 53, 219, 1, 88, 86, 3, 0, 23, 161, 0, 224, 94, 135, 13, 215,
-        162, 0, 176, 94, 215, 0, 16, 98, 0, 32, 222, 2, 160, 21, 210, 0, 224,
-        94, 134, 208, 55, 163, 0, 224, 94, 142, 208, 119, 163, 0, 109, 90, 2,
-        244, 85, 219, 0, 110, 94, 142, 244, 149, 219, 0, 232, 96, 2, 244, 54,
-        131, 0, 176, 94, 143, 0, 22, 129, 0, 160, 90, 15, 0, 118, 131, 0, 224,
-        90, 11, 0, 54, 130, 0, 232, 90, 2, 244, 86, 128, 0, 208, 94, 3, 0, 55,
-        128, 0, 224, 88, 19, 0, 54, 4, 0, 224, 65, 143, 0, 48, 99, 2, 152, 88,
-        19, 0, 21, 216, 0, 224, 94, 215, 0, 55, 181, 0, 110, 193, 142, 192,
-        53, 193, 0, 176, 88, 3, 0, 16, 99, 3, 191, 222, 2, 240, 21, 193, 0,
-        176, 88, 19, 0, 23, 161, 0, 104, 218, 55, 0, 21, 222, 0, 176, 94, 135,
-        0, 22, 141, 0, 109, 222, 134, 209, 181, 224, 0, 176, 94, 135, 0, 22,
-        141, 0, 2, 222, 2, 240, 0, 0, 1, 188, 96, 3, 0, 23, 161, 1, 135, 96,
-        4, 3, 16, 160, 1, 188, 96, 3, 9, 144, 181, 0, 176, 0, 99, 0, 240, 180,
-        1, 188, 96, 87, 3, 16, 182, 1, 188, 96, 3, 0, 144, 181, 0, 176, 0, 99,
-        0, 176, 180, 0, 176, 66, 211, 0, 24, 0, 3, 23, 222, 2, 240, 21, 233,
-        3, 151, 222, 2, 240, 21, 234, 0, 176, 42, 51, 0, 20, 47, 1, 142, 224,
-        12, 3, 16, 160, 0, 109, 222, 2, 209, 181, 240, 0, 232, 90, 54, 240,
-        22, 141, 3, 191, 222, 2, 240, 21, 242, 1, 188, 96, 3, 0, 22, 140, 1,
-        188, 96, 3, 0, 22, 141, 0, 110, 90, 58, 240, 21, 245, 1, 188, 96, 3,
-        0, 22, 142, 3, 191, 222, 2, 240, 21, 246, 0, 232, 90, 58, 240, 22, 142,
-        0, 176, 88, 7, 0, 23, 161, 0, 224, 88, 14, 240, 22, 3, 0, 110, 216,
-        14, 244, 53, 252, 0, 232, 94, 134, 192, 23, 161, 0, 232, 88, 14, 244,
-        54, 3, 0, 232, 88, 15, 0, 54, 3, 1, 24, 94, 3, 0, 23, 161, 0, 109, 222,
-        3, 2, 22, 4, 0, 232, 96, 66, 244, 55, 162, 0, 144, 90, 26, 244, 54,
-        134, 0, 136, 90, 30, 244, 87, 162, 0, 144, 90, 30, 244, 54, 135, 0,
-        176, 90, 26, 244, 86, 134, 3, 191, 222, 2, 240, 22, 6, 0, 144, 90, 30,
-        244, 54, 134, 1, 188, 96, 3, 0, 22, 135, 0, 2, 222, 2, 240, 0, 0, 1,
-        88, 96, 3, 0, 16, 42, 1, 184, 96, 10, 4, 144, 36, 1, 188, 96, 3, 2,
-        144, 4, 1, 137, 224, 2, 13, 144, 108, 0, 2, 222, 2, 240, 0, 0, 2, 0,
-        222, 83, 0, 22, 22, 1, 188, 96, 23, 7, 119, 161, 0, 2, 94, 2, 240, 1,
-        33, 0, 176, 64, 103, 0, 23, 162, 0, 176, 94, 139, 0, 87, 162, 0, 2,
-        94, 2, 240, 1, 37, 1, 188, 96, 3, 3, 55, 128, 1, 188, 96, 3, 0, 23,
-        129, 0, 2, 94, 2, 240, 16, 53, 0, 2, 222, 2, 240, 0, 0, 1, 188, 96,
-        3, 3, 55, 128, 0, 2, 94, 2, 240, 16, 48, 1, 131, 224, 6, 240, 55, 129,
-        1, 129, 224, 6, 240, 55, 129, 0, 2, 94, 2, 240, 16, 53, 0, 176, 94,
-        7, 0, 23, 162, 0, 224, 68, 103, 11, 87, 161, 0, 107, 68, 102, 244, 54,
-        29, 1, 188, 96, 3, 17, 55, 128, 0, 2, 94, 2, 240, 16, 48, 1, 128, 96,
-        6, 240, 55, 129, 0, 2, 94, 2, 240, 16, 53, 1, 188, 96, 3, 0, 151, 128,
-        0, 2, 94, 2, 240, 16, 48, 1, 128, 96, 6, 240, 55, 129, 0, 2, 94, 2,
-        240, 16, 53, 0, 224, 68, 103, 1, 87, 161, 0, 107, 68, 102, 244, 54,
-        39, 1, 188, 96, 3, 3, 55, 128, 1, 160, 96, 126, 244, 87, 129, 0, 2,
-        94, 2, 240, 16, 53, 0, 224, 68, 103, 7, 151, 161, 0, 107, 68, 102, 244,
-        54, 44, 1, 188, 96, 3, 17, 87, 128, 0, 2, 94, 2, 240, 16, 48, 1, 132,
-        96, 6, 240, 55, 129, 0, 2, 94, 2, 240, 16, 53, 0, 176, 94, 7, 0, 23,
-        162, 1, 188, 96, 3, 10, 55, 128, 0, 2, 94, 2, 240, 16, 48, 1, 128, 96,
-        2, 240, 55, 129, 0, 2, 94, 2, 240, 16, 53, 0, 224, 68, 103, 0, 55, 161,
-        0, 107, 68, 102, 244, 54, 55, 1, 128, 96, 6, 240, 55, 129, 0, 2, 94,
-        2, 240, 16, 53, 1, 188, 96, 3, 8, 87, 128, 0, 2, 94, 2, 240, 16, 48,
-        1, 138, 96, 2, 240, 55, 129, 0, 2, 94, 2, 240, 16, 53, 0, 224, 68, 103,
-        0, 55, 161, 0, 107, 68, 102, 244, 54, 63, 1, 138, 96, 14, 240, 55, 129,
-        0, 2, 94, 2, 240, 16, 53, 0, 224, 68, 103, 6, 87, 161, 0, 107, 68, 102,
-        244, 54, 67, 1, 188, 96, 3, 12, 183, 128, 0, 2, 94, 2, 240, 16, 48,
-        2, 128, 222, 7, 0, 22, 45, 1, 188, 96, 3, 17, 87, 128, 1, 132, 96, 2,
-        244, 87, 129, 0, 2, 94, 2, 240, 16, 53, 1, 188, 96, 3, 0, 55, 163, 2,
-        6, 171, 211, 0, 22, 78, 2, 132, 197, 175, 0, 22, 90, 3, 191, 222, 2,
-        240, 22, 79, 2, 128, 69, 111, 0, 22, 90, 1, 188, 96, 3, 0, 23, 163,
-        1, 139, 96, 14, 43, 145, 92, 1, 188, 96, 3, 24, 81, 120, 0, 176, 69,
-        227, 0, 24, 0, 1, 139, 43, 46, 47, 49, 121, 0, 104, 48, 55, 0, 22, 90,
-        0, 233, 68, 101, 129, 183, 166, 0, 232, 196, 105, 129, 215, 187, 0,
-        225, 14, 226, 244, 195, 184, 0, 224, 142, 230, 247, 99, 185, 1, 188,
-        96, 3, 0, 12, 13, 1, 188, 96, 23, 7, 119, 161, 0, 2, 94, 2, 240, 1,
-        33, 0, 176, 64, 103, 0, 23, 162, 0, 168, 94, 139, 0, 87, 162, 0, 2,
-        94, 2, 240, 1, 37, 0, 224, 68, 103, 1, 87, 161, 0, 107, 68, 102, 244,
-        54, 96, 1, 188, 96, 3, 1, 183, 161, 1, 188, 96, 3, 4, 119, 162, 0, 2,
-        94, 2, 240, 1, 37, 1, 188, 96, 19, 10, 247, 161, 1, 188, 96, 3, 0, 23,
-        162, 0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 3, 1, 23, 164, 0, 232, 94,
-        147, 0, 55, 164, 1, 188, 96, 3, 1, 215, 161, 0, 176, 94, 147, 0, 23,
-        162, 0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 19, 10, 215, 161, 1, 188,
-        96, 3, 0, 23, 162, 0, 2, 94, 2, 240, 1, 37, 0, 104, 222, 147, 0, 22,
-        104, 0, 104, 94, 143, 0, 22, 114, 0, 2, 222, 2, 240, 0, 0, 1, 188, 96,
-        39, 12, 183, 161, 1, 188, 96, 3, 1, 151, 162, 0, 2, 94, 2, 240, 1, 37,
-        1, 188, 96, 39, 14, 183, 161, 1, 188, 96, 3, 1, 55, 162, 0, 2, 94, 2,
-        240, 1, 37, 1, 188, 96, 3, 6, 87, 164, 1, 188, 96, 3, 0, 119, 163, 1,
-        188, 96, 19, 9, 87, 161, 0, 2, 94, 2, 240, 1, 33, 1, 128, 96, 6, 3,
-        55, 162, 0, 2, 94, 2, 240, 1, 37, 1, 128, 96, 2, 244, 87, 162, 0, 2,
-        94, 2, 240, 1, 37, 0, 224, 68, 102, 244, 151, 161, 0, 107, 68, 102,
-        244, 54, 129, 0, 232, 94, 143, 0, 55, 163, 0, 104, 94, 143, 0, 22, 136,
-        1, 188, 96, 3, 3, 23, 164, 1, 188, 96, 39, 15, 23, 161, 0, 2, 94, 2,
-        240, 1, 33, 0, 104, 192, 103, 31, 246, 122, 1, 188, 96, 39, 14, 183,
-        161, 1, 188, 96, 3, 1, 247, 162, 0, 2, 94, 2, 240, 1, 37, 0, 2, 222,
-        2, 240, 0, 0, 0, 2, 222, 2, 240, 0, 0, 2, 0, 222, 83, 0, 22, 158, 1,
-        188, 96, 19, 14, 119, 161, 0, 2, 94, 2, 240, 1, 33, 0, 160, 64, 103,
-        63, 236, 53, 1, 188, 96, 19, 20, 151, 161, 0, 2, 94, 2, 240, 1, 33,
-        1, 150, 224, 2, 3, 55, 162, 0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 19,
-        9, 183, 161, 0, 2, 94, 2, 240, 1, 33, 1, 135, 96, 2, 3, 55, 162, 0,
-        2, 94, 2, 240, 1, 37, 1, 188, 96, 19, 9, 151, 161, 0, 2, 94, 2, 240,
-        1, 33, 1, 135, 96, 6, 3, 55, 162, 0, 2, 94, 2, 240, 1, 37, 0, 2, 222,
-        2, 240, 0, 0, 1, 188, 96, 115, 0, 23, 163, 1, 188, 96, 19, 20, 151,
-        161, 0, 2, 94, 2, 240, 1, 33, 0, 160, 64, 102, 244, 119, 164, 1, 150,
-        224, 30, 244, 151, 163, 0, 176, 94, 141, 134, 183, 162, 0, 2, 94, 2,
-        240, 1, 37, 1, 188, 96, 19, 9, 183, 161, 0, 2, 94, 2, 240, 1, 33, 1,
-        135, 96, 6, 3, 55, 162, 0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 19, 9,
-        151, 161, 0, 2, 94, 2, 240, 1, 33, 1, 135, 96, 6, 3, 55, 162, 0, 2,
-        94, 2, 240, 1, 37, 0, 2, 222, 2, 240, 0, 0, 1, 188, 96, 3, 16, 16, 71,
-        0, 176, 0, 79, 0, 23, 129, 1, 188, 96, 3, 0, 55, 128, 0, 176, 0, 75,
-        0, 23, 161, 0, 176, 0, 159, 0, 55, 162, 0, 2, 94, 2, 240, 1, 37, 1,
-        188, 96, 19, 26, 23, 161, 0, 2, 94, 2, 240, 1, 33, 0, 176, 64, 103,
-        0, 55, 162, 0, 2, 94, 2, 240, 1, 37, 0, 2, 94, 2, 240, 1, 33, 2, 128,
-        64, 103, 0, 22, 184, 0, 176, 0, 75, 0, 23, 161, 0, 176, 0, 159, 0, 23,
-        162, 0, 2, 94, 2, 240, 1, 37, 0, 109, 222, 0, 2, 150, 194, 0, 224, 68,
-        103, 0, 119, 162, 0, 104, 196, 102, 244, 86, 191, 0, 224, 94, 3, 0,
-        55, 128, 3, 191, 222, 2, 240, 22, 178, 0, 109, 222, 4, 3, 54, 195, 3,
-        191, 222, 2, 240, 12, 132, 0, 104, 222, 147, 0, 22, 200, 0, 224, 94,
-        3, 0, 87, 162, 1, 9, 94, 139, 0, 23, 161, 3, 191, 222, 2, 240, 22, 208,
-        0, 104, 222, 147, 0, 54, 204, 1, 16, 94, 3, 0, 23, 162, 0, 224, 94,
-        139, 0, 151, 161, 3, 191, 222, 2, 240, 22, 208, 1, 48, 94, 3, 0, 23,
-        162, 0, 224, 94, 139, 1, 151, 161, 0, 109, 94, 135, 5, 150, 208, 1,
-        188, 96, 3, 5, 151, 161, 0, 2, 222, 2, 240, 0, 0, 0, 104, 43, 203, 0,
-        22, 214, 0, 176, 43, 243, 0, 23, 161, 0, 224, 94, 133, 95, 183, 161,
-        0, 107, 222, 134, 35, 54, 214, 1, 134, 224, 6, 247, 247, 191, 0, 2,
-        222, 2, 240, 0, 0, 0, 104, 31, 51, 0, 22, 230, 2, 6, 171, 211, 0, 22,
-        219, 2, 132, 197, 175, 0, 22, 230, 3, 191, 222, 2, 240, 22, 220, 2,
-        128, 69, 111, 0, 22, 230, 2, 133, 197, 35, 0, 22, 230, 0, 104, 31, 51,
-        0, 54, 228, 0, 176, 31, 199, 0, 23, 161, 0, 2, 94, 2, 240, 1, 33, 0,
-        168, 64, 100, 249, 215, 162, 0, 176, 94, 136, 249, 183, 162, 0, 2, 94,
-        2, 240, 1, 37, 3, 191, 222, 2, 240, 22, 230, 0, 168, 65, 56, 249, 215,
-        161, 0, 176, 94, 132, 249, 176, 78, 0, 2, 222, 2, 240, 0, 0, 2, 6, 171,
-        211, 0, 22, 234, 2, 132, 197, 175, 0, 22, 230, 3, 191, 222, 2, 240,
-        22, 235, 2, 128, 69, 111, 0, 22, 230, 1, 88, 96, 3, 0, 16, 42, 1, 137,
-        224, 2, 13, 144, 108, 1, 188, 96, 3, 0, 144, 4, 0, 176, 64, 19, 0, 23,
-        161, 0, 2, 222, 2, 240, 0, 0, 1, 130, 96, 6, 15, 16, 120, 2, 7, 193,
-        227, 0, 22, 241, 1, 188, 96, 3, 12, 23, 163, 1, 188, 96, 3, 0, 144,
-        118, 1, 188, 96, 3, 0, 16, 119, 0, 2, 94, 2, 240, 1, 46, 1, 188, 96,
-        3, 12, 151, 163, 0, 2, 94, 2, 240, 1, 41, 0, 136, 96, 17, 134, 55, 161,
-        1, 188, 94, 134, 14, 240, 119, 0, 2, 94, 2, 240, 1, 46, 1, 188, 96,
-        3, 12, 23, 163, 1, 188, 96, 3, 0, 176, 118, 1, 188, 96, 3, 0, 16, 119,
-        0, 2, 94, 2, 240, 1, 46, 1, 188, 96, 3, 12, 151, 163, 0, 2, 94, 2, 240,
-        1, 41, 0, 136, 96, 5, 134, 55, 161, 1, 188, 94, 134, 14, 208, 118, 0,
-        2, 94, 2, 240, 1, 46, 1, 188, 96, 3, 0, 23, 163, 0, 2, 94, 2, 240, 1,
-        41, 1, 133, 96, 6, 14, 208, 118, 0, 2, 94, 2, 240, 1, 46, 1, 188, 96,
-        3, 12, 23, 163, 1, 188, 96, 3, 0, 48, 118, 1, 188, 96, 3, 0, 16, 119,
-        0, 2, 94, 2, 240, 1, 46, 1, 188, 96, 3, 12, 151, 163, 0, 2, 94, 2, 240,
-        1, 41, 1, 172, 96, 162, 14, 240, 119, 0, 2, 94, 2, 240, 1, 46, 1, 188,
-        96, 3, 0, 23, 163, 0, 2, 94, 2, 240, 1, 41, 1, 133, 96, 6, 14, 208,
-        118, 0, 2, 94, 2, 240, 1, 46, 1, 188, 96, 3, 12, 23, 163, 1, 188, 96,
-        3, 0, 48, 118, 1, 188, 96, 3, 0, 16, 119, 0, 2, 94, 2, 240, 1, 46, 1,
-        188, 96, 3, 12, 151, 163, 0, 2, 94, 2, 240, 1, 41, 1, 172, 96, 2, 14,
-        240, 119, 0, 2, 94, 2, 240, 1, 46, 1, 188, 96, 3, 0, 23, 163, 0, 2,
-        94, 2, 240, 1, 41, 1, 133, 96, 6, 14, 208, 118, 0, 2, 94, 2, 240, 1,
-        46, 1, 130, 96, 2, 15, 16, 120, 0, 2, 222, 2, 240, 0, 0, 1, 188, 96,
-        19, 8, 23, 161, 0, 2, 94, 2, 240, 1, 33, 1, 128, 96, 2, 3, 55, 162,
-        0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 3, 0, 55, 161, 0, 2, 94, 2, 240,
-        1, 33, 1, 136, 96, 14, 3, 55, 162, 0, 104, 176, 199, 0, 23, 43, 1, 136,
-        96, 10, 3, 55, 162, 0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 27, 6, 87,
-        161, 0, 2, 94, 2, 240, 1, 33, 1, 136, 48, 198, 3, 55, 162, 0, 2, 94,
-        2, 240, 1, 37, 0, 2, 94, 2, 240, 22, 240, 1, 188, 96, 19, 8, 23, 161,
-        0, 2, 94, 2, 240, 1, 33, 1, 128, 96, 6, 3, 55, 162, 0, 2, 94, 2, 240,
-        1, 37, 0, 2, 222, 2, 240, 0, 0, 1, 188, 96, 67, 8, 144, 230, 0, 2, 94,
-        2, 240, 1, 100, 1, 188, 96, 79, 17, 16, 228, 1, 144, 96, 10, 9, 16,
-        72, 1, 188, 96, 3, 0, 0, 6, 1, 188, 96, 3, 1, 215, 130, 1, 210, 222,
-        8, 119, 240, 224, 0, 176, 15, 3, 0, 16, 225, 0, 176, 0, 71, 0, 16, 134,
-        0, 176, 15, 31, 0, 16, 138, 1, 188, 96, 3, 0, 55, 129, 0, 2, 94, 2,
-        240, 15, 115, 1, 188, 96, 3, 0, 16, 187, 1, 188, 97, 3, 0, 16, 128,
-        1, 130, 96, 6, 16, 48, 129, 3, 208, 94, 2, 240, 3, 137, 0, 2, 222, 2,
-        240, 0, 0, 0, 104, 31, 131, 0, 23, 157, 2, 128, 66, 3, 0, 23, 157, 2,
-        133, 197, 35, 0, 23, 157, 0, 104, 31, 143, 0, 55, 157, 0, 104, 31, 139,
-        0, 55, 122, 1, 188, 96, 19, 8, 23, 161, 0, 2, 94, 2, 240, 1, 33, 1,
-        128, 96, 2, 3, 55, 162, 0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 27, 27,
-        87, 161, 0, 2, 94, 2, 240, 1, 33, 0, 176, 64, 103, 0, 12, 54, 1, 130,
-        224, 6, 3, 55, 162, 0, 2, 94, 2, 240, 1, 37, 1, 132, 96, 6, 244, 87,
-        162, 0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 39, 15, 55, 161, 0, 2, 94,
-        2, 240, 1, 33, 0, 176, 64, 103, 0, 12, 55, 1, 136, 96, 6, 3, 55, 162,
-        0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 39, 21, 151, 161, 0, 2, 94, 2,
-        240, 1, 33, 0, 176, 64, 103, 0, 12, 56, 1, 155, 96, 22, 3, 55, 162,
-        1, 128, 96, 6, 244, 87, 162, 0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 19,
-        16, 119, 161, 1, 188, 96, 11, 0, 23, 162, 0, 2, 94, 2, 240, 1, 37, 1,
-        188, 96, 19, 16, 87, 161, 0, 2, 94, 2, 240, 1, 33, 1, 184, 96, 130,
-        3, 55, 162, 0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 19, 16, 55, 161, 0,
-        2, 94, 2, 240, 1, 33, 1, 128, 224, 2, 3, 55, 162, 0, 2, 94, 2, 240,
-        1, 37, 1, 188, 96, 3, 0, 7, 226, 1, 188, 96, 3, 0, 7, 227, 0, 104, 48,
-        239, 0, 23, 114, 0, 224, 68, 101, 135, 103, 225, 3, 191, 222, 2, 240,
-        23, 115, 0, 224, 68, 103, 8, 7, 225, 1, 188, 96, 19, 16, 55, 161, 0,
-        2, 94, 2, 240, 1, 33, 1, 128, 96, 6, 3, 55, 162, 0, 2, 94, 2, 240, 1,
-        37, 1, 188, 96, 3, 0, 39, 226, 0, 2, 94, 2, 240, 1, 33, 2, 0, 64, 103,
-        0, 23, 142, 2, 128, 66, 3, 0, 23, 142, 2, 133, 197, 35, 0, 23, 142,
-        1, 188, 96, 19, 16, 55, 161, 0, 2, 94, 2, 240, 1, 33, 2, 0, 64, 103,
-        0, 23, 129, 0, 108, 196, 100, 252, 55, 122, 0, 224, 48, 231, 0, 44,
-        57, 0, 224, 48, 235, 0, 44, 58, 1, 188, 96, 19, 16, 247, 161, 0, 2,
-        94, 2, 240, 1, 33, 0, 176, 64, 103, 0, 1, 132, 1, 188, 96, 19, 16, 215,
-        161, 0, 2, 94, 2, 240, 1, 33, 0, 176, 64, 103, 0, 1, 133, 1, 188, 96,
-        43, 19, 87, 161, 0, 2, 94, 2, 240, 1, 33, 0, 176, 64, 103, 0, 1, 134,
-        1, 188, 96, 19, 17, 23, 161, 0, 2, 94, 2, 240, 1, 33, 0, 176, 64, 103,
-        0, 1, 135, 1, 188, 96, 39, 21, 151, 161, 0, 176, 48, 227, 0, 23, 162,
-        0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 39, 15, 55, 161, 0, 176, 48, 223,
-        0, 23, 162, 0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 27, 27, 87, 161, 0,
-        176, 48, 219, 0, 23, 162, 0, 2, 94, 2, 240, 1, 37, 1, 188, 96, 19, 8,
-        23, 161, 0, 2, 94, 2, 240, 1, 33, 1, 128, 96, 6, 3, 55, 162, 0, 2, 94,
-        2, 240, 1, 37, 1, 188, 96, 3, 0, 7, 226, 1, 188, 96, 3, 0, 7, 224, 0,
-        176, 94, 135, 0, 23, 161, 0, 2, 222, 2, 240, 0, 0, 1, 188, 96, 3, 0,
-        12, 27, 0, 176, 48, 163, 0, 23, 158, 0, 176, 48, 167, 0, 23, 157, 0,
-        176, 48, 171, 0, 23, 156, 0, 176, 48, 175, 0, 23, 155, 3, 191, 222,
-        2, 240, 9, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 126,
-        192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 126, 192, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 64, 17, 1, 0, 0, 0, 0, 0,
-        128, 22, 1, 0, 128, 0, 0, 0, 128, 22, 1, 0, 128, 3, 0, 0, 128, 22, 0,
-        0, 0, 64, 0, 0, 128, 26, 33, 0, 224, 3, 0, 0, 128, 22, 0, 2, 0, 64,
-        0, 0, 128, 26, 16, 2, 0, 64, 0, 0, 128, 26, 16, 2, 2, 64, 0, 0, 128,
-        26, 97, 0, 224, 3, 0, 0, 128, 22, 16, 2, 0, 64, 0, 0, 128, 26, 97, 1,
-        224, 19, 0, 0, 128, 22, 48, 2, 0, 64, 0, 0, 128, 26, 16, 2, 0, 64, 0,
-        0, 128, 26, 28, 2, 0, 64, 0, 0, 128, 26, 0, 2, 0, 0, 0, 0, 128, 26,
-        28, 10, 0, 64, 0, 0, 128, 26, 28, 10, 32, 64, 0, 0, 128, 26, 31, 202,
-        32, 64, 0, 0, 128, 26, 31, 202, 32, 64, 0, 0, 128, 26, 1, 0, 0, 0, 0,
-        0, 128, 30, 9, 0, 0, 0, 0, 0, 128, 30, 0, 0, 0, 0, 0, 0, 128, 2, 0,
-        0, 0, 0, 0, 0, 128, 2, 0, 0, 0, 0, 0, 0, 128, 2, 8, 0, 0, 0, 0, 0, 128,
-        30, 0, 0, 0, 0, 0, 0, 128, 30, 1, 0, 0, 0, 0, 0, 128, 30, 17, 0, 0,
-        0, 0, 0, 128, 30, 31, 202, 32, 192, 0, 0, 128, 26, 31, 202, 32, 192,
-        0, 0, 128, 26, 95, 202, 32, 192, 0, 0, 128, 26, 176, 100, 0, 0, 0, 0,
-        128, 14, 0, 0, 40, 0, 0, 0, 128, 18, 17, 0, 0, 0, 0, 0, 128, 30, 0,
-        0, 0, 0, 200, 37, 66, 133, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0,
-        64, 1, 0, 0, 0, 0, 0, 0, 64, 1, 95, 202, 32, 64, 0, 0, 64, 25, 31, 202,
-        32, 64, 0, 0, 64, 25, 1, 0, 0, 0, 0, 0, 64, 29, 1, 0, 0, 0, 0, 0, 64,
-        29, 1, 0, 0, 0, 0, 0, 64, 29, 9, 0, 0, 0, 0, 0, 64, 29, 31, 194, 32,
-        64, 0, 0, 64, 25, 15, 0, 0, 0, 0, 0, 64, 29, 31, 194, 32, 192, 0, 0,
-        64, 25, 27, 194, 32, 192, 0, 0, 64, 25, 32, 125, 0, 0, 0, 0, 64, 13,
-        0, 0, 32, 0, 0, 0, 64, 17, 0, 0, 0, 0, 51, 4, 66, 137, 0, 0, 0, 0, 0,
-        0, 64, 1, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 64, 1, 27, 194,
-        32, 64, 0, 0, 64, 25, 9, 0, 0, 0, 0, 0, 64, 29, 27, 194, 32, 64, 0,
-        0, 64, 25, 1, 0, 0, 0, 0, 0, 64, 29, 0, 0, 0, 0, 0, 0, 64, 29, 31, 194,
-        32, 64, 0, 0, 64, 25, 1, 0, 0, 0, 0, 0, 64, 29, 9, 0, 0, 0, 0, 0, 64,
-        29, 31, 194, 32, 64, 0, 0, 64, 25, 11, 1, 0, 0, 0, 0, 64, 29, 31, 194,
-        32, 192, 0, 0, 64, 25, 27, 194, 32, 192, 0, 0, 64, 25, 192, 119, 0,
-        0, 0, 0, 64, 13, 0, 0, 40, 0, 0, 0, 64, 17, 0, 0, 0, 0, 51, 28, 66,
-        137, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0,
-        0, 64, 1, 31, 194, 32, 192, 0, 0, 64, 25, 31, 194, 32, 192, 0, 0, 64,
-        25, 97, 0, 224, 19, 0, 0, 64, 21, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0,
-        0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 64, 1, 97, 1, 224, 19, 0, 0, 64, 21,
-        19, 194, 32, 192, 0, 0, 64, 25, 97, 1, 128, 19, 0, 0, 64, 21, 10, 1,
-        0, 0, 0, 0, 64, 29, 19, 194, 32, 192, 0, 0, 64, 25, 8, 4, 0, 0, 0, 0,
-        0, 248, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0,
-        0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 64, 1, 19, 194,
-        32, 64, 0, 0, 64, 25, 11, 1, 0, 0, 0, 0, 64, 29, 19, 194, 32, 192, 0,
-        0, 64, 25, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 64, 1, 3, 1, 0,
-        0, 0, 0, 64, 29, 19, 194, 32, 64, 0, 0, 64, 25, 0, 0, 8, 0, 0, 0, 64,
-        17, 97, 1, 128, 19, 0, 0, 64, 21, 97, 1, 128, 19, 0, 0, 64, 21, 97,
-        1, 128, 19, 0, 0, 64, 21, 31, 194, 32, 64, 0, 0, 64, 25, 31, 194, 32,
-        64, 0, 0, 64, 25, 31, 194, 32, 64, 0, 0, 64, 25, 11, 1, 0, 0, 0, 0,
-        64, 29, 11, 1, 0, 0, 0, 0, 64, 29, 31, 194, 32, 192, 0, 0, 64, 25, 27,
-        194, 32, 192, 0, 0, 64, 25, 195, 119, 0, 0, 0, 0, 64, 13, 0, 0, 8, 0,
-        0, 0, 64, 17, 0, 0, 0, 0, 19, 28, 66, 136, 0, 0, 0, 0, 0, 0, 64, 1,
-        0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 64, 1, 27, 194, 32, 64, 0,
-        0, 64, 25, 9, 0, 0, 0, 0, 0, 64, 29, 27, 202, 32, 64, 0, 0, 64, 25,
-        31, 202, 32, 64, 0, 0, 64, 25, 9, 0, 0, 0, 0, 0, 64, 29, 31, 194, 32,
-        64, 0, 0, 64, 25, 15, 0, 0, 0, 0, 0, 64, 29, 31, 194, 32, 192, 0, 0,
-        64, 25, 27, 194, 32, 192, 0, 0, 64, 25, 35, 125, 0, 0, 0, 0, 64, 13,
-        0, 0, 0, 0, 0, 0, 64, 17, 0, 0, 0, 0, 19, 4, 66, 136, 0, 0, 0, 0, 0,
-        0, 64, 1, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 64, 1, 27, 194,
-        32, 64, 0, 0, 64, 25, 9, 0, 0, 0, 0, 0, 64, 29, 27, 202, 32, 64, 0,
-        0, 64, 25, 1, 0, 0, 0, 0, 0, 64, 29, 31, 202, 32, 64, 0, 0, 64, 25,
-        17, 0, 0, 0, 0, 0, 64, 29, 31, 202, 32, 64, 0, 0, 64, 25, 31, 202, 32,
-        192, 0, 0, 64, 25, 31, 202, 32, 192, 0, 0, 64, 25, 31, 202, 32, 192,
-        0, 0, 64, 25, 95, 202, 32, 192, 0, 0, 64, 25, 176, 100, 0, 0, 0, 0,
-        64, 13, 0, 0, 8, 0, 0, 0, 64, 17, 17, 0, 0, 0, 0, 0, 64, 29, 0, 0, 0,
-        0, 184, 37, 66, 132, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 64,
-        1, 0, 0, 0, 0, 0, 0, 64, 1, 95, 202, 32, 64, 0, 0, 64, 25, 1, 0, 0,
-        0, 0, 0, 64, 29, 31, 202, 32, 64, 0, 0, 64, 25, 31, 202, 32, 64, 0,
-        0, 64, 25, 0, 0, 0, 0, 0, 0, 64, 29, 28, 10, 32, 64, 0, 0, 0, 24, 28,
-        10, 32, 64, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,
-        0, 28, 97, 1, 128, 19, 0, 0, 0, 20, 28, 10, 32, 64, 0, 0, 0, 24, 97,
-        1, 128, 3, 0, 0, 0, 20, 16, 10, 32, 64, 0, 0, 0, 24, 0, 10, 32, 64,
-        0, 0, 0, 24, 0, 10, 0, 64, 0, 0, 0, 24, 65, 1, 128, 3, 0, 0, 0, 20,
-        0, 8, 0, 64, 0, 0, 0, 24, 0, 0, 16, 0, 0, 0, 0, 16, 0, 8, 2, 64, 0,
-        0, 0, 24, 0, 8, 3, 64, 0, 0, 0, 24, 0, 8, 2, 64, 0, 0, 0, 24, 0, 8,
-        0, 64, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 16, 0, 8, 0, 64, 0, 0, 0, 24,
-        0, 8, 0, 64, 0, 0, 0, 24, 65, 1, 128, 0, 0, 0, 0, 20, 65, 1, 0, 0, 0,
-        0, 0, 20, 64, 1, 0, 0, 0, 0, 0, 20, 0, 8, 2, 64, 0, 0, 0, 24, 0, 1,
-        0, 0, 0, 0, 0, 20, 0, 8, 0, 64, 0, 0, 0, 24, 0, 8, 0, 192, 0, 0, 0,
-        24, 8, 12, 0, 0, 0, 0, 0, 4, 8, 8, 0, 0, 0, 0, 0, 252, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 237, 129,
-        111, 7, 45, 98, 95, 150, 189, 51, 94, 0, 91, 35, 52, 93, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 55, 127, 219, 134, 12, 1, 189, 50, 8, 1, 0, 52, 51,
-        52, 51, 48, 97, 49, 45, 114, 111, 109, 108, 47, 115, 100, 105, 111,
-        45, 103, 45, 109, 102, 103, 116, 101, 115, 116, 45, 115, 101, 113, 99,
-        109, 100, 115, 45, 115, 119, 100, 105, 118, 45, 115, 114, 102, 97, 115,
-        116, 45, 102, 117, 97, 114, 116, 45, 110, 111, 99, 108, 109, 105, 110,
-        99, 45, 99, 108, 109, 95, 109, 105, 110, 45, 116, 107, 111, 45, 100,
-        108, 116, 114, 111, 32, 86, 101, 114, 115, 105, 111, 110, 58, 32, 55,
-        46, 52, 53, 46, 57, 56, 46, 57, 53, 32, 40, 114, 55, 50, 52, 51, 48,
-        51, 32, 67, 89, 41, 32, 67, 82, 67, 58, 32, 57, 48, 55, 101, 49, 50,
-        98, 97, 32, 68, 97, 116, 101, 58, 32, 84, 104, 117, 32, 50, 48, 50,
-        48, 45, 48, 49, 45, 51, 48, 32, 50, 49, 58, 51, 57, 58, 51, 52, 32,
-        80, 83, 84, 32, 85, 99, 111, 100, 101, 32, 86, 101, 114, 58, 32, 49,
-        48, 52, 51, 46, 50, 49, 51, 55, 32, 70, 87, 73, 68, 32, 48, 49, 45,
-        56, 54, 100, 98, 55, 102, 51, 55, 0, 201, 0, 68, 86, 73, 68, 32, 48,
-        49, 45, 98, 48, 49, 102, 57, 97, 101, 56
-};
-const resource_hnd_t wifi_mfg_firmware_image = { RESOURCE_IN_MEMORY, 391693, {.mem = { (const char *) wifi_mfg_firmware_image_data }}};
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1-mfgtest_clm_blob.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1-mfgtest_clm_blob.c
deleted file mode 100644
index 1ddfd99fdc..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1-mfgtest_clm_blob.c
+++ /dev/null
@@ -1,400 +0,0 @@
-/*
- * Copyright (c) 2019, Cypress Semiconductor Corporation, All Rights Reserved
- * SPDX-License-Identifier: LicenseRef-PBL
- *
- * This file and the related binary are licensed under the
- * Permissive Binary License, Version 1.0 (the "License");
- * you may not use these files except in compliance with the License.
- *
- * You may obtain a copy of the License here:
- * LICENSE-permissive-binary-license-1.0.txt and at
- * https://www.mbed.com/licenses/PBL-1.0
- *
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-#include "wiced_resource.h"
-
-#if defined(CY_STORAGE_WIFI_DATA)
-CY_SECTION_WHD(CY_STORAGE_WIFI_DATA) __attribute__((used))
-#endif
-const unsigned char wifi_mfg_firmware_clm_blob_image_data[7222] = {
-        66, 76, 79, 66, 60, 0, 0, 0, 242, 194, 248, 205, 1, 0, 0, 0, 2, 0, 0,
-        0, 0, 0, 0, 0, 60, 0, 0, 0, 246, 27, 0, 0, 100, 154, 197, 22, 0, 0,
-        0, 0, 0, 0, 0, 0, 50, 28, 0, 0, 4, 0, 0, 0, 42, 255, 237, 159, 0, 0,
-        0, 0, 67, 76, 77, 32, 68, 65, 84, 65, 0, 0, 12, 0, 2, 0, 57, 46, 49,
-        48, 46, 51, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 46, 50, 57,
-        46, 52, 0, 0, 0, 0, 0, 0, 0, 0, 184, 10, 0, 0, 67, 108, 109, 73, 109,
-        112, 111, 114, 116, 58, 32, 49, 46, 51, 54, 46, 51, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 66, 114, 111, 97, 100, 99, 111, 109, 45, 48, 46,
-        48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 49, 0, 81, 50, 0, 3, 3, 3, 9,
-        3, 11, 4, 4, 4, 7, 4, 8, 4, 10, 4, 11, 5, 7, 8, 8, 9, 9, 9, 11, 11,
-        11, 38, 38, 38, 46, 38, 62, 38, 110, 38, 118, 38, 134, 38, 142, 38,
-        159, 38, 175, 46, 46, 54, 54, 54, 62, 54, 134, 62, 62, 102, 102, 102,
-        110, 102, 134, 102, 142, 102, 159, 110, 126, 110, 134, 110, 142, 134,
-        134, 134, 159, 142, 142, 151, 151, 151, 159, 151, 175, 159, 159, 65,
-        69, 1, 65, 82, 1, 65, 84, 1, 65, 85, 2, 66, 69, 1, 66, 71, 1, 66, 78,
-        1, 67, 65, 2, 67, 72, 1, 67, 89, 1, 67, 90, 1, 68, 69, 3, 68, 75, 1,
-        69, 69, 1, 69, 83, 1, 70, 73, 1, 70, 82, 1, 71, 66, 1, 71, 82, 1, 72,
-        82, 1, 72, 85, 1, 73, 68, 5, 73, 69, 1, 73, 83, 1, 73, 84, 1, 74, 80,
-        3, 75, 82, 4, 75, 87, 1, 76, 73, 1, 76, 84, 1, 76, 85, 1, 76, 86, 1,
-        77, 65, 1, 77, 84, 1, 77, 88, 1, 78, 76, 1, 78, 79, 1, 80, 76, 1, 80,
-        84, 1, 80, 89, 1, 82, 79, 1, 82, 85, 5, 83, 69, 1, 83, 73, 1, 83, 75,
-        1, 84, 82, 7, 84, 87, 2, 85, 83, 26, 1, 0, 255, 1, 30, 2, 0, 3, 76,
-        1, 3, 76, 2, 1, 66, 12, 3, 1, 0, 255, 1, 30, 2, 0, 7, 72, 0, 1, 58,
-        0, 3, 68, 6, 3, 74, 8, 1, 74, 10, 3, 68, 11, 3, 66, 12, 3, 1, 0, 255,
-        1, 30, 2, 0, 2, 64, 2, 1, 56, 2, 3, 1, 0, 255, 1, 30, 2, 0, 5, 72, 0,
-        1, 76, 1, 3, 76, 7, 1, 72, 12, 1, 66, 12, 3, 1, 0, 255, 1, 30, 2, 0,
-        4, 58, 0, 3, 68, 2, 1, 66, 7, 3, 58, 12, 3, 1, 0, 255, 1, 30, 2, 0,
-        5, 92, 0, 1, 86, 0, 3, 126, 7, 0, 92, 12, 1, 86, 12, 3, 1, 0, 255, 1,
-        30, 2, 0, 5, 70, 0, 3, 80, 1, 1, 80, 7, 3, 76, 12, 1, 72, 12, 3, 2,
-        4, 255, 1, 20, 4, 2, 1, 76, 4, 0, 2, 0, 3, 1, 20, 4, 2, 1, 76, 4, 1,
-        2, 0, 255, 1, 20, 4, 0, 1, 76, 4, 0, 3, 0, 4, 1, 20, 5, 2, 5, 76, 1,
-        3, 76, 4, 1, 70, 12, 3, 76, 14, 3, 54, 17, 1, 3, 0, 4, 1, 20, 5, 0,
-        6, 60, 0, 3, 68, 2, 1, 64, 8, 3, 48, 14, 1, 44, 14, 3, 64, 17, 1, 3,
-        0, 4, 1, 20, 5, 0, 3, 64, 3, 3, 64, 5, 1, 46, 16, 3, 2, 0, 3, 1, 20,
-        4, 0, 3, 64, 2, 0, 48, 14, 1, 44, 14, 3, 3, 0, 4, 1, 20, 5, 0, 6, 62,
-        0, 3, 66, 4, 1, 66, 7, 3, 62, 12, 3, 66, 14, 3, 42, 17, 1, 3, 0, 255,
-        1, 20, 5, 2, 2, 84, 4, 3, 78, 5, 1, 1, 0, 255, 1, 20, 2, 0, 2, 69, 2,
-        1, 79, 2, 3, 3, 0, 255, 1, 30, 5, 0, 1, 120, 5, 0, 0, 0, 255, 0, 0,
-        0, 2, 0, 255, 1, 23, 4, 2, 1, 92, 4, 0, 2, 0, 255, 1, 36, 4, 2, 1, 100,
-        4, 0, 2, 4, 3, 1, 20, 4, 2, 1, 76, 4, 0, 1, 0, 255, 1, 20, 2, 2, 1,
-        76, 2, 0, 2, 0, 255, 1, 20, 4, 4, 3, 56, 0, 3, 64, 9, 3, 56, 16, 3,
-        2, 1, 76, 4, 1, 74, 48, 0, 74, 49, 0, 74, 50, 0, 74, 51, 0, 74, 52,
-        0, 74, 53, 0, 74, 54, 0, 74, 55, 0, 74, 56, 0, 74, 57, 0, 0, 0, 4, 0,
-        0, 0, 37, 4, 0, 0, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 4, 0, 1,
-        2, 3, 8, 12, 13, 14, 15, 16, 17, 18, 19, 8, 4, 5, 6, 7, 8, 9, 10, 11,
-        1, 1, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 2, 2, 2, 10, 2, 11, 2, 12,
-        3, 9, 10, 10, 11, 11, 12, 12, 12, 13, 12, 14, 13, 13, 14, 14, 34, 46,
-        36, 48, 36, 64, 36, 116, 36, 140, 36, 144, 36, 161, 36, 165, 36, 177,
-        52, 60, 52, 64, 52, 124, 52, 140, 52, 144, 52, 165, 56, 64, 64, 64,
-        64, 100, 100, 100, 100, 116, 100, 140, 100, 144, 100, 165, 104, 128,
-        104, 140, 104, 165, 132, 140, 132, 144, 132, 165, 149, 149, 149, 161,
-        149, 165, 149, 177, 153, 161, 165, 165, 0, 1, 2, 1, 4, 1, 5, 1, 18,
-        2, 18, 19, 4, 18, 19, 29, 48, 2, 18, 20, 2, 18, 22, 1, 19, 3, 19, 28,
-        49, 3, 19, 30, 49, 3, 19, 31, 50, 2, 19, 32, 2, 19, 49, 1, 20, 2, 20,
-        38, 2, 20, 40, 2, 20, 44, 2, 20, 48, 2, 20, 49, 2, 21, 46, 1, 22, 2,
-        22, 49, 2, 23, 49, 1, 24, 1, 25, 1, 26, 3, 28, 38, 49, 2, 28, 49, 3,
-        33, 38, 49, 2, 33, 49, 1, 38, 1, 48, 1, 49, 69, 48, 0, 88, 65, 0, 88,
-        85, 0, 65, 85, 2, 74, 80, 1, 0, 0, 3, 0, 0, 0, 124, 10, 0, 0, 16, 4,
-        5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 34, 46, 4, 36,
-        64, 4, 100, 144, 4, 149, 177, 4, 50, 48, 50, 48, 45, 48, 49, 45, 51,
-        48, 32, 50, 49, 58, 50, 57, 58, 53, 53, 0, 4, 2, 64, 19, 0, 64, 49,
-        0, 1, 2, 40, 14, 0, 40, 39, 0, 4, 4, 56, 19, 0, 58, 28, 0, 60, 39, 0,
-        70, 49, 0, 1, 3, 52, 15, 0, 64, 30, 0, 72, 39, 0, 4, 3, 60, 20, 0, 60,
-        38, 0, 60, 49, 0, 1, 3, 56, 14, 0, 60, 25, 0, 60, 39, 0, 6, 1, 84, 20,
-        0, 3, 1, 84, 15, 0, 4, 1, 60, 20, 0, 1, 1, 56, 15, 0, 6, 1, 84, 20,
-        0, 3, 1, 88, 15, 0, 6, 2, 84, 20, 0, 84, 49, 0, 3, 2, 84, 15, 0, 84,
-        39, 0, 0, 0, 4, 2, 66, 20, 0, 66, 48, 0, 1, 2, 54, 15, 0, 54, 39, 0,
-        6, 2, 92, 20, 0, 80, 49, 0, 3, 2, 88, 15, 0, 76, 39, 0, 4, 2, 66, 20,
-        0, 64, 49, 0, 1, 2, 56, 15, 0, 56, 39, 0, 4, 1, 56, 19, 0, 1, 1, 48,
-        14, 0, 4, 1, 60, 19, 0, 1, 1, 56, 14, 0, 4, 1, 60, 19, 0, 1, 1, 56,
-        14, 0, 6, 2, 84, 23, 0, 112, 49, 0, 3, 2, 88, 19, 0, 116, 39, 0, 4,
-        5, 56, 19, 0, 70, 27, 0, 58, 34, 0, 68, 38, 0, 70, 49, 0, 1, 7, 52,
-        13, 0, 66, 22, 0, 68, 23, 0, 52, 26, 0, 62, 27, 0, 72, 33, 0, 74, 39,
-        0, 4, 4, 58, 19, 0, 80, 47, 0, 80, 51, 0, 80, 52, 0, 1, 4, 58, 13, 0,
-        66, 22, 0, 72, 38, 0, 80, 41, 0, 4, 6, 56, 19, 0, 68, 27, 0, 56, 34,
-        0, 68, 36, 0, 68, 42, 0, 68, 49, 0, 1, 6, 48, 14, 0, 68, 23, 0, 48,
-        26, 0, 62, 27, 0, 74, 33, 0, 72, 39, 0, 4, 5, 56, 19, 0, 78, 27, 0,
-        64, 34, 0, 68, 36, 0, 78, 43, 0, 1, 10, 62, 13, 0, 62, 22, 0, 78, 23,
-        0, 50, 26, 0, 56, 27, 0, 78, 32, 0, 78, 35, 0, 78, 37, 0, 60, 38, 0,
-        78, 41, 0, 4, 1, 120, 26, 0, 1, 1, 120, 21, 0, 4, 1, 120, 25, 0, 1,
-        1, 120, 20, 0, 4, 4, 56, 19, 0, 70, 27, 0, 58, 34, 0, 70, 49, 0, 1,
-        4, 48, 14, 0, 62, 23, 0, 48, 26, 0, 60, 39, 0, 4, 4, 56, 19, 0, 66,
-        27, 0, 60, 34, 0, 66, 49, 0, 1, 3, 56, 14, 0, 60, 24, 0, 60, 39, 0,
-        6, 2, 84, 20, 0, 84, 49, 0, 3, 2, 88, 15, 0, 88, 39, 0, 4, 4, 56, 19,
-        0, 70, 27, 0, 58, 34, 0, 70, 49, 0, 1, 4, 48, 14, 0, 62, 23, 0, 48,
-        26, 0, 60, 39, 0, 4, 2, 60, 28, 0, 68, 49, 0, 1, 2, 56, 24, 0, 56, 39,
-        0, 6, 2, 112, 28, 0, 112, 49, 0, 3, 2, 112, 24, 0, 112, 39, 0, 0, 2,
-        64, 18, 0, 64, 20, 0, 4, 4, 48, 18, 0, 48, 19, 0, 60, 29, 0, 60, 48,
-        0, 1, 2, 48, 17, 0, 48, 39, 0, 4, 2, 56, 19, 0, 68, 49, 0, 1, 2, 48,
-        14, 0, 60, 39, 0, 4, 6, 62, 19, 0, 90, 27, 0, 80, 35, 0, 90, 41, 0,
-        86, 45, 0, 118, 50, 0, 1, 6, 74, 14, 0, 98, 23, 0, 66, 26, 0, 74, 27,
-        0, 98, 34, 0, 118, 40, 0, 6, 1, 84, 24, 0, 3, 1, 88, 20, 0, 6, 1, 84,
-        24, 0, 3, 1, 88, 20, 0, 4, 2, 56, 19, 0, 60, 49, 0, 1, 2, 48, 14, 0,
-        60, 39, 0, 6, 2, 72, 20, 0, 72, 44, 0, 3, 2, 76, 15, 0, 76, 35, 0, 4,
-        2, 60, 20, 0, 60, 38, 0, 1, 2, 56, 15, 0, 64, 29, 0, 4, 2, 60, 20, 0,
-        60, 38, 0, 1, 1, 56, 18, 0, 4, 2, 84, 20, 0, 84, 38, 0, 1, 1, 56, 18,
-        0, 6, 1, 84, 22, 0, 3, 1, 88, 18, 0, 6, 1, 84, 22, 0, 3, 1, 88, 18,
-        0, 6, 2, 84, 20, 0, 112, 38, 0, 3, 2, 68, 15, 0, 96, 29, 0, 4, 2, 66,
-        20, 0, 66, 38, 0, 1, 2, 42, 15, 0, 64, 29, 0, 4, 2, 62, 20, 0, 66, 38,
-        0, 1, 2, 42, 15, 0, 64, 29, 0, 4, 2, 60, 20, 0, 60, 38, 0, 1, 2, 56,
-        15, 0, 64, 29, 0, 0, 0, 4, 4, 60, 20, 0, 60, 37, 0, 60, 44, 0, 60, 49,
-        0, 1, 4, 56, 15, 0, 60, 28, 0, 60, 35, 0, 60, 39, 0, 6, 2, 84, 21, 0,
-        84, 46, 0, 3, 2, 88, 16, 0, 88, 36, 0, 4, 2, 60, 20, 0, 60, 49, 0, 1,
-        2, 56, 15, 0, 60, 39, 0, 0, 2, 60, 20, 0, 60, 49, 0, 6, 1, 84, 25, 0,
-        3, 1, 84, 20, 0, 6, 1, 84, 25, 0, 3, 1, 88, 20, 0, 6, 2, 84, 20, 0,
-        112, 40, 0, 3, 2, 88, 15, 0, 116, 31, 0, 4, 3, 60, 20, 0, 60, 38, 0,
-        60, 49, 0, 1, 3, 56, 15, 0, 64, 29, 0, 60, 39, 0, 4, 1, 60, 49, 0, 1,
-        1, 52, 39, 0, 6, 1, 80, 49, 0, 3, 1, 80, 39, 0, 6, 1, 80, 49, 0, 3,
-        1, 80, 39, 0, 6, 2, 80, 19, 0, 80, 49, 0, 3, 2, 80, 14, 0, 80, 39, 0,
-        6, 1, 76, 49, 0, 3, 1, 76, 39, 0, 6, 1, 76, 48, 0, 3, 1, 68, 39, 0,
-        4, 1, 60, 49, 0, 1, 1, 60, 39, 0, 6, 1, 84, 49, 0, 3, 1, 88, 39, 0,
-        4, 1, 78, 49, 0, 1, 1, 78, 39, 0, 4, 3, 56, 33, 0, 68, 38, 0, 68, 49,
-        0, 1, 4, 48, 26, 0, 62, 27, 0, 74, 33, 0, 72, 39, 0, 4, 3, 56, 28, 0,
-        58, 38, 0, 62, 49, 0, 1, 4, 46, 23, 0, 48, 26, 0, 56, 29, 0, 56, 39,
-        0, 4, 2, 68, 33, 0, 68, 49, 0, 1, 2, 66, 26, 0, 60, 39, 0, 2, 1, 84,
-        48, 0, 65, 69, 1, 65, 82, 1, 65, 84, 1, 65, 85, 2, 66, 69, 1, 66, 71,
-        1, 66, 78, 1, 67, 65, 2, 67, 72, 1, 67, 89, 1, 67, 90, 1, 68, 69, 3,
-        68, 75, 1, 69, 69, 1, 69, 83, 1, 70, 73, 1, 70, 82, 1, 71, 66, 1, 71,
-        82, 1, 72, 82, 1, 72, 85, 1, 73, 68, 5, 73, 69, 1, 73, 83, 1, 73, 84,
-        1, 74, 80, 3, 75, 82, 4, 75, 87, 1, 76, 73, 1, 76, 84, 1, 76, 85, 1,
-        76, 86, 1, 77, 65, 1, 77, 84, 1, 77, 88, 1, 78, 76, 1, 78, 79, 1, 80,
-        76, 1, 80, 84, 1, 80, 89, 1, 82, 79, 1, 82, 85, 5, 83, 69, 1, 83, 73,
-        1, 83, 75, 1, 84, 87, 2, 85, 83, 25, 4, 5, 76, 0, 2, 76, 6, 2, 76, 10,
-        2, 76, 11, 2, 66, 12, 2, 1, 4, 62, 0, 0, 66, 4, 0, 62, 9, 0, 58, 10,
-        0, 4, 3, 58, 0, 2, 66, 7, 2, 58, 12, 2, 1, 5, 42, 0, 0, 50, 3, 0, 60,
-        8, 0, 54, 9, 0, 46, 10, 0, 4, 1, 56, 2, 2, 1, 1, 32, 1, 0, 4, 5, 58,
-        0, 2, 68, 6, 2, 74, 10, 2, 68, 11, 2, 66, 12, 2, 1, 5, 48, 0, 0, 58,
-        3, 0, 66, 8, 0, 58, 9, 0, 54, 10, 0, 4, 3, 86, 0, 2, 126, 7, 2, 86,
-        12, 2, 1, 3, 78, 0, 0, 126, 5, 0, 78, 10, 0, 4, 5, 70, 0, 2, 80, 6,
-        2, 80, 10, 2, 80, 11, 2, 72, 12, 2, 1, 5, 58, 0, 0, 68, 3, 0, 80, 8,
-        0, 68, 9, 0, 60, 10, 0, 4, 1, 64, 4, 2, 1, 1, 64, 2, 0, 4, 1, 76, 4,
-        2, 1, 1, 72, 2, 0, 0, 1, 64, 4, 2, 4, 4, 60, 0, 2, 64, 8, 2, 44, 13,
-        2, 44, 16, 2, 1, 3, 40, 0, 0, 52, 5, 0, 46, 11, 0, 0, 2, 64, 3, 2, 46,
-        16, 2, 4, 2, 64, 2, 2, 44, 14, 2, 1, 3, 54, 0, 0, 64, 6, 0, 52, 12,
-        0, 6, 1, 76, 4, 2, 3, 1, 76, 2, 0, 6, 1, 76, 4, 2, 3, 1, 76, 2, 0, 6,
-        1, 76, 4, 2, 3, 1, 76, 2, 0, 6, 1, 76, 4, 2, 3, 1, 128, 2, 0, 4, 1,
-        64, 4, 2, 1, 1, 64, 2, 0, 6, 1, 84, 4, 2, 3, 1, 72, 2, 0, 0, 1, 79,
-        2, 2, 4, 2, 120, 4, 2, 120, 17, 2, 1, 1, 120, 2, 0, 0, 0, 0, 1, 64,
-        4, 2, 4, 1, 80, 4, 2, 1, 1, 64, 2, 0, 4, 1, 88, 4, 2, 1, 1, 60, 2, 0,
-        6, 1, 100, 4, 2, 3, 1, 88, 2, 0, 4, 1, 64, 2, 2, 1, 1, 52, 1, 0, 4,
-        3, 56, 0, 2, 64, 9, 2, 56, 16, 2, 1, 2, 46, 0, 0, 52, 7, 0, 68, 69,
-        0, 0, 3, 0, 0, 0, 251, 3, 0, 0, 74, 80, 0, 0, 10, 0, 0, 0, 228, 2, 0,
-        0, 85, 83, 0, 0, 2, 0, 0, 0, 104, 0, 0, 0, 8, 12, 13, 14, 15, 16, 17,
-        18, 19, 8, 4, 5, 6, 7, 8, 9, 10, 11, 1, 14, 1, 0, 0, 0, 112, 11, 0,
-        0, 4, 3, 0, 0, 48, 3, 0, 0, 229, 27, 0, 0, 154, 3, 0, 0, 160, 10, 0,
-        0, 82, 1, 0, 0, 67, 24, 0, 0, 0, 9, 0, 0, 69, 4, 0, 0, 156, 11, 0, 0,
-        12, 4, 0, 0, 204, 27, 0, 0, 127, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 27, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 12, 3, 0, 0, 20, 4, 0, 0, 49, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 178, 10, 0, 0, 88, 65, 0, 0, 2,
-        0, 0, 0, 4, 4, 0, 0, 88, 84, 0, 0, 47, 0, 0, 0, 115, 8, 0, 0, 88, 86,
-        0, 0, 48, 0, 0, 0, 194, 0, 0, 0, 103, 1, 0, 0, 164, 11, 0, 0, 35, 97,
-        0, 17, 18, 19, 19, 0, 0, 35, 110, 0, 18, 8, 255, 255, 240, 0, 35, 114,
-        0, 17, 19, 19, 20, 0, 0, 48, 65, 0, 7, 8, 255, 255, 240, 16, 48, 66,
-        0, 0, 14, 0, 17, 0, 16, 48, 67, 0, 7, 6, 13, 5, 0, 16, 65, 67, 0, 18,
-        8, 255, 255, 240, 16, 65, 68, 0, 7, 33, 14, 39, 0, 48, 65, 69, 0, 7,
-        8, 6, 7, 0, 32, 65, 69, 1, 7, 33, 6, 43, 0, 32, 65, 70, 0, 7, 33, 14,
-        39, 0, 48, 65, 71, 0, 7, 41, 6, 47, 0, 32, 65, 73, 0, 6, 15, 5, 18,
-        0, 16, 65, 76, 0, 7, 33, 6, 43, 0, 32, 65, 77, 0, 7, 5, 13, 3, 0, 0,
-        65, 78, 0, 7, 14, 6, 17, 0, 32, 65, 79, 0, 7, 8, 255, 255, 240, 16,
-        65, 81, 0, 18, 8, 255, 255, 240, 16, 65, 82, 0, 7, 25, 6, 25, 0, 0,
-        65, 82, 1, 7, 14, 6, 17, 0, 0, 65, 83, 0, 6, 15, 5, 18, 0, 16, 65, 84,
-        0, 7, 33, 6, 43, 0, 32, 65, 84, 1, 7, 37, 6, 36, 0, 32, 65, 85, 0, 20,
-        42, 24, 46, 0, 0, 65, 85, 2, 20, 42, 23, 45, 0, 0, 65, 87, 0, 7, 34,
-        6, 31, 0, 0, 65, 88, 0, 18, 8, 255, 255, 240, 16, 65, 90, 0, 7, 14,
-        6, 17, 0, 32, 66, 65, 0, 7, 33, 6, 43, 0, 32, 66, 66, 0, 7, 22, 13,
-        23, 0, 16, 66, 68, 0, 7, 46, 6, 59, 0, 0, 66, 69, 0, 7, 33, 6, 43, 0,
-        32, 66, 69, 1, 7, 37, 6, 36, 0, 32, 66, 70, 0, 7, 33, 14, 39, 0, 16,
-        66, 71, 0, 7, 33, 6, 43, 0, 32, 66, 71, 1, 7, 37, 6, 36, 0, 32, 66,
-        72, 0, 7, 21, 6, 22, 0, 0, 66, 73, 0, 7, 33, 14, 39, 0, 16, 66, 74,
-        0, 7, 33, 14, 39, 0, 48, 66, 76, 0, 18, 8, 255, 255, 240, 16, 66, 77,
-        0, 6, 15, 5, 18, 0, 16, 66, 78, 0, 7, 8, 255, 255, 240, 0, 66, 78, 1,
-        19, 41, 22, 47, 0, 0, 66, 79, 0, 7, 15, 13, 18, 0, 32, 66, 81, 0, 18,
-        8, 255, 255, 240, 16, 66, 82, 0, 7, 43, 6, 52, 0, 32, 66, 83, 0, 20,
-        21, 23, 22, 0, 0, 66, 84, 0, 7, 8, 13, 7, 0, 48, 66, 86, 0, 18, 8, 255,
-        255, 240, 16, 66, 87, 0, 7, 45, 13, 51, 0, 48, 66, 89, 0, 7, 33, 255,
-        255, 240, 0, 66, 90, 0, 7, 15, 13, 18, 0, 16, 67, 65, 0, 0, 21, 0, 22,
-        0, 0, 67, 65, 2, 6, 15, 5, 18, 0, 16, 67, 67, 0, 18, 8, 255, 255, 240,
-        16, 67, 68, 0, 7, 33, 14, 39, 0, 48, 67, 70, 0, 7, 33, 14, 39, 0, 16,
-        67, 71, 0, 7, 33, 14, 39, 0, 48, 67, 72, 0, 7, 33, 6, 43, 0, 32, 67,
-        72, 1, 7, 37, 6, 36, 0, 32, 67, 73, 0, 7, 33, 14, 39, 0, 48, 67, 75,
-        0, 7, 44, 13, 50, 0, 16, 67, 76, 0, 7, 7, 6, 6, 0, 0, 67, 77, 0, 7,
-        33, 14, 39, 0, 16, 67, 78, 0, 23, 49, 26, 53, 0, 0, 67, 79, 0, 7, 13,
-        6, 11, 0, 32, 67, 80, 0, 18, 8, 255, 255, 240, 16, 67, 82, 0, 7, 14,
-        6, 15, 0, 32, 67, 85, 0, 7, 8, 14, 255, 192, 48, 67, 86, 0, 7, 33, 14,
-        39, 0, 16, 67, 87, 0, 18, 8, 255, 255, 240, 16, 67, 88, 0, 20, 42, 23,
-        46, 0, 16, 67, 89, 0, 7, 33, 6, 43, 0, 32, 67, 89, 1, 7, 37, 6, 36,
-        0, 32, 67, 90, 0, 7, 33, 6, 43, 0, 32, 67, 90, 1, 7, 37, 6, 36, 0, 32,
-        68, 69, 0, 7, 33, 6, 43, 0, 32, 68, 69, 3, 7, 37, 6, 36, 0, 32, 68,
-        74, 0, 7, 8, 255, 255, 240, 16, 68, 75, 0, 7, 33, 6, 43, 0, 32, 68,
-        75, 1, 7, 37, 6, 36, 0, 32, 68, 77, 0, 7, 15, 13, 18, 0, 16, 68, 79,
-        0, 7, 15, 13, 18, 0, 16, 68, 90, 0, 7, 5, 6, 4, 0, 32, 69, 48, 0, 7,
-        12, 6, 13, 0, 32, 69, 67, 0, 7, 14, 6, 17, 0, 32, 69, 69, 0, 7, 33,
-        6, 43, 0, 32, 69, 69, 1, 7, 37, 6, 36, 0, 32, 69, 71, 0, 7, 41, 21,
-        48, 0, 0, 69, 72, 0, 7, 6, 13, 5, 0, 16, 69, 82, 0, 7, 8, 255, 255,
-        240, 16, 69, 83, 0, 7, 33, 6, 43, 0, 32, 69, 83, 1, 7, 37, 6, 36, 0,
-        32, 69, 84, 0, 7, 33, 6, 43, 0, 0, 70, 73, 0, 7, 33, 6, 43, 0, 32, 70,
-        73, 1, 7, 37, 6, 36, 0, 32, 70, 74, 0, 7, 42, 13, 46, 0, 16, 70, 75,
-        0, 7, 33, 14, 39, 0, 16, 70, 77, 0, 6, 15, 5, 18, 0, 16, 70, 79, 0,
-        7, 33, 14, 39, 0, 48, 70, 82, 0, 7, 33, 6, 43, 0, 32, 70, 82, 1, 7,
-        37, 6, 36, 0, 32, 71, 65, 0, 7, 33, 14, 39, 0, 16, 71, 66, 0, 7, 33,
-        6, 43, 0, 32, 71, 66, 1, 7, 37, 6, 36, 0, 32, 71, 68, 0, 7, 43, 6, 52,
-        0, 0, 71, 69, 0, 7, 33, 14, 39, 0, 48, 71, 70, 0, 7, 33, 6, 43, 0, 0,
-        71, 71, 0, 7, 33, 14, 39, 0, 16, 71, 72, 0, 7, 33, 14, 39, 0, 48, 71,
-        73, 0, 7, 33, 14, 39, 0, 16, 71, 76, 0, 18, 8, 255, 255, 240, 16, 71,
-        77, 0, 7, 33, 14, 39, 0, 16, 71, 78, 0, 7, 33, 14, 39, 0, 48, 71, 80,
-        0, 7, 33, 6, 43, 0, 0, 71, 81, 0, 7, 33, 14, 39, 0, 16, 71, 82, 0, 7,
-        33, 6, 43, 0, 32, 71, 82, 1, 7, 37, 6, 36, 0, 32, 71, 83, 0, 18, 8,
-        255, 255, 240, 16, 71, 84, 0, 7, 14, 12, 17, 0, 16, 71, 85, 0, 0, 14,
-        0, 17, 0, 0, 71, 87, 0, 7, 33, 14, 39, 0, 16, 71, 89, 0, 7, 46, 13,
-        54, 0, 16, 72, 75, 0, 20, 43, 24, 52, 0, 0, 72, 77, 0, 18, 8, 255, 255,
-        240, 16, 72, 78, 0, 7, 47, 13, 61, 0, 0, 72, 82, 0, 7, 33, 6, 43, 0,
-        32, 72, 82, 1, 7, 37, 6, 36, 0, 32, 72, 84, 0, 7, 46, 13, 54, 0, 0,
-        72, 85, 0, 7, 33, 6, 43, 0, 32, 72, 85, 1, 7, 37, 6, 36, 0, 32, 73,
-        68, 0, 7, 8, 6, 7, 0, 0, 73, 68, 5, 7, 55, 14, 65, 0, 16, 73, 69, 0,
-        7, 33, 6, 43, 0, 32, 73, 69, 1, 7, 37, 6, 36, 0, 32, 73, 76, 0, 7, 5,
-        6, 4, 0, 32, 73, 77, 0, 7, 33, 14, 39, 0, 16, 73, 78, 0, 19, 41, 22,
-        47, 0, 32, 73, 79, 0, 7, 33, 14, 39, 0, 16, 73, 81, 0, 7, 33, 14, 39,
-        0, 16, 73, 82, 0, 7, 8, 14, 255, 192, 48, 73, 83, 0, 7, 33, 6, 43, 0,
-        32, 73, 83, 1, 7, 37, 6, 36, 0, 32, 73, 84, 0, 7, 33, 6, 43, 0, 32,
-        73, 84, 1, 7, 37, 6, 36, 0, 32, 74, 48, 0, 7, 38, 16, 42, 0, 0, 74,
-        49, 0, 15, 12, 255, 255, 240, 0, 74, 50, 0, 15, 5, 255, 255, 240, 0,
-        74, 51, 0, 15, 38, 255, 255, 240, 0, 74, 52, 0, 15, 24, 255, 255, 240,
-        0, 74, 53, 0, 15, 27, 255, 255, 240, 0, 74, 54, 0, 15, 28, 255, 255,
-        240, 0, 74, 55, 0, 15, 29, 255, 255, 240, 0, 74, 56, 0, 15, 40, 255,
-        255, 240, 0, 74, 57, 0, 7, 28, 16, 27, 0, 0, 74, 69, 0, 7, 33, 14, 39,
-        0, 16, 74, 77, 0, 7, 46, 14, 60, 0, 16, 74, 79, 0, 7, 1, 6, 0, 0, 32,
-        74, 80, 0, 15, 39, 17, 40, 0, 0, 74, 80, 1, 15, 28, 16, 27, 0, 0, 74,
-        80, 3, 15, 39, 16, 41, 0, 0, 74, 80, 88, 16, 8, 18, 7, 0, 0, 75, 65,
-        0, 22, 17, 25, 16, 0, 0, 75, 67, 0, 22, 46, 25, 54, 0, 0, 75, 68, 0,
-        7, 51, 6, 58, 0, 0, 75, 69, 0, 7, 33, 6, 38, 0, 32, 75, 71, 0, 7, 33,
-        14, 39, 0, 16, 75, 72, 0, 7, 43, 6, 52, 0, 0, 75, 73, 0, 20, 42, 23,
-        46, 0, 16, 75, 75, 0, 22, 8, 25, 7, 0, 0, 75, 77, 0, 7, 33, 14, 39,
-        0, 16, 75, 78, 0, 7, 15, 13, 18, 0, 16, 75, 80, 0, 18, 8, 255, 255,
-        240, 16, 75, 82, 0, 18, 55, 20, 44, 0, 0, 75, 82, 4, 23, 30, 26, 28,
-        0, 16, 75, 87, 0, 7, 8, 6, 7, 0, 32, 75, 87, 1, 7, 5, 6, 4, 0, 32, 75,
-        88, 0, 7, 48, 6, 56, 0, 0, 75, 89, 0, 8, 8, 8, 7, 0, 0, 75, 90, 0, 7,
-        36, 13, 34, 0, 0, 76, 65, 0, 7, 34, 6, 31, 0, 0, 76, 66, 0, 7, 46, 6,
-        59, 0, 32, 76, 67, 0, 7, 15, 13, 18, 0, 16, 76, 73, 0, 7, 33, 6, 43,
-        0, 0, 76, 73, 1, 7, 37, 6, 36, 0, 0, 76, 75, 0, 19, 43, 22, 52, 0, 0,
-        76, 82, 0, 7, 43, 21, 50, 0, 16, 76, 83, 0, 7, 33, 6, 43, 0, 0, 76,
-        84, 0, 7, 33, 6, 43, 0, 32, 76, 84, 1, 7, 37, 6, 36, 0, 32, 76, 85,
-        0, 7, 33, 6, 43, 0, 32, 76, 85, 1, 7, 37, 6, 36, 0, 32, 76, 86, 0, 7,
-        33, 6, 43, 0, 32, 76, 86, 1, 7, 37, 6, 36, 0, 32, 76, 89, 0, 7, 8, 15,
-        255, 192, 16, 77, 65, 0, 7, 12, 21, 12, 0, 32, 77, 65, 1, 7, 5, 21,
-        4, 0, 32, 77, 67, 0, 7, 33, 6, 43, 0, 0, 77, 68, 0, 7, 33, 6, 43, 0,
-        32, 77, 69, 0, 7, 33, 6, 43, 0, 32, 77, 70, 0, 7, 45, 13, 51, 0, 16,
-        77, 71, 0, 7, 33, 14, 39, 0, 48, 77, 72, 0, 18, 8, 255, 255, 240, 16,
-        77, 75, 0, 7, 33, 6, 43, 0, 32, 77, 76, 0, 7, 33, 14, 39, 0, 16, 77,
-        77, 0, 7, 33, 14, 39, 0, 16, 77, 78, 0, 7, 14, 12, 17, 0, 32, 77, 79,
-        0, 7, 50, 6, 59, 0, 0, 77, 80, 0, 6, 15, 5, 18, 0, 16, 77, 81, 0, 7,
-        33, 6, 43, 0, 0, 77, 82, 0, 7, 33, 6, 43, 0, 0, 77, 83, 0, 7, 33, 14,
-        39, 0, 48, 77, 84, 0, 7, 33, 6, 43, 0, 32, 77, 84, 1, 7, 37, 6, 36,
-        0, 32, 77, 85, 0, 7, 33, 6, 43, 0, 32, 77, 86, 0, 7, 10, 6, 10, 0, 32,
-        77, 87, 0, 7, 46, 6, 59, 0, 32, 77, 88, 0, 7, 5, 6, 4, 0, 0, 77, 88,
-        1, 7, 21, 6, 22, 0, 0, 77, 89, 0, 19, 41, 22, 47, 0, 0, 77, 90, 0, 7,
-        16, 13, 14, 0, 16, 78, 65, 0, 7, 16, 13, 14, 0, 16, 78, 67, 0, 7, 33,
-        14, 39, 0, 16, 78, 69, 0, 7, 33, 14, 39, 0, 16, 78, 70, 0, 7, 42, 12,
-        45, 0, 0, 78, 71, 0, 7, 26, 14, 26, 0, 48, 78, 73, 0, 7, 14, 6, 17,
-        0, 32, 78, 76, 0, 7, 33, 6, 43, 0, 32, 78, 76, 1, 7, 37, 6, 36, 0, 32,
-        78, 79, 0, 7, 33, 6, 43, 0, 32, 78, 79, 1, 7, 37, 6, 36, 0, 32, 78,
-        80, 0, 19, 9, 22, 8, 0, 0, 78, 82, 0, 7, 33, 14, 39, 0, 16, 78, 85,
-        0, 7, 14, 255, 255, 240, 16, 78, 90, 0, 7, 43, 6, 52, 0, 32, 79, 77,
-        0, 7, 33, 6, 43, 0, 32, 80, 65, 0, 19, 0, 22, 24, 0, 32, 80, 69, 0,
-        7, 14, 6, 17, 0, 32, 80, 70, 0, 7, 33, 14, 39, 0, 16, 80, 71, 0, 7,
-        2, 6, 0, 0, 0, 80, 72, 0, 7, 43, 6, 52, 0, 32, 80, 75, 0, 7, 50, 12,
-        55, 0, 32, 80, 76, 0, 7, 33, 6, 43, 0, 32, 80, 76, 1, 7, 37, 6, 36,
-        0, 32, 80, 77, 0, 7, 33, 14, 39, 0, 16, 80, 78, 0, 18, 8, 255, 255,
-        240, 16, 80, 82, 0, 0, 14, 0, 17, 0, 0, 80, 83, 0, 18, 8, 255, 255,
-        240, 0, 80, 84, 0, 7, 33, 6, 43, 0, 32, 80, 84, 1, 7, 37, 6, 36, 0,
-        32, 80, 87, 0, 7, 15, 13, 18, 0, 16, 80, 89, 0, 7, 46, 6, 59, 0, 0,
-        80, 89, 1, 7, 43, 6, 52, 0, 0, 81, 49, 0, 2, 8, 2, 7, 0, 0, 81, 50,
-        0, 0, 31, 0, 29, 0, 0, 81, 65, 0, 7, 50, 14, 57, 0, 48, 82, 69, 0, 7,
-        33, 6, 43, 0, 0, 82, 79, 0, 7, 33, 6, 43, 0, 32, 82, 79, 1, 7, 37, 6,
-        36, 0, 32, 82, 83, 0, 7, 33, 6, 43, 0, 32, 82, 85, 0, 7, 8, 255, 255,
-        240, 0, 82, 85, 5, 7, 11, 12, 9, 0, 0, 82, 87, 0, 7, 33, 14, 39, 0,
-        48, 83, 65, 0, 7, 34, 6, 32, 0, 32, 83, 66, 0, 7, 8, 255, 255, 240,
-        16, 83, 67, 0, 7, 45, 13, 51, 0, 16, 83, 68, 0, 7, 8, 14, 255, 192,
-        48, 83, 69, 0, 7, 33, 6, 43, 0, 32, 83, 69, 1, 7, 37, 6, 36, 0, 32,
-        83, 71, 0, 19, 44, 22, 50, 0, 32, 83, 72, 0, 18, 8, 255, 255, 240, 16,
-        83, 73, 0, 7, 33, 6, 43, 0, 32, 83, 73, 1, 7, 37, 6, 36, 0, 32, 83,
-        74, 0, 18, 8, 255, 255, 240, 16, 83, 75, 0, 7, 33, 6, 43, 0, 32, 83,
-        75, 1, 7, 37, 6, 36, 0, 32, 83, 76, 0, 7, 33, 14, 39, 0, 16, 83, 77,
-        0, 7, 33, 14, 39, 0, 16, 83, 78, 0, 7, 33, 6, 43, 0, 32, 83, 79, 0,
-        7, 8, 255, 255, 240, 16, 83, 82, 0, 7, 33, 14, 39, 0, 16, 83, 84, 0,
-        7, 33, 14, 39, 0, 16, 83, 86, 0, 7, 14, 12, 17, 0, 32, 83, 88, 0, 18,
-        8, 255, 255, 240, 16, 83, 89, 0, 18, 8, 255, 255, 240, 16, 83, 90, 0,
-        7, 33, 14, 39, 0, 16, 84, 65, 0, 18, 8, 255, 255, 240, 16, 84, 67, 0,
-        7, 33, 14, 39, 0, 16, 84, 68, 0, 7, 33, 14, 39, 0, 16, 84, 70, 0, 7,
-        33, 14, 39, 0, 16, 84, 71, 0, 7, 33, 14, 39, 0, 16, 84, 72, 0, 7, 43,
-        6, 52, 0, 32, 84, 74, 0, 7, 33, 14, 39, 0, 16, 84, 75, 0, 18, 8, 255,
-        255, 240, 16, 84, 76, 0, 7, 33, 14, 39, 0, 48, 84, 77, 0, 7, 33, 14,
-        39, 0, 16, 84, 78, 0, 7, 5, 6, 4, 0, 32, 84, 79, 0, 7, 8, 255, 255,
-        240, 16, 84, 82, 0, 7, 5, 6, 4, 0, 32, 84, 82, 7, 7, 33, 14, 39, 0,
-        48, 84, 84, 0, 7, 43, 6, 52, 0, 32, 84, 86, 0, 7, 8, 255, 255, 240,
-        16, 84, 87, 0, 0, 52, 0, 64, 0, 0, 84, 87, 2, 0, 53, 0, 62, 0, 0, 84,
-        90, 0, 7, 33, 14, 39, 0, 16, 85, 65, 0, 7, 8, 255, 255, 240, 0, 85,
-        71, 0, 7, 34, 6, 31, 0, 32, 85, 77, 0, 0, 14, 0, 17, 0, 0, 85, 83, 0,
-        5, 32, 4, 30, 0, 0, 85, 83, 25, 12, 8, 10, 7, 0, 0, 85, 83, 26, 4, 8,
-        1, 7, 0, 0, 85, 89, 0, 20, 43, 23, 52, 0, 0, 85, 90, 0, 7, 33, 14, 39,
-        0, 16, 86, 65, 0, 7, 33, 6, 43, 0, 0, 86, 67, 0, 7, 15, 13, 18, 0, 16,
-        86, 69, 0, 7, 41, 6, 47, 0, 0, 86, 71, 0, 7, 33, 6, 43, 0, 0, 86, 73,
-        0, 0, 14, 0, 17, 0, 0, 86, 78, 0, 7, 5, 6, 4, 0, 0, 86, 85, 0, 7, 43,
-        13, 49, 0, 16, 87, 70, 0, 7, 33, 13, 43, 0, 16, 87, 83, 0, 7, 43, 12,
-        49, 0, 16, 88, 48, 0, 3, 20, 0, 21, 0, 0, 88, 49, 0, 7, 41, 6, 47, 0,
-        0, 88, 50, 0, 21, 3, 6, 2, 0, 0, 88, 51, 0, 7, 33, 6, 35, 0, 32, 88,
-        65, 0, 7, 3, 255, 255, 240, 0, 88, 66, 0, 0, 23, 255, 255, 240, 0, 88,
-        82, 0, 1, 54, 3, 63, 0, 0, 88, 83, 0, 13, 4, 11, 1, 0, 32, 88, 84, 0,
-        12, 8, 10, 7, 0, 32, 88, 85, 0, 9, 37, 7, 37, 0, 32, 88, 86, 0, 11,
-        8, 9, 7, 0, 32, 88, 87, 0, 22, 35, 25, 33, 0, 32, 88, 88, 0, 10, 33,
-        255, 255, 240, 32, 88, 89, 0, 7, 33, 6, 43, 0, 32, 88, 90, 0, 14, 8,
-        255, 255, 240, 32, 89, 49, 0, 0, 14, 255, 255, 240, 16, 89, 50, 0, 0,
-        14, 255, 255, 240, 16, 89, 51, 0, 0, 14, 255, 255, 240, 16, 89, 52,
-        0, 0, 14, 255, 255, 240, 16, 89, 53, 0, 0, 14, 255, 255, 240, 16, 89,
-        54, 0, 0, 14, 255, 255, 240, 16, 89, 55, 0, 0, 14, 255, 255, 240, 16,
-        89, 69, 0, 7, 45, 13, 51, 0, 16, 89, 84, 0, 7, 33, 6, 43, 0, 0, 89,
-        89, 0, 18, 8, 255, 255, 240, 0, 90, 49, 0, 18, 8, 255, 255, 240, 16,
-        90, 50, 0, 18, 8, 255, 255, 240, 16, 90, 51, 0, 18, 8, 255, 255, 240,
-        16, 90, 52, 0, 18, 8, 255, 255, 240, 16, 90, 53, 0, 18, 8, 255, 255,
-        240, 16, 90, 54, 0, 18, 8, 255, 255, 240, 16, 90, 55, 0, 18, 8, 255,
-        255, 240, 16, 90, 56, 0, 18, 8, 255, 255, 240, 16, 90, 57, 0, 18, 8,
-        255, 255, 240, 16, 90, 65, 0, 7, 33, 6, 43, 0, 32, 90, 77, 0, 19, 41,
-        22, 47, 0, 0, 90, 87, 0, 7, 33, 14, 39, 0, 48, 10, 2, 255, 3, 17, 19,
-        24, 28, 30, 49, 0, 4, 56, 19, 1, 70, 27, 1, 58, 34, 1, 70, 49, 1, 14,
-        0, 255, 2, 23, 19, 23, 49, 2, 2, 84, 19, 1, 84, 49, 1, 14, 0, 255, 2,
-        23, 19, 23, 49, 0, 2, 66, 19, 1, 66, 49, 1, 23, 1, 1, 4, 23, 19, 17,
-        28, 23, 38, 30, 49, 2, 2, 84, 22, 1, 84, 49, 1, 24, 1, 5, 2, 23, 23,
-        30, 49, 0, 4, 56, 19, 1, 58, 28, 1, 60, 39, 1, 70, 49, 1, 15, 1, 255,
-        1, 23, 20, 2, 1, 84, 20, 1, 15, 1, 255, 1, 23, 20, 2, 1, 84, 20, 1,
-        20, 1, 255, 2, 21, 20, 21, 49, 2, 2, 84, 20, 1, 84, 49, 1, 0, 0, 255,
-        0, 0, 0, 19, 1, 255, 2, 23, 20, 23, 48, 0, 2, 66, 20, 1, 66, 48, 1,
-        20, 1, 255, 2, 23, 20, 20, 49, 0, 2, 66, 20, 1, 64, 49, 1, 20, 1, 255,
-        2, 23, 20, 20, 49, 2, 2, 92, 20, 1, 80, 49, 1, 9, 0, 255, 1, 23, 19,
-        2, 1, 84, 19, 1, 9, 0, 255, 1, 20, 19, 0, 1, 56, 19, 1, 11, 2, 255,
-        3, 17, 19, 24, 30, 30, 49, 0, 5, 56, 19, 1, 70, 27, 1, 58, 34, 1, 68,
-        38, 1, 70, 49, 1, 13, 2, 255, 3, 17, 19, 24, 31, 30, 49, 0, 5, 56, 19,
-        1, 78, 27, 1, 64, 34, 1, 68, 36, 1, 78, 43, 1, 26, 1, 255, 2, 23, 20,
-        30, 40, 2, 2, 84, 23, 1, 112, 49, 1, 14, 2, 255, 2, 17, 19, 30, 49,
-        0, 2, 58, 19, 1, 80, 49, 1, 27, 0, 255, 1, 30, 26, 0, 1, 120, 26, 1,
-        26, 2, 255, 1, 30, 25, 0, 1, 120, 25, 1, 10, 2, 2, 3, 17, 19, 24, 28,
-        30, 49, 0, 4, 56, 19, 1, 70, 27, 1, 58, 34, 1, 70, 49, 1, 10, 2, 255,
-        3, 17, 19, 24, 28, 30, 49, 0, 4, 56, 19, 1, 66, 27, 1, 60, 34, 1, 66,
-        49, 1, 20, 2, 255, 2, 23, 20, 33, 49, 2, 2, 84, 20, 1, 84, 49, 1, 10,
-        2, 1, 3, 17, 19, 24, 28, 30, 49, 0, 4, 56, 19, 1, 70, 27, 1, 58, 34,
-        1, 70, 49, 1, 32, 2, 255, 1, 30, 38, 2, 1, 84, 38, 1, 29, 2, 255, 2,
-        21, 28, 30, 49, 0, 2, 60, 28, 1, 68, 49, 1, 29, 1, 255, 2, 30, 28, 30,
-        49, 2, 2, 112, 28, 1, 112, 49, 1, 5, 2, 0, 2, 23, 18, 23, 19, 2, 2,
-        84, 18, 1, 84, 19, 1, 7, 2, 0, 2, 23, 18, 23, 20, 2, 2, 84, 18, 1, 84,
-        20, 1, 8, 2, 0, 3, 23, 18, 23, 20, 30, 38, 2, 2, 84, 18, 1, 84, 22,
-        1, 6, 1, 255, 4, 14, 18, 14, 19, 20, 29, 20, 48, 0, 4, 48, 18, 1, 48,
-        19, 1, 60, 29, 1, 60, 48, 1, 14, 0, 255, 2, 17, 19, 30, 49, 0, 2, 56,
-        19, 1, 68, 49, 1, 12, 2, 255, 3, 17, 19, 24, 31, 30, 50, 0, 6, 62, 19,
-        1, 90, 27, 1, 80, 35, 1, 90, 41, 1, 86, 45, 1, 118, 50, 1, 22, 1, 255,
-        2, 23, 20, 30, 38, 2, 1, 84, 22, 1, 25, 1, 255, 1, 23, 24, 2, 1, 84,
-        24, 1, 14, 0, 6, 2, 17, 19, 20, 49, 0, 2, 56, 19, 1, 60, 49, 1, 18,
-        1, 255, 2, 20, 20, 20, 44, 2, 2, 72, 20, 1, 72, 44, 1, 22, 1, 255, 2,
-        23, 20, 30, 38, 2, 1, 84, 22, 1, 22, 2, 255, 1, 20, 22, 0, 2, 62, 20,
-        1, 66, 38, 1, 16, 2, 255, 2, 20, 20, 28, 38, 2, 2, 84, 20, 1, 112, 38,
-        1, 4, 0, 255, 1, 23, 18, 2, 1, 84, 18, 1, 20, 1, 255, 2, 23, 20, 30,
-        49, 2, 2, 84, 20, 1, 84, 49, 1, 21, 1, 255, 3, 23, 20, 30, 37, 30, 46,
-        2, 2, 84, 21, 1, 84, 46, 1, 26, 1, 255, 3, 23, 20, 24, 39, 30, 49, 2,
-        1, 84, 25, 1, 26, 1, 255, 3, 23, 20, 24, 39, 30, 49, 2, 1, 84, 25, 1,
-        17, 1, 255, 2, 23, 20, 30, 40, 2, 2, 84, 20, 1, 112, 40, 1, 34, 0, 255,
-        1, 27, 49, 2, 1, 84, 49, 1, 34, 0, 255, 1, 30, 49, 0, 1, 78, 49, 1,
-        14, 0, 255, 2, 27, 19, 27, 49, 2, 2, 84, 19, 1, 84, 49, 1, 34, 0, 255,
-        1, 27, 49, 2, 1, 84, 49, 1, 34, 0, 255, 1, 20, 49, 2, 1, 76, 49, 1,
-        33, 0, 255, 1, 20, 48, 2, 1, 76, 48, 1, 31, 2, 255, 2, 17, 33, 30, 49,
-        0, 2, 68, 33, 1, 68, 49, 1, 30, 2, 255, 3, 17, 33, 24, 38, 30, 49, 0,
-        3, 56, 33, 1, 68, 38, 1, 68, 49, 1, 28, 2, 255, 3, 17, 28, 24, 38, 30,
-        49, 0, 3, 56, 28, 1, 58, 38, 1, 62, 49, 1, 33, 0, 255, 1, 27, 48, 2,
-        1, 84, 48, 1, 0, 0, 3, 0, 0, 0, 120, 11, 0, 0, 16, 4, 5, 6, 7, 8, 9,
-        10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 18, 1, 255, 1, 52, 1, 14,
-        1, 15, 3, 28, 39, 49, 2, 19, 49, 166, 169, 0, 0
-};
-const resource_hnd_t wifi_mfg_firmware_clm_blob = { RESOURCE_IN_MEMORY, 7222, {.mem = { (const char *) wifi_mfg_firmware_clm_blob_image_data }}};
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1.bin b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1.bin
deleted file mode 100644
index 4fb75a4b9c84c45bd53e849012e1c644d56c1fff..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 421098
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
VGP#7y{$-1&CCklQ`Lr`L`ycA(+Lr(T

diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1.clm_blob b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1.clm_blob
deleted file mode 100644
index 08fbbfc28e649f9d995645855bbc2945092664ec..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 7222
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
E0+l`kC;$Ke

diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1_bin.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W_FS/4343WA1_bin.c
similarity index 99%
rename from targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1_bin.c
rename to targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W_FS/4343WA1_bin.c
index e48960d5a6..ddaf0f7188 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1_bin.c
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W_FS/4343WA1_bin.c
@@ -25489,5 +25489,5 @@ const unsigned char wifi_firmware_image_data[421098] = {
         49, 45, 53, 97, 102, 99, 56, 99, 49, 101, 0, 254, 0, 68, 86, 73, 68,
         32, 48, 49, 45, 101, 100, 48, 100, 55, 97, 53, 54
 };
-//const resource_hnd_t wifi_firmware_image = { RESOURCE_IN_MEMORY, 421098, {.mem = { (const char *) wifi_firmware_image_data }}};
-const resource_hnd_t wifi_firmware_image = { RESOURCE_IN_FILESYSTEM, 421098, {.fs = { 0, "/wlan/4343WA1.BIN" }}};
+resource_hnd_t wifi_firmware_image = { RESOURCE_IN_EXTERNAL_STORAGE, 421098, {.fs = { 0, "/wlan/4343WA1.BIN" }}};
+
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1_clm_blob.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W_FS/4343WA1_clm_blob.c
similarity index 100%
rename from targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/4343WA1_clm_blob.c
rename to targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W_FS/4343WA1_clm_blob.c
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/resources.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W_FS/resources.h
similarity index 81%
rename from targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/resources.h
rename to targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W_FS/resources.h
index caa02d34d6..01bad9226f 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W/resources.h
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/firmware/COMPONENT_4343W_FS/resources.h
@@ -18,14 +18,13 @@
 #ifndef INCLUDED_RESOURCES_H_
 #define INCLUDED_RESOURCES_H_
 #include "wiced_resource.h"
+#include "wiced_filesystem.h"
+
+extern wiced_filesystem_t resource_fs_handle;
 
 extern const resource_hnd_t wifi_firmware_image;
 extern const unsigned char wifi_firmware_image_data[421098];
 extern const resource_hnd_t wifi_firmware_clm_blob;
 extern const unsigned char wifi_firmware_clm_blob_image_data[7222];
-extern const resource_hnd_t wifi_mfg_firmware_image;
-extern const unsigned char wifi_mfg_firmware_image_data[391693];
-extern const resource_hnd_t wifi_mfg_firmware_clm_blob;
-extern const unsigned char wifi_mfg_firmware_clm_blob_image_data[7222];
 
 #endif /* ifndef INCLUDED_RESOURCES_H_ */
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/nvram/TARGET_STM32H747xI/wifi_nvram_image.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/nvram/wifi_nvram_image.h
similarity index 100%
rename from targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/nvram/TARGET_STM32H747xI/wifi_nvram_image.h
rename to targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/nvram/wifi_nvram_image.h
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/resource_imp/whd_resources.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/resource_imp/whd_resources.c
deleted file mode 100644
index 8f703bb779..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/resource_imp/whd_resources.c
+++ /dev/null
@@ -1,292 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- * Defines WHD resource functions for BCM943340WCD1 platform
- */
-#include "resources.h"
-#include "wifi_nvram_image.h"
-#include "whd_resource_api.h"
-#include "whd_debug.h"
-#include "whd.h"
-
-/******************************************************
-*                      Macros
-******************************************************/
-#define BLOCK_BUFFER_SIZE                    (1024)
-
-/******************************************************
-*                    Constants
-******************************************************/
-
-#if defined(WHD_DYNAMIC_NVRAM)
-#define NVRAM_SIZE             dynamic_nvram_size
-#define NVRAM_IMAGE_VARIABLE   dynamic_nvram_image
-#else
-#define NVRAM_SIZE             sizeof(wifi_nvram_image)
-#define NVRAM_IMAGE_VARIABLE   wifi_nvram_image
-#endif
-
-/******************************************************
-*                   Enumerations
-******************************************************/
-
-/******************************************************
-*                 Type Definitions
-******************************************************/
-
-/******************************************************
-*                    Structures
-******************************************************/
-
-/******************************************************
-*               Static Function Declarations
-******************************************************/
-uint32_t host_platform_resource_size(whd_driver_t whd_drv, whd_resource_type_t resource, uint32_t *size_out);
-uint32_t host_get_resource_block(whd_driver_t whd_drv, whd_resource_type_t type,
-                                 uint32_t blockno, const uint8_t **data, uint32_t *size_out);
-uint32_t host_get_resource_no_of_blocks(whd_driver_t whd_drv, whd_resource_type_t type, uint32_t *block_count);
-uint32_t host_get_resource_block_size(whd_driver_t whd_drv, whd_resource_type_t type, uint32_t *size_out);
-resource_result_t resource_read(const resource_hnd_t *resource, uint32_t offset, uint32_t maxsize, uint32_t *size,
-                                void *buffer);
-
-/******************************************************
-*               Variable Definitions
-******************************************************/
-
-extern const resource_hnd_t wifi_firmware_image;
-extern const resource_hnd_t wifi_firmware_clm_blob;
-unsigned char r_buffer[BLOCK_BUFFER_SIZE];
-
-#if defined(WHD_DYNAMIC_NVRAM)
-uint32_t dynamic_nvram_size = sizeof(wifi_nvram_image);
-void *dynamic_nvram_image = &wifi_nvram_image;
-#endif
-
-/******************************************************
-*               Function Definitions
-******************************************************/
-
-resource_result_t resource_read(const resource_hnd_t *resource, uint32_t offset, uint32_t maxsize, uint32_t *size,
-                                void *buffer)
-{
-    if (offset > resource->size)
-    {
-        return RESOURCE_OFFSET_TOO_BIG;
-    }
-
-    *size = MIN(maxsize, resource->size - offset);
-
-    if (resource->location == RESOURCE_IN_MEMORY)
-    {
-        memcpy(buffer, &resource->val.mem.data[offset], *size);
-    }
-#ifdef USES_RESOURCES_IN_EXTERNAL_STORAGE
-    else if (resource->location == RESOURCE_IN_EXTERNAL_STORAGE)
-    {
-        return platform_read_external_resource(resource, offset, maxsize, size, buffer);
-    }
-#endif
-#ifdef USES_RESOURCE_GENERIC_FILESYSTEM
-    else
-    {
-        int file_handle = -1;
-        if (WHD_SUCCESS !=
-            wiced_filesystem_file_open (&file_handle, resource->val.fs.filename) )
-        {
-            return WHD_BADARG;
-        }
-        if (WHD_SUCCESS != wiced_filesystem_file_seek (&file_handle, (offset + resource->val.fs.offset)) )
-        {
-            wiced_filesystem_file_close (&file_handle);
-            return WHD_BADARG;
-        }
-        if (WHD_SUCCESS != wiced_filesystem_file_read (&file_handle, buffer, *size, &size) )
-        {
-            wiced_filesystem_file_close (&file_handle);
-            return WHD_BADARG;
-        }
-        wiced_filesystem_file_close (&file_handle);
-    }
-#else
-#ifdef USES_RESOURCE_FILESYSTEM
-    else
-    {
-        wicedfs_file_t file_hnd;
-
-        if (0 != wicedfs_fopen(&resource_fs_handle, &file_hnd, resource->val.fs.filename) )
-        {
-            return RESOURCE_FILE_OPEN_FAIL;
-        }
-
-        if (0 != wicedfs_fseek(&file_hnd, (long)(offset + resource->val.fs.offset), SEEK_SET) )
-        {
-            wicedfs_fclose(&file_hnd);
-            return RESOURCE_FILE_SEEK_FAIL;
-        }
-
-        if (*size != wicedfs_fread(buffer, 1, *size, &file_hnd) )
-        {
-            wicedfs_fclose(&file_hnd);
-            return RESOURCE_FILE_READ_FAIL;
-        }
-
-        wicedfs_fclose(&file_hnd);
-    }
-#endif /* ifdef USES_RESOURCE_FILESYSTEM */
-#endif /* USES_RESOURCE_GENERIC_FILESYSTEM */
-    return RESOURCE_SUCCESS;
-}
-
-uint32_t host_platform_resource_size(whd_driver_t whd_drv, whd_resource_type_t resource, uint32_t *size_out)
-{
-    if (resource == WHD_RESOURCE_WLAN_FIRMWARE)
-    {
-#ifdef NO_WIFI_FIRMWARE
-        whd_assert("Request firmware in a no wifi firmware application", 0 == 1);
-        *size_out = 0;
-#else
-#ifdef WIFI_FIRMWARE_IN_MULTI_APP
-        wiced_app_t wifi_app;
-
-        *size_out = 0;
-        if (wiced_waf_app_open(DCT_WIFI_FIRMWARE_INDEX, &wifi_app) != WICED_SUCCESS)
-        {
-            return ( whd_result_t )RESOURCE_UNSUPPORTED;
-        }
-        wiced_waf_app_get_size(&wifi_app, size_out);
-#else
-        *size_out = (uint32_t)resource_get_size(&wifi_firmware_image);
-#endif
-#endif
-
-    }
-    else if (resource == WHD_RESOURCE_WLAN_NVRAM)
-    {
-        *size_out = NVRAM_SIZE;
-    }
-    else
-    {
-        *size_out = (uint32_t)resource_get_size(&wifi_firmware_clm_blob);
-    }
-    return WHD_SUCCESS;
-}
-
-uint32_t host_get_resource_block(whd_driver_t whd_drv, whd_resource_type_t type,
-                                 uint32_t blockno, const uint8_t **data, uint32_t *size_out)
-{
-    uint32_t resource_size;
-    uint32_t block_size;
-    uint32_t block_count;
-    uint32_t read_pos;
-    uint32_t result;
-
-    host_platform_resource_size(whd_drv, type, &resource_size);
-    host_get_resource_block_size(whd_drv, type, &block_size);
-    host_get_resource_no_of_blocks(whd_drv, type, &block_count);
-    memset(r_buffer, 0, block_size);
-    read_pos = blockno * block_size;
-
-    if (blockno >= block_count)
-    {
-        return WHD_BADARG;
-    }
-
-    if (type == WHD_RESOURCE_WLAN_FIRMWARE)
-    {
-        result = resource_read( (const resource_hnd_t *)&wifi_firmware_image, read_pos, block_size, size_out,
-                                r_buffer );
-        if (result != WHD_SUCCESS)
-        {
-            return result;
-        }
-        *data = (uint8_t *)&r_buffer;
-        /*
-         * In case of local buffer read use the following code
-         *
-         *  *size_out = MIN(BLOCK_BUFFER_SIZE, resource_size - transfer_progress);
-         *  *data = (uint8_t *)wifi_firmware_image_data;
-         *
-         * For sending the entire buffer in single block set size out as following
-         *  *size_out = (uint32_t)resource_get_size(&wifi_firmware_image);
-         */
-    }
-    else if (type == WHD_RESOURCE_WLAN_NVRAM)
-    {
-        if (NVRAM_SIZE - read_pos > block_size)
-        {
-            *size_out = block_size;
-        }
-        else
-        {
-            *size_out = NVRAM_SIZE - read_pos;
-        }
-        *data = ( (uint8_t *)NVRAM_IMAGE_VARIABLE ) + read_pos;
-    }
-    else
-    {
-        result = resource_read( (const resource_hnd_t *)&wifi_firmware_clm_blob, read_pos, block_size,
-                                size_out,
-                                r_buffer );
-        if (result != WHD_SUCCESS)
-        {
-            return result;
-        }
-        *data = (uint8_t *)&r_buffer;
-        /*
-         * In case of local buffer read use the following code
-         *
-         *  *size_out = MIN(BLOCK_BUFFER_SIZE, resource_size - transfer_progress);
-         *  *data = (uint8_t *)wifi_firmware_clm_blob_image_data;
-         *
-         * For sending the entire buffer in single block set size out as following
-         *  *size_out = sizeof(wifi_firmware_clm_blob_image_data);
-         */
-
-    }
-
-    return WHD_SUCCESS;
-}
-
-uint32_t host_get_resource_block_size(whd_driver_t whd_drv, whd_resource_type_t type, uint32_t *size_out)
-{
-    *size_out = BLOCK_BUFFER_SIZE;
-    return WHD_SUCCESS;
-}
-
-uint32_t host_get_resource_no_of_blocks(whd_driver_t whd_drv, whd_resource_type_t type, uint32_t *block_count)
-{
-    uint32_t resource_size;
-    uint32_t block_size;
-
-    host_platform_resource_size(whd_drv, type, &resource_size);
-    host_get_resource_block_size(whd_drv, type, &block_size);
-    *block_count = resource_size / block_size;
-    if (resource_size % block_size)
-        *block_count += 1;
-
-    return WHD_SUCCESS;
-}
-
-whd_resource_source_t resource_ops =
-{
-    .whd_resource_size = host_platform_resource_size,
-    .whd_get_resource_block_size = host_get_resource_block_size,
-    .whd_get_resource_no_of_blocks = host_get_resource_no_of_blocks,
-    .whd_get_resource_block = host_get_resource_block
-};
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/resource_imp/wiced_resource.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/resource_imp/wiced_resource.h
deleted file mode 100644
index 0a1cccd870..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/resources/resource_imp/wiced_resource.h
+++ /dev/null
@@ -1,228 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  WICED Resource API's
- *  The Resource Management functions reads resource from a resource location
- *  and returns the number of bytes from an offset in an caller filled buffer.
- *
- *  Functions to get the resource size and resource data
- *
- *  The Resource could be one of the three locations
- *
- *  - Wiced Filesystem (File System)
- *  - Internal Memory  (Embedded Flash memory)
- *  - External Storage ( External Flash connected via SPI interface)
- *
- */
-
-#ifndef INCLUDED_RESOURCE_H_
-#define INCLUDED_RESOURCE_H_
-
-#include <stdint.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-
-/******************************************************
-*                     Macros
-******************************************************/
-#ifndef MIN
-#define MIN(x, y) ( (x) < (y) ? (x) : (y) )
-#endif /* ifndef MIN */
-
-/* Suppress unused parameter warning */
-#ifndef UNUSED_PARAMETER
-#define UNUSED_PARAMETER(x) ( (void)(x) )
-#endif
-
-#ifndef RESULT_ENUM
-#define RESULT_ENUM(prefix, name, value)  prefix ## name = (value)
-#endif /* ifndef RESULT_ENUM */
-
-#if defined(CY_SECTION)
-#define CY_SECTION_WHD          CY_SECTION
-#else
-#if !defined(CY_SECTION_WHD)
-#if defined(__ARMCC_VERSION)
-#define CY_SECTION_WHD(name)    __attribute__ ( (section(name) ) )
-#elif defined (__GNUC__)
-#if defined (__clang__)
-#define CY_SECTION_WHD(name)    __attribute__ ( (section("__DATA, "name) ) )
-#else
-#define CY_SECTION_WHD(name)    __attribute__ ( (section(name) ) )
-#endif
-#elif defined (__ICCARM__)
-#define CY_SECTION_WHD(name)    CY_PRAGMA(location = name)
-#else
-#error "An unsupported toolchain"
-#endif /* (__ARMCC_VERSION) */
-#endif /* !defined(CY_SECTION_WHD) */
-#endif /* defined(CY_SECTION) */
-
-/* These Enum result values are for Resource errors
- * Values: 4000 - 4999
- */
-#define RESOURCE_RESULT_LIST(prefix)  \
-    RESULT_ENUM(prefix, SUCCESS,                         0),      /**< Success */                           \
-    RESULT_ENUM(prefix, UNSUPPORTED,                     7),      /**< Unsupported function */              \
-    RESULT_ENUM(prefix, OFFSET_TOO_BIG,               4001),      /**< Offset past end of resource */       \
-    RESULT_ENUM(prefix, FILE_OPEN_FAIL,               4002),      /**< Failed to open resource file */      \
-    RESULT_ENUM(prefix, FILE_SEEK_FAIL,               4003),      /**< Failed to seek to requested offset in resource file */ \
-    RESULT_ENUM(prefix, FILE_READ_FAIL,               4004),      /**< Failed to read resource file */
-
-#define resource_get_size(resource) ( (resource)->size )
-
-/******************************************************
-*                    Constants
-******************************************************/
-
-#define RESOURCE_ENUM_OFFSET  (1300)
-
-/******************************************************
-*                Enumerations
-******************************************************/
-
-/**
- * Result type for WICED Resource function
- */
-typedef enum
-{
-    RESOURCE_RESULT_LIST(RESOURCE_)
-} resource_result_t;
-
-/******************************************************
-*                 Type Definitions
-******************************************************/
-
-typedef const void *resource_data_t;
-typedef unsigned long resource_size_t;
-
-/******************************************************
-*                   Structures
-******************************************************/
-
-/**
- * Memory handle
- */
-typedef struct
-{
-    const char *data;          /**< resource data */
-} memory_resource_handle_t;
-
-/**
- * Filesystem handle
- */
-typedef struct
-{
-    unsigned long offset;      /**< Offset to the start of the resource */
-    const char *filename;      /**< name of the resource                */
-} filesystem_resource_handle_t;
-
-
-typedef enum
-{
-    RESOURCE_IN_MEMORY,           /**< resource location in memory           */
-    RESOURCE_IN_FILESYSTEM,       /**< resource location in filesystem       */
-    RESOURCE_IN_EXTERNAL_STORAGE  /**< resource location in external storage */
-} resource_location_t;
-
-/**
- * Resource handle structure
- */
-typedef struct
-{
-    resource_location_t location;       /**< resource location */
-    unsigned long size;                 /**< resource size     */
-    union
-    {
-        filesystem_resource_handle_t fs;                      /** < filesystem resource handle */
-        memory_resource_handle_t mem;                         /** < memory resource handle     */
-        void *external_storage_context;                       /** < external storage context   */
-    } val;
-} resource_hnd_t;
-
-/******************************************************
-*                 Global Variables
-******************************************************/
-
-/******************************************************
-*               Function Declarations
-******************************************************/
-
-/*****************************************************************************/
-/** @addtogroup  resourceapi  Wiced Resource Management API's
- *  @ingroup framework
- *
- *  WCIED Resource Management API's has functions to get the
- *  resource size and reads resource data from a resource
- *  location and returns the number of bytes in an caller
- *  filled buffer
- *
- *  The Resource could be one of the three locations
- *
- *  - Wiced Filesystem ( File System)
- *  - Internal Memory   (Embedded Flash memory)
- *  - External Storage  ( External Flash connected via SPI interface )
- *
- *  @{
- */
-/*****************************************************************************/
-
-/** Read resource using the handle specified
- *
- * @param[in]  resource : handle of the resource to read
- * @param[in]  offset   : offset from the beginning of the resource block
- * @param[in]  maxsize  : size of the buffer
- * @param[out] size     : size of the data successfully read
- * @param[in]  buffer   : pointer to a buffer to contain the read data
- *
- * @return @ref resource_result_t
- */
-extern resource_result_t resource_read(const resource_hnd_t *resource, uint32_t offset, uint32_t maxsize,
-                                       uint32_t *size, void *buffer);
-
-/** Retrieve a read only resource buffer using the handle specified
- *
- * @param[in]  resource : handle of the resource to read
- * @param[in]  offset   : offset from the beginning of the resource block
- * @param[in]  maxsize  : size of the buffer
- * @param[out] size     : size of the data successfully read
- * @param[out] buffer   : pointer to a buffer pointer to point to the resource data
- *
- * @return @ref resource_result_t
- */
-extern resource_result_t resource_get_readonly_buffer(const resource_hnd_t *resource, uint32_t offset, uint32_t maxsize,
-                                                      uint32_t *size_out, const void **buffer);
-
-/** Free a read only resource buffer using the handle specified
- *
- * @param[in]  resource : handle of the resource to read
- * @param[in]  buffer   : pointer to a buffer set using resource_get_readonly_buffer
- *
- * @return @ref resource_result_t
- */
-extern resource_result_t resource_free_readonly_buffer(const resource_hnd_t *handle, const void *buffer);
-/* @} */
-#ifdef __cplusplus
-} /*extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_RESOURCE_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus.c
deleted file mode 100644
index 9f43714289..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus.c
+++ /dev/null
@@ -1,145 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *
- */
-
-#include "whd_bus.h"
-#include "whd_int.h"
-
-whd_result_t whd_bus_init(whd_driver_t whd_driver)
-{
-    return whd_driver->bus_if->whd_bus_init_fptr(whd_driver);
-}
-
-whd_result_t whd_bus_deinit(whd_driver_t whd_driver)
-{
-    return whd_driver->bus_if->whd_bus_deinit_fptr(whd_driver);
-}
-
-whd_bool_t whd_bus_wake_interrupt_present(whd_driver_t whd_driver)
-{
-    return whd_driver->bus_if->whd_bus_wake_interrupt_present_fptr(whd_driver);
-}
-
-whd_result_t whd_bus_send_buffer(whd_driver_t whd_driver, whd_buffer_t buffer)
-{
-    return whd_driver->bus_if->whd_bus_send_buffer_fptr(whd_driver, buffer);
-}
-
-uint32_t whd_bus_packet_available_to_read(whd_driver_t whd_driver)
-{
-    return whd_driver->bus_if->whd_bus_packet_available_to_read_fptr(whd_driver);
-}
-
-whd_result_t whd_bus_read_frame(whd_driver_t whd_driver, whd_buffer_t *buffer)
-{
-    return whd_driver->bus_if->whd_bus_read_frame_fptr(whd_driver, buffer);
-}
-
-whd_result_t whd_bus_write_backplane_value(whd_driver_t whd_driver, uint32_t address, uint8_t register_length,
-                                           uint32_t value)
-{
-    return whd_driver->bus_if->whd_bus_write_backplane_value_fptr(whd_driver, address, register_length, value);
-}
-
-whd_result_t whd_bus_read_backplane_value(whd_driver_t whd_driver, uint32_t address, uint8_t register_length,
-                                          uint8_t *value)
-{
-    return whd_driver->bus_if->whd_bus_read_backplane_value_fptr(whd_driver, address, register_length, value);
-}
-
-whd_result_t whd_bus_read_register_value(whd_driver_t whd_driver, whd_bus_function_t function, uint32_t address,
-                                         uint8_t value_length, uint8_t *value)
-{
-    return whd_driver->bus_if->whd_bus_read_register_value_fptr(whd_driver, function, address, value_length, value);
-}
-
-whd_result_t whd_bus_write_register_value(whd_driver_t whd_driver, whd_bus_function_t function, uint32_t address,
-                                          uint8_t value_length, uint32_t value)
-{
-    return whd_driver->bus_if->whd_bus_write_register_value_fptr(whd_driver, function, address, value_length, value);
-}
-
-whd_result_t whd_bus_transfer_bytes(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                    whd_bus_function_t function, uint32_t address, uint16_t size,
-                                    whd_transfer_bytes_packet_t *data)
-{
-    return whd_driver->bus_if->whd_bus_transfer_bytes_fptr(whd_driver, direction, function, address, size, data);
-}
-
-whd_result_t whd_bus_poke_wlan(whd_driver_t whd_driver)
-{
-    return whd_driver->bus_if->whd_bus_poke_wlan_fptr(whd_driver);
-}
-
-whd_result_t whd_bus_wakeup(whd_driver_t whd_driver)
-{
-    return whd_driver->bus_if->whd_bus_wakeup_fptr(whd_driver);
-}
-
-whd_result_t whd_bus_sleep(whd_driver_t whd_driver)
-{
-    return whd_driver->bus_if->whd_bus_sleep_fptr(whd_driver);
-}
-
-whd_result_t whd_bus_wait_for_wlan_event(whd_driver_t whd_driver, cy_semaphore_t *transceive_semaphore)
-{
-    return whd_driver->bus_if->whd_bus_wait_for_wlan_event_fptr(whd_driver, transceive_semaphore);
-}
-
-whd_bool_t whd_bus_use_status_report_scheme(whd_driver_t whd_driver)
-{
-    return whd_driver->bus_if->whd_bus_use_status_report_scheme_fptr(whd_driver);
-}
-
-uint8_t whd_bus_backplane_read_padd_size(whd_driver_t whd_driver)
-{
-    return whd_driver->bus_if->whd_bus_backplane_read_padd_size_fptr(whd_driver);
-}
-
-uint32_t whd_bus_get_max_transfer_size(whd_driver_t whd_driver)
-{
-    return whd_driver->bus_if->whd_bus_get_max_transfer_size_fptr(whd_driver);
-}
-
-void whd_bus_init_stats(whd_driver_t whd_driver)
-{
-    whd_driver->bus_if->whd_bus_init_stats_fptr(whd_driver);
-}
-
-whd_result_t whd_bus_print_stats(whd_driver_t whd_driver, whd_bool_t reset_after_print)
-{
-    return whd_driver->bus_if->whd_bus_print_stats_fptr(whd_driver, reset_after_print);
-}
-
-whd_result_t whd_bus_reinit_stats(whd_driver_t whd_driver, whd_bool_t wake_from_firmware)
-{
-    return whd_driver->bus_if->whd_bus_reinit_stats_fptr(whd_driver, wake_from_firmware);
-}
-
-whd_result_t whd_bus_irq_register(whd_driver_t whd_driver)
-{
-    return whd_driver->bus_if->whd_bus_irq_register_fptr(whd_driver);
-}
-
-whd_result_t whd_bus_irq_enable(whd_driver_t whd_driver, whd_bool_t enable)
-{
-    return whd_driver->bus_if->whd_bus_irq_enable_fptr(whd_driver, enable);
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus.h
deleted file mode 100644
index 2b63970425..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus.h
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *
- */
-
-#include "whd_bus_protocol_interface.h"
-
-#ifndef INCLUDED_WHD_BUS_H_
-#define INCLUDED_WHD_BUS_H_
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-#if 0
-typedef struct whd_bus_if *whd_bus_if_t;
-
-typedef whd_result_t (*whd_bus_transfer_t)(whd_bus_if_t *bus_if, whd_bus_transfer_direction_t dir,
-                                           uint8_t *data, uint16_t data_size, void *arg1, void *arg2, void *arg3,
-                                           void *arg4);
-#endif
-
-typedef whd_result_t (*whd_bus_init_t)(whd_driver_t whd_driver);
-typedef whd_result_t (*whd_bus_deinit_t)(whd_driver_t whd_driver);
-
-typedef whd_result_t (*whd_bus_ack_interrupt_t)(whd_driver_t whd_driver, uint32_t intstatus);
-typedef whd_bool_t (*whd_bus_wake_interrupt_present_t)(whd_driver_t whd_driver);
-typedef uint32_t (*whd_bus_packet_available_to_read_t)(whd_driver_t whd_driver);
-typedef whd_result_t (*whd_bus_read_frame_t)(whd_driver_t whd_driver, whd_buffer_t *buffer);
-
-typedef whd_result_t (*whd_bus_write_backplane_value_t)(whd_driver_t whd_driver, uint32_t address,
-                                                        uint8_t register_length, uint32_t value);
-typedef whd_result_t (*whd_bus_read_backplane_value_t)(whd_driver_t whd_driver, uint32_t address,
-                                                       uint8_t register_length, uint8_t *value);
-
-typedef whd_result_t (*whd_bus_write_register_value_t)(whd_driver_t whd_driver, whd_bus_function_t function,
-                                                       uint32_t address, uint8_t value_length, uint32_t value);
-typedef whd_result_t (*whd_bus_read_register_value_t)(whd_driver_t whd_driver, whd_bus_function_t function,
-                                                      uint32_t address, uint8_t value_length, uint8_t *value);
-
-typedef whd_result_t (*whd_bus_transfer_bytes_t)(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                                 whd_bus_function_t function, uint32_t address, uint16_t size,
-                                                 whd_transfer_bytes_packet_t *data);
-
-typedef whd_result_t (*whd_bus_poke_wlan_t)(whd_driver_t whd_driver);
-
-typedef whd_result_t (*whd_bus_wakeup_t)(whd_driver_t whd_driver);
-typedef whd_result_t (*whd_bus_sleep_t)(whd_driver_t whd_driver);
-typedef uint8_t (*whd_bus_backplane_read_padd_size_t)(whd_driver_t whd_driver);
-typedef whd_result_t (*whd_bus_send_buffer_t)(whd_driver_t whd_driver, whd_buffer_t buffer);
-typedef whd_result_t (*whd_bus_wait_for_wlan_event_t)(whd_driver_t whd_driver,
-                                                      cy_semaphore_t *transceive_semaphore);
-typedef whd_bool_t (*whd_bus_use_status_report_scheme_t)(whd_driver_t whd_driver);
-typedef uint32_t (*whd_bus_get_max_transfer_size_t)(whd_driver_t whd_driver);
-
-typedef void (*whd_bus_init_stats_t)(whd_driver_t whd_driver);
-typedef whd_result_t (*whd_bus_print_stats_t)(whd_driver_t whd_driver, whd_bool_t reset_after_print);
-typedef whd_result_t (*whd_bus_reinit_stats_t)(whd_driver_t whd_driver, whd_bool_t wake_from_firmware);
-typedef whd_result_t (*whd_bus_irq_register_t)(whd_driver_t whd_driver);
-typedef whd_result_t (*whd_bus_irq_enable_t)(whd_driver_t whd_driver, whd_bool_t enable);
-
-typedef struct whd_bus_info
-{
-    whd_bus_init_t whd_bus_init_fptr;
-    whd_bus_deinit_t whd_bus_deinit_fptr;
-
-    whd_bus_ack_interrupt_t whd_bus_ack_interrupt_fptr;
-    whd_bus_send_buffer_t whd_bus_send_buffer_fptr;
-
-    whd_bus_wake_interrupt_present_t whd_bus_wake_interrupt_present_fptr;
-    whd_bus_packet_available_to_read_t whd_bus_packet_available_to_read_fptr;
-    whd_bus_read_frame_t whd_bus_read_frame_fptr;
-
-    whd_bus_write_backplane_value_t whd_bus_write_backplane_value_fptr;
-    whd_bus_read_backplane_value_t whd_bus_read_backplane_value_fptr;
-
-    whd_bus_write_register_value_t whd_bus_write_register_value_fptr;
-    whd_bus_read_register_value_t whd_bus_read_register_value_fptr;
-
-    whd_bus_transfer_bytes_t whd_bus_transfer_bytes_fptr;
-
-    whd_bus_poke_wlan_t whd_bus_poke_wlan_fptr;
-
-    whd_bus_wakeup_t whd_bus_wakeup_fptr;
-    whd_bus_sleep_t whd_bus_sleep_fptr;
-
-    whd_bus_backplane_read_padd_size_t whd_bus_backplane_read_padd_size_fptr;
-
-    whd_bus_wait_for_wlan_event_t whd_bus_wait_for_wlan_event_fptr;
-    whd_bus_use_status_report_scheme_t whd_bus_use_status_report_scheme_fptr;
-
-    whd_bus_get_max_transfer_size_t whd_bus_get_max_transfer_size_fptr;
-
-    whd_bus_init_stats_t whd_bus_init_stats_fptr;
-    whd_bus_print_stats_t whd_bus_print_stats_fptr;
-    whd_bus_reinit_stats_t whd_bus_reinit_stats_fptr;
-    whd_bus_irq_register_t whd_bus_irq_register_fptr;
-    whd_bus_irq_enable_t whd_bus_irq_enable_fptr;
-} whd_bus_info_t;
-
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-#endif /* ifndef INCLUDED_WHD_BUS_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_common.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_common.c
deleted file mode 100644
index 98d155b846..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_common.c
+++ /dev/null
@@ -1,517 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *
- */
-#include <stdlib.h>
-#include "cyabs_rtos.h"
-
-#include "whd_bus_common.h"
-#include "whd_chip_reg.h"
-#include "whd_sdio.h"
-#include "whd_chip_constants.h"
-#include "whd_int.h"
-#include "whd_chip.h"
-#include "whd_bus_protocol_interface.h"
-#include "whd_debug.h"
-#include "whd_buffer_api.h"
-#include "whd_resource_if.h"
-#include "whd_resource_api.h"
-#include "whd_types_int.h"
-
-
-/******************************************************
-*                      Macros
-******************************************************/
-#define WHD_SAVE_INTERRUPTS(flags) do { UNUSED_PARAMETER(flags); } while (0);
-#define WHD_RESTORE_INTERRUPTS(flags) do { } while (0);
-
-/******************************************************
-*             Constants
-******************************************************/
-#define INDIRECT_BUFFER_SIZE                    (1024)
-#define WHD_BUS_ROUND_UP_ALIGNMENT              (64)
-#define WHD_BUS_MAX_TRANSFER_SIZE               (WHD_BUS_MAX_BACKPLANE_TRANSFER_SIZE)
-
-#define WHD_BUS_WLAN_ALLOW_SLEEP_INVALID_MS  ( (uint32_t)-1 )
-
-/******************************************************
-*             Structures
-******************************************************/
-
-struct whd_bus_common_info
-{
-    whd_bool_t bus_is_up;
-
-    whd_time_t delayed_bus_release_deadline;
-    whd_bool_t delayed_bus_release_scheduled;
-    uint32_t delayed_bus_release_timeout_ms;
-    volatile uint32_t delayed_bus_release_timeout_ms_request;
-
-    uint32_t backplane_window_current_base_address;
-    whd_bool_t bus_flow_control;
-    volatile whd_bool_t resource_download_abort;
-
-};
-
-/******************************************************
-*             Variables
-******************************************************/
-
-/******************************************************
-*             Function declarations
-******************************************************/
-static whd_result_t whd_bus_common_download_resource(whd_driver_t whd_driver, whd_resource_type_t resource,
-                                                     whd_bool_t direct_resource, uint32_t address);
-
-/******************************************************
-*             Function definitions
-******************************************************/
-
-whd_bool_t whd_bus_is_up(whd_driver_t whd_driver)
-{
-    return whd_driver->bus_common_info->bus_is_up;
-}
-
-void whd_bus_set_state(whd_driver_t whd_driver, whd_bool_t state)
-{
-    whd_driver->bus_common_info->bus_is_up = state;
-}
-
-whd_result_t whd_bus_set_flow_control(whd_driver_t whd_driver, uint8_t value)
-{
-    if (value != 0)
-    {
-        whd_driver->bus_common_info->bus_flow_control = WHD_TRUE;
-    }
-    else
-    {
-        whd_driver->bus_common_info->bus_flow_control = WHD_FALSE;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_bool_t whd_bus_is_flow_controlled(whd_driver_t whd_driver)
-{
-    return whd_driver->bus_common_info->bus_flow_control;
-}
-
-static whd_result_t whd_bus_common_download_resource(whd_driver_t whd_driver, whd_resource_type_t resource,
-                                                     whd_bool_t direct_resource, uint32_t address)
-{
-    whd_result_t result = WHD_SUCCESS;
-    uint8_t *image;
-    uint32_t image_size;
-    uint32_t blocks_count = 0;
-    uint32_t i;
-    uint32_t size_out;
-    uint32_t reset_instr = 0;
-
-    result = whd_resource_size(whd_driver, resource, &image_size);
-
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Fatal error: download_resource doesn't exist, %s failed at line %d \n", __func__,
-                           __LINE__) );
-        goto exit;
-    }
-
-    if (image_size <= 0)
-    {
-        WPRINT_WHD_ERROR( ("Fatal error: download_resource cannot load with invalid size, %s failed at line %d \n",
-                           __func__, __LINE__) );
-        result = WHD_BADARG;
-        goto exit;
-    }
-
-    result = whd_get_resource_no_of_blocks(whd_driver, resource, &blocks_count);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Fatal error: download_resource blocks count not known, %s failed at line %d \n", __func__,
-                           __LINE__) );
-        goto exit;
-    }
-
-    for (i = 0; i < blocks_count; i++)
-    {
-        CHECK_RETURN(whd_get_resource_block(whd_driver, resource, i, (const uint8_t **)&image, &size_out) );
-        if ( (resource == WHD_RESOURCE_WLAN_FIRMWARE) && (reset_instr == 0) )
-        {
-            /* Copy the starting address of the firmware into a global variable */
-            reset_instr = *( (uint32_t *)(&image[0]) );
-        }
-        result = whd_bus_transfer_backplane_bytes(whd_driver, BUS_WRITE, address, size_out, &image[0]);
-        if (result != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s: Failed to write firmware image\n", __FUNCTION__) );
-            goto exit;
-        }
-        address += size_out;
-    }
-
-    /* Below part of the code is applicable to arm_CR4 type chips only
-     * The CR4 chips by default firmware is not loaded at 0. So we need
-     * load the first 32 bytes with the offset of the firmware load address
-     * which is been copied before during the firmware download
-     */
-    if ( (address != 0) && (reset_instr != 0) )
-    {
-        /* write address 0 with reset instruction */
-        result = whd_bus_write_backplane_value(whd_driver, 0, sizeof(reset_instr), reset_instr);
-
-        if (result == WHD_SUCCESS)
-        {
-            uint32_t tmp;
-
-            /* verify reset instruction value */
-            result = whd_bus_read_backplane_value(whd_driver, 0, sizeof(tmp), (uint8_t *)&tmp);
-
-            if ( (result == WHD_SUCCESS) && (tmp != reset_instr) )
-            {
-                WPRINT_WHD_ERROR( ("%s: Failed to write 0x%08" PRIx32 " to addr 0\n", __FUNCTION__, reset_instr) );
-                WPRINT_WHD_ERROR( ("%s: contents of addr 0 is 0x%08" PRIx32 "\n", __FUNCTION__, tmp) );
-                return WHD_WLAN_SDIO_ERROR;
-            }
-        }
-    }
-exit: return result;
-}
-
-void whd_bus_common_info_init(whd_driver_t whd_driver)
-{
-    struct whd_bus_common_info *bus_common = (struct whd_bus_common_info *)malloc(sizeof(struct whd_bus_common_info) );
-
-    if (bus_common != NULL)
-    {
-        whd_driver->bus_common_info = bus_common;
-
-        bus_common->delayed_bus_release_deadline = 0;
-        bus_common->delayed_bus_release_scheduled = WHD_FALSE;
-        bus_common->delayed_bus_release_timeout_ms = PLATFORM_WLAN_ALLOW_BUS_TO_SLEEP_DELAY_MS;
-        bus_common->delayed_bus_release_timeout_ms_request = WHD_BUS_WLAN_ALLOW_SLEEP_INVALID_MS;
-        bus_common->backplane_window_current_base_address = 0;
-
-        bus_common->bus_is_up = WHD_FALSE;
-        bus_common->bus_flow_control = WHD_FALSE;
-
-        bus_common->resource_download_abort = WHD_FALSE;
-    }
-    else
-    {
-        WPRINT_WHD_ERROR( ("Memory allocation failed for whd_bus_common_info in %s\n", __FUNCTION__) );
-    }
-}
-
-void whd_bus_common_info_deinit(whd_driver_t whd_driver)
-{
-    if (whd_driver->bus_common_info != NULL)
-    {
-        free(whd_driver->bus_common_info);
-        whd_driver->bus_common_info = NULL;
-    }
-}
-
-void whd_delayed_bus_release_schedule_update(whd_driver_t whd_driver, whd_bool_t is_scheduled)
-{
-    whd_driver->bus_common_info->delayed_bus_release_scheduled = is_scheduled;
-    whd_driver->bus_common_info->delayed_bus_release_deadline = 0;
-}
-
-uint32_t whd_bus_handle_delayed_release(whd_driver_t whd_driver)
-{
-    uint32_t time_until_release = 0;
-    uint32_t current_time = 0;
-    struct whd_bus_common_info *bus_common = whd_driver->bus_common_info;
-
-    if (bus_common->delayed_bus_release_timeout_ms_request != WHD_BUS_WLAN_ALLOW_SLEEP_INVALID_MS)
-    {
-        whd_bool_t schedule =
-            ( (bus_common->delayed_bus_release_scheduled != 0) ||
-              (bus_common->delayed_bus_release_deadline != 0) ) ? WHD_TRUE : WHD_FALSE;
-        uint32_t flags;
-
-        WHD_SAVE_INTERRUPTS(flags);
-        bus_common->delayed_bus_release_timeout_ms = bus_common->delayed_bus_release_timeout_ms_request;
-        bus_common->delayed_bus_release_timeout_ms_request = WHD_BUS_WLAN_ALLOW_SLEEP_INVALID_MS;
-        WHD_RESTORE_INTERRUPTS(flags);
-
-        DELAYED_BUS_RELEASE_SCHEDULE(whd_driver, schedule);
-    }
-
-    if (bus_common->delayed_bus_release_scheduled == WHD_TRUE)
-    {
-        bus_common->delayed_bus_release_scheduled = WHD_FALSE;
-
-        if (bus_common->delayed_bus_release_timeout_ms != 0)
-        {
-            cy_rtos_get_time(&current_time);
-            bus_common->delayed_bus_release_deadline = current_time +
-                                                       bus_common->delayed_bus_release_timeout_ms;
-            time_until_release = bus_common->delayed_bus_release_timeout_ms;
-        }
-    }
-    else if (bus_common->delayed_bus_release_deadline != 0)
-    {
-        whd_time_t now;
-
-        cy_rtos_get_time(&now);
-
-        if (bus_common->delayed_bus_release_deadline - now <= bus_common->delayed_bus_release_timeout_ms)
-        {
-            time_until_release = bus_common->delayed_bus_release_deadline - now;
-        }
-
-        if (time_until_release == 0)
-        {
-            bus_common->delayed_bus_release_deadline = 0;
-        }
-    }
-
-    if (time_until_release != 0)
-    {
-        if (whd_bus_is_up(whd_driver) == WHD_FALSE)
-        {
-            time_until_release = 0;
-        }
-        else if (whd_bus_platform_mcu_power_save_deep_sleep_enabled(whd_driver) )
-        {
-            time_until_release = 0;
-        }
-    }
-
-    return time_until_release;
-}
-
-whd_bool_t whd_bus_platform_mcu_power_save_deep_sleep_enabled(whd_driver_t whd_driver)
-{
-    return WHD_FALSE;
-}
-
-void whd_bus_init_backplane_window(whd_driver_t whd_driver)
-{
-    whd_driver->bus_common_info->backplane_window_current_base_address = 0;
-}
-
-whd_result_t whd_bus_write_wifi_firmware_image(whd_driver_t whd_driver)
-{
-    whd_result_t result = WHD_SUCCESS;
-    uint32_t ram_start_address;
-
-    /* Pass the ram_start_address to the firmware Download
-     * CR4 chips have offset and CM3 starts from 0 */
-
-    ram_start_address = GET_C_VAR(whd_driver, ATCM_RAM_BASE_ADDRESS);
-    result = whd_bus_common_download_resource(whd_driver, WHD_RESOURCE_WLAN_FIRMWARE, WHD_FALSE, ram_start_address);
-
-    if (result != WHD_SUCCESS)
-        WPRINT_WHD_ERROR( ("Bus common resource download failed, %s failed at %d \n", __func__, __LINE__) );
-
-    return result;
-}
-
-whd_result_t whd_bus_write_wifi_nvram_image(whd_driver_t whd_driver)
-{
-    uint32_t image_size;
-    uint32_t img_base;
-    uint32_t img_end;
-
-    /* Get the size of the variable image */
-    CHECK_RETURN(whd_resource_size(whd_driver, WHD_RESOURCE_WLAN_NVRAM, &image_size) );
-
-    /* Round up the size of the image */
-    image_size = ROUND_UP(image_size, WHD_BUS_ROUND_UP_ALIGNMENT);
-
-    /* Write image */
-    img_end = GET_C_VAR(whd_driver, CHIP_RAM_SIZE) - 4;
-    img_base = (img_end - image_size);
-    img_base += GET_C_VAR(whd_driver, ATCM_RAM_BASE_ADDRESS);
-
-    CHECK_RETURN(whd_bus_common_download_resource(whd_driver, WHD_RESOURCE_WLAN_NVRAM, WHD_FALSE, img_base) );
-
-    /* Write the variable image size at the end */
-    image_size = (~(image_size / 4) << 16) | (image_size / 4);
-
-    img_end += GET_C_VAR(whd_driver, ATCM_RAM_BASE_ADDRESS);
-
-    CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, (uint32_t)img_end, 4, image_size) );
-
-    return WHD_SUCCESS;
-}
-
-void whd_bus_set_resource_download_halt(whd_driver_t whd_driver, whd_bool_t halt)
-{
-    whd_driver->bus_common_info->resource_download_abort = halt;
-}
-
-/*
- * Update the backplane window registers
- */
-whd_result_t whd_bus_set_backplane_window(whd_driver_t whd_driver, uint32_t addr)
-{
-    whd_result_t result = WHD_BUS_WRITE_REGISTER_ERROR;
-    uint32_t base = addr & ( (uint32_t) ~BACKPLANE_ADDRESS_MASK );
-    const uint32_t upper_32bit_mask = 0xFF000000;
-    const uint32_t upper_middle_32bit_mask = 0x00FF0000;
-    const uint32_t lower_middle_32bit_mask = 0x0000FF00;
-    struct whd_bus_common_info *bus_common_info = whd_driver->bus_common_info;
-
-    if (base == bus_common_info->backplane_window_current_base_address)
-    {
-        return WHD_SUCCESS;
-    }
-    if ( (base & upper_32bit_mask) != (bus_common_info->backplane_window_current_base_address & upper_32bit_mask) )
-    {
-        if (WHD_SUCCESS !=
-            (result = whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_BACKPLANE_ADDRESS_HIGH,
-                                                   (uint8_t)1, (base >> 24) ) ) )
-        {
-            WPRINT_WHD_ERROR( ("Failed to write register value to the bus, %s failed at %d \n", __func__, __LINE__) );
-            return result;
-        }
-        /* clear old */
-        bus_common_info->backplane_window_current_base_address &= ~upper_32bit_mask;
-        /* set new */
-        bus_common_info->backplane_window_current_base_address |= (base & upper_32bit_mask);
-    }
-
-    if ( (base & upper_middle_32bit_mask) !=
-         (bus_common_info->backplane_window_current_base_address & upper_middle_32bit_mask) )
-    {
-        if (WHD_SUCCESS !=
-            (result = whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_BACKPLANE_ADDRESS_MID,
-                                                   (uint8_t)1, (base >> 16) ) ) )
-        {
-            WPRINT_WHD_ERROR( ("Failed to write register value to the bus, %s failed at %d \n", __func__, __LINE__) );
-            return result;
-        }
-        /* clear old */
-        bus_common_info->backplane_window_current_base_address &= ~upper_middle_32bit_mask;
-        /* set new */
-        bus_common_info->backplane_window_current_base_address |= (base & upper_middle_32bit_mask);
-    }
-
-    if ( (base & lower_middle_32bit_mask) !=
-         (bus_common_info->backplane_window_current_base_address & lower_middle_32bit_mask) )
-    {
-        if (WHD_SUCCESS !=
-            (result = whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_BACKPLANE_ADDRESS_LOW,
-                                                   (uint8_t)1, (base >> 8) ) ) )
-        {
-            WPRINT_WHD_ERROR( ("Failed to write register value to the bus, %s failed at %d \n", __func__, __LINE__) );
-            return result;
-        }
-
-        /* clear old */
-        bus_common_info->backplane_window_current_base_address &= ~lower_middle_32bit_mask;
-        /* set new */
-        bus_common_info->backplane_window_current_base_address |= (base & lower_middle_32bit_mask);
-    }
-
-    return WHD_SUCCESS;
-}
-
-/* Default implementation of WHD bus resume function, which does nothing */
-whd_result_t whd_bus_resume_after_deep_sleep(whd_driver_t whd_driver)
-{
-    whd_assert("In order to support deep-sleep platform need to implement this function", 0);
-    return WHD_UNSUPPORTED;
-}
-
-whd_result_t whd_bus_transfer_backplane_bytes(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                              uint32_t address, uint32_t size, uint8_t *data)
-{
-    whd_buffer_t pkt_buffer = NULL;
-    uint8_t *packet;
-    uint32_t transfer_size;
-    uint32_t remaining_buf_size;
-    uint32_t window_offset_address;
-    whd_result_t result;
-
-    result = whd_host_buffer_get(whd_driver, &pkt_buffer, (direction == BUS_READ) ? WHD_NETWORK_RX : WHD_NETWORK_TX,
-                                 ( uint16_t )(whd_bus_get_max_transfer_size(whd_driver) +
-                                              whd_bus_backplane_read_padd_size(
-                                                  whd_driver) + MAX_BUS_HEADER_SIZE), WHD_TRUE);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Packet buffer allocation failed in %s at %d \n", __func__, __LINE__) );
-        goto done;
-    }
-    packet = (uint8_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, pkt_buffer);
-
-    for (remaining_buf_size = size; remaining_buf_size != 0;
-         remaining_buf_size -= transfer_size, address += transfer_size)
-    {
-        transfer_size = (remaining_buf_size >
-                         whd_bus_get_max_transfer_size(whd_driver) ) ? whd_bus_get_max_transfer_size(whd_driver) :
-                        remaining_buf_size;
-
-        /* Check if the transfer crosses the backplane window boundary */
-        window_offset_address = address & BACKPLANE_ADDRESS_MASK;
-        if ( (window_offset_address + transfer_size) > BACKPLANE_ADDRESS_MASK )
-        {
-            /* Adjust the transfer size to within current window */
-            transfer_size = BACKPLANE_WINDOW_SIZE - window_offset_address;
-        }
-        result = whd_bus_set_backplane_window(whd_driver, address);
-        if (result != WHD_SUCCESS)
-        {
-            goto done;
-        }
-
-        if (direction == BUS_WRITE)
-        {
-            DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-            memcpy( ( (whd_transfer_bytes_packet_t *)packet )->data, data + size - remaining_buf_size, transfer_size );
-            ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-            result = whd_bus_transfer_bytes(whd_driver, direction, BACKPLANE_FUNCTION,
-                                            (address & BACKPLANE_ADDRESS_MASK), (uint16_t)transfer_size,
-                                            (whd_transfer_bytes_packet_t *)packet);
-            if (result != WHD_SUCCESS)
-            {
-                goto done;
-            }
-        }
-        else
-        {
-            result = whd_bus_transfer_bytes(whd_driver, direction, BACKPLANE_FUNCTION,
-                                            (address & BACKPLANE_ADDRESS_MASK),
-                                            ( uint16_t )(transfer_size + whd_bus_backplane_read_padd_size(whd_driver) ),
-                                            (whd_transfer_bytes_packet_t *)packet);
-            if (result != WHD_SUCCESS)
-            {
-                WPRINT_WHD_ERROR( ("whd_bus_transfer_bytes failed\n") );
-                goto done;
-            }
-            DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-            memcpy(data + size - remaining_buf_size, (uint8_t *)( (whd_transfer_bytes_packet_t *)packet )->data +
-                   whd_bus_backplane_read_padd_size(whd_driver), transfer_size);
-            ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-        }
-    }
-
-done: CHECK_RETURN(whd_bus_set_backplane_window(whd_driver, CHIPCOMMON_BASE_ADDRESS) );
-    if (pkt_buffer != NULL)
-    {
-        CHECK_RETURN(whd_buffer_release(whd_driver, pkt_buffer,
-                                        (direction == BUS_READ) ? WHD_NETWORK_RX : WHD_NETWORK_TX) );
-    }
-    CHECK_RETURN(result);
-
-    return WHD_SUCCESS;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_common.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_common.h
deleted file mode 100644
index 90b071c65e..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_common.h
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-#include "whd.h"
-#include <stdint.h>
-
-#ifndef INCLUDED_WHD_BUS_COMMON_H
-#define INCLUDED_WHD_BUS_COMMON_H
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-struct whd_bus_common_info;
-
-void whd_bus_common_info_init(whd_driver_t whd_driver);
-void whd_bus_common_info_deinit(whd_driver_t whd_driver);
-
-/* Configure delayed sleep of bus.
- * A high number will mean a longer delay before sleep after the last operation (higher performance)
- * A shorter delay will mean quicker sleep after last operation (lower power use)
- */
-extern void         whd_bus_sdio_wlan_set_delayed_bus_powersave_milliseconds(whd_driver_t whd_driver, uint32_t time_ms);
-extern whd_result_t whd_bus_resume_after_deep_sleep(whd_driver_t whd_driver);
-
-extern whd_result_t whd_bus_write_wifi_firmware_image(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_write_wifi_nvram_image(whd_driver_t whd_driver);
-extern void         whd_bus_set_resource_download_halt(whd_driver_t whd_driver, whd_bool_t halt);
-
-extern whd_result_t whd_bus_transfer_backplane_bytes(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                                     uint32_t address, uint32_t size, uint8_t *data);
-extern void whd_bus_init_backplane_window(whd_driver_t whd_driver);
-whd_result_t whd_bus_set_backplane_window(whd_driver_t whd_driver, uint32_t addr);
-
-whd_bool_t whd_bus_is_up(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_set_flow_control(whd_driver_t whd_driver, uint8_t value);
-extern whd_bool_t whd_bus_is_flow_controlled(whd_driver_t whd_driver);
-
-void whd_bus_set_state(whd_driver_t whd_driver, whd_bool_t state);
-
-extern void whd_delayed_bus_release_schedule_update(whd_driver_t whd_driver, whd_bool_t is_scheduled);
-
-/* handle delayed sleep of bus */
-extern uint32_t     whd_bus_handle_delayed_release(whd_driver_t whd_driver);
-whd_bool_t whd_bus_platform_mcu_power_save_deep_sleep_enabled(whd_driver_t whd_driver);
-
-#ifdef __cplusplus
-} /*extern "C" */
-#endif
-
-#endif
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_protocol_interface.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_protocol_interface.h
deleted file mode 100644
index 0ab6677d41..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_protocol_interface.h
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "cyabs_rtos.h"
-
-#include "whd.h"
-#include "whd_network_types.h"
-#include "whd_types_int.h"
-
-#ifndef INCLUDED_WHD_BUS_PROTOCOL_INTERFACE_H_
-#define INCLUDED_WHD_BUS_PROTOCOL_INTERFACE_H_
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-*             Constants
-******************************************************/
-
-typedef enum
-{
-    BUS_FUNCTION       = 0,
-    BACKPLANE_FUNCTION = 1,
-    WLAN_FUNCTION      = 2
-} whd_bus_function_t;
-
-#define BUS_FUNCTION_MASK (0x3) /* Update this if adding functions */
-
-/******************************************************
-*             Macros
-******************************************************/
-#define PLATFORM_WLAN_ALLOW_BUS_TO_SLEEP_DELAY_MS 10
-
-#define DELAYED_BUS_RELEASE_SCHEDULE(whd_driver, schedule) do {  whd_delayed_bus_release_schedule_update(whd_driver, \
-                                                                                                         schedule); \
-} while (0)
-
-/******************************************************
-*             Structures
-******************************************************/
-
-#pragma pack(1)
-
-typedef struct
-{
-    uint8_t bus_header[MAX_BUS_HEADER_SIZE];
-    uint32_t data[1];
-} whd_transfer_bytes_packet_t;
-
-#pragma pack()
-
-typedef void (*whd_bus_irq_callback_t)(void *handler_arg, uint32_t event);
-
-/******************************************************
-*             Function declarations
-******************************************************/
-
-/* Initialisation functions */
-extern whd_result_t whd_bus_init(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_deinit(whd_driver_t whd_driver);
-
-/* Device register access functions */
-extern whd_result_t whd_bus_write_backplane_value(whd_driver_t whd_driver, uint32_t address, uint8_t register_length,
-                                                  uint32_t value);
-extern whd_result_t whd_bus_read_backplane_value(whd_driver_t whd_driver, uint32_t address, uint8_t register_length,
-                                                 uint8_t *value);
-extern whd_result_t whd_bus_write_register_value(whd_driver_t whd_driver, whd_bus_function_t function, uint32_t address,
-                                                 uint8_t value_length, uint32_t value);
-extern whd_result_t whd_bus_read_register_value(whd_driver_t whd_driver, whd_bus_function_t function, uint32_t address,
-                                                uint8_t value_length, uint8_t *value);
-
-/* Device data transfer functions */
-extern whd_result_t whd_bus_send_buffer(whd_driver_t whd_driver, whd_buffer_t buffer);
-extern whd_result_t whd_bus_transfer_bytes(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                           whd_bus_function_t function, uint32_t address, uint16_t size,
-                                           whd_transfer_bytes_packet_t *data);
-
-/* Frame transfer function */
-extern whd_result_t whd_bus_read_frame(whd_driver_t whd_driver, whd_buffer_t *buffer);
-
-extern uint32_t     whd_bus_packet_available_to_read(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_poke_wlan(whd_driver_t whd_driver);
-extern whd_result_t   whd_bus_wait_for_wlan_event(whd_driver_t whd_driver,  cy_semaphore_t *transceive_semaphore);
-
-extern whd_result_t whd_bus_ack_interrupt(whd_driver_t whd_driver, uint32_t intstatus);
-extern whd_bool_t whd_bus_wake_interrupt_present(whd_driver_t whd_driver);
-
-extern whd_result_t whd_bus_set_flow_control(whd_driver_t whd_driver, uint8_t value);
-extern whd_bool_t whd_bus_is_flow_controlled(whd_driver_t whd_driver);
-
-extern whd_result_t whd_bus_wakeup(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_sleep(whd_driver_t whd_driver);
-
-extern uint8_t whd_bus_backplane_read_padd_size(whd_driver_t whd_driver);
-extern whd_bool_t whd_bus_use_status_report_scheme(whd_driver_t whd_driver);
-extern uint32_t whd_bus_get_max_transfer_size(whd_driver_t whd_driver);
-
-extern void         whd_bus_init_stats(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_print_stats(whd_driver_t whd_driver, whd_bool_t reset_after_print);
-extern whd_result_t whd_bus_reinit_stats(whd_driver_t whd_driver, whd_bool_t wake_from_firmware);
-extern whd_result_t whd_bus_irq_enable(whd_driver_t whd_driver, whd_bool_t enable);
-extern whd_result_t whd_bus_irq_register(whd_driver_t whd_driver);
-/******************************************************
-*             Global variables
-******************************************************/
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_WHD_BUS_PROTOCOL_INTERFACE_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_sdio_protocol.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_sdio_protocol.c
deleted file mode 100644
index 043b623dff..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_sdio_protocol.c
+++ /dev/null
@@ -1,1469 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Broadcom WLAN SDIO Protocol interface
- *
- *  Implements the WHD Bus Protocol Interface for SDIO
- *  Provides functions for initialising, de-intitialising 802.11 device,
- *  sending/receiving raw packets etc
- */
-
-#include <stdlib.h>
-#include "cyabs_rtos.h"
-#include "cyhal_sdio.h"
-#include "cyhal_gpio.h"
-
-#include "whd_bus_sdio_protocol.h"
-#include "whd_bus.h"
-#include "whd_bus_common.h"
-#include "whd_chip_reg.h"
-#include "whd_chip_constants.h"
-#include "whd_int.h"
-#include "whd_chip.h"
-#include "whd_sdpcm.h"
-#include "whd_debug.h"
-#include "whd_sdio.h"
-#include "whd_buffer_api.h"
-#include "whd_resource_if.h"
-#include "whd_types_int.h"
-#include "whd_types.h"
-
-
-/******************************************************
-*             Constants
-******************************************************/
-/* function 1 OCP space */
-#define SBSDIO_SB_OFT_ADDR_MASK     0x07FFF     /* sb offset addr is <= 15 bits, 32k */
-#define SBSDIO_SB_OFT_ADDR_LIMIT    0x08000
-#define SBSDIO_SB_ACCESS_2_4B_FLAG  0x08000     /* with b15, maps to 32-bit SB access */
-
-#define F0_WORKING_TIMEOUT_MS (500)
-#define F1_AVAIL_TIMEOUT_MS   (500)
-#define F2_AVAIL_TIMEOUT_MS   (500)
-#define F2_READY_TIMEOUT_MS   (1000)
-#define ALP_AVAIL_TIMEOUT_MS  (100)
-#define HT_AVAIL_TIMEOUT_MS   (500)
-#define ABORT_TIMEOUT_MS      (100)
-/* Taken from FALCON_5_90_195_26 dhd/sys/dhd_sdio.c. */
-#define SDIO_F2_WATERMARK     (8)
-
-#define INITIAL_READ   4
-
-#define WHD_THREAD_POLL_TIMEOUT      (CY_RTOS_NEVER_TIMEOUT)
-
-#define WHD_THREAD_POKE_TIMEOUT      (100)
-
-#define HOSTINTMASK                 (I_HMB_SW_MASK)
-
-
-/******************************************************
-*             Structures
-******************************************************/
-struct whd_bus_priv
-{
-    whd_sdio_config_t sdio_config;
-    whd_bus_stats_t whd_bus_stats;
-    cyhal_sdio_t *sdio_obj;
-
-};
-
-/******************************************************
-*             Variables
-******************************************************/
-
-/******************************************************
-*             Static Function Declarations
-******************************************************/
-
-static whd_result_t whd_bus_sdio_transfer(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                          whd_bus_function_t function, uint32_t address, uint16_t data_size,
-                                          uint8_t *data, sdio_response_needed_t response_expected);
-static whd_result_t whd_bus_sdio_cmd52(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                       whd_bus_function_t function, uint32_t address, uint8_t value,
-                                       sdio_response_needed_t response_expected, uint8_t *response);
-static whd_result_t whd_bus_sdio_cmd53(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                       whd_bus_function_t function, sdio_transfer_mode_t mode, uint32_t address,
-                                       uint16_t data_size, uint8_t *data,
-                                       sdio_response_needed_t response_expected,
-                                       uint32_t *response);
-static whd_result_t whd_bus_sdio_abort_read(whd_driver_t whd_driver, whd_bool_t retry);
-static whd_result_t whd_bus_sdio_download_firmware(whd_driver_t whd_driver);
-
-static whd_result_t whd_bus_sdio_set_oob_interrupt(whd_driver_t whd_driver, uint8_t gpio_pin_number);
-
-static void whd_bus_sdio_irq_handler(void *handler_arg, cyhal_sdio_irq_event_t event);
-static void whd_bus_sdio_oob_irq_handler(void *arg, cyhal_gpio_irq_event_t event);
-
-static whd_result_t whd_bus_sdio_irq_register(whd_driver_t whd_driver);
-static whd_result_t whd_bus_sdio_irq_enable(whd_driver_t whd_driver, whd_bool_t enable);
-static whd_result_t whd_bus_sdio_init_oob_intr(whd_driver_t whd_driver);
-static whd_result_t whd_bus_sdio_deinit_oob_intr(whd_driver_t whd_driver);
-static whd_result_t whd_bus_sdio_register_oob_intr(whd_driver_t whd_driver);
-static whd_result_t whd_bus_sdio_unregister_oob_intr(whd_driver_t whd_driver);
-static whd_result_t whd_bus_sdio_enable_oob_intr(whd_driver_t whd_driver, whd_bool_t enable);
-
-/******************************************************
-*             Global Function definitions
-******************************************************/
-
-uint32_t whd_bus_sdio_attach(whd_driver_t whd_driver, whd_sdio_config_t *whd_sdio_config, cyhal_sdio_t *sdio_obj)
-{
-    struct whd_bus_info *whd_bus_info;
-
-    if (!whd_driver || !whd_sdio_config)
-    {
-        WPRINT_WHD_ERROR( ("Invalid param in func %s at line %d \n",
-                           __func__, __LINE__) );
-        return WHD_WLAN_BADARG;
-    }
-
-    whd_bus_info = (whd_bus_info_t *)malloc(sizeof(whd_bus_info_t) );
-
-    if (whd_bus_info == NULL)
-    {
-        WPRINT_WHD_ERROR( ("Memory allocation failed for whd_bus_info in %s\n", __FUNCTION__) );
-        return WHD_BUFFER_UNAVAILABLE_PERMANENT;
-    }
-    memset(whd_bus_info, 0, sizeof(whd_bus_info_t) );
-
-    whd_driver->bus_if = whd_bus_info;
-
-    whd_driver->bus_priv = (struct whd_bus_priv *)malloc(sizeof(struct whd_bus_priv) );
-
-    if (whd_driver->bus_priv == NULL)
-    {
-        WPRINT_WHD_ERROR( ("Memory allocation failed for whd_bus_priv in %s\n", __FUNCTION__) );
-        return WHD_BUFFER_UNAVAILABLE_PERMANENT;
-    }
-    memset(whd_driver->bus_priv, 0, sizeof(struct whd_bus_priv) );
-
-    whd_driver->bus_priv->sdio_obj = sdio_obj;
-    whd_driver->bus_priv->sdio_config = *whd_sdio_config;
-
-    whd_bus_info->whd_bus_init_fptr = whd_bus_sdio_init;
-    whd_bus_info->whd_bus_deinit_fptr = whd_bus_sdio_deinit;
-
-    whd_bus_info->whd_bus_write_backplane_value_fptr = whd_bus_sdio_write_backplane_value;
-    whd_bus_info->whd_bus_read_backplane_value_fptr = whd_bus_sdio_read_backplane_value;
-    whd_bus_info->whd_bus_write_register_value_fptr = whd_bus_sdio_write_register_value;
-    whd_bus_info->whd_bus_read_register_value_fptr = whd_bus_sdio_read_register_value;
-
-    whd_bus_info->whd_bus_send_buffer_fptr = whd_bus_sdio_send_buffer;
-    whd_bus_info->whd_bus_transfer_bytes_fptr = whd_bus_sdio_transfer_bytes;
-
-    whd_bus_info->whd_bus_read_frame_fptr = whd_bus_sdio_read_frame;
-
-    whd_bus_info->whd_bus_packet_available_to_read_fptr = whd_bus_sdio_packet_available_to_read;
-    whd_bus_info->whd_bus_poke_wlan_fptr = whd_bus_sdio_poke_wlan;
-    whd_bus_info->whd_bus_wait_for_wlan_event_fptr = whd_bus_sdio_wait_for_wlan_event;
-
-    whd_bus_info->whd_bus_ack_interrupt_fptr = whd_bus_sdio_ack_interrupt;
-    whd_bus_info->whd_bus_wake_interrupt_present_fptr = whd_bus_sdio_wake_interrupt_present;
-
-    whd_bus_info->whd_bus_wakeup_fptr = whd_bus_sdio_wakeup;
-    whd_bus_info->whd_bus_sleep_fptr = whd_bus_sdio_sleep;
-
-    whd_bus_info->whd_bus_backplane_read_padd_size_fptr = whd_bus_sdio_backplane_read_padd_size;
-    whd_bus_info->whd_bus_use_status_report_scheme_fptr = whd_bus_sdio_use_status_report_scheme;
-
-    whd_bus_info->whd_bus_get_max_transfer_size_fptr = whd_bus_sdio_get_max_transfer_size;
-
-    whd_bus_info->whd_bus_init_stats_fptr = whd_bus_sdio_init_stats;
-    whd_bus_info->whd_bus_print_stats_fptr = whd_bus_sdio_print_stats;
-    whd_bus_info->whd_bus_reinit_stats_fptr = whd_bus_sdio_reinit_stats;
-    whd_bus_info->whd_bus_irq_register_fptr = whd_bus_sdio_irq_register;
-    whd_bus_info->whd_bus_irq_enable_fptr = whd_bus_sdio_irq_enable;
-
-    return WHD_SUCCESS;
-}
-
-void whd_bus_sdio_detach(whd_driver_t whd_driver)
-{
-    if (whd_driver->bus_if != NULL)
-    {
-        free(whd_driver->bus_if);
-        whd_driver->bus_if = NULL;
-    }
-    if (whd_driver->bus_priv != NULL)
-    {
-        free(whd_driver->bus_priv);
-        whd_driver->bus_priv = NULL;
-    }
-}
-
-whd_result_t whd_bus_sdio_ack_interrupt(whd_driver_t whd_driver, uint32_t intstatus)
-{
-    return whd_bus_write_backplane_value(whd_driver, (uint32_t)SDIO_INT_STATUS, (uint8_t)4, intstatus);
-}
-
-whd_result_t whd_bus_sdio_wait_for_wlan_event(whd_driver_t whd_driver, cy_semaphore_t *transceive_semaphore)
-{
-    whd_result_t result = WHD_SUCCESS;
-    uint32_t timeout_ms = 1;
-    uint32_t delayed_release_timeout_ms;
-
-    REFERENCE_DEBUG_ONLY_VARIABLE(result);
-
-    delayed_release_timeout_ms = whd_bus_handle_delayed_release(whd_driver);
-    if (delayed_release_timeout_ms != 0)
-    {
-        timeout_ms = delayed_release_timeout_ms;
-    }
-    else
-    {
-        result = whd_allow_wlan_bus_to_sleep(whd_driver);
-        whd_assert("Error setting wlan sleep", (result == WHD_SUCCESS) || (result == WHD_PENDING) );
-
-        if (result == WHD_SUCCESS)
-        {
-            timeout_ms = CY_RTOS_NEVER_TIMEOUT;
-        }
-    }
-
-    /* Check if we have run out of bus credits */
-    if ( (whd_sdpcm_has_tx_packet(whd_driver) == WHD_TRUE) && (whd_sdpcm_get_available_credits(whd_driver) == 0) )
-    {
-        /* Keep poking the WLAN until it gives us more credits */
-        result = whd_bus_poke_wlan(whd_driver);
-        whd_assert("Poking failed!", result == WHD_SUCCESS);
-
-        result = cy_rtos_get_semaphore(transceive_semaphore, (uint32_t)MIN_OF(timeout_ms,
-                                                                              WHD_THREAD_POKE_TIMEOUT), WHD_FALSE);
-    }
-    else
-    {
-        result = cy_rtos_get_semaphore(transceive_semaphore, (uint32_t)MIN_OF(timeout_ms,
-                                                                              WHD_THREAD_POLL_TIMEOUT), WHD_FALSE);
-    }
-    whd_assert("Could not get whd sleep semaphore\n", (result == CY_RSLT_SUCCESS) || (result == CY_RTOS_TIMEOUT) );
-
-    return result;
-}
-
-/* Device data transfer functions */
-whd_result_t whd_bus_sdio_send_buffer(whd_driver_t whd_driver, whd_buffer_t buffer)
-{
-    whd_result_t retval;
-    retval =
-        whd_bus_transfer_bytes(whd_driver, BUS_WRITE, WLAN_FUNCTION, 0,
-                               (uint16_t)(whd_buffer_get_current_piece_size(whd_driver,
-                                                                            buffer) - sizeof(whd_buffer_t) ),
-                               (whd_transfer_bytes_packet_t *)(whd_buffer_get_current_piece_data_pointer(whd_driver,
-                                                                                                         buffer) +
-                                                               sizeof(whd_buffer_t) ) );
-    CHECK_RETURN(whd_buffer_release(whd_driver, buffer, WHD_NETWORK_TX) );
-    if (retval == WHD_SUCCESS)
-    {
-        DELAYED_BUS_RELEASE_SCHEDULE(whd_driver, WHD_TRUE);
-    }
-    CHECK_RETURN (retval);
-
-    return WHD_SUCCESS;
-}
-
-whd_result_t whd_bus_sdio_init(whd_driver_t whd_driver)
-{
-    uint8_t byte_data;
-    whd_result_t result;
-    uint32_t loop_count;
-    whd_time_t elapsed_time, current_time;
-    uint32_t wifi_firmware_image_size = 0;
-    uint16_t chip_id;
-
-    whd_bus_set_flow_control(whd_driver, WHD_FALSE);
-
-    whd_bus_init_backplane_window(whd_driver);
-
-    /* Setup the backplane*/
-    loop_count = 0;
-    do
-    {
-        /* Enable function 1 (backplane) */
-        CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_IOEN, (uint8_t)1,
-                                                  SDIO_FUNC_ENABLE_1) );
-        if (loop_count != 0)
-        {
-            (void)cy_rtos_delay_milliseconds( (uint32_t)1 );    /* Ignore return - nothing can be done if it fails */
-        }
-        CHECK_RETURN(whd_bus_read_register_value (whd_driver, BUS_FUNCTION, SDIOD_CCCR_IOEN, (uint8_t)1, &byte_data) );
-        loop_count++;
-        if (loop_count >= (uint32_t)F0_WORKING_TIMEOUT_MS)
-        {
-            WPRINT_WHD_ERROR( ("Timeout while setting up the backplane, %s failed at %d \n", __func__, __LINE__) );
-            return WHD_TIMEOUT;
-        }
-    } while (byte_data != (uint8_t)SDIO_FUNC_ENABLE_1);
-
-    if (whd_driver->bus_priv->sdio_config.sdio_1bit_mode == WHD_FALSE)
-    {
-        /* Read the bus width and set to 4 bits */
-        CHECK_RETURN(whd_bus_read_register_value (whd_driver, BUS_FUNCTION, SDIOD_CCCR_BICTRL, (uint8_t)1,
-                                                  &byte_data) );
-        CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_BICTRL, (uint8_t)1,
-                                                  (byte_data & (~BUS_SD_DATA_WIDTH_MASK) ) |
-                                                  BUS_SD_DATA_WIDTH_4BIT) );
-        /* NOTE: We don't need to change our local bus settings since we're not sending any data (only using CMD52)
-         * until after we change the bus speed further down */
-    }
-
-    /* Set the block size */
-
-    /* Wait till the backplane is ready */
-    loop_count = 0;
-    while ( ( (result = whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_BLKSIZE_0, (uint8_t)1,
-                                                     (uint32_t)SDIO_64B_BLOCK) ) == WHD_SUCCESS ) &&
-            ( (result = whd_bus_read_register_value (whd_driver, BUS_FUNCTION, SDIOD_CCCR_BLKSIZE_0, (uint8_t)1,
-                                                     &byte_data) ) == WHD_SUCCESS ) &&
-            (byte_data != (uint8_t)SDIO_64B_BLOCK) &&
-            (loop_count < (uint32_t)F0_WORKING_TIMEOUT_MS) )
-    {
-        (void)cy_rtos_delay_milliseconds( (uint32_t)1 );    /* Ignore return - nothing can be done if it fails */
-        loop_count++;
-        if (loop_count >= (uint32_t)F0_WORKING_TIMEOUT_MS)
-        {
-            /* If the system fails here, check the high frequency crystal is working */
-            WPRINT_WHD_ERROR( ("Timeout while setting block size, %s failed at %d \n", __func__, __LINE__) );
-            return WHD_TIMEOUT;
-        }
-    }
-
-    CHECK_RETURN(result);
-
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_BLKSIZE_0,   (uint8_t)1,
-                                              (uint32_t)SDIO_64B_BLOCK) );
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_F1BLKSIZE_0, (uint8_t)1,
-                                              (uint32_t)SDIO_64B_BLOCK) );
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_F2BLKSIZE_0, (uint8_t)1,
-                                              (uint32_t)SDIO_64B_BLOCK) );
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_F2BLKSIZE_1, (uint8_t)1,
-                                              (uint32_t)0) );                                                                                  /* Function 2 = 64 */
-
-    /* Register interrupt handler*/
-    whd_bus_sdio_irq_register(whd_driver);
-    /* Enable SDIO IRQ */
-    whd_bus_sdio_irq_enable(whd_driver, WHD_TRUE);
-
-    /* Enable/Disable Client interrupts */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_INTEN, (uint8_t)1,
-                                              INTR_CTL_MASTER_EN | INTR_CTL_FUNC1_EN | INTR_CTL_FUNC2_EN) );
-
-    if (whd_driver->bus_priv->sdio_config.high_speed_sdio_clock)
-    {
-        /* This code is required if we want more than 25 MHz clock */
-        CHECK_RETURN(whd_bus_read_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_SPEED_CONTROL, 1, &byte_data) );
-        if ( (byte_data & 0x1) != 0 )
-        {
-            CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_SPEED_CONTROL, 1,
-                                                      byte_data | SDIO_SPEED_EHS) );
-        }
-        else
-        {
-            WPRINT_WHD_ERROR( ("Error reading bus register, %s failed at %d \n", __func__, __LINE__) );
-            return WHD_BUS_READ_REGISTER_ERROR;
-        }
-    }/* HIGH_SPEED_SDIO_CLOCK */
-
-
-
-    /* Wait till the backplane is ready */
-    loop_count = 0;
-    while ( ( (result = whd_bus_read_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_IORDY, (uint8_t)1,
-                                                    &byte_data) ) == WHD_SUCCESS ) &&
-            ( (byte_data & SDIO_FUNC_READY_1) == 0 ) &&
-            (loop_count < (uint32_t)F1_AVAIL_TIMEOUT_MS) )
-    {
-        (void)cy_rtos_delay_milliseconds( (uint32_t)1 );   /* Ignore return - nothing can be done if it fails */
-        loop_count++;
-    }
-    if (loop_count >= (uint32_t)F1_AVAIL_TIMEOUT_MS)
-    {
-        WPRINT_WHD_ERROR( ("Timeout while waiting for backplane to be ready\n") );
-        return WHD_TIMEOUT;
-    }
-    CHECK_RETURN(result);
-
-    /* Set the ALP */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_CHIP_CLOCK_CSR, (uint8_t)1,
-                                              (uint32_t)(SBSDIO_FORCE_HW_CLKREQ_OFF | SBSDIO_ALP_AVAIL_REQ |
-                                                         SBSDIO_FORCE_ALP) ) );
-
-    loop_count = 0;
-    while ( ( (result = whd_bus_read_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_CHIP_CLOCK_CSR, (uint8_t)1,
-                                                    &byte_data) ) == WHD_SUCCESS ) &&
-            ( (byte_data & SBSDIO_ALP_AVAIL) == 0 ) &&
-            (loop_count < (uint32_t)ALP_AVAIL_TIMEOUT_MS) )
-    {
-        (void)cy_rtos_delay_milliseconds( (uint32_t)1 );   /* Ignore return - nothing can be done if it fails */
-        loop_count++;
-    }
-    if (loop_count >= (uint32_t)ALP_AVAIL_TIMEOUT_MS)
-    {
-        WPRINT_WHD_ERROR( ("Timeout while waiting for alp clock\n") );
-        return WHD_TIMEOUT;
-    }
-    CHECK_RETURN(result);
-
-    /* Clear request for ALP */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_CHIP_CLOCK_CSR, (uint8_t)1, 0) );
-
-    /* Disable the extra SDIO pull-ups */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_PULL_UP, (uint8_t)1, 0) );
-    /* Enable F1 and F2 */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_IOEN, (uint8_t)1,
-                                              SDIO_FUNC_ENABLE_1 | SDIO_FUNC_ENABLE_2) );
-
-    /* Setup host-wake signals */
-    CHECK_RETURN(whd_bus_sdio_init_oob_intr(whd_driver) );
-
-    /* Enable F2 interrupt only */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_INTEN, (uint8_t)1,
-                                              INTR_CTL_MASTER_EN | INTR_CTL_FUNC2_EN) );
-
-    CHECK_RETURN(whd_bus_read_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_IORDY, (uint8_t)1, &byte_data) );
-
-    /* Read the chip id */
-    CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, CHIPCOMMON_BASE_ADDRESS, 2, (uint8_t *)&chip_id) );
-    whd_chip_set_chip_id(whd_driver, chip_id);
-
-    cy_rtos_get_time(&elapsed_time);
-    result = whd_bus_sdio_download_firmware(whd_driver);
-    cy_rtos_get_time(&current_time);
-    elapsed_time = current_time - elapsed_time;
-    CHECK_RETURN(whd_resource_size(whd_driver, WHD_RESOURCE_WLAN_FIRMWARE, &wifi_firmware_image_size) );
-    WPRINT_WHD_INFO( ("WLAN FW download size: %" PRIu32 " bytes\n", wifi_firmware_image_size) );
-    WPRINT_WHD_INFO( ("WLAN FW download time: %" PRIu32 " ms\n", elapsed_time) );
-
-    if (result != WHD_SUCCESS)
-    {
-        /*  either an error or user abort */
-        WPRINT_WHD_ERROR( ("SDIO firmware download error, %s failed at %d \n", __func__, __LINE__) );
-        return result;
-    }
-
-    /* Wait for F2 to be ready */
-    loop_count = 0;
-    while ( ( (result = whd_bus_read_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_IORDY, (uint8_t)1,
-                                                    &byte_data) ) == WHD_SUCCESS ) &&
-            ( (byte_data & SDIO_FUNC_READY_2) == 0 ) &&
-            (loop_count < (uint32_t)F2_READY_TIMEOUT_MS) )
-    {
-        (void)cy_rtos_delay_milliseconds( (uint32_t)1 );   /* Ignore return - nothing can be done if it fails */
-        loop_count++;
-    }
-    if (loop_count >= (uint32_t)F2_READY_TIMEOUT_MS)
-    {
-        /* If your system fails here, it could be due to incorrect NVRAM variables.
-         * Check which 'wifi_nvram_image.h' file your platform is using, and
-         * check that it matches the WLAN device on your platform, including the
-         * crystal frequency.
-         */
-        WPRINT_WHD_ERROR( ("Timeout while waiting for function 2 to be ready\n") );
-        /* Reachable after hitting assert */
-        return WHD_TIMEOUT;
-    }
-
-    CHECK_RETURN(whd_chip_specific_init(whd_driver) );
-    CHECK_RETURN(whd_ensure_wlan_bus_is_up(whd_driver) );
-    cyhal_sdio_irq_enable(whd_driver->bus_priv->sdio_obj, CYHAL_SDIO_CARD_INTERRUPT, WHD_TRUE);
-    UNUSED_PARAMETER(elapsed_time);
-    return result;
-}
-
-whd_result_t whd_bus_sdio_deinit(whd_driver_t whd_driver)
-{
-    CHECK_RETURN(whd_bus_sdio_deinit_oob_intr(whd_driver) );
-
-    cyhal_sdio_irq_enable(whd_driver->bus_priv->sdio_obj, CYHAL_SDIO_CARD_INTERRUPT, WHD_FALSE);
-
-    CHECK_RETURN(whd_allow_wlan_bus_to_sleep(whd_driver) );
-
-    whd_bus_set_resource_download_halt(whd_driver, WHD_FALSE);
-
-    DELAYED_BUS_RELEASE_SCHEDULE(whd_driver, WHD_FALSE);
-
-    return WHD_SUCCESS;
-}
-
-whd_bool_t whd_bus_sdio_wake_interrupt_present(whd_driver_t whd_driver)
-{
-    uint32_t int_status = 0;
-
-    /* Ensure the wlan backplane bus is up */
-    if (WHD_SUCCESS != whd_ensure_wlan_bus_is_up(whd_driver) )
-        return WHD_FALSE;
-
-    if (whd_bus_read_backplane_value(whd_driver, (uint32_t)SDIO_INT_STATUS, (uint8_t)4,
-                                     (uint8_t *)&int_status) != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s: Error reading interrupt status\n", __FUNCTION__) );
-        goto exit;
-    }
-    if ( (I_HMB_HOST_INT & int_status) != 0 )
-    {
-        /* Clear any interrupts */
-        if (whd_bus_write_backplane_value(whd_driver, (uint32_t)SDIO_INT_STATUS, (uint8_t)4,
-                                          I_HMB_HOST_INT) != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s: Error clearing interrupts\n", __FUNCTION__) );
-            goto exit;
-        }
-        if (whd_bus_read_backplane_value(whd_driver, (uint32_t)SDIO_INT_STATUS, (uint8_t)4,
-                                         (uint8_t *)&int_status) != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s: Error reading interrupt status\n", __FUNCTION__) );
-            goto exit;
-        }
-        WPRINT_WHD_DEBUG( ("whd_bus_sdio_wake_interrupt_present after clearing int_status  = [%x]\n",
-                           (uint8_t)int_status) );
-        return WHD_TRUE;
-    }
-exit:
-    return WHD_FALSE;
-}
-
-uint32_t whd_bus_sdio_packet_available_to_read(whd_driver_t whd_driver)
-{
-    uint32_t int_status = 0;
-
-    /* Ensure the wlan backplane bus is up */
-    CHECK_RETURN(whd_ensure_wlan_bus_is_up(whd_driver) );
-
-    /* Read the IntStatus */
-    if (whd_bus_read_backplane_value(whd_driver, (uint32_t)SDIO_INT_STATUS, (uint8_t)4,
-                                     (uint8_t *)&int_status) != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s: Error reading interrupt status\n", __FUNCTION__) );
-        int_status = 0;
-        goto exit;
-    }
-
-    if ( (HOSTINTMASK & int_status) != 0 )
-    {
-        /* Clear any interrupts */
-        if (whd_bus_write_backplane_value(whd_driver, (uint32_t)SDIO_INT_STATUS, (uint8_t)4,
-                                          int_status & HOSTINTMASK) != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s: Error clearing interrupts\n", __FUNCTION__) );
-            int_status = 0;
-            goto exit;
-        }
-    }
-exit:
-    return ( (int_status) & (FRAME_AVAILABLE_MASK) );
-}
-
-/*
- * From internal documentation: hwnbu-twiki/SdioMessageEncapsulation
- * When data is available on the device, the device will issue an interrupt:
- * - the device should signal the interrupt as a hint that one or more data frames may be available on the device for reading
- * - the host may issue reads of the 4 byte length tag at any time -- that is, whether an interupt has been issued or not
- * - if a frame is available, the tag read should return a nonzero length (>= 4) and the host can then read the remainder of the frame by issuing one or more CMD53 reads
- * - if a frame is not available, the 4byte tag read should return zero
- */
-whd_result_t whd_bus_sdio_read_frame(whd_driver_t whd_driver, whd_buffer_t *buffer)
-{
-    uint16_t hwtag[8];
-    uint16_t extra_space_required;
-    whd_result_t result;
-
-    *buffer = NULL;
-
-    /* Ensure the wlan backplane bus is up */
-    CHECK_RETURN(whd_ensure_wlan_bus_is_up(whd_driver) );
-
-    /* Read the frame header and verify validity */
-    memset(hwtag, 0, sizeof(hwtag) );
-
-    result = whd_bus_sdio_transfer(whd_driver, BUS_READ, WLAN_FUNCTION, 0, (uint16_t)INITIAL_READ, (uint8_t *)hwtag,
-                                   RESPONSE_NEEDED);
-    if (result != WHD_SUCCESS)
-    {
-        (void)whd_bus_sdio_abort_read(whd_driver, WHD_FALSE);    /* ignore return - not much can be done if this fails */
-        WPRINT_WHD_ERROR( ("Error during SDIO receive, %s failed at %d \n", __func__, __LINE__) );
-        return WHD_SDIO_RX_FAIL;
-    }
-
-    if ( ( (hwtag[0] | hwtag[1]) == 0 ) ||
-         ( (hwtag[0] ^ hwtag[1]) != (uint16_t)0xFFFF ) )
-    {
-        return WHD_HWTAG_MISMATCH;
-    }
-
-    if ( (hwtag[0] == (uint16_t)12) &&
-         (whd_driver->internal_info.whd_wlan_status.state == WLAN_UP) )
-    {
-        result = whd_bus_sdio_transfer(whd_driver, BUS_READ, WLAN_FUNCTION, 0, (uint16_t)8, (uint8_t *)&hwtag[2],
-                                       RESPONSE_NEEDED);
-        if (result != WHD_SUCCESS)
-        {
-            /* ignore return - not much can be done if this fails */
-            (void)whd_bus_sdio_abort_read(whd_driver, WHD_FALSE);
-            WPRINT_WHD_ERROR( ("Error during SDIO receive, %s failed at %d \n", __func__, __LINE__) );
-            return WHD_SDIO_RX_FAIL;
-        }
-        whd_sdpcm_update_credit(whd_driver, (uint8_t *)hwtag);
-        return WHD_SUCCESS;
-    }
-
-    /* Calculate the space we need to store entire packet */
-    if ( (hwtag[0] > (uint16_t)INITIAL_READ) )
-    {
-        extra_space_required = (uint16_t)(hwtag[0] - (uint16_t)INITIAL_READ);
-    }
-    else
-    {
-        extra_space_required = 0;
-    }
-
-    /* Allocate a suitable buffer */
-    result = whd_host_buffer_get(whd_driver, buffer, WHD_NETWORK_RX, (unsigned short)( (uint16_t)INITIAL_READ +
-                                                                                       extra_space_required +
-                                                                                       (uint16_t)sizeof(
-                                                                                           whd_buffer_header_t) ),
-                                 WHD_FALSE);
-    if (result != WHD_SUCCESS)
-    {
-        /* Read out the first 12 bytes to get the bus credit information, 4 bytes are already read in hwtag */
-        whd_assert("Get buffer error",
-                   ( (result == WHD_BUFFER_UNAVAILABLE_TEMPORARY) || (result == WHD_BUFFER_UNAVAILABLE_PERMANENT) ) );
-        result = whd_bus_sdio_transfer(whd_driver, BUS_READ, WLAN_FUNCTION, 0, (uint16_t)8, (uint8_t *)&hwtag[2],
-                                       RESPONSE_NEEDED);
-        if (result != WHD_SUCCESS)
-        {
-            /* ignore return - not much can be done if this fails */
-            (void)whd_bus_sdio_abort_read(whd_driver, WHD_FALSE);
-            WPRINT_WHD_ERROR( ("Error during SDIO receive, %s failed at %d \n", __func__, __LINE__) );
-            return WHD_SDIO_RX_FAIL;
-        }
-        result = whd_bus_sdio_abort_read(whd_driver, WHD_FALSE);
-        whd_assert("Read-abort failed", result == WHD_SUCCESS);
-        REFERENCE_DEBUG_ONLY_VARIABLE(result);
-
-        whd_sdpcm_update_credit(whd_driver, (uint8_t *)hwtag);
-        WPRINT_WHD_ERROR( ("Failed to allocate a buffer to receive into, %s failed at %d \n", __func__, __LINE__) );
-        return WHD_RX_BUFFER_ALLOC_FAIL;
-    }
-
-    /* Copy the data already read */
-    memcpy(whd_buffer_get_current_piece_data_pointer(whd_driver, *buffer) + sizeof(whd_buffer_header_t), hwtag,
-           (size_t)INITIAL_READ);
-
-    /* Read the rest of the data */
-    if (extra_space_required > 0)
-    {
-        result = whd_bus_sdio_transfer(whd_driver, BUS_READ, WLAN_FUNCTION, 0, extra_space_required,
-                                       whd_buffer_get_current_piece_data_pointer(whd_driver,
-                                                                                 *buffer) + sizeof(whd_buffer_header_t) +
-                                       INITIAL_READ, RESPONSE_NEEDED);
-        if (result != WHD_SUCCESS)
-        {
-            (void)whd_bus_sdio_abort_read(whd_driver, WHD_FALSE);    /* ignore return - not much can be done if this fails */
-            CHECK_RETURN(whd_buffer_release(whd_driver, *buffer, WHD_NETWORK_RX) );
-            WPRINT_WHD_ERROR( ("Error during SDIO receive, %s failed at %d \n", __func__, __LINE__) );
-            return WHD_SDIO_RX_FAIL;
-        }
-    }
-    DELAYED_BUS_RELEASE_SCHEDULE(whd_driver, WHD_TRUE);
-    return WHD_SUCCESS;
-}
-
-/******************************************************
-*     Function definitions for Protocol Common
-******************************************************/
-
-/* Device register access functions */
-whd_result_t whd_bus_sdio_write_backplane_value(whd_driver_t whd_driver, uint32_t address, uint8_t register_length,
-                                                uint32_t value)
-{
-    CHECK_RETURN(whd_bus_set_backplane_window(whd_driver, address) );
-
-    address &= SBSDIO_SB_OFT_ADDR_MASK;
-
-    if (register_length == 4)
-        address |= SBSDIO_SB_ACCESS_2_4B_FLAG;
-
-    CHECK_RETURN(whd_bus_sdio_transfer(whd_driver, BUS_WRITE, BACKPLANE_FUNCTION, address, register_length,
-                                       (uint8_t *)&value, RESPONSE_NEEDED) );
-
-    return whd_bus_set_backplane_window(whd_driver, CHIPCOMMON_BASE_ADDRESS);
-}
-
-whd_result_t whd_bus_sdio_read_backplane_value(whd_driver_t whd_driver, uint32_t address, uint8_t register_length,
-                                               uint8_t *value)
-{
-    *value = 0;
-    CHECK_RETURN(whd_bus_set_backplane_window(whd_driver, address) );
-
-    address &= SBSDIO_SB_OFT_ADDR_MASK;
-
-    if (register_length == 4)
-        address |= SBSDIO_SB_ACCESS_2_4B_FLAG;
-
-    CHECK_RETURN(whd_bus_sdio_transfer(whd_driver, BUS_READ, BACKPLANE_FUNCTION, address, register_length, value,
-                                       RESPONSE_NEEDED) );
-
-    return whd_bus_set_backplane_window(whd_driver, CHIPCOMMON_BASE_ADDRESS);
-}
-
-whd_result_t whd_bus_sdio_write_register_value(whd_driver_t whd_driver, whd_bus_function_t function, uint32_t address,
-                                               uint8_t value_length, uint32_t value)
-{
-    return whd_bus_sdio_transfer(whd_driver, BUS_WRITE, function, address, value_length, (uint8_t *)&value,
-                                 RESPONSE_NEEDED);
-}
-
-whd_result_t whd_bus_sdio_transfer_bytes(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                         whd_bus_function_t function, uint32_t address, uint16_t size,
-                                         whd_transfer_bytes_packet_t *data)
-{
-    DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-    return whd_bus_sdio_transfer(whd_driver, direction, function, address, size, (uint8_t *)data->data,
-                                 RESPONSE_NEEDED);
-    ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-}
-
-/******************************************************
-*             Static  Function definitions
-******************************************************/
-
-static whd_result_t whd_bus_sdio_transfer(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                          whd_bus_function_t function, uint32_t address, uint16_t data_size,
-                                          uint8_t *data, sdio_response_needed_t response_expected)
-{
-    /* Note: this function had broken retry logic (never retried), which has been removed.
-     * Failing fast helps problems on the bus get brought to light more quickly
-     * and preserves the original behavior.
-     */
-    whd_result_t result = WHD_SUCCESS;
-    uint16_t data_byte_size;
-    uint16_t data_blk_size;
-
-    if (data_size == 0)
-    {
-        return WHD_BADARG;
-    }
-    else if (data_size == (uint16_t)1)
-    {
-        return whd_bus_sdio_cmd52(whd_driver, direction, function, address, *data, response_expected, data);
-    }
-    else if (whd_driver->internal_info.whd_wlan_status.state == WLAN_UP)
-    {
-        return whd_bus_sdio_cmd53(whd_driver, direction, function,
-                                  (data_size >= (uint16_t)64) ? SDIO_BLOCK_MODE : SDIO_BYTE_MODE, address, data_size,
-                                  data, response_expected, NULL);
-    }
-    else
-    {
-        /* We need to handle remaining size for source image download */
-        data_byte_size = data_size % SDIO_64B_BLOCK;
-        data_blk_size = data_size - data_byte_size;
-        if (data_blk_size != 0)
-        {
-            result = whd_bus_sdio_cmd53(whd_driver, direction, function, SDIO_BLOCK_MODE, address,
-                                        data_blk_size, data, response_expected, NULL);
-            if (result != WHD_SUCCESS)
-            {
-                return result;
-            }
-            data += data_blk_size;
-            address += data_blk_size;
-        }
-        if (data_byte_size)
-        {
-            result = whd_bus_sdio_cmd53(whd_driver, direction, function, SDIO_BYTE_MODE, address,
-                                        data_byte_size, data, response_expected, NULL);
-        }
-        return result;
-    }
-}
-
-static whd_result_t whd_bus_sdio_cmd52(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                       whd_bus_function_t function, uint32_t address, uint8_t value,
-                                       sdio_response_needed_t response_expected, uint8_t *response)
-{
-    uint32_t sdio_response;
-    whd_result_t result;
-    sdio_cmd_argument_t arg;
-    arg.value = 0;
-    arg.cmd52.function_number = (unsigned int)(function & BUS_FUNCTION_MASK);
-    arg.cmd52.register_address = (unsigned int)(address & 0x00001ffff);
-    arg.cmd52.rw_flag = (unsigned int)( (direction == BUS_WRITE) ? 1 : 0 );
-    arg.cmd52.write_data = value;
-
-    WHD_BUS_STATS_INCREMENT_VARIABLE(whd_driver->bus_priv, cmd52);
-    result = cyhal_sdio_send_cmd(whd_driver->bus_priv->sdio_obj, (cyhal_transfer_t)direction,
-                                 CYHAL_SDIO_CMD_IO_RW_DIRECT, arg.value,
-                                 &sdio_response);
-    WHD_BUS_STATS_CONDITIONAL_INCREMENT_VARIABLE(whd_driver->bus_priv, (result != WHD_SUCCESS), cmd52_fail);
-
-    if (response != NULL)
-    {
-        *response = (uint8_t)(sdio_response & 0x00000000ff);
-    }
-
-    if (result == CY_RSLT_SUCCESS)
-        return WHD_SUCCESS;
-    else
-        return WHD_HAL_ERROR;
-
-}
-
-static whd_result_t whd_bus_sdio_cmd53(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                       whd_bus_function_t function, sdio_transfer_mode_t mode, uint32_t address,
-                                       uint16_t data_size, uint8_t *data,
-                                       sdio_response_needed_t response_expected, uint32_t *response)
-{
-    sdio_cmd_argument_t arg;
-    whd_result_t result;
-
-    if (direction == BUS_WRITE)
-    {
-        WHD_BUS_STATS_INCREMENT_VARIABLE(whd_driver->bus_priv, cmd53_write);
-    }
-
-    arg.value = 0;
-    arg.cmd53.function_number = (unsigned int)(function & BUS_FUNCTION_MASK);
-    arg.cmd53.register_address = (unsigned int)(address & BIT_MASK(17) );
-    arg.cmd53.op_code = (unsigned int)1;
-    arg.cmd53.rw_flag = (unsigned int)( (direction == BUS_WRITE) ? 1 : 0 );
-
-    if (mode == SDIO_BYTE_MODE)
-    {
-        whd_assert("whd_bus_sdio_cmd53: data_size > 512 for byte mode", (data_size <= (uint16_t )512) );
-        arg.cmd53.count = (unsigned int)(data_size & 0x1FF);
-
-        result =
-            cyhal_sdio_bulk_transfer(whd_driver->bus_priv->sdio_obj, (cyhal_transfer_t)direction, arg.value,
-                                     (uint32_t *)data, data_size, response);
-
-        if (result != CY_RSLT_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s:%d cyhal_sdio_bulk_transfer SDIO_BYTE_MODE failed\n", __func__, __LINE__) );
-            goto done;
-        }
-    }
-    else
-    {
-        arg.cmd53.count = (unsigned int)( (data_size / (uint16_t)SDIO_64B_BLOCK) & BIT_MASK(9) );
-        if ( (uint32_t)(arg.cmd53.count * (uint16_t)SDIO_64B_BLOCK) < data_size )
-        {
-            ++arg.cmd53.count;
-        }
-        arg.cmd53.block_mode = (unsigned int)1;
-
-        result =
-            cyhal_sdio_bulk_transfer(whd_driver->bus_priv->sdio_obj, (cyhal_transfer_t)direction, arg.value,
-                                     (uint32_t *)data, data_size, response);
-
-        if (result != CY_RSLT_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s:%d cyhal_sdio_bulk_transfer failed\n", __func__, __LINE__) );
-            goto done;
-        }
-    }
-
-    if (direction == BUS_READ)
-    {
-        WHD_BUS_STATS_INCREMENT_VARIABLE(whd_driver->bus_priv, cmd53_read);
-    }
-
-done:
-    WHD_BUS_STATS_CONDITIONAL_INCREMENT_VARIABLE(whd_driver->bus_priv,
-                                                 ( (result != WHD_SUCCESS) && (direction == BUS_READ) ),
-                                                 cmd53_read_fail);
-    WHD_BUS_STATS_CONDITIONAL_INCREMENT_VARIABLE(whd_driver->bus_priv,
-                                                 ( (result != WHD_SUCCESS) && (direction == BUS_WRITE) ),
-                                                 cmd53_write_fail);
-    if (result == CY_RSLT_SUCCESS)
-        return WHD_SUCCESS;
-    else
-        return WHD_HAL_ERROR;
-}
-
-static whd_result_t whd_bus_sdio_download_firmware(whd_driver_t whd_driver)
-{
-    uint8_t csr_val = 0;
-    whd_result_t result;
-    uint32_t loop_count;
-    uint32_t ram_start_address;
-
-    ram_start_address = GET_C_VAR(whd_driver, ATCM_RAM_BASE_ADDRESS);
-
-    if (ram_start_address != 0)
-    {
-        CHECK_RETURN(whd_reset_core(whd_driver, WLAN_ARM_CORE, SICF_CPUHALT, SICF_CPUHALT) );
-    }
-    else
-    {
-        CHECK_RETURN(whd_disable_device_core(whd_driver, WLAN_ARM_CORE, WLAN_CORE_FLAG_NONE) );
-        CHECK_RETURN(whd_disable_device_core(whd_driver, SOCRAM_CORE, WLAN_CORE_FLAG_NONE) );
-        CHECK_RETURN(whd_reset_device_core(whd_driver, SOCRAM_CORE, WLAN_CORE_FLAG_NONE) );
-
-        CHECK_RETURN(whd_chip_specific_socsram_init(whd_driver) );
-    }
-
-#if 0
-    /* 43362 specific: Remap JTAG pins to UART output */
-    uint32_t data = 0;
-    CHECK_RETURN(whd_bus_write_backplane_value(0x18000650, 1, 1) );
-    CHECK_RETURN(whd_bus_read_backplane_value(0x18000654, 4, (uint8_t *)&data) );
-    data |= (1 << 24);
-    CHECK_RETURN(whd_bus_write_backplane_value(0x18000654, 4, data) );
-#endif
-
-    result = whd_bus_write_wifi_firmware_image(whd_driver);
-
-    if (result == WHD_UNFINISHED)
-    {
-        WPRINT_WHD_INFO( ("User aborted fw download\n") );
-        /* user aborted */
-        return result;
-    }
-    else if (result != WHD_SUCCESS)
-    {
-        whd_assert("Failed to load wifi firmware\n", result == WHD_SUCCESS);
-        return result;
-    }
-
-    CHECK_RETURN(whd_bus_write_wifi_nvram_image(whd_driver) );
-
-    /* Take the ARM core out of reset */
-    if (ram_start_address != 0)
-    {
-        CHECK_RETURN(whd_reset_core(whd_driver, WLAN_ARM_CORE, 0, 0) );
-    }
-    else
-    {
-        CHECK_RETURN(whd_reset_device_core(whd_driver, WLAN_ARM_CORE, WLAN_CORE_FLAG_NONE) );
-
-        result = whd_device_core_is_up(whd_driver, WLAN_ARM_CORE);
-        if (result != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("Could not bring ARM core up\n") );
-            /* Reachable after hitting assert */
-            return result;
-        }
-    }
-
-    /* Wait until the High Throughput clock is available */
-    loop_count = 0;
-    while ( ( (result = whd_bus_read_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_CHIP_CLOCK_CSR, (uint8_t)1,
-                                                    &csr_val) ) == WHD_SUCCESS ) &&
-            ( (csr_val & SBSDIO_HT_AVAIL) == 0 ) &&
-            (loop_count < (uint32_t)HT_AVAIL_TIMEOUT_MS) )
-    {
-        (void)cy_rtos_delay_milliseconds( (uint32_t)1 );   /* Ignore return - nothing can be done if it fails */
-        loop_count++;
-    }
-    if (loop_count >= (uint32_t)HT_AVAIL_TIMEOUT_MS)
-    {
-        /* If your system times out here, it means that the WLAN firmware is not booting.
-         * Check that your WLAN chip matches the 'wifi_image.c' being built - in GNU toolchain, $(CHIP)
-         * makefile variable must be correct.
-         */
-        WPRINT_WHD_ERROR( ("Timeout while waiting for high throughput clock\n") );
-        /* Reachable after hitting assert */
-        return WHD_TIMEOUT;
-    }
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Error while waiting for high throughput clock\n") );
-        /* Reachable after hitting assert */
-        return result;
-    }
-
-    /* Set up the interrupt mask and enable interrupts */
-    CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, SDIO_INT_HOST_MASK, (uint8_t)4, HOSTINTMASK) );
-
-    /* Enable F2 interrupts. This wasn't required for 4319 but is for the 43362 */
-    CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, SDIO_FUNCTION_INT_MASK, (uint8_t)1,
-                                               SDIO_FUNC_MASK_F1 | SDIO_FUNC_MASK_F2) );
-
-    /* Lower F2 Watermark to avoid DMA Hang in F2 when SD Clock is stopped. */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_FUNCTION2_WATERMARK, (uint8_t)1,
-                                              (uint32_t)SDIO_F2_WATERMARK) );
-
-    return WHD_SUCCESS;
-}
-
-/** Aborts a SDIO read of a packet from the 802.11 device
- *
- * This function is necessary because the only way to obtain the size of the next
- * available received packet is to read the first four bytes of the packet.
- * If the system reads these four bytes, and then fails to allocate the required
- * memory, then this function allows the system to abort the packet read cleanly,
- * and to optionally tell the 802.11 device to keep it allowing reception once
- * memory is available.
- *
- * In order to do this abort, the following actions are performed:
- * - Sets abort bit for Function 2 (WLAN Data) to request stopping transfer
- * - Sets Read Frame Termination bit to flush and reset fifos
- * - If packet is to be kept and resent by 802.11 device, a NAK  is sent
- * - Wait whilst the Fifo is emptied of the packet ( reading during this period would cause all zeros to be read )
- *
- * @param retry : WHD_TRUE if 802.11 device is to keep and resend packet
- *                WHD_FALSE if 802.11 device is to drop packet
- *
- * @return WHD_SUCCESS if successful, otherwise error code
- */
-static whd_result_t whd_bus_sdio_abort_read(whd_driver_t whd_driver, whd_bool_t retry)
-{
-    WHD_BUS_STATS_INCREMENT_VARIABLE(whd_driver->bus_priv, read_aborts);
-
-    /* Abort transfer on WLAN_FUNCTION */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_IOABORT, (uint8_t)1,
-                                              (uint32_t)WLAN_FUNCTION) );
-
-    /* Send frame terminate */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_FRAME_CONTROL, (uint8_t)1,
-                                              SFC_RF_TERM) );
-
-    /* If we want to retry message, send NAK */
-    if (retry == WHD_TRUE)
-    {
-        CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, (uint32_t)SDIO_TO_SB_MAIL_BOX, (uint8_t)1, SMB_NAK) );
-    }
-
-    return WHD_SUCCESS;
-}
-
-whd_result_t whd_bus_sdio_read_register_value(whd_driver_t whd_driver, whd_bus_function_t function, uint32_t address,
-                                              uint8_t value_length, uint8_t *value)
-{
-    memset(value, 0, (size_t)value_length);
-    return whd_bus_sdio_transfer(whd_driver, BUS_READ, function, address, value_length, value, RESPONSE_NEEDED);
-}
-
-whd_result_t whd_bus_sdio_poke_wlan(whd_driver_t whd_driver)
-{
-    /*TODO: change 1<<3 to a register hash define */
-    return whd_bus_write_backplane_value(whd_driver, SDIO_TO_SB_MAILBOX, (uint8_t)4, (uint32_t)(1 << 3) );
-}
-
-whd_result_t whd_bus_sdio_wakeup(whd_driver_t whd_driver)
-{
-    return WHD_SUCCESS;
-}
-
-whd_result_t whd_bus_sdio_sleep(whd_driver_t whd_driver)
-{
-    return WHD_SUCCESS;
-}
-
-static whd_result_t whd_bus_sdio_set_oob_interrupt(whd_driver_t whd_driver, uint8_t gpio_pin_number)
-{
-    if (gpio_pin_number != 0)
-    {
-        /* Redirect to OOB interrupt to GPIO1 */
-        CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_GPIO_SELECT, (uint8_t)1,
-                                                  (uint32_t)0xF) );
-        CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_GPIO_OUTPUT, (uint8_t)1,
-                                                  (uint32_t)0x0) );
-
-        /* Enable GPIOx (bit x) */
-        CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_GPIO_ENABLE, (uint8_t)1,
-                                                  (uint32_t)0x2) );
-
-        /* Set GPIOx (bit x) on Chipcommon GPIO Control register */
-        CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, CHIPCOMMON_GPIO_CONTROL, (uint8_t)4,
-                                                  (uint32_t)0x2) );
-    }
-
-    return WHD_SUCCESS;
-}
-
-void whd_bus_sdio_init_stats(whd_driver_t whd_driver)
-{
-    memset(&whd_driver->bus_priv->whd_bus_stats, 0, sizeof(whd_bus_stats_t) );
-}
-
-whd_result_t whd_bus_sdio_print_stats(whd_driver_t whd_driver, whd_bool_t reset_after_print)
-{
-    WPRINT_MACRO( ("Bus Stats.. \n"
-                   "cmd52:%" PRIu32 ", cmd53_read:%" PRIu32 ", cmd53_write:%" PRIu32 "\n"
-                   "cmd52_fail:%" PRIu32 ", cmd53_read_fail:%" PRIu32 ", cmd53_write_fail:%" PRIu32 "\n"
-                   "oob_intrs:%" PRIu32 ", sdio_intrs:%" PRIu32 ", error_intrs:%" PRIu32 ", read_aborts:%" PRIu32
-                   "\n",
-                   whd_driver->bus_priv->whd_bus_stats.cmd52, whd_driver->bus_priv->whd_bus_stats.cmd53_read,
-                   whd_driver->bus_priv->whd_bus_stats.cmd53_write,
-                   whd_driver->bus_priv->whd_bus_stats.cmd52_fail,
-                   whd_driver->bus_priv->whd_bus_stats.cmd53_read_fail,
-                   whd_driver->bus_priv->whd_bus_stats.cmd53_write_fail,
-                   whd_driver->bus_priv->whd_bus_stats.oob_intrs,
-                   whd_driver->bus_priv->whd_bus_stats.sdio_intrs,
-                   whd_driver->bus_priv->whd_bus_stats.error_intrs,
-                   whd_driver->bus_priv->whd_bus_stats.read_aborts) );
-
-    if (reset_after_print == WHD_TRUE)
-    {
-        memset(&whd_driver->bus_priv->whd_bus_stats, 0, sizeof(whd_bus_stats_t) );
-    }
-
-    return WHD_SUCCESS;
-}
-
-/* Waking the firmware up from Deep Sleep */
-whd_result_t whd_bus_sdio_reinit_stats(whd_driver_t whd_driver, whd_bool_t wake_from_firmware)
-{
-    whd_result_t result = WHD_SUCCESS;
-    uint8_t byte_data;
-    uint32_t loop_count;
-    loop_count = 0;
-
-    /* Setup the backplane*/
-    loop_count = 0;
-
-    do
-    {
-        /* Enable function 1 (backplane) */
-        CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_IOEN, (uint8_t)1,
-                                                  SDIO_FUNC_ENABLE_1) );
-        if (loop_count != 0)
-        {
-            (void)cy_rtos_delay_milliseconds( (uint32_t)1 );  /* Ignore return - nothing can be done if it fails */
-        }
-
-        CHECK_RETURN(whd_bus_read_register_value (whd_driver, BUS_FUNCTION, SDIOD_CCCR_IOEN, (uint8_t)1, &byte_data) );
-        loop_count++;
-        if (loop_count >= (uint32_t)F0_WORKING_TIMEOUT_MS)
-        {
-            WPRINT_WHD_ERROR( ("Timeout on CCCR update\n") );
-            return WHD_TIMEOUT;
-        }
-    } while (byte_data != (uint8_t)SDIO_FUNC_ENABLE_1);
-
-    if (whd_driver->bus_priv->sdio_config.sdio_1bit_mode == WHD_FALSE)
-    {
-        /* Read the bus width and set to 4 bits */
-        CHECK_RETURN(whd_bus_read_register_value (whd_driver, BUS_FUNCTION, SDIOD_CCCR_BICTRL, (uint8_t)1,
-                                                  &byte_data) );
-        CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_BICTRL, (uint8_t)1,
-                                                  (byte_data & (~BUS_SD_DATA_WIDTH_MASK) ) | BUS_SD_DATA_WIDTH_4BIT) );
-        /* NOTE: We don't need to change our local bus settings since we're not sending any data (only using CMD52)
-         * until after we change the bus speed further down */
-    }
-
-    /* Set the block size */
-    /* Wait till the backplane is ready */
-    loop_count = 0;
-    while ( ( (result = whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_BLKSIZE_0, (uint8_t)1,
-                                                     (uint32_t)SDIO_64B_BLOCK) ) == WHD_SUCCESS ) &&
-            ( (result = whd_bus_read_register_value (whd_driver, BUS_FUNCTION, SDIOD_CCCR_BLKSIZE_0, (uint8_t)1,
-                                                     &byte_data) ) == WHD_SUCCESS ) &&
-            (byte_data != (uint8_t)SDIO_64B_BLOCK) &&
-            (loop_count < (uint32_t)F0_WORKING_TIMEOUT_MS) )
-    {
-        (void)cy_rtos_delay_milliseconds( (uint32_t)1 );    /* Ignore return - nothing can be done if it fails */
-        loop_count++;
-        if (loop_count >= (uint32_t)F0_WORKING_TIMEOUT_MS)
-        {
-            /* If the system fails here, check the high frequency crystal is working */
-            WPRINT_WHD_ERROR( ("Timeout while setting block size\n") );
-            return WHD_TIMEOUT;
-        }
-    }
-
-    CHECK_RETURN(result);
-
-    WPRINT_WHD_DEBUG( ("Modding registers for blocks\n") );
-
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_BLKSIZE_0,   (uint8_t)1,
-                                              (uint32_t)SDIO_64B_BLOCK) );
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_F1BLKSIZE_0, (uint8_t)1,
-                                              (uint32_t)SDIO_64B_BLOCK) );
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_F2BLKSIZE_0, (uint8_t)1,
-                                              (uint32_t)SDIO_64B_BLOCK) );
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_F2BLKSIZE_1, (uint8_t)1,
-                                              (uint32_t)0) );                                                                                  /* Function 2 = 64 */
-
-    /* Enable/Disable Client interrupts */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_INTEN,       (uint8_t)1,
-                                              INTR_CTL_MASTER_EN | INTR_CTL_FUNC1_EN | INTR_CTL_FUNC2_EN) );
-
-
-    if (whd_driver->bus_priv->sdio_config.high_speed_sdio_clock)
-    {
-        WPRINT_WHD_DEBUG( ("SDIO HS clock enable\n") );
-
-        /* This code is required if we want more than 25 MHz clock */
-        CHECK_RETURN(whd_bus_read_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_SPEED_CONTROL, 1, &byte_data) );
-        if ( (byte_data & 0x1) != 0 )
-        {
-            CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_SPEED_CONTROL, 1,
-                                                      byte_data | SDIO_SPEED_EHS) );
-        }
-        else
-        {
-            WPRINT_WHD_ERROR( ("Error writing to WLAN register, %s failed at %d \n", __func__, __LINE__) );
-            return WHD_BUS_READ_REGISTER_ERROR;
-        }
-    } /* HIGH_SPEED_SDIO_CLOCK */
-
-    /* Wait till the backplane is ready */
-    loop_count = 0;
-    while ( ( (result = whd_bus_read_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_IORDY, (uint8_t)1,
-                                                    &byte_data) ) == WHD_SUCCESS ) &&
-            ( (byte_data & SDIO_FUNC_READY_1) == 0 ) &&
-            (loop_count < (uint32_t)F1_AVAIL_TIMEOUT_MS) )
-    {
-        (void)cy_rtos_delay_milliseconds( (uint32_t)1 );   /* Ignore return - nothing can be done if it fails */
-        loop_count++;
-    }
-
-    if (loop_count >= (uint32_t)F1_AVAIL_TIMEOUT_MS)
-    {
-        WPRINT_WHD_ERROR( ("Timeout while waiting for backplane to be ready\n") );
-        return WHD_TIMEOUT;
-    }
-    CHECK_RETURN(result);
-
-    /* Set the ALP */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_CHIP_CLOCK_CSR, (uint8_t)1,
-                                              (uint32_t)(SBSDIO_FORCE_HW_CLKREQ_OFF | SBSDIO_ALP_AVAIL_REQ |
-                                                         SBSDIO_FORCE_ALP) ) );
-    loop_count = 0;
-    while ( ( (result = whd_bus_read_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_CHIP_CLOCK_CSR, (uint8_t)1,
-                                                    &byte_data) ) != WHD_SUCCESS ) ||
-            ( ( (byte_data & SBSDIO_ALP_AVAIL) == 0 ) &&
-              (loop_count < (uint32_t)ALP_AVAIL_TIMEOUT_MS) ) )
-    {
-        (void)cy_rtos_delay_milliseconds( (uint32_t)1 );   /* Ignore return - nothing can be done if it fails */
-        loop_count++;
-    }
-    if (loop_count >= (uint32_t)ALP_AVAIL_TIMEOUT_MS)
-    {
-        WPRINT_WHD_ERROR( ("Timeout while waiting for alp clock\n") );
-        return WHD_TIMEOUT;
-    }
-    CHECK_RETURN(result);
-
-    /* Clear request for ALP */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_CHIP_CLOCK_CSR, (uint8_t)1, 0) );
-
-    /* Disable the extra SDIO pull-ups */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_PULL_UP, (uint8_t)1, 0) );
-
-    /* Enable F1 and F2 */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_IOEN, (uint8_t)1,
-                                              SDIO_FUNC_ENABLE_1 | SDIO_FUNC_ENABLE_2) );
-
-    /* Setup host-wake signals */
-    CHECK_RETURN(whd_bus_sdio_init_oob_intr(whd_driver) );
-
-    /* Enable F2 interrupt only */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_INTEN, (uint8_t)1,
-                                              INTR_CTL_MASTER_EN | INTR_CTL_FUNC2_EN) );
-
-    CHECK_RETURN(whd_bus_read_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_IORDY, (uint8_t)1, &byte_data) );
-
-    result = whd_bus_sdio_download_firmware(whd_driver);
-
-    if (result != WHD_SUCCESS)
-    {
-        /*  either an error or user abort */
-        WPRINT_WHD_DEBUG( ("FW download failed\n") );
-        return result;
-    }
-
-    /* Wait for F2 to be ready */
-    loop_count = 0;
-    while ( ( (result = whd_bus_read_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_IORDY, (uint8_t)1,
-                                                    &byte_data) ) != WHD_SUCCESS ) ||
-            ( ( (byte_data & SDIO_FUNC_READY_2) == 0 ) &&
-              (loop_count < (uint32_t)F2_READY_TIMEOUT_MS) ) )
-    {
-        (void)cy_rtos_delay_milliseconds( (uint32_t)1 );   /* Ignore return - nothing can be done if it fails */
-        loop_count++;
-    }
-
-    if (loop_count >= (uint32_t)F2_READY_TIMEOUT_MS)
-    {
-        WPRINT_WHD_DEBUG( ("Timeout while waiting for function 2 to be ready\n") );
-
-        if (WHD_TRUE == wake_from_firmware)
-        {
-            /* If your system fails here, it could be due to incorrect NVRAM variables.
-             * Check which 'wifi_nvram_image.h' file your platform is using, and
-             * check that it matches the WLAN device on your platform, including the
-             * crystal frequency.
-             */
-            WPRINT_WHD_ERROR( ("F2 failed on wake fr FW\n") );
-            /* Reachable after hitting assert */
-            return WHD_TIMEOUT;
-        }
-        /* Else: Ignore this failure if we're doing a reinit due to host wake: Linux DHD also ignores */
-
-    }
-
-    /* Do chip specific init */
-    CHECK_RETURN(whd_chip_specific_init(whd_driver) );
-
-    /* Ensure Bus is up */
-    CHECK_RETURN(whd_ensure_wlan_bus_is_up(whd_driver) );
-
-    /* Allow bus to go to  sleep */
-    CHECK_RETURN(whd_allow_wlan_bus_to_sleep(whd_driver) );
-
-    WPRINT_WHD_INFO( ("whd_bus_reinit Completed \n") );
-    return WHD_SUCCESS;
-}
-
-uint8_t whd_bus_sdio_backplane_read_padd_size(whd_driver_t whd_driver)
-{
-    return WHD_BUS_SDIO_BACKPLANE_READ_PADD_SIZE;
-}
-
-whd_bool_t whd_bus_sdio_use_status_report_scheme(whd_driver_t whd_driver)
-{
-    return WHD_FALSE;
-}
-
-uint32_t whd_bus_sdio_get_max_transfer_size(whd_driver_t whd_driver)
-{
-    return WHD_BUS_SDIO_MAX_BACKPLANE_TRANSFER_SIZE;
-}
-
-static void whd_bus_sdio_irq_handler(void *handler_arg, cyhal_sdio_irq_event_t event)
-{
-    whd_driver_t whd_driver = (whd_driver_t)handler_arg;
-
-    /* WHD registered only for CY_CYHAL_SDIO_CARD_INTERRUPT */
-    if (event != CYHAL_SDIO_CARD_INTERRUPT)
-    {
-        WPRINT_WHD_ERROR( ("Unexpected interrupt event %d\n", event) );
-        WHD_BUS_STATS_INCREMENT_VARIABLE(whd_driver->bus_priv, error_intrs);
-        return;
-    }
-
-    WHD_BUS_STATS_INCREMENT_VARIABLE(whd_driver->bus_priv, sdio_intrs);
-
-    /* call thread notify to wake up WHD thread */
-    whd_thread_notify_irq(whd_driver);
-}
-
-whd_result_t whd_bus_sdio_irq_register(whd_driver_t whd_driver)
-{
-    cyhal_sdio_register_irq(whd_driver->bus_priv->sdio_obj, whd_bus_sdio_irq_handler, whd_driver);
-    return WHD_SUCCESS;
-}
-
-whd_result_t whd_bus_sdio_irq_enable(whd_driver_t whd_driver, whd_bool_t enable)
-{
-    cyhal_sdio_irq_enable(whd_driver->bus_priv->sdio_obj, CYHAL_SDIO_CARD_INTERRUPT, enable);
-    return WHD_SUCCESS;
-}
-
-static void whd_bus_sdio_oob_irq_handler(void *arg, cyhal_gpio_irq_event_t event)
-{
-    whd_driver_t whd_driver = (whd_driver_t)arg;
-    const whd_oob_config_t *config = &whd_driver->bus_priv->sdio_config.oob_config;
-    const cyhal_gpio_irq_event_t expected_event = (config->is_falling_edge == WHD_TRUE)
-                                                  ? CYHAL_GPIO_IRQ_FALL : CYHAL_GPIO_IRQ_RISE;
-
-    if (event != expected_event)
-    {
-        WPRINT_WHD_ERROR( ("Unexpected interrupt event %d\n", event) );
-        WHD_BUS_STATS_INCREMENT_VARIABLE(whd_driver->bus_priv, error_intrs);
-        return;
-    }
-
-    WHD_BUS_STATS_INCREMENT_VARIABLE(whd_driver->bus_priv, oob_intrs);
-
-    /* Call thread notify to wake up WHD thread */
-    whd_thread_notify_irq(whd_driver);
-}
-
-static whd_result_t whd_bus_sdio_register_oob_intr(whd_driver_t whd_driver)
-{
-    const whd_oob_config_t *config = &whd_driver->bus_priv->sdio_config.oob_config;
-
-    cyhal_gpio_init(config->host_oob_pin, CYHAL_GPIO_DIR_INPUT, CYHAL_GPIO_DRIVE_NONE, 0);
-    cyhal_gpio_register_irq(config->host_oob_pin, config->intr_priority, whd_bus_sdio_oob_irq_handler,
-                            whd_driver);
-
-    return WHD_SUCCESS;
-}
-
-static whd_result_t whd_bus_sdio_unregister_oob_intr(whd_driver_t whd_driver)
-{
-    const whd_oob_config_t *config = &whd_driver->bus_priv->sdio_config.oob_config;
-
-    cyhal_gpio_register_irq(config->host_oob_pin, config->intr_priority, NULL, NULL);
-
-    return WHD_SUCCESS;
-}
-
-static whd_result_t whd_bus_sdio_enable_oob_intr(whd_driver_t whd_driver, whd_bool_t enable)
-{
-    const whd_oob_config_t *config = &whd_driver->bus_priv->sdio_config.oob_config;
-    const cyhal_gpio_irq_event_t event =
-        (config->is_falling_edge == WHD_TRUE) ? CYHAL_GPIO_IRQ_FALL : CYHAL_GPIO_IRQ_RISE;
-
-    cyhal_gpio_irq_enable(config->host_oob_pin, event, (enable == WHD_TRUE) ? true : false);
-
-    return WHD_SUCCESS;
-}
-
-static whd_result_t whd_bus_sdio_init_oob_intr(whd_driver_t whd_driver)
-{
-    const whd_oob_config_t *config = &whd_driver->bus_priv->sdio_config.oob_config;
-    uint8_t sepintpol;
-
-    /* OOB isn't configured so bail */
-    if (config->host_oob_pin == CYHAL_NC_PIN_VALUE)
-        return WHD_SUCCESS;
-
-    /* Choose out-of-band interrupt polarity */
-    if (config->is_falling_edge == WHD_FALSE)
-    {
-        sepintpol = SEP_INTR_CTL_POL;
-    }
-    else
-    {
-        sepintpol = 0;
-    }
-
-    /* Set OOB interrupt to the correct WLAN GPIO pin (default to GPIO0) */
-    if (config->dev_gpio_sel)
-        CHECK_RETURN(whd_bus_sdio_set_oob_interrupt(whd_driver, config->dev_gpio_sel) );
-
-    /* Enable out-of-band interrupt on the device */
-    CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_SEP_INT_CTL, (uint8_t)1,
-                                              SEP_INTR_CTL_MASK | SEP_INTR_CTL_EN | sepintpol) );
-
-    /* Register and enable OOB */
-    /* XXX Remove this when BSP377 is implemented */
-    CHECK_RETURN(whd_bus_sdio_register_oob_intr(whd_driver) );
-    CHECK_RETURN(whd_bus_sdio_enable_oob_intr(whd_driver, WHD_TRUE) );
-
-    return WHD_SUCCESS;
-}
-
-static whd_result_t whd_bus_sdio_deinit_oob_intr(whd_driver_t whd_driver)
-{
-    const whd_oob_config_t *config = &whd_driver->bus_priv->sdio_config.oob_config;
-
-    if (config->host_oob_pin != CYHAL_NC_PIN_VALUE)
-    {
-        CHECK_RETURN(whd_bus_sdio_enable_oob_intr(whd_driver, WHD_FALSE) );
-        CHECK_RETURN(whd_bus_sdio_unregister_oob_intr(whd_driver) );
-    }
-
-    return WHD_SUCCESS;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_sdio_protocol.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_sdio_protocol.h
deleted file mode 100644
index f276334a51..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_sdio_protocol.h
+++ /dev/null
@@ -1,229 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "whd.h"
-#include "bus_protocols/whd_bus_protocol_interface.h"
-
-#ifndef INCLUDED_SDIO_WHD_BUS_PROTOCOL_H
-#define INCLUDED_SDIO_WHD_BUS_PROTOCOL_H
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/******************************************************
-*                      Macros
-******************************************************/
-#define BIT_MASK(x)         ( (1 << x) - 1 )
-
-#define WHD_BUS_HEADER_SIZE                     (0)
-
-#define WHD_BUS_SDIO_MAX_BACKPLANE_TRANSFER_SIZE     (1536)
-#define WHD_BUS_SDIO_BACKPLANE_READ_PADD_SIZE        (0)
-
-/******************************************************
-*             Structures
-******************************************************/
-#pragma pack(1)
-typedef struct
-{
-    unsigned char stuff_bits;
-    unsigned int ocr : 24;
-} sdio_cmd5_argument_t;
-
-typedef struct
-{
-    unsigned int _unique2         : 9;  /* 0-8   */
-    unsigned int register_address : 17; /* 9-25  */
-    unsigned int _unique          : 2;  /* 26-27 */
-    unsigned int function_number  : 3;  /* 28-30 */
-    unsigned int rw_flag          : 1;  /* 31    */
-} sdio_cmd5x_argument_t;
-
-typedef struct
-{
-    uint8_t write_data;                 /* 0 - 7 */
-    unsigned int _stuff2          : 1;  /* 8     */
-    unsigned int register_address : 17; /* 9-25  */
-    unsigned int _stuff           : 1;  /* 26    */
-    unsigned int raw_flag         : 1;  /* 27    */
-    unsigned int function_number  : 3;  /* 28-30 */
-    unsigned int rw_flag          : 1;  /* 31    */
-} whd_bus_sdio_cmd52_argument_t;
-
-typedef struct
-{
-    unsigned int count            : 9;  /* 0-8   */
-    unsigned int register_address : 17; /* 9-25  */
-    unsigned int op_code          : 1;  /* 26    */
-    unsigned int block_mode       : 1;  /* 27    */
-    unsigned int function_number  : 3;  /* 28-30 */
-    unsigned int rw_flag          : 1;  /* 31    */
-} whd_bus_sdio_cmd53_argument_t;
-
-typedef union
-{
-    uint32_t value;
-    sdio_cmd5_argument_t cmd5;
-    sdio_cmd5x_argument_t cmd5x;
-    whd_bus_sdio_cmd52_argument_t cmd52;
-    whd_bus_sdio_cmd53_argument_t cmd53;
-} sdio_cmd_argument_t;
-
-typedef struct
-{
-    unsigned int ocr              : 24; /* 0-23  */
-    unsigned int stuff_bits       : 3;  /* 24-26 */
-    unsigned int memory_present   : 1;  /* 27    */
-    unsigned int function_count   : 3;  /* 28-30 */
-    unsigned int c                : 1;  /* 31    */
-} sdio_response4_t;
-
-typedef struct
-{
-    uint8_t data;                      /* 0-7   */
-    uint8_t response_flags;             /* 8-15  */
-    uint16_t stuff;                    /* 16-31 */
-} sdio_response5_t;
-
-typedef struct
-{
-    uint16_t card_status;               /* 0-15  */
-    uint16_t rca;                      /* 16-31 */
-} sdio_response6_t;
-
-typedef union
-{
-    uint32_t value;
-    sdio_response4_t r4;
-    sdio_response5_t r5;
-    sdio_response6_t r6;
-} sdio_response_t;
-
-typedef enum
-{
-    SDIO_BLOCK_MODE = (0 << 2),   /* These are STM32 implementation specific */
-    SDIO_BYTE_MODE = (1 << 2)   /* These are STM32 implementation specific */
-} sdio_transfer_mode_t;
-
-typedef enum
-{
-    SDIO_1B_BLOCK = 1, SDIO_2B_BLOCK = 2, SDIO_4B_BLOCK = 4, SDIO_8B_BLOCK = 8, SDIO_16B_BLOCK = 16,
-    SDIO_32B_BLOCK = 32, SDIO_64B_BLOCK = 64, SDIO_128B_BLOCK = 128, SDIO_256B_BLOCK = 256, SDIO_512B_BLOCK = 512,
-    SDIO_1024B_BLOCK = 1024, SDIO_2048B_BLOCK = 2048
-} sdio_block_size_t;
-
-typedef enum
-{
-    RESPONSE_NEEDED, NO_RESPONSE
-} sdio_response_needed_t;
-
-
-#pragma pack()
-
-/******************************************************
-*             Macros
-******************************************************/
-#define WHD_BUS_STATS_INCREMENT_VARIABLE(bus_priv, var) \
-    do { bus_priv->whd_bus_stats.var++; } while (0)
-
-#define WHD_BUS_STATS_CONDITIONAL_INCREMENT_VARIABLE(bus_priv, condition, var) \
-    do { if (condition){ bus_priv->whd_bus_stats.var++; }} while (0)
-
-typedef struct
-{
-    uint32_t cmd52;             /* Number of cmd52 reads/writes issued */
-    uint32_t cmd53_read;        /* Number of cmd53 reads */
-    uint32_t cmd53_write;       /* Number of cmd53 writes */
-    uint32_t cmd52_fail;        /* Number of cmd52 read/write fails */
-    uint32_t cmd53_read_fail;   /* Number of cmd53 read fails */
-    uint32_t cmd53_write_fail;  /* Number of cmd53 write fails */
-    uint32_t oob_intrs;         /* Number of OOB interrupts generated by wlan chip */
-    uint32_t sdio_intrs;        /* Number of SDIO interrupts generated by wlan chip */
-    uint32_t error_intrs;       /* Number of SDIO error interrupts generated by wlan chip */
-    uint32_t read_aborts;       /* Number of times read aborts are called */
-} whd_bus_stats_t;
-
-/******************************************************
-*             Structures
-******************************************************/
-
-/******************************************************
-*             Function declarations
-******************************************************/
-/* Initialisation functions */
-extern whd_result_t whd_bus_sdio_init(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_sdio_resume_after_deep_sleep(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_sdio_deinit(whd_driver_t whd_driver);
-
-/* Device register access functions */
-extern whd_result_t whd_bus_sdio_write_backplane_value(whd_driver_t whd_driver, uint32_t address,
-                                                       uint8_t register_length, uint32_t value);
-extern whd_result_t whd_bus_sdio_read_backplane_value(whd_driver_t whd_driver, uint32_t address,
-                                                      uint8_t register_length, uint8_t *value);
-extern whd_result_t whd_bus_sdio_write_register_value(whd_driver_t whd_driver, whd_bus_function_t function,
-                                                      uint32_t address, uint8_t value_length, uint32_t value);
-extern whd_result_t whd_bus_sdio_read_register_value(whd_driver_t whd_driver, whd_bus_function_t function,
-                                                     uint32_t address, uint8_t value_length, uint8_t *value);
-
-/* Device data transfer functions */
-extern whd_result_t whd_bus_sdio_send_buffer(whd_driver_t whd_driver, whd_buffer_t buffer);
-extern whd_result_t whd_bus_sdio_transfer_bytes(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                                whd_bus_function_t function, uint32_t address, uint16_t size,
-                                                whd_transfer_bytes_packet_t *data);
-extern whd_result_t whd_bus_sdio_transfer_backplane_bytes(whd_driver_t whd_driver,
-                                                          whd_bus_transfer_direction_t direction, uint32_t address,
-                                                          uint32_t size, uint8_t *data);
-
-/* Frame transfer function */
-extern whd_result_t whd_bus_sdio_read_frame(whd_driver_t whd_driver, whd_buffer_t *buffer);
-
-extern whd_result_t whd_bus_sdio_poke_wlan(whd_driver_t whd_driver);
-extern uint32_t     whd_bus_sdio_packet_available_to_read(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_sdio_ack_interrupt(whd_driver_t whd_driver, uint32_t intstatus);
-
-extern whd_result_t whd_bus_sdio_set_backplane_window(whd_driver_t whd_driver, uint32_t addr);
-
-extern void whd_delayed_bus_release_schedule_update(whd_driver_t whd_driver, whd_bool_t is_scheduled);
-#define DELAYED_BUS_RELEASE_SCHEDULE(whd_driver, schedule) \
-    do {  whd_delayed_bus_release_schedule_update(whd_driver, schedule); } while (0)
-
-extern whd_bool_t whd_bus_sdio_wake_interrupt_present(whd_driver_t whd_driver);
-
-extern whd_result_t whd_bus_sdio_wakeup(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_sdio_sleep(whd_driver_t whd_driver);
-
-extern void         whd_bus_sdio_init_stats(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_sdio_print_stats(whd_driver_t whd_driver, whd_bool_t reset_after_print);
-extern whd_result_t whd_bus_sdio_reinit_stats(whd_driver_t whd_driver, whd_bool_t wake_from_firmware);
-
-uint8_t whd_bus_sdio_backplane_read_padd_size(whd_driver_t whd_driver);
-
-extern whd_result_t  whd_bus_sdio_wait_for_wlan_event(whd_driver_t whd_driver,
-                                                      cy_semaphore_t *transceive_semaphore);
-extern whd_bool_t whd_bus_sdio_use_status_report_scheme(whd_driver_t whd_driver);
-extern uint32_t whd_bus_sdio_get_max_transfer_size(whd_driver_t whd_driver);
-/******************************************************
-*             Global variables
-******************************************************/
-
-#ifdef __cplusplus
-} /*extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_SDIO_WHD_BUS_PROTOCOL_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_spi_protocol.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_spi_protocol.c
deleted file mode 100644
index be272116bb..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_spi_protocol.c
+++ /dev/null
@@ -1,1038 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Broadcom WLAN SPI Protocol interface
- *
- *  Implements the WHD Bus Protocol Interface for SPI
- *  Provides functions for initialising, de-intitialising 802.11 device,
- *  sending/receiving raw packets etc
- */
-
-#include <stdlib.h>
-#include <string.h>  /* For memcpy */
-
-#include "cy_result.h"
-#include "cyabs_rtos.h"
-#include "cyhal_gpio.h"
-
-#include "whd_thread.h"
-#include "whd_chip.h"
-#include "whd_sdpcm.h"
-#include "whd_chip_constants.h"
-#include "whd_int.h"
-#include "whd_bus_spi_protocol.h"
-#include "whd_bus_common.h"
-#include "whd_chip_reg.h"
-#include "whd_debug.h"
-#include "whd_bus.h"
-#include "whd_spi.h"
-#include "whd_sdio.h"
-#include "whd_buffer_api.h"
-#include "whd_debug.h"
-#include "whd_types_int.h"
-
-
-
-/******************************************************
-*             Constants
-******************************************************/
-
-#define F2_READY_TIMEOUT_MS    (1000)
-#define F2_READY_TIMEOUT_LOOPS (1000)
-#define F1_READY_TIMEOUT_LOOPS (1000)
-#define FEADBEAD_TIMEOUT_MS    (500)
-#define ALP_AVAIL_TIMEOUT_MS   (100)
-
-/* function 1 OCP space */
-#define SBSDIO_SB_OFT_ADDR_MASK  0x07FFF /* sb offset addr is <= 15 bits, 32k */
-#define SBSDIO_SB_OFT_ADDR_LIMIT  0x08000
-#define SBSDIO_SB_ACCESS_2_4B_FLAG  0x08000 /* with b15, maps to 32-bit SB access */
-
-#define HT_AVAIL_TIMEOUT_MS    (1000)
-
-/* Taken from FALCON_5_90_195_26 dhd/sys/dhd_sdio.c. For 43362, MUST be >= 8 and word-aligned otherwise dongle fw crashes */
-#define SPI_F2_WATERMARK       (32)
-
-#define GSPI_PACKET_AVAILABLE  (1 << 8)
-#define GSPI_UNDERFLOW         (1 << 1)
-
-#define SWAP32_16BIT_PARTS(val) ( (uint32_t)( ( ( (uint32_t)(val) ) >> 16 ) + \
-                                              ( ( ( (uint32_t)(val) ) & 0xffff ) << 16 ) ) )
-
-#define WHD_BUS_GSPI_PACKET_OVERHEAD    (sizeof(whd_buffer_header_t) )
-
-#define MAX_GSPI_TRANSFER_LEN  2048
-
-#define H32TO16LE(x)           ( ( uint32_t )( ( ( ( uint32_t )(x) & ( uint32_t )0x000000ffU ) << 8 ) | \
-                                               ( ( ( uint32_t )(x) & ( uint32_t )0x0000ff00U ) >> 8 ) | \
-                                               ( ( ( uint32_t )(x) & ( uint32_t )0x00ff0000U ) << 8 ) | \
-                                               ( ( ( uint32_t )(x) & ( uint32_t )0xff000000U ) >> 8 ) ) )
-
-#define WHD_THREAD_POLL_TIMEOUT      (CY_RTOS_NEVER_TIMEOUT)
-
-#define WHD_THREAD_POKE_TIMEOUT      (100)
-
-typedef enum
-{
-    GSPI_INCREMENT_ADDRESS = 1, GSPI_FIXED_ADDRESS = 0
-} gspi_transfer_access_t;
-
-/******************************************************
-*             Structures
-******************************************************/
-
-#pragma pack(1)
-
-typedef struct
-{
-    whd_bus_gspi_header_t header;
-    uint8_t response_delay[4];
-} gspi_backplane_f1_read_header_t;
-
-#pragma pack()
-
-typedef struct
-{
-    gspi_backplane_f1_read_header_t gspi_header;
-    uint32_t data[1];
-} gspi_backplane_f1_read_packet_t;
-
-/******************************************************
-*             Static variables
-******************************************************/
-
-static const uint8_t whd_bus_gspi_command_mapping[] = { 0, 1 };
-
-/******************************************************
-*             Structures
-******************************************************/
-struct whd_bus_priv
-{
-    whd_spi_config_t spi_config;
-    cyhal_spi_t *spi_obj;
-
-};
-
-/******************************************************
-*             Variables
-******************************************************/
-
-/******************************************************
-*             Static Function Declarations
-******************************************************/
-
-static whd_result_t whd_spi_download_firmware(whd_driver_t whd_driver);
-static whd_result_t whd_bus_spi_transfer_buffer(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                                whd_bus_function_t function, uint32_t address, whd_buffer_t buffer);
-
-/******************************************************
-*             Global Function definitions
-******************************************************/
-
-uint32_t whd_bus_spi_attach(whd_driver_t whd_driver, whd_spi_config_t *whd_spi_config, cyhal_spi_t *spi_obj)
-{
-    struct whd_bus_info *whd_bus_info;
-
-    if (whd_driver->bus_priv->spi_config.oob_config.host_oob_pin == CYHAL_NC_PIN_VALUE)
-    {
-        WPRINT_WHD_ERROR( ("OOB interrupt pin argument must be provided in %s\n", __FUNCTION__) );
-        return WHD_BADARG;
-    }
-
-    whd_bus_info = (whd_bus_info_t *)malloc(sizeof(whd_bus_info_t) );
-
-    if (whd_bus_info == NULL)
-    {
-        WPRINT_WHD_ERROR( ("Memory allocation failed for whd_bus_info in %s\n", __FUNCTION__) );
-        return WHD_BUFFER_UNAVAILABLE_PERMANENT;
-    }
-    memset(whd_bus_info, 0, sizeof(whd_bus_info_t) );
-
-    whd_driver->bus_if = whd_bus_info;
-
-    whd_driver->bus_priv = (struct whd_bus_priv *)malloc(sizeof(struct whd_bus_priv) );
-
-    if (whd_driver->bus_priv == NULL)
-    {
-        WPRINT_WHD_ERROR( ("Memory allocation failed for whd_bus_priv in %s\n", __FUNCTION__) );
-        return WHD_BUFFER_UNAVAILABLE_PERMANENT;
-    }
-    memset(whd_driver->bus_priv, 0, sizeof(struct whd_bus_priv) );
-
-    /* Pass the SPI object to bus private spi_obj pointer */
-    whd_driver->bus_priv->spi_obj = spi_obj;
-    whd_driver->bus_priv->spi_config = *whd_spi_config;
-
-    whd_bus_info->whd_bus_init_fptr = whd_bus_spi_init;
-    whd_bus_info->whd_bus_deinit_fptr = whd_bus_spi_deinit;
-
-    whd_bus_info->whd_bus_write_backplane_value_fptr = whd_bus_spi_write_backplane_value;
-    whd_bus_info->whd_bus_read_backplane_value_fptr = whd_bus_spi_read_backplane_value;
-    whd_bus_info->whd_bus_write_register_value_fptr = whd_bus_spi_write_register_value;
-    whd_bus_info->whd_bus_read_register_value_fptr = whd_bus_spi_read_register_value;
-
-    whd_bus_info->whd_bus_send_buffer_fptr = whd_bus_spi_send_buffer;
-    whd_bus_info->whd_bus_transfer_bytes_fptr = whd_bus_spi_transfer_bytes;
-
-    whd_bus_info->whd_bus_read_frame_fptr = whd_bus_spi_read_frame;
-
-    whd_bus_info->whd_bus_packet_available_to_read_fptr = whd_bus_spi_packet_available_to_read;
-    whd_bus_info->whd_bus_poke_wlan_fptr = whd_bus_spi_poke_wlan;
-    whd_bus_info->whd_bus_wait_for_wlan_event_fptr = whd_bus_spi_wait_for_wlan_event;
-
-    whd_bus_info->whd_bus_ack_interrupt_fptr = whd_bus_spi_ack_interrupt;
-    whd_bus_info->whd_bus_wake_interrupt_present_fptr = whd_bus_spi_wake_interrupt_present;
-
-    whd_bus_info->whd_bus_wakeup_fptr = whd_bus_spi_wakeup;
-    whd_bus_info->whd_bus_sleep_fptr = whd_bus_spi_sleep;
-
-    whd_bus_info->whd_bus_backplane_read_padd_size_fptr = whd_bus_spi_backplane_read_padd_size;
-    whd_bus_info->whd_bus_use_status_report_scheme_fptr = whd_bus_spi_use_status_report_scheme;
-
-    whd_bus_info->whd_bus_get_max_transfer_size_fptr = whd_bus_spi_get_max_transfer_size;
-
-    whd_bus_info->whd_bus_init_stats_fptr = whd_bus_spi_init_stats;
-    whd_bus_info->whd_bus_print_stats_fptr = whd_bus_spi_print_stats;
-    whd_bus_info->whd_bus_reinit_stats_fptr = whd_bus_spi_reinit_stats;
-    whd_bus_info->whd_bus_irq_register_fptr = whd_bus_spi_irq_register;
-    whd_bus_info->whd_bus_irq_enable_fptr = whd_bus_spi_irq_enable;
-
-    return WHD_SUCCESS;
-}
-
-void whd_bus_spi_detach(whd_driver_t whd_driver)
-{
-    if (whd_driver->bus_if != NULL)
-    {
-        free(whd_driver->bus_if);
-        whd_driver->bus_if = NULL;
-    }
-    if (whd_driver->bus_priv != NULL)
-    {
-        free(whd_driver->bus_priv);
-        whd_driver->bus_priv = NULL;
-    }
-}
-
-whd_result_t whd_bus_spi_send_buffer(whd_driver_t whd_driver, whd_buffer_t buffer)
-{
-    whd_result_t result = whd_bus_spi_transfer_buffer(whd_driver, BUS_WRITE, WLAN_FUNCTION, 0, buffer);
-    CHECK_RETURN(whd_buffer_release(whd_driver, buffer, WHD_NETWORK_TX) );
-    if (result == WHD_SUCCESS)
-    {
-        DELAYED_BUS_RELEASE_SCHEDULE (whd_driver, WHD_TRUE);
-    }
-    CHECK_RETURN(result);
-
-    return WHD_SUCCESS;
-}
-
-/*
- * Perform a transfer on the gSPI bus
- * Prerequisites: length < MAX_GSPI_TRANSFER_LEN
- */
-static whd_result_t whd_bus_spi_transfer_buffer(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                                whd_bus_function_t function, uint32_t address, whd_buffer_t buffer)
-{
-    uint32_t *temp;
-    whd_result_t result;
-    uint16_t newsize;
-    whd_buffer_header_t *header = (whd_buffer_header_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, buffer);
-    whd_bus_gspi_header_t *gspi_header =
-        (whd_bus_gspi_header_t *)( (char *)header->bus_header + MAX_BUS_HEADER_SIZE - sizeof(whd_bus_gspi_header_t) );
-    size_t transfer_size;
-
-    uint16_t size = ( uint16_t )(whd_buffer_get_current_piece_size(whd_driver, buffer) - sizeof(whd_buffer_header_t) );
-
-    /* Form the gSPI header */
-    *gspi_header =
-        ( whd_bus_gspi_header_t )( ( uint32_t )( (whd_bus_gspi_command_mapping[(int)direction] & 0x1) << 31 ) |
-                                   ( uint32_t )( (GSPI_INCREMENT_ADDRESS & 0x1) << 30 ) |
-                                   ( uint32_t )( (function & 0x3) << 28 ) |
-                                   ( uint32_t )( (address & 0x1FFFF) << 11 ) | ( uint32_t )( (size & 0x7FF) << 0 ) );
-
-    /* Reshuffle the bits if we're not in 32 bit mode */
-    if (whd_driver->bus_gspi_32bit == WHD_FALSE)
-    {
-        /* Note: This typecast should always be valid if the buffer containing the GSpi packet has been correctly declared as 32-bit aligned */
-        temp = (uint32_t *)gspi_header;
-        *temp = H32TO16LE(*temp);
-    }
-
-    /* Round size up to 32-bit alignment */
-    newsize = (uint16_t)ROUND_UP(size, 4);
-
-    /* Send the data */
-    if (direction == BUS_WRITE)
-    {
-        /* Wait for FIFO to be ready to accept data */
-        if (function == WLAN_FUNCTION)
-        {
-            uint32_t whd_bus_gspi_status;
-            uint32_t loop_count = 0;
-            while ( ( (result =
-                           whd_bus_spi_read_register_value(whd_driver, BUS_FUNCTION, SPI_STATUS_REGISTER, (uint8_t)4,
-                                                           (uint8_t *)&whd_bus_gspi_status) ) == WHD_SUCCESS ) &&
-                    ( (whd_bus_gspi_status & (1 << 5) ) == 0 ) &&
-                    (loop_count < ( uint32_t )F2_READY_TIMEOUT_LOOPS) )
-            {
-                loop_count++;
-            }
-            if (result != WHD_SUCCESS)
-            {
-                WPRINT_WHD_ERROR( ("Error reading register value, %s failed at %d \n", __func__, __LINE__) );
-                return result;
-            }
-            if (loop_count >= ( uint32_t )F2_READY_TIMEOUT_LOOPS)
-            {
-                WPRINT_WHD_ERROR( ("Timeout waiting for data FIFO to be ready\n") );
-                return WHD_TIMEOUT;
-            }
-        }
-
-    }
-
-    transfer_size = (size_t)(newsize + sizeof(whd_bus_gspi_header_t) );
-
-    /* Send the data */
-    if (direction == BUS_READ)
-    {
-        result = cyhal_spi_transfer(whd_driver->bus_priv->spi_obj, NULL, 0, (uint8_t *)gspi_header,
-                                    transfer_size, 0);
-    }
-    else
-    {
-        result = cyhal_spi_transfer(whd_driver->bus_priv->spi_obj, (uint8_t *)gspi_header, transfer_size, NULL,
-                                    0, 0);
-    }
-
-    return result;
-}
-
-whd_result_t whd_bus_spi_poke_wlan(whd_driver_t whd_driver)
-{
-    return WHD_SUCCESS;
-}
-
-whd_result_t whd_bus_spi_ack_interrupt(whd_driver_t whd_driver, uint32_t intstatus)
-{
-    return whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SPI_INTERRUPT_REGISTER, (uint8_t)2, intstatus);
-}
-
-uint32_t whd_bus_spi_packet_available_to_read(whd_driver_t whd_driver)
-{
-    uint16_t interrupt_register;
-
-    CHECK_RETURN(whd_ensure_wlan_bus_is_up(whd_driver) );
-
-    /* Read the interrupt register */
-    if (whd_bus_spi_read_register_value(whd_driver, BUS_FUNCTION, SPI_INTERRUPT_REGISTER, (uint8_t)2,
-                                        (uint8_t *)&interrupt_register) != WHD_SUCCESS)
-    {
-        goto return_with_error;
-    }
-
-    if ( (interrupt_register & 0x0086) != 0 )   /* This should be 0x87, but occasional "data not available" errors are flagged seemingly for no reason */
-    {
-        /* Error condition detected */
-        WPRINT_WHD_DEBUG( ("Bus error condition detected\n") );
-    }
-
-    /* Clear interrupt register */
-    if (interrupt_register != 0)
-    {
-        if (whd_bus_spi_write_register_value(whd_driver, BUS_FUNCTION, SPI_INTERRUPT_REGISTER, (uint8_t)2,
-                                             interrupt_register) != WHD_SUCCESS)
-        {
-            goto return_with_error;
-        }
-    }
-
-    return ( uint32_t )( (interrupt_register) & (F2_PACKET_AVAILABLE) );
-
-return_with_error: whd_assert("Error accessing backplane", 0 != 0);
-    return 0;
-}
-
-whd_result_t whd_bus_spi_read_frame(whd_driver_t whd_driver, whd_buffer_t *buffer)
-{
-    uint32_t whd_bus_gspi_status;
-    whd_result_t result;
-    uint32_t whd_gspi_bytes_pending;
-
-    /* Ensure the wlan backplane bus is up */
-    CHECK_RETURN(whd_ensure_wlan_bus_is_up(whd_driver) );
-
-    do
-    {
-        result = whd_bus_spi_read_register_value(whd_driver, BUS_FUNCTION, SPI_STATUS_REGISTER, (uint8_t)4,
-                                                 (uint8_t *)&whd_bus_gspi_status);
-        if (result != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("Error reading register value, %s failed at %d \n", __func__, __LINE__) );
-            return result;
-        }
-    } while (whd_bus_gspi_status == 0xFFFFFFFF);
-
-    if ( (whd_bus_gspi_status & GSPI_PACKET_AVAILABLE) != 0 )
-    {
-        if ( ( ( (whd_bus_gspi_status >> 9) & 0x7FF ) == 0 ) ||
-             ( ( (whd_bus_gspi_status >> 9) & 0x7FF ) > (WHD_LINK_MTU - WHD_BUS_GSPI_PACKET_OVERHEAD) ) ||
-             (whd_bus_gspi_status & GSPI_UNDERFLOW) )
-        {
-            CHECK_RETURN(whd_bus_spi_write_register_value(whd_driver, BACKPLANE_FUNCTION, SPI_FRAME_CONTROL, 1,
-                                                          (1 << 0) ) );
-            return WHD_NO_PACKET_TO_RECEIVE;
-        }
-    }
-
-    whd_gspi_bytes_pending = 0;
-
-    if ( (whd_bus_gspi_status & GSPI_PACKET_AVAILABLE) != 0 )
-    {
-        whd_gspi_bytes_pending = ( (whd_bus_gspi_status >> 9) & 0x7FF );
-    }
-
-    if (whd_gspi_bytes_pending == 0)
-    {
-        return WHD_NO_PACKET_TO_RECEIVE;
-    }
-
-    /* Allocate a suitable buffer */
-    result = whd_host_buffer_get(whd_driver, buffer, WHD_NETWORK_RX,
-                                 (unsigned short)(whd_gspi_bytes_pending + WHD_BUS_GSPI_PACKET_OVERHEAD), WHD_FALSE);
-
-    if (result != WHD_SUCCESS)
-    {
-        /* Read out the first 12 bytes to get the bus credit information */
-        uint8_t temp_buffer[12 + MAX_BUS_HEADER_SIZE];
-        CHECK_RETURN(whd_bus_spi_transfer_bytes(whd_driver, BUS_READ, WLAN_FUNCTION, 0, 12,
-                                                (whd_transfer_bytes_packet_t *)temp_buffer) );
-
-        /* Abort the transfer to force the packet to be dropped */
-        if (whd_gspi_bytes_pending > 12)
-        {
-            CHECK_RETURN(whd_bus_spi_write_register_value(whd_driver, BACKPLANE_FUNCTION, SPI_FRAME_CONTROL, 1,
-                                                          (1 << 0) ) );
-        }
-
-        /* Process bus data credit information */
-        whd_sdpcm_update_credit(whd_driver, (uint8_t *)(temp_buffer + sizeof(whd_bus_header_t) ) );
-        WPRINT_WHD_ERROR( ("Packet buffer allocation failed in %s at %d \n", __func__, __LINE__) );
-        return result;
-    }
-
-    result = whd_bus_spi_transfer_buffer(whd_driver, BUS_READ, WLAN_FUNCTION, 0, *buffer);
-    if (result != WHD_SUCCESS)
-    {
-        CHECK_RETURN(whd_buffer_release(whd_driver, *buffer, WHD_NETWORK_RX) );
-        WPRINT_WHD_ERROR( ("SPI buffer transfer failed in %s at %d \n", __func__, __LINE__) );
-        return result;
-    }
-
-    DELAYED_BUS_RELEASE_SCHEDULE (whd_driver, WHD_TRUE);
-    return WHD_SUCCESS;
-}
-
-whd_result_t whd_bus_spi_init(whd_driver_t whd_driver)
-{
-    uint32_t data = 0;
-    uint32_t whd_bus_gspi_status;
-    uint16_t data16 = 0;
-    uint32_t loop_count;
-    whd_result_t result;
-    uint8_t init_data[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
-    uint32_t interrupt_polarity = 0;
-    uint16_t chip_id;
-    size_t transfer_size = 12;
-    whd_oob_config_t *config = &whd_driver->bus_priv->spi_config.oob_config;
-
-    whd_driver->bus_gspi_32bit = WHD_FALSE;
-
-    if (config->is_falling_edge == WHD_FALSE)
-        interrupt_polarity = INTERRUPT_POLARITY_HIGH;
-
-    whd_bus_init_backplane_window(whd_driver);
-
-    whd_bus_gspi_header_t *gspi_header = (whd_bus_gspi_header_t *)init_data;
-
-    /* Due to an chip issue, the first transfer will be corrupted.
-     * This means a repeated safe read of a known value register is required until
-     * the correct value is returned - signalling the bus is running.
-     * This known value register must be accessed using fixed (non-incrementing) address
-     * mode, hence a custom packet header must be constructed
-     * Due to the chip issue, the data received could be left shifted by one bit.
-     */
-    loop_count = 0;
-    do
-    {
-        /* Header needs to calculated every time as init_data gets modified in cyhal_spi_transfer() */
-        *gspi_header =
-            ( whd_bus_gspi_header_t )SWAP32_16BIT_PARTS(SWAP32( (uint32_t)( (whd_bus_gspi_command_mapping[(int)BUS_READ]
-                                                                             & 0x1) << 31 ) |
-                                                                (uint32_t)( (GSPI_FIXED_ADDRESS & 0x1) << 30 ) |
-                                                                (uint32_t)( (BUS_FUNCTION & 0x3) << 28 ) |
-                                                                (uint32_t)( (SPI_READ_TEST_REGISTER & 0x1FFFFu) <<
-                                                                            11 ) |
-                                                                (uint32_t)( (4u /*size*/ & 0x7FFu) << 0 ) ) );
-        CHECK_RETURN(cyhal_spi_transfer(whd_driver->bus_priv->spi_obj, NULL, 0, init_data, transfer_size, 0) );
-        loop_count++;
-    } while ( (NULL == memchr(&init_data[4], SPI_READ_TEST_REG_LSB, (size_t)8) ) &&
-              (NULL == memchr(&init_data[4], SPI_READ_TEST_REG_LSB_SFT1, (size_t)8) ) &&
-              (NULL == memchr(&init_data[4], SPI_READ_TEST_REG_LSB_SFT2, (size_t)8) ) &&
-              (NULL == memchr(&init_data[4], SPI_READ_TEST_REG_LSB_SFT3, (size_t)8) ) &&
-              (loop_count < ( uint32_t )FEADBEAD_TIMEOUT_MS) &&
-              (cy_rtos_delay_milliseconds( (uint32_t)1 ), (1 == 1) ) );
-
-    /* Register interrupt handler */
-    whd_bus_spi_irq_register(whd_driver);
-    /* Enable SPI IRQ */
-    whd_bus_spi_irq_enable(whd_driver, WHD_TRUE);
-
-    /* Keep/reset defaults for registers 0x0-0x4 except for, 0x0: Change word length to 32bit,
-     * set endianness, enable wakeup. 0x2: enable interrupt with status. */
-#if defined(IL_BIGENDIAN)
-    CHECK_RETURN(whd_bus_spi_write_register_value(whd_driver, BUS_FUNCTION, SPI_BUS_CONTROL, (uint8_t)4,
-                                                  (uint32_t)(WORD_LENGTH_32 | (0 & ENDIAN_BIG) |
-                                                             (interrupt_polarity & INTERRUPT_POLARITY_HIGH) | WAKE_UP |
-                                                             (0x4 << (8 * SPI_RESPONSE_DELAY) ) |
-                                                             ( (0 & STATUS_ENABLE) << (8 * SPI_STATUS_ENABLE) ) |
-                                                             (INTR_WITH_STATUS << (8 * SPI_STATUS_ENABLE) ) ) ) );
-#else
-    CHECK_RETURN(whd_bus_spi_write_register_value(whd_driver, BUS_FUNCTION, SPI_BUS_CONTROL, (uint8_t)4,
-                                                  ( uint32_t )(WORD_LENGTH_32 | ENDIAN_BIG |
-                                                               (interrupt_polarity & INTERRUPT_POLARITY_HIGH) |
-                                                               WAKE_UP | (0x4 << (8 * SPI_RESPONSE_DELAY) ) |
-                                                               ( (0 & STATUS_ENABLE) << (8 * SPI_STATUS_ENABLE) ) |
-                                                               (INTR_WITH_STATUS << (8 * SPI_STATUS_ENABLE) ) ) ) );
-#endif
-    whd_driver->bus_gspi_32bit = WHD_TRUE;
-    CHECK_RETURN(whd_bus_spi_read_register_value(whd_driver, BUS_FUNCTION, SPI_BUS_CONTROL, (uint8_t)4,
-                                                 (uint8_t *)&data) );
-
-    if (whd_driver->bus_priv->spi_config.is_spi_normal_mode)
-    {
-        /* Reset host SPI interface to re-sync */
-        /*host_platform_bus_init( );*/
-    }
-
-    /* Check feedbead can be read - i.e. the device is alive */
-    data = 0;
-    CHECK_RETURN(whd_bus_spi_read_register_value(whd_driver, BUS_FUNCTION, SPI_READ_TEST_REGISTER, (uint8_t)4,
-                                                 (uint8_t *)&data) );
-
-    if (data != SPI_READ_TEST_REGISTER_VALUE)
-    {
-        WPRINT_WHD_ERROR( ("Read %x, instead of 0xFEEDBEAD from the WLAN chip\n", (unsigned int)data) );
-        return WHD_SPI_ID_READ_FAIL;
-    }
-
-    /* Make sure error interrupt bits are clear */
-    CHECK_RETURN(whd_bus_spi_write_register_value(whd_driver, BUS_FUNCTION, SPI_INTERRUPT_REGISTER, (uint8_t)1,
-                                                  ( uint32_t )(DATA_UNAVAILABLE | COMMAND_ERROR | DATA_ERROR |
-                                                               F1_OVERFLOW) ) );
-
-    /* Enable a selection of interrupts */
-    CHECK_RETURN(whd_bus_spi_write_register_value(whd_driver, BUS_FUNCTION, SPI_INTERRUPT_ENABLE_REGISTER, (uint8_t)2,
-                                                  ( uint32_t )(F2_F3_FIFO_RD_UNDERFLOW | F2_F3_FIFO_WR_OVERFLOW |
-                                                               COMMAND_ERROR | DATA_ERROR | F2_PACKET_AVAILABLE |
-                                                               F1_OVERFLOW) ) );
-
-    /* Request ALP */
-    CHECK_RETURN(whd_bus_spi_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_CHIP_CLOCK_CSR, (uint8_t)1,
-                                                  SBSDIO_ALP_AVAIL_REQ) );
-
-    /* Wait until ALP is available */
-    loop_count = 0;
-    while ( ( (result = whd_bus_spi_read_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_CHIP_CLOCK_CSR, (uint8_t)2,
-                                                        (uint8_t *)&data16) ) == WHD_SUCCESS ) &&
-            ( (data16 & SBSDIO_ALP_AVAIL) == 0 ) &&
-            (loop_count < ( uint32_t )ALP_AVAIL_TIMEOUT_MS) )
-    {
-        cy_rtos_delay_milliseconds( (uint32_t)1 );
-        loop_count++;
-    }
-    if (loop_count >= ( uint32_t )ALP_AVAIL_TIMEOUT_MS)
-    {
-        WPRINT_WHD_ERROR( ("ALP Clock timeout\n") );
-        return WHD_TIMEOUT;
-    }
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Can't read SDIO_CHIP_CLOCK_CSR\n") );
-        return result;
-    }
-
-    /* Clear request for ALP */
-    CHECK_RETURN(whd_bus_spi_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_CHIP_CLOCK_CSR, (uint8_t)1,
-                                                  (uint32_t)0) );
-
-    /* Read the chip id */
-    CHECK_RETURN(whd_bus_spi_read_backplane_value(whd_driver, CHIPCOMMON_BASE_ADDRESS, 2, (uint8_t *)&chip_id) );
-    whd_chip_set_chip_id(whd_driver, chip_id);
-
-    /* Download the firmware */
-    result = whd_spi_download_firmware(whd_driver);
-
-    /* user abort */
-    if (result == WHD_UNFINISHED)
-    {
-        /* host_platform_reset_wifi (WHD_TRUE); */
-        /* host_platform_power_wifi (WHD_FALSE); */
-        WPRINT_WHD_ERROR( ("User aborted download of firmware\n") );
-        return result;
-    }
-
-    /* non user abort error */
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Could not download firmware\n") );
-        return result;
-    }
-    /* else, successfully downloaded the firmware; continue with waiting for WIFi to live */
-
-    /* Wait for F2 to be ready */
-    loop_count = 0;
-    while ( ( (result = whd_bus_spi_read_register_value(whd_driver, BUS_FUNCTION, SPI_STATUS_REGISTER, (uint8_t)4,
-                                                        (uint8_t *)&whd_bus_gspi_status) ) == WHD_SUCCESS ) &&
-            ( (whd_bus_gspi_status & (1 << 5) ) == 0 ) &&
-            (loop_count < ( uint32_t )F2_READY_TIMEOUT_MS) )
-    {
-        cy_rtos_delay_milliseconds( (uint32_t)1 );
-        loop_count++;
-    }
-    if (loop_count >= ( uint32_t )F2_READY_TIMEOUT_MS)
-    {
-        /* If your system fails here, it could be due to incorrect NVRAM variables.
-         * Check which 'wifi_nvram_image.h' file your platform is using, and
-         * check that it matches the WLAN device on your platform, including the
-         * crystal frequency.
-         */
-        WPRINT_WHD_ERROR( ("Timeout while waiting for function 2 to be ready\n") );
-        return WHD_TIMEOUT;
-    }
-
-    CHECK_RETURN(whd_chip_specific_init(whd_driver) );
-    CHECK_RETURN(whd_ensure_wlan_bus_is_up(whd_driver) );
-
-    return result;
-}
-
-whd_result_t whd_bus_spi_deinit(whd_driver_t whd_driver)
-{
-    CHECK_RETURN(whd_allow_wlan_bus_to_sleep(whd_driver) );
-
-    /* put device in reset. */
-    //host_platform_reset_wifi (WHD_TRUE);
-    whd_bus_set_resource_download_halt(whd_driver, WHD_FALSE);
-    DELAYED_BUS_RELEASE_SCHEDULE (whd_driver, WHD_FALSE);
-    return WHD_SUCCESS;
-}
-
-whd_bool_t whd_bus_spi_wake_interrupt_present(whd_driver_t whd_driver)
-{
-    /* functionality is only currently needed and present on SDIO */
-    return WHD_FALSE;
-}
-
-whd_result_t whd_bus_spi_wait_for_wlan_event(whd_driver_t whd_driver, cy_semaphore_t *transceive_semaphore)
-{
-    whd_result_t result = WHD_SUCCESS;
-    uint32_t timeout_ms = 1;
-    uint32_t delayed_release_timeout_ms;
-
-    REFERENCE_DEBUG_ONLY_VARIABLE(result);
-
-    delayed_release_timeout_ms = whd_bus_handle_delayed_release(whd_driver);
-    if (delayed_release_timeout_ms != 0)
-    {
-        timeout_ms = delayed_release_timeout_ms;
-    }
-    else
-    {
-        result = whd_allow_wlan_bus_to_sleep(whd_driver);
-        whd_assert("Error setting wlan sleep", (result == WHD_SUCCESS) || (result == WHD_PENDING) );
-
-        if (result == WHD_SUCCESS)
-        {
-            timeout_ms = CY_RTOS_NEVER_TIMEOUT;
-        }
-    }
-
-    /* Check if we have run out of bus credits */
-    if (whd_sdpcm_get_available_credits(whd_driver) == 0)
-    {
-        /* Keep poking the WLAN until it gives us more credits */
-        result = whd_bus_spi_poke_wlan(whd_driver);
-        whd_assert("Poking failed!", result == WHD_SUCCESS);
-
-        result = cy_rtos_get_semaphore(transceive_semaphore, (uint32_t)MIN_OF(timeout_ms,
-                                                                              WHD_THREAD_POKE_TIMEOUT), WHD_FALSE);
-    }
-    else
-    {
-        result = cy_rtos_get_semaphore(transceive_semaphore, (uint32_t)MIN_OF(timeout_ms,
-                                                                              WHD_THREAD_POLL_TIMEOUT), WHD_FALSE);
-    }
-    whd_assert("Could not get whd sleep semaphore\n", (result == CY_RSLT_SUCCESS) || (result == CY_RTOS_TIMEOUT) );
-
-    return result;
-}
-
-/******************************************************
-*     Function definitions for Protocol Common
-******************************************************/
-
-/*
- * Write a value to a register NOT on the backplane
- * Prerequisites: value_length <= 4
- */
-whd_result_t whd_bus_spi_write_register_value(whd_driver_t whd_driver, whd_bus_function_t function, uint32_t address,
-                                              uint8_t value_length, uint32_t value)
-{
-    char gspi_internal_buffer[MAX_BUS_HEADER_SIZE + sizeof(uint32_t) + sizeof(uint32_t)];
-    whd_transfer_bytes_packet_t *internal_gspi_packet = (whd_transfer_bytes_packet_t *)gspi_internal_buffer;
-
-    /* Flip the bytes if we're not in 32 bit mode */
-    if (whd_driver->bus_gspi_32bit == WHD_FALSE)
-    {
-        value = H32TO16LE(value);
-    }
-    /* Write the value and value_length into the packet */
-    internal_gspi_packet->data[0] = value;
-
-    /* Send it off */
-    return whd_bus_spi_transfer_bytes(whd_driver, BUS_WRITE, function, address, value_length, internal_gspi_packet);
-}
-
-/*
- * Read the value of a register NOT on the backplane
- * Prerequisites: value_length <= 4
- */
-whd_result_t whd_bus_spi_read_register_value(whd_driver_t whd_driver, whd_bus_function_t function, uint32_t address,
-                                             uint8_t value_length, uint8_t *value)
-{
-    uint32_t *data_ptr;
-    whd_result_t result;
-    uint8_t padding = 0;
-
-    char gspi_internal_buffer[MAX_BUS_HEADER_SIZE + sizeof(uint32_t) + sizeof(uint32_t)];
-
-    /* Clear the receiving part of memory and set the value_length */
-    if (function == BACKPLANE_FUNCTION)
-    {
-        gspi_backplane_f1_read_packet_t *pkt =
-            (gspi_backplane_f1_read_packet_t *)(gspi_internal_buffer + MAX_BUS_HEADER_SIZE -
-                                                sizeof(whd_bus_gspi_header_t) );
-        data_ptr = pkt->data;
-        padding = 4;   /* Add response delay */
-    }
-    else
-    {
-        whd_transfer_bytes_packet_t *pkt = (whd_transfer_bytes_packet_t *)gspi_internal_buffer;
-        DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-        data_ptr = pkt->data;
-        ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-    }
-
-    *data_ptr = 0;
-    result =
-        whd_bus_spi_transfer_bytes(whd_driver, BUS_READ, function, address, ( uint16_t )(value_length + padding),
-                                   (whd_transfer_bytes_packet_t *)gspi_internal_buffer);
-
-    memcpy(value, data_ptr, value_length);
-
-    return result;
-}
-
-/*
- * Write a value to a register on the backplane
- * Prerequisites: value_length <= 4
- */
-whd_result_t whd_bus_spi_write_backplane_value(whd_driver_t whd_driver, uint32_t address, uint8_t register_length,
-                                               uint32_t value)
-{
-    CHECK_RETURN(whd_bus_set_backplane_window(whd_driver, address) );
-
-    address &= SBSDIO_SB_OFT_ADDR_MASK;
-
-    if (register_length == 4)
-        address |= SBSDIO_SB_ACCESS_2_4B_FLAG;
-
-    return whd_bus_spi_write_register_value(whd_driver, BACKPLANE_FUNCTION, address, register_length, value);
-}
-
-/*
- * Read the value of a register on the backplane
- * Prerequisites: value_length <= 4
- */
-whd_result_t whd_bus_spi_read_backplane_value(whd_driver_t whd_driver, uint32_t address, uint8_t register_length,
-                                              uint8_t *value)
-{
-    *value = 0;
-    CHECK_RETURN(whd_bus_set_backplane_window(whd_driver, address) );
-
-    address &= SBSDIO_SB_OFT_ADDR_MASK;
-
-    if (register_length == 4)
-        address |= SBSDIO_SB_ACCESS_2_4B_FLAG;
-
-    return whd_bus_spi_read_register_value(whd_driver, BACKPLANE_FUNCTION, address, register_length, value);
-}
-
-whd_result_t whd_bus_spi_transfer_bytes(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                        whd_bus_function_t function, uint32_t address, uint16_t size,
-                                        whd_transfer_bytes_packet_t *packet)
-{
-    uint32_t *temp;
-    whd_result_t result;
-    uint16_t newsize;
-    DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-    whd_bus_gspi_header_t *gspi_header =
-        (whd_bus_gspi_header_t *)( (char *)packet->data - sizeof(whd_bus_gspi_header_t) );
-    ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-    size_t transfer_size;
-    *gspi_header =
-        ( whd_bus_gspi_header_t )( ( uint32_t )( (whd_bus_gspi_command_mapping[(int)direction] & 0x1) << 31 ) |
-                                   ( uint32_t )( (GSPI_INCREMENT_ADDRESS & 0x1) << 30 ) |
-                                   ( uint32_t )( (function & 0x3) << 28 ) |
-                                   ( uint32_t )( (address & 0x1FFFF) << 11 ) | ( uint32_t )( (size & 0x7FF) << 0 ) );
-
-    /* Reshuffle the bits if we're not in 32 bit mode */
-    if (whd_driver->bus_gspi_32bit == WHD_FALSE)
-    {
-        /* Note: This typecast should always be valid if the buffer
-         * containing the GSpi packet has been correctly declared as 32-bit aligned */
-        temp = (uint32_t *)gspi_header;
-        *temp = H32TO16LE(*temp);
-    }
-
-    /* Round size up to 32-bit alignment */
-    newsize = (uint16_t)ROUND_UP(size, 4);
-
-    /* Ensure we are clear to write */
-    if ( (direction == BUS_WRITE) && (function == WLAN_FUNCTION) )
-    {
-        uint32_t whd_bus_gspi_status;
-        uint32_t loop_count = 0;
-
-        /* Verify the SDPCM size and stated size match */
-        DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-        uint16_t *frametag_ptr = (uint16_t *)&packet->data;
-        ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-        if (size != *frametag_ptr)
-        {
-            WPRINT_WHD_DEBUG( ("Error - gSPI size does not match SDPCM size!\n") );
-            return WHD_SPI_SIZE_MISMATCH;
-        }
-
-        /* Wait for WLAN FIFO to be ready to accept data */
-        while ( ( (result =
-                       whd_bus_spi_read_register_value(whd_driver, BUS_FUNCTION, SPI_STATUS_REGISTER, (uint8_t)4,
-                                                       (uint8_t *)&whd_bus_gspi_status) ) == WHD_SUCCESS ) &&
-                ( (whd_bus_gspi_status & (1 << 5) ) == 0 ) &&
-                (loop_count < ( uint32_t )F2_READY_TIMEOUT_LOOPS) )
-        {
-            ++loop_count;
-        }
-
-        if (result != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("Failed to read SPI register value in %s at %d \n", __func__, __LINE__) );
-            return result;
-        }
-
-        if (loop_count >= ( uint32_t )F2_READY_TIMEOUT_LOOPS)
-        {
-            WPRINT_WHD_DEBUG( ("Timeout waiting for data FIFO to be ready\n") );
-            return WHD_TIMEOUT;
-        }
-
-    }
-
-    transfer_size = (size_t)(newsize + sizeof(whd_bus_gspi_header_t) );
-
-    /* Send the data */
-    if (direction == BUS_READ)
-    {
-        result = cyhal_spi_transfer(whd_driver->bus_priv->spi_obj, NULL, 0, (uint8_t *)gspi_header,
-                                    transfer_size, 0);
-    }
-    else
-    {
-        result = cyhal_spi_transfer(whd_driver->bus_priv->spi_obj, (uint8_t *)gspi_header, transfer_size, NULL,
-                                    0, 0);
-    }
-
-    CHECK_RETURN(result);
-    return WHD_SUCCESS;
-}
-
-/******************************************************
-*             Static  Function definitions
-******************************************************/
-
-static whd_result_t whd_spi_download_firmware(whd_driver_t whd_driver)
-{
-    uint8_t csr_val;
-    whd_result_t result;
-    uint32_t loop_count = 0;
-
-    CHECK_RETURN(whd_disable_device_core(whd_driver, WLAN_ARM_CORE, WLAN_CORE_FLAG_NONE) );
-    CHECK_RETURN(whd_disable_device_core(whd_driver, SOCRAM_CORE, WLAN_CORE_FLAG_NONE) );
-    CHECK_RETURN(whd_reset_device_core(whd_driver, SOCRAM_CORE, WLAN_CORE_FLAG_NONE) );
-
-    CHECK_RETURN(whd_chip_specific_socsram_init(whd_driver) );
-
-    CHECK_RETURN(whd_bus_write_wifi_firmware_image(whd_driver) );
-    CHECK_RETURN(whd_bus_write_wifi_nvram_image(whd_driver) );
-
-    /* Take the ARM core out of reset */
-    CHECK_RETURN(whd_reset_device_core(whd_driver, WLAN_ARM_CORE, WLAN_CORE_FLAG_NONE) );
-    result = whd_device_core_is_up(whd_driver, WLAN_ARM_CORE);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Could not bring ARM core up\n") );
-        return result;
-    }
-
-    /* Wait until the HT clock is available */
-    while ( ( (result =
-                   whd_bus_spi_read_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_CHIP_CLOCK_CSR, (uint8_t)1,
-                                                   &csr_val) ) == WHD_SUCCESS ) &&
-            ( (csr_val & SBSDIO_HT_AVAIL) == 0 ) &&
-            (loop_count < ( uint32_t )HT_AVAIL_TIMEOUT_MS) )
-    {
-        cy_rtos_delay_milliseconds( (uint32_t)1 );
-        loop_count++;
-    }
-    if (loop_count >= ( uint32_t )HT_AVAIL_TIMEOUT_MS)
-    {
-        return WHD_TIMEOUT;
-    }
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("HT clock not available\n") );
-        return result;
-    }
-
-    /* Set up the interrupt mask and enable interrupts */
-    CHECK_RETURN(whd_bus_spi_write_backplane_value(whd_driver, SDIO_INT_HOST_MASK, (uint8_t)4, I_HMB_SW_MASK) );
-
-    /* Lower F2 Watermark to avoid DMA Hang in F2 when SD Clock is stopped. */
-    return whd_bus_spi_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_FUNCTION2_WATERMARK, (uint8_t)1,
-                                            ( uint32_t )SPI_F2_WATERMARK);
-}
-
-whd_result_t whd_bus_spi_wakeup(whd_driver_t whd_driver)
-{
-    uint32_t spi_bus_reg_value;
-
-    /* Wake up WLAN SPI interface module */
-    CHECK_RETURN(whd_bus_spi_read_register_value(whd_driver, BUS_FUNCTION, SPI_BUS_CONTROL, sizeof(uint32_t),
-                                                 (uint8_t *)&spi_bus_reg_value) );
-    spi_bus_reg_value |= ( uint32_t )(WAKE_UP);
-    return whd_bus_spi_write_register_value(whd_driver, BUS_FUNCTION, SPI_BUS_CONTROL, sizeof(uint32_t),
-                                            spi_bus_reg_value);
-}
-
-whd_result_t whd_bus_spi_sleep(whd_driver_t whd_driver)
-{
-    uint32_t spi_bus_reg_value;
-
-    /* Put SPI interface block to sleep */
-    CHECK_RETURN(whd_bus_spi_read_register_value(whd_driver, BUS_FUNCTION, SPI_BUS_CONTROL, sizeof(uint32_t),
-                                                 (uint8_t *)&spi_bus_reg_value) );
-    spi_bus_reg_value &= ~( uint32_t )(WAKE_UP);
-    return whd_bus_spi_write_register_value(whd_driver, BUS_FUNCTION, SPI_BUS_CONTROL, sizeof(uint32_t),
-                                            spi_bus_reg_value);
-}
-
-void whd_bus_spi_init_stats(whd_driver_t whd_driver)
-{
-
-}
-
-whd_result_t whd_bus_spi_print_stats(whd_driver_t whd_driver, whd_bool_t reset_after_print)
-{
-    return WHD_TRUE;
-}
-
-/* Waking the firmware up from Deep Sleep */
-whd_result_t whd_bus_spi_reinit_stats(whd_driver_t whd_driver, whd_bool_t wake_from_firmware)
-{
-    return WHD_TRUE;
-}
-
-uint8_t whd_bus_spi_backplane_read_padd_size(whd_driver_t whd_driver)
-{
-    return WHD_BUS_SPI_BACKPLANE_READ_PADD_SIZE;
-}
-
-whd_bool_t whd_bus_spi_use_status_report_scheme(whd_driver_t whd_driver)
-{
-    return WHD_FALSE;
-}
-
-uint32_t whd_bus_spi_get_max_transfer_size(whd_driver_t whd_driver)
-{
-    return WHD_BUS_SPI_MAX_BACKPLANE_TRANSFER_SIZE;
-}
-
-static void whd_bus_spi_oob_irq_handler(void *arg, cyhal_gpio_irq_event_t event)
-{
-    whd_driver_t whd_driver = (whd_driver_t)arg;
-    const whd_oob_config_t *config = &whd_driver->bus_priv->spi_config.oob_config;
-    const cyhal_gpio_irq_event_t expected_event = (config->is_falling_edge == WHD_TRUE)
-                                                  ? CYHAL_GPIO_IRQ_FALL : CYHAL_GPIO_IRQ_RISE;
-
-    if (event != expected_event)
-    {
-        WPRINT_WHD_ERROR( ("Unexpected interrupt event %d\n", event) );
-
-        return;
-    }
-
-    /* call thread notify to wake up WHD thread */
-    whd_thread_notify_irq(whd_driver);
-}
-
-/* XXX FIXME */
-#define WLAN_INTR_PRIORITY 1
-whd_result_t whd_bus_spi_irq_register(whd_driver_t whd_driver)
-{
-    const whd_oob_config_t *config = &whd_driver->bus_priv->spi_config.oob_config;
-
-    cyhal_gpio_init(config->host_oob_pin, CYHAL_GPIO_DIR_INPUT, CYHAL_GPIO_DRIVE_ANALOG, 0);
-    cyhal_gpio_register_irq(config->host_oob_pin, WLAN_INTR_PRIORITY, whd_bus_spi_oob_irq_handler,
-                            whd_driver);
-
-    return WHD_TRUE;
-}
-
-whd_result_t whd_bus_spi_irq_enable(whd_driver_t whd_driver, whd_bool_t enable)
-{
-    const whd_oob_config_t *config = &whd_driver->bus_priv->spi_config.oob_config;
-    const cyhal_gpio_irq_event_t event =
-        (config->is_falling_edge == WHD_TRUE) ? CYHAL_GPIO_IRQ_FALL : CYHAL_GPIO_IRQ_RISE;
-
-    cyhal_gpio_irq_enable(config->host_oob_pin, event, (enable == WHD_TRUE) ? true : false);
-
-    return WHD_TRUE;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_spi_protocol.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_spi_protocol.h
deleted file mode 100644
index 1be7b0e075..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_bus_spi_protocol.h
+++ /dev/null
@@ -1,101 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "whd.h"
-#include "whd_bus_protocol_interface.h"
-#include "cy_result.h"
-#include "cyhal_spi.h"
-
-#ifndef INCLUDED_SPI_WHD_BUS_PROTOCOL_H
-#define INCLUDED_SPI_WHD_BUS_PROTOCOL_H
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/******************************************************
-*             Constants
-******************************************************/
-
-/******************************************************
-*             Structures
-******************************************************/
-
-typedef uint32_t whd_bus_gspi_header_t;
-
-#pragma pack(1)
-
-typedef struct
-{
-    whd_bus_gspi_header_t gspi_header;
-} whd_bus_header_t;
-
-#pragma pack()
-
-#define WHD_BUS_SPI_HEADER_SIZE                     (sizeof(whd_bus_header_t) )
-
-#define WHD_BUS_SPI_USE_STATUS_REPORT_SCHEME        (1 == 1)
-
-#define WHD_BUS_SPI_MAX_BACKPLANE_TRANSFER_SIZE     (64)  /* Max packet size on F1 */
-#define WHD_BUS_SPI_BACKPLANE_READ_PADD_SIZE        (4)
-
-/******************************************************
-*             Function declarations
-******************************************************/
-extern whd_result_t whd_bus_spi_send_buffer(whd_driver_t whd_driver, whd_buffer_t buffer);
-extern whd_result_t whd_bus_spi_poke_wlan(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_spi_ack_interrupt(whd_driver_t whd_driver, uint32_t intstatus);
-extern uint32_t whd_bus_spi_packet_available_to_read(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_spi_read_frame(whd_driver_t whd_driver, whd_buffer_t *buffer);
-extern whd_result_t whd_bus_spi_init(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_spi_deinit(whd_driver_t whd_driver);
-extern whd_bool_t whd_bus_spi_wake_interrupt_present(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_spi_wait_for_wlan_event(whd_driver_t whd_driver,
-                                                    cy_semaphore_t *transceive_semaphore);
-extern whd_result_t whd_bus_spi_write_register_value(whd_driver_t whd_driver, whd_bus_function_t function,
-                                                     uint32_t address, uint8_t value_length, uint32_t value);
-extern whd_result_t whd_bus_spi_read_register_value(whd_driver_t whd_driver, whd_bus_function_t function,
-                                                    uint32_t address, uint8_t value_length, uint8_t *value);
-extern whd_result_t whd_bus_spi_write_backplane_value(whd_driver_t whd_driver, uint32_t address,
-                                                      uint8_t register_length, uint32_t value);
-extern whd_result_t whd_bus_spi_read_backplane_value(whd_driver_t whd_driver, uint32_t address, uint8_t register_length,
-                                                     uint8_t *value);
-extern whd_result_t whd_bus_spi_transfer_bytes(whd_driver_t whd_driver, whd_bus_transfer_direction_t direction,
-                                               whd_bus_function_t function, uint32_t address, uint16_t size,
-                                               whd_transfer_bytes_packet_t *packet);
-extern whd_result_t whd_bus_spi_wakeup(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_spi_sleep(whd_driver_t whd_driver);
-extern void whd_bus_spi_init_stats(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_spi_print_stats(whd_driver_t whd_driver, whd_bool_t reset_after_print);
-extern whd_result_t whd_bus_spi_reinit_stats(whd_driver_t whd_driver, whd_bool_t wake_from_firmware);
-extern uint8_t whd_bus_spi_backplane_read_padd_size(whd_driver_t whd_driver);
-extern whd_bool_t whd_bus_spi_use_status_report_scheme(whd_driver_t whd_driver);
-extern uint32_t whd_bus_spi_get_max_transfer_size(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_spi_irq_register(whd_driver_t whd_driver);
-extern whd_result_t whd_bus_spi_irq_enable(whd_driver_t whd_driver, whd_bool_t enable);
-extern void whd_bus_spi_irq_handler(void *handler_arg, cyhal_spi_irq_event_t event);
-
-/******************************************************
-*             Global variables
-******************************************************/
-
-#ifdef __cplusplus
-} /*extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_SPI_WHD_BUS_PROTOCOL_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_chip_reg.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_chip_reg.h
deleted file mode 100644
index 64a4f88182..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_chip_reg.h
+++ /dev/null
@@ -1,114 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef INCLUDED_WHD_CHIP_REG_H_
-#define INCLUDED_WHD_CHIP_REG_H_
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/******************************************************
-*             Architecture Constants
-******************************************************/
-
-/* D11 registers and SHM */
-#define D11_BASE_ADDR           0x18001000
-#define D11_AXI_BASE_ADDR       0xE8000000
-#define D11_SHM_BASE_ADDR       (D11_AXI_BASE_ADDR + 0x4000)
-
-#define D11REG_ADDR(offset)     (D11_BASE_ADDR + offset)
-#define D11IHR_ADDR(offset)     (D11_AXI_BASE_ADDR + 0x400 + (2 * offset) )
-#define D11SHM_ADDR(offset)     (D11_SHM_BASE_ADDR + offset)
-
-#define M_DS1_CTRL_STATUS               (0xe0b * 2)
-
-/* RMC operational modes */
-enum ds1_ctrl_status
-{
-    DS1_SLEEP               = 0, /* DS1_SLEEP  */
-    MAC_ON                  = 1, /* MAC_ON */
-    RADIO_PHY_ON            = 2, /* RADIO_PHY_ON  */
-    DS1_EXIT                = 3  /* DS1_EXIT.*/
-};
-
-#define M_DS1_CTRL_SDIO                 (0xe0c * 2)
-
-#define C_DS1_CTRL_SDIO_DS1_SLEEP       (1 << 0)
-#define C_DS1_CTRL_SDIO_MAC_ON          (1 << 1)
-#define C_DS1_CTRL_SDIO_RADIO_PHY_ON    (1 << 2)
-#define C_DS1_CTRL_SDIO_DS1_EXIT        (1 << 3)
-#define C_DS1_CTRL_PROC_DONE            (1 << 8)
-#define C_DS1_CTRL_REQ_VALID            (1 << 9)
-/* MacControl register */
-#define D11_MACCONTROL_REG          D11REG_ADDR(0x120)
-#define D11_MACCONTROL_REG_SIZE     4
-#define D11_MACCONTROL_REG_WAKE     (1 << 26)
-#define D11_MACCONTROL_CLEAR_WAKE     (0xFBFFFFFF)
-#define PMU_MINRESMASK              (PMU_BASE_ADDRESS + 0x618)
-#define DEFAULT_43012_MIN_RES_MASK   0x0f8bfe77
-
-/* Backplane architecture */
-#define CHIPCOMMON_BASE_ADDRESS  0x18000000   /* Chipcommon core register region   */
-#define I2S0_BASE_ADDRESS        0x18001000   /* I2S0 core register region     */
-#define I2S1_BASE_ADDRESS        0x18002000   /* I2S1 core register region     */
-#define APPS_ARMCR4_BASE_ADDRESS 0x18003000   /* Apps Cortex-R4 core register region     */
-#define DMA_BASE_ADDRESS         0x18004000   /* DMA core register region     */
-#define GMAC_BASE_ADDRESS        0x18005000   /* GMAC core register region     */
-#define USB20H0_BASE_ADDRESS     0x18006000   /* USB20H0 core register region     */
-#define USB20D_BASE_ADDRESS      0x18007000   /* USB20D core register region     */
-#define SDIOH_BASE_ADDRESS       0x18008000   /* SDIOH Device core register region */
-#define WLAN_ARMCM3_BASE_ADDRESS 0x18003000   /* ARMCM3 core register region       */
-#define PMU_BASE_ADDRESS         0x18012000   /* PMU core register region          */
-#define DOT11MAC_BASE_ADDRESS    0x18001000
-#define SDIO_BASE_ADDRESS        0x18002000
-#define SOCSRAM_BASE_ADDRESS     0x18004000
-#define WLAN_ARMCR4_BASE_ADDRESS 0x18003000   /* ARMCR4 core register region       */
-
-#define BACKPLANE_ADDRESS_MASK   0x7FFF
-#define BACKPLANE_WINDOW_SIZE    (BACKPLANE_ADDRESS_MASK + 1)
-
-#define CHIP_STA_INTERFACE   0
-#define CHIP_AP_INTERFACE    1
-#define CHIP_P2P_INTERFACE   2
-
-/* Chipcommon registers */
-#define CHIPCOMMON_CORE_CAPEXT_ADDR  ( (uint32_t)(CHIPCOMMON_BASE_ADDRESS + 0x64c) )
-#define CHIPCOMMON_CORE_CAPEXT_SR_SUPPORTED   ( (uint32_t)(1 << 1) )
-#define CHIPCOMMON_CORE_RCTL_LOGIC_DISABLE   ( (uint32_t)(1 << 27) )
-#define CHIPCOMMON_CORE_RCTL_MACPHY_DISABLE   ( (uint32_t)(1 << 26) )
-#define CHIPCOMMON_CORE_RETENTION_CTL      ( (uint32_t)(CHIPCOMMON_BASE_ADDRESS + 0x670) )
-
-#define CHIPCOMMON_GPIO_CONTROL ( (uint32_t)(CHIPCOMMON_BASE_ADDRESS + 0x6C) )
-#define CHIPCOMMON_SR_CONTROL0        ( (uint32_t)(CHIPCOMMON_BASE_ADDRESS + 0x504) )
-#define CHIPCOMMON_SR_CONTROL1      ( (uint32_t)(CHIPCOMMON_BASE_ADDRESS + 0x508) )
-
-/* SOCSRAM core registers */
-#define SOCSRAM_BANKX_INDEX   ( (uint32_t)(SOCSRAM_BASE_ADDRESS + 0x10) )
-#define SOCSRAM_BANKX_PDA    ( (uint32_t)(SOCSRAM_BASE_ADDRESS + 0x44) )
-
-/* PMU core registers */
-#define RETENTION_CTL           ( (uint32_t)(PMU_BASE_ADDRESS + 0x670) )
-#define RCTL_MACPHY_DISABLE     ( (uint32_t)(1 << 26) )
-#define RCTL_LOGIC_DISABLE      ( (uint32_t)(1 << 27) )
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_WHD_CHIP_REG_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_sdio.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_sdio.h
deleted file mode 100644
index 5ea57f40b4..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_sdio.h
+++ /dev/null
@@ -1,234 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef INCLUDED_WHD_SDIO_H_
-#define INCLUDED_WHD_SDIO_H_
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/******************************************************
-*             SDIO Constants
-******************************************************/
-/* CurrentSdiodProgGuide r23 */
-
-/* Base registers */
-#define SDIO_CORE                    ( (uint32_t)(SDIO_BASE_ADDRESS + 0x00) )
-#define SDIO_INT_STATUS              ( (uint32_t)(SDIO_BASE_ADDRESS + 0x20) )
-#define SDIO_TO_SB_MAILBOX           ( (uint32_t)(SDIO_BASE_ADDRESS + 0x40) )
-#define SDIO_TO_SB_MAILBOX_DATA      ( (uint32_t)(SDIO_BASE_ADDRESS + 0x48) )
-#define SDIO_TO_HOST_MAILBOX_DATA    ( (uint32_t)(SDIO_BASE_ADDRESS + 0x4C) )
-#define SDIO_TO_SB_MAIL_BOX          ( (uint32_t)(SDIO_BASE_ADDRESS + 0x40) )
-#define SDIO_INT_HOST_MASK           ( (uint32_t)(SDIO_BASE_ADDRESS + 0x24) )
-#define SDIO_FUNCTION_INT_MASK       ( (uint32_t)(SDIO_BASE_ADDRESS + 0x34) )
-
-/* SDIO Function 0 (SDIO Bus) register addresses */
-
-/* SDIO Device CCCR offsets */
-/* TODO: What does CIS/CCCR stand for? */
-/* CCCR accesses do not require backpane clock */
-#define SDIOD_CCCR_REV             ( (uint32_t)0x00 )     /* CCCR/SDIO Revision */
-#define SDIOD_CCCR_SDREV           ( (uint32_t)0x01 )     /* SD Revision */
-#define SDIOD_CCCR_IOEN            ( (uint32_t)0x02 )     /* I/O Enable */
-#define SDIOD_CCCR_IORDY           ( (uint32_t)0x03 )     /* I/O Ready */
-#define SDIOD_CCCR_INTEN           ( (uint32_t)0x04 )     /* Interrupt Enable */
-#define SDIOD_CCCR_INTPEND         ( (uint32_t)0x05 )     /* Interrupt Pending */
-#define SDIOD_CCCR_IOABORT         ( (uint32_t)0x06 )     /* I/O Abort */
-#define SDIOD_CCCR_BICTRL          ( (uint32_t)0x07 )     /* Bus Interface control */
-#define SDIOD_CCCR_CAPABLITIES     ( (uint32_t)0x08 )     /* Card Capabilities */
-#define SDIOD_CCCR_CISPTR_0        ( (uint32_t)0x09 )     /* Common CIS Base Address Pointer Register 0 (LSB) */
-#define SDIOD_CCCR_CISPTR_1        ( (uint32_t)0x0A )     /* Common CIS Base Address Pointer Register 1 */
-#define SDIOD_CCCR_CISPTR_2        ( (uint32_t)0x0B )     /* Common CIS Base Address Pointer Register 2 (MSB - only bit 1 valid)*/
-#define SDIOD_CCCR_BUSSUSP         ( (uint32_t)0x0C )     /*  */
-#define SDIOD_CCCR_FUNCSEL         ( (uint32_t)0x0D )     /*  */
-#define SDIOD_CCCR_EXECFLAGS       ( (uint32_t)0x0E )     /*  */
-#define SDIOD_CCCR_RDYFLAGS        ( (uint32_t)0x0F )     /*  */
-#define SDIOD_CCCR_BLKSIZE_0       ( (uint32_t)0x10 )     /* Function 0 (Bus) SDIO Block Size Register 0 (LSB) */
-#define SDIOD_CCCR_BLKSIZE_1       ( (uint32_t)0x11 )     /* Function 0 (Bus) SDIO Block Size Register 1 (MSB) */
-#define SDIOD_CCCR_POWER_CONTROL   ( (uint32_t)0x12 )     /* Power Control */
-#define SDIOD_CCCR_SPEED_CONTROL   ( (uint32_t)0x13 )     /* Bus Speed Select  (control device entry into high-speed clocking mode)  */
-#define SDIOD_CCCR_UHS_I           ( (uint32_t)0x14 )     /* UHS-I Support */
-#define SDIOD_CCCR_DRIVE           ( (uint32_t)0x15 )     /* Drive Strength */
-#define SDIOD_CCCR_INTEXT          ( (uint32_t)0x16 )     /* Interrupt Extension */
-#define SDIOD_CCCR_BRCM_CARDCAP    ( (uint32_t)0xF0 )     /* Brcm Card Capability */
-#define SDIOD_SEP_INT_CTL          ( (uint32_t)0xF2 )     /* Separate Interrupt Control*/
-#define SDIOD_CCCR_F1INFO          ( (uint32_t)0x100 )    /* Function 1 (Backplane) Info */
-#define SDIOD_CCCR_F1HP            ( (uint32_t)0x102 )    /* Function 1 (Backplane) High Power */
-#define SDIOD_CCCR_F1CISPTR_0      ( (uint32_t)0x109 )    /* Function 1 (Backplane) CIS Base Address Pointer Register 0 (LSB) */
-#define SDIOD_CCCR_F1CISPTR_1      ( (uint32_t)0x10A )    /* Function 1 (Backplane) CIS Base Address Pointer Register 1       */
-#define SDIOD_CCCR_F1CISPTR_2      ( (uint32_t)0x10B )    /* Function 1 (Backplane) CIS Base Address Pointer Register 2 (MSB - only bit 1 valid) */
-#define SDIOD_CCCR_F1BLKSIZE_0     ( (uint32_t)0x110 )    /* Function 1 (Backplane) SDIO Block Size Register 0 (LSB) */
-#define SDIOD_CCCR_F1BLKSIZE_1     ( (uint32_t)0x111 )    /* Function 1 (Backplane) SDIO Block Size Register 1 (MSB) */
-#define SDIOD_CCCR_F2INFO          ( (uint32_t)0x200 )    /* Function 2 (WLAN Data FIFO) Info */
-#define SDIOD_CCCR_F2HP            ( (uint32_t)0x202 )    /* Function 2 (WLAN Data FIFO) High Power */
-#define SDIOD_CCCR_F2CISPTR_0      ( (uint32_t)0x209 )    /* Function 2 (WLAN Data FIFO) CIS Base Address Pointer Register 0 (LSB) */
-#define SDIOD_CCCR_F2CISPTR_1      ( (uint32_t)0x20A )    /* Function 2 (WLAN Data FIFO) CIS Base Address Pointer Register 1       */
-#define SDIOD_CCCR_F2CISPTR_2      ( (uint32_t)0x20B )    /* Function 2 (WLAN Data FIFO) CIS Base Address Pointer Register 2 (MSB - only bit 1 valid) */
-#define SDIOD_CCCR_F2BLKSIZE_0     ( (uint32_t)0x210 )    /* Function 2 (WLAN Data FIFO) SDIO Block Size Register 0 (LSB) */
-#define SDIOD_CCCR_F2BLKSIZE_1     ( (uint32_t)0x211 )    /* Function 2 (WLAN Data FIFO) SDIO Block Size Register 1 (MSB) */
-#define SDIOD_CCCR_F3INFO          ( (uint32_t)0x300 )    /* Function 3 (Bluetooth Data FIFO) Info */
-#define SDIOD_CCCR_F3HP            ( (uint32_t)0x302 )    /* Function 3 (Bluetooth Data FIFO) High Power */
-#define SDIOD_CCCR_F3CISPTR_0      ( (uint32_t)0x309 )    /* Function 3 (Bluetooth Data FIFO) CIS Base Address Pointer Register 0 (LSB) */
-#define SDIOD_CCCR_F3CISPTR_1      ( (uint32_t)0x30A )    /* Function 3 (Bluetooth Data FIFO) CIS Base Address Pointer Register 1       */
-#define SDIOD_CCCR_F3CISPTR_2      ( (uint32_t)0x30B )    /* Function 3 (Bluetooth Data FIFO) CIS Base Address Pointer Register 2 (MSB - only bit 1 valid) */
-#define SDIOD_CCCR_F3BLKSIZE_0     ( (uint32_t)0x310 )    /* Function 3 (Bluetooth Data FIFO) SDIO Block Size Register 0 (LSB) */
-#define SDIOD_CCCR_F3BLKSIZE_1     ( (uint32_t)0x311 )    /* Function 3 (Bluetooth Data FIFO) SDIO Block Size Register 1 (MSB) */
-
-
-/* SDIO Function 1 (Backplane) register addresses */
-/* Addresses 0x00000000 - 0x0000FFFF are directly access the backplane
- * throught the backplane window. Addresses above 0x0000FFFF are
- * registers relating to backplane access, and do not require a backpane
- * clock to access them
- */
-#define SDIO_GPIO_SELECT              ( (uint32_t)0x10005 )
-#define SDIO_GPIO_OUTPUT              ( (uint32_t)0x10006 )
-#define SDIO_GPIO_ENABLE              ( (uint32_t)0x10007 )
-#define SDIO_FUNCTION2_WATERMARK      ( (uint32_t)0x10008 )
-#define SDIO_DEVICE_CONTROL           ( (uint32_t)0x10009 )
-#define SDIO_BACKPLANE_ADDRESS_LOW    ( (uint32_t)0x1000A )
-#define SDIO_BACKPLANE_ADDRESS_MID    ( (uint32_t)0x1000B )
-#define SDIO_BACKPLANE_ADDRESS_HIGH   ( (uint32_t)0x1000C )
-#define SDIO_FRAME_CONTROL            ( (uint32_t)0x1000D )
-#define SDIO_CHIP_CLOCK_CSR           ( (uint32_t)0x1000E )
-#define SDIO_PULL_UP                  ( (uint32_t)0x1000F )
-#define SDIO_READ_FRAME_BC_LOW        ( (uint32_t)0x1001B )
-#define SDIO_READ_FRAME_BC_HIGH       ( (uint32_t)0x1001C )
-#define SDIO_WAKEUP_CTRL              ( (uint32_t)0x1001E )
-#define SDIO_SLEEP_CSR                ( (uint32_t)0x1001F )
-#define I_HMB_SW_MASK                 ( (uint32_t)0x000000F0 )
-#define I_HMB_FRAME_IND               (1 << 6)
-#define I_HMB_HOST_INT                (1 << 7)
-#define FRAME_AVAILABLE_MASK          I_HMB_SW_MASK
-
-/******************************************************
-*             Bit Masks
-******************************************************/
-
-/* SDIOD_CCCR_REV Bits */
-#define SDIO_REV_SDIOID_MASK       ( (uint32_t)0xF0 )     /* SDIO spec revision number */
-#define SDIO_REV_CCCRID_MASK       ( (uint32_t)0x0F )     /* CCCR format version number */
-
-/* SDIOD_CCCR_SDREV Bits */
-#define SD_REV_PHY_MASK            ( (uint32_t)0x0F )     /* SD format version number */
-
-/* SDIOD_CCCR_IOEN Bits */
-#define SDIO_FUNC_ENABLE_1         ( (uint32_t)0x02 )     /* function 1 I/O enable */
-#define SDIO_FUNC_ENABLE_2         ( (uint32_t)0x04 )     /* function 2 I/O enable */
-#define SDIO_FUNC_ENABLE_3         ( (uint32_t)0x08 )     /* function 3 I/O enable */
-
-/* SDIOD_CCCR_IORDY Bits */
-#define SDIO_FUNC_READY_1          ( (uint32_t)0x02 )     /* function 1 I/O ready */
-#define SDIO_FUNC_READY_2          ( (uint32_t)0x04 )     /* function 2 I/O ready */
-#define SDIO_FUNC_READY_3          ( (uint32_t)0x08 )     /* function 3 I/O ready */
-
-/* SDIOD_CCCR_INTEN Bits */
-#define INTR_CTL_MASTER_EN         ( (uint32_t)0x01 )     /* interrupt enable master */
-#define INTR_CTL_FUNC1_EN          ( (uint32_t)0x02 )     /* interrupt enable for function 1 */
-#define INTR_CTL_FUNC2_EN          ( (uint32_t)0x04 )     /* interrupt enable for function 2 */
-
-/* SDIOD_SEP_INT_CTL Bits */
-#define SEP_INTR_CTL_MASK          ( (uint32_t)0x01 )     /* out-of-band interrupt mask */
-#define SEP_INTR_CTL_EN            ( (uint32_t)0x02 )     /* out-of-band interrupt output enable */
-#define SEP_INTR_CTL_POL           ( (uint32_t)0x04 )     /* out-of-band interrupt polarity */
-
-/* SDIOD_CCCR_INTPEND Bits */
-#define INTR_STATUS_FUNC1          ( (uint32_t)0x02 )     /* interrupt pending for function 1 */
-#define INTR_STATUS_FUNC2          ( (uint32_t)0x04 )     /* interrupt pending for function 2 */
-#define INTR_STATUS_FUNC3          ( (uint32_t)0x08 )     /* interrupt pending for function 3 */
-
-/* SDIOD_CCCR_IOABORT Bits */
-#define IO_ABORT_RESET_ALL         ( (uint32_t)0x08 )     /* I/O card reset */
-#define IO_ABORT_FUNC_MASK         ( (uint32_t)0x07 )     /* abort selction: function x */
-
-/* SDIOD_CCCR_BICTRL Bits */
-#define BUS_CARD_DETECT_DIS        ( (uint32_t)0x80 )     /* Card Detect disable */
-#define BUS_SPI_CONT_INTR_CAP      ( (uint32_t)0x40 )     /* support continuous SPI interrupt */
-#define BUS_SPI_CONT_INTR_EN       ( (uint32_t)0x20 )     /* continuous SPI interrupt enable */
-#define BUS_SD_DATA_WIDTH_MASK     ( (uint32_t)0x03 )     /* bus width mask */
-#define BUS_SD_DATA_WIDTH_4BIT     ( (uint32_t)0x02 )     /* bus width 4-bit mode */
-#define BUS_SD_DATA_WIDTH_1BIT     ( (uint32_t)0x00 )     /* bus width 1-bit mode */
-
-/* SDIOD_CCCR_CAPABLITIES Bits */
-#define SDIO_CAP_4BLS              ( (uint32_t)0x80 )     /* 4-bit support for low speed card */
-#define SDIO_CAP_LSC               ( (uint32_t)0x40 )     /* low speed card */
-#define SDIO_CAP_E4MI              ( (uint32_t)0x20 )     /* enable interrupt between block of data in 4-bit mode */
-#define SDIO_CAP_S4MI              ( (uint32_t)0x10 )     /* support interrupt between block of data in 4-bit mode */
-#define SDIO_CAP_SBS               ( (uint32_t)0x08 )     /* support suspend/resume */
-#define SDIO_CAP_SRW               ( (uint32_t)0x04 )     /* support read wait */
-#define SDIO_CAP_SMB               ( (uint32_t)0x02 )     /* support multi-block transfer */
-#define SDIO_CAP_SDC               ( (uint32_t)0x01 )     /* Support Direct commands during multi-byte transfer */
-
-/* SDIOD_CCCR_POWER_CONTROL Bits */
-#define SDIO_POWER_SMPC            ( (uint32_t)0x01 )     /* supports master power control (RO) */
-#define SDIO_POWER_EMPC            ( (uint32_t)0x02 )     /* enable master power control (allow > 200mA) (RW) */
-
-/* SDIOD_CCCR_SPEED_CONTROL Bits */
-#define SDIO_SPEED_SHS             ( (uint32_t)0x01 )     /* supports high-speed [clocking] mode (RO) */
-#define SDIO_SPEED_EHS             ( (uint32_t)0x02 )     /* enable high-speed [clocking] mode (RW) */
-
-/* SDIOD_CCCR_BRCM_CARDCAP Bits */
-#define SDIOD_CCCR_BRCM_CARDCAP_CMD14_SUPPORT ( (uint32_t)0x02 )   /* Supports CMD14 */
-#define SDIOD_CCCR_BRCM_CARDCAP_CMD14_EXT     ( (uint32_t)0x04 )   /* CMD14 is allowed in FSM command state */
-#define SDIOD_CCCR_BRCM_CARDCAP_CMD_NODEC     ( (uint32_t)0x08 )   /* sdiod_aos does not decode any command */
-
-/* SDIO_FUNCTION_INT_MASK Bits*/
-#define SDIO_FUNC_MASK_F1          ( (uint32_t)0x01 )     /* interrupt mask enable for function 1 */
-#define SDIO_FUNC_MASK_F2          ( (uint32_t)0x02 )     /* interrupt mask enable for function 2 */
-
-/* SDIO_DEVICE_CONTROL Bits */
-#define SDIO_DATA_PAD_ISO          ( (uint32_t)0x08 )     /* isolate internal SDIO data bus signals */
-
-/* SDIO_CHIP_CLOCK_CSR Bits */
-#define SBSDIO_FORCE_ALP           ( (uint32_t)0x01 )     /* Force ALP request to backplane */
-#define SBSDIO_FORCE_HT            ( (uint32_t)0x02 )     /* Force HT request to backplane */
-#define SBSDIO_FORCE_ILP           ( (uint32_t)0x04 )     /* Force ILP request to backplane */
-#define SBSDIO_ALP_AVAIL_REQ       ( (uint32_t)0x08 )     /* Make ALP ready (power up xtal) */
-#define SBSDIO_HT_AVAIL_REQ        ( (uint32_t)0x10 )     /* Make HT ready (power up PLL) */
-#define SBSDIO_FORCE_HW_CLKREQ_OFF ( (uint32_t)0x20 )     /* Squelch clock requests from HW */
-#define SBSDIO_ALP_AVAIL           ( (uint32_t)0x40 )     /* Status: ALP is ready */
-#define SBSDIO_HT_AVAIL            ( (uint32_t)0x80 )     /* Status: HT is ready */
-#define SBSDIO_Rev8_HT_AVAIL       ( (uint32_t)0x40 )
-#define SBSDIO_Rev8_ALP_AVAIL      ( (uint32_t)0x80 )
-
-/* SDIO_FRAME_CONTROL Bits */
-#define SFC_RF_TERM                ( (uint32_t)(1 << 0) ) /* Read Frame Terminate */
-#define SFC_WF_TERM                ( (uint32_t)(1 << 1) ) /* Write Frame Terminate */
-#define SFC_CRC4WOOS               ( (uint32_t)(1 << 2) ) /* HW reports CRC error for write out of sync */
-#define SFC_ABORTALL               ( (uint32_t)(1 << 3) ) /* Abort cancels all in-progress frames */
-
-/* SDIO_TO_SB_MAIL_BOX bits corresponding to intstatus bits */
-#define SMB_NAK                    ( (uint32_t)(1 << 0) ) /* To SB Mailbox Frame NAK */
-#define SMB_INT_ACK                ( (uint32_t)(1 << 1) ) /* To SB Mailbox Host Interrupt ACK */
-#define SMB_USE_OOB                ( (uint32_t)(1 << 2) ) /* To SB Mailbox Use OOB Wakeup */
-#define SMB_DEV_INT                ( (uint32_t)(1 << 3) ) /* To SB Mailbox Miscellaneous Interrupt */
-
-/* SDIO_WAKEUP_CTRL bits */
-#define SBSDIO_WCTRL_WAKE_TILL_ALP_AVAIL     ( (uint32_t)(1 << 0) ) /* WakeTillAlpAvail bit */
-#define SBSDIO_WCTRL_WAKE_TILL_HT_AVAIL      ( (uint32_t)(1 << 1) ) /* WakeTillHTAvail bit */
-
-/* SDIO_SLEEP_CSR bits */
-#define SBSDIO_SLPCSR_KEEP_SDIO_ON           ( (uint32_t)(1 << 0) ) /* KeepSdioOn bit */
-#define SBSDIO_SLPCSR_DEVICE_ON              ( (uint32_t)(1 << 1) ) /* DeviceOn bit */
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_WHD_SDIO_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_spi.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_spi.h
deleted file mode 100644
index 45c418e303..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/bus_protocols/whd_spi.h
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef INCLUDED_WHD_SPI_H_
-#define INCLUDED_WHD_SPI_H_
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/******************************************************
-*             SPI Constants
-******************************************************/
-/* GSPI v1 */
-#define SPI_FRAME_CONTROL              ( (uint32_t)0x1000D )
-
-/* Register addresses */
-#define SPI_BUS_CONTROL                ( (uint32_t)0x0000 )
-#define SPI_RESPONSE_DELAY             ( (uint32_t)0x0001 )
-#define SPI_STATUS_ENABLE              ( (uint32_t)0x0002 )
-#define SPI_RESET_BP                   ( (uint32_t)0x0003 )    /* (corerev >= 1) */
-#define SPI_INTERRUPT_REGISTER         ( (uint32_t)0x0004 )    /* 16 bits - Interrupt status */
-#define SPI_INTERRUPT_ENABLE_REGISTER  ( (uint32_t)0x0006 )    /* 16 bits - Interrupt mask */
-#define SPI_STATUS_REGISTER            ( (uint32_t)0x0008 )    /* 32 bits */
-#define SPI_FUNCTION1_INFO             ( (uint32_t)0x000C )    /* 16 bits */
-#define SPI_FUNCTION2_INFO             ( (uint32_t)0x000E )    /* 16 bits */
-#define SPI_FUNCTION3_INFO             ( (uint32_t)0x0010 )    /* 16 bits */
-#define SPI_READ_TEST_REGISTER         ( (uint32_t)0x0014 )    /* 32 bits */
-#define SPI_RESP_DELAY_F0              ( (uint32_t)0x001c )    /* 8 bits (corerev >= 3) */
-#define SPI_RESP_DELAY_F1              ( (uint32_t)0x001d )    /* 8 bits (corerev >= 3) */
-#define SPI_RESP_DELAY_F2              ( (uint32_t)0x001e )    /* 8 bits (corerev >= 3) */
-#define SPI_RESP_DELAY_F3              ( (uint32_t)0x001f )    /* 8 bits (corerev >= 3) */
-
-/******************************************************
-*             Bit Masks
-******************************************************/
-
-/* GSPI */
-#define SPI_READ_TEST_REGISTER_VALUE   ( (uint32_t)0xFEEDBEAD )
-#define SPI_READ_TEST_REG_LSB          ( ( (SPI_READ_TEST_REGISTER_VALUE) ) & 0xff )
-#define SPI_READ_TEST_REG_LSB_SFT1     ( ( (SPI_READ_TEST_REGISTER_VALUE << 1) ) & 0xff )
-#define SPI_READ_TEST_REG_LSB_SFT2     ( ( (SPI_READ_TEST_REGISTER_VALUE << 1) + 1 ) & 0xff )
-#define SPI_READ_TEST_REG_LSB_SFT3     ( ( (SPI_READ_TEST_REGISTER_VALUE + 1) << 1 ) & 0xff )
-
-/* SPI_BUS_CONTROL Bits */
-#define WORD_LENGTH_32             ( (uint32_t)0x01 )     /* 0/1 16/32 bit word length */
-#define ENDIAN_BIG                 ( (uint32_t)0x02 )     /* 0/1 Little/Big Endian */
-#define CLOCK_PHASE                ( (uint32_t)0x04 )     /* 0/1 clock phase delay */
-#define CLOCK_POLARITY             ( (uint32_t)0x08 )     /* 0/1 Idle state clock polarity is low/high */
-#define HIGH_SPEED_MODE            ( (uint32_t)0x10 )     /* 1/0 High Speed mode / Normal mode */
-#define INTERRUPT_POLARITY_HIGH    ( (uint32_t)0x20 )     /* 1/0 Interrupt active polarity is high/low */
-#define WAKE_UP                    ( (uint32_t)0x80 )     /* 0/1 Wake-up command from Host to WLAN */
-
-/* SPI_RESPONSE_DELAY Bit mask */
-#define RESPONSE_DELAY_MASK 0xFF   /* Configurable rd response delay in multiples of 8 bits */
-
-/* SPI_STATUS_ENABLE Bits */
-#define STATUS_ENABLE              ( (uint32_t)0x01 )     /* 1/0 Status sent/not sent to host after read/write */
-#define INTR_WITH_STATUS           ( (uint32_t)0x02 )     /* 0/1 Do-not / do-interrupt if status is sent */
-#define RESP_DELAY_ALL             ( (uint32_t)0x04 )     /* Applicability of resp delay to F1 or all func's read */
-#define DWORD_PKT_LEN_EN           ( (uint32_t)0x08 )     /* Packet len denoted in dwords instead of bytes */
-#define CMD_ERR_CHK_EN             ( (uint32_t)0x20 )     /* Command error check enable */
-#define DATA_ERR_CHK_EN            ( (uint32_t)0x40 )     /* Data error check enable */
-
-/* SPI_RESET_BP Bits*/
-#define RESET_ON_WLAN_BP_RESET     ( (uint32_t)0x04 )     /* enable reset for WLAN backplane */
-#define RESET_SPI                  ( (uint32_t)0x80 )     /* reset the above enabled logic */
-
-/* SPI_INTERRUPT_REGISTER and SPI_INTERRUPT_ENABLE_REGISTER Bits */
-#define DATA_UNAVAILABLE           ( (uint32_t)0x0001 )   /* Requested data not available; Clear by writing a "1" */
-#define F2_F3_FIFO_RD_UNDERFLOW    ( (uint32_t)0x0002 )
-#define F2_F3_FIFO_WR_OVERFLOW     ( (uint32_t)0x0004 )
-#define COMMAND_ERROR              ( (uint32_t)0x0008 )   /* Cleared by writing 1 */
-#define DATA_ERROR                 ( (uint32_t)0x0010 )   /* Cleared by writing 1 */
-#define F2_PACKET_AVAILABLE        ( (uint32_t)0x0020 )
-#define F3_PACKET_AVAILABLE        ( (uint32_t)0x0040 )
-#define F1_OVERFLOW                ( (uint32_t)0x0080 )   /* Due to last write. Bkplane has pending write requests */
-#define MISC_INTR0                 ( (uint32_t)0x0100 )
-#define MISC_INTR1                 ( (uint32_t)0x0200 )
-#define MISC_INTR2                 ( (uint32_t)0x0400 )
-#define MISC_INTR3                 ( (uint32_t)0x0800 )
-#define MISC_INTR4                 ( (uint32_t)0x1000 )
-#define F1_INTR                    ( (uint32_t)0x2000 )
-#define F2_INTR                    ( (uint32_t)0x4000 )
-#define F3_INTR                    ( (uint32_t)0x8000 )
-
-/* SPI_STATUS_REGISTER Bits */
-#define STATUS_DATA_NOT_AVAILABLE  ( (uint32_t)0x00000001 )
-#define STATUS_UNDERFLOW           ( (uint32_t)0x00000002 )
-#define STATUS_OVERFLOW            ( (uint32_t)0x00000004 )
-#define STATUS_F2_INTR             ( (uint32_t)0x00000008 )
-#define STATUS_F3_INTR             ( (uint32_t)0x00000010 )
-#define STATUS_F2_RX_READY         ( (uint32_t)0x00000020 )
-#define STATUS_F3_RX_READY         ( (uint32_t)0x00000040 )
-#define STATUS_HOST_CMD_DATA_ERR   ( (uint32_t)0x00000080 )
-#define STATUS_F2_PKT_AVAILABLE    ( (uint32_t)0x00000100 )
-#define STATUS_F2_PKT_LEN_MASK     ( (uint32_t)0x000FFE00 )
-#define STATUS_F2_PKT_LEN_SHIFT    ( (uint32_t)9 )
-#define STATUS_F3_PKT_AVAILABLE    ( (uint32_t)0x00100000 )
-#define STATUS_F3_PKT_LEN_MASK     ( (uint32_t)0xFFE00000 )
-#define STATUS_F3_PKT_LEN_SHIFT    ( (uint32_t)21 )
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_WHD_SPI_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_ap.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_ap.h
deleted file mode 100644
index 903ef23760..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_ap.h
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Provides prototypes / declarations for APSTA functionality
- */
-#ifndef INCLUDED_WHD_AP_H
-#define INCLUDED_WHD_AP_H
-
-#include "whd.h"
-#include "cyabs_rtos.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/******************************************************
-*                      Macros
-******************************************************/
-#define AMPDU_RX_FACTOR_8K          0     /* max receive AMPDU length is 8kb */
-#define AMPDU_RX_FACTOR_16K         1     /* max receive AMPDU length is 16kb */
-#define AMPDU_RX_FACTOR_32K         2     /* max receive AMPDU length is 32kb */
-#define AMPDU_RX_FACTOR_64K         3     /* max receive AMPDU length is 64kb */
-#define AMPDU_RX_FACTOR_INVALID  0xff     /* invalid rx factor; ignore */
-#define AMPDU_MPDU_AUTO             (-1)  /* Auto number of mpdu in ampdu */
-
-
-#define BANDWIDTH_20MHZ            (20)  /* 802.11n, 802.11ac 20Mhz Bandwidth */
-#define BANDWIDTH_40MHZ            (40)  /* 802.11n, 802.11ac 40Mhz Bandwidth */
-#define BANDWIDTH_80MHZ            (80)  /* 802.11ac 80Mhz Bandwidth          */
-
-#define WHD_WIFI_CONFIG_AP_MAX_ASSOC 5
-
-#define CHECK_IOCTL_BUFFER_WITH_SEMAPHORE(buff, \
-                                          sema)  if (buff == \
-                                                     NULL){ WPRINT_WHD_ERROR( ("Buffer alloc failed in %s at %d \n", \
-                                                                               __func__, __LINE__) ); \
-                                                            whd_assert("Buffer alloc failed\n", 0 == 1); \
-                                                            (void)cy_rtos_deinit_semaphore(sema); \
-                                                            return WHD_BUFFER_ALLOC_FAIL; }
-
-#define CHECK_RETURN_WITH_SEMAPHORE(expr, sema)  { whd_result_t check_res = (expr); if (check_res != WHD_SUCCESS) \
-                                                   { WPRINT_WHD_ERROR( ("Command failed in %s at %d \n", __func__, \
-                                                                        __LINE__) ); \
-                                                     whd_assert("Command failed\n", 0 == 1); \
-                                                     (void)cy_rtos_deinit_semaphore(sema); \
-                                                     return check_res; } }
-
-/******************************************************
-*             Structures
-******************************************************/
-typedef struct whd_ap_int_info
-{
-    whd_bool_t ap_is_up;
-    whd_bool_t is_waiting_event;
-    cy_semaphore_t whd_wifi_sleep_flag;
-
-} whd_ap_int_info_t;
-
-/******************************************************
-*             Function prototypes
-******************************************************/
-extern whd_result_t whd_wifi_set_block_ack_window_size_common(whd_interface_t interface, uint16_t ap_win_size,
-                                                              uint16_t sta_win_size);
-extern whd_result_t whd_wifi_set_ampdu_parameters_common(whd_interface_t interface, uint8_t ba_window_size,
-                                                         int8_t ampdu_mpdu, uint8_t rx_factor);
-extern void whd_wifi_set_ap_is_up(whd_driver_t whd_driver, whd_bool_t new_state);
-extern whd_bool_t whd_wifi_get_ap_is_up(whd_driver_t whd_driver);
-void whd_ap_info_init(whd_driver_t whd_driver);
-whd_result_t whd_wifi_set_block_ack_window_size(whd_interface_t ifp);
-
-
-/** Set the AMPDU parameters for both Soft AP and STA
- *
- * Sets various AMPDU parameters for Soft AP and STA to ensure that the number of buffers dedicated to AMPDUs does
- * not exceed the resources of the chip. Both Soft AP and STA interfaces must be down.
- *
- * @return  WHD_SUCCESS : if the AMPDU parameters were successfully set
- *          WHD_ERROR   : if the AMPDU parameters were not successfully set
- */
-extern whd_result_t whd_wifi_set_ampdu_parameters(whd_interface_t ifp);
-
-#ifdef __cplusplus
-} /*extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_WHD_AP_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_buffer_api.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_buffer_api.h
deleted file mode 100644
index 60eecaa927..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_buffer_api.h
+++ /dev/null
@@ -1,151 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Provides prototypes / declarations for common APSTA functionality
- */
-#ifndef _WHD_INTERNAL_BUFFER_API_H_
-#define _WHD_INTERNAL_BUFFER_API_H_
-
-#include "whd.h"
-#include "whd_int.h"
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-*                      Macros
-******************************************************/
-
-/******************************************************
-*             Structures
-******************************************************/
-
-/******************************************************
-*             Function prototypes
-******************************************************/
-/** Allocates a packet buffer
- *
- *  Implemented in the port layer interface which is specific to the
- *  buffering scheme in use.
- *  Attempts to allocate a packet buffer of the size requested. It can do this
- *  by allocating a pre-existing packet from a pool, using a static buffer,
- *  or by dynamically allocating memory. The method of allocation does not
- *  concern WHD, however it must match the way the network stack expects packet
- *  buffers to be allocated.
- *
- *  @param buffer    : A pointer which receives the allocated packet buffer handle
- *  @param direction : Indicates transmit/receive direction that the packet buffer is
- *                    used for. This may be needed if tx/rx pools are separate.
- *  @param size      : The number of bytes to allocate.
- *  @param wait      : Whether to wait for a packet buffer to be available
- *
- *  @return          : WHD_SUCCESS or error code
- *
- */
-whd_result_t whd_host_buffer_get(whd_driver_t whd_driver, whd_buffer_t *buffer, whd_buffer_dir_t direction,
-                                 uint16_t size, uint32_t wait);
-
-/** Releases a packet buffer
- *
- *  Implemented in the port layer interface, which will be specific to the
- *  buffering scheme in use.
- *  This function is used by WHD to indicate that it no longer requires
- *  a packet buffer. The buffer can then be released back into a pool for
- *  reuse, or the dynamically allocated memory can be freed, according to
- *  how the packet was allocated.
- *  Returns void since WHD cannot do anything about failures
- *
- *  @param buffer    : The handle of the packet buffer to be released
- *  @param direction : Indicates transmit/receive direction that the packet buffer has
- *                     been used for. This might be needed if tx/rx pools are separate.
- *
- */
-whd_result_t whd_buffer_release(whd_driver_t whd_driver, whd_buffer_t buffer, whd_buffer_dir_t direction);
-
-/** Retrieves the current pointer of a packet buffer
- *
- *  Implemented in the port layer interface which is specific to the
- *  buffering scheme in use.
- *  Since packet buffers usually need to be created with space at the
- *  front for additional headers, this function allows WHD to get
- *  the current 'front' location pointer.
- *
- *  @param buffer : The handle of the packet buffer whose pointer is to be retrieved
- *
- *  @return       : The packet buffer's current pointer.
- */
-uint8_t *whd_buffer_get_current_piece_data_pointer(whd_driver_t whd_driver, whd_buffer_t buffer);
-
-/** Retrieves the size of a packet buffer
- *
- *  Implemented in the port layer interface which is specific to the
- *  buffering scheme in use.
- *  Since packet buffers usually need to be created with space at the
- *  front for additional headers, the memory block used to contain a packet buffer
- *  will often be larger than the current size of the packet buffer data.
- *  This function allows WHD to retrieve the current size of a packet buffer's data.
- *
- *  @param buffer : The handle of the packet buffer whose size is to be retrieved
- *
- *  @return       :  The size of the packet buffer.
- */
-uint16_t whd_buffer_get_current_piece_size(whd_driver_t whd_driver, whd_buffer_t buffer);
-
-/** Sets the current size of a WHD packet
- *
- *
- *  Implemented in the port layer interface which is specific to the
- *  buffering scheme in use.
- *  This function sets the current length of a WHD packet buffer
- *
- *  @param buffer : The packet to be modified
- *  @param size   : The new size of the packet buffer
- *
- *  @return       : WHD_SUCCESS or error code
- */
-whd_result_t whd_buffer_set_size(whd_driver_t whd_driver, whd_buffer_t buffer, uint16_t size);
-
-/** Moves the current pointer of a packet buffer
- *
- *  Implemented in the port layer interface which is specific to the buffering scheme in use.
- *
- *  Since packet buffers usually need to be created with space at the front for additional headers,
- *  this function allows WHD to move  the current 'front' location pointer so that it has space to
- *  add headers to transmit packets, and so that the network stack does not see the internal WHD
- *  headers on received packets.
- *
- *  @param buffer            : A pointer to the handle of the current packet buffer for which the
- *                             current pointer will be moved. On return this may contain a pointer
- *                             to a newly allocated packet buffer which has been daisy chained to
- *                             the front of the given one. This would be the case if the given packet
- *                             buffer  didn't have enough space at the front.
- *  @param add_remove_amount : This is the number of bytes to move the current pointer of the packet
- *                             buffer - a negative value increases the space for headers at the front
- *                             of the packet, a positive value decreases the space.
- *
- *  @return                  : WHD_SUCCESS or error code
- */
-whd_result_t whd_buffer_add_remove_at_front(whd_driver_t whd_driver, whd_buffer_t *buffer, int32_t add_remove_amount);
-#ifdef __cplusplus
-} /*extern "C" */
-#endif
-
-#endif /* ifndef _WHD_INTERNAL_BUFFER_API_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_cdc_bdc.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_cdc_bdc.h
deleted file mode 100644
index 8026b31522..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_cdc_bdc.h
+++ /dev/null
@@ -1,158 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef INCLUDED_WHD_CDC_BDC_H
-#define INCLUDED_WHD_CDC_BDC_H
-
-#include "whd.h"
-#include "cyabs_rtos.h"
-#include "whd_events_int.h"
-#include "whd_types_int.h"
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-*             Constants
-******************************************************/
-
-/* CDC flag definition taken from bcmcdc.h */
-#define CDCF_IOC_SET                (0x02)      /** 0=get, 1=set cmd */
-#define WHD_EVENT_HANDLER_LIST_SIZE    (5)      /** Maximum number of simultaneously registered event handlers */
-#define WHD_SDALIGN 32
-
-/* CDC flag definitions taken from bcmcdc.h */
-#define CDCF_IOC_ERROR              (0x01)      /** 0=success, 1=ioctl cmd failed */
-#define CDCF_IOC_IF_MASK          (0xF000)      /** I/F index */
-#define CDCF_IOC_IF_SHIFT             (12)      /** # of bits of shift for I/F Mask */
-#define CDCF_IOC_ID_MASK      (0xFFFF0000)      /** used to uniquely id an ioctl req/resp pairing */
-#define CDCF_IOC_ID_SHIFT             (16)      /** # of bits of shift for ID Mask */
-
-#define DATA_AFTER_HEADER(x)   ( (void *)(&x[1]) )
-
-#define BDC_HEADER_LEN                 (4)
-
-/******************************************************
-*                 Enumerations
-******************************************************/
-
-typedef enum sdpcm_command_type_enum
-{
-    CDC_GET = 0x00,
-    CDC_SET = CDCF_IOC_SET
-} cdc_command_type_t;
-
-/******************************************************
-*               Structures
-******************************************************/
-#pragma pack(1)
-typedef struct
-{
-    uint32_t cmd;    /* ioctl command value */
-    uint32_t len;    /* lower 16: output buflen; upper 16: input buflen (excludes header) */
-    uint32_t flags;  /* flag defns given in bcmcdc.h */
-    uint32_t status; /* status code returned from the device */
-} cdc_header_t;
-
-typedef struct
-{
-    uint8_t flags;      /* Flags */
-    uint8_t priority;   /* 802.1d Priority (low 3 bits) */
-    uint8_t flags2;
-    uint8_t data_offset; /* Offset from end of BDC header to packet data, in 4-uint8_t words.
-                          * Leaves room for optional headers.*/
-} bdc_header_t;
-
-typedef struct
-{
-    whd_mac_t destination_address;
-    whd_mac_t source_address;
-    uint16_t ethertype;
-} ethernet_header_t;
-
-#pragma pack()
-
-/** Event list element structure
- *
- * events : A pointer to a whd_event_num_t array that is terminated with a WLC_E_NONE event
- * handler: A pointer to the whd_event_handler_t function that will receive the event
- * handler_user_data : User provided data that will be passed to the handler when a matching event occurs
- */
-typedef struct
-{
-    whd_bool_t event_set;
-    whd_event_num_t events[WHD_MAX_EVENT_SUBSCRIPTION];
-    whd_event_handler_t handler;
-    void *handler_user_data;
-    uint8_t ifidx;
-} event_list_elem_t;
-
-/** @endcond */
-
-typedef struct whd_cdc_info
-{
-    /* Event list variables */
-    event_list_elem_t whd_event_list[WHD_EVENT_HANDLER_LIST_SIZE];
-    cy_semaphore_t event_list_mutex;
-
-    /* IOCTL variables*/
-    uint16_t requested_ioctl_id;
-    cy_semaphore_t ioctl_mutex;
-    whd_buffer_t ioctl_response;
-    cy_semaphore_t ioctl_sleep;
-
-} whd_cdc_bdc_info_t;
-
-/******************************************************
-*               Function Declarations
-******************************************************/
-
-whd_result_t whd_cdc_bdc_info_init(whd_driver_t whd_driver);
-void         whd_cdc_bdc_info_deinit(whd_driver_t whd_driver);
-
-whd_result_t whd_cdc_send_iovar(whd_interface_t ifp, cdc_command_type_t type,
-                                whd_buffer_t send_buffer_hnd,
-                                whd_buffer_t *response_buffer_hnd);
-
-whd_result_t whd_cdc_send_ioctl(whd_interface_t ifp, cdc_command_type_t type, uint32_t command,
-                                whd_buffer_t send_buffer_hnd,
-                                whd_buffer_t *response_buffer_hnd);
-
-void *whd_cdc_get_iovar_buffer(whd_driver_t whd_driver,
-                               whd_buffer_t *buffer,
-                               uint16_t data_length,
-                               const char *name);
-void whd_network_send_ethernet_data(whd_interface_t ifp, whd_buffer_t buffer);
-
-void *whd_cdc_get_ioctl_buffer(whd_driver_t whd_driver,
-                               whd_buffer_t *buffer,
-                               uint16_t data_length);
-
-void whd_process_cdc(whd_driver_t whd_driver, whd_buffer_t buffer);
-
-void whd_process_bdc(whd_driver_t whd_driver, whd_buffer_t buffer);
-
-void whd_process_bdc_event(whd_driver_t whd_driver, whd_buffer_t buffer, uint16_t size);
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_WHD_CDC_BDC_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_chip.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_chip.h
deleted file mode 100644
index 6958775460..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_chip.h
+++ /dev/null
@@ -1,393 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef INCLUDED_WHD_CHIP_H
-#define INCLUDED_WHD_CHIP_H
-
-#include "cyabs_rtos.h" /* For cy_semaphore_t */
-
-#include "whd_endian.h"
-#include "whd.h"
-#include "whd_wifi_api.h"
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-*             Constants
-******************************************************/
-#define WHD_WLAN_WAKE_TIMEOUT           (10000)
-#define WHD_SHARED_MEMORY_POLLING_DELAY (10)
-#define SICF_CPUHALT                    (0x0020)
-
-/******************************************************
-*                 Enumerations
-******************************************************/
-/**
- * Enumerated list of aggregate codes and edit WHD_COUNTRY_AGGREGATE_CUSTOMER for supporting new aggregate
- * as per customer like XZ/278
- */
-typedef enum
-{
-    WHD_COUNTRY_AGGREGATE_XA_0 = MK_CNTRY('X', 'A', 0),
-    WHD_COUNTRY_AGGREGATE_XT_0 = MK_CNTRY('X', 'T', 0),
-    WHD_COUNTRY_AGGREGATE_XV_0 = MK_CNTRY('X', 'V', 0),
-    WHD_COUNTRY_AGGREGATE_CUSTOMER = MK_CNTRY('X', 'Z', 278),
-} whd_aggregate_code_t;
-
-typedef enum
-{
-    /* Note : If changing this, core_base_address must be changed also */
-    WLAN_ARM_CORE = 0, SOCRAM_CORE = 1, SDIOD_CORE = 2
-} device_core_t;
-
-typedef enum
-{
-    WLAN_DOWN, WLAN_UP, WLAN_OFF
-} wlan_state_t;
-
-typedef enum
-{
-    WLAN_CORE_FLAG_NONE, WLAN_CORE_FLAG_CPU_HALT,
-} wlan_core_flag_t;
-
-/**
- * Enumeration of AKM (authentication and key management) suites. Table 8-140 802.11mc D3.0.
- */
-typedef enum
-{
-    WHD_AKM_RESERVED = 0,
-    WHD_AKM_8021X = 1, /**< WPA2 enterprise                 */
-    WHD_AKM_PSK = 2, /**< WPA2 PSK                        */
-    WHD_AKM_FT_8021X = 3, /**< 802.11r Fast Roaming enterprise */
-    WHD_AKM_FT_PSK = 4, /**< 802.11r Fast Roaming PSK        */
-    WHD_AKM_8021X_SHA256 = 5,
-    WHD_AKM_PSK_SHA256 = 6,
-    WHD_AKM_TDLS = 7, /**< Tunneled Direct Link Setup      */
-    WHD_AKM_SAE_SHA256 = 8,
-    WHD_AKM_FT_SAE_SHA256 = 9,
-    WHD_AKM_AP_PEER_KEY_SHA256 = 10,
-    WHD_AKM_SUITEB_8021X_HMAC_SHA256 = 11,
-    WHD_AKM_SUITEB_8021X_HMAC_SHA384 = 12,
-    WHD_AKM_SUITEB_FT_8021X_HMAC_SHA384 = 13,
-} whd_akm_suite_t;
-
-/**
- * Enumeration of cipher suites. Table 8-138 802.11mc D3.0.
- */
-typedef enum
-{
-    WHD_CIPHER_GROUP = 0, /**< Use group cipher suite                                        */
-    WHD_CIPHER_WEP_40 = 1, /**< WEP-40                                                        */
-    WHD_CIPHER_TKIP = 2, /**< TKIP                                                          */
-    WHD_CIPHER_RESERVED = 3, /**< Reserved                                                      */
-    WHD_CIPHER_CCMP_128 = 4, /**< CCMP-128 - default pairwise and group cipher suite in an RSNA */
-    WHD_CIPHER_WEP_104 = 5, /**< WEP-104 - also known as WEP-128                               */
-    WHD_CIPHER_BIP_CMAC_128 = 6, /**< BIP-CMAC-128 - default management frame cipher suite          */
-    WHD_CIPHER_GROUP_DISALLOWED = 7, /**< Group address traffic not allowed                             */
-    WHD_CIPHER_GCMP_128 = 8, /**< GCMP-128 - default for 60 GHz STAs                            */
-    WHD_CIPHER_GCMP_256 = 9, /**< GCMP-256 - introduced for Suite B                             */
-    WHD_CIPHER_CCMP_256 = 10, /**< CCMP-256 - introduced for suite B                             */
-    WHD_CIPHER_BIP_GMAC_128 = 11, /**< BIP-GMAC-128 - introduced for suite B                         */
-    WHD_CIPHER_BIP_GMAC_256 = 12, /**< BIP-GMAC-256 - introduced for suite B                         */
-    WHD_CIPHER_BIP_CMAC_256 = 13, /**< BIP-CMAC-256 - introduced for suite B                         */
-} whd_80211_cipher_t;
-
-/******************************************************
-*               Structures
-******************************************************/
-
-typedef struct whd_chip_info
-{
-    uint16_t chip_id;
-    whd_bool_t save_restore_enable;
-
-} whd_chip_info_t;
-
-typedef struct
-{
-    wlan_state_t state;
-    whd_country_code_t country_code;
-    whd_aggregate_code_t aggregate_code;
-    uint32_t keep_wlan_awake;
-} whd_wlan_status_t;
-
-#pragma pack(1)
-
-/* 802.11 Information Element structures */
-
-/* Country Information */
-#define COUNTRY_INFO_IE_MINIMUM_LENGTH (6)
-
-typedef struct
-{
-    uint8_t first_chan_num;
-    uint8_t num_chans;
-    uint8_t max_tx_pwr_level;
-} country_chan_info_t;
-
-/* Structures for TLVs with 8-bit type and 8-bit length */
-typedef struct
-{
-    uint8_t type;
-    uint8_t length;
-} whd_tlv8_header_t;
-
-typedef struct
-{
-    uint8_t type;
-    uint8_t length;
-    uint8_t data[1];
-} whd_tlv8_data_t;
-
-typedef struct
-{
-    whd_tlv8_header_t tlv_header; /* id, length                                                          */
-    char ccode[2]; /* dot11CountryString MIB octet 1~2, two letter country code           */
-    uint8_t env; /* dot11CountryString MIB octet 3, indicate indoor/outdoor environment */
-    country_chan_info_t country_chan_info[1]; /* At least one country channel info triples                           */
-} country_info_ie_fixed_portion_t;
-
-/* Robust Secure Network */
-typedef struct
-{
-    whd_tlv8_header_t tlv_header; /* id, length */
-    uint16_t version;
-    uint32_t group_key_suite; /* See whd_80211_cipher_t for values */
-    uint16_t pairwise_suite_count;
-    uint32_t pairwise_suite_list[1];
-} rsn_ie_fixed_portion_t;
-
-#define RSN_IE_MINIMUM_LENGTH (8)
-
-typedef struct
-{
-    whd_tlv8_header_t tlv_header; /* id, length */
-    uint8_t oui[4];
-} vendor_specific_ie_header_t;
-
-#define VENDOR_SPECIFIC_IE_MINIMUM_LENGTH (4)
-
-/* WPA IE */
-typedef struct
-{
-    vendor_specific_ie_header_t vendor_specific_header;
-    uint16_t version;
-    uint32_t multicast_suite;
-    uint16_t unicast_suite_count;
-    uint8_t unicast_suite_list[1][4];
-} wpa_ie_fixed_portion_t;
-
-#define WPA_IE_MINIMUM_LENGTH (12)
-
-typedef struct
-{
-    uint16_t akm_suite_count;
-    uint32_t akm_suite_list[1];
-} akm_suite_portion_t;
-
-typedef struct
-{
-    whd_tlv8_header_t tlv_header; /* id, length */
-    uint16_t ht_capabilities_info;
-    uint8_t ampdu_parameters;
-    uint8_t rx_mcs[10];
-    uint16_t rxhighest_supported_data_rate;
-    uint8_t tx_supported_mcs_set;
-    uint8_t tx_mcs_info[3];
-    uint16_t ht_extended_capabilities;
-    uint32_t transmit_beam_forming_capabilities;
-    uint8_t antenna_selection_capabilities;
-} ht_capabilities_ie_t;
-
-#define HT_CAPABILITIES_INFO_LDPC_CODING_CAPABILITY        (1 <<  0)
-#define HT_CAPABILITIES_INFO_SUPPORTED_CHANNEL_WIDTH_SET   (1 <<  1)
-#define HT_CAPABILITIES_INFO_SM_POWER_SAVE_OFFSET          (1 <<  2)
-#define HT_CAPABILITIES_INFO_SM_POWER_SAVE_MASK            (3 <<  2)
-#define HT_CAPABILITIES_INFO_HT_GREENFIELD                 (1 <<  4)
-#define HT_CAPABILITIES_INFO_SHORT_GI_FOR_20MHZ            (1 <<  5)
-#define HT_CAPABILITIES_INFO_SHORT_GI_FOR_40MHZ            (1 <<  6)
-#define HT_CAPABILITIES_INFO_TX_STBC                       (1 <<  7)
-#define HT_CAPABILITIES_INFO_RX_STBC_OFFSET                (1 <<  8)
-#define HT_CAPABILITIES_INFO_RX_STBC_MASK                  (3 <<  8)
-#define HT_CAPABILITIES_INFO_HT_DELAYED_BLOCK_ACK          (1 << 10)
-#define HT_CAPABILITIES_INFO_MAXIMUM_A_MSDU_LENGTH         (1 << 11)
-#define HT_CAPABILITIES_INFO_DSSS_CCK_MODE_IN_40MHZ        (1 << 12)
-/* bit 13 reserved */
-#define HT_CAPABILITIES_INFO_40MHZ_INTOLERANT              (1 << 14)
-#define HT_CAPABILITIES_INFO_L_SIG_TXOP_PROTECTION_SUPPORT (1 << 15)
-
-typedef unsigned int uint;
-typedef struct
-{
-    uint buf;
-    uint buf_size;
-    uint idx;
-    uint out_idx; /* output index */
-} hnd_log_t;
-
-#define CBUF_LEN 128
-
-typedef struct
-{
-    /* Virtual UART
-     *   When there is no UART (e.g. Quickturn), the host should write a complete
-     *   input line directly into cbuf and then write the length into vcons_in.
-     *   This may also be used when there is a real UART (at risk of conflicting with
-     *   the real UART).  vcons_out is currently unused.
-     */
-    volatile uint vcons_in;
-    volatile uint vcons_out;
-
-    /* Output (logging) buffer
-     *   Console output is written to a ring buffer log_buf at index log_idx.
-     *   The host may read the output when it sees log_idx advance.
-     *   Output will be lost if the output wraps around faster than the host polls.
-     */
-    hnd_log_t log;
-
-    /* Console input line buffer
-     *   Characters are read one at a time into cbuf until <CR> is received, then
-     *   the buffer is processed as a command line.  Also used for virtual UART.
-     */
-    uint cbuf_idx;
-    char cbuf[CBUF_LEN];
-} hnd_cons_t;
-
-typedef struct wifi_console
-{
-    uint count; /* Poll interval msec counter */
-    uint log_addr; /* Log struct address (fixed) */
-    hnd_log_t log; /* Log struct (host copy) */
-    uint bufsize; /* Size of log buffer */
-    char *buf; /* Log buffer (host copy) */
-    uint last; /* Last buffer read index */
-} wifi_console_t;
-
-typedef struct
-{
-    uint flags;
-    uint trap_addr;
-    uint assert_exp_addr;
-    uint assert_file_addr;
-    uint assert_line;
-    uint console_addr;
-    uint msgtrace_addr;
-    uint fwid;
-} wlan_shared_t;
-
-/* Buffer size to be allocated to read wlan log */
-#define WLAN_LOG_BUF_LEN (4 * 1024)
-
-#define WHD_IOCTL_LOG_SIZE 64
-#define WHD_IOVAR_STRING_SIZE 128
-#define WHD_MAX_DATA_SIZE 64
-
-#define WHD_IOCTL_LOG_ADD(x, y, z) whd_ioctl_log_add(x, y, z)
-#define WHD_IOCTL_LOG_ADD_EVENT(w, x, y, z) whd_ioctl_log_add_event(w, x, y, z)
-#define WHD_IOCTL_PRINT(x) whd_ioctl_print(x)
-
-typedef struct
-{
-    uint32_t ioct_log;
-    uint8_t is_this_event;
-    uint8_t data[WHD_MAX_DATA_SIZE];
-    uint32_t data_size;
-    uint16_t flag;
-    uint32_t reason;
-}whd_ioctl_log_t;
-
-void whd_ioctl_log_add(whd_driver_t whd_driver, uint32_t cmd, whd_buffer_t buffer);
-void whd_ioctl_log_add_event(whd_driver_t whd_driver, uint32_t cmd, uint16_t flag, uint32_t data);
-
-whd_result_t whd_ioctl_print(whd_driver_t whd_driver);
-
-#pragma pack()
-
-typedef struct whd_internal_info
-{
-    whd_wlan_status_t whd_wlan_status;
-    wifi_console_t *c;
-    wifi_console_t console;
-    wlan_shared_t sh;
-    uint32_t console_addr;
-    whd_scan_result_callback_t scan_result_callback;
-    whd_scan_result_t *whd_scan_result_ptr;
-    /* The semaphore used to wait for completion of a join;
-     * whd_wifi_join_halt uses this to release waiting threads (if any) */
-    cy_semaphore_t *active_join_semaphore;
-    whd_bool_t active_join_mutex_initted;
-    cy_semaphore_t active_join_mutex;
-    uint con_lastpos;
-    whd_bool_t whd_wifi_p2p_go_is_up;
-    uint32_t whd_join_status[3];
-
-} whd_internal_info_t;
-
-#pragma pack(1)
-
-typedef struct
-{
-    char abbrev[3];
-    uint8_t rev;
-    uint8_t data[64];
-} whd_country_info_t;
-
-#pragma pack()
-
-void whd_internal_info_init(whd_driver_t whd_driver);
-
-/******************************************************
-*               Function Declarations
-******************************************************/
-
-extern void whd_wifi_chip_info_init(whd_driver_t whd_driver);
-extern whd_result_t whd_wlan_bus_complete_ds_wake(whd_driver_t whd_driver, whd_bool_t wake_from_firmware,
-                                                  uint32_t wake_event_indication_addr, uint32_t wake_indication_addr,
-                                                  uint32_t sdio_control_addr);
-extern whd_result_t whd_wifi_set_custom_country_code(whd_interface_t ifp, const whd_country_info_t *country_code);
-
-/* Device core control functions */
-extern whd_result_t whd_disable_device_core(whd_driver_t whd_driver, device_core_t core_id, wlan_core_flag_t core_flag);
-extern whd_result_t whd_reset_device_core(whd_driver_t whd_driver, device_core_t core_id, wlan_core_flag_t core_flag);
-extern whd_result_t whd_reset_core(whd_driver_t whd_driver, device_core_t core_id, uint32_t bits, uint32_t resetbits);
-extern whd_result_t whd_wlan_armcore_run(whd_driver_t whd_driver, device_core_t core_id, wlan_core_flag_t core_flag);
-extern whd_result_t whd_device_core_is_up(whd_driver_t whd_driver, device_core_t core_id);
-
-/* Chip specific functions */
-extern whd_result_t whd_allow_wlan_bus_to_sleep(whd_driver_t whd_driver);
-extern whd_result_t whd_ensure_wlan_bus_is_up(whd_driver_t whd_driver);
-
-extern whd_result_t whd_chip_specific_init(whd_driver_t whd_driver);
-extern whd_result_t whd_chip_specific_socsram_init(whd_driver_t whd_driver);
-extern whd_result_t whd_wifi_read_wlan_log(whd_driver_t whd_driver, char *buffer, uint32_t buffer_size);
-extern whd_result_t whd_wifi_print_whd_log(whd_driver_t whd_driver);
-extern whd_result_t whd_wifi_read_wlan_log_unsafe(whd_driver_t whd_driver, uint32_t wlan_shared_address, char *buffer,
-                                                  uint32_t buffer_size);
-
-extern void whd_wifi_peek(whd_driver_t whd_driver, uint32_t address, uint8_t register_length, uint8_t *value);
-extern void whd_wifi_poke(whd_driver_t whd_driver, uint32_t address, uint8_t register_length, uint32_t value);
-extern uint32_t whd_wifi_get_btc_params(whd_driver_t whd_driver, uint32_t address, whd_interface_t interface);
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_WHD_CHIP_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_chip_constants.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_chip_constants.h
deleted file mode 100644
index b50ce1579d..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_chip_constants.h
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef INCLUDED_CHIP_CONSTANTS_H_
-#define INCLUDED_CHIP_CONSTANTS_H_
-
-#include "whd.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-typedef enum chip_var
-{
-    BUS_CREDIT_DIFF = 1,
-    CHIP_RAM_SIZE,
-    ATCM_RAM_BASE_ADDRESS,
-    SOCRAM_SRMEM_SIZE,
-    CHANSPEC_BAND_MASK,
-    CHANSPEC_BAND_2G,
-    CHANSPEC_BAND_5G,
-    CHANSPEC_BAND_SHIFT,
-    CHANSPEC_BW_10,
-    CHANSPEC_BW_20,
-    CHANSPEC_BW_40,
-    CHANSPEC_BW_MASK,
-    CHANSPEC_BW_SHIFT,
-    CHANSPEC_CTL_SB_LOWER,
-    CHANSPEC_CTL_SB_UPPER,
-    CHANSPEC_CTL_SB_NONE,
-    CHANSPEC_CTL_SB_MASK
-} chip_var_t;
-
-#define VERIFY_RESULT(x) { whd_result_t verify_result = WHD_SUCCESS; verify_result = (x); \
-                           if (verify_result != WHD_SUCCESS){ \
-                               WPRINT_WHD_ERROR( ("Function %s failed at line %d \n", __func__, __LINE__) ); \
-                               return verify_result; } }
-#define GET_C_VAR(whd_driver, var) get_whd_var(whd_driver, var)
-
-uint32_t get_whd_var(whd_driver_t whd_driver, chip_var_t var);
-
-whd_result_t get_chip_max_bus_data_credit_diff(uint16_t, uint32_t *);
-whd_result_t get_chip_ram_size(uint16_t, uint32_t *);
-whd_result_t get_atcm_ram_base_address(uint16_t, uint32_t *);
-whd_result_t get_socsram_srmem_size(uint16_t, uint32_t *);
-whd_result_t get_wl_chanspec_band_mask(uint16_t, uint32_t *);
-whd_result_t get_wl_chanspec_band_2G(uint16_t, uint32_t *);
-whd_result_t get_wl_chanspec_band_5G(uint16_t, uint32_t *);
-whd_result_t get_wl_chanspec_band_shift(uint16_t, uint32_t *);
-whd_result_t get_wl_chanspec_bw_10(uint16_t, uint32_t *);
-whd_result_t get_wl_chanspec_bw_20(uint16_t, uint32_t *);
-whd_result_t get_wl_chanspec_bw_40(uint16_t, uint32_t *);
-whd_result_t get_wl_chanspec_bw_mask(uint16_t, uint32_t *);
-whd_result_t get_wl_chanspec_bw_shift(uint16_t, uint32_t *);
-whd_result_t get_wl_chanspec_ctl_sb_lower(uint16_t, uint32_t *);
-whd_result_t get_wl_chanspec_ctl_sb_upper(uint16_t, uint32_t *);
-whd_result_t get_wl_chanspec_ctl_sb_none(uint16_t, uint32_t *);
-whd_result_t get_wl_chanspec_ctl_sb_mask(uint16_t, uint32_t *);
-
-uint32_t whd_chip_set_chip_id(whd_driver_t whd_driver, uint16_t id);
-uint16_t whd_chip_get_chip_id(whd_driver_t whd_driver);
-
-#undef CHIP_FIRMWARE_SUPPORTS_PM_LIMIT_IOVAR
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_CHIP_CONSTANTS_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_debug.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_debug.h
deleted file mode 100644
index fe955f1c29..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_debug.h
+++ /dev/null
@@ -1,140 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <stdio.h>
-#include <stdio.h>
-#include <string.h>
-#include "whd.h"
-
-#ifndef INCLUDED_WHD_DEBUG_H
-#define INCLUDED_WHD_DEBUG_H
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-*                      Macros
-******************************************************/
-#define WPRINT_ENABLE_WHD_ERROR
-#define WPRINT_ENABLE_WHD_INFO
-#define WPRINT_ENABLE_WHD_DEBUG
-
-#define WHD_ENABLE_STATS
-#define WHD_LOGGING_BUFFER_ENABLE
-
-#if defined (__GNUC__)
-#define WHD_TRIGGER_BREAKPOINT( ) do { __asm__ ("bkpt"); } while (0)
-
-#elif defined (__IAR_SYSTEMS_ICC__)
-#define WHD_TRIGGER_BREAKPOINT( ) do { __asm("bkpt 0"); } while (0)
-
-#else
-#define WHD_TRIGGER_BREAKPOINT( )
-#endif
-
-#ifdef WPRINT_ENABLE_ERROR
-#define WPRINT_ERROR(args)                      do { WPRINT_MACRO(args); } while (0)
-#define whd_assert(error_string, assertion) do { if (!(assertion) ){ WHD_TRIGGER_BREAKPOINT(); } } while (0)
-#define whd_minor_assert(error_string, \
-                         assertion)   do { if (!(assertion) ) WPRINT_MACRO( (error_string) ); } while (0)
-#else
-#define whd_assert(error_string, \
-                   assertion)         do { if (!(assertion) ){ WPRINT_MACRO( (error_string) ); } } while (0)
-#define whd_minor_assert(error_string, assertion)   do { (void)(assertion); } while (0)
-#endif
-
-/******************************************************
-*             Print declarations
-******************************************************/
-/* IF MFG TEST is enabled then disable all LOGGING VIA UART as
- + * this interrupts communication between WL TOOL and MFG Test APP
- + * via STDIO UART causing Wrong Message Exchange and failure.
- + */
-#ifdef WLAN_MFG_FIRMWARE
-#define WPRINT_MACRO(args)
-#else
-#if defined(WHD_LOGGING_BUFFER_ENABLE)
-#define WPRINT_MACRO(args) do { whd_buffer_printf args; } while (0 == 1)
-#else
-#define WPRINT_MACRO(args) do { printf args;} while (0 == 1)
-#endif
-#endif
-
-
-/* WICED printing macros for Wiced Wi-Fi Driver*/
-#ifdef WPRINT_ENABLE_WHD_INFO
-#define WPRINT_WHD_INFO(args) WPRINT_MACRO(args)
-#else
-#define WPRINT_WHD_INFO(args)
-#endif
-
-#ifdef WPRINT_ENABLE_WHD_DEBUG
-#define WPRINT_WHD_DEBUG(args) WPRINT_MACRO(args)
-#else
-#define WPRINT_WHD_DEBUG(args)
-#endif
-
-#ifdef WPRINT_ENABLE_WHD_ERROR
-#define WPRINT_WHD_ERROR(args) WPRINT_MACRO(args);
-#else
-#define WPRINT_WHD_ERROR(args)
-#endif
-
-#ifdef WPRINT_ENABLE_WHD_DATA_LOG
-#define WPRINT_WHD_DATA_LOG(args) WPRINT_MACRO(args)
-#else
-#define WPRINT_WHD_DATA_LOG(args)
-#endif
-
-#define WHD_STATS_INCREMENT_VARIABLE(whd_driver, var) \
-    do { whd_driver->whd_stats.var++; } while (0)
-
-#define WHD_STATS_CONDITIONAL_INCREMENT_VARIABLE(whd_driver, condition, var) \
-    do { if (condition){ whd_driver->whd_stats.var++; }} while (0)
-
-#if (defined(__GNUC__) && (__GNUC__ >= 6) )
-#define __FUNCTION__ __func__
-#endif
-
-
-void whd_init_stats(whd_driver_t whd_driver);
-void whd_print_logbuffer(void);
-
-
-#ifdef WHD_LOGGING_BUFFER_ENABLE
-#define LOGGING_BUFFER_SIZE (4 * 1024)
-int whd_buffer_printf(const char *format, ...);
-
-typedef struct
-{
-    uint32_t buffer_write;
-    uint32_t buffer_read;
-    char buffer[LOGGING_BUFFER_SIZE + 1];
-    whd_bool_t roll_over;
-    whd_bool_t over_write;
-} whd_logging_t;
-#else
-#define whd_print_logbuffer()
-#endif /* WHD_LOGGING_BUFFER_ENABLE */
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-#endif /* ifndef INCLUDED_WHD_DEBUG_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_endian.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_endian.h
deleted file mode 100644
index c68fc0e69a..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_endian.h
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/*
- * Byte order utilities
- *
- * This file by default provides proper behavior on little-endian architectures.
- * On big-endian architectures, IL_BIGENDIAN should be defined.
- */
-
-#ifndef INCLUDED_WHD_ENDIAN_H
-#define INCLUDED_WHD_ENDIAN_H
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/* Reverse the bytes in a 16-bit value */
-#define SWAP16(val) \
-    ( (uint16_t)( ( ( (uint16_t)(val) & (uint16_t)0x00ffU ) << 8 ) | \
-                  ( ( (uint16_t)(val) & (uint16_t)0xff00U ) >> 8 ) ) )
-
-/* Reverse the bytes in a 32-bit value */
-#define SWAP32(val) \
-    ( (uint32_t)( ( ( (uint32_t)(val) & (uint32_t)0x000000ffU ) << 24 ) | \
-                  ( ( (uint32_t)(val) & (uint32_t)0x0000ff00U ) <<  8 ) | \
-                  ( ( (uint32_t)(val) & (uint32_t)0x00ff0000U ) >>  8 ) | \
-                  ( ( (uint32_t)(val) & (uint32_t)0xff000000U ) >> 24 ) ) )
-
-#ifdef IL_BIGENDIAN
-#define htod32(i) SWAP32(i)
-#define htod16(i) SWAP16(i)
-#define dtoh32(i) SWAP32(i)
-#define dtoh16(i) SWAP16(i)
-#define hton16(i) (i)
-#define hton32(i) (i)
-#define ntoh16(i) (i)
-#define ntoh32(i) (i)
-#else /* IL_BIGENDIAN */
-#define htod32(i) (i)
-#define htod16(i) (i)
-#define dtoh32(i) (i)
-#define dtoh16(i) (i)
-#define hton16(i) SWAP16(i)
-#define hton32(i) SWAP32(i)
-#define ntoh16(i) SWAP16(i)
-#define ntoh32(i) SWAP32(i)
-#endif /* IL_BIGENDIAN */
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-
-#endif /* INCLUDED_WHD_ENDIAN_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_events_int.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_events_int.h
deleted file mode 100644
index a61e8d0c92..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_events_int.h
+++ /dev/null
@@ -1,464 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Header for Event detection
- *
- *  Provides constants and prototypes for functions that allow both
- *  whd and user applications to receive event callbacks.
- */
-
-#include "whd.h"
-
-#ifndef INCLUDED_WHD_EVENTS_INT_H
-#define INCLUDED_WHD_EVENTS_INT_H
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-* @cond       Typedefs
-******************************************************/
-
-/**
- * Enumerated list of event types
- */
-typedef enum
-{
-    WLC_E_NONE = 0x7FFFFFFE,
-    WLC_E_SET_SSID = 0 /** indicates status of set SSID */,
-    WLC_E_JOIN = 1,     /** differentiates join IBSS from found (WLC_E_START) IBSS */
-    WLC_E_START = 2,     /** STA founded an IBSS or AP started a BSS */
-    WLC_E_AUTH = 3,     /** 802.11 AUTH request */
-    WLC_E_AUTH_IND = 4,     /** 802.11 AUTH indication */
-    WLC_E_DEAUTH = 5,     /** 802.11 DEAUTH request */
-    WLC_E_DEAUTH_IND = 6,     /** 802.11 DEAUTH indication */
-    WLC_E_ASSOC = 7,     /** 802.11 ASSOC request */
-    WLC_E_ASSOC_IND = 8,     /** 802.11 ASSOC indication */
-    WLC_E_REASSOC = 9,     /** 802.11 REASSOC request */
-    WLC_E_REASSOC_IND = 10,     /** 802.11 REASSOC indication */
-    WLC_E_DISASSOC = 11,     /** 802.11 DISASSOC request */
-    WLC_E_DISASSOC_IND = 12,     /** 802.11 DISASSOC indication */
-    WLC_E_QUIET_START = 13,     /** 802.11h Quiet period started */
-    WLC_E_QUIET_END = 14,     /** 802.11h Quiet period ended */
-    WLC_E_BEACON_RX = 15,     /** BEACONS received/lost indication */
-    WLC_E_LINK = 16,     /** generic link indication */
-    WLC_E_MIC_ERROR = 17,     /** TKIP MIC error occurred */
-    WLC_E_NDIS_LINK = 18,     /** NDIS style link indication */
-    WLC_E_ROAM = 19,     /** roam attempt occurred: indicate status & reason */
-    WLC_E_TXFAIL = 20,     /** change in dot11FailedCount (txfail) */
-    WLC_E_PMKID_CACHE = 21,     /** WPA2 pmkid cache indication */
-    WLC_E_RETROGRADE_TSF = 22,     /** current AP's TSF value went backward */
-    WLC_E_PRUNE = 23,     /** AP was pruned from join list for reason */
-    WLC_E_AUTOAUTH = 24,     /** report AutoAuth table entry match for join attempt */
-    WLC_E_EAPOL_MSG = 25,     /** Event encapsulating an EAPOL message */
-    WLC_E_SCAN_COMPLETE = 26,     /** Scan results are ready or scan was aborted */
-    WLC_E_ADDTS_IND = 27,     /** indicate to host addts fail/success */
-    WLC_E_DELTS_IND = 28,     /** indicate to host delts fail/success */
-    WLC_E_BCNSENT_IND = 29,     /** indicate to host of beacon transmit */
-    WLC_E_BCNRX_MSG = 30,     /** Send the received beacon up to the host */
-    WLC_E_BCNLOST_MSG = 31,     /** indicate to host loss of beacon */
-    WLC_E_ROAM_PREP = 32,     /** before attempting to roam */
-    WLC_E_PFN_NET_FOUND = 33,     /** PFN network found event */
-    WLC_E_PFN_NET_LOST = 34,     /** PFN network lost event */
-    WLC_E_RESET_COMPLETE = 35, WLC_E_JOIN_START = 36, WLC_E_ROAM_START = 37, WLC_E_ASSOC_START = 38,
-    WLC_E_IBSS_ASSOC = 39, WLC_E_RADIO = 40, WLC_E_PSM_WATCHDOG = 41,                                                                                                      /** PSM microcode watchdog fired */
-    WLC_E_CCX_ASSOC_START = 42,     /** CCX association start */
-    WLC_E_CCX_ASSOC_ABORT = 43,     /** CCX association abort */
-    WLC_E_PROBREQ_MSG = 44,     /** probe request received */
-    WLC_E_SCAN_CONFIRM_IND = 45, WLC_E_PSK_SUP = 46,     /** WPA Handshake */
-    WLC_E_COUNTRY_CODE_CHANGED = 47, WLC_E_EXCEEDED_MEDIUM_TIME = 48,     /** WMMAC excedded medium time */
-    WLC_E_ICV_ERROR = 49,     /** WEP ICV error occurred */
-    WLC_E_UNICAST_DECODE_ERROR = 50,     /** Unsupported unicast encrypted frame */
-    WLC_E_MULTICAST_DECODE_ERROR = 51,     /** Unsupported multicast encrypted frame */
-    WLC_E_TRACE = 52, WLC_E_BTA_HCI_EVENT = 53,     /** BT-AMP HCI event */
-    WLC_E_IF = 54,     /** I/F change (for wlan host notification) */
-    WLC_E_P2P_DISC_LISTEN_COMPLETE = 55,     /** P2P Discovery listen state expires */
-    WLC_E_RSSI = 56,     /** indicate RSSI change based on configured levels */
-    WLC_E_PFN_BEST_BATCHING = 57,     /** PFN best network batching event */
-    WLC_E_EXTLOG_MSG = 58, WLC_E_ACTION_FRAME = 59,     /** Action frame reception */
-    WLC_E_ACTION_FRAME_COMPLETE = 60,     /** Action frame Tx complete */
-    WLC_E_PRE_ASSOC_IND = 61,     /** assoc request received */
-    WLC_E_PRE_REASSOC_IND = 62,     /** re-assoc request received */
-    WLC_E_CHANNEL_ADOPTED = 63,     /** channel adopted (xxx: obsoleted) */
-    WLC_E_AP_STARTED = 64,     /** AP started */
-    WLC_E_DFS_AP_STOP = 65,     /** AP stopped due to DFS */
-    WLC_E_DFS_AP_RESUME = 66,     /** AP resumed due to DFS */
-    WLC_E_WAI_STA_EVENT = 67,     /** WAI stations event */
-    WLC_E_WAI_MSG = 68,     /** event encapsulating an WAI message */
-    WLC_E_ESCAN_RESULT = 69,     /** escan result event */
-    WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE = 70,     /** action frame off channel complete *//* NOTE - This used to be WLC_E_WAKE_EVENT */
-    WLC_E_PROBRESP_MSG = 71,     /** probe response received */
-    WLC_E_P2P_PROBREQ_MSG = 72,     /** P2P Probe request received */
-    WLC_E_DCS_REQUEST = 73, WLC_E_FIFO_CREDIT_MAP = 74,     /** credits for D11 FIFOs. [AC0,AC1,AC2,AC3,BC_MC,ATIM] */
-    WLC_E_ACTION_FRAME_RX = 75,     /** Received action frame event WITH wl_event_rx_frame_data_t header */
-    WLC_E_WAKE_EVENT = 76,     /** Wake Event timer fired, used for wake WLAN test mode */
-    WLC_E_RM_COMPLETE = 77,     /** Radio measurement complete */
-    WLC_E_HTSFSYNC = 78,     /** Synchronize TSF with the host */
-    WLC_E_OVERLAY_REQ = 79,     /** request an overlay IOCTL/iovar from the host */
-    WLC_E_CSA_COMPLETE_IND = 80, WLC_E_EXCESS_PM_WAKE_EVENT = 81,     /** excess PM Wake Event to inform host  */
-    WLC_E_PFN_SCAN_NONE = 82,     /** no PFN networks around */
-    WLC_E_PFN_SCAN_ALLGONE = 83,     /** last found PFN network gets lost */
-    WLC_E_GTK_PLUMBED = 84, WLC_E_ASSOC_IND_NDIS = 85,     /** 802.11 ASSOC indication for NDIS only */
-    WLC_E_REASSOC_IND_NDIS = 86,     /** 802.11 REASSOC indication for NDIS only */
-    WLC_E_ASSOC_REQ_IE = 87, WLC_E_ASSOC_RESP_IE = 88, WLC_E_ASSOC_RECREATED = 89,     /** association recreated on resume */
-    WLC_E_ACTION_FRAME_RX_NDIS = 90,     /** rx action frame event for NDIS only */
-    WLC_E_AUTH_REQ = 91,     /** authentication request received */
-    WLC_E_TDLS_PEER_EVENT = 92,     /** discovered peer, connected/disconnected peer */
-    WLC_E_MESH_DHCP_SUCCESS = 92,     /** DHCP handshake successful for a mesh interface */
-    WLC_E_SPEEDY_RECREATE_FAIL = 93,     /** fast assoc recreation failed */
-    WLC_E_NATIVE = 94,     /** port-specific event and payload (e.g. NDIS) */
-    WLC_E_PKTDELAY_IND = 95,     /** event for tx pkt delay suddently jump */
-    WLC_E_AWDL_AW = 96,     /** AWDL AW period starts */
-    WLC_E_AWDL_ROLE = 97,     /** AWDL Master/Slave/NE master role event */
-    WLC_E_AWDL_EVENT = 98,     /** Generic AWDL event */
-    WLC_E_NIC_AF_TXS = 99,     /** NIC AF txstatus */
-    WLC_E_NAN = 100,     /** NAN event */
-    WLC_E_BEACON_FRAME_RX = 101, WLC_E_SERVICE_FOUND = 102,     /** desired service found */
-    WLC_E_GAS_FRAGMENT_RX = 103,     /** GAS fragment received */
-    WLC_E_GAS_COMPLETE = 104,     /** GAS sessions all complete */
-    WLC_E_P2PO_ADD_DEVICE = 105,     /** New device found by p2p offload */
-    WLC_E_P2PO_DEL_DEVICE = 106,     /** device has been removed by p2p offload */
-    WLC_E_WNM_STA_SLEEP = 107,     /** WNM event to notify STA enter sleep mode */
-    WLC_E_TXFAIL_THRESH = 108,     /** Indication of MAC tx failures (exhaustion of 802.11 retries) exceeding threshold(s) */
-    WLC_E_PROXD = 109,     /** Proximity Detection event */
-    WLC_E_IBSS_COALESCE = 110,     /** IBSS Coalescing */
-    WLC_E_MESH_PAIRED = 110,     /** Mesh peer found and paired */
-    WLC_E_AWDL_RX_PRB_RESP = 111,     /** AWDL RX Probe response */
-    WLC_E_AWDL_RX_ACT_FRAME = 112,     /** AWDL RX Action Frames */
-    WLC_E_AWDL_WOWL_NULLPKT = 113,     /** AWDL Wowl nulls */
-    WLC_E_AWDL_PHYCAL_STATUS = 114,     /** AWDL Phycal status */
-    WLC_E_AWDL_OOB_AF_STATUS = 115,     /** AWDL OOB AF status */
-    WLC_E_AWDL_SCAN_STATUS = 116,     /** Interleaved Scan status */
-    WLC_E_AWDL_AW_START = 117,     /** AWDL AW Start */
-    WLC_E_AWDL_AW_END = 118,     /** AWDL AW End */
-    WLC_E_AWDL_AW_EXT = 119,     /** AWDL AW Extensions */
-    WLC_E_AWDL_PEER_CACHE_CONTROL = 120, WLC_E_CSA_START_IND = 121, WLC_E_CSA_DONE_IND = 122,
-    WLC_E_CSA_FAILURE_IND = 123, WLC_E_CCA_CHAN_QUAL = 124,                                                                                               /** CCA based channel quality report */
-    WLC_E_BSSID = 125,     /** to report change in BSSID while roaming */
-    WLC_E_TX_STAT_ERROR = 126,     /** tx error indication */
-    WLC_E_BCMC_CREDIT_SUPPORT = 127,     /** credit check for BCMC supported */
-    WLC_E_PSTA_PRIMARY_INTF_IND = 128,     /** psta primary interface indication */
-    WLC_E_BT_WIFI_HANDOVER_REQ = 130,     /* Handover Request Initiated */
-    WLC_E_SPW_TXINHIBIT = 131,     /* Southpaw TxInhibit notification */
-    WLC_E_FBT_AUTH_REQ_IND = 132,     /* FBT Authentication Request Indication */
-    WLC_E_RSSI_LQM = 133,     /* Enhancement addition for WLC_E_RSSI */
-    WLC_E_PFN_GSCAN_FULL_RESULT = 134,     /* Full probe/beacon (IEs etc) results */
-    WLC_E_PFN_SWC = 135,     /* Significant change in rssi of bssids being tracked */
-    WLC_E_AUTHORIZED = 136,     /* a STA been authroized for traffic */
-    WLC_E_PROBREQ_MSG_RX = 137,     /* probe req with wl_event_rx_frame_data_t header */
-    WLC_E_PFN_SCAN_COMPLETE = 138,     /* PFN completed scan of network list */
-    WLC_E_RMC_EVENT = 139,     /* RMC Event */
-    WLC_E_DPSTA_INTF_IND = 140,     /* DPSTA interface indication */
-    WLC_E_RRM = 141,                /* RRM Event */
-    WLC_E_ULP = 146,                /* ULP entry event */
-    WLC_E_TKO = 151,                /* TCP Keep Alive Offload Event */
-    WLC_E_LAST = 152,               /* highest val + 1 for range checking */
-} whd_event_num_t;
-
-#define WLC_SUP_STATUS_OFFSET      (256)
-#define WLC_DOT11_SC_STATUS_OFFSET (512)
-/**
- * Enumerated list of event status codes
- * @note : WLC_SUP values overlap other values, so it is necessary
- *         to check the event type
- */
-typedef enum
-{
-    WLC_E_STATUS_SUCCESS = 0,     /** operation was successful */
-    WLC_E_STATUS_FAIL = 1,     /** operation failed */
-    WLC_E_STATUS_TIMEOUT = 2,     /** operation timed out */
-    WLC_E_STATUS_NO_NETWORKS = 3,     /** failed due to no matching network found */
-    WLC_E_STATUS_ABORT = 4,     /** operation was aborted */
-    WLC_E_STATUS_NO_ACK = 5,     /** protocol failure: packet not ack'd */
-    WLC_E_STATUS_UNSOLICITED = 6,     /** AUTH or ASSOC packet was unsolicited */
-    WLC_E_STATUS_ATTEMPT = 7,     /** attempt to assoc to an auto auth configuration */
-    WLC_E_STATUS_PARTIAL = 8,     /** scan results are incomplete */
-    WLC_E_STATUS_NEWSCAN = 9,     /** scan aborted by another scan */
-    WLC_E_STATUS_NEWASSOC = 10,     /** scan aborted due to assoc in progress */
-    WLC_E_STATUS_11HQUIET = 11,     /** 802.11h quiet period started */
-    WLC_E_STATUS_SUPPRESS = 12,     /** user disabled scanning (WLC_SET_SCANSUPPRESS) */
-    WLC_E_STATUS_NOCHANS = 13,     /** no allowable channels to scan */
-    WLC_E_STATUS_CCXFASTRM = 14,     /** scan aborted due to CCX fast roam */
-    WLC_E_STATUS_CS_ABORT = 15,     /** abort channel select */
-
-    /* for WLC_SUP messages */
-    WLC_SUP_DISCONNECTED = 0 + WLC_SUP_STATUS_OFFSET, WLC_SUP_CONNECTING = 1 + WLC_SUP_STATUS_OFFSET,
-    WLC_SUP_IDREQUIRED = 2 + WLC_SUP_STATUS_OFFSET, WLC_SUP_AUTHENTICATING = 3 + WLC_SUP_STATUS_OFFSET,
-    WLC_SUP_AUTHENTICATED = 4 + WLC_SUP_STATUS_OFFSET, WLC_SUP_KEYXCHANGE = 5 + WLC_SUP_STATUS_OFFSET,
-    WLC_SUP_KEYED = 6 + WLC_SUP_STATUS_OFFSET, WLC_SUP_TIMEOUT = 7 + WLC_SUP_STATUS_OFFSET,
-    WLC_SUP_LAST_BASIC_STATE = 8 + WLC_SUP_STATUS_OFFSET,
-    /* Extended supplicant authentication states */
-    WLC_SUP_KEYXCHANGE_WAIT_M1 = WLC_SUP_AUTHENTICATED,     /** Waiting   to receive handshake msg M1 */
-    WLC_SUP_KEYXCHANGE_PREP_M2 = WLC_SUP_KEYXCHANGE,     /** Preparing to send    handshake msg M2 */
-    WLC_SUP_KEYXCHANGE_WAIT_M3 = WLC_SUP_LAST_BASIC_STATE,     /** Waiting   to receive handshake msg M3 */
-    WLC_SUP_KEYXCHANGE_PREP_M4 = 9 + WLC_SUP_STATUS_OFFSET,     /** Preparing to send    handshake msg M4 */
-    WLC_SUP_KEYXCHANGE_WAIT_G1 = 10 + WLC_SUP_STATUS_OFFSET,     /** Waiting   to receive handshake msg G1 */
-    WLC_SUP_KEYXCHANGE_PREP_G2 = 11 + WLC_SUP_STATUS_OFFSET,     /** Preparing to send    handshake msg G2 */
-
-    WLC_DOT11_SC_SUCCESS = 0 + WLC_DOT11_SC_STATUS_OFFSET,     /* Successful */
-    WLC_DOT11_SC_FAILURE = 1 + WLC_DOT11_SC_STATUS_OFFSET,     /* Unspecified failure */
-    WLC_DOT11_SC_CAP_MISMATCH = 10 + WLC_DOT11_SC_STATUS_OFFSET,     /* Cannot support all requested capabilities in the Capability Information field */
-    WLC_DOT11_SC_REASSOC_FAIL = 11 + WLC_DOT11_SC_STATUS_OFFSET,     /* Reassociation denied due to inability to confirm that association exists */
-    WLC_DOT11_SC_ASSOC_FAIL = 12 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied due to reason outside the scope of this standard */
-    WLC_DOT11_SC_AUTH_MISMATCH = 13 + WLC_DOT11_SC_STATUS_OFFSET,     /* Responding station does not support the specified authentication algorithm */
-    WLC_DOT11_SC_AUTH_SEQ = 14 + WLC_DOT11_SC_STATUS_OFFSET,     /* Received an Authentication frame with authentication transaction sequence number out of expected sequence */
-    WLC_DOT11_SC_AUTH_CHALLENGE_FAIL = 15 + WLC_DOT11_SC_STATUS_OFFSET,     /* Authentication rejected because of challenge failure */
-    WLC_DOT11_SC_AUTH_TIMEOUT = 16 + WLC_DOT11_SC_STATUS_OFFSET,     /* Authentication rejected due to timeout waiting for next frame in sequence */
-    WLC_DOT11_SC_ASSOC_BUSY_FAIL = 17 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied because AP is unable to handle additional associated stations */
-    WLC_DOT11_SC_ASSOC_RATE_MISMATCH = 18 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied due to requesting station not supporting all of the data rates in the BSSBasicRateSet parameter */
-    WLC_DOT11_SC_ASSOC_SHORT_REQUIRED = 19 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied due to requesting station not supporting the Short Preamble option */
-    WLC_DOT11_SC_ASSOC_PBCC_REQUIRED = 20 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied due to requesting  station not supporting the PBCC Modulation option */
-    WLC_DOT11_SC_ASSOC_AGILITY_REQUIRED = 21 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied due to requesting station not supporting the Channel Agility option */
-    WLC_DOT11_SC_ASSOC_SPECTRUM_REQUIRED = 22 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied because Spectrum Management capability is required. */
-    WLC_DOT11_SC_ASSOC_BAD_POWER_CAP = 23 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied because the info in the Power Cap element is unacceptable. */
-    WLC_DOT11_SC_ASSOC_BAD_SUP_CHANNELS = 24 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied because the info in the Supported Channel element is unacceptable */
-    WLC_DOT11_SC_ASSOC_SHORTSLOT_REQUIRED = 25 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied due to requesting station not supporting the Short Slot Time option */
-    WLC_DOT11_SC_ASSOC_ERPBCC_REQUIRED = 26 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied due to requesting station not supporting the ER-PBCC Modulation option */
-    WLC_DOT11_SC_ASSOC_DSSOFDM_REQUIRED = 27 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied due to requesting station not supporting the DSS-OFDM option */
-    WLC_DOT11_SC_DECLINED = 37 + WLC_DOT11_SC_STATUS_OFFSET,     /* request declined */
-    WLC_DOT11_SC_INVALID_PARAMS = 38 + WLC_DOT11_SC_STATUS_OFFSET,     /* One or more params have invalid values */
-    WLC_DOT11_SC_INVALID_AKMP = 43 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied due to invalid AKMP */
-    WLC_DOT11_SC_INVALID_MDID = 54 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied due to invalid MDID */
-    WLC_DOT11_SC_INVALID_FTIE = 55 + WLC_DOT11_SC_STATUS_OFFSET,     /* Association denied due to invalid FTIE */
-
-    WLC_E_STATUS_FORCE_32_BIT = 0x7FFFFFFE     /** Force enum to be stored in 32 bit variable */
-} whd_event_status_t;
-
-#define WLC_E_PRUNE_REASON_OFFSET    (256)
-#define WLC_E_SUP_REASON_OFFSET      (512)
-#define WLC_E_DOT11_RC_REASON_OFFSET (768)
-
-/**
- * Enumerated list of event reason codes
- * @note : Several values overlap other values, so it is necessary
- *         to check the event type
- */
-typedef enum
-{
-    /* roam reason codes */
-    WLC_E_REASON_INITIAL_ASSOC = 0,     /** initial assoc */
-    WLC_E_REASON_LOW_RSSI = 1,     /** roamed due to low RSSI */
-    WLC_E_REASON_DEAUTH = 2,     /** roamed due to DEAUTH indication */
-    WLC_E_REASON_DISASSOC = 3,     /** roamed due to DISASSOC indication */
-    WLC_E_REASON_BCNS_LOST = 4,     /** roamed due to lost beacons */
-    WLC_E_REASON_FAST_ROAM_FAILED = 5,     /** roamed due to fast roam failure */
-    WLC_E_REASON_DIRECTED_ROAM = 6,     /** roamed due to request by AP */
-    WLC_E_REASON_TSPEC_REJECTED = 7,     /** roamed due to TSPEC rejection */
-    WLC_E_REASON_BETTER_AP = 8,     /** roamed due to finding better AP */
-
-    /* NAN sub-events comes as a reason code with event as WLC_E_NAN */
-    WLC_E_NAN_EVENT_STATUS_CHG = 9,     /* generated on any change in nan_mac status */
-    WLC_E_NAN_EVENT_MERGE = 10,     /* Merged to a NAN cluster */
-    WLC_E_NAN_EVENT_STOP = 11,     /* NAN stopped */
-    WLC_E_NAN_EVENT_P2P = 12,     /* NAN P2P EVENT */
-
-    /* XXX: Dont use below four events: They will be cleanup, use WL_NAN_EVENT_POST_DISC */
-    WLC_E_NAN_EVENT_WINDOW_BEGIN_P2P = 13,     /* Event for begin of P2P further availability window */
-    WLC_E_NAN_EVENT_WINDOW_BEGIN_MESH = 14, WLC_E_NAN_EVENT_WINDOW_BEGIN_IBSS = 15,
-    WLC_E_NAN_EVENT_WINDOW_BEGIN_RANGING = 16, WLC_E_NAN_EVENT_POST_DISC = 17,                                                                                     /* Event for post discovery data */
-    WLC_E_NAN_EVENT_DATA_IF_ADD = 18,     /* Event for Data IF add */
-    WLC_E_NAN_EVENT_DATA_PEER_ADD = 19,     /* Event for peer add */
-
-    /* nan 2.0 */
-    WLC_E_NAN_EVENT_DATA_IND = 20,     /* Data Indication to Host */
-    WLC_E_NAN_EVENT_DATA_CONF = 21,     /* Data Response to Host */
-    WLC_E_NAN_EVENT_SDF_RX = 22,     /* entire service discovery frame */
-    WLC_E_NAN_EVENT_DATA_END = 23, WLC_E_NAN_EVENT_BCN_RX = 24,     /* received beacon payload */
-
-    /* prune reason codes */
-    WLC_E_PRUNE_ENCR_MISMATCH = 1 + WLC_E_PRUNE_REASON_OFFSET,     /** encryption mismatch */
-    WLC_E_PRUNE_BCAST_BSSID = 2 + WLC_E_PRUNE_REASON_OFFSET,     /** AP uses a broadcast BSSID */
-    WLC_E_PRUNE_MAC_DENY = 3 + WLC_E_PRUNE_REASON_OFFSET,     /** STA's MAC addr is in AP's MAC deny list */
-    WLC_E_PRUNE_MAC_NA = 4 + WLC_E_PRUNE_REASON_OFFSET,     /** STA's MAC addr is not in AP's MAC allow list */
-    WLC_E_PRUNE_REG_PASSV = 5 + WLC_E_PRUNE_REASON_OFFSET,     /** AP not allowed due to regulatory restriction */
-    WLC_E_PRUNE_SPCT_MGMT = 6 + WLC_E_PRUNE_REASON_OFFSET,     /** AP does not support STA locale spectrum mgmt */
-    WLC_E_PRUNE_RADAR = 7 + WLC_E_PRUNE_REASON_OFFSET,     /** AP is on a radar channel of STA locale */
-    WLC_E_RSN_MISMATCH = 8 + WLC_E_PRUNE_REASON_OFFSET,     /** STA does not support AP's RSN */
-    WLC_E_PRUNE_NO_COMMON_RATES = 9 + WLC_E_PRUNE_REASON_OFFSET,     /** No rates in common with AP */
-    WLC_E_PRUNE_BASIC_RATES = 10 + WLC_E_PRUNE_REASON_OFFSET,     /** STA does not support all basic rates of BSS */
-    WLC_E_PRUNE_CCXFAST_PREVAP = 11 + WLC_E_PRUNE_REASON_OFFSET,     /** CCX FAST ROAM: prune previous AP */
-    WLC_E_PRUNE_CIPHER_NA = 12 + WLC_E_PRUNE_REASON_OFFSET,     /** BSS's cipher not supported */
-    WLC_E_PRUNE_KNOWN_STA = 13 + WLC_E_PRUNE_REASON_OFFSET,     /** AP is already known to us as a STA */
-    WLC_E_PRUNE_CCXFAST_DROAM = 14 + WLC_E_PRUNE_REASON_OFFSET,     /** CCX FAST ROAM: prune unqualified AP */
-    WLC_E_PRUNE_WDS_PEER = 15 + WLC_E_PRUNE_REASON_OFFSET,     /** AP is already known to us as a WDS peer */
-    WLC_E_PRUNE_QBSS_LOAD = 16 + WLC_E_PRUNE_REASON_OFFSET,     /** QBSS LOAD - AAC is too low */
-    WLC_E_PRUNE_HOME_AP = 17 + WLC_E_PRUNE_REASON_OFFSET,     /** prune home AP */
-    WLC_E_PRUNE_AP_BLOCKED = 18 + WLC_E_PRUNE_REASON_OFFSET,     /** prune blocked AP */
-    WLC_E_PRUNE_NO_DIAG_SUPPORT = 19 + WLC_E_PRUNE_REASON_OFFSET,     /** prune due to diagnostic mode not supported */
-
-    /* WPA failure reason codes carried in the WLC_E_PSK_SUP event */
-    WLC_E_SUP_OTHER = 0 + WLC_E_SUP_REASON_OFFSET,     /** Other reason */
-    WLC_E_SUP_DECRYPT_KEY_DATA = 1 + WLC_E_SUP_REASON_OFFSET,     /** Decryption of key data failed */
-    WLC_E_SUP_BAD_UCAST_WEP128 = 2 + WLC_E_SUP_REASON_OFFSET,     /** Illegal use of ucast WEP128 */
-    WLC_E_SUP_BAD_UCAST_WEP40 = 3 + WLC_E_SUP_REASON_OFFSET,     /** Illegal use of ucast WEP40 */
-    WLC_E_SUP_UNSUP_KEY_LEN = 4 + WLC_E_SUP_REASON_OFFSET,     /** Unsupported key length */
-    WLC_E_SUP_PW_KEY_CIPHER = 5 + WLC_E_SUP_REASON_OFFSET,     /** Unicast cipher mismatch in pairwise key */
-    WLC_E_SUP_MSG3_TOO_MANY_IE = 6 + WLC_E_SUP_REASON_OFFSET,     /** WPA IE contains > 1 RSN IE in key msg 3 */
-    WLC_E_SUP_MSG3_IE_MISMATCH = 7 + WLC_E_SUP_REASON_OFFSET,     /** WPA IE mismatch in key message 3 */
-    WLC_E_SUP_NO_INSTALL_FLAG = 8 + WLC_E_SUP_REASON_OFFSET,     /** INSTALL flag unset in 4-way msg */
-    WLC_E_SUP_MSG3_NO_GTK = 9 + WLC_E_SUP_REASON_OFFSET,     /** encapsulated GTK missing from msg 3 */
-    WLC_E_SUP_GRP_KEY_CIPHER = 10 + WLC_E_SUP_REASON_OFFSET,     /** Multicast cipher mismatch in group key */
-    WLC_E_SUP_GRP_MSG1_NO_GTK = 11 + WLC_E_SUP_REASON_OFFSET,     /** encapsulated GTK missing from group msg 1 */
-    WLC_E_SUP_GTK_DECRYPT_FAIL = 12 + WLC_E_SUP_REASON_OFFSET,     /** GTK decrypt failure */
-    WLC_E_SUP_SEND_FAIL = 13 + WLC_E_SUP_REASON_OFFSET,     /** message send failure */
-    WLC_E_SUP_DEAUTH = 14 + WLC_E_SUP_REASON_OFFSET,     /** received FC_DEAUTH */
-    WLC_E_SUP_WPA_PSK_TMO = 15 + WLC_E_SUP_REASON_OFFSET,     /** WPA PSK 4-way handshake timeout */
-
-    DOT11_RC_RESERVED = 0 + WLC_E_DOT11_RC_REASON_OFFSET,     /* d11 RC reserved */
-    DOT11_RC_UNSPECIFIED = 1 + WLC_E_DOT11_RC_REASON_OFFSET,     /* Unspecified reason */
-    DOT11_RC_AUTH_INVAL = 2 + WLC_E_DOT11_RC_REASON_OFFSET,     /* Previous authentication no longer valid */
-    DOT11_RC_DEAUTH_LEAVING = 3 + WLC_E_DOT11_RC_REASON_OFFSET,     /* Deauthenticated because sending station is leaving (or has left) IBSS or ESS */
-    DOT11_RC_INACTIVITY = 4 + WLC_E_DOT11_RC_REASON_OFFSET,     /* Disassociated due to inactivity */
-    DOT11_RC_BUSY = 5 + WLC_E_DOT11_RC_REASON_OFFSET,     /* Disassociated because AP is unable to handle all currently associated stations */
-    DOT11_RC_INVAL_CLASS_2 = 6 + WLC_E_DOT11_RC_REASON_OFFSET,     /* Class 2 frame received from nonauthenticated station */
-    DOT11_RC_INVAL_CLASS_3 = 7 + WLC_E_DOT11_RC_REASON_OFFSET,     /* Class 3 frame received from nonassociated station */
-    DOT11_RC_DISASSOC_LEAVING = 8 + WLC_E_DOT11_RC_REASON_OFFSET,     /* Disassociated because sending station is leaving (or has left) BSS */
-    DOT11_RC_NOT_AUTH = 9 + WLC_E_DOT11_RC_REASON_OFFSET,     /* Station requesting (re)association is not * authenticated with responding station */
-    DOT11_RC_BAD_PC = 10 + WLC_E_DOT11_RC_REASON_OFFSET,     /* Unacceptable power capability element */
-    DOT11_RC_BAD_CHANNELS = 11 + WLC_E_DOT11_RC_REASON_OFFSET,     /* Unacceptable supported channels element */
-    /* 12 is unused */
-    /* XXX 13-23 are WPA/802.11i reason codes defined in proto/wpa.h */
-    /* 32-39 are QSTA specific reasons added in 11e */
-    DOT11_RC_UNSPECIFIED_QOS = 32 + WLC_E_DOT11_RC_REASON_OFFSET,     /* unspecified QoS-related reason */
-    DOT11_RC_INSUFFCIENT_BW = 33 + WLC_E_DOT11_RC_REASON_OFFSET,     /* QAP lacks sufficient bandwidth */
-    DOT11_RC_EXCESSIVE_FRAMES = 34 + WLC_E_DOT11_RC_REASON_OFFSET,     /* excessive number of frames need ack */
-    DOT11_RC_TX_OUTSIDE_TXOP = 35 + WLC_E_DOT11_RC_REASON_OFFSET,     /* transmitting outside the limits of txop */
-    DOT11_RC_LEAVING_QBSS = 36 + WLC_E_DOT11_RC_REASON_OFFSET,     /* QSTA is leaving the QBSS (or restting) */
-    DOT11_RC_BAD_MECHANISM = 37 + WLC_E_DOT11_RC_REASON_OFFSET,     /* does not want to use the mechanism */
-    DOT11_RC_SETUP_NEEDED = 38 + WLC_E_DOT11_RC_REASON_OFFSET,     /* mechanism needs a setup */
-    DOT11_RC_TIMEOUT = 39 + WLC_E_DOT11_RC_REASON_OFFSET,     /* timeout */
-    DOT11_RC_MAX = 23 + WLC_E_DOT11_RC_REASON_OFFSET,     /* Reason codes > 23 are reserved */
-
-    WLC_E_REASON_FORCE_32_BIT = 0x7FFFFFFE     /** Force enum to be stored in 32 bit variable */
-} whd_event_reason_t;
-
-typedef enum
-{
-    WLC_E_NAN_EVENT_START = 1,     /* NAN cluster started */
-    WLC_E_NAN_EVENT_JOIN = 2,     /* Joined to a NAN cluster */
-    WLC_E_NAN_EVENT_ROLE = 3,     /* Role or State changed */
-    WLC_E_NAN_EVENT_SCAN_COMPLETE = 4, WLC_E_NAN_EVENT_DISCOVERY_RESULT = 5, WLC_E_NAN_EVENT_REPLIED = 6,
-    WLC_E_NAN_EVENT_TERMINATED = 7,                                                                                                           /* the instance ID will be present in the ev data */
-    WLC_E_NAN_EVENT_RECEIVE = 8
-
-} whd_nan_events_t;
-
-/**
- * Event handler prototype definition
- *
- * @param[out] whd_event_header_t : whd event header
- * @param[out] uint8_t*           : event data
- * @param[out] handler_user_data  : semaphore data
- */
-typedef void *(*whd_event_handler_t)(whd_interface_t ifp, const whd_event_header_t *event_header,
-                                     const uint8_t *event_data, void *handler_user_data);
-/** @endcond */
-
-
-extern whd_result_t whd_management_set_event_handler_locally(whd_interface_t ifp,
-                                                             const whd_event_num_t *event_nums,
-                                                             whd_event_handler_t handler_func,
-                                                             void *handler_user_data, uint16_t *event_index);
-
-extern whd_result_t whd_management_set_event_handler(whd_interface_t ifp, const whd_event_num_t *event_nums,
-                                                     whd_event_handler_t handler_func,
-                                                     void *handler_user_data, uint16_t *event_index);
-
-extern uint32_t whd_wifi_set_event_handler(whd_interface_t ifp, const uint32_t *event_type,
-                                           whd_event_handler_t handler_func,
-                                           void *handler_user_data, uint16_t *event_index);
-
-extern uint32_t whd_wifi_deregister_event_handler(whd_interface_t ifp, uint16_t event_index);
-
-/** @cond */
-
-//extern void* whd_rrm_report_handler( const whd_event_header_t* event_header, const uint8_t* event_data, void* handler_user_data );
-
-extern void *whd_nan_scan_handler(const whd_event_header_t *event_header, const uint8_t *event_data,
-                                  void *handler_user_data);
-
-#define WHD_MSG_IFNAME_MAX 16
-
-/* Maximum number of events registered at a time */
-#define WHD_MAX_EVENT_SUBSCRIPTION 33
-
-#define WHD_EVENT_NOT_REGISTERED 0xFF
-/* Enum to index and find the entry of paricular event registered */
-typedef enum
-{
-    WHD_SCAN_EVENT_ENTRY       = 0,
-    WHD_JOIN_EVENT_ENTRY,
-    WHD_AP_EVENT_ENTRY,
-    WHD_P2P_EVENT_ENTRY,
-    WHD_EVENT_ENTRY_MAX
-} whd_event_entry_t;
-
-#pragma pack(1)
-typedef struct whd_event_eth_hdr
-{
-    uint16_t subtype;      /** Vendor specific..32769 */
-    uint16_t length;
-    uint8_t version;       /** Version is 0 */
-    uint8_t oui[3];        /**  OUI */
-    uint16_t usr_subtype;  /** user specific Data */
-} whd_event_eth_hdr_t;
-
-typedef struct whd_event_ether_header
-{
-    whd_mac_t destination_address;
-    whd_mac_t source_address;
-    uint16_t ethertype;
-} whd_event_ether_header_t;
-
-struct whd_event_msg
-{
-    uint16_t version;
-    uint16_t flags;                 /* see flags below */
-    uint32_t event_type;            /* Message (see below) */
-    uint32_t status;                /* Status code (see below) */
-    uint32_t reason;                /* Reason code (if applicable) */
-    uint32_t auth_type;             /* WLC_E_AUTH */
-    uint32_t datalen;               /* data buf */
-    whd_mac_t addr;                 /* Station address (if applicable) */
-    char ifname[WHD_MSG_IFNAME_MAX];               /* name of the packet incoming interface */
-    uint8_t ifidx;                                 /* destination OS i/f index */
-    uint8_t bsscfgidx;                             /* source bsscfg index */
-};
-
-/* used by driver msgs */
-typedef struct whd_event
-{
-    whd_event_ether_header_t eth;
-    whd_event_eth_hdr_t eth_evt_hdr;
-    whd_event_header_t whd_event;
-    /* data portion follows */
-} whd_event_t;
-
-#pragma pack()
-
-/** @endcond */
-
-/** @} */
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-#endif /* ifndef INCLUDED_WHD_EVENTS_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_int.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_int.h
deleted file mode 100644
index 142c0f231a..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_int.h
+++ /dev/null
@@ -1,113 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Header for whd_driver structure
- */
-
-#ifndef INCLUDED_WHD_INT_H
-#define INCLUDED_WHD_INT_H
-
-#include "whd_thread.h"
-#include "whd_sdpcm.h"
-#include "whd_cdc_bdc.h"
-#include "whd_chip.h"
-#include "whd_ap.h"
-#include "whd_debug.h"
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-typedef struct
-{
-    uint32_t tx_total; /* Total number of TX packets sent from WHD */
-    uint32_t rx_total; /* Total number of RX packets received at WHD */
-    uint32_t tx_no_mem; /* Number of times WHD could not send due to no buffer */
-    uint32_t rx_no_mem; /* Number of times WHD could not receive due to no buffer */
-    uint32_t tx_fail; /* Number of times TX packet failed */
-    uint32_t no_credit; /* Number of times WHD could not send due to no credit */
-    uint32_t flow_control; /* Number of times WHD Flow control is enabled */
-    uint32_t internal_host_buffer_fail_with_timeout; /* Internal host buffer get failed after timeout */
-} whd_stats_t;
-
-#define WHD_INTERFACE_MAX 3
-typedef enum
-{
-    WHD_INVALID_ROLE           = 0,
-    WHD_STA_ROLE               = 1,         /**< STA or Client Interface     */
-    WHD_AP_ROLE                = 2,         /**< softAP Interface  */
-    WHD_P2P_ROLE               = 3,         /**< P2P Interface  */
-} whd_interface_role_t;
-
-
-struct whd_interface
-{
-    whd_driver_t whd_driver;
-    uint8_t ifidx;
-    uint8_t bsscfgidx;
-
-    char if_name[WHD_MSG_IFNAME_MAX];
-    whd_interface_role_t role;
-    whd_mac_t mac_addr;
-    uint8_t event_reg_list[WHD_EVENT_ENTRY_MAX];
-    whd_bool_t state;
-};
-
-struct whd_driver
-{
-    whd_interface_t iflist[WHD_INTERFACE_MAX];
-    uint8_t if2ifp[WHD_INTERFACE_MAX];
-
-    /* Bus variables */
-    struct whd_bus_info *bus_if;
-    struct whd_bus_priv *bus_priv;
-    struct whd_bus_common_info *bus_common_info;
-    whd_buffer_funcs_t *buffer_if;
-    whd_netif_funcs_t *network_if;
-    whd_resource_source_t *resource_if;
-
-    whd_bool_t bus_gspi_32bit;
-
-    whd_thread_info_t thread_info;
-    whd_cdc_bdc_info_t cdc_bdc_info;
-    whd_sdpcm_info_t sdpcm_info;
-    whd_internal_info_t internal_info;
-    whd_ap_int_info_t ap_info;
-    whd_chip_info_t chip_info;
-
-    whd_stats_t whd_stats;
-    whd_country_code_t country;
-
-    whd_ioctl_log_t whd_ioctl_log[WHD_IOCTL_LOG_SIZE];
-    int whd_ioctl_log_index;
-};
-
-whd_result_t whd_add_interface(whd_driver_t whd_driver, uint8_t bsscfgidx, uint8_t ifidx,
-                               const char *name, whd_mac_t *mac_addr,  whd_interface_t *ifpp);
-
-whd_result_t whd_add_primary_interface(whd_driver_t whd_driver, whd_interface_t *ifpp);
-
-whd_interface_t whd_get_primary_interface(whd_driver_t whd_driver);
-
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-#endif /* INCLUDED_WHD_INT_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_network_if.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_network_if.h
deleted file mode 100644
index 8cd531eaa5..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_network_if.h
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Provides prototypes / declarations for common APSTA functionality
- */
-#ifndef _WHD_INTERNAL_NETWORK_API_H_
-#define _WHD_INTERNAL_NETWORK_API_H_
-
-#include "whd.h"
-#include "whd_int.h"
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-*                      Macros
-******************************************************/
-
-/******************************************************
-*             Structures
-******************************************************/
-
-/******************************************************
-*             Function prototypes
-******************************************************/
-/** Called by WHD to pass received data to the network stack
- *
- *
- *  Packets received from the Wi-Fi network by WHD are forwarded to by calling function ptr which
- *  must be implemented in the network interface. Ethernet headers
- *  are present at the start of these packet buffers.
- *
- *  This function is called asynchronously in the context of the
- *  WHD thread whenever new data has arrived.
- *  Packet buffers are allocated within WHD, and ownership is transferred
- *  to the network stack. The network stack or application is thus
- *  responsible for releasing the packet buffers.
- *  Most packet buffering systems have a pointer to the 'current point' within
- *  the packet buffer. When this function is called, the pointer points
- *  to the start of the Ethernet header. There is other inconsequential data
- *  before the Ethernet header.
- *
- *  It is preferable that the (whd_network_process_ethernet_data)() function simply puts
- *  the received packet on a queue for processing by another thread. This avoids the
- *  WHD thread being unnecessarily tied up which would delay other packets
- *  being transmitted or received.
- *
- *  @param interface : The interface on which the packet was received.
- *  @param buffer    : Handle of the packet which has just been received. Responsibility for
- *                    releasing this buffer is transferred from WHD at this point.
- *
- */
-whd_result_t whd_network_process_ethernet_data(whd_interface_t ifp, whd_buffer_t buffer);
-#ifdef __cplusplus
-} /*extern "C" */
-#endif
-
-#endif /* ifndef _WHD_INTERNAL_NETWORK_API_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_poll.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_poll.h
deleted file mode 100644
index 8bdc3e790e..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_poll.h
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Header for using WHD with no RTOS or network stack
- *
- *  It is possible to use these WHD without any operating system. To do this,
- *  the user application is required to periodically use the functions in this
- *  file to allow WHD to send and receive data across the SPI/SDIO bus.
- *
- */
-
-#include "whd.h"
-
-#ifndef INCLUDED_WHD_POLL_H
-#define INCLUDED_WHD_POLL_H
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-*             Function declarations
-******************************************************/
-
-
-/** Sends the first queued packet
- *
- * Checks the queue to determine if there is any packets waiting
- * to be sent. If there are, then it sends the first one.
- *
- * This function is normally used by the WHD Thread, but can be
- * called periodically by systems which have no RTOS to ensure
- * packets get sent.
- *
- * @return    1 : packet was sent
- *            0 : no packet sent
- */
-extern int8_t whd_thread_send_one_packet(whd_driver_t whd_driver);
-
-
-/** Receives a packet if one is waiting
- *
- * Checks the wifi chip fifo to determine if there is any packets waiting
- * to be received. If there are, then it receives the first one, and calls
- * the callback @ref whd_sdpcm_process_rx_packet (in whd_sdpcm.c).
- *
- * This function is normally used by the WHD Thread, but can be
- * called periodically by systems which have no RTOS to ensure
- * packets get received properly.
- *
- * @return    1 : packet was received
- *            0 : no packet waiting
- */
-extern int8_t whd_thread_receive_one_packet(whd_driver_t whd_driver);
-
-
-/** Sends and Receives all waiting packets
- *
- * Repeatedly calls whd_thread_send_one_packet and whd_thread_receive_one_packet
- * to send and receive packets, until there are no more packets waiting to
- * be transferred.
- *
- * This function is normally used by the WHD Thread, but can be
- * called periodically by systems which have no RTOS to ensure
- * packets get send and received properly.
- *
- * @return    1 : packet was sent or received
- *            0 : no packet was sent or received
- */
-extern int8_t whd_thread_poll_all(whd_driver_t whd_driver);
-
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-#endif /* ifndef INCLUDED_WHD_POLL_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_resource_if.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_resource_if.h
deleted file mode 100644
index ae83312bf4..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_resource_if.h
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Provides prototypes / declarations for common APSTA functionality
- */
-#ifndef _WHD_INTERNAL_RESOURCE_API_H_
-#define _WHD_INTERNAL_RESOURCE_API_H_
-
-#include "whd.h"
-#include "whd_int.h"
-#include "whd_resource_api.h"
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-*                      Macros
-******************************************************/
-
-/******************************************************
-*             Structures
-******************************************************/
-
-/******************************************************
-*             Function prototypes
-******************************************************/
-uint32_t whd_resource_size(whd_driver_t whd_driver, whd_resource_type_t resource, uint32_t *size_out);
-uint32_t whd_get_resource_block_size(whd_driver_t whd_drv, whd_resource_type_t type, uint32_t *size_out);
-uint32_t whd_get_resource_no_of_blocks(whd_driver_t whd_drv, whd_resource_type_t type, uint32_t *block_count);
-uint32_t whd_get_resource_block(whd_driver_t whd_driver, whd_resource_type_t type,
-                                uint32_t blockno, const uint8_t **data, uint32_t *size_out);
-
-#ifdef __cplusplus
-} /*extern "C" */
-#endif
-
-#endif /* ifndef _WHD_INTERNAL_RESOURCE_API_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_sdpcm.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_sdpcm.h
deleted file mode 100644
index 5a7424b04c..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_sdpcm.h
+++ /dev/null
@@ -1,124 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Provides whd with function prototypes for IOCTL commands,
- *  and for communicating with the SDPCM module
- *
- */
-
-#ifndef INCLUDED_WHD_SDPCM_H
-#define INCLUDED_WHD_SDPCM_H
-
-#include "whd.h"
-#include "whd_events_int.h"
-#include "cyabs_rtos.h"
-#include "whd_network_types.h"
-#include "whd_types_int.h"
-#include "whd_cdc_bdc.h"
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-*             Constants
-******************************************************/
-typedef enum
-{
-    DATA_HEADER       = 2,
-    ASYNCEVENT_HEADER = 1,
-    CONTROL_HEADER    = 0
-} sdpcm_header_type_t;
-
-/******************************************************
-*             Macros
-******************************************************/
-
-#define BUS_HEADER_LEN  (12)
-#define IOCTL_OFFSET (sizeof(whd_buffer_header_t) + 12 + 16)
-
-/******************************************************
-*             Structures
-******************************************************/
-typedef struct whd_sdpcm_info
-{
-    /* Bus data credit variables */
-    uint8_t packet_transmit_sequence_number;
-    uint8_t last_bus_data_credit;
-    uint8_t credit_diff;
-    uint8_t largest_credit_diff;
-
-    /* Packet send queue variables */
-    cy_semaphore_t send_queue_mutex;
-    whd_buffer_t send_queue_head;
-    whd_buffer_t send_queue_tail;
-
-} whd_sdpcm_info_t;
-
-typedef struct
-{
-    whd_buffer_header_t buffer_header;
-    uint8_t bus_header[BUS_HEADER_LEN];
-} bus_common_header_t;
-
-#pragma pack(1)
-typedef struct
-{
-    bus_common_header_t common;
-    cdc_header_t cdc_header;
-} control_header_t;
-
-typedef struct
-{
-    bus_common_header_t common;
-    uint8_t _padding[2];
-    bdc_header_t bdc_header;
-} data_header_t;
-#pragma pack()
-
-/******************************************************
-*             Function declarations
-******************************************************/
-
-extern void whd_sdpcm_process_rx_packet(whd_driver_t whd_driver, whd_buffer_t buffer);
-extern whd_result_t whd_sdpcm_init(whd_driver_t whd_driver);
-extern void whd_sdpcm_quit(whd_driver_t whd_driver);
-extern void whd_sdpcm_bus_vars_init(whd_driver_t whd_driver);
-extern void whd_sdpcm_quit(whd_driver_t whd_driver);
-extern whd_bool_t whd_sdpcm_has_tx_packet(whd_driver_t whd_driver);
-
-extern whd_result_t whd_sdpcm_get_packet_to_send(whd_driver_t whd_driver, whd_buffer_t *buffer);
-extern void whd_sdpcm_update_credit(whd_driver_t whd_driver, uint8_t *data);
-extern uint8_t whd_sdpcm_get_available_credits(whd_driver_t whd_driver);
-extern void whd_update_host_interface_to_bss_index_mapping(whd_driver_t whd_driver, whd_interface_t interface,
-                                                           uint32_t bssid_index);
-
-extern void whd_send_to_bus(whd_driver_t whd_driver, whd_buffer_t buffer,
-                            sdpcm_header_type_t header_type);
-
-/******************************************************
-*             Global variables
-******************************************************/
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_WHD_SDPCM_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_thread.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_thread.h
deleted file mode 100644
index 248b1f8c42..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_thread.h
+++ /dev/null
@@ -1,92 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  The whd Thread allows thread safe access to the whd hardware bus
- *  This is an whd internal file and should not be used by functions outside whd.
- *
- *  This file provides prototypes for functions which allow multiple threads to use the whd hardware bus (SDIO or SPI)
- *  This is achieved by having a single thread (the "whd Thread") which queues messages to be sent, sending
- *  them sequentially, as well as receiving messages as they arrive.
- *
- *  Messages to be sent come from the @ref whd_sdpcm_send_common function in whd_sdpcm.c .  The messages already
- *  contain SDPCM headers, but not any bus headers (GSPI), and are passed via a queue
- *  This function can be called from any thread.
- *
- *  Messages are received by way of a callback supplied by in whd_sdpcm.c - whd_sdpcm_process_rx_packet
- *  Received messages are delivered in the context of the whd Thread, so the callback function needs to avoid blocking.
- *
- */
-#include "cyabs_rtos.h"
-#include "whd.h"
-
-#ifndef INCLUDED_WHD_THREAD_H_
-#define INCLUDED_WHD_THREAD_H_
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-*             Constants
-******************************************************/
-#define WHD_THREAD_RX_BOUND           (20)
-
-typedef struct whd_thread_info
-{
-
-    volatile whd_bool_t thread_quit_flag;
-    volatile whd_bool_t whd_inited;
-    cy_thread_t whd_thread;
-    cy_semaphore_t transceive_semaphore;
-    volatile whd_bool_t bus_interrupt;
-    void *thread_stack_start;
-    uint32_t thread_stack_size;
-    cy_thread_priority_t thread_priority;
-
-} whd_thread_info_t;
-
-void whd_thread_info_init(whd_driver_t whd_driver, whd_init_config_t *whd_init_config);
-
-/** Initialises the whd Thread
- *
- * Initialises the whd thread, and its flags/semaphores,
- * then starts it running
- *
- * @return    whd result code
- */
-extern whd_result_t whd_thread_init(whd_driver_t whd_driver);
-
-
-/** Terminates the whd Thread
- *
- * Sets a flag then wakes the whd Thread to force it to terminate.
- *
- */
-extern void whd_thread_quit(whd_driver_t whd_driver);
-
-
-extern void whd_thread_notify(whd_driver_t whd_driver);
-extern void whd_thread_notify_irq(whd_driver_t whd_driver);
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_WHD_THREAD_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_thread_internal.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_thread_internal.h
deleted file mode 100644
index ec46ebdddc..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_thread_internal.h
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef INCLUDED_WHD_THREAD_INTERNAL_H
-#define INCLUDED_WHD_THREAD_INTERNAL_H
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-#include "whd_debug.h"
-#include "whd_int.h"
-
-/******************************************************
-*                      Macros
-******************************************************/
-
-#define WHD_WLAN_KEEP_AWAKE(whd_driver) \
-    do { \
-        whd_result_t verify_result; \
-        whd_driver->internal_info.whd_wlan_status.keep_wlan_awake++; \
-        verify_result = whd_ensure_wlan_bus_is_up(whd_driver); \
-        whd_assert("Could not bring bus up", (verify_result == WHD_SUCCESS) ); \
-    } while (0)
-#define WHD_WLAN_LET_SLEEP(whd_driver) \
-    do { \
-        whd_driver->internal_info.whd_wlan_status.keep_wlan_awake--; \
-        if (whd_driver->internal_info.whd_wlan_status.keep_wlan_awake == 0) \
-            whd_thread_notify(whd_driver); \
-    } while (0)
-#define WHD_WLAN_MAY_SLEEP() \
-    ( (whd_driver->internal_info.whd_wlan_status.keep_wlan_awake == 0) && \
-      (whd_driver->internal_info.whd_wlan_status.state == WLAN_UP) )
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_WHD_THREAD_INTERNAL_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_types_int.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_types_int.h
deleted file mode 100644
index 4f1d384247..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_types_int.h
+++ /dev/null
@@ -1,407 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Defines common constants used with WHD within src folder
- *
- */
-
-#ifndef INCLUDED_WHD_TYPES_INT_H_
-#define INCLUDED_WHD_TYPES_INT_H_
-
-#include <stdint.h>
-#include <stddef.h>
-#include <inttypes.h>
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/******************************************************
-*                      Macros
-******************************************************/
-#define MAX_BUS_HEADER_SIZE 4
-
-/**
- * The size of an Ethernet header
- */
-#define WHD_ETHERNET_SIZE         (14)
-
-/**
- * Ethernet Ethertypes
- */
-#define WHD_ETHERTYPE_IPv4    0x0800
-#define WHD_ETHERTYPE_IPv6    0x86DD
-#define WHD_ETHERTYPE_ARP     0x0806
-#define WHD_ETHERTYPE_RARP    0x8035
-#define WHD_ETHERTYPE_EAPOL   0x888E
-#define WHD_ETHERTYPE_DOT1AS  0x88F7
-#define WHD_ETHERTYPE_8021Q   0x8100
-
-/* bss_info_cap_t flags */
-#define WL_BSS_FLAGS_FROM_BEACON        0x01    /* bss_info derived from beacon */
-#define WL_BSS_FLAGS_FROM_CACHE         0x02    /* bss_info collected from cache */
-#define WL_BSS_FLAGS_RSSI_ONCHANNEL     0x04    /* rssi info received on channel (vs offchannel) */
-#define WL_BSS_FLAGS_HS20               0x08    /* hotspot 2.0 capable */
-#define WL_BSS_FLAGS_RSSI_INVALID       0x10    /* BSS contains invalid RSSI */
-#define WL_BSS_FLAGS_RSSI_INACCURATE    0x20    /* BSS contains inaccurate RSSI */
-#define WL_BSS_FLAGS_SNR_INVALID        0x40    /* BSS contains invalid SNR */
-#define WL_BSS_FLAGS_NF_INVALID         0x80    /* BSS contains invalid noise floor */
-
-#define HT_CAPABILITIES_IE_LENGTH       (26)
-#define DOT11_OUI_LEN                   (3)/** Length in bytes of 802.11 OUI*/
-
-#define WHD_ETHER_ADDR_STR_LEN          (18)
-#define WHD_ETHER_ADDR_LEN              (6)
-
-#define CHECK_IOCTL_BUFFER(buff)  if (buff == \
-                                      NULL){ WPRINT_WHD_ERROR( ("Buffer alloc failed in function %s at line %d \n", \
-                                                                __func__, __LINE__) ); \
-                                             return WHD_BUFFER_ALLOC_FAIL; }
-#define CHECK_RETURN(expr)  { \
-        whd_result_t check_res = (expr); \
-        if (check_res != WHD_SUCCESS) \
-        { \
-            WPRINT_WHD_ERROR( ("Function %s failed at line %d checkres = %u \n", \
-                               __func__, __LINE__, \
-                               (unsigned int)check_res) ); \
-            return check_res; \
-        } \
-}
-
-#define CHECK_RETURN_UNSUPPORTED_OK(expr)  { whd_result_t check_res = (expr);  \
-                                             if (check_res != WHD_SUCCESS) \
-                                             { \
-                                                 return check_res; \
-                                             } \
-}
-#define CHECK_RETURN_UNSUPPORTED_CONTINUE(expr)  { whd_result_t check_res = (expr);                                 \
-                                                   if (check_res != WHD_SUCCESS && check_res != WHD_WLAN_UNSUPPORTED) \
-                                                   { \
-                                                       return check_res; \
-                                                   } \
-}
-#define RETURN_WITH_ASSERT(expr)  { whd_result_t check_res = (expr); \
-                                    whd_assert("Command failed\n", check_res == WHD_SUCCESS); \
-                                    return check_res; }
-
-#define CHECK_RETURN_IGNORE(expr)  { whd_result_t check_res = (expr);  \
-                                     if (check_res != WHD_SUCCESS) \
-                                     { \
-                                     } \
-}
-
-#define CHECK_IFP_NULL(ifp)  if (ifp == \
-                                 NULL){ WPRINT_WHD_ERROR( ( \
-                                                              "Interface is not up/NULL and failed in function %s at line %d \n", \
-                                                              __func__, __LINE__) ); \
-                                        return WHD_UNKNOWN_INTERFACE; }
-
-#define CHECK_DRIVER_NULL(driver)  if (driver == \
-                                       NULL){ WPRINT_WHD_ERROR( ( \
-                                                                    "WHD driver is not up/NULL and failed in function %s at line %d \n", \
-                                                                    __func__, __LINE__) ); \
-                                              return WHD_DOES_NOT_EXIST; }
-
-#define MIN_OF(x, y) ( (x) < (y) ? (x) : (y) )
-#define MAX_OF(x, y)  ( (x) > (y) ? (x) : (y) )
-
-#ifndef ROUND_UP
-#define ROUND_UP(x, y)    ( (x) % (y) ? (x) + (y) - ( (x) % (y) ) : (x) )
-#endif
-
-#ifndef DIV_ROUND_UP
-#define DIV_ROUND_UP(m, n)    ( ( (m) + (n) - 1 ) / (n) )
-#endif
-
-#define WHD_WRITE_16(pointer, value)      (*( (uint16_t *)pointer ) = value)
-#define WHD_WRITE_32(pointer, value)      (*( (uint32_t *)pointer ) = value)
-#define WHD_READ_16(pointer)              *( (uint16_t *)pointer )
-#define WHD_READ_32(pointer)              *( (uint32_t *)pointer )
-
-/**
- *  Macro for checking for NULL MAC addresses
- */
-#define NULL_MAC(a)  ( ( ( ( (unsigned char *)a )[0] ) == 0 ) && \
-                       ( ( ( (unsigned char *)a )[1] ) == 0 ) && \
-                       ( ( ( (unsigned char *)a )[2] ) == 0 ) && \
-                       ( ( ( (unsigned char *)a )[3] ) == 0 ) && \
-                       ( ( ( (unsigned char *)a )[4] ) == 0 ) && \
-                       ( ( ( (unsigned char *)a )[5] ) == 0 ) )
-
-/**
- *	Macro for checking for Broadcast address
- */
-#define BROADCAST_ID(a)  ( ( ( ( (unsigned char *)a )[0] ) == 255 ) && \
-                           ( ( ( (unsigned char *)a )[1] ) == 255 ) && \
-                           ( ( ( (unsigned char *)a )[2] ) == 255 ) && \
-                           ( ( ( (unsigned char *)a )[3] ) == 255 ) && \
-                           ( ( ( (unsigned char *)a )[4] ) == 255 ) && \
-                           ( ( ( (unsigned char *)a )[5] ) == 255 ) )
-
-/* Suppress unused variable warning occurring due to an assert which is disabled in release mode */
-#define REFERENCE_DEBUG_ONLY_VARIABLE(x) ( (void)(x) )
-
-/* Suppress unused parameter warning */
-#define UNUSED_PARAMETER(x) ( (void)(x) )
-
-/* Suppress unused variable warning */
-#define UNUSED_VARIABLE(x) ( (void)(x) )
-
-#if defined (__IAR_SYSTEMS_ICC__)
-#define DISABLE_COMPILER_WARNING(x) _Pragma(#x)
-#define ENABLE_COMPILER_WARNING(x) _Pragma(#x)
-#else
-#define DISABLE_COMPILER_WARNING(x)
-#define ENABLE_COMPILER_WARNING(x)
-#endif
-
-/******************************************************
-*                 Type Definitions
-******************************************************/
-
-/******************************************************
-*                    Constants
-******************************************************/
-
-/******************************************************
-*             Structures and Enumerations
-******************************************************/
-#pragma pack(1)
-typedef struct
-{
-    whd_buffer_queue_ptr_t queue_next;
-    char bus_header[MAX_BUS_HEADER_SIZE];
-} whd_buffer_header_t;
-#pragma pack()
-
-/* 802.11 Information Element Identification Numbers (as per section 8.4.2.1 of 802.11-2012) */
-typedef enum
-{
-    DOT11_IE_ID_SSID                                 = 0,
-    DOT11_IE_ID_SUPPORTED_RATES                      = 1,
-    DOT11_IE_ID_FH_PARAMETER_SET                     = 2,
-    DOT11_IE_ID_DSSS_PARAMETER_SET                   = 3,
-    DOT11_IE_ID_CF_PARAMETER_SET                     = 4,
-    DOT11_IE_ID_TIM                                  = 5,
-    DOT11_IE_ID_IBSS_PARAMETER_SET                   = 6,
-    DOT11_IE_ID_COUNTRY                              = 7,
-    DOT11_IE_ID_HOPPING_PATTERN_PARAMETERS           = 8,
-    DOT11_IE_ID_HOPPING_PATTERN_TABLE                = 9,
-    DOT11_IE_ID_REQUEST                              = 10,
-    DOT11_IE_ID_BSS_LOAD                             = 11,
-    DOT11_IE_ID_EDCA_PARAMETER_SET                   = 12,
-    DOT11_IE_ID_TSPEC                                = 13,
-    DOT11_IE_ID_TCLAS                                = 14,
-    DOT11_IE_ID_SCHEDULE                             = 15,
-    DOT11_IE_ID_CHALLENGE_TEXT                       = 16,
-    /* 17-31 Reserved */
-    DOT11_IE_ID_POWER_CONSTRAINT                     = 32,
-    DOT11_IE_ID_POWER_CAPABILITY                     = 33,
-    DOT11_IE_ID_TPC_REQUEST                          = 34,
-    DOT11_IE_ID_TPC_REPORT                           = 35,
-    DOT11_IE_ID_SUPPORTED_CHANNELS                   = 36,
-    DOT11_IE_ID_CHANNEL_SWITCH_ANNOUNCEMENT          = 37,
-    DOT11_IE_ID_MEASUREMENT_REQUEST                  = 38,
-    DOT11_IE_ID_MEASUREMENT_REPORT                   = 39,
-    DOT11_IE_ID_QUIET                                = 40,
-    DOT11_IE_ID_IBSS_DFS                             = 41,
-    DOT11_IE_ID_ERP                                  = 42,
-    DOT11_IE_ID_TS_DELAY                             = 43,
-    DOT11_IE_ID_TCLAS_PROCESSING                     = 44,
-    DOT11_IE_ID_HT_CAPABILITIES                      = 45,
-    DOT11_IE_ID_QOS_CAPABILITY                       = 46,
-    /* 47 Reserved */
-    DOT11_IE_ID_RSN                                  = 48,
-    /* 49 Reserved */
-    DOT11_IE_ID_EXTENDED_SUPPORTED_RATES             = 50,
-    DOT11_IE_ID_AP_CHANNEL_REPORT                    = 51,
-    DOT11_IE_ID_NEIGHBOR_REPORT                      = 52,
-    DOT11_IE_ID_RCPI                                 = 53,
-    DOT11_IE_ID_MOBILITY_DOMAIN                      = 54,
-    DOT11_IE_ID_FAST_BSS_TRANSITION                  = 55,
-    DOT11_IE_ID_TIMEOUT_INTERVAL                     = 56,
-    DOT11_IE_ID_RIC_DATA                             = 57,
-    DOT11_IE_ID_DSE_REGISTERED_LOCATION              = 58,
-    DOT11_IE_ID_SUPPORTED_OPERATING_CLASSES          = 59,
-    DOT11_IE_ID_EXTENDED_CHANNEL_SWITCH_ANNOUNCEMENT = 60,
-    DOT11_IE_ID_HT_OPERATION                         = 61,
-    DOT11_IE_ID_SECONDARY_CHANNEL_OFFSET             = 62,
-    DOT11_IE_ID_BSS_AVERAGE_ACCESS_DELAY             = 63,
-    DOT11_IE_ID_ANTENNA                              = 64,
-    DOT11_IE_ID_RSNI                                 = 65,
-    DOT11_IE_ID_MEASUREMENT_PILOT_TRANSMISSION       = 66,
-    DOT11_IE_ID_BSS_AVAILABLE_ADMISSION_CAPACITY     = 67,
-    DOT11_IE_ID_BSS_AC_ACCESS_DELAY                  = 68,
-    DOT11_IE_ID_TIME_ADVERTISEMENT                   = 69,
-    DOT11_IE_ID_RM_ENABLED_CAPABILITIES              = 70,
-    DOT11_IE_ID_MULTIPLE_BSSID                       = 71,
-    DOT11_IE_ID_20_40_BSS_COEXISTENCE                = 72,
-    DOT11_IE_ID_20_40_BSS_INTOLERANT_CHANNEL_REPORT  = 73,
-    DOT11_IE_ID_OVERLAPPING_BSS_SCAN_PARAMETERS      = 74,
-    DOT11_IE_ID_RIC_DESCRIPTOR                       = 75,
-    DOT11_IE_ID_MANAGEMENT_MIC                       = 76,
-    DOT11_IE_ID_EVENT_REQUEST                        = 78,
-    DOT11_IE_ID_EVENT_REPORT                         = 79,
-    DOT11_IE_ID_DIAGNOSTIC_REQUEST                   = 80,
-    DOT11_IE_ID_DIAGNOSTIC_REPORT                    = 81,
-    DOT11_IE_ID_LOCATION_PARAMETERS                  = 82,
-    DOT11_IE_ID_NONTRANSMITTED_BSSID_CAPABILITY      = 83,
-    DOT11_IE_ID_SSID_LIST                            = 84,
-    DOT11_IE_ID_MULTIPLE_BSSID_INDEX                 = 85,
-    DOT11_IE_ID_FMS_DESCRIPTOR                       = 86,
-    DOT11_IE_ID_FMS_REQUEST                          = 87,
-    DOT11_IE_ID_FMS_RESPONSE                         = 88,
-    DOT11_IE_ID_QOS_TRAFFIC_CAPABILITY               = 89,
-    DOT11_IE_ID_BSS_MAX_IDLE_PERIOD                  = 90,
-    DOT11_IE_ID_TFS_REQUEST                          = 91,
-    DOT11_IE_ID_TFS_RESPONSE                         = 92,
-    DOT11_IE_ID_WNM_SLEEP_MODE                       = 93,
-    DOT11_IE_ID_TIM_BROADCAST_REQUEST                = 94,
-    DOT11_IE_ID_TIM_BROADCAST_RESPONSE               = 95,
-    DOT11_IE_ID_COLLOCATED_INTERFERENCE_REPORT       = 96,
-    DOT11_IE_ID_CHANNEL_USAGE                        = 97,
-    DOT11_IE_ID_TIME_ZONE                            = 98,
-    DOT11_IE_ID_DMS_REQUEST                          = 99,
-    DOT11_IE_ID_DMS_RESPONSE                         = 100,
-    DOT11_IE_ID_LINK_IDENTIFIER                      = 101,
-    DOT11_IE_ID_WAKEUP_SCHEDULE                      = 102,
-    /* 103 Reserved */
-    DOT11_IE_ID_CHANNEL_SWITCH_TIMING                = 104,
-    DOT11_IE_ID_PTI_CONTROL                          = 105,
-    DOT11_IE_ID_TPU_BUFFER_STATUS                    = 106,
-    DOT11_IE_ID_INTERWORKING                         = 107,
-    DOT11_IE_ID_ADVERTISMENT_PROTOCOL                = 108,
-    DOT11_IE_ID_EXPEDITED_BANDWIDTH_REQUEST          = 109,
-    DOT11_IE_ID_QOS_MAP_SET                          = 110,
-    DOT11_IE_ID_ROAMING_CONSORTIUM                   = 111,
-    DOT11_IE_ID_EMERGENCY_ALERT_IDENTIFIER           = 112,
-    DOT11_IE_ID_MESH_CONFIGURATION                   = 113,
-    DOT11_IE_ID_MESH_ID                              = 114,
-    DOT11_IE_ID_MESH_LINK_METRIC_REPORT              = 115,
-    DOT11_IE_ID_CONGESTION_NOTIFICATION              = 116,
-    DOT11_IE_ID_MESH_PEERING_MANAGEMENT              = 117,
-    DOT11_IE_ID_MESH_CHANNEL_SWITCH_PARAMETERS       = 118,
-    DOT11_IE_ID_MESH_AWAKE_WINDOW                    = 119,
-    DOT11_IE_ID_BEACON_TIMING                        = 120,
-    DOT11_IE_ID_MCCAOP_SETUP_REQUEST                 = 121,
-    DOT11_IE_ID_MCCAOP_SETUP_REPLY                   = 122,
-    DOT11_IE_ID_MCCAOP_ADVERTISMENT                  = 123,
-    DOT11_IE_ID_MCCAOP_TEARDOWN                      = 124,
-    DOT11_IE_ID_GANN                                 = 125,
-    DOT11_IE_ID_RANN                                 = 126,
-    DOT11_IE_ID_EXTENDED_CAPABILITIES                = 127,
-    /* 128-129 Reserved */
-    DOT11_IE_ID_PREQ                                 = 130,
-    DOT11_IE_ID_PREP                                 = 131,
-    DOT11_IE_ID_PERR                                 = 132,
-    /* 133-136 Reserved */
-    DOT11_IE_ID_PXU                                  = 137,
-    DOT11_IE_ID_PXUC                                 = 138,
-    DOT11_IE_ID_AUTHENTICATED_MESH_PEERING_EXCHANGE  = 139,
-    DOT11_IE_ID_MIC                                  = 140,
-    DOT11_IE_ID_DESTINATION_URI                      = 141,
-    DOT11_IE_ID_U_APSD_COEXISTENCE                   = 142,
-    /* 143-173 Reserved */
-    DOT11_IE_ID_MCCAOP_ADVERTISMENT_OVERVIEW         = 174,
-    /* 175-220 Reserved */
-    DOT11_IE_ID_VENDOR_SPECIFIC                      = 221,
-    /* 222-255 Reserved */
-} dot11_ie_id_t;
-
-uint32_t whd_wifi_get_iovar_value(whd_interface_t ifp, const char *iovar, uint32_t *value);
-uint32_t whd_wifi_set_iovar_buffers(whd_interface_t ifp, const char *iovar, const void **in_buffers,
-                                    const uint16_t *lengths, const uint8_t num_buffers);
-uint32_t whd_wifi_set_iovar_value(whd_interface_t ifp, const char *iovar, uint32_t value);
-
-/** Sends an IOVAR command
- *
- *  @param  ifp                 : Pointer to handle instance of whd interface
- *  @param  iovar               : IOVAR name
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_set_iovar_void(whd_interface_t ifp, const char *iovar);
-
-/** Sends an IOVAR command
- *
- *  @param  ifp                 : Pointer to handle instance of whd interface
- *  @param  iovar               : IOVAR name
- *  @param  buffer              : Handle for a packet buffer containing the data value to be sent.
- *  @param  buffer_length       : Length of out_buffer
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_set_iovar_buffer(whd_interface_t ifp, const char *iovar, void *buffer, uint16_t buffer_length);
-
-/** Sends an IOVAR command
- *
- *  @param  ifp                 : Pointer to handle instance of whd interface
- *  @param  iovar               : IOVAR name
- *  @param  in_buffers          : Handle for a packet buffers containing the data value to be sent.
- *  @param  in_buffer_lengths   : Length of in_buffers
- *  @param  num_buffers         : Number of handle buffers
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_set_iovar_buffers(whd_interface_t ifp, const char *iovar, const void **in_buffers,
-                                           const uint16_t *in_buffer_lengths, const uint8_t num_buffers);
-
-/** Sends an IOVAR command
- *
- *  @param  ifp                 : Pointer to handle instance of whd interface
- *  @param  iovar               : IOVAR name
- *  @param  out_buffer          : Pointer to receive the handle for the packet buffer containing the response data value received
- *  @param  out_length          : Length of out_buffer
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_get_iovar_buffer(whd_interface_t ifp, const char *iovar_name, uint8_t *out_buffer,
-                                          uint16_t out_length);
-
-/** Sends an IOVAR command
- *
- *  @param  ifp                 : Pointer to handle instance of whd interface
- *  @param  iovar               : IOVAR name
- *  @param  buffer              : Handle for a packet buffer containing the data value to be sent.
- *  @param  buffer_length       : Length of out_buffer
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_set_iovar_buffer(whd_interface_t ifp, const char *iovar, void *buffer, uint16_t buffer_length);
-
-/** Sends an IOVAR command
- *
- *  @param  ifp                 : Pointer to handle instance of whd interface
- *  @param  iovar               : IOVAR name
- *  @param  in_buffers          : Handle for a packet buffers containing the data value to be sent.
- *  @param  in_buffer_lengths   : Length of in_buffers
- *  @param  num_buffers         : Number of handle buffers
- *
- *  @return WHD_SUCCESS or Error code
- */
-extern uint32_t whd_wifi_set_iovar_buffers(whd_interface_t ifp, const char *iovar, const void **in_buffers,
-                                           const uint16_t *in_buffer_lengths, const uint8_t num_buffers);
-
-extern uint32_t whd_wifi_set_mac_address(whd_interface_t ifp, whd_mac_t mac);
-
-#ifdef __cplusplus
-}     /* extern "C" */
-#endif
-#endif /* ifndef INCLUDED_WHD_TYPES_INT_H_ */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_utils.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_utils.h
deleted file mode 100644
index de34f9c272..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_utils.h
+++ /dev/null
@@ -1,182 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * @file WHD utilities
- *
- * Utilities to help do specialized (not general purpose) WHD specific things
- */
-#include "whd_chip.h"
-#include "whd_events_int.h"
-#include "whd_types_int.h"
-
-#ifndef INCLUDED_WHD_UTILS_H_
-#define INCLUDED_WHD_UTILS_H_
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/** Searches for a specific WiFi Information Element in a byte array
- *
- * Traverse a string of 1-byte tag/1-byte length/variable-length value
- * triples, returning a pointer to the substring whose first element
- * matches tag
- *
- * @note : This function has been copied directly from the standard Broadcom host driver file wl/exe/wlu.c
- *
- *
- * @param tlv_buf : The byte array containing the Information Elements (IEs)
- * @param buflen  : The length of the tlv_buf byte array
- * @param key     : The Information Element tag to search for
- *
- * @return    NULL : if no matching Information Element was found
- *            Non-Null : Pointer to the start of the matching Information Element
- */
-
-whd_tlv8_header_t *whd_parse_tlvs(const whd_tlv8_header_t *tlv_buf, uint32_t buflen, dot11_ie_id_t key);
-
-/** Checks if a WiFi Information Element is a WPA entry
- *
- * Is this body of this tlvs entry a WPA entry? If
- * not update the tlvs buffer pointer/length
- *
- * @note : This function has been copied directly from the standard Broadcom host driver file wl/exe/wlu.c
- *
- * @param wpaie    : The byte array containing the Information Element (IE)
- * @param tlvs     : The larger IE array to be updated if not a WPA IE
- * @param tlvs_len : The current length of larger IE array
- *
- * @return    WHD_TRUE  : if IE matches the WPA OUI (Organizationally Unique Identifier) and its type = 1
- *            WHD_FALSE : otherwise
- */
-whd_bool_t whd_is_wpa_ie(vendor_specific_ie_header_t *wpaie, whd_tlv8_header_t **tlvs, uint32_t *tlvs_len);
-
-/** Searches for a specific WiFi Information Element in a byte array
- *
- * Traverse a string of 1-byte tag/1-byte length/variable-length value
- * triples, returning a pointer to the substring whose first element
- * matches tag
- *
- * @note : This function has been copied directly from the standard Broadcom host driver file wl/exe/wlu.c
- *
- *
- * @param tlv_buf : The byte array containing the Information Elements (IEs)
- * @param buflen  : The length of the tlv_buf byte array
- * @param key     : The Information Element tag to search for
- *
- * @return    NULL : if no matching Information Element was found
- *            Non-Null : Pointer to the start of the matching Information Element
- */
-whd_tlv8_header_t *whd_parse_dot11_tlvs(const whd_tlv8_header_t *tlv_buf, uint32_t buflen, dot11_ie_id_t key);
-
-/******************************************************
-*             Debug helper functionality
-******************************************************/
-#ifdef WPRINT_ENABLE_WHD_DEBUG
-const char *whd_event_to_string(whd_event_num_t var);
-char *whd_ssid_to_string(uint8_t *value, uint8_t length, char *ssid_buf, uint8_t ssid_buf_len);
-const char *whd_status_to_string(whd_event_status_t status);
-const char *whd_reason_to_string(whd_event_reason_t reason);
-char *whd_ether_ntoa(const uint8_t *ea, char *buf, uint8_t buf_len);
-#endif /* ifdef WPRINT_ENABLE_WHD_DEBUG */
-
-/**
- ******************************************************************************
- * Prints partial details of a scan result on a single line
- * @param[in] record :  A pointer to the whd_scan_result_t record
- *
- */
-extern void whd_print_scan_result(whd_scan_result_t *record);
-
-/**
- ******************************************************************************
- * Convert a security bitmap to string
- * @param[in] security :  security of type whd_security_t
- * @param[in] out_str :  a character array to store output
- * @param[in] out_str_len :  length of out_str char array
- *
- */
-extern void whd_convert_security_type_to_string(whd_security_t security, char *out_str, uint16_t out_str_len);
-
-/*!
- ******************************************************************************
- * Convert an IOCTL to a string.
- *
- * @param[in] cmd  The ioct_log value.
- * @param[out] ioctl_str The string value after conversion.
- * @param[out] ioctl_str_len The string length of the IOCTL string.
- *
- * @result
- */
-void whd_ioctl_to_string(uint32_t cmd, char *ioctl_str, uint16_t ioctl_str_len);
-
-/*!
- ******************************************************************************
- * Convert event, status and reason value coming from firmware to string.
- *
- * @param[in] cmd  The event value in numeric form.
- * @param[in] flag  The status value in numeric form.
- * @param[in] reason  The reson value in numeric form.
- * @param[out] ioctl_str  The string representation of event, status and reason.
- * @param[out] ioctl_str_len  The str_len of ioctl_str.
- *
- * @result
- */
-void whd_event_info_to_string(uint32_t cmd, uint16_t flag, uint32_t reason, char *ioctl_str, uint16_t ioctl_str_len);
-
-/*!
- ******************************************************************************
- * Prints Hexdump and ASCII dump for data passed as argument.
- *
- * @param[in] data  The data which has to be converted into hex and ascii format.
- * @param[in] data_len The length of data.
- *
- * @result
- */
-void whd_hexdump(uint8_t *data, uint32_t data_len);
-
-extern wl_chanspec_t whd_channel_to_wl_band(whd_driver_t whd_driver, uint32_t channel);
-
-/*!
- ******************************************************************************
- * Convert an ipv4 string to a uint32_t.
- *
- * @param[in] ip4addr   : IP address in string format
- * @param[in] len       : length of the ip address string
- * @param[out] dest     : IP address format in uint32
- *
- * @return
- */
-bool whd_str_to_ip(const char *ip4addr, size_t len, void *dest);
-
-/*!
- ******************************************************************************
- * Print binary IPv4 address to a string.
- * String must contain enough room for full address, 16 bytes exact.
- * @param[in] ip4addr     : IPv4 address
- * @param[out] p          : ipv4 address in string format
- *
- * @return
- */
-uint8_t whd_ip4_to_string(const void *ip4addr, char *p);
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-#endif
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_wifi_p2p.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_wifi_p2p.h
deleted file mode 100644
index b74dc87112..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_wifi_p2p.h
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "cyabs_rtos.h" /* For semaphores */
-#include "whd.h"
-
-
-#ifndef INCLUDED_WHD_WIFI_P2P_H
-#define INCLUDED_WHD_WIFI_P2P_H
-
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/** @cond !ADDTHIS*/
-
-/**
- * Set whether the p2p GO is up or not
- * @param is_up   : specify whether the p2p GO is up currently or not
- */
-extern void whd_wifi_p2p_set_go_is_up(whd_driver_t whd_driver, whd_bool_t is_up);
-
-/**
- * @return WHD_TRUE if the P2P GO is currently up
- */
-extern whd_bool_t whd_wifi_p2p_is_go_up(whd_driver_t whd_driver);
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-
-#endif /* ifndef INCLUDED_WHD_WIFI_P2P_H */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_wlioctl.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_wlioctl.h
deleted file mode 100644
index a75bee913f..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/include/whd_wlioctl.h
+++ /dev/null
@@ -1,3763 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/*
- * Custom OID/ioctl definitions for
- * 802.11abg Networking Device Driver
- */
-#ifndef INCLUDED_WHD_WLIOCTL_H
-#define INCLUDED_WHD_WLIOCTL_H
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-/* These are the flags in the BSS Capability Information field as defined in section 7.3.1.4 of IEEE Std 802.11-2007  */
-#define DOT11_CAP_ESS                     (0x0001)     /** Extended service set capability */
-#define DOT11_CAP_IBSS                    (0x0002)     /** Ad-hoc capability (Independent Basic Service Set) */
-#define DOT11_CAP_PRIVACY                 (0x0010)     /** Privacy subfield - indicates data confidentiality is required for all data frames exchanged */
-
-#define CH_MAX_2G_CHANNEL       (14)      /* Max channel in 2G band */
-#define MAX_WFDS_SVC_NAME_LEN   (200)     /* maximum service_name length */
-
-#define ACTION_FRAME_SIZE 1040
-typedef uint16_t chanspec_t;
-#define    ETHER_ADDR_LEN        6
-
-typedef struct ether_addr
-{
-    uint8_t octet[ETHER_ADDR_LEN];
-} wl_ether_addr_t;
-struct wl_ether_header
-{
-    uint8_t ether_dhost[ETHER_ADDR_LEN];
-    uint8_t ether_shost[ETHER_ADDR_LEN];
-    uint16_t ether_type;
-};
-typedef struct wl_action_frame
-{
-    wl_ether_addr_t da;
-    uint16_t len;
-    uint32_t packetId;
-    uint8_t data[ACTION_FRAME_SIZE];
-} wl_action_frame_t;
-
-typedef struct wl_af_params
-{
-    uint32_t channel;
-    int32_t dwell_time;
-    struct ether_addr BSSID;
-    wl_action_frame_t action_frame;
-} wl_af_params_t;
-
-#define WL_WIFI_AF_PARAMS_SIZE sizeof(struct wl_af_params)
-
-/* ether types */
-#define ETHER_TYPE_LEN      2
-#define ETHER_TYPE_MIN      0x0600      /* Anything less than MIN is a length */
-#define ETHER_TYPE_IP       0x0800      /* IP */
-#define ETHER_TYPE_ARP      0x0806      /* ARP */
-#define ETHER_TYPE_8021Q    0x8100      /* 802.1Q */
-#define ETHER_TYPE_802_1X   0x888e      /* 802.1x */
-#define ETHER_TYPE_WAI      0x88b4      /* WAPI WAI */
-#define ETHER_TYPE_802_1X_PREAUTH 0x88c7    /* 802.1x preauthentication */
-#define WL_WIFI_ACTION_FRAME_SIZE sizeof(struct wl_action_frame)
-#define BWL_DEFAULT_PACKING
-
-#define RWL_ACTION_WIFI_CATEGORY    127
-#define RWL_WIFI_OUI_BYTE1        0x90
-#define RWL_WIFI_OUI_BYTE2        0x4C
-#define RWL_WIFI_OUI_BYTE3        0x0F
-#define RWL_WIFI_ACTION_FRAME_SIZE    sizeof(struct dot11_action_wifi_vendor_specific)
-#define RWL_WIFI_DEFAULT                0x00
-#define RWL_WIFI_FIND_MY_PEER        0x09
-#define RWL_WIFI_FOUND_PEER        0x0A
-#define RWL_ACTION_WIFI_FRAG_TYPE    0x55
-
-typedef struct ssid_info
-{
-    uint8_t ssid_len;
-    uint8_t ssid[32];
-} ssid_info_t;
-typedef struct cnt_rx
-{
-    uint32_t cnt_rxundec;
-    uint32_t cnt_rxframe;
-} cnt_rx_t;
-#define RWL_REF_MAC_ADDRESS_OFFSET    17
-#define RWL_DUT_MAC_ADDRESS_OFFSET    23
-#define RWL_WIFI_CLIENT_CHANNEL_OFFSET    50
-#define RWL_WIFI_SERVER_CHANNEL_OFFSET    51
-#define WL_BSS_INFO_VERSION    109
-#define MCSSET_LEN    16
-
-typedef struct wlc_ssid
-{
-    uint32_t SSID_len;
-    uint8_t SSID[32];
-} wlc_ssid_t;
-#define WL_BSSTYPE_INFRA 1
-#define WL_BSSTYPE_INDEP 0
-#define WL_BSSTYPE_ANY   2
-#define WL_SCANFLAGS_PASSIVE 0x01
-#define WL_SCANFLAGS_PROHIBITED    0x04
-typedef struct wl_scan_params
-{
-    wlc_ssid_t ssid;
-    wl_ether_addr_t bssid;
-    int8_t bss_type;
-    int8_t scan_type;
-    int32_t nprobes;
-    int32_t active_time;
-    int32_t passive_time;
-    int32_t home_time;
-    int32_t channel_num;
-    uint16_t channel_list[1];
-} wl_scan_params_t;
-#define WL_SCAN_PARAMS_FIXED_SIZE          (64)
-#define WL_SCAN_PARAMS_COUNT_MASK  (0x0000ffff)
-#define WL_SCAN_PARAMS_NSSID_SHIFT         (16)
-#define WL_SCAN_ACTION_START                (1)
-#define WL_SCAN_ACTION_CONTINUE             (2)
-#define WL_SCAN_ACTION_ABORT                (3)
-#define ISCAN_REQ_VERSION                   (1)
-typedef struct wl_iscan_params
-{
-    uint32_t version;
-    uint16_t action;
-    uint16_t scan_duration;
-    wl_scan_params_t params;
-} wl_iscan_params_t;
-#define WL_ISCAN_PARAMS_FIXED_SIZE (offsetof(wl_iscan_params_t, params) + sizeof(wlc_ssid_t) )
-typedef struct wl_scan_results
-{
-    uint32_t buflen;
-    uint32_t version;
-    uint32_t count;
-    wl_bss_info_t bss_info[1];
-} wl_scan_results_t;
-#define WL_SCAN_RESULTS_FIXED_SIZE  (12)
-#define WL_SCAN_RESULTS_SUCCESS         (0)
-#define WL_SCAN_RESULTS_PARTIAL         (1)
-#define WL_SCAN_RESULTS_PENDING         (2)
-#define WL_SCAN_RESULTS_ABORTED         (3)
-#define WL_SCAN_RESULTS_NO_MEM         (4)
-#define ESCAN_REQ_VERSION 1
-typedef struct wl_escan_params
-{
-    uint32_t version;
-    uint16_t action;
-    uint16_t sync_id;
-    wl_scan_params_t params;
-} wl_escan_params_t;
-#define WL_ESCAN_PARAMS_FIXED_SIZE (offsetof(wl_escan_params_t, params) + sizeof(wlc_ssid_t) )
-typedef struct wl_escan_result
-{
-    uint32_t buflen;
-    uint32_t version;
-    uint16_t sync_id;
-    uint16_t bss_count;
-    wl_bss_info_t bss_info[1];
-} wl_escan_result_t;
-#define WL_ESCAN_RESULTS_FIXED_SIZE (sizeof(wl_escan_result_t) - sizeof(wl_bss_info_t) )
-typedef struct wl_iscan_results
-{
-    uint32_t status;
-    wl_scan_results_t results;
-} wl_iscan_results_t;
-#define WL_ISCAN_RESULTS_FIXED_SIZE \
-    (WL_SCAN_RESULTS_FIXED_SIZE + offsetof(wl_iscan_results_t, results) )
-#define WL_MAXRATES_IN_SET      16  /* max # of rates in a rateset */
-typedef struct wl_rateset
-{
-    uint32_t count;     /* # rates in this set */
-    uint8_t rates[WL_MAXRATES_IN_SET];     /* rates in 500kbps units w/hi bit set if basic */
-} wl_rateset_t;
-
-typedef struct wl_rateset_args
-{
-    uint32_t count;     /* # rates in this set */
-    uint8_t rates[WL_MAXRATES_IN_SET];     /* rates in 500kbps units w/hi bit set if basic */
-    uint8_t mcs[WL_MAXRATES_IN_SET];     /* supported mcs index bit map */
-} wl_rateset_args_t;
-
-#define WL_RSPEC_RATE_MASK      0x000000FF      /* rate or HT MCS value */
-#define WL_RSPEC_VHT_MCS_MASK   0x0000000F      /* VHT MCS value */
-#define WL_RSPEC_VHT_NSS_MASK   0x000000F0      /* VHT Nss value */
-#define WL_RSPEC_VHT_NSS_SHIFT  4               /* VHT Nss value shift */
-#define WL_RSPEC_TXEXP_MASK     0x00000300
-#define WL_RSPEC_TXEXP_SHIFT    8
-#define WL_RSPEC_BW_MASK        0x00070000      /* bandwidth mask */
-#define WL_RSPEC_BW_SHIFT       16              /* bandwidth shift */
-#define WL_RSPEC_STBC           0x00100000      /* STBC encoding, Nsts = 2 x Nss */
-#define WL_RSPEC_TXBF           0x00200000      /* bit indicates TXBF mode */
-#define WL_RSPEC_LDPC           0x00400000      /* bit indicates adv coding in use */
-#define WL_RSPEC_SGI            0x00800000      /* Short GI mode */
-#define WL_RSPEC_ENCODING_MASK  0x03000000      /* Encoding of Rate/MCS field */
-#define WL_RSPEC_OVERRIDE_RATE  0x40000000      /* bit indicate to override mcs only */
-#define WL_RSPEC_OVERRIDE_MODE  0x80000000      /* bit indicates override both rate & mode */
-#define WL_RSPEC_BW_UNSPECIFIED 0
-#define WL_RSPEC_BW_20MHZ       0x00010000
-#define WL_RSPEC_BW_40MHZ       0x00020000
-#define WL_RSPEC_BW_80MHZ       0x00030000
-#define WL_RSPEC_BW_160MHZ      0x00040000
-#define WL_RSPEC_BW_10MHZ       0x00050000
-#define WL_RSPEC_BW_5MHZ        0x00060000
-#define WL_RSPEC_BW_2P5MHZ      0x00070000
-#define WL_RSPEC_ENCODE_RATE    0x00000000      /* Legacy rate is stored in RSPEC_RATE_MASK */
-#define WL_RSPEC_ENCODE_HT      0x01000000      /* HT MCS is stored in RSPEC_RATE_MASK */
-#define WL_RSPEC_ENCODE_VHT     0x02000000      /* VHT MCS and Nss is stored in RSPEC_RATE_MASK */
-
-typedef struct wl_uint32_list
-{
-    uint32_t count;
-    uint32_t element[1];
-} wl_uint32_list_t;
-
-typedef struct wl_join_scan_params
-{
-    uint8_t scan_type;     /* 0 use default, active or passive scan */
-    int32_t nprobes;     /* -1 use default, number of probes per channel */
-    int32_t active_time;     /* -1 use default, dwell time per channel for
-                              * active scanning
-                              */
-    int32_t passive_time;     /* -1 use default, dwell time per channel
-                               * for passive scanning
-                               */
-    int32_t home_time;     /* -1 use default, dwell time for the home channel
-                            * between channel scans
-                            */
-} wl_join_scan_params_t;
-
-#define NRATE_MCS_INUSE            (0x00000080)
-#define NRATE_RATE_MASK         (0x0000007f)
-#define NRATE_STF_MASK            (0x0000ff00)
-#define NRATE_STF_SHIFT                     (8)
-#define NRATE_OVERRIDE            (0x80000000)
-#define NRATE_OVERRIDE_MCS_ONLY   (0x40000000)
-#define NRATE_SGI_MASK          (0x00800000)
-#define NRATE_SGI_SHIFT                 (23)
-#define NRATE_LDPC_CODING       (0x00400000)
-#define NRATE_LDPC_SHIFT                (22)
-#define NRATE_BCMC_OVERRIDE     (0x00200000)
-#define NRATE_BCMC_SHIFT                (21)
-#define NRATE_STF_SISO                     (0)
-#define NRATE_STF_CDD                     (1)
-#define NRATE_STF_STBC                     (2)
-#define NRATE_STF_SDM                     (3)
-#define ANTENNA_NUM_1                     (1)
-#define ANTENNA_NUM_2                     (2)
-#define ANTENNA_NUM_3                     (3)
-#define ANTENNA_NUM_4                     (4)
-#define ANT_SELCFG_AUTO                  (0x80)
-#define ANT_SELCFG_MASK                  (0x33)
-#define ANT_SELCFG_MAX                     (4)
-#define ANT_SELCFG_TX_UNICAST             (0)
-#define ANT_SELCFG_RX_UNICAST             (1)
-#define ANT_SELCFG_TX_DEF                 (2)
-#define ANT_SELCFG_RX_DEF                 (3)
-typedef struct
-{
-    uint8_t ant_config[ANT_SELCFG_MAX];
-    uint8_t num_antcfg;
-} wlc_antselcfg_t;
-#define HIGHEST_SINGLE_STREAM_MCS    (7)
-#define WLC_CNTRY_BUF_SZ    (4)
-typedef struct wl_country
-{
-    char country_abbrev[WLC_CNTRY_BUF_SZ];
-    int32_t rev;
-    char ccode[WLC_CNTRY_BUF_SZ];
-} wl_country_t;
-typedef struct wl_channels_in_country
-{
-    uint32_t buflen;
-    uint32_t band;
-    int8_t country_abbrev[WLC_CNTRY_BUF_SZ];
-    uint32_t count;
-    uint32_t channel[1];
-} wl_channels_in_country_t;
-typedef struct wl_country_list
-{
-    uint32_t buflen;
-    uint32_t band_set;
-    uint32_t band;
-    uint32_t count;
-    int8_t country_abbrev[1];
-} wl_country_list_t;
-#define WL_NUM_RPI_BINS        8
-#define WL_RM_TYPE_BASIC    1
-#define WL_RM_TYPE_CCA        2
-#define WL_RM_TYPE_RPI        3
-#define WL_RM_FLAG_PARALLEL    (1 << 0)
-#define WL_RM_FLAG_LATE        (1 << 1)
-#define WL_RM_FLAG_INCAPABLE    (1 << 2)
-#define WL_RM_FLAG_REFUSED    (1 << 3)
-typedef struct wl_rm_req_elt
-{
-    int8_t type;
-    int8_t flags;
-    wl_chanspec_t chanspec;
-    uint32_t token;
-    uint32_t tsf_h;
-    uint32_t tsf_l;
-    uint32_t dur;
-} wl_rm_req_elt_t;
-typedef struct wl_rm_req
-{
-    uint32_t token;
-    uint32_t count;
-    void *cb;
-    void *cb_arg;
-    wl_rm_req_elt_t req[1];
-} wl_rm_req_t;
-#define WL_RM_REQ_FIXED_LEN    offsetof(wl_rm_req_t, req)
-typedef struct wl_rm_rep_elt
-{
-    int8_t type;
-    int8_t flags;
-    wl_chanspec_t chanspec;
-    uint32_t token;
-    uint32_t tsf_h;
-    uint32_t tsf_l;
-    uint32_t dur;
-    uint32_t len;
-    uint8_t data[1];
-} wl_rm_rep_elt_t;
-#define WL_RM_REP_ELT_FIXED_LEN    24
-#define WL_RPI_REP_BIN_NUM 8
-typedef struct wl_rm_rpi_rep
-{
-    uint8_t rpi[WL_RPI_REP_BIN_NUM];
-    int8_t rpi_max[WL_RPI_REP_BIN_NUM];
-} wl_rm_rpi_rep_t;
-typedef struct wl_rm_rep
-{
-    uint32_t token;
-    uint32_t len;
-    wl_rm_rep_elt_t rep[1];
-} wl_rm_rep_t;
-#define WL_RM_REP_FIXED_LEN    8
-#define    CRYPTO_ALGO_OFF            0
-#define    CRYPTO_ALGO_WEP1        1
-#define    CRYPTO_ALGO_TKIP        2
-#define    CRYPTO_ALGO_WEP128        3
-#define CRYPTO_ALGO_AES_CCM        4
-#define CRYPTO_ALGO_AES_OCB_MSDU    5
-#define CRYPTO_ALGO_AES_OCB_MPDU    6
-#define CRYPTO_ALGO_NALG        7
-#define WSEC_GEN_MIC_ERROR    0x0001
-#define WSEC_GEN_REPLAY        0x0002
-#define WSEC_GEN_ICV_ERROR    0x0004
-#define WL_SOFT_KEY    (1 << 0)
-#define WL_PRIMARY_KEY    (1 << 1)
-#define WL_KF_RES_4    (1 << 4)
-#define WL_KF_RES_5    (1 << 5)
-#define WL_IBSS_PEER_GROUP_KEY    (1 << 6)
-#define DOT11_MAX_KEY_SIZE    32
-typedef struct wl_wsec_key
-{
-    uint32_t index;
-    uint32_t len;
-    uint8_t data[DOT11_MAX_KEY_SIZE];
-    uint32_t pad_1[18];
-    uint32_t algo;
-    uint32_t flags;
-    uint32_t pad_2[2];
-    int32_t pad_3;
-    int32_t iv_initialized;
-    int32_t pad_4;
-    struct
-    {
-        uint32_t hi;
-        uint16_t lo;
-    } rxiv;
-    uint32_t pad_5[2];
-    wl_ether_addr_t ea;
-} wl_wsec_key_t;
-#define WSEC_MIN_PSK_LEN    8
-#define WSEC_MAX_PSK_LEN    64
-#define WSEC_PASSPHRASE        (1 << 0)
-typedef struct
-{
-    uint16_t key_len;
-    uint16_t flags;
-    uint8_t key[WSEC_MAX_PSK_LEN];
-} wsec_pmk_t;
-
-#define WSEC_MAX_SAE_PASSWORD_LEN      128
-typedef struct
-{
-    uint16_t password_len;     /* octets in key materials  */
-    uint8_t password[WSEC_MAX_SAE_PASSWORD_LEN];     /* maximum key len for SAE passphrase */
-} wsec_sae_password_t;
-
-#define OPEN_AUTH                   0x0000
-#define SHARED_AUTH                 0x0001
-//#define WEP_ENABLED                 0x0001  // moved to whd_types.h
-//#define TKIP_ENABLED                0x0002
-//#define AES_ENABLED                 0x0004
-
-typedef enum
-{
-    AUTH_ALGO_80211_OPEN = 1, AUTH_ALGO_80211_SHARED_KEY = 2, AUTH_ALGO_WPA = 3, AUTH_ALGO_WPA_PSK = 4,
-    AUTH_ALGO_WPA_NONE = 5, AUTH_ALGO_RSNA = 6, AUTH_ALGO_RSNA_PSK = 7,
-} AUTH_ALGORITHM;
-
-#define WSEC_SWFLAG                 0x0008
-#define CKIP_KP_ENABLED             0x0010
-#define CKIP_MIC_ENABLED            0x0020
-#define SES_OW_ENABLED              0x0040
-#define FIPS_ENABLED                0x0080
-#define SMS4_ENABLED                0x0100
-
-#define MFP_NONE                    0x0000
-#define MFP_CAPABLE                 0x0200
-#define MFP_REQUIRED                0x0400
-#define MFP_SHA256                  0x0800 /* a special configuration for STA for WIFI test tool */
-
-#define WPA_AUTH_DISABLED           0x0000
-#define WPA_AUTH_NONE               0x0001
-#define WPA_AUTH_UNSPECIFIED        0x0002
-#define WPA_AUTH_PSK                0x0004
-#define WPA_AUTH_CCKM               0x0008
-#define WPA2_AUTH_CCKM              0x0010
-#define WPA2_AUTH_UNSPECIFIED       0x0040
-#define WPA2_AUTH_PSK               0x0080
-#define BRCM_AUTH_PSK               0x0100
-#define BRCM_AUTH_DPT               0x0200
-#define WPA_AUTH_WAPI               0x0400
-#define WPA2_AUTH_MFP           0x1000  /* MFP (11w) in contrast to CCX */
-
-#define WPA2_AUTH_1X_SHA256     0x1000  /* 1X with SHA256 key derivation */
-#define WPA2_AUTH_TPK           0x2000  /* TDLS Peer Key */
-#define WPA2_AUTH_FT            0x4000  /* Fast Transition. */
-#define WPA2_AUTH_PSK_SHA256    0x8000  /* PSK with SHA256 key derivation */
-#define WPA2_AUTH_FILS_SHA256   0x10000 /* FILS with SHA256 key derivation */
-#define WPA2_AUTH_FILS_SHA384   0x20000 /* FILS with SHA384 key derivation */
-#define WPA2_AUTH_IS_FILS(auth) ( (auth) & (WPA2_AUTH_FILS_SHA256 | WPA2_AUTH_FILS_SHA384) )
-#define WPA3_AUTH_SAE_PSK       0x40000 /* SAE authentication with SHA-256 */
-#define WPA3_AUTH_SAE_FBT       0x80000 /* FT authentication over SAE */
-#define WPA3_AUTH_OWE           0x100000  /* OWE */
-#define WPA_AUTH_PFN_ANY        0xffffffff  /* for PFN, match only ssid */
-
-#define    MAXPMKID                 16
-#define WPA2_PMKID_LEN              16
-typedef struct _pmkid
-{
-    wl_ether_addr_t BSSID;
-    uint8_t PMKID[WPA2_PMKID_LEN];
-} pmkid_t;
-typedef struct _pmkid_list
-{
-    uint32_t npmkid;
-    pmkid_t pmkid[1];
-} pmkid_list_t;
-typedef struct _pmkid_cand
-{
-    wl_ether_addr_t BSSID;
-    uint8_t preauth;
-} pmkid_cand_t;
-typedef struct _pmkid_cand_list
-{
-    uint32_t npmkid_cand;
-    pmkid_cand_t pmkid_cand[1];
-} pmkid_cand_list_t;
-typedef struct wl_led_info
-{
-    uint32_t index;
-    uint32_t behavior;
-    uint8_t activehi;
-} wl_led_info_t;
-struct wl_dot11_assoc_req
-{
-    uint16_t capability;
-    uint16_t listen;
-};
-struct wl_dot11_assoc_resp
-{
-    uint16_t capability;
-    uint16_t status;
-    uint16_t aid;
-};
-typedef struct wl_assoc_info
-{
-    uint32_t req_len;
-    uint32_t resp_len;
-    uint32_t flags;
-    struct wl_dot11_assoc_req req;
-    wl_ether_addr_t reassoc_bssid;
-    struct wl_dot11_assoc_resp resp;
-} wl_assoc_info_t;
-#define WLC_ASSOC_REQ_IS_REASSOC 0x01
-typedef struct
-{
-    uint32_t byteoff;
-    uint32_t nbytes;
-    uint16_t buf[1];
-} srom_rw_t;
-typedef struct
-{
-    uint32_t source;
-    uint32_t byteoff;
-    uint32_t nbytes;
-} cis_rw_t;
-#define WLC_CIS_DEFAULT    0
-#define WLC_CIS_SROM    1
-#define WLC_CIS_OTP    2
-typedef struct
-{
-    uint32_t byteoff;
-    uint32_t val;
-    uint32_t size;
-    uint32_t band;
-} rw_reg_t;
-#define WL_ATTEN_APP_INPUT_PCL_OFF    0
-#define WL_ATTEN_PCL_ON            1
-#define WL_ATTEN_PCL_OFF        2
-typedef struct
-{
-    uint16_t auto_ctrl;
-    uint16_t bb;
-    uint16_t radio;
-    uint16_t txctl1;
-} atten_t;
-struct wme_tx_params_s
-{
-    uint8_t short_retry;
-    uint8_t short_fallback;
-    uint8_t long_retry;
-    uint8_t long_fallback;
-    uint16_t max_rate;
-};
-typedef struct wme_tx_params_s wme_tx_params_t;
-#define WL_WME_TX_PARAMS_IO_BYTES (sizeof(wme_tx_params_t) * AC_COUNT)
-#define WL_PWRIDX_PCL_OFF    -2
-#define WL_PWRIDX_PCL_ON    -1
-#define WL_PWRIDX_LOWER_LIMIT    -2
-#define WL_PWRIDX_UPPER_LIMIT    63
-typedef struct
-{
-    uint32_t val;
-    wl_ether_addr_t ea;
-} scb_val_t;
-#define BCM_MAC_STATUS_INDICATION    (0x40010200L)
-typedef struct
-{
-    uint16_t ver;
-    uint16_t len;
-    uint16_t cap;
-    uint32_t flags;
-    uint32_t idle;
-    wl_ether_addr_t ea;
-    wl_rateset_t rateset;
-    uint32_t in;
-    uint32_t listen_interval_inms;
-    uint32_t tx_pkts;
-    uint32_t tx_failures;
-    uint32_t rx_ucast_pkts;
-    uint32_t rx_mcast_pkts;
-    uint32_t tx_rate;
-    uint32_t rx_rate;
-} sta_info_t;
-#define WL_OLD_STAINFO_SIZE    offsetof(sta_info_t, tx_pkts)
-#define WL_STA_VER        2
-#define WL_STA_BRCM        0x1
-#define WL_STA_WME        0x2
-#define WL_STA_ABCAP        0x4
-#define WL_STA_AUTHE        0x8
-#define WL_STA_ASSOC        0x10
-#define WL_STA_AUTHO        0x20
-#define WL_STA_WDS        0x40
-#define WL_STA_WDS_LINKUP    0x80
-#define WL_STA_PS        0x100
-#define WL_STA_APSD_BE        0x200
-#define WL_STA_APSD_BK        0x400
-#define WL_STA_APSD_VI        0x800
-#define WL_STA_APSD_VO        0x1000
-#define WL_STA_N_CAP        0x2000
-#define WL_STA_SCBSTATS        0x4000
-#define WL_WDS_LINKUP        WL_STA_WDS_LINKUP
-typedef struct channel_info
-{
-    int32_t hw_channel;
-    int32_t target_channel;
-    int32_t scan_channel;
-} channel_info_t;
-struct mac_list
-{
-    uint32_t count;
-    wl_ether_addr_t ea[1];
-};
-typedef struct get_pktcnt
-{
-    uint32_t rx_good_pkt;
-    uint32_t rx_bad_pkt;
-    uint32_t tx_good_pkt;
-    uint32_t tx_bad_pkt;
-    uint32_t rx_ocast_good_pkt;
-} get_pktcnt_t;
-typedef struct wl_ioctl
-{
-    uint32_t cmd;
-    void *buf;
-    uint32_t len;
-    uint8_t set;
-    uint32_t used;
-    uint32_t needed;
-} wl_ioctl_t;
-typedef struct wlc_rev_info
-{
-    uint32_t vendorid;
-    uint32_t deviceid;
-    uint32_t radiorev;
-    uint32_t chiprev;
-    uint32_t corerev;
-    uint32_t boardid;
-    uint32_t boardvendor;
-    uint32_t boardrev;
-    uint32_t driverrev;
-    uint32_t ucoderev;
-    uint32_t bus;
-    uint32_t chipnum;
-    uint32_t phytype;
-    uint32_t phyrev;
-    uint32_t anarev;
-} wlc_rev_info_t;
-#define WL_REV_INFO_LEGACY_LENGTH    48
-#define WL_BRAND_MAX 10
-typedef struct wl_instance_info
-{
-    uint32_t instance;
-    int8_t brand[WL_BRAND_MAX];
-} wl_instance_info_t;
-typedef struct wl_txfifo_sz
-{
-    uint8_t fifo;
-    uint8_t size;
-} wl_txfifo_sz_t;
-#define WLC_IOV_NAME_LEN 30
-typedef struct wlc_iov_trx_s
-{
-    uint8_t module;
-    uint8_t type;
-    int8_t name[WLC_IOV_NAME_LEN];
-} wlc_iov_trx_t;
-
-/* Event mask ext support */
-typedef enum event_msgs_ext_command
-{
-    EVENTMSGS_NONE = 0, EVENTMSGS_SET_BIT = 1, EVENTMSGS_RESET_BIT = 2, EVENTMSGS_SET_MASK = 3
-} event_msgs_ext_command_t;
-
-#define EVENTMSGS_VER 1
-
-/* len- for SET it would be mask size from the application to the firmware */
-/*      for GET it would be actual firmware mask size */
-/* maxgetsize - is only used for GET. indicate max mask size that the */
-/*              application can read from the firmware */
-typedef struct eventmsgs_ext
-{
-    uint8_t ver;
-    uint8_t command;
-    uint8_t len;
-    uint8_t maxgetsize;
-    uint8_t mask[1];
-} eventmsgs_ext_t;
-
-#define IOVAR_STR_ACTFRAME               "actframe"
-#define IOVAR_STR_BSS                    "bss"
-#define IOVAR_STR_BSS_RATESET            "bss_rateset"
-#define IOVAR_STR_CSA                    "csa"
-#define IOVAR_STR_AMPDU_TID              "ampdu_tid"
-#define IOVAR_STR_APSTA                  "apsta"
-#define IOVAR_STR_ALLMULTI               "allmulti"
-#define IOVAR_STR_COUNTRY                "country"
-#define IOVAR_STR_EVENT_MSGS             "event_msgs"
-#define IOVAR_STR_EVENT_MSGS_EXT         "event_msgs_ext"
-#define IOVAR_STR_ESCAN                  "escan"
-#define IOVAR_STR_SUP_WPA                "sup_wpa"
-#define IOVAR_STR_CUR_ETHERADDR          "cur_etheraddr"
-#define IOVAR_STR_QTXPOWER               "qtxpower"
-#define IOVAR_STR_MCAST_LIST             "mcast_list"
-#define IOVAR_STR_PM2_SLEEP_RET          "pm2_sleep_ret"
-#define IOVAR_STR_PM_LIMIT               "pm_limit"
-#define IOVAR_STR_LISTEN_INTERVAL_BEACON "bcn_li_bcn"
-#define IOVAR_STR_LISTEN_INTERVAL_DTIM   "bcn_li_dtim"
-#define IOVAR_STR_LISTEN_INTERVAL_ASSOC  "assoc_listen"
-#define IOVAR_PSPOLL_PERIOD              "pspoll_prd"
-#define IOVAR_STR_VENDOR_IE              "vndr_ie"
-#define IOVAR_STR_TX_GLOM                "bus:txglom"
-#define IOVAR_STR_ACTION_FRAME           "actframe"
-#define IOVAR_STR_AC_PARAMS_STA          "wme_ac_sta"
-#define IOVAR_STR_COUNTERS               "counters"
-#define IOVAR_STR_PKT_FILTER_ADD         "pkt_filter_add"
-#define IOVAR_STR_PKT_FILTER_DELETE      "pkt_filter_delete"
-#define IOVAR_STR_PKT_FILTER_ENABLE      "pkt_filter_enable"
-#define IOVAR_STR_PKT_FILTER_MODE        "pkt_filter_mode"
-#define IOVAR_STR_PKT_FILTER_LIST        "pkt_filter_list"
-#define IOVAR_STR_PKT_FILTER_STATS       "pkt_filter_stats"
-#define IOVAR_STR_PKT_FILTER_CLEAR_STATS "pkt_filter_clear_stats"
-#define IOVAR_STR_DUTY_CYCLE_CCK         "dutycycle_cck"
-#define IOVAR_STR_DUTY_CYCLE_OFDM        "dutycycle_ofdm"
-#define IOVAR_STR_MKEEP_ALIVE            "mkeep_alive"
-#define IOVAR_STR_VERSION                "ver"
-#define IOVAR_STR_SUP_WPA2_EAPVER        "sup_wpa2_eapver"
-#define IOVAR_STR_ROAM_OFF               "roam_off"
-#define IOVAR_STR_CLOSEDNET              "closednet"
-#define IOVAR_STR_P2P_DISC               "p2p_disc"
-#define IOVAR_STR_P2P_DEV                "p2p_dev"
-#define IOVAR_STR_P2P_IF                 "p2p_if"
-#define IOVAR_STR_P2P_IFADD              "p2p_ifadd"
-#define IOVAR_STR_P2P_IFDEL              "p2p_ifdel"
-#define IOVAR_STR_P2P_IFUPD              "p2p_ifupd"
-#define IOVAR_STR_P2P_SCAN               "p2p_scan"
-#define IOVAR_STR_P2P_STATE              "p2p_state"
-#define IOVAR_STR_P2P_SSID               "p2p_ssid"
-#define IOVAR_STR_P2P_IP_ADDR            "p2p_ip_addr"
-#define IOVAR_STR_NRATE                  "nrate"
-#define IOVAR_STR_BGRATE                 "bg_rate"
-#define IOVAR_STR_ARATE                  "a_rate"
-#define IOVAR_STR_NMODE                  "nmode"
-#define IOVAR_STR_MAX_ASSOC              "maxassoc"
-#define IOVAR_STR_2G_MULTICAST_RATE      "2g_mrate"
-#define IOVAR_STR_2G_RATE                "2g_rate"
-#define IOVAR_STR_MPC                    "mpc"
-#define IOVAR_STR_IBSS_JOIN              "IBSS_join_only"
-#define IOVAR_STR_AMPDU_BA_WINDOW_SIZE   "ampdu_ba_wsize"
-#define IOVAR_STR_AMPDU_MPDU             "ampdu_mpdu"
-#define IOVAR_STR_AMPDU_RX               "ampdu_rx"
-#define IOVAR_STR_AMPDU_RX_FACTOR        "ampdu_rx_factor"
-#define IOVAR_STR_AMPDU_HOST_REORDER     "ampdu_hostreorder"
-#define IOVAR_STR_MIMO_BW_CAP            "mimo_bw_cap"
-#define IOVAR_STR_RMC_ACKREQ             "rmc_ackreq"
-#define IOVAR_STR_RMC_STATUS             "rmc_status"
-#define IOVAR_STR_RMC_COUNTS             "rmc_stats"
-#define IOVAR_STR_RMC_ROLE               "rmc_role"
-#define IOVAR_STR_HT40_INTOLERANCE       "intol40"
-#define IOVAR_STR_RAND                   "rand"
-#define IOVAR_STR_SSID                   "ssid"
-#define IOVAR_STR_WSEC                   "wsec"
-#define IOVAR_STR_WPA_AUTH               "wpa_auth"
-#define IOVAR_STR_INTERFACE_REMOVE       "interface_remove"
-#define IOVAR_STR_SUP_WPA_TMO            "sup_wpa_tmo"
-#define IOVAR_STR_JOIN                   "join"
-#define IOVAR_STR_TLV                    "tlv"
-#define IOVAR_STR_NPHY_ANTSEL            "nphy_antsel"
-#define IOVAR_STR_AVB_TIMESTAMP_ADDR     "avb_timestamp_addr"
-#define IOVAR_STR_BSS_MAX_ASSOC          "bss_maxassoc"
-#define IOVAR_STR_RM_REQ                 "rm_req"
-#define IOVAR_STR_RM_REP                 "rm_rep"
-#define IOVAR_STR_PSPRETEND_RETRY_LIMIT  "pspretend_retry_limit"
-#define IOVAR_STR_PSPRETEND_THRESHOLD    "pspretend_threshold"
-#define IOVAR_STR_SWDIV_TIMEOUT          "swdiv_timeout"
-#define IOVAR_STR_RESET_CNTS             "reset_cnts"
-#define IOVAR_STR_PHYRATE_LOG            "phyrate_log"
-#define IOVAR_STR_PHYRATE_LOG_SIZE       "phyrate_log_size"
-#define IOVAR_STR_PHYRATE_LOG_DUMP       "phyrate_dump"
-#define IOVAR_STR_SCAN_ASSOC_TIME        "scan_assoc_time"
-#define IOVAR_STR_SCAN_UNASSOC_TIME      "scan_unassoc_time"
-#define IOVAR_STR_SCAN_PASSIVE_TIME      "scan_passive_time"
-#define IOVAR_STR_SCAN_HOME_TIME         "scan_home_time"
-#define IOVAR_STR_SCAN_NPROBES           "scan_nprobes"
-#define IOVAR_STR_AUTOCOUNTRY            "autocountry"
-#define IOVAR_STR_CAP                    "cap"
-#define IOVAR_STR_MPDU_PER_AMPDU         "ampdu_mpdu"
-#define IOVAR_STR_VHT_FEATURES           "vht_features"
-#define IOVAR_STR_CHANSPEC               "chanspec"
-
-#define IOVAR_STR_WOWL                   "wowl"
-#define IOVAR_STR_WOWL_OS                "wowl_os"
-#define IOVAR_STR_WOWL_KEEP_ALIVE        "wowl_keepalive"
-#define IOVAR_STR_WOWL_PATTERN           "wowl_pattern"
-#define IOVAR_STR_WOWL_PATTERN_CLR       "clr"
-#define IOVAR_STR_WOWL_PATTERN_ADD       "add"
-#define IOVAR_STR_WOWL_ARP_HOST_IP       "wowl_arp_hostip"
-#define IOVAR_STR_ULP_WAIT               "ulp_wait"
-#define IOVAR_STR_ULP                    "ulp"
-
-#define IOVAR_STR_PNO_ON                 "pfn"
-#define IOVAR_STR_PNO_ADD                "pfn_add"
-#define IOVAR_STR_PNO_SET                "pfn_set"
-#define IOVAR_STR_PNO_CLEAR              "pfnclear"
-#define IOVAR_STR_SCAN_CACHE_CLEAR       "scancache_clear"
-#define MCS_SETLEN                       16
-
-#define IOVAR_STR_RRM                    "rrm"
-#define IOVAR_STR_RRM_NOISE_REQ          "rrm_noise_req"
-#define IOVAR_STR_RRM_NBR_REQ            "rrm_nbr_req"
-#define IOVAR_STR_RRM_LM_REQ             "rrm_lm_req"
-#define IOVAR_STR_RRM_STAT_REQ           "rrm_stat_req"
-#define IOVAR_STR_RRM_FRAME_REQ          "rrm_frame_req"
-#define IOVAR_STR_RRM_CHLOAD_REQ         "rrm_chload_req"
-#define IOVAR_STR_RRM_BCN_REQ            "rrm_bcn_req"
-#define IOVAR_STR_RRM_NBR_LIST           "rrm_nbr_list"
-#define IOVAR_STR_RRM_NBR_ADD            "rrm_nbr_add_nbr"
-#define IOVAR_STR_RRM_NBR_DEL            "rrm_nbr_del_nbr"
-#define IOVAR_STR_RRM_BCNREQ_THRTL_WIN   "rrm_bcn_req_thrtl_win"
-#define IOVAR_STR_RRM_BCNREQ_MAXOFF_TIME "rrm_bcn_req_max_off_chan_time"
-#define IOVAR_STR_RRM_BCNREQ_TRFMS_PRD   "rrm_bcn_req_traff_meas_per"
-
-#define IOVAR_STR_WNM                    "wnm"
-#define IOVAR_STR_BSSTRANS_QUERY         "wnm_bsstrans_query"
-#define IOVAR_STR_BSSTRANS_RESP          "wnm_bsstrans_resp"
-
-#define IOVAR_STR_MESH_ADD_ROUTE         "mesh_add_route"
-#define IOVAR_STR_MESH_DEL_ROUTE         "mesh_del_route"
-#define IOVAR_STR_MESH_FIND              "mesh_find"
-#define IOVAR_STR_MESH_FILTER            "mesh_filter"
-#define IOVAR_STR_MESH_PEER              "mesh_peer"
-#define IOVAR_STR_MESH_PEER_STATUS       "mesh_peer_status"
-#define IOVAR_STR_MESH_DELFILTER         "mesh_delfilter"
-#define IOVAR_STR_MESH_MAX_PEERS         "mesh_max_peers"
-
-#define IOVAR_STR_FBT_OVER_DS            "fbtoverds"
-#define IOVAR_STR_FBT_CAPABILITIES       "fbt_cap"
-
-#define IOVAR_STR_MFP                    "mfp"
-
-#define IOVAR_STR_OTPRAW                 "otpraw"
-#define IOVAR_NAN                        "nan"
-#define IOVAR_STR_CLMLOAD                "clmload"
-#define IOVAR_STR_CLMLOAD_STATUS         "clmload_status"
-#define IOVAR_STR_CLMVER                 "clmver"
-#define IOVAR_STR_MEMUSE                 "memuse"
-
-#define IOVAR_STR_LDPC_CAP               "ldpc_cap"
-#define IOVAR_STR_LDPC_TX                "ldpc_tx"
-#define IOVAR_STR_SGI_RX                 "sgi_rx"
-#define IOVAR_STR_SGI_TX                 "sgi_tx"
-
-#define IOVAR_STR_APIVTW_OVERRIDE        "brcmapivtwo"
-
-#define IOVAR_STR_BWTE_BWTE_GCI_MASK     "bwte_gci_mask"
-#define IOVAR_STR_BWTE_GCI_SENDMSG       "bwte_gci_sendm"
-#define IOVAR_STR_WD_DISABLE             "wd_disable"
-#define IOVAR_STR_DLTRO                  "dltro"
-#define IOVAR_STR_SAE_PASSWORD           "sae_password"
-
-#define IOVAR_STR_BTC_LESCAN_PARAMS      "btc_lescan_params"
-
-#define IOVAR_STR_ARP_VERSION            "arp_version"
-#define IOVAR_STR_ARP_PEERAGE            "arp_peerage"
-#define IOVAR_STR_ARPOE                  "arpoe"
-#define IOVAR_STR_ARP_OL                 "arp_ol"
-#define IOVAR_STR_ARP_TABLE_CLEAR        "arp_table_clear"
-#define IOVAR_STR_ARP_HOSTIP             "arp_hostip"
-#define IOVAR_STR_ARP_HOSTIP_CLEAR       "arp_hostip_clear"
-#define IOVAR_STR_ARP_STATS              "arp_stats"
-#define IOVAR_STR_ARP_STATS_CLEAR        "arp_stats_clear"
-#define IOVAR_STR_TKO                    "tko"
-
-/* This value derived from the above strings, which appear maxed out in the 20s */
-#define IOVAR_NAME_STR_MAX_SIZE          32
-
-#define WLC_IOCTL_MAGIC                    (0x14e46c77)
-#define WLC_IOCTL_VERSION                  (1)
-#define WLC_IOCTL_SMLEN                    (256)
-#define WLC_IOCTL_MEDLEN                   (1536)
-#define WLC_IOCTL_MAXLEN                   (8192)
-
-#define WLC_GET_MAGIC                      ( (uint32_t)0 )
-#define WLC_GET_VERSION                    ( (uint32_t)1 )
-#define WLC_UP                             ( (uint32_t)2 )
-#define WLC_DOWN                           ( (uint32_t)3 )
-#define WLC_GET_LOOP                       ( (uint32_t)4 )
-#define WLC_SET_LOOP                       ( (uint32_t)5 )
-#define WLC_DUMP                           ( (uint32_t)6 )
-#define WLC_GET_MSGLEVEL                   ( (uint32_t)7 )
-#define WLC_SET_MSGLEVEL                   ( (uint32_t)8 )
-#define WLC_GET_PROMISC                    ( (uint32_t)9 )
-#define WLC_SET_PROMISC                    ( (uint32_t)10 )
-#define WLC_GET_RATE                       ( (uint32_t)12 )
-#define WLC_GET_INSTANCE                   ( (uint32_t)14 )
-#define WLC_GET_INFRA                      ( (uint32_t)19 )
-#define WLC_SET_INFRA                      ( (uint32_t)20 )
-#define WLC_GET_AUTH                       ( (uint32_t)21 )
-#define WLC_SET_AUTH                       ( (uint32_t)22 )
-#define WLC_GET_BSSID                      ( (uint32_t)23 )
-#define WLC_SET_BSSID                      ( (uint32_t)24 )
-#define WLC_GET_SSID                       ( (uint32_t)25 )
-#define WLC_SET_SSID                       ( (uint32_t)26 )
-#define WLC_RESTART                        ( (uint32_t)27 )
-#define WLC_GET_CHANNEL                    ( (uint32_t)29 )
-#define WLC_SET_CHANNEL                    ( (uint32_t)30 )
-#define WLC_GET_SRL                        ( (uint32_t)31 )
-#define WLC_SET_SRL                        ( (uint32_t)32 )
-#define WLC_GET_LRL                        ( (uint32_t)33 )
-#define WLC_SET_LRL                        ( (uint32_t)34 )
-#define WLC_GET_PLCPHDR                    ( (uint32_t)35 )
-#define WLC_SET_PLCPHDR                    ( (uint32_t)36 )
-#define WLC_GET_RADIO                      ( (uint32_t)37 )
-#define WLC_SET_RADIO                      ( (uint32_t)38 )
-#define WLC_GET_PHYTYPE                    ( (uint32_t)39 )
-#define WLC_DUMP_RATE                      ( (uint32_t)40 )
-#define WLC_SET_RATE_PARAMS                ( (uint32_t)41 )
-#define WLC_GET_KEY                        ( (uint32_t)44 )
-#define WLC_SET_KEY                        ( (uint32_t)45 )
-#define WLC_GET_REGULATORY                 ( (uint32_t)46 )
-#define WLC_SET_REGULATORY                 ( (uint32_t)47 )
-#define WLC_GET_PASSIVE_SCAN               ( (uint32_t)48 )
-#define WLC_SET_PASSIVE_SCAN               ( (uint32_t)49 )
-#define WLC_SCAN                           ( (uint32_t)50 )
-#define WLC_SCAN_RESULTS                   ( (uint32_t)51 )
-#define WLC_DISASSOC                       ( (uint32_t)52 )
-#define WLC_REASSOC                        ( (uint32_t)53 )
-#define WLC_GET_ROAM_TRIGGER               ( (uint32_t)54 )
-#define WLC_SET_ROAM_TRIGGER               ( (uint32_t)55 )
-#define WLC_GET_ROAM_DELTA                 ( (uint32_t)56 )
-#define WLC_SET_ROAM_DELTA                 ( (uint32_t)57 )
-#define WLC_GET_ROAM_SCAN_PERIOD           ( (uint32_t)58 )
-#define WLC_SET_ROAM_SCAN_PERIOD           ( (uint32_t)59 )
-#define WLC_EVM                            ( (uint32_t)60 )
-#define WLC_GET_TXANT                      ( (uint32_t)61 )
-#define WLC_SET_TXANT                      ( (uint32_t)62 )
-#define WLC_GET_ANTDIV                     ( (uint32_t)63 )
-#define WLC_SET_ANTDIV                     ( (uint32_t)64 )
-#define WLC_GET_CLOSED                     ( (uint32_t)67 )
-#define WLC_SET_CLOSED                     ( (uint32_t)68 )
-#define WLC_GET_MACLIST                    ( (uint32_t)69 )
-#define WLC_SET_MACLIST                    ( (uint32_t)70 )
-#define WLC_GET_RATESET                    ( (uint32_t)71 )
-#define WLC_SET_RATESET                    ( (uint32_t)72 )
-#define WLC_LONGTRAIN                      ( (uint32_t)74 )
-#define WLC_GET_BCNPRD                     ( (uint32_t)75 )
-#define WLC_SET_BCNPRD                     ( (uint32_t)76 )
-#define WLC_GET_DTIMPRD                    ( (uint32_t)77 )
-#define WLC_SET_DTIMPRD                    ( (uint32_t)78 )
-#define WLC_GET_SROM                       ( (uint32_t)79 )
-#define WLC_SET_SROM                       ( (uint32_t)80 )
-#define WLC_GET_WEP_RESTRICT               ( (uint32_t)81 )
-#define WLC_SET_WEP_RESTRICT               ( (uint32_t)82 )
-#define WLC_GET_COUNTRY                    ( (uint32_t)83 )
-#define WLC_SET_COUNTRY                    ( (uint32_t)84 )
-#define WLC_GET_PM                         ( (uint32_t)85 )
-#define WLC_SET_PM                         ( (uint32_t)86 )
-#define WLC_GET_WAKE                       ( (uint32_t)87 )
-#define WLC_SET_WAKE                       ( (uint32_t)88 )
-#define WLC_GET_FORCELINK                  ( (uint32_t)90 )
-#define WLC_SET_FORCELINK                  ( (uint32_t)91 )
-#define WLC_FREQ_ACCURACY                  ( (uint32_t)92 )
-#define WLC_CARRIER_SUPPRESS               ( (uint32_t)93 )
-#define WLC_GET_PHYREG                     ( (uint32_t)94 )
-#define WLC_SET_PHYREG                     ( (uint32_t)95 )
-#define WLC_GET_RADIOREG                   ( (uint32_t)96 )
-#define WLC_SET_RADIOREG                   ( (uint32_t)97 )
-#define WLC_GET_REVINFO                    ( (uint32_t)98 )
-#define WLC_GET_UCANTDIV                   ( (uint32_t)99 )
-#define WLC_SET_UCANTDIV                   ( (uint32_t)100 )
-#define WLC_R_REG                          ( (uint32_t)101 )
-#define WLC_W_REG                          ( (uint32_t)102 )
-#define WLC_GET_MACMODE                    ( (uint32_t)105 )
-#define WLC_SET_MACMODE                    ( (uint32_t)106 )
-#define WLC_GET_MONITOR                    ( (uint32_t)107 )
-#define WLC_SET_MONITOR                    ( (uint32_t)108 )
-#define WLC_GET_GMODE                      ( (uint32_t)109 )
-#define WLC_SET_GMODE                      ( (uint32_t)110 )
-#define WLC_GET_LEGACY_ERP                 ( (uint32_t)111 )
-#define WLC_SET_LEGACY_ERP                 ( (uint32_t)112 )
-#define WLC_GET_RX_ANT                     ( (uint32_t)113 )
-#define WLC_GET_CURR_RATESET               ( (uint32_t)114 )
-#define WLC_GET_SCANSUPPRESS               ( (uint32_t)115 )
-#define WLC_SET_SCANSUPPRESS               ( (uint32_t)116 )
-#define WLC_GET_AP                         ( (uint32_t)117 )
-#define WLC_SET_AP                         ( (uint32_t)118 )
-#define WLC_GET_EAP_RESTRICT               ( (uint32_t)119 )
-#define WLC_SET_EAP_RESTRICT               ( (uint32_t)120 )
-#define WLC_SCB_AUTHORIZE                  ( (uint32_t)121 )
-#define WLC_SCB_DEAUTHORIZE                ( (uint32_t)122 )
-#define WLC_GET_WDSLIST                    ( (uint32_t)123 )
-#define WLC_SET_WDSLIST                    ( (uint32_t)124 )
-#define WLC_GET_ATIM                       ( (uint32_t)125 )
-#define WLC_SET_ATIM                       ( (uint32_t)126 )
-#define WLC_GET_RSSI                       ( (uint32_t)127 )
-#define WLC_GET_PHYANTDIV                  ( (uint32_t)128 )
-#define WLC_SET_PHYANTDIV                  ( (uint32_t)129 )
-#define WLC_AP_RX_ONLY                     ( (uint32_t)130 )
-#define WLC_GET_TX_PATH_PWR                ( (uint32_t)131 )
-#define WLC_SET_TX_PATH_PWR                ( (uint32_t)132 )
-#define WLC_GET_WSEC                       ( (uint32_t)133 )
-#define WLC_SET_WSEC                       ( (uint32_t)134 )
-#define WLC_GET_PHY_NOISE                  ( (uint32_t)135 )
-#define WLC_GET_BSS_INFO                   ( (uint32_t)136 )
-#define WLC_GET_PKTCNTS                    ( (uint32_t)137 )
-#define WLC_GET_LAZYWDS                    ( (uint32_t)138 )
-#define WLC_SET_LAZYWDS                    ( (uint32_t)139 )
-#define WLC_GET_BANDLIST                   ( (uint32_t)140 )
-#define WLC_GET_BAND                       ( (uint32_t)141 )
-#define WLC_SET_BAND                       ( (uint32_t)142 )
-#define WLC_SCB_DEAUTHENTICATE             ( (uint32_t)143 )
-#define WLC_GET_SHORTSLOT                  ( (uint32_t)144 )
-#define WLC_GET_SHORTSLOT_OVERRIDE         ( (uint32_t)145 )
-#define WLC_SET_SHORTSLOT_OVERRIDE         ( (uint32_t)146 )
-#define WLC_GET_SHORTSLOT_RESTRICT         ( (uint32_t)147 )
-#define WLC_SET_SHORTSLOT_RESTRICT         ( (uint32_t)148 )
-#define WLC_GET_GMODE_PROTECTION           ( (uint32_t)149 )
-#define WLC_GET_GMODE_PROTECTION_OVERRIDE  ( (uint32_t)150 )
-#define WLC_SET_GMODE_PROTECTION_OVERRIDE  ( (uint32_t)151 )
-#define WLC_UPGRADE                        ( (uint32_t)152 )
-#define WLC_GET_IGNORE_BCNS                ( (uint32_t)155 )
-#define WLC_SET_IGNORE_BCNS                ( (uint32_t)156 )
-#define WLC_GET_SCB_TIMEOUT                ( (uint32_t)157 )
-#define WLC_SET_SCB_TIMEOUT                ( (uint32_t)158 )
-#define WLC_GET_ASSOCLIST                  ( (uint32_t)159 )
-#define WLC_GET_CLK                        ( (uint32_t)160 )
-#define WLC_SET_CLK                        ( (uint32_t)161 )
-#define WLC_GET_UP                         ( (uint32_t)162 )
-#define WLC_OUT                            ( (uint32_t)163 )
-#define WLC_GET_WPA_AUTH                   ( (uint32_t)164 )
-#define WLC_SET_WPA_AUTH                   ( (uint32_t)165 )
-#define WLC_GET_UCFLAGS                    ( (uint32_t)166 )
-#define WLC_SET_UCFLAGS                    ( (uint32_t)167 )
-#define WLC_GET_PWRIDX                     ( (uint32_t)168 )
-#define WLC_SET_PWRIDX                     ( (uint32_t)169 )
-#define WLC_GET_TSSI                       ( (uint32_t)170 )
-#define WLC_GET_SUP_RATESET_OVERRIDE       ( (uint32_t)171 )
-#define WLC_SET_SUP_RATESET_OVERRIDE       ( (uint32_t)172 )
-#define WLC_GET_PROTECTION_CONTROL         ( (uint32_t)178 )
-#define WLC_SET_PROTECTION_CONTROL         ( (uint32_t)179 )
-#define WLC_GET_PHYLIST                    ( (uint32_t)180 )
-#define WLC_ENCRYPT_STRENGTH               ( (uint32_t)181 )
-#define WLC_DECRYPT_STATUS                 ( (uint32_t)182 )
-#define WLC_GET_KEY_SEQ                    ( (uint32_t)183 )
-#define WLC_GET_SCAN_CHANNEL_TIME          ( (uint32_t)184 )
-#define WLC_SET_SCAN_CHANNEL_TIME          ( (uint32_t)185 )
-#define WLC_GET_SCAN_UNASSOC_TIME          ( (uint32_t)186 )
-#define WLC_SET_SCAN_UNASSOC_TIME          ( (uint32_t)187 )
-#define WLC_GET_SCAN_HOME_TIME             ( (uint32_t)188 )
-#define WLC_SET_SCAN_HOME_TIME             ( (uint32_t)189 )
-#define WLC_GET_SCAN_NPROBES               ( (uint32_t)190 )
-#define WLC_SET_SCAN_NPROBES               ( (uint32_t)191 )
-#define WLC_GET_PRB_RESP_TIMEOUT           ( (uint32_t)192 )
-#define WLC_SET_PRB_RESP_TIMEOUT           ( (uint32_t)193 )
-#define WLC_GET_ATTEN                      ( (uint32_t)194 )
-#define WLC_SET_ATTEN                      ( (uint32_t)195 )
-#define WLC_GET_SHMEM                      ( (uint32_t)196 )
-#define WLC_SET_SHMEM                      ( (uint32_t)197 )
-#define WLC_SET_WSEC_TEST                  ( (uint32_t)200 )
-#define WLC_SCB_DEAUTHENTICATE_FOR_REASON  ( (uint32_t)201 )
-#define WLC_TKIP_COUNTERMEASURES           ( (uint32_t)202 )
-#define WLC_GET_PIOMODE                    ( (uint32_t)203 )
-#define WLC_SET_PIOMODE                    ( (uint32_t)204 )
-#define WLC_SET_ASSOC_PREFER               ( (uint32_t)205 )
-#define WLC_GET_ASSOC_PREFER               ( (uint32_t)206 )
-#define WLC_SET_ROAM_PREFER                ( (uint32_t)207 )
-#define WLC_GET_ROAM_PREFER                ( (uint32_t)208 )
-#define WLC_SET_LED                        ( (uint32_t)209 )
-#define WLC_GET_LED                        ( (uint32_t)210 )
-#define WLC_GET_INTERFERENCE_MODE          ( (uint32_t)211 )
-#define WLC_SET_INTERFERENCE_MODE          ( (uint32_t)212 )
-#define WLC_GET_CHANNEL_QA                 ( (uint32_t)213 )
-#define WLC_START_CHANNEL_QA               ( (uint32_t)214 )
-#define WLC_GET_CHANNEL_SEL                ( (uint32_t)215 )
-#define WLC_START_CHANNEL_SEL              ( (uint32_t)216 )
-#define WLC_GET_VALID_CHANNELS             ( (uint32_t)217 )
-#define WLC_GET_FAKEFRAG                   ( (uint32_t)218 )
-#define WLC_SET_FAKEFRAG                   ( (uint32_t)219 )
-#define WLC_GET_PWROUT_PERCENTAGE          ( (uint32_t)220 )
-#define WLC_SET_PWROUT_PERCENTAGE          ( (uint32_t)221 )
-#define WLC_SET_BAD_FRAME_PREEMPT          ( (uint32_t)222 )
-#define WLC_GET_BAD_FRAME_PREEMPT          ( (uint32_t)223 )
-#define WLC_SET_LEAP_LIST                  ( (uint32_t)224 )
-#define WLC_GET_LEAP_LIST                  ( (uint32_t)225 )
-#define WLC_GET_CWMIN                      ( (uint32_t)226 )
-#define WLC_SET_CWMIN                      ( (uint32_t)227 )
-#define WLC_GET_CWMAX                      ( (uint32_t)228 )
-#define WLC_SET_CWMAX                      ( (uint32_t)229 )
-#define WLC_GET_WET                        ( (uint32_t)230 )
-#define WLC_SET_WET                        ( (uint32_t)231 )
-#define WLC_GET_PUB                        ( (uint32_t)232 )
-#define WLC_GET_KEY_PRIMARY                ( (uint32_t)235 )
-#define WLC_SET_KEY_PRIMARY                ( (uint32_t)236 )
-#define WLC_GET_ACI_ARGS                   ( (uint32_t)238 )
-#define WLC_SET_ACI_ARGS                   ( (uint32_t)239 )
-#define WLC_UNSET_CALLBACK                 ( (uint32_t)240 )
-#define WLC_SET_CALLBACK                   ( (uint32_t)241 )
-#define WLC_GET_RADAR                      ( (uint32_t)242 )
-#define WLC_SET_RADAR                      ( (uint32_t)243 )
-#define WLC_SET_SPECT_MANAGMENT            ( (uint32_t)244 )
-#define WLC_GET_SPECT_MANAGMENT            ( (uint32_t)245 )
-#define WLC_WDS_GET_REMOTE_HWADDR          ( (uint32_t)246 )
-#define WLC_WDS_GET_WPA_SUP                ( (uint32_t)247 )
-#define WLC_SET_CS_SCAN_TIMER              ( (uint32_t)248 )
-#define WLC_GET_CS_SCAN_TIMER              ( (uint32_t)249 )
-#define WLC_MEASURE_REQUEST                ( (uint32_t)250 )
-#define WLC_INIT                           ( (uint32_t)251 )
-#define WLC_SEND_QUIET                     ( (uint32_t)252 )
-#define WLC_KEEPALIVE                      ( (uint32_t)253 )
-#define WLC_SEND_PWR_CONSTRAINT            ( (uint32_t)254 )
-#define WLC_UPGRADE_STATUS                 ( (uint32_t)255 )
-#define WLC_CURRENT_PWR                    ( (uint32_t)256 )
-#define WLC_GET_SCAN_PASSIVE_TIME          ( (uint32_t)257 )
-#define WLC_SET_SCAN_PASSIVE_TIME          ( (uint32_t)258 )
-#define WLC_LEGACY_LINK_BEHAVIOR           ( (uint32_t)259 )
-#define WLC_GET_CHANNELS_IN_COUNTRY        ( (uint32_t)260 )
-#define WLC_GET_COUNTRY_LIST               ( (uint32_t)261 )
-#define WLC_GET_VAR                        ( (uint32_t)262 )
-#define WLC_SET_VAR                        ( (uint32_t)263 )
-#define WLC_NVRAM_GET                      ( (uint32_t)264 )
-#define WLC_NVRAM_SET                      ( (uint32_t)265 )
-#define WLC_NVRAM_DUMP                     ( (uint32_t)266 )
-#define WLC_REBOOT                         ( (uint32_t)267 )
-#define WLC_SET_WSEC_PMK                   ( (uint32_t)268 )
-#define WLC_GET_AUTH_MODE                  ( (uint32_t)269 )
-#define WLC_SET_AUTH_MODE                  ( (uint32_t)270 )
-#define WLC_GET_WAKEENTRY                  ( (uint32_t)271 )
-#define WLC_SET_WAKEENTRY                  ( (uint32_t)272 )
-#define WLC_NDCONFIG_ITEM                  ( (uint32_t)273 )
-#define WLC_NVOTPW                         ( (uint32_t)274 )
-#define WLC_OTPW                           ( (uint32_t)275 )
-#define WLC_IOV_BLOCK_GET                  ( (uint32_t)276 )
-#define WLC_IOV_MODULES_GET                ( (uint32_t)277 )
-#define WLC_SOFT_RESET                     ( (uint32_t)278 )
-#define WLC_GET_ALLOW_MODE                 ( (uint32_t)279 )
-#define WLC_SET_ALLOW_MODE                 ( (uint32_t)280 )
-#define WLC_GET_DESIRED_BSSID              ( (uint32_t)281 )
-#define WLC_SET_DESIRED_BSSID              ( (uint32_t)282 )
-#define WLC_DISASSOC_MYAP                  ( (uint32_t)283 )
-#define WLC_GET_NBANDS                     ( (uint32_t)284 )
-#define WLC_GET_BANDSTATES                 ( (uint32_t)285 )
-#define WLC_GET_WLC_BSS_INFO               ( (uint32_t)286 )
-#define WLC_GET_ASSOC_INFO                 ( (uint32_t)287 )
-#define WLC_GET_OID_PHY                    ( (uint32_t)288 )
-#define WLC_SET_OID_PHY                    ( (uint32_t)289 )
-#define WLC_SET_ASSOC_TIME                 ( (uint32_t)290 )
-#define WLC_GET_DESIRED_SSID               ( (uint32_t)291 )
-#define WLC_GET_CHANSPEC                   ( (uint32_t)292 )
-#define WLC_GET_ASSOC_STATE                ( (uint32_t)293 )
-#define WLC_SET_PHY_STATE                  ( (uint32_t)294 )
-#define WLC_GET_SCAN_PENDING               ( (uint32_t)295 )
-#define WLC_GET_SCANREQ_PENDING            ( (uint32_t)296 )
-#define WLC_GET_PREV_ROAM_REASON           ( (uint32_t)297 )
-#define WLC_SET_PREV_ROAM_REASON           ( (uint32_t)298 )
-#define WLC_GET_BANDSTATES_PI              ( (uint32_t)299 )
-#define WLC_GET_PHY_STATE                  ( (uint32_t)300 )
-#define WLC_GET_BSS_WPA_RSN                ( (uint32_t)301 )
-#define WLC_GET_BSS_WPA2_RSN               ( (uint32_t)302 )
-#define WLC_GET_BSS_BCN_TS                 ( (uint32_t)303 )
-#define WLC_GET_INT_DISASSOC               ( (uint32_t)304 )
-#define WLC_SET_NUM_PEERS                  ( (uint32_t)305 )
-#define WLC_GET_NUM_BSS                    ( (uint32_t)306 )
-#define WLC_GET_WSEC_PMK                   ( (uint32_t)318 )
-#define WLC_GET_RANDOM_BYTES               ( (uint32_t)319 )
-#define WLC_LAST                           ( (uint32_t)320 )
-
-#define EPICTRL_COOKIE        0xABADCEDE
-#define CMN_IOCTL_OFF 0x180
-#define WL_OID_BASE        0xFFE41420
-#define OID_WL_GETINSTANCE    (WL_OID_BASE + WLC_GET_INSTANCE)
-#define OID_WL_GET_FORCELINK    (WL_OID_BASE + WLC_GET_FORCELINK)
-#define OID_WL_SET_FORCELINK    (WL_OID_BASE + WLC_SET_FORCELINK)
-#define    OID_WL_ENCRYPT_STRENGTH    (WL_OID_BASE + WLC_ENCRYPT_STRENGTH)
-#define OID_WL_DECRYPT_STATUS    (WL_OID_BASE + WLC_DECRYPT_STATUS)
-#define OID_LEGACY_LINK_BEHAVIOR (WL_OID_BASE + WLC_LEGACY_LINK_BEHAVIOR)
-#define OID_WL_NDCONFIG_ITEM (WL_OID_BASE + WLC_NDCONFIG_ITEM)
-#define OID_STA_CHANSPEC    (WL_OID_BASE + WLC_GET_CHANSPEC)
-#define OID_STA_NBANDS        (WL_OID_BASE + WLC_GET_NBANDS)
-#define OID_STA_GET_PHY        (WL_OID_BASE + WLC_GET_OID_PHY)
-#define OID_STA_SET_PHY        (WL_OID_BASE + WLC_SET_OID_PHY)
-#define OID_STA_ASSOC_TIME    (WL_OID_BASE + WLC_SET_ASSOC_TIME)
-#define OID_STA_DESIRED_SSID (WL_OID_BASE + WLC_GET_DESIRED_SSID)
-#define OID_STA_SET_PHY_STATE (WL_OID_BASE + WLC_SET_PHY_STATE)
-#define OID_STA_SCAN_PENDING    (WL_OID_BASE + WLC_GET_SCAN_PENDING)
-#define OID_STA_SCANREQ_PENDING (WL_OID_BASE + WLC_GET_SCANREQ_PENDING)
-#define OID_STA_GET_ROAM_REASON (WL_OID_BASE + WLC_GET_PREV_ROAM_REASON)
-#define OID_STA_SET_ROAM_REASON (WL_OID_BASE + WLC_SET_PREV_ROAM_REASON)
-#define OID_STA_GET_PHY_STATE (WL_OID_BASE + WLC_GET_PHY_STATE)
-#define OID_STA_INT_DISASSOC    (WL_OID_BASE + WLC_GET_INT_DISASSOC)
-#define OID_STA_SET_NUM_PEERS    (WL_OID_BASE + WLC_SET_NUM_PEERS)
-#define OID_STA_GET_NUM_BSS        (WL_OID_BASE + WLC_GET_NUM_BSS)
-#define WL_DECRYPT_STATUS_SUCCESS    1
-#define WL_DECRYPT_STATUS_FAILURE    2
-#define WL_DECRYPT_STATUS_UNKNOWN    3
-#define WLC_UPGRADE_SUCCESS            0
-#define WLC_UPGRADE_PENDING            1
-typedef struct
-{
-    int8_t *name;
-    void *param;
-} ndconfig_item_t;
-typedef struct _wl_assoc_result
-{
-    unsigned long associated;
-    unsigned long NDIS_auth;
-    unsigned long NDIS_infra;
-} wl_assoc_result_t;
-#define WL_RADIO_SW_DISABLE        (1 << 0)
-#define WL_RADIO_HW_DISABLE        (1 << 1)
-#define WL_RADIO_MPC_DISABLE       (1 << 2)
-#define WL_RADIO_COUNTRY_DISABLE   (1 << 3)
-#define WL_TXPWR_OVERRIDE          (1U << 31)
-#define WL_PHY_PAVARS_LEN          (6)
-#define WL_DIAG_INTERRUPT          (1)
-#define WL_DIAG_LOOPBACK           (2)
-#define WL_DIAG_MEMORY             (3)
-#define WL_DIAG_LED                (4)
-#define WL_DIAG_REG                (5)
-#define WL_DIAG_SROM               (6)
-#define WL_DIAG_DMA                (7)
-#define WL_DIAGERR_SUCCESS            (0)
-#define WL_DIAGERR_FAIL_TO_RUN        (1)
-#define WL_DIAGERR_NOT_SUPPORTED      (2)
-#define WL_DIAGERR_INTERRUPT_FAIL     (3)
-#define WL_DIAGERR_LOOPBACK_FAIL      (4)
-#define WL_DIAGERR_SROM_FAIL          (5)
-#define WL_DIAGERR_SROM_BADCRC        (6)
-#define WL_DIAGERR_REG_FAIL           (7)
-#define WL_DIAGERR_MEMORY_FAIL        (8)
-#define WL_DIAGERR_NOMEM              (9)
-#define WL_DIAGERR_DMA_FAIL           (10)
-#define WL_DIAGERR_MEMORY_TIMEOUT     (11)
-#define WL_DIAGERR_MEMORY_BADPATTERN  (12)
-#define    WLC_BAND_AUTO                (0)
-#define    WLC_BAND_5G                  (1)
-#define    WLC_BAND_2G                  (2)
-#define    WLC_BAND_ALL                 (3)
-#define WL_CHAN_FREQ_RANGE_2G           (0)
-#define WL_CHAN_FREQ_RANGE_5GL          (1)
-#define WL_CHAN_FREQ_RANGE_5GM          (2)
-#define WL_CHAN_FREQ_RANGE_5GH          (3)
-#define WLC_PHY_TYPE_A               (0)
-#define WLC_PHY_TYPE_B               (1)
-#define WLC_PHY_TYPE_G               (2)
-#define WLC_PHY_TYPE_N               (4)
-#define WLC_PHY_TYPE_LP              (5)
-#define WLC_PHY_TYPE_SSN             (6)
-#define WLC_PHY_TYPE_NULL          (0xf)
-#define WLC_MACMODE_DISABLED         (0)
-#define WLC_MACMODE_DENY             (1)
-#define WLC_MACMODE_ALLOW            (2)
-#define GMODE_LEGACY_B               (0)
-#define GMODE_AUTO                   (1)
-#define GMODE_ONLY                   (2)
-#define GMODE_B_DEFERRED             (3)
-#define GMODE_PERFORMANCE            (4)
-#define GMODE_LRS                    (5)
-#define GMODE_MAX                    (6)
-#define WLC_PLCP_AUTO               (-1)
-#define WLC_PLCP_SHORT               (0)
-#define WLC_PLCP_LONG                (1)
-#define WLC_PROTECTION_AUTO         (-1)
-#define WLC_PROTECTION_OFF           (0)
-#define WLC_PROTECTION_ON            (1)
-#define WLC_PROTECTION_MMHDR_ONLY    (2)
-#define WLC_PROTECTION_CTS_ONLY      (3)
-#define WLC_PROTECTION_CTL_OFF       (0)
-#define WLC_PROTECTION_CTL_LOCAL     (1)
-#define WLC_PROTECTION_CTL_OVERLAP   (2)
-#define WLC_N_PROTECTION_OFF         (0)
-#define WLC_N_PROTECTION_OPTIONAL    (1)
-#define WLC_N_PROTECTION_20IN40      (2)
-#define WLC_N_PROTECTION_MIXEDMODE   (3)
-#define WLC_N_PREAMBLE_MIXEDMODE     (0)
-#define WLC_N_PREAMBLE_GF            (1)
-#define WLC_N_BW_20ALL               (0)
-#define WLC_N_BW_40ALL               (1)
-#define WLC_N_BW_20IN2G_40IN5G       (2)
-#define WLC_N_TXRX_CHAIN0            (0)
-#define WLC_N_TXRX_CHAIN1            (1)
-#define WLC_N_SGI_20              (0x01)
-#define WLC_N_SGI_40              (0x02)
-#define PM_OFF                       (0)
-#define PM_MAX                       (1)
-#define PM_FAST                      (2)
-#define PM_FORCE_OFF                 (3)
-#define INTERFERE_NONE               (0)
-#define NON_WLAN                     (1)
-#define WLAN_MANUAL                  (2)
-#define WLAN_AUTO                    (3)
-#define AUTO_ACTIVE             (1 << 7)
-typedef struct wl_aci_args
-{
-    int32_t enter_aci_thresh;
-    int32_t exit_aci_thresh;
-    int32_t usec_spin;
-    int32_t glitch_delay;
-    uint16_t nphy_adcpwr_enter_thresh;
-    uint16_t nphy_adcpwr_exit_thresh;
-    uint16_t nphy_repeat_ctr;
-    uint16_t nphy_num_samples;
-    uint16_t nphy_undetect_window_sz;
-    uint16_t nphy_b_energy_lo_aci;
-    uint16_t nphy_b_energy_md_aci;
-    uint16_t nphy_b_energy_hi_aci;
-} wl_aci_args_t;
-#define WL_ACI_ARGS_LEGACY_LENGTH    16
-typedef struct
-{
-    int32_t npulses;
-    int32_t ncontig;
-    int32_t min_pw;
-    int32_t max_pw;
-    uint16_t thresh0;
-    uint16_t thresh1;
-    uint16_t blank;
-    uint16_t fmdemodcfg;
-    int32_t npulses_lp;
-    int32_t min_pw_lp;
-    int32_t max_pw_lp;
-    int32_t min_fm_lp;
-    int32_t max_deltat_lp;
-    int32_t min_deltat;
-    int32_t max_deltat;
-    uint16_t autocorr;
-    uint16_t st_level_time;
-    uint16_t t2_min;
-    uint32_t version;
-} wl_radar_args_t;
-#define WL_RADAR_ARGS_VERSION 1
-#define WL_RADAR_DETECTOR_OFF        0
-#define WL_RADAR_DETECTOR_ON        1
-#define WL_RADAR_SIMULATED        2
-#define WL_RSSI_ANT_VERSION    1
-#define WL_RSSI_ANT_MAX        4
-typedef struct
-{
-    uint32_t version;
-    uint32_t count;
-    int8_t rssi_ant[WL_RSSI_ANT_MAX];
-} wl_rssi_ant_t;
-#define WL_DFS_CACSTATE_IDLE        0
-#define    WL_DFS_CACSTATE_PREISM_CAC    1
-#define WL_DFS_CACSTATE_ISM        2
-#define WL_DFS_CACSTATE_CSA        3
-#define WL_DFS_CACSTATE_POSTISM_CAC    4
-#define WL_DFS_CACSTATE_PREISM_OOC    5
-#define WL_DFS_CACSTATE_POSTISM_OOC    6
-#define WL_DFS_CACSTATES        7
-typedef struct
-{
-    uint32_t state;
-    uint32_t duration;
-    wl_chanspec_t chanspec_cleared;
-    uint16_t pad;
-} wl_dfs_status_t;
-#define NUM_PWRCTRL_RATES 12
-typedef struct
-{
-    uint8_t txpwr_band_max[NUM_PWRCTRL_RATES];
-    uint8_t txpwr_limit[NUM_PWRCTRL_RATES];
-    uint8_t txpwr_local_max;
-    uint8_t txpwr_local_constraint;
-    uint8_t txpwr_chan_reg_max;
-    uint8_t txpwr_target[2][NUM_PWRCTRL_RATES];
-    uint8_t txpwr_est_Pout[2];
-    uint8_t txpwr_opo[NUM_PWRCTRL_RATES];
-    uint8_t txpwr_bphy_cck_max[NUM_PWRCTRL_RATES];
-    uint8_t txpwr_bphy_ofdm_max;
-    uint8_t txpwr_aphy_max[NUM_PWRCTRL_RATES];
-    int8_t txpwr_antgain[2];
-    uint8_t txpwr_est_Pout_gofdm;
-} tx_power_legacy_t;
-#define WL_TX_POWER_RATES    45
-#define WL_TX_POWER_CCK_FIRST    0
-#define WL_TX_POWER_CCK_NUM    4
-#define WL_TX_POWER_OFDM_FIRST    4
-#define WL_TX_POWER_OFDM_NUM    8
-#define WL_TX_POWER_MCS_SISO_NUM 8
-#define WL_TX_POWER_MCS20_FIRST    12
-#define WL_TX_POWER_MCS20_NUM    16
-#define WL_TX_POWER_MCS40_FIRST    28
-#define WL_TX_POWER_MCS40_NUM    17
-#define WL_TX_POWER_MCS20SISO_NUM    8
-#define WL_TX_POWER_MCS40_LAST    44
-#define WL_TX_POWER_F_ENABLED    1
-#define WL_TX_POWER_F_HW    2
-#define WL_TX_POWER_F_MIMO    4
-#define WL_TX_POWER_F_SISO    8
-#define WL_TX_POWER_F_40M_CAP    16
-
-#define MAX_QTX_POWER 32
-typedef struct
-{
-    uint32_t flags;
-    wl_chanspec_t chanspec;
-    wl_chanspec_t local_chanspec;
-    uint8_t local_max;
-    uint8_t local_constraint;
-    int8_t antgain[2];
-    uint8_t rf_cores;
-    uint8_t est_Pout[4];
-    uint8_t est_Pout_cck;
-    uint8_t user_limit[WL_TX_POWER_RATES];
-    uint8_t reg_limit[WL_TX_POWER_RATES];
-    uint8_t board_limit[WL_TX_POWER_RATES];
-    uint8_t target[WL_TX_POWER_RATES];
-} tx_power_t;
-typedef struct tx_inst_power
-{
-    uint8_t txpwr_est_Pout[2];
-    uint8_t txpwr_est_Pout_gofdm;
-} tx_inst_power_t;
-#define WLC_MEASURE_TPC            1
-#define WLC_MEASURE_CHANNEL_BASIC    2
-#define WLC_MEASURE_CHANNEL_CCA        3
-#define WLC_MEASURE_CHANNEL_RPI        4
-#define SPECT_MNGMT_OFF            0
-#define SPECT_MNGMT_LOOSE_11H        1
-#define SPECT_MNGMT_STRICT_11H        2
-#define SPECT_MNGMT_STRICT_11D        3
-#define SPECT_MNGMT_LOOSE_11H_D        4
-#define WL_CHAN_VALID_HW    (1 << 0)
-#define WL_CHAN_VALID_SW    (1 << 1)
-#define WL_CHAN_BAND_5G        (1 << 2)
-#define WL_CHAN_RADAR        (1 << 3)
-#define WL_CHAN_INACTIVE    (1 << 4)
-#define WL_CHAN_PASSIVE        (1 << 5)
-#define WL_CHAN_RESTRICTED    (1 << 6)
-#define    WL_BTC_DISABLE        0
-#define WL_BTC_ENABLE        (1 << 0)
-#define WL_BTC_PREMPT        (1 << 1)
-#define WL_BTC_PARTIAL        (1 << 2)
-#define WL_BTC_DEFAULT        (1 << 3)
-#define WL_BTC_HYBRID        (WL_BTC_ENABLE | WL_BTC_PARTIAL)
-#define WL_INF_BTC_DISABLE      0
-#define WL_INF_BTC_ENABLE       1
-#define WL_INF_BTC_AUTO         3
-#define    WL_BTC_DEFWIRE        0
-#define WL_BTC_2WIRE        2
-#define WL_BTC_3WIRE        3
-#define WL_BTC_4WIRE        4
-#define WL_BTC_FLAG_PREMPT               (1 << 0)
-#define WL_BTC_FLAG_BT_DEF               (1 << 1)
-#define WL_BTC_FLAG_ACTIVE_PROT          (1 << 2)
-#define WL_BTC_FLAG_SIM_RSP              (1 << 3)
-#define WL_BTC_FLAG_PS_PROTECT           (1 << 4)
-#define WL_BTC_FLAG_SIM_TX_LP             (1 << 5)
-#define WL_BTC_FLAG_ECI                  (1 << 6)
-#define WL_ERROR_VAL        0x00000001
-#define WL_TRACE_VAL        0x00000002
-#define WL_PRHDRS_VAL        0x00000004
-#define WL_PRPKT_VAL        0x00000008
-#define WL_INFORM_VAL        0x00000010
-#define WL_TMP_VAL        0x00000020
-#define WL_OID_VAL        0x00000040
-#define WL_RATE_VAL        0x00000080
-#define WL_ASSOC_VAL        0x00000100
-#define WL_PRUSR_VAL        0x00000200
-#define WL_PS_VAL        0x00000400
-#define WL_TXPWR_VAL        0x00000800
-#define WL_PORT_VAL        0x00001000
-#define WL_DUAL_VAL        0x00002000
-#define WL_WSEC_VAL        0x00004000
-#define WL_WSEC_DUMP_VAL    0x00008000
-#define WL_LOG_VAL        0x00010000
-#define WL_NRSSI_VAL        0x00020000
-#define WL_LOFT_VAL        0x00040000
-#define WL_REGULATORY_VAL    0x00080000
-#define WL_PHYCAL_VAL        0x00100000
-#define WL_RADAR_VAL        0x00200000
-#define WL_MPC_VAL        0x00400000
-#define WL_APSTA_VAL        0x00800000
-#define WL_DFS_VAL        0x01000000
-#define WL_BA_VAL        0x02000000
-#define WL_NITRO_VAL        0x04000000
-#define WL_MBSS_VAL        0x04000000
-#define WL_CAC_VAL        0x08000000
-#define WL_AMSDU_VAL        0x10000000
-#define WL_AMPDU_VAL        0x20000000
-#define WL_FFPLD_VAL        0x40000000
-#define WL_NIN_VAL        0x80000000
-#define WL_DPT_VAL         0x00000001
-#define WL_SCAN_VAL        0x00000002
-#define WL_WOWL_VAL        0x00000004
-#define WL_COEX_VAL        0x00000008
-#define WL_RTDC_VAL        0x00000010
-#define WL_BTA_VAL        0x00000040
-#define    WL_LED_NUMGPIO        16
-#define    WL_LED_OFF        0
-#define    WL_LED_ON        1
-#define    WL_LED_ACTIVITY        2
-#define    WL_LED_RADIO        3
-#define    WL_LED_ARADIO        4
-#define    WL_LED_BRADIO        5
-#define    WL_LED_BGMODE        6
-#define    WL_LED_WI1        7
-#define    WL_LED_WI2        8
-#define    WL_LED_WI3        9
-#define    WL_LED_ASSOC        10
-#define    WL_LED_INACTIVE        11
-#define    WL_LED_ASSOCACT        12
-#define    WL_LED_NUMBEHAVIOR    13
-#define    WL_LED_BEH_MASK        0x7f
-#define    WL_LED_AL_MASK        0x80
-#define WL_NUMCHANNELS        64
-#define WL_NUMCHANSPECS        100
-#define WL_WDS_WPA_ROLE_AUTH    0
-#define WL_WDS_WPA_ROLE_SUP    1
-#define WL_WDS_WPA_ROLE_AUTO    255
-#define WL_EVENTING_MASK_LEN    ( (WLC_E_LAST + 7) / 8 )
-
-#define VNDR_IE_CMD_LEN        4
-#define VNDR_IE_BEACON_FLAG    0x1
-#define VNDR_IE_PRBRSP_FLAG    0x2
-#define VNDR_IE_ASSOCRSP_FLAG    0x4
-#define VNDR_IE_AUTHRSP_FLAG    0x8
-#define VNDR_IE_PRBREQ_FLAG    0x10
-#define VNDR_IE_ASSOCREQ_FLAG    0x20
-#define VNDR_IE_CUSTOM_FLAG        0x100
-#define VNDR_IE_INFO_HDR_LEN    (sizeof(uint32_t) )
-struct wl_vndr_ie
-{
-    uint8_t id;
-    uint8_t len;
-    uint8_t oui[3];
-    uint8_t data[1];
-};
-typedef struct wl_vndr_ie wl_vndr_ie_t;
-typedef struct
-{
-    uint32_t pktflag;
-    wl_vndr_ie_t vndr_ie_data;
-} vndr_ie_info_t;
-typedef struct
-{
-    int32_t iecount;
-    vndr_ie_info_t vndr_ie_list[1];
-} vndr_ie_buf_t;
-typedef struct
-{
-    int8_t cmd[VNDR_IE_CMD_LEN];
-    vndr_ie_buf_t vndr_ie_buffer;
-} vndr_ie_setbuf_t;
-#define WL_JOIN_PREF_RSSI    1
-#define WL_JOIN_PREF_WPA    2
-#define WL_JOIN_PREF_BAND    3
-#define WLJP_BAND_ASSOC_PREF    255
-#define WL_WPA_ACP_MCS_ANY    "\x00\x00\x00\x00"
-struct tsinfo_arg
-{
-    uint8_t octets[3];
-};
-#define    NFIFO            6
-#define    WL_CNT_T_VERSION    6
-#define    WL_CNT_EXT_T_VERSION    1
-#define    WL_PHYRATE_LOG_SIZE     1200
-
-typedef struct
-{
-    uint16_t version;     /* see definition of WL_CNT_T_VERSION */
-    uint16_t length;     /* length of entire structure */
-
-    /* transmit stat counters */
-    uint32_t txframe;     /* tx data frames */
-    uint32_t txbyte;     /* tx data bytes */
-    uint32_t txretrans;     /* tx mac retransmits */
-    uint32_t txerror;     /* tx data errors (derived: sum of others) */
-    uint32_t txctl;     /* tx management frames */
-    uint32_t txprshort;     /* tx short preamble frames */
-    uint32_t txserr;     /* tx status errors */
-    uint32_t txnobuf;     /* tx out of buffers errors */
-    uint32_t txnoassoc;     /* tx discard because we're not associated */
-    uint32_t txrunt;     /* tx runt frames */
-    uint32_t txchit;     /* tx header cache hit (fastpath) */
-    uint32_t txcmiss;     /* tx header cache miss (slowpath) */
-
-    /* transmit chip error counters */
-    uint32_t txuflo;     /* tx fifo underflows */
-    uint32_t txphyerr;     /* tx phy errors (indicated in tx status) */
-    uint32_t txphycrs;     /* PR8861/8963 counter */
-
-    /* receive stat counters */
-    uint32_t rxframe;     /* rx data frames */
-    uint32_t rxbyte;     /* rx data bytes */
-    uint32_t rxerror;     /* rx data errors (derived: sum of others) */
-    uint32_t rxctl;     /* rx management frames */
-    uint32_t rxnobuf;     /* rx out of buffers errors */
-    uint32_t rxnondata;     /* rx non data frames in the data channel errors */
-    uint32_t rxbadds;     /* rx bad DS errors */
-    uint32_t rxbadcm;     /* rx bad control or management frames */
-    uint32_t rxfragerr;     /* rx fragmentation errors */
-    uint32_t rxrunt;     /* rx runt frames */
-    uint32_t rxgiant;     /* rx giant frames */
-    uint32_t rxnoscb;     /* rx no scb error */
-    uint32_t rxbadproto;     /* rx invalid frames */
-    uint32_t rxbadsrcmac;     /* rx frames with Invalid Src Mac */
-    uint32_t rxbadda;     /* rx frames tossed for invalid da */
-    uint32_t rxfilter;     /* rx frames filtered out */
-
-    /* receive chip error counters */
-    uint32_t rxoflo;     /* rx fifo overflow errors */
-    uint32_t rxuflo[NFIFO];     /* rx dma descriptor underflow errors */
-
-    uint32_t d11cnt_txrts_off;     /* d11cnt txrts value when reset d11cnt */
-    uint32_t d11cnt_rxcrc_off;     /* d11cnt rxcrc value when reset d11cnt */
-    uint32_t d11cnt_txnocts_off;     /* d11cnt txnocts value when reset d11cnt */
-
-    /* misc counters */
-    uint32_t dmade;     /* tx/rx dma descriptor errors */
-    uint32_t dmada;     /* tx/rx dma data errors */
-    uint32_t dmape;     /* tx/rx dma descriptor protocol errors */
-    uint32_t reset;     /* reset count */
-    uint32_t tbtt;     /* cnts the TBTT int's */
-    uint32_t txdmawar;     /* # occurrences of PR15420 workaround */
-    uint32_t pkt_callback_reg_fail;     /* callbacks register failure */
-
-    /* MAC counters: 32-bit version of d11.h's macstat_t */
-    uint32_t txallfrm;     /* total number of frames sent, incl. Data, ACK, RTS, CTS,
-                            * Control Management (includes retransmissions)
-                            */
-    uint32_t txrtsfrm;     /* number of RTS sent out by the MAC */
-    uint32_t txctsfrm;     /* number of CTS sent out by the MAC */
-    uint32_t txackfrm;     /* number of ACK frames sent out */
-    uint32_t txdnlfrm;     /* Not used */
-    uint32_t txbcnfrm;     /* beacons transmitted */
-    uint32_t txfunfl[8];     /* per-fifo tx underflows */
-    uint32_t txtplunfl;     /* Template underflows (mac was too slow to transmit ACK/CTS
-                             * or BCN)
-                             */
-    uint32_t txphyerror;     /* Transmit phy error, type of error is reported in tx-status for
-                              * driver enqueued frames
-                              */
-    uint32_t rxfrmtoolong;     /* Received frame longer than legal limit (2346 bytes) */
-    uint32_t rxfrmtooshrt;     /* Received frame did not contain enough bytes for its frame type */
-    uint32_t rxinvmachdr;     /* Either the protocol version != 0 or frame type not
-                               * data/control/management
-                               */
-    uint32_t rxbadfcs;     /* number of frames for which the CRC check failed in the MAC */
-    uint32_t rxbadplcp;     /* parity check of the PLCP header failed */
-    uint32_t rxcrsglitch;     /* PHY was able to correlate the preamble but not the header */
-    uint32_t rxstrt;     /* Number of received frames with a good PLCP
-                          * (i.e. passing parity check)
-                          */
-    uint32_t rxdfrmucastmbss;     /* Number of received DATA frames with good FCS and matching RA */
-    uint32_t rxmfrmucastmbss;     /* number of received mgmt frames with good FCS and matching RA */
-    uint32_t rxcfrmucast;     /* number of received CNTRL frames with good FCS and matching RA */
-    uint32_t rxrtsucast;     /* number of unicast RTS addressed to the MAC (good FCS) */
-    uint32_t rxctsucast;     /* number of unicast CTS addressed to the MAC (good FCS) */
-    uint32_t rxackucast;     /* number of ucast ACKS received (good FCS) */
-    uint32_t rxdfrmocast;     /* number of received DATA frames (good FCS and not matching RA) */
-    uint32_t rxmfrmocast;     /* number of received MGMT frames (good FCS and not matching RA) */
-    uint32_t rxcfrmocast;     /* number of received CNTRL frame (good FCS and not matching RA) */
-    uint32_t rxrtsocast;     /* number of received RTS not addressed to the MAC */
-    uint32_t rxctsocast;     /* number of received CTS not addressed to the MAC */
-    uint32_t rxdfrmmcast;     /* number of RX Data multicast frames received by the MAC */
-    uint32_t rxmfrmmcast;     /* number of RX Management multicast frames received by the MAC */
-    uint32_t rxcfrmmcast;     /* number of RX Control multicast frames received by the MAC
-                               * (unlikely to see these)
-                               */
-    uint32_t rxbeaconmbss;     /* beacons received from member of BSS */
-    uint32_t rxdfrmucastobss;     /* number of unicast frames addressed to the MAC from
-                                   * other BSS (WDS FRAME)
-                                   */
-    uint32_t rxbeaconobss;     /* beacons received from other BSS */
-    uint32_t rxrsptmout;     /* Number of response timeouts for transmitted frames
-                              * expecting a response
-                              */
-    uint32_t bcntxcancl;     /* transmit beacons canceled due to receipt of beacon (IBSS) */
-    uint32_t rxf0ovfl;     /* Number of receive fifo 0 overflows */
-    uint32_t rxf1ovfl;     /* Number of receive fifo 1 overflows (obsolete) */
-    uint32_t rxf2ovfl;     /* Number of receive fifo 2 overflows (obsolete) */
-    uint32_t txsfovfl;     /* Number of transmit status fifo overflows (obsolete) */
-    uint32_t pmqovfl;     /* Number of PMQ overflows */
-    uint32_t rxcgprqfrm;     /* Number of received Probe requests that made it into
-                              * the PRQ fifo
-                              */
-    uint32_t rxcgprsqovfl;     /* Rx Probe Request Que overflow in the AP */
-    uint32_t txcgprsfail;     /* Tx Probe Response Fail. AP sent probe response but did
-                               * not get ACK
-                               */
-    uint32_t txcgprssuc;     /* Tx Probe Response Success (ACK was received) */
-    uint32_t prs_timeout;     /* Number of probe requests that were dropped from the PRQ
-                               * fifo because a probe response could not be sent out within
-                               * the time limit defined in M_PRS_MAXTIME
-                               */
-    uint32_t rxnack;     /* XXX Number of NACKS received (Afterburner) */
-    uint32_t frmscons;     /* XXX Number of frames completed without transmission because of an
-                            * Afterburner re-queue
-                            */
-    uint32_t txnack;     /* XXX Number of NACKs transmitted (Afterburner) */
-    uint32_t txglitch_nack;     /* obsolete */
-    uint32_t txburst;     /* obsolete */
-
-    /* 802.11 MIB counters, pp. 614 of 802.11 reaff doc. */
-    uint32_t txfrag;     /* dot11TransmittedFragmentCount */
-    uint32_t txmulti;     /* dot11MulticastTransmittedFrameCount */
-    uint32_t txfail;     /* dot11FailedCount */
-    uint32_t txretry;     /* dot11RetryCount */
-    uint32_t txretrie;     /* dot11MultipleRetryCount */
-    uint32_t rxdup;     /* dot11FrameduplicateCount */
-    uint32_t txrts;     /* dot11RTSSuccessCount */
-    uint32_t txnocts;     /* dot11RTSFailureCount */
-    uint32_t txnoack;     /* dot11ACKFailureCount */
-    uint32_t rxfrag;     /* dot11ReceivedFragmentCount */
-    uint32_t rxmulti;     /* dot11MulticastReceivedFrameCount */
-    uint32_t rxcrc;     /* dot11FCSErrorCount */
-    uint32_t txfrmsnt;     /* dot11TransmittedFrameCount (bogus MIB?) */
-    uint32_t rxundec;     /* dot11WEPUndecryptableCount */
-
-    /* WPA2 counters (see rxundec for DecryptFailureCount) */
-    uint32_t tkipmicfaill;     /* TKIPLocalMICFailures */
-    uint32_t tkipcntrmsr;     /* TKIPCounterMeasuresInvoked */
-    uint32_t tkipreplay;     /* TKIPReplays */
-    uint32_t ccmpfmterr;     /* CCMPFormatErrors */
-    uint32_t ccmpreplay;     /* CCMPReplays */
-    uint32_t ccmpundec;     /* CCMPDecryptErrors */
-    uint32_t fourwayfail;     /* FourWayHandshakeFailures */
-    uint32_t wepundec;     /* dot11WEPUndecryptableCount */
-    uint32_t wepicverr;     /* dot11WEPICVErrorCount */
-    uint32_t decsuccess;     /* DecryptSuccessCount */
-    uint32_t tkipicverr;     /* TKIPICVErrorCount */
-    uint32_t wepexcluded;     /* dot11WEPExcludedCount */
-
-    uint32_t rxundec_mcst;     /* dot11WEPUndecryptableCount */
-
-    /* WPA2 counters (see rxundec for DecryptFailureCount) */
-    uint32_t tkipmicfaill_mcst;     /* TKIPLocalMICFailures */
-    uint32_t tkipcntrmsr_mcst;     /* TKIPCounterMeasuresInvoked */
-    uint32_t tkipreplay_mcst;     /* TKIPReplays */
-    uint32_t ccmpfmterr_mcst;     /* CCMPFormatErrors */
-    uint32_t ccmpreplay_mcst;     /* CCMPReplays */
-    uint32_t ccmpundec_mcst;     /* CCMPDecryptErrors */
-    uint32_t fourwayfail_mcst;     /* FourWayHandshakeFailures */
-    uint32_t wepundec_mcst;     /* dot11WEPUndecryptableCount */
-    uint32_t wepicverr_mcst;     /* dot11WEPICVErrorCount */
-    uint32_t decsuccess_mcst;     /* DecryptSuccessCount */
-    uint32_t tkipicverr_mcst;     /* TKIPICVErrorCount */
-    uint32_t wepexcluded_mcst;     /* dot11WEPExcludedCount */
-
-    uint32_t txchanrej;     /* Tx frames suppressed due to channel rejection */
-    uint32_t txexptime;     /* Tx frames suppressed due to timer expiration */
-    uint32_t psmwds;     /* Count PSM watchdogs */
-    uint32_t phywatchdog;     /* Count Phy watchdogs (triggered by ucode) */
-
-    /* MBSS counters, AP only */
-    uint32_t prq_entries_handled;     /* PRQ entries read in */
-    uint32_t prq_undirected_entries;     /*    which were bcast bss & ssid */
-    uint32_t prq_bad_entries;     /*    which could not be translated to info */
-    uint32_t atim_suppress_count;     /* TX suppressions on ATIM fifo */
-    uint32_t bcn_template_not_ready;     /* Template marked in use on send bcn ... */
-    uint32_t bcn_template_not_ready_done;     /* ...but "DMA done" interrupt rcvd */
-    uint32_t late_tbtt_dpc;     /* TBTT DPC did not happen in time */
-
-    /* per-rate receive stat counters */
-    uint32_t rx1mbps;     /* packets rx at 1Mbps */
-    uint32_t rx2mbps;     /* packets rx at 2Mbps */
-    uint32_t rx5mbps5;     /* packets rx at 5.5Mbps */
-    uint32_t rx6mbps;     /* packets rx at 6Mbps */
-    uint32_t rx9mbps;     /* packets rx at 9Mbps */
-    uint32_t rx11mbps;     /* packets rx at 11Mbps */
-    uint32_t rx12mbps;     /* packets rx at 12Mbps */
-    uint32_t rx18mbps;     /* packets rx at 18Mbps */
-    uint32_t rx24mbps;     /* packets rx at 24Mbps */
-    uint32_t rx36mbps;     /* packets rx at 36Mbps */
-    uint32_t rx48mbps;     /* packets rx at 48Mbps */
-    uint32_t rx54mbps;     /* packets rx at 54Mbps */
-    uint32_t rx108mbps;     /* packets rx at 108mbps */
-    uint32_t rx162mbps;     /* packets rx at 162mbps */
-    uint32_t rx216mbps;     /* packets rx at 216 mbps */
-    uint32_t rx270mbps;     /* packets rx at 270 mbps */
-    uint32_t rx324mbps;     /* packets rx at 324 mbps */
-    uint32_t rx378mbps;     /* packets rx at 378 mbps */
-    uint32_t rx432mbps;     /* packets rx at 432 mbps */
-    uint32_t rx486mbps;     /* packets rx at 486 mbps */
-    uint32_t rx540mbps;     /* packets rx at 540 mbps */
-
-    /* pkteng rx frame stats */
-    uint32_t pktengrxducast;     /* unicast frames rxed by the pkteng code */
-    uint32_t pktengrxdmcast;     /* multicast frames rxed by the pkteng code */
-
-    uint32_t rfdisable;     /* count of radio disables */
-    uint32_t bphy_rxcrsglitch;     /* PHY count of bphy glitches */
-
-    uint32_t txmpdu_sgi;     /* count for sgi transmit */
-    uint32_t rxmpdu_sgi;     /* count for sgi received */
-    uint32_t txmpdu_stbc;     /* count for stbc transmit */
-    uint32_t rxmpdu_stbc;     /* count for stbc received */
-} wl_cnt_ver_six_t;
-
-typedef struct
-{
-    uint16_t version;     /* see definition of WL_CNT_T_VERSION */
-    uint16_t length;     /* length of entire structure */
-
-    /* transmit stat counters */
-    uint32_t txframe;     /* tx data frames */
-    uint32_t txbyte;     /* tx data bytes */
-    uint32_t txretrans;     /* tx mac retransmits */
-    uint32_t txerror;     /* tx data errors (derived: sum of others) */
-    uint32_t txctl;     /* tx management frames */
-    uint32_t txprshort;     /* tx short preamble frames */
-    uint32_t txserr;     /* tx status errors */
-    uint32_t txnobuf;     /* tx out of buffers errors */
-    uint32_t txnoassoc;     /* tx discard because we're not associated */
-    uint32_t txrunt;     /* tx runt frames */
-    uint32_t txchit;     /* tx header cache hit (fastpath) */
-    uint32_t txcmiss;     /* tx header cache miss (slowpath) */
-
-    /* transmit chip error counters */
-    uint32_t txuflo;     /* tx fifo underflows */
-    uint32_t txphyerr;     /* tx phy errors (indicated in tx status) */
-    uint32_t txphycrs;     /* PR8861/8963 counter */
-
-    /* receive stat counters */
-    uint32_t rxframe;     /* rx data frames */
-    uint32_t rxbyte;     /* rx data bytes */
-    uint32_t rxerror;     /* rx data errors (derived: sum of others) */
-    uint32_t rxctl;     /* rx management frames */
-    uint32_t rxnobuf;     /* rx out of buffers errors */
-    uint32_t rxnondata;     /* rx non data frames in the data channel errors */
-    uint32_t rxbadds;     /* rx bad DS errors */
-    uint32_t rxbadcm;     /* rx bad control or management frames */
-    uint32_t rxfragerr;     /* rx fragmentation errors */
-    uint32_t rxrunt;     /* rx runt frames */
-    uint32_t rxgiant;     /* rx giant frames */
-    uint32_t rxnoscb;     /* rx no scb error */
-    uint32_t rxbadproto;     /* rx invalid frames */
-    uint32_t rxbadsrcmac;     /* rx frames with Invalid Src Mac */
-    uint32_t rxbadda;     /* rx frames tossed for invalid da */
-    uint32_t rxfilter;     /* rx frames filtered out */
-
-    /* receive chip error counters */
-    uint32_t rxoflo;     /* rx fifo overflow errors */
-    uint32_t rxuflo[NFIFO];     /* rx dma descriptor underflow errors */
-
-    uint32_t d11cnt_txrts_off;     /* d11cnt txrts value when reset d11cnt */
-    uint32_t d11cnt_rxcrc_off;     /* d11cnt rxcrc value when reset d11cnt */
-    uint32_t d11cnt_txnocts_off;     /* d11cnt txnocts value when reset d11cnt */
-
-    /* misc counters */
-    uint32_t dmade;     /* tx/rx dma descriptor errors */
-    uint32_t dmada;     /* tx/rx dma data errors */
-    uint32_t dmape;     /* tx/rx dma descriptor protocol errors */
-    uint32_t reset;     /* reset count */
-    uint32_t tbtt;     /* cnts the TBTT int's */
-    uint32_t txdmawar;     /* # occurrences of PR15420 workaround */
-    uint32_t pkt_callback_reg_fail;     /* callbacks register failure */
-
-    /* MAC counters: 32-bit version of d11.h's macstat_t */
-    uint32_t txallfrm;     /* total number of frames sent, incl. Data, ACK, RTS, CTS,
-                            * Control Management (includes retransmissions)
-                            */
-    uint32_t txrtsfrm;     /* number of RTS sent out by the MAC */
-    uint32_t txctsfrm;     /* number of CTS sent out by the MAC */
-    uint32_t txackfrm;     /* number of ACK frames sent out */
-    uint32_t txdnlfrm;     /* Not used */
-    uint32_t txbcnfrm;     /* beacons transmitted */
-    uint32_t txfunfl[8];     /* per-fifo tx underflows */
-    uint32_t txtplunfl;     /* Template underflows (mac was too slow to transmit ACK/CTS
-                             * or BCN)
-                             */
-    uint32_t txphyerror;     /* Transmit phy error, type of error is reported in tx-status for
-                              * driver enqueued frames
-                              */
-    uint32_t rxfrmtoolong;     /* Received frame longer than legal limit (2346 bytes) */
-    uint32_t rxfrmtooshrt;     /* Received frame did not contain enough bytes for its frame type */
-    uint32_t rxinvmachdr;     /* Either the protocol version != 0 or frame type not
-                               * data/control/management
-                               */
-    uint32_t rxbadfcs;     /* number of frames for which the CRC check failed in the MAC */
-    uint32_t rxbadplcp;     /* parity check of the PLCP header failed */
-    uint32_t rxcrsglitch;     /* PHY was able to correlate the preamble but not the header */
-    uint32_t rxstrt;     /* Number of received frames with a good PLCP
-                          * (i.e. passing parity check)
-                          */
-    uint32_t rxdfrmucastmbss;     /* Number of received DATA frames with good FCS and matching RA */
-    uint32_t rxmfrmucastmbss;     /* number of received mgmt frames with good FCS and matching RA */
-    uint32_t rxcfrmucast;     /* number of received CNTRL frames with good FCS and matching RA */
-    uint32_t rxrtsucast;     /* number of unicast RTS addressed to the MAC (good FCS) */
-    uint32_t rxctsucast;     /* number of unicast CTS addressed to the MAC (good FCS) */
-    uint32_t rxackucast;     /* number of ucast ACKS received (good FCS) */
-    uint32_t rxdfrmocast;     /* number of received DATA frames (good FCS and not matching RA) */
-    uint32_t rxmfrmocast;     /* number of received MGMT frames (good FCS and not matching RA) */
-    uint32_t rxcfrmocast;     /* number of received CNTRL frame (good FCS and not matching RA) */
-    uint32_t rxrtsocast;     /* number of received RTS not addressed to the MAC */
-    uint32_t rxctsocast;     /* number of received CTS not addressed to the MAC */
-    uint32_t rxdfrmmcast;     /* number of RX Data multicast frames received by the MAC */
-    uint32_t rxmfrmmcast;     /* number of RX Management multicast frames received by the MAC */
-    uint32_t rxcfrmmcast;     /* number of RX Control multicast frames received by the MAC
-                               * (unlikely to see these)
-                               */
-    uint32_t rxbeaconmbss;     /* beacons received from member of BSS */
-    uint32_t rxdfrmucastobss;     /* number of unicast frames addressed to the MAC from
-                                   * other BSS (WDS FRAME)
-                                   */
-    uint32_t rxbeaconobss;     /* beacons received from other BSS */
-    uint32_t rxrsptmout;     /* Number of response timeouts for transmitted frames
-                              * expecting a response
-                              */
-    uint32_t bcntxcancl;     /* transmit beacons canceled due to receipt of beacon (IBSS) */
-    uint32_t rxf0ovfl;     /* Number of receive fifo 0 overflows */
-    uint32_t rxf1ovfl;     /* Number of receive fifo 1 overflows (obsolete) */
-    uint32_t rxf2ovfl;     /* Number of receive fifo 2 overflows (obsolete) */
-    uint32_t txsfovfl;     /* Number of transmit status fifo overflows (obsolete) */
-    uint32_t pmqovfl;     /* Number of PMQ overflows */
-    uint32_t rxcgprqfrm;     /* Number of received Probe requests that made it into
-                              * the PRQ fifo
-                              */
-    uint32_t rxcgprsqovfl;     /* Rx Probe Request Que overflow in the AP */
-    uint32_t txcgprsfail;     /* Tx Probe Response Fail. AP sent probe response but did
-                               * not get ACK
-                               */
-    uint32_t txcgprssuc;     /* Tx Probe Response Success (ACK was received) */
-    uint32_t prs_timeout;     /* Number of probe requests that were dropped from the PRQ
-                               * fifo because a probe response could not be sent out within
-                               * the time limit defined in M_PRS_MAXTIME
-                               */
-    uint32_t rxnack;     /* obsolete */
-    uint32_t frmscons;     /* obsolete */
-    uint32_t txnack;     /* obsolete */
-    uint32_t txglitch_nack;     /* obsolete */
-    uint32_t txburst;     /* obsolete */
-
-    /* 802.11 MIB counters, pp. 614 of 802.11 reaff doc. */
-    uint32_t txfrag;     /* dot11TransmittedFragmentCount */
-    uint32_t txmulti;     /* dot11MulticastTransmittedFrameCount */
-    uint32_t txfail;     /* dot11FailedCount */
-    uint32_t txretry;     /* dot11RetryCount */
-    uint32_t txretrie;     /* dot11MultipleRetryCount */
-    uint32_t rxdup;     /* dot11FrameduplicateCount */
-    uint32_t txrts;     /* dot11RTSSuccessCount */
-    uint32_t txnocts;     /* dot11RTSFailureCount */
-    uint32_t txnoack;     /* dot11ACKFailureCount */
-    uint32_t rxfrag;     /* dot11ReceivedFragmentCount */
-    uint32_t rxmulti;     /* dot11MulticastReceivedFrameCount */
-    uint32_t rxcrc;     /* dot11FCSErrorCount */
-    uint32_t txfrmsnt;     /* dot11TransmittedFrameCount (bogus MIB?) */
-    uint32_t rxundec;     /* dot11WEPUndecryptableCount */
-
-    /* WPA2 counters (see rxundec for DecryptFailureCount) */
-    uint32_t tkipmicfaill;     /* TKIPLocalMICFailures */
-    uint32_t tkipcntrmsr;     /* TKIPCounterMeasuresInvoked */
-    uint32_t tkipreplay;     /* TKIPReplays */
-    uint32_t ccmpfmterr;     /* CCMPFormatErrors */
-    uint32_t ccmpreplay;     /* CCMPReplays */
-    uint32_t ccmpundec;     /* CCMPDecryptErrors */
-    uint32_t fourwayfail;     /* FourWayHandshakeFailures */
-    uint32_t wepundec;     /* dot11WEPUndecryptableCount */
-    uint32_t wepicverr;     /* dot11WEPICVErrorCount */
-    uint32_t decsuccess;     /* DecryptSuccessCount */
-    uint32_t tkipicverr;     /* TKIPICVErrorCount */
-    uint32_t wepexcluded;     /* dot11WEPExcludedCount */
-
-    uint32_t txchanrej;     /* Tx frames suppressed due to channel rejection */
-    uint32_t psmwds;     /* Count PSM watchdogs */
-    uint32_t phywatchdog;     /* Count Phy watchdogs (triggered by ucode) */
-
-    /* MBSS counters, AP only */
-    uint32_t prq_entries_handled;     /* PRQ entries read in */
-    uint32_t prq_undirected_entries;     /*    which were bcast bss & ssid */
-    uint32_t prq_bad_entries;     /*    which could not be translated to info */
-    uint32_t atim_suppress_count;     /* TX suppressions on ATIM fifo */
-    uint32_t bcn_template_not_ready;     /* Template marked in use on send bcn ... */
-    uint32_t bcn_template_not_ready_done;     /* ...but "DMA done" interrupt rcvd */
-    uint32_t late_tbtt_dpc;     /* TBTT DPC did not happen in time */
-
-    /* per-rate receive stat counters */
-    uint32_t rx1mbps;     /* packets rx at 1Mbps */
-    uint32_t rx2mbps;     /* packets rx at 2Mbps */
-    uint32_t rx5mbps5;     /* packets rx at 5.5Mbps */
-    uint32_t rx6mbps;     /* packets rx at 6Mbps */
-    uint32_t rx9mbps;     /* packets rx at 9Mbps */
-    uint32_t rx11mbps;     /* packets rx at 11Mbps */
-    uint32_t rx12mbps;     /* packets rx at 12Mbps */
-    uint32_t rx18mbps;     /* packets rx at 18Mbps */
-    uint32_t rx24mbps;     /* packets rx at 24Mbps */
-    uint32_t rx36mbps;     /* packets rx at 36Mbps */
-    uint32_t rx48mbps;     /* packets rx at 48Mbps */
-    uint32_t rx54mbps;     /* packets rx at 54Mbps */
-    uint32_t rx108mbps;     /* packets rx at 108mbps */
-    uint32_t rx162mbps;     /* packets rx at 162mbps */
-    uint32_t rx216mbps;     /* packets rx at 216 mbps */
-    uint32_t rx270mbps;     /* packets rx at 270 mbps */
-    uint32_t rx324mbps;     /* packets rx at 324 mbps */
-    uint32_t rx378mbps;     /* packets rx at 378 mbps */
-    uint32_t rx432mbps;     /* packets rx at 432 mbps */
-    uint32_t rx486mbps;     /* packets rx at 486 mbps */
-    uint32_t rx540mbps;     /* packets rx at 540 mbps */
-
-    /* pkteng rx frame stats */
-    uint32_t pktengrxducast;     /* unicast frames rxed by the pkteng code */
-    uint32_t pktengrxdmcast;     /* multicast frames rxed by the pkteng code */
-
-    uint32_t rfdisable;     /* count of radio disables */
-    uint32_t bphy_rxcrsglitch;     /* PHY count of bphy glitches */
-
-    uint32_t txexptime;     /* Tx frames suppressed due to timer expiration */
-
-    uint32_t txmpdu_sgi;     /* count for sgi transmit */
-    uint32_t rxmpdu_sgi;     /* count for sgi received */
-    uint32_t txmpdu_stbc;     /* count for stbc transmit */
-    uint32_t rxmpdu_stbc;     /* count for stbc received */
-
-    uint32_t rxundec_mcst;     /* dot11WEPUndecryptableCount */
-
-    /* WPA2 counters (see rxundec for DecryptFailureCount) */
-    uint32_t tkipmicfaill_mcst;     /* TKIPLocalMICFailures */
-    uint32_t tkipcntrmsr_mcst;     /* TKIPCounterMeasuresInvoked */
-    uint32_t tkipreplay_mcst;     /* TKIPReplays */
-    uint32_t ccmpfmterr_mcst;     /* CCMPFormatErrors */
-    uint32_t ccmpreplay_mcst;     /* CCMPReplays */
-    uint32_t ccmpundec_mcst;     /* CCMPDecryptErrors */
-    uint32_t fourwayfail_mcst;     /* FourWayHandshakeFailures */
-    uint32_t wepundec_mcst;     /* dot11WEPUndecryptableCount */
-    uint32_t wepicverr_mcst;     /* dot11WEPICVErrorCount */
-    uint32_t decsuccess_mcst;     /* DecryptSuccessCount */
-    uint32_t tkipicverr_mcst;     /* TKIPICVErrorCount */
-    uint32_t wepexcluded_mcst;     /* dot11WEPExcludedCount */
-
-    uint32_t dma_hang;     /* count for stbc received */
-} wl_cnt_ver_seven_t;
-
-typedef struct
-{
-    uint16_t version;     /* see definition of WL_CNT_T_VERSION */
-    uint16_t length;     /* length of entire structure */
-
-    /* transmit stat counters */
-    uint32_t txframe;     /* tx data frames */
-    uint32_t txbyte;     /* tx data bytes */
-    uint32_t txretrans;     /* tx mac retransmits */
-    uint32_t txerror;     /* tx data errors (derived: sum of others) */
-    uint32_t txctl;     /* tx management frames */
-    uint32_t txprshort;     /* tx short preamble frames */
-    uint32_t txserr;     /* tx status errors */
-    uint32_t txnobuf;     /* tx out of buffers errors */
-    uint32_t txnoassoc;     /* tx discard because we're not associated */
-    uint32_t txrunt;     /* tx runt frames */
-    uint32_t txchit;     /* tx header cache hit (fastpath) */
-    uint32_t txcmiss;     /* tx header cache miss (slowpath) */
-
-    /* transmit chip error counters */
-    uint32_t txuflo;     /* tx fifo underflows */
-    uint32_t txphyerr;     /* tx phy errors (indicated in tx status) */
-    uint32_t txphycrs;     /* PR8861/8963 counter */
-
-    /* receive stat counters */
-    uint32_t rxframe;     /* rx data frames */
-    uint32_t rxbyte;     /* rx data bytes */
-    uint32_t rxerror;     /* rx data errors (derived: sum of others) */
-    uint32_t rxctl;     /* rx management frames */
-    uint32_t rxnobuf;     /* rx out of buffers errors */
-    uint32_t rxnondata;     /* rx non data frames in the data channel errors */
-    uint32_t rxbadds;     /* rx bad DS errors */
-    uint32_t rxbadcm;     /* rx bad control or management frames */
-    uint32_t rxfragerr;     /* rx fragmentation errors */
-    uint32_t rxrunt;     /* rx runt frames */
-    uint32_t rxgiant;     /* rx giant frames */
-    uint32_t rxnoscb;     /* rx no scb error */
-    uint32_t rxbadproto;     /* rx invalid frames */
-    uint32_t rxbadsrcmac;     /* rx frames with Invalid Src Mac */
-    uint32_t rxbadda;     /* rx frames tossed for invalid da */
-    uint32_t rxfilter;     /* rx frames filtered out */
-
-    /* receive chip error counters */
-    uint32_t rxoflo;     /* rx fifo overflow errors */
-    uint32_t rxuflo[NFIFO];     /* rx dma descriptor underflow errors */
-
-    uint32_t d11cnt_txrts_off;     /* d11cnt txrts value when reset d11cnt */
-    uint32_t d11cnt_rxcrc_off;     /* d11cnt rxcrc value when reset d11cnt */
-    uint32_t d11cnt_txnocts_off;     /* d11cnt txnocts value when reset d11cnt */
-
-    /* misc counters */
-    uint32_t dmade;     /* tx/rx dma descriptor errors */
-    uint32_t dmada;     /* tx/rx dma data errors */
-    uint32_t dmape;     /* tx/rx dma descriptor protocol errors */
-    uint32_t reset;     /* reset count */
-    uint32_t tbtt;     /* cnts the TBTT int's */
-    uint32_t txdmawar;     /* # occurrences of PR15420 workaround */
-    uint32_t pkt_callback_reg_fail;     /* callbacks register failure */
-
-    /* MAC counters: 32-bit version of d11.h's macstat_t */
-    uint32_t txallfrm;     /* total number of frames sent, incl. Data, ACK, RTS, CTS,
-                            * Control Management (includes retransmissions)
-                            */
-    uint32_t txrtsfrm;     /* number of RTS sent out by the MAC */
-    uint32_t txctsfrm;     /* number of CTS sent out by the MAC */
-    uint32_t txackfrm;     /* number of ACK frames sent out */
-    uint32_t txdnlfrm;     /* Not used */
-    uint32_t txbcnfrm;     /* beacons transmitted */
-    uint32_t txfunfl[6];     /* per-fifo tx underflows */
-    uint32_t rxtoolate;     /* receive too late */
-    uint32_t txfbw;     /* transmit at fallback bw (dynamic bw) */
-    uint32_t txtplunfl;     /* Template underflows (mac was too slow to transmit ACK/CTS
-                             * or BCN)
-                             */
-    uint32_t txphyerror;     /* Transmit phy error, type of error is reported in tx-status for
-                              * driver enqueued frames
-                              */
-    uint32_t rxfrmtoolong;     /* Received frame longer than legal limit (2346 bytes) */
-    uint32_t rxfrmtooshrt;     /* Received frame did not contain enough bytes for its frame type */
-    uint32_t rxinvmachdr;     /* Either the protocol version != 0 or frame type not
-                               * data/control/management
-                               */
-    uint32_t rxbadfcs;     /* number of frames for which the CRC check failed in the MAC */
-    uint32_t rxbadplcp;     /* parity check of the PLCP header failed */
-    uint32_t rxcrsglitch;     /* PHY was able to correlate the preamble but not the header */
-    uint32_t rxstrt;     /* Number of received frames with a good PLCP
-                          * (i.e. passing parity check)
-                          */
-    uint32_t rxdfrmucastmbss;     /* Number of received DATA frames with good FCS and matching RA */
-    uint32_t rxmfrmucastmbss;     /* number of received mgmt frames with good FCS and matching RA */
-    uint32_t rxcfrmucast;     /* number of received CNTRL frames with good FCS and matching RA */
-    uint32_t rxrtsucast;     /* number of unicast RTS addressed to the MAC (good FCS) */
-    uint32_t rxctsucast;     /* number of unicast CTS addressed to the MAC (good FCS) */
-    uint32_t rxackucast;     /* number of ucast ACKS received (good FCS) */
-    uint32_t rxdfrmocast;     /* number of received DATA frames (good FCS and not matching RA) */
-    uint32_t rxmfrmocast;     /* number of received MGMT frames (good FCS and not matching RA) */
-    uint32_t rxcfrmocast;     /* number of received CNTRL frame (good FCS and not matching RA) */
-    uint32_t rxrtsocast;     /* number of received RTS not addressed to the MAC */
-    uint32_t rxctsocast;     /* number of received CTS not addressed to the MAC */
-    uint32_t rxdfrmmcast;     /* number of RX Data multicast frames received by the MAC */
-    uint32_t rxmfrmmcast;     /* number of RX Management multicast frames received by the MAC */
-    uint32_t rxcfrmmcast;     /* number of RX Control multicast frames received by the MAC
-                               * (unlikely to see these)
-                               */
-    uint32_t rxbeaconmbss;     /* beacons received from member of BSS */
-    uint32_t rxdfrmucastobss;     /* number of unicast frames addressed to the MAC from
-                                   * other BSS (WDS FRAME)
-                                   */
-    uint32_t rxbeaconobss;     /* beacons received from other BSS */
-    uint32_t rxrsptmout;     /* Number of response timeouts for transmitted frames
-                              * expecting a response
-                              */
-    uint32_t bcntxcancl;     /* transmit beacons canceled due to receipt of beacon (IBSS) */
-    uint32_t rxf0ovfl;     /* Number of receive fifo 0 overflows */
-    uint32_t rxf1ovfl;     /* Number of receive fifo 1 overflows (obsolete) */
-    uint32_t rxf2ovfl;     /* Number of receive fifo 2 overflows (obsolete) */
-    uint32_t txsfovfl;     /* Number of transmit status fifo overflows (obsolete) */
-    uint32_t pmqovfl;     /* Number of PMQ overflows */
-    uint32_t rxcgprqfrm;     /* Number of received Probe requests that made it into
-                              * the PRQ fifo
-                              */
-    uint32_t rxcgprsqovfl;     /* Rx Probe Request Que overflow in the AP */
-    uint32_t txcgprsfail;     /* Tx Probe Response Fail. AP sent probe response but did
-                               * not get ACK
-                               */
-    uint32_t txcgprssuc;     /* Tx Probe Response Success (ACK was received) */
-    uint32_t prs_timeout;     /* Number of probe requests that were dropped from the PRQ
-                               * fifo because a probe response could not be sent out within
-                               * the time limit defined in M_PRS_MAXTIME
-                               */
-    uint32_t rxnack;     /* obsolete */
-    uint32_t frmscons;     /* obsolete */
-    uint32_t txnack;     /* obsolete */
-    uint32_t rxback;     /* blockack rxcnt */
-    uint32_t txback;     /* blockack txcnt */
-
-    /* 802.11 MIB counters, pp. 614 of 802.11 reaff doc. */
-    uint32_t txfrag;     /* dot11TransmittedFragmentCount */
-    uint32_t txmulti;     /* dot11MulticastTransmittedFrameCount */
-    uint32_t txfail;     /* dot11FailedCount */
-    uint32_t txretry;     /* dot11RetryCount */
-    uint32_t txretrie;     /* dot11MultipleRetryCount */
-    uint32_t rxdup;     /* dot11FrameduplicateCount */
-    uint32_t txrts;     /* dot11RTSSuccessCount */
-    uint32_t txnocts;     /* dot11RTSFailureCount */
-    uint32_t txnoack;     /* dot11ACKFailureCount */
-    uint32_t rxfrag;     /* dot11ReceivedFragmentCount */
-    uint32_t rxmulti;     /* dot11MulticastReceivedFrameCount */
-    uint32_t rxcrc;     /* dot11FCSErrorCount */
-    uint32_t txfrmsnt;     /* dot11TransmittedFrameCount (bogus MIB?) */
-    uint32_t rxundec;     /* dot11WEPUndecryptableCount */
-
-    /* WPA2 counters (see rxundec for DecryptFailureCount) */
-    uint32_t tkipmicfaill;     /* TKIPLocalMICFailures */
-    uint32_t tkipcntrmsr;     /* TKIPCounterMeasuresInvoked */
-    uint32_t tkipreplay;     /* TKIPReplays */
-    uint32_t ccmpfmterr;     /* CCMPFormatErrors */
-    uint32_t ccmpreplay;     /* CCMPReplays */
-    uint32_t ccmpundec;     /* CCMPDecryptErrors */
-    uint32_t fourwayfail;     /* FourWayHandshakeFailures */
-    uint32_t wepundec;     /* dot11WEPUndecryptableCount */
-    uint32_t wepicverr;     /* dot11WEPICVErrorCount */
-    uint32_t decsuccess;     /* DecryptSuccessCount */
-    uint32_t tkipicverr;     /* TKIPICVErrorCount */
-    uint32_t wepexcluded;     /* dot11WEPExcludedCount */
-
-    uint32_t txchanrej;     /* Tx frames suppressed due to channel rejection */
-    uint32_t psmwds;     /* Count PSM watchdogs */
-    uint32_t phywatchdog;     /* Count Phy watchdogs (triggered by ucode) */
-
-    /* MBSS counters, AP only */
-    uint32_t prq_entries_handled;     /* PRQ entries read in */
-    uint32_t prq_undirected_entries;     /*    which were bcast bss & ssid */
-    uint32_t prq_bad_entries;     /*    which could not be translated to info */
-    uint32_t atim_suppress_count;     /* TX suppressions on ATIM fifo */
-    uint32_t bcn_template_not_ready;     /* Template marked in use on send bcn ... */
-    uint32_t bcn_template_not_ready_done;     /* ...but "DMA done" interrupt rcvd */
-    uint32_t late_tbtt_dpc;     /* TBTT DPC did not happen in time */
-
-    /* per-rate receive stat counters */
-    uint32_t rx1mbps;     /* packets rx at 1Mbps */
-    uint32_t rx2mbps;     /* packets rx at 2Mbps */
-    uint32_t rx5mbps5;     /* packets rx at 5.5Mbps */
-    uint32_t rx6mbps;     /* packets rx at 6Mbps */
-    uint32_t rx9mbps;     /* packets rx at 9Mbps */
-    uint32_t rx11mbps;     /* packets rx at 11Mbps */
-    uint32_t rx12mbps;     /* packets rx at 12Mbps */
-    uint32_t rx18mbps;     /* packets rx at 18Mbps */
-    uint32_t rx24mbps;     /* packets rx at 24Mbps */
-    uint32_t rx36mbps;     /* packets rx at 36Mbps */
-    uint32_t rx48mbps;     /* packets rx at 48Mbps */
-    uint32_t rx54mbps;     /* packets rx at 54Mbps */
-    uint32_t rx108mbps;     /* packets rx at 108mbps */
-    uint32_t rx162mbps;     /* packets rx at 162mbps */
-    uint32_t rx216mbps;     /* packets rx at 216 mbps */
-    uint32_t rx270mbps;     /* packets rx at 270 mbps */
-    uint32_t rx324mbps;     /* packets rx at 324 mbps */
-    uint32_t rx378mbps;     /* packets rx at 378 mbps */
-    uint32_t rx432mbps;     /* packets rx at 432 mbps */
-    uint32_t rx486mbps;     /* packets rx at 486 mbps */
-    uint32_t rx540mbps;     /* packets rx at 540 mbps */
-
-    /* pkteng rx frame stats */
-    uint32_t pktengrxducast;     /* unicast frames rxed by the pkteng code */
-    uint32_t pktengrxdmcast;     /* multicast frames rxed by the pkteng code */
-
-    uint32_t rfdisable;     /* count of radio disables */
-    uint32_t bphy_rxcrsglitch;     /* PHY count of bphy glitches */
-    uint32_t bphy_badplcp;
-
-    uint32_t txexptime;     /* Tx frames suppressed due to timer expiration */
-
-    uint32_t txmpdu_sgi;     /* count for sgi transmit */
-    uint32_t rxmpdu_sgi;     /* count for sgi received */
-    uint32_t txmpdu_stbc;     /* count for stbc transmit */
-    uint32_t rxmpdu_stbc;     /* count for stbc received */
-
-    uint32_t rxundec_mcst;     /* dot11WEPUndecryptableCount */
-
-    /* WPA2 counters (see rxundec for DecryptFailureCount) */
-    uint32_t tkipmicfaill_mcst;     /* TKIPLocalMICFailures */
-    uint32_t tkipcntrmsr_mcst;     /* TKIPCounterMeasuresInvoked */
-    uint32_t tkipreplay_mcst;     /* TKIPReplays */
-    uint32_t ccmpfmterr_mcst;     /* CCMPFormatErrors */
-    uint32_t ccmpreplay_mcst;     /* CCMPReplays */
-    uint32_t ccmpundec_mcst;     /* CCMPDecryptErrors */
-    uint32_t fourwayfail_mcst;     /* FourWayHandshakeFailures */
-    uint32_t wepundec_mcst;     /* dot11WEPUndecryptableCount */
-    uint32_t wepicverr_mcst;     /* dot11WEPICVErrorCount */
-    uint32_t decsuccess_mcst;     /* DecryptSuccessCount */
-    uint32_t tkipicverr_mcst;     /* TKIPICVErrorCount */
-    uint32_t wepexcluded_mcst;     /* dot11WEPExcludedCount */
-
-    uint32_t dma_hang;     /* count for dma hang */
-    uint32_t reinit;     /* count for reinit */
-
-    uint32_t pstatxucast;     /* count of ucast frames xmitted on all psta assoc */
-    uint32_t pstatxnoassoc;     /* count of txnoassoc frames xmitted on all psta assoc */
-    uint32_t pstarxucast;     /* count of ucast frames received on all psta assoc */
-    uint32_t pstarxbcmc;     /* count of bcmc frames received on all psta */
-    uint32_t pstatxbcmc;     /* count of bcmc frames transmitted on all psta */
-
-    uint32_t cso_passthrough;     /* hw cso required but passthrough */
-    uint32_t cso_normal;     /* hw cso hdr for normal process */
-    uint32_t chained;     /* number of frames chained */
-    uint32_t chainedsz1;     /* number of chain size 1 frames */
-    uint32_t unchained;     /* number of frames not chained */
-    uint32_t maxchainsz;     /* max chain size so far */
-    uint32_t currchainsz;     /* current chain size */
-
-    uint32_t rxdrop20s;     /* drop secondary cnt */
-
-} wl_cnt_ver_eight_t;
-
-/* per-rate receive stat counters subset of full counters */
-typedef struct
-{
-    uint32_t rx1mbps;     /* packets rx at 1Mbps */
-    uint32_t rx2mbps;     /* packets rx at 2Mbps */
-    uint32_t rx5mbps5;     /* packets rx at 5.5Mbps */
-    uint32_t rx6mbps;     /* packets rx at 6Mbps */
-    uint32_t rx9mbps;     /* packets rx at 9Mbps */
-    uint32_t rx11mbps;     /* packets rx at 11Mbps */
-    uint32_t rx12mbps;     /* packets rx at 12Mbps */
-    uint32_t rx18mbps;     /* packets rx at 18Mbps */
-    uint32_t rx24mbps;     /* packets rx at 24Mbps */
-    uint32_t rx36mbps;     /* packets rx at 36Mbps */
-    uint32_t rx48mbps;     /* packets rx at 48Mbps */
-    uint32_t rx54mbps;     /* packets rx at 54Mbps */
-    uint32_t rx108mbps;     /* packets rx at 108mbps */
-    uint32_t rx162mbps;     /* packets rx at 162mbps */
-    uint32_t rx216mbps;     /* packets rx at 216 mbps */
-    uint32_t rx270mbps;     /* packets rx at 270 mbps */
-} whd_phyrate_counters_t;
-
-typedef struct
-{
-    uint32_t count;
-    uint8_t log[WL_PHYRATE_LOG_SIZE];
-} whd_phyrate_log_t;
-
-typedef struct
-{
-    uint16_t version;     /* see definition of WL_CNT_T_VERSION */
-    uint16_t length;     /* length of entire structure */
-
-    /* transmit stat counters */
-    uint32_t txframe;     /* tx data frames */
-    uint32_t txbyte;     /* tx data bytes */
-    uint32_t txretrans;    /* tx mac retransmits */
-    uint32_t txerror;     /* tx data errors (derived: sum of others) */
-    uint32_t txctl;     /* tx management frames */
-    uint32_t txprshort;    /* tx short preamble frames */
-    uint32_t txserr;     /* tx status errors */
-    uint32_t txnobuf;     /* tx out of buffers errors */
-    uint32_t txnoassoc;    /* tx discard because we're not associated */
-    uint32_t txrunt;     /* tx runt frames */
-    uint32_t txchit;     /* tx header cache hit (fastpath) */
-    uint32_t txcmiss;     /* tx header cache miss (slowpath) */
-
-    /* transmit chip error counters */
-    uint32_t txuflo;     /* tx fifo underflows */
-    uint32_t txphyerr;     /* tx phy errors (indicated in tx status) */
-    uint32_t txphycrs;     /* PR8861/8963 counter */
-
-    /* receive stat counters */
-    uint32_t rxframe;     /* rx data frames */
-    uint32_t rxbyte;     /* rx data bytes */
-    uint32_t rxerror;     /* rx data errors (derived: sum of others) */
-    uint32_t rxctl;     /* rx management frames */
-    uint32_t rxnobuf;     /* rx out of buffers errors */
-    uint32_t rxnondata;    /* rx non data frames in the data channel errors */
-    uint32_t rxbadds;     /* rx bad DS errors */
-    uint32_t rxbadcm;     /* rx bad control or management frames */
-    uint32_t rxfragerr;    /* rx fragmentation errors */
-    uint32_t rxrunt;     /* rx runt frames */
-    uint32_t rxgiant;     /* rx giant frames */
-    uint32_t rxnoscb;     /* rx no scb error */
-    uint32_t rxbadproto;     /* rx invalid frames */
-    uint32_t rxbadsrcmac;    /* rx frames with Invalid Src Mac */
-    uint32_t rxbadda;     /* rx frames tossed for invalid da */
-    uint32_t rxfilter;     /* rx frames filtered out */
-
-    /* receive chip error counters */
-    uint32_t rxoflo;     /* rx fifo overflow errors */
-    uint32_t rxuflo[NFIFO];     /* rx dma descriptor underflow errors */
-
-    uint32_t d11cnt_txrts_off;     /* d11cnt txrts value when reset d11cnt */
-    uint32_t d11cnt_rxcrc_off;     /* d11cnt rxcrc value when reset d11cnt */
-    uint32_t d11cnt_txnocts_off;     /* d11cnt txnocts value when reset d11cnt */
-
-    /* misc counters */
-    uint32_t dmade;     /* tx/rx dma descriptor errors */
-    uint32_t dmada;     /* tx/rx dma data errors */
-    uint32_t dmape;     /* tx/rx dma descriptor protocol errors */
-    uint32_t reset;     /* reset count */
-    uint32_t tbtt;     /* cnts the TBTT int's */
-    uint32_t txdmawar;     /* # occurrences of PR15420 workaround */
-    uint32_t pkt_callback_reg_fail;     /* callbacks register failure */
-
-    /* MAC counters: 32-bit version of d11.h's macstat_t */
-    uint32_t txallfrm;     /* total number of frames sent, incl. Data, ACK, RTS, CTS,
-                            * Control Management (includes retransmissions)
-                            */
-    uint32_t txrtsfrm;     /* number of RTS sent out by the MAC */
-    uint32_t txctsfrm;     /* number of CTS sent out by the MAC */
-    uint32_t txackfrm;     /* number of ACK frames sent out */
-    uint32_t txdnlfrm;     /* Not used */
-    uint32_t txbcnfrm;     /* beacons transmitted */
-    uint32_t txfunfl[6];     /* per-fifo tx underflows */
-    uint32_t rxtoolate;     /* receive too late */
-    uint32_t txfbw;     /* transmit at fallback bw (dynamic bw) */
-    uint32_t txtplunfl;     /* Template underflows (mac was too slow to transmit ACK/CTS
-                             * or BCN)
-                             */
-    uint32_t txphyerror;     /* Transmit phy error, type of error is reported in tx-status for
-                              * driver enqueued frames
-                              */
-    uint32_t rxfrmtoolong;    /* Received frame longer than legal limit (2346 bytes) */
-    uint32_t rxfrmtooshrt;    /* Received frame did not contain enough bytes for its frame type */
-    uint32_t rxinvmachdr;     /* Either the protocol version != 0 or frame type not
-                               * data/control/management
-                               */
-    uint32_t rxbadfcs;     /* number of frames for which the CRC check failed in the MAC */
-    uint32_t rxbadplcp;     /* parity check of the PLCP header failed */
-    uint32_t rxcrsglitch;    /* PHY was able to correlate the preamble but not the header */
-    uint32_t rxstrt;     /* Number of received frames with a good PLCP
-                          * (i.e. passing parity check)
-                          */
-    uint32_t rxdfrmucastmbss;     /* Number of received DATA frames with good FCS and matching RA */
-    uint32_t rxmfrmucastmbss;     /* number of received mgmt frames with good FCS and matching RA */
-    uint32_t rxcfrmucast;     /* number of received CNTRL frames with good FCS and matching RA */
-    uint32_t rxrtsucast;     /* number of unicast RTS addressed to the MAC (good FCS) */
-    uint32_t rxctsucast;     /* number of unicast CTS addressed to the MAC (good FCS) */
-    uint32_t rxackucast;     /* number of ucast ACKS received (good FCS) */
-    uint32_t rxdfrmocast;     /* number of received DATA frames (good FCS and not matching RA) */
-    uint32_t rxmfrmocast;     /* number of received MGMT frames (good FCS and not matching RA) */
-    uint32_t rxcfrmocast;     /* number of received CNTRL frame (good FCS and not matching RA) */
-    uint32_t rxrtsocast;     /* number of received RTS not addressed to the MAC */
-    uint32_t rxctsocast;     /* number of received CTS not addressed to the MAC */
-    uint32_t rxdfrmmcast;     /* number of RX Data multicast frames received by the MAC */
-    uint32_t rxmfrmmcast;     /* number of RX Management multicast frames received by the MAC */
-    uint32_t rxcfrmmcast;     /* number of RX Control multicast frames received by the MAC
-                               * (unlikely to see these)
-                               */
-    uint32_t rxbeaconmbss;     /* beacons received from member of BSS */
-    uint32_t rxdfrmucastobss;     /* number of unicast frames addressed to the MAC from
-                                   * other BSS (WDS FRAME)
-                                   */
-    uint32_t rxbeaconobss;     /* beacons received from other BSS */
-    uint32_t rxrsptmout;     /* Number of response timeouts for transmitted frames
-                              * expecting a response
-                              */
-    uint32_t bcntxcancl;     /* transmit beacons canceled due to receipt of beacon (IBSS) */
-    uint32_t rxf0ovfl;     /* Number of receive fifo 0 overflows */
-    uint32_t rxf1ovfl;     /* Number of receive fifo 1 overflows (obsolete) */
-    uint32_t rxf2ovfl;     /* Number of receive fifo 2 overflows (obsolete) */
-    uint32_t txsfovfl;     /* Number of transmit status fifo overflows (obsolete) */
-    uint32_t pmqovfl;     /* Number of PMQ overflows */
-    uint32_t rxcgprqfrm;     /* Number of received Probe requests that made it into
-                              * the PRQ fifo
-                              */
-    uint32_t rxcgprsqovfl;     /* Rx Probe Request Que overflow in the AP */
-    uint32_t txcgprsfail;     /* Tx Probe Response Fail. AP sent probe response but did
-                               * not get ACK
-                               */
-    uint32_t txcgprssuc;     /* Tx Probe Response Success (ACK was received) */
-    uint32_t prs_timeout;     /* Number of probe requests that were dropped from the PRQ
-                               * fifo because a probe response could not be sent out within
-                               * the time limit defined in M_PRS_MAXTIME
-                               */
-    uint32_t rxnack;     /* obsolete */
-    uint32_t frmscons;     /* obsolete */
-    uint32_t txnack;     /* obsolete */
-    uint32_t rxback;     /* blockack rxcnt */
-    uint32_t txback;     /* blockack txcnt */
-
-    /* 802.11 MIB counters, pp. 614 of 802.11 reaff doc. */
-    uint32_t txfrag;     /* dot11TransmittedFragmentCount */
-    uint32_t txmulti;     /* dot11MulticastTransmittedFrameCount */
-    uint32_t txfail;     /* dot11FailedCount */
-    uint32_t txretry;     /* dot11RetryCount */
-    uint32_t txretrie;     /* dot11MultipleRetryCount */
-    uint32_t rxdup;     /* dot11FrameduplicateCount */
-    uint32_t txrts;     /* dot11RTSSuccessCount */
-    uint32_t txnocts;     /* dot11RTSFailureCount */
-    uint32_t txnoack;     /* dot11ACKFailureCount */
-    uint32_t rxfrag;     /* dot11ReceivedFragmentCount */
-    uint32_t rxmulti;     /* dot11MulticastReceivedFrameCount */
-    uint32_t rxcrc;     /* dot11FCSErrorCount */
-    uint32_t txfrmsnt;     /* dot11TransmittedFrameCount (bogus MIB?) */
-    uint32_t rxundec;     /* dot11WEPUndecryptableCount */
-
-    /* WPA2 counters (see rxundec for DecryptFailureCount) */
-    uint32_t tkipmicfaill;     /* TKIPLocalMICFailures */
-    uint32_t tkipcntrmsr;     /* TKIPCounterMeasuresInvoked */
-    uint32_t tkipreplay;     /* TKIPReplays */
-    uint32_t ccmpfmterr;     /* CCMPFormatErrors */
-    uint32_t ccmpreplay;     /* CCMPReplays */
-    uint32_t ccmpundec;     /* CCMPDecryptErrors */
-    uint32_t fourwayfail;     /* FourWayHandshakeFailures */
-    uint32_t wepundec;     /* dot11WEPUndecryptableCount */
-    uint32_t wepicverr;     /* dot11WEPICVErrorCount */
-    uint32_t decsuccess;     /* DecryptSuccessCount */
-    uint32_t tkipicverr;     /* TKIPICVErrorCount */
-    uint32_t wepexcluded;     /* dot11WEPExcludedCount */
-
-    uint32_t txchanrej;     /* Tx frames suppressed due to channel rejection */
-    uint32_t psmwds;     /* Count PSM watchdogs */
-    uint32_t phywatchdog;     /* Count Phy watchdogs (triggered by ucode) */
-
-    /* MBSS counters, AP only */
-    uint32_t prq_entries_handled;     /* PRQ entries read in */
-    uint32_t prq_undirected_entries;     /*    which were bcast bss & ssid */
-    uint32_t prq_bad_entries;     /*    which could not be translated to info */
-    uint32_t atim_suppress_count;     /* TX suppressions on ATIM fifo */
-    uint32_t bcn_template_not_ready;     /* Template marked in use on send bcn ... */
-    uint32_t bcn_template_not_ready_done;     /* ...but "DMA done" interrupt rcvd */
-    uint32_t late_tbtt_dpc;     /* TBTT DPC did not happen in time */
-
-    /* per-rate receive stat counters */
-    uint32_t rx1mbps;     /* packets rx at 1Mbps */
-    uint32_t rx2mbps;     /* packets rx at 2Mbps */
-    uint32_t rx5mbps5;     /* packets rx at 5.5Mbps */
-    uint32_t rx6mbps;     /* packets rx at 6Mbps */
-    uint32_t rx9mbps;     /* packets rx at 9Mbps */
-    uint32_t rx11mbps;     /* packets rx at 11Mbps */
-    uint32_t rx12mbps;     /* packets rx at 12Mbps */
-    uint32_t rx18mbps;     /* packets rx at 18Mbps */
-    uint32_t rx24mbps;     /* packets rx at 24Mbps */
-    uint32_t rx36mbps;     /* packets rx at 36Mbps */
-    uint32_t rx48mbps;     /* packets rx at 48Mbps */
-    uint32_t rx54mbps;     /* packets rx at 54Mbps */
-    uint32_t rx108mbps;    /* packets rx at 108mbps */
-    uint32_t rx162mbps;    /* packets rx at 162mbps */
-    uint32_t rx216mbps;    /* packets rx at 216 mbps */
-    uint32_t rx270mbps;    /* packets rx at 270 mbps */
-    uint32_t rx324mbps;    /* packets rx at 324 mbps */
-    uint32_t rx378mbps;    /* packets rx at 378 mbps */
-    uint32_t rx432mbps;    /* packets rx at 432 mbps */
-    uint32_t rx486mbps;    /* packets rx at 486 mbps */
-    uint32_t rx540mbps;    /* packets rx at 540 mbps */
-
-    /* pkteng rx frame stats */
-    uint32_t pktengrxducast;     /* unicast frames rxed by the pkteng code */
-    uint32_t pktengrxdmcast;     /* multicast frames rxed by the pkteng code */
-
-    uint32_t rfdisable;     /* count of radio disables */
-    uint32_t bphy_rxcrsglitch;     /* PHY count of bphy glitches */
-    uint32_t bphy_badplcp;
-
-    uint32_t txexptime;     /* Tx frames suppressed due to timer expiration */
-
-    uint32_t txmpdu_sgi;     /* count for sgi transmit */
-    uint32_t rxmpdu_sgi;     /* count for sgi received */
-    uint32_t txmpdu_stbc;     /* count for stbc transmit */
-    uint32_t rxmpdu_stbc;     /* count for stbc received */
-
-    uint32_t rxundec_mcst;     /* dot11WEPUndecryptableCount */
-
-    /* WPA2 counters (see rxundec for DecryptFailureCount) */
-    uint32_t tkipmicfaill_mcst;    /* TKIPLocalMICFailures */
-    uint32_t tkipcntrmsr_mcst;     /* TKIPCounterMeasuresInvoked */
-    uint32_t tkipreplay_mcst;     /* TKIPReplays */
-    uint32_t ccmpfmterr_mcst;     /* CCMPFormatErrors */
-    uint32_t ccmpreplay_mcst;     /* CCMPReplays */
-    uint32_t ccmpundec_mcst;     /* CCMPDecryptErrors */
-    uint32_t fourwayfail_mcst;     /* FourWayHandshakeFailures */
-    uint32_t wepundec_mcst;     /* dot11WEPUndecryptableCount */
-    uint32_t wepicverr_mcst;     /* dot11WEPICVErrorCount */
-    uint32_t decsuccess_mcst;     /* DecryptSuccessCount */
-    uint32_t tkipicverr_mcst;     /* TKIPICVErrorCount */
-    uint32_t wepexcluded_mcst;     /* dot11WEPExcludedCount */
-
-    uint32_t dma_hang;     /* count for dma hang */
-    uint32_t reinit;     /* count for reinit */
-
-    uint32_t pstatxucast;     /* count of ucast frames xmitted on all psta assoc */
-    uint32_t pstatxnoassoc;     /* count of txnoassoc frames xmitted on all psta assoc */
-    uint32_t pstarxucast;     /* count of ucast frames received on all psta assoc */
-    uint32_t pstarxbcmc;     /* count of bcmc frames received on all psta */
-    uint32_t pstatxbcmc;     /* count of bcmc frames transmitted on all psta */
-
-    uint32_t cso_passthrough;     /* hw cso required but passthrough */
-    uint32_t cso_normal;     /* hw cso hdr for normal process */
-    uint32_t chained;     /* number of frames chained */
-    uint32_t chainedsz1;     /* number of chain size 1 frames */
-    uint32_t unchained;     /* number of frames not chained */
-    uint32_t maxchainsz;     /* max chain size so far */
-    uint32_t currchainsz;     /* current chain size */
-    uint32_t rxdrop20s;     /* drop secondary cnt */
-    uint32_t pciereset;     /* Secondary Bus Reset issued by driver */
-    uint32_t cfgrestore;     /* configspace restore by driver */
-    uint32_t reinitreason[8];     /* reinitreason counters; 0: Unknown reason */
-    uint32_t rxrtry;     /* num of received packets with retry bit on */
-} wl_cnt_ver_ten_t;
-
-typedef struct
-{
-    uint16_t version;
-    uint16_t length;
-    uint32_t rxampdu_sgi;
-    uint32_t rxampdu_stbc;
-    uint32_t rxmpdu_sgi;
-    uint32_t rxmpdu_stbc;
-    uint32_t rxmcs0_40M;
-    uint32_t rxmcs1_40M;
-    uint32_t rxmcs2_40M;
-    uint32_t rxmcs3_40M;
-    uint32_t rxmcs4_40M;
-    uint32_t rxmcs5_40M;
-    uint32_t rxmcs6_40M;
-    uint32_t rxmcs7_40M;
-    uint32_t rxmcs32_40M;
-    uint32_t txfrmsnt_20Mlo;
-    uint32_t txfrmsnt_20Mup;
-    uint32_t txfrmsnt_40M;
-    uint32_t rx_20ul;
-} wl_cnt_ext_t;
-#define    WL_RXDIV_STATS_T_VERSION    1
-typedef struct
-{
-    uint16_t version;
-    uint16_t length;
-    uint32_t rxant[4];
-} wl_rxdiv_stats_t;
-#define    WL_DELTA_STATS_T_VERSION    1
-typedef struct
-{
-    uint16_t version;
-    uint16_t length;
-    uint32_t txframe;
-    uint32_t txbyte;
-    uint32_t txretrans;
-    uint32_t txfail;
-    uint32_t rxframe;
-    uint32_t rxbyte;
-    uint32_t rx1mbps;
-    uint32_t rx2mbps;
-    uint32_t rx5mbps5;
-    uint32_t rx6mbps;
-    uint32_t rx9mbps;
-    uint32_t rx11mbps;
-    uint32_t rx12mbps;
-    uint32_t rx18mbps;
-    uint32_t rx24mbps;
-    uint32_t rx36mbps;
-    uint32_t rx48mbps;
-    uint32_t rx54mbps;
-    uint32_t rx108mbps;
-    uint32_t rx162mbps;
-    uint32_t rx216mbps;
-    uint32_t rx270mbps;
-    uint32_t rx324mbps;
-    uint32_t rx378mbps;
-    uint32_t rx432mbps;
-    uint32_t rx486mbps;
-    uint32_t rx540mbps;
-} wl_delta_stats_t;
-#define WL_WME_CNT_VERSION    1
-typedef struct
-{
-    uint32_t packets;
-    uint32_t bytes;
-} wl_traffic_stats_t;
-#define AC_COUNT        4
-typedef struct
-{
-    uint16_t version;
-    uint16_t length;
-    wl_traffic_stats_t tx[AC_COUNT];
-    wl_traffic_stats_t tx_failed[AC_COUNT];
-    wl_traffic_stats_t rx[AC_COUNT];
-    wl_traffic_stats_t rx_failed[AC_COUNT];
-    wl_traffic_stats_t forward[AC_COUNT];
-    wl_traffic_stats_t tx_expired[AC_COUNT];
-} wl_wme_cnt_t;
-
-#define WL_MKEEP_ALIVE_VERSION      1
-#define WL_MKEEP_ALIVE_FIXED_LEN    offsetof(wl_mkeep_alive_pkt_t, data)
-#define WL_MKEEP_ALIVE_PRECISION    500
-
-#define    WLC_BA_CNT_VERSION    1
-typedef struct wlc_ba_cnt
-{
-    uint16_t version;
-    uint16_t length;
-    uint32_t txpdu;
-    uint32_t txsdu;
-    uint32_t txfc;
-    uint32_t txfci;
-    uint32_t txretrans;
-    uint32_t txbatimer;
-    uint32_t txdrop;
-    uint32_t txaddbareq;
-    uint32_t txaddbaresp;
-    uint32_t txdelba;
-    uint32_t txba;
-    uint32_t txbar;
-    uint32_t txpad[4];
-    uint32_t rxpdu;
-    uint32_t rxqed;
-    uint32_t rxdup;
-    uint32_t rxnobuf;
-    uint32_t rxaddbareq;
-    uint32_t rxaddbaresp;
-    uint32_t rxdelba;
-    uint32_t rxba;
-    uint32_t rxbar;
-    uint32_t rxinvba;
-    uint32_t rxbaholes;
-    uint32_t rxunexp;
-    uint32_t rxpad[4];
-} wlc_ba_cnt_t;
-struct ampdu_tid_control
-{
-    uint8_t tid;
-    uint8_t enable;
-};
-struct wl_msglevel2
-{
-    uint32_t low;
-    uint32_t high;
-};
-struct ampdu_ea_tid
-{
-    wl_ether_addr_t ea;
-    uint8_t tid;
-};
-struct ampdu_retry_tid
-{
-    uint8_t tid;
-    uint8_t retry;
-};
-struct ampdu_ba_sizes
-{
-    uint8_t ba_tx_wsize;
-    uint8_t ba_rx_wsize;
-};
-#define    DPT_DISCOVERY_MANUAL    0x01
-#define    DPT_DISCOVERY_AUTO    0x02
-#define    DPT_DISCOVERY_SCAN    0x04
-#define DPT_PATHSEL_AUTO    0
-#define DPT_PATHSEL_DIRECT    1
-#define DPT_PATHSEL_APPATH    2
-#define DPT_DENY_LIST_ADD     1
-#define DPT_DENY_LIST_REMOVE     2
-#define DPT_MANUAL_EP_CREATE    1
-#define DPT_MANUAL_EP_MODIFY    2
-#define DPT_MANUAL_EP_DELETE    3
-typedef struct dpt_iovar
-{
-    wl_ether_addr_t ea;
-    uint8_t mode;
-    uint32_t pad;
-} dpt_iovar_t;
-#define    DPT_STATUS_ACTIVE    0x01
-#define    DPT_STATUS_AES        0x02
-#define    DPT_STATUS_FAILED    0x04
-#define    DPT_FNAME_LEN        48
-typedef struct dpt_status
-{
-    uint8_t status;
-    uint8_t fnlen;
-    uint8_t name[DPT_FNAME_LEN];
-    uint32_t rssi;
-    sta_info_t sta;
-} dpt_status_t;
-typedef struct dpt_list
-{
-    uint32_t num;
-    dpt_status_t status[1];
-} dpt_list_t;
-typedef struct dpt_fname
-{
-    uint8_t len;
-    uint8_t name[DPT_FNAME_LEN];
-} dpt_fname_t;
-#define    BDD_FNAME_LEN        32
-typedef struct bdd_fname
-{
-    uint8_t len;
-    uint8_t name[BDD_FNAME_LEN];
-} bdd_fname_t;
-struct ts_list
-{
-    int32_t count;
-    struct tsinfo_arg tsinfo[1];
-};
-typedef struct tspec_arg
-{
-    uint16_t version;
-    uint16_t length;
-    uint32_t flag;
-    struct tsinfo_arg tsinfo;
-    uint16_t nom_msdu_size;
-    uint16_t max_msdu_size;
-    uint32_t min_srv_interval;
-    uint32_t max_srv_interval;
-    uint32_t inactivity_interval;
-    uint32_t suspension_interval;
-    uint32_t srv_start_time;
-    uint32_t min_data_rate;
-    uint32_t mean_data_rate;
-    uint32_t peak_data_rate;
-    uint32_t max_burst_size;
-    uint32_t delay_bound;
-    uint32_t min_phy_rate;
-    uint16_t surplus_bw;
-    uint16_t medium_time;
-    uint8_t dialog_token;
-} tspec_arg_t;
-typedef struct tspec_per_sta_arg
-{
-    wl_ether_addr_t ea;
-    struct tspec_arg ts;
-} tspec_per_sta_arg_t;
-typedef struct wme_max_bandwidth
-{
-    uint32_t ac[AC_COUNT];
-} wme_max_bandwidth_t;
-#define WL_WME_MBW_PARAMS_IO_BYTES (sizeof(wme_max_bandwidth_t) )
-#define    TSPEC_ARG_VERSION        2
-#define TSPEC_ARG_LENGTH        55
-#define TSPEC_DEFAULT_DIALOG_TOKEN    42
-#define TSPEC_DEFAULT_SBW_FACTOR    0x3000
-#define TSPEC_PENDING        0
-#define TSPEC_ACCEPTED        1
-#define TSPEC_REJECTED        2
-#define TSPEC_UNKNOWN        3
-#define TSPEC_STATUS_MASK    7
-#define WL_WLAN_ASSOC_REASON_NORMAL_NETWORK    0
-#define WL_WLAN_ASSOC_REASON_ROAM_FROM_CELLULAR_NETWORK    1
-#define WL_WLAN_ASSOC_REASON_ROAM_FROM_LAN    2
-#define WL_WLAN_ASSOC_REASON_MAX        2
-#define WL_SWFL_ABBFL        0x0001
-#define WL_SWFL_ABENCORE    0x0002
-#define WL_SWFL_NOHWRADIO    0x0004
-#define WL_LIFETIME_MAX 0xFFFF
-typedef struct wl_lifetime
-{
-    uint32_t ac;
-    uint32_t lifetime;
-} wl_lifetime_t;
-typedef struct wl_chan_switch
-{
-    uint8_t mode;
-    uint8_t count;
-    wl_chanspec_t chspec;
-    uint8_t reg;
-} wl_chan_switch_t;
-#define WLC_ROAM_TRIGGER_DEFAULT    0
-#define WLC_ROAM_TRIGGER_BANDWIDTH    1
-#define WLC_ROAM_TRIGGER_DISTANCE    2
-#define WLC_ROAM_TRIGGER_MAX_VALUE    2
-enum
-{
-    PFN_LIST_ORDER, PFN_RSSI
-};
-#define SORT_CRITERIA_BIT       0
-#define AUTO_NET_SWITCH_BIT     1
-#define ENABLE_BKGRD_SCAN_BIT   2
-#define IMMEDIATE_SCAN_BIT      3
-#define AUTO_CONNECT_BIT        4
-#define IMMEDIATE_EVENT_BIT     8
-#define SUPPRESS_SSID_BIT       9
-#define ENABLE_NET_OFFLOAD_BIT  10
-#define SORT_CRITERIA_MASK      0x01
-#define AUTO_NET_SWITCH_MASK    0x02
-#define ENABLE_BKGRD_SCAN_MASK  0x04
-#define IMMEDIATE_SCAN_MASK     0x08
-#define AUTO_CONNECT_MASK       0x10
-#define PFN_VERSION             2
-
-/* PFN network info structure */
-typedef struct wl_pfn_subnet_info
-{
-    struct ether_addr BSSID;
-    uint8_t channel;     /* channel number only */
-    uint8_t SSID_len;
-    uint8_t SSID[32];
-} wl_pfn_subnet_info_t;
-
-typedef struct wl_pfn_net_info
-{
-    wl_pfn_subnet_info_t pfnsubnet;
-    int16_t RSSI;     /* receive signal strength (in dBm) */
-    uint16_t timestamp;     /* age in seconds */
-} wl_pfn_net_info_t;
-
-/* used to report exactly one scan result */
-/* plus reports detailed scan info in bss_info */
-typedef struct wl_pfn_scanresult
-{
-    uint32_t version;
-    uint32_t status;
-    uint32_t count;
-    wl_pfn_net_info_t netinfo;
-    wl_bss_info_t bss_info;
-} wl_pfn_scanresult_t;
-
-/* PFN data structure */
-typedef struct wl_pfn_param
-{
-    int32_t version;     /* PNO parameters version */
-    int32_t scan_freq;     /* Scan frequency */
-    int32_t lost_network_timeout;     /* Timeout in sec. to declare
-                                       * discovered network as lost
-                                       */
-    int16_t flags;     /* Bit field to control features
-                        * of PFN such as sort criteria auto
-                        * enable switch and background scan
-                        */
-    int16_t rssi_margin;     /* Margin to avoid jitter for choosing a
-                              * PFN based on RSSI sort criteria
-                              */
-    uint8_t bestn;     /* number of best networks in each scan */
-    uint8_t mscan;     /* number of scans recorded */
-    uint8_t repeat;     /* Minimum number of scan intervals
-                         * before scan frequency changes in adaptive scan
-                         */
-    uint8_t exp;     /* Exponent of 2 for maximum scan interval */
-
-    int32_t slow_freq;     /* slow scan period */
-} wl_pfn_param_t;
-
-typedef struct wl_pfn_bssid
-{
-    struct ether_addr macaddr;
-    /* Bit4: suppress_lost, Bit3: suppress_found */
-    uint16_t flags;
-} wl_pfn_bssid_t;
-
-typedef struct wl_pfn_cfg
-{
-    uint32_t reporttype;
-    int32_t channel_num;
-    uint16_t channel_list[WL_NUMCHANNELS];
-    uint32_t flags;
-} wl_pfn_cfg_t;
-
-/* for use with wl_pfn.flags */
-#define WL_PFN_HIDDEN_MASK       0x4
-#define WL_PFN_SUPPRESSLOST_MASK 0x10
-
-typedef struct wl_pfn
-{
-    wlc_ssid_t ssid;     /* ssid name and its length */
-    int32_t flags;     /* bit2: hidden */
-    int32_t infra;     /* BSS Vs IBSS */
-    int32_t auth;     /* Open Vs Closed */
-    int32_t wpa_auth;     /* WPA type */
-    int32_t wsec;     /* wsec value */
-} wl_pfn_t;
-
-#define TOE_TX_CSUM_OL        0x00000001
-#define TOE_RX_CSUM_OL        0x00000002
-#define TOE_ERRTEST_TX_CSUM    0x00000001
-#define TOE_ERRTEST_RX_CSUM    0x00000002
-#define TOE_ERRTEST_RX_CSUM2    0x00000004
-struct toe_ol_stats_t
-{
-    uint32_t tx_summed;
-    uint32_t tx_iph_fill;
-    uint32_t tx_tcp_fill;
-    uint32_t tx_udp_fill;
-    uint32_t tx_icmp_fill;
-    uint32_t rx_iph_good;
-    uint32_t rx_iph_bad;
-    uint32_t rx_tcp_good;
-    uint32_t rx_tcp_bad;
-    uint32_t rx_udp_good;
-    uint32_t rx_udp_bad;
-    uint32_t rx_icmp_good;
-    uint32_t rx_icmp_bad;
-    uint32_t tx_tcp_errinj;
-    uint32_t tx_udp_errinj;
-    uint32_t tx_icmp_errinj;
-    uint32_t rx_tcp_errinj;
-    uint32_t rx_udp_errinj;
-    uint32_t rx_icmp_errinj;
-};
-#define ARP_OL_AGENT        0x00000001
-#define ARP_OL_SNOOP        0x00000002
-#define ARP_OL_HOST_AUTO_REPLY    0x00000004
-#define ARP_OL_PEER_AUTO_REPLY    0x00000008
-#define ARP_ERRTEST_REPLY_PEER    0x1
-#define ARP_ERRTEST_REPLY_HOST    0x2
-#define ARP_MULTIHOMING_MAX    8
-typedef struct arp_ol_stats
-{
-    uint32_t host_ip_entries;
-    uint32_t host_ip_overflow;
-    uint32_t arp_table_entries;
-    uint32_t arp_table_overflow;
-    uint32_t host_request;
-    uint32_t host_reply;
-    uint32_t host_service;
-    uint32_t peer_request;
-    uint32_t peer_request_drop;
-    uint32_t peer_reply;
-    uint32_t peer_reply_drop;
-    uint32_t peer_service;
-}arp_ol_stats_t;
-typedef struct wl_keep_alive_pkt
-{
-    uint32_t period_msec;
-    uint16_t len_bytes;
-    uint8_t data[1];
-} wl_keep_alive_pkt_t;
-#define WL_KEEP_ALIVE_FIXED_LEN        offsetof(wl_keep_alive_pkt_t, data)
-typedef enum wl_pkt_filter_type
-{
-    WL_PKT_FILTER_TYPE_PATTERN_MATCH
-} wl_pkt_filter_type_t;
-#define WL_PKT_FILTER_TYPE wl_pkt_filter_type_t
-typedef struct wl_pkt_filter_pattern
-{
-    uint32_t offset;
-    uint32_t size_bytes;
-    uint8_t mask_and_pattern[1];
-} wl_pkt_filter_pattern_t;
-typedef struct wl_pkt_filter
-{
-    uint32_t id;
-    uint32_t type;
-    uint32_t negate_match;
-    union
-    {
-        wl_pkt_filter_pattern_t pattern;
-    } u;
-} wl_pkt_filter_t;
-#define WL_PKT_FILTER_FIXED_LEN              offsetof(wl_pkt_filter_t, u)
-#define WL_PKT_FILTER_PATTERN_FIXED_LEN      offsetof(wl_pkt_filter_pattern_t, mask_and_pattern)
-typedef struct wl_pkt_filter_enable
-{
-    uint32_t id;
-    uint32_t enable;
-} wl_pkt_filter_enable_t;
-typedef struct wl_pkt_filter_list
-{
-    uint32_t num;
-    wl_pkt_filter_t filter[1];
-} wl_pkt_filter_list_t;
-#define WL_PKT_FILTER_LIST_FIXED_LEN      offsetof(wl_pkt_filter_list_t, filter)
-typedef struct wl_pkt_filter_stats
-{
-    uint32_t num_pkts_matched;
-    uint32_t num_pkts_forwarded;
-    uint32_t num_pkts_discarded;
-} wl_pkt_filter_stats_t;
-typedef struct wl_seq_cmd_ioctl
-{
-    uint32_t cmd;
-    uint32_t len;
-} wl_seq_cmd_ioctl_t;
-#define WL_SEQ_CMD_ALIGN_BYTES    4
-#define WL_SEQ_CMDS_GET_IOCTL_FILTER(cmd) \
-    ( ( (cmd) == WLC_GET_MAGIC )        || \
-      ( (cmd) == WLC_GET_VERSION )        || \
-      ( (cmd) == WLC_GET_AP )            || \
-      ( (cmd) == WLC_GET_INSTANCE ) )
-#define WL_PKTENG_PER_TX_START            0x01
-#define WL_PKTENG_PER_TX_STOP            0x02
-#define WL_PKTENG_PER_RX_START            0x04
-#define WL_PKTENG_PER_RX_WITH_ACK_START     0x05
-#define WL_PKTENG_PER_TX_WITH_ACK_START     0x06
-#define WL_PKTENG_PER_RX_STOP            0x08
-#define WL_PKTENG_PER_MASK            0xff
-#define WL_PKTENG_SYNCHRONOUS            0x100
-typedef struct wl_pkteng
-{
-    uint32_t flags;
-    uint32_t delay;
-    uint32_t nframes;
-    uint32_t length;
-    uint8_t seqno;
-    wl_ether_addr_t dest;
-    wl_ether_addr_t src;
-} wl_pkteng_t;
-#define NUM_80211b_RATES    4
-#define NUM_80211ag_RATES    8
-#define NUM_80211n_RATES    32
-#define NUM_80211_RATES        (NUM_80211b_RATES + NUM_80211ag_RATES + NUM_80211n_RATES)
-typedef struct wl_pkteng_stats
-{
-    uint32_t lostfrmcnt;
-    int32_t rssi;
-    int32_t snr;
-    uint16_t rxpktcnt[NUM_80211_RATES + 1];
-} wl_pkteng_stats_t;
-typedef struct wl_sslpnphy_papd_debug_data
-{
-    uint8_t psat_pwr;
-    uint8_t psat_indx;
-    uint8_t final_idx;
-    uint8_t start_idx;
-    int32_t min_phase;
-    int32_t voltage;
-    int8_t temperature;
-} wl_sslpnphy_papd_debug_data_t;
-typedef struct wl_sslpnphy_debug_data
-{
-    int16_t papdcompRe[64];
-    int16_t papdcompIm[64];
-} wl_sslpnphy_debug_data_t;
-typedef struct wl_sslpnphy_spbdump_data
-{
-    uint16_t tbl_length;
-    int16_t spbreal[256];
-    int16_t spbimg[256];
-} wl_sslpnphy_spbdump_data_t;
-typedef struct wl_sslpnphy_percal_debug_data
-{
-    uint32_t cur_idx;
-    uint32_t tx_drift;
-    uint8_t prev_cal_idx;
-    uint32_t percal_ctr;
-    int32_t nxt_cal_idx;
-    uint32_t force_1idxcal;
-    uint32_t onedxacl_req;
-    int32_t last_cal_volt;
-    int8_t last_cal_temp;
-    uint32_t vbat_ripple;
-    uint32_t exit_route;
-    int32_t volt_winner;
-} wl_sslpnphy_percal_debug_data_t;
-#define WL_WOWL_MAGIC       (1 << 0)
-#define WL_WOWL_NET         (1 << 1)
-#define WL_WOWL_DIS         (1 << 2)
-#define WL_WOWL_RETR        (1 << 3)
-#define WL_WOWL_BCN         (1 << 4)
-#define WL_WOWL_TST         (1 << 5)
-#define WL_WOWL_TRAFFIC     (1 << 12)
-#define WL_WOWL_BCAST       (1 << 15)
-#define WL_WOWL_GTK         (0x441f)
-#define WL_WOWL_DEAUTH      (0x1F)
-#define WL_WOWL_ALL         (0x541E)
-
-#define MAGIC_PKT_MINLEN 102
-typedef struct
-{
-    uint32_t masksize;
-    uint32_t offset;
-    uint32_t patternoffset;
-    uint32_t patternsize;
-} wl_wowl_pattern_t;
-typedef struct
-{
-    uint32_t count;
-    wl_wowl_pattern_t pattern[1];
-} wl_wowl_pattern_list_t;
-typedef struct
-{
-    uint8_t pci_wakeind;
-    uint16_t ucode_wakeind;
-} wl_wowl_wakeind_t;
-typedef struct wl_txrate_class
-{
-    uint8_t init_rate;
-    uint8_t min_rate;
-    uint8_t max_rate;
-} wl_txrate_class_t;
-#define WL_DELAYMODE_DEFER    0
-#define WL_DELAYMODE_FORCE    1
-#define WL_DELAYMODE_AUTO    2
-#define WLC_OBSS_SCAN_PASSIVE_DWELL_DEFAULT        100
-#define WLC_OBSS_SCAN_PASSIVE_DWELL_MIN            5
-#define WLC_OBSS_SCAN_PASSIVE_DWELL_MAX            1000
-#define WLC_OBSS_SCAN_ACTIVE_DWELL_DEFAULT        20
-#define WLC_OBSS_SCAN_ACTIVE_DWELL_MIN            10
-#define WLC_OBSS_SCAN_ACTIVE_DWELL_MAX            1000
-#define WLC_OBSS_SCAN_WIDTHSCAN_INTERVAL_DEFAULT    300
-#define WLC_OBSS_SCAN_WIDTHSCAN_INTERVAL_MIN        10
-#define WLC_OBSS_SCAN_WIDTHSCAN_INTERVAL_MAX        900
-#define WLC_OBSS_SCAN_CHANWIDTH_TRANSITION_DLY_DEFAULT    5
-#define WLC_OBSS_SCAN_CHANWIDTH_TRANSITION_DLY_MIN    5
-#define WLC_OBSS_SCAN_CHANWIDTH_TRANSITION_DLY_MAX    100
-#define WLC_OBSS_SCAN_PASSIVE_TOTAL_PER_CHANNEL_DEFAULT    200
-#define WLC_OBSS_SCAN_PASSIVE_TOTAL_PER_CHANNEL_MIN    200
-#define WLC_OBSS_SCAN_PASSIVE_TOTAL_PER_CHANNEL_MAX    10000
-#define WLC_OBSS_SCAN_ACTIVE_TOTAL_PER_CHANNEL_DEFAULT    20
-#define WLC_OBSS_SCAN_ACTIVE_TOTAL_PER_CHANNEL_MIN    20
-#define WLC_OBSS_SCAN_ACTIVE_TOTAL_PER_CHANNEL_MAX    10000
-#define WLC_OBSS_SCAN_ACTIVITY_THRESHOLD_DEFAULT    25
-#define WLC_OBSS_SCAN_ACTIVITY_THRESHOLD_MIN        0
-#define WLC_OBSS_SCAN_ACTIVITY_THRESHOLD_MAX        100
-typedef struct wl_obss_scan_arg
-{
-    int16_t passive_dwell;
-    int16_t active_dwell;
-    int16_t bss_widthscan_interval;
-    int16_t passive_total;
-    int16_t active_total;
-    int16_t chanwidth_transition_delay;
-    int16_t activity_threshold;
-} wl_obss_scan_arg_t;
-#define WL_OBSS_SCAN_PARAM_LEN    sizeof(wl_obss_scan_arg_t)
-#define WL_MIN_NUM_OBSS_SCAN_ARG 7
-#define WL_COEX_INFO_MASK        0x07
-#define WL_COEX_INFO_REQ        0x01
-#define    WL_COEX_40MHZ_INTOLERANT    0x02
-#define    WL_COEX_WIDTH20            0x04
-typedef struct wl_action_obss_coex_req
-{
-    uint8_t info;
-    uint8_t num;
-    uint8_t ch_list[1];
-} wl_action_obss_coex_req_t;
-#define MAX_RSSI_LEVELS 8
-typedef struct wl_rssi_event
-{
-    uint32_t rate_limit_msec;
-    uint8_t num_rssi_levels;
-    int8_t rssi_levels[MAX_RSSI_LEVELS];
-} wl_rssi_event_t;
-#define WLFEATURE_DISABLE_11N        0x00000001
-#define WLFEATURE_DISABLE_11N_STBC_TX    0x00000002
-#define WLFEATURE_DISABLE_11N_STBC_RX    0x00000004
-#define WLFEATURE_DISABLE_11N_SGI_TX    0x00000008
-#define WLFEATURE_DISABLE_11N_SGI_RX    0x00000010
-#define WLFEATURE_DISABLE_11N_AMPDU_TX    0x00000020
-#define WLFEATURE_DISABLE_11N_AMPDU_RX    0x00000040
-#define WLFEATURE_DISABLE_11N_GF    0x00000080
-
-#pragma pack(1)
-
-typedef struct sta_prbreq_wps_ie_hdr
-{
-    wl_ether_addr_t staAddr;
-    uint16_t ieLen;
-} sta_prbreq_wps_ie_hdr_t;
-
-typedef struct sta_prbreq_wps_ie_data
-{
-    sta_prbreq_wps_ie_hdr_t hdr;
-    uint8_t ieData[1];
-} sta_prbreq_wps_ie_data_t;
-
-typedef struct sta_prbreq_wps_ie_list
-{
-    uint32_t totLen;
-    uint8_t ieDataList[1];
-} sta_prbreq_wps_ie_list_t;
-
-/* EDCF related items from 802.11.h */
-
-/* ACI from 802.11.h */
-#define EDCF_AIFSN_MIN               1           /* AIFSN minimum value */
-#define EDCF_AIFSN_MAX               15          /* AIFSN maximum value */
-#define EDCF_AIFSN_MASK              0x0f        /* AIFSN mask */
-#define EDCF_ACM_MASK                0x10        /* ACM mask */
-#define EDCF_ACI_MASK                0x60        /* ACI mask */
-#define EDCF_ACI_SHIFT               5           /* ACI shift */
-#define EDCF_AIFSN_SHIFT             12          /* 4 MSB(0xFFF) in ifs_ctl for AC idx */
-
-/* ECW from 802.11.h */
-#define EDCF_ECW_MIN                 0           /* cwmin/cwmax exponent minimum value */
-#define EDCF_ECW_MAX                 15          /* cwmin/cwmax exponent maximum value */
-#define EDCF_ECW2CW(exp)             ( (1 << (exp) ) - 1 )
-#define EDCF_ECWMIN_MASK             0x0f        /* cwmin exponent form mask */
-#define EDCF_ECWMAX_MASK             0xf0        /* cwmax exponent form mask */
-#define EDCF_ECWMAX_SHIFT            4           /* cwmax exponent form shift */
-
-/* TXOP from 802.11.h */
-#define EDCF_TXOP_MIN                0           /* TXOP minimum value */
-#define EDCF_TXOP_MAX                65535       /* TXOP maximum value */
-#define EDCF_TXOP2USEC(txop)         ( (txop) << 5 )
-
-#define EDCF_ACPARAM
-struct edcf_acparam
-{
-    uint8_t ACI;
-    uint8_t ECW;
-    uint16_t TXOP;     /* stored in network order (ls octet first) */
-};
-typedef struct edcf_acparam edcf_acparam_t;
-
-/* Stop packing structures */
-#pragma pack()
-
-/* discovery state */
-typedef struct wl_p2p_disc_st
-{
-    uint8_t state;     /* see p2p_discovery_state_t */
-    uint16_t chanspec;     /* valid in listen state */
-    uint16_t dwell_time_ms;     /* valid in listen state, in ms */
-} wl_p2p_disc_st_t;
-
-/* scan request */
-typedef struct wl_p2p_scan
-{
-    uint8_t type;     /* 'S' for WLC_SCAN, 'E' for "escan" */
-    uint8_t reserved[3];
-    /* scan or escan parms... */
-} wl_p2p_scan_t;
-
-/* escan request */
-typedef struct
-{
-    uint8_t type;     /* 'S' for WLC_SCAN, 'E' for "escan" */
-    uint8_t reserved[3];
-
-    /* escan params */
-    wl_escan_params_t escan;
-} wl_p2p_escan_t;
-
-/* i/f request */
-typedef struct wl_p2p_if
-{
-    struct ether_addr mac_address;
-    uint8_t interface_type;
-    uint16_t chan_spec;
-} wl_p2p_if_t;
-
-/* i/f query */
-typedef struct wl_p2p_ifq
-{
-    uint32_t bsscfgidx;
-    char ifname[16];
-} wl_p2p_ifq_t;
-
-/* OppPS & CTWindow */
-typedef struct wl_p2p_ops
-{
-    uint8_t ops;     /* 0: disable 1: enable */
-    uint8_t ctw;     /* >= 10 */
-} wl_p2p_ops_t;
-
-/* absence and presence request */
-typedef struct wl_p2p_sched_desc
-{
-    uint32_t start;
-    uint32_t interval;
-    uint32_t duration;
-    uint32_t count;     /* see count */
-} wl_p2p_sched_desc_t;
-
-typedef struct wl_p2p_sched
-{
-    uint8_t type;     /* see schedule type */
-    uint8_t action;     /* see schedule action */
-    uint8_t option;     /* see schedule option */
-    wl_p2p_sched_desc_t desc[1];
-} wl_p2p_sched_t;
-
-/* schedule type */
-#define WL_P2P_SCHED_TYPE_ABS           0       /* Scheduled Absence */
-#define WL_P2P_SCHED_TYPE_REQ_ABS       1       /* Requested Absence */
-#define WL_P2P_SCHED_TYPE_REQ_PSC       2       /* Requested Presence */
-
-/* schedule action during absence periods (for WL_P2P_SCHED_ABS type) */
-#define WL_P2P_SCHED_ACTION_NONE        0       /* no action */
-#define WL_P2P_SCHED_ACTION_DOZE        1       /* doze */
-#define WL_P2P_SCHED_ACTION_RESET       255     /* reset */
-
-/* schedule option - WL_P2P_SCHED_TYPE_ABS */
-#define WL_P2P_SCHED_OPTION_NORMAL      0       /* normal start/interval/duration/count in time */
-#define WL_P2P_SCHED_OPTION_BCNPCT      1       /* percentage of beacon interval */
-
-typedef struct wl_p2p_wfds_hash
-{
-    uint32_t advt_id;
-    uint16_t nw_cfg_method;
-    uint8_t wfds_hash[6];
-    uint8_t name_len;
-    uint8_t service_name[MAX_WFDS_SVC_NAME_LEN];
-} wl_p2p_wfds_hash_t;
-
-#define P2P_IP_ALLOC_LEN            12
-/* Definitions for Reliable Multicast */
-/* NOTE: RMC structures should not be packed */
-
-#define WL_RMC_CNT_VERSION         (1)
-#define WL_RMC_TR_VERSION          (1)
-#define WL_RMC_MAX_CLIENT          (32)
-#define WL_RMC_FLAG_INBLACKLIST    (1)
-#define WL_RMC_FLAG_ACTIVEACKER    (2)
-#define WL_RMC_FLAG_RELMCAST       (4)
-#define WL_RMC_FLAG_MASTER_TX      (8)
-#define WL_RMC_MAX_TABLE_ENTRY     (8)
-
-#define WL_RMC_VER                 (1)
-#define WL_RMC_INDEX_ACK_ALL       (255)
-#define WL_RMC_NUM_OF_MC_STREAMS   (4)
-#define WL_RMC_MAX_TRS_PER_GROUP   (1)
-#define WL_RMC_MAX_TRS_IN_ACKALL   (1)
-#define WL_RMC_ACK_MCAST0          (0x02)
-#define WL_RMC_ACK_MCAST_ALL       (0x01)
-#define WL_RMC_ACTF_TIME_MIN       (300)     /* time in ms */
-#define WL_RMC_ACTF_TIME_MAX       (20000)   /* time in ms */
-#define WL_RMC_MAX_NUM_TRS         (32)      /* maximun transmitters allowed */
-#define WL_RMC_ARTMO_MIN           (350)     /* time in ms */
-#define WL_RMC_ARTMO_MAX           (40000)   /* time in ms */
-
-enum rmc_opcodes
-{
-    RELMCAST_ENTRY_OP_DISABLE = 0,     /* Disable multi-cast group */
-    RELMCAST_ENTRY_OP_DELETE = 1,     /* Delete multi-cast group */
-    RELMCAST_ENTRY_OP_ENABLE = 2,     /* Enable multi-cast group */
-    RELMCAST_ENTRY_OP_ACK_ALL = 3     /* Enable ACK ALL bit in AMT */
-};
-
-/* RMC operational modes */
-enum rmc_modes
-{
-    WL_RMC_MODE_RECEIVER = 0,     /* Receiver mode by default */
-    WL_RMC_MODE_TRANSMITTER = 1,     /* Transmitter mode using wl ackreq */
-    WL_RMC_MODE_INITIATOR = 2     /* Initiator mode using wl ackreq */
-};
-
-/* Each RMC mcast client info */
-typedef struct wl_relmcast_client
-{
-    uint8_t flag;     /* status of client such as AR, R, or blacklisted */
-    int16_t rssi;     /* rssi value of RMC client */
-    struct ether_addr addr;     /* mac address of RMC client */
-} wl_relmcast_client_t;
-
-/* RMC Counters */
-typedef struct wl_rmc_cnts
-{
-    uint16_t version;     /* see definition of WL_CNT_T_VERSION */
-    uint16_t length;     /* length of entire structure */
-    uint16_t dupcnt;     /* counter for duplicate rmc MPDU */
-    uint16_t ackreq_err;     /* counter for wl ackreq error    */
-    uint16_t af_tx_err;     /* error count for action frame transmit   */
-    uint16_t null_tx_err;     /* error count for rmc null frame transmit */
-    uint16_t af_unicast_tx_err;     /* error count for rmc unicast frame transmit */
-    uint16_t mc_no_amt_slot;     /* No mcast AMT entry available */
-    /* Unused. Keep for rom compatibility */
-    uint16_t mc_no_glb_slot;     /* No mcast entry available in global table */
-    uint16_t mc_not_mirrored;     /* mcast group is not mirrored */
-    uint16_t mc_existing_tr;     /* mcast group is already taken by transmitter */
-    uint16_t mc_exist_in_amt;     /* mcast group is already programmed in amt */
-    /* Unused. Keep for rom compatibility */
-    uint16_t mc_not_exist_in_gbl;     /* mcast group is not in global table */
-    uint16_t mc_not_exist_in_amt;     /* mcast group is not in AMT table */
-    uint16_t mc_utilized;     /* mcast addressed is already taken */
-    uint16_t mc_taken_other_tr;     /* multi-cast addressed is already taken */
-    uint32_t rmc_rx_frames_mac;     /* no of mc frames received from mac */
-    uint32_t rmc_tx_frames_mac;     /* no of mc frames transmitted to mac */
-    uint32_t mc_null_ar_cnt;     /* no. of times NULL AR is received */
-    uint32_t mc_ar_role_selected;     /* no. of times took AR role */
-    uint32_t mc_ar_role_deleted;     /* no. of times AR role cancelled */
-    uint32_t mc_noacktimer_expired;     /* no. of times noack timer expired */
-    uint16_t mc_no_wl_clk;     /* no wl clk detected when trying to access amt */
-    uint16_t mc_tr_cnt_exceeded;     /* No of transmitters in the network exceeded */
-} wl_rmc_cnts_t;
-
-/* RMC Status */
-typedef struct wl_relmcast_st
-{
-    uint8_t ver;     /* version of RMC */
-    uint8_t num;     /* number of clients detected by transmitter */
-    wl_relmcast_client_t clients[WL_RMC_MAX_CLIENT];
-    uint16_t err;     /* error status (used in infra) */
-    uint16_t actf_time;     /* action frame time period */
-} wl_relmcast_status_t;
-
-/* Entry for each STA/node */
-typedef struct wl_rmc_entry
-{
-    /* operation on multi-cast entry such add,
-     * delete, ack-all
-     */
-    int8_t flag;
-    struct ether_addr addr;     /* multi-cast group mac address */
-} wl_rmc_entry_t;
-
-/* RMC table */
-typedef struct wl_rmc_entry_table
-{
-    uint8_t index;     /* index to a particular mac entry in table */
-    uint8_t opcode;     /* opcodes or operation on entry */
-    wl_rmc_entry_t entry[WL_RMC_MAX_TABLE_ENTRY];
-} wl_rmc_entry_table_t;
-
-typedef struct wl_rmc_trans_elem
-{
-    struct ether_addr tr_mac;     /* transmitter mac */
-    struct ether_addr ar_mac;     /* ar mac */
-    uint16_t artmo;     /* AR timeout */
-    uint8_t amt_idx;     /* amt table entry */
-    uint16_t flag;     /* entry will be acked, not acked, programmed, full etc */
-} wl_rmc_trans_elem_t;
-
-/* RMC transmitters */
-typedef struct wl_rmc_trans_in_network
-{
-    uint8_t ver;     /* version of RMC */
-    uint8_t num_tr;     /* number of transmitters in the network */
-    wl_rmc_trans_elem_t trs[WL_RMC_MAX_NUM_TRS];
-} wl_rmc_trans_in_network_t;
-
-/* To update vendor specific ie for RMC */
-typedef struct wl_rmc_vsie
-{
-    uint8_t oui[3];
-    uint16_t payload;     /* IE Data Payload */
-} wl_rmc_vsie_t;
-
-/* WLC_E_ULP event data */
-#define WL_ULP_EVENT_VERSION        1
-#define WL_ULP_DISABLE_CONSOLE      1   /* Disable console message on ULP entry */
-#define WL_ULP_UCODE_DOWNLOAD       2   /* Download ULP ucode file */
-#define WL_ULP_ENTRY                3   /* inform ulp entry to Host during warmboot */
-
-typedef struct wl_ulp_event
-{
-    uint16_t version;
-    uint16_t ulp_dongle_action;
-} wl_ulp_event_t;
-
-/* clm download */
-#define DLOAD_HANDLER_VER   1   /* Downloader version */
-#define DLOAD_FLAG_VER_MASK 0xf000  /* Downloader version mask */
-#define DLOAD_FLAG_VER_SHIFT    12  /* Downloader version shift */
-
-#define DL_CRC_NOT_INUSE    0x0001
-#define DL_BEGIN        0x0002
-#define DL_END          0x0004
-
-enum
-{
-    DL_TYPE_UCODE = 1, DL_TYPE_CLM = 2
-};
-
-struct wl_dload_data
-{
-    uint16_t flag;
-    uint16_t dload_type;
-    uint32_t len;
-    uint32_t crc;
-    uint8_t data[1];
-};
-typedef struct wl_dload_data wl_dload_data_t;
-
-struct wl_clm_dload_info
-{
-    uint32_t ds_id;
-    uint32_t clm_total_len;
-    uint32_t num_chunks;
-    uint32_t chunk_len;
-    uint32_t chunk_offset;
-    uint8_t data_chunk[1];
-};
-typedef struct wl_clm_dload_info wl_clm_dload_info_t;
-
-#pragma pack(1)
-typedef struct mesh_peer_info
-{
-    uint16_t mesh_peer_prot_id;
-    uint16_t local_link_id;
-    uint16_t peer_link_id;
-    uint16_t peer_aid;
-    uint8_t state;
-} mesh_peer_info_t;
-
-typedef struct mesh_peer_info_ext
-{
-    mesh_peer_info_t peer_info;
-    uint16_t local_aid;
-    struct ether_addr ea;
-    uint32_t entry_state;
-    int32_t rssi;
-} mesh_peer_info_ext_t;
-
-typedef struct mesh_peer_info_dump
-{
-    uint32_t buflen;
-    uint32_t version;
-    uint32_t count;     /* number of results */
-    mesh_peer_info_ext_t mpi_ext[1];
-} mesh_peer_info_dump_t;
-
-#define WL_CHANSPEC_CTL_SB_LLL      0x0000
-#define WL_CHANSPEC_CTL_SB_LLU      0x0100
-#define WL_CHANSPEC_CTL_SB_LUL      0x0200
-#define WL_CHANSPEC_CTL_SB_LUU      0x0300
-#define WL_CHANSPEC_CTL_SB_ULL      0x0400
-#define WL_CHANSPEC_CTL_SB_ULU      0x0500
-#define WL_CHANSPEC_CTL_SB_UUL      0x0600
-#define WL_CHANSPEC_CTL_SB_UUU      0x0700
-#define WL_CHANSPEC_CTL_SB_LL       WL_CHANSPEC_CTL_SB_LLL
-#define WL_CHANSPEC_CTL_SB_LU       WL_CHANSPEC_CTL_SB_LLU
-#define WL_CHANSPEC_CTL_SB_UL       WL_CHANSPEC_CTL_SB_LUL
-#define WL_CHANSPEC_CTL_SB_UU       WL_CHANSPEC_CTL_SB_LUU
-#define WL_CHANSPEC_CTL_SB_L        WL_CHANSPEC_CTL_SB_LLL
-#define WL_CHANSPEC_CTL_SB_U        WL_CHANSPEC_CTL_SB_LLU
-#define INVCHANSPEC            255
-#define WL_CHANSPEC_CTL_SB_SHIFT         8
-#define WL_CHANSPEC_BW_5            0x0000
-#define WL_CHANSPEC_BW_80        0x2000
-#define WL_CHANSPEC_BW_160       0x2800
-#define WL_CHANSPEC_BW_8080      0x3000
-
-struct ether_addr;
-struct wl_join_scan_params;
-
-typedef struct wl_assoc_params
-{
-    struct ether_addr bssid;
-    uint16_t bssid_cnt;
-    uint32_t chanspec_num;
-    chanspec_t chanspec_list[1];
-} wl_assoc_params_t;
-#define WL_ASSOC_PARAMS_FIXED_SIZE     (sizeof(wl_assoc_params_t) - sizeof(wl_chanspec_t) )
-typedef wl_assoc_params_t wl_reassoc_params_t;
-#define WL_REASSOC_PARAMS_FIXED_SIZE    WL_ASSOC_PARAMS_FIXED_SIZE
-typedef wl_assoc_params_t wl_join_assoc_params_t;
-#define WL_JOIN_ASSOC_PARAMS_FIXED_SIZE        WL_ASSOC_PARAMS_FIXED_SIZE
-typedef struct wl_join_params
-{
-    wlc_ssid_t ssid;
-    struct wl_assoc_params params;
-} wl_join_params_t;
-#define WL_JOIN_PARAMS_FIXED_SIZE     (sizeof(wl_join_params_t) - sizeof(wl_chanspec_t) )
-
-/* extended join params */
-typedef struct wl_extjoin_params
-{
-    wlc_ssid_t ssid;     /* {0, ""}: wildcard scan */
-    struct wl_join_scan_params scan_params;
-    wl_join_assoc_params_t assoc_params;     /* optional field, but it must include the fixed portion
-                                              * of the wl_join_assoc_params_t struct when it does
-                                              * present.
-                                              */
-} wl_extjoin_params_t;
-#define WL_EXTJOIN_PARAMS_FIXED_SIZE    (sizeof(wl_extjoin_params_t) - sizeof(chanspec_t) )
-
-#define WLC_SET_CUSTOM_COUNTRY             ( (uint32_t)320 )
-
-/* WLC_GET_AUTH, WLC_SET_AUTH values */
-#define WL_AUTH_OPEN_SYSTEM     0   /* d11 open authentication */
-#define WL_AUTH_SHARED_KEY      1   /* d11 shared authentication */
-#define WL_AUTH_OPEN_SHARED     2   /* try open, then shared if open failed w/rc 13 */
-#define WL_AUTH_SAE             3   /* Simultaneous Authentication of Equals (SAE) */
-
-/** ARP offload statistics */
-struct whd_arp_stats_s
-{
-    uint32_t version;               /**< WLAN version											*/
-    uint32_t peerage;               /**< Current peer age-out time								*/
-    uint32_t arpoe;                 /**< Agent enabled state									*/
-    uint32_t features_enabled;      /**< ARP Feature Flags @ref CY_ARP_OL_AGENT_ENABLE, etc.	*/
-    arp_ol_stats_t stats;   /**< Current stats											*/
-    uint32_t host_ip_list[ARP_MULTIHOMING_MAX];     /**< host_ip addresses in one call			*/
-};
-
-#pragma pack()
-
-/* TCP Keepalive offload related defintions should not be added inside
- * pragma pack to avoid functionality breakage.
- */
-/*
- * TCP keepalive offload definitions
- */
-#define MAX_TKO_CONN                 4
-#define IPV4_ADDR_LEN                4      /* IPV4 address length   */
-
-/* Default TCP Keepalive retry parameters.  */
-#define TCP_KEEPALIVE_OFFLOAD_INTERVAL_SEC       (20)
-#define TCP_KEEPALIVE_OFFLOAD_RETRY_COUNT        (3)
-#define TCP_KEEPALIVE_OFFLOAD_RETRY_INTERVAL_SEC (3)
-
-/* common iovar struct */
-typedef struct wl_tko
-{
-    uint16_t subcmd_id;       /* subcommand id */
-    uint16_t len;             /* total length of data[] */
-    uint8_t data[1];          /* subcommand data */
-} wl_tko_t;
-
-/* subcommand ids */
-#define WL_TKO_SUBCMD_MAX_TCP           0       /* max TCP connections supported */
-#define WL_TKO_SUBCMD_PARAM             1       /* configure offload common parameters  */
-#define WL_TKO_SUBCMD_CONNECT           2       /* TCP connection info */
-#define WL_TKO_SUBCMD_ENABLE            3       /* enable/disable */
-#define WL_TKO_SUBCMD_STATUS            4       /* TCP connection status */
-
-/* WL_TKO_SUBCMD_MAX_CONNECT subcommand data */
-typedef struct wl_tko_max_tcp
-{
-    uint8_t max;      /* max TCP connections supported */
-    uint8_t pad[3];   /* 4-byte struct alignment */
-} wl_tko_max_tcp_t;
-
-/* WL_TKO_SUBCMD_PARAM subcommand data */
-typedef struct wl_tko_param
-{
-    uint16_t interval;        /* keepalive tx interval (secs) */
-    uint16_t retry_interval;  /* keepalive retry interval (secs) */
-    uint16_t retry_count;     /* retry_count */
-    uint8_t pad[2];           /* 4-byte struct alignment */
-} wl_tko_param_t;
-
-/* WL_TKO_SUBCMD_CONNECT subcommand data
- * invoke with unique 'index' for each TCP connection
- */
-typedef struct wl_tko_connect
-{
-    uint8_t index;            /* TCP connection index, 0 to max-1 */
-    uint8_t ip_addr_type;     /* 0 - IPv4, 1 - IPv6 */
-    uint16_t local_port;      /* local port */
-    uint16_t remote_port;     /* remote port */
-    uint32_t local_seq;       /* local sequence number */
-    uint32_t remote_seq;      /* remote sequence number */
-    uint16_t request_len;     /* TCP keepalive request packet length */
-    uint16_t response_len;    /* TCP keepalive response packet length */
-    uint8_t data[1];          /* variable length field containing local/remote IPv4/IPv6,
-                               * TCP keepalive request packet, TCP keepalive response packet
-                               *	  For IPv4, length is 4 * 2 + request_length + response_length
-                               *		 offset 0 - local IPv4
-                               *		 offset 4 - remote IPv4
-                               *		 offset 8 - TCP keepalive request packet
-                               *		 offset 8+request_length - TCP keepalive response packet
-                               *	  For IPv6, length is 16 * 2 + request_length + response_length
-                               *		 offset 0 - local IPv6
-                               *		 offset 16 - remote IPv6
-                               *		 offset 32 - TCP keepalive request packet
-                               *		 offset 32+request_length - TCP keepalive response packet
-                               */
-} wl_tko_connect_t;
-
-/* WL_TKO_SUBCMD_CONNECT subcommand data to GET configured info for specific index */
-typedef struct wl_tko_get_connect
-{
-    uint8_t index;            /* TCP connection index, 0 to max-1 */
-    uint8_t pad[3];           /* 4-byte struct alignment */
-} wl_tko_get_connect_t;
-
-typedef struct wl_tko_enable
-{
-    uint8_t enable;   /* 1 - enable, 0 - disable */
-    uint8_t pad[3];   /* 4-byte struct alignment */
-} wl_tko_enable_t;
-
-/* WL_TKO_SUBCMD_STATUS subcommand data */
-/* must be invoked before tko is disabled else status is unavailable */
-typedef struct wl_tko_status
-{
-    uint8_t count;        /* number of status entries (i.e. equals
-                           * max TCP connections supported)
-                           */
-    uint8_t status[1];    /* variable length field contain status for
-                           * each TCP connection index
-                           */
-} wl_tko_status_t;
-/** Get/Set TKO intervals & retrys */
-struct whd_tko_retry
-{
-    uint16_t tko_interval;          /**< How often to send (in seconds) */
-    uint16_t tko_retry_count;       /**< Max times to retry if original fails */
-    uint16_t tko_retry_interval;    /**< Wait time between retries (in seconds) */
-};
-
-/** Status values used in conjunction with whd_tko_status_t */
-typedef enum
-{
-    TKO_STATUS_NORMAL                       = 0,    /**< TCP connection normal, no error */
-    TKO_STATUS_NO_RESPONSE                  = 1,    /**< no response to TCP keepalive */
-    TKO_STATUS_NO_TCP_ACK_FLAG              = 2,    /**< TCP ACK flag not set */
-    TKO_STATUS_UNEXPECT_TCP_FLAG            = 3,    /**< unexpect TCP flags set other than ACK */
-    TKO_STATUS_SEQ_NUM_INVALID              = 4,    /**< ACK != sequence number */
-    TKO_STATUS_REMOTE_SEQ_NUM_INVALID       = 5,    /**< SEQ > remote sequence number */
-    TKO_STATUS_TCP_DATA                     = 6,    /**< TCP data available */
-    TKO_STATUS_UNAVAILABLE                  = 255,  /**< not used/configured */
-} tko_status_t;
-
-/** Status of each TCP connection */
-struct whd_tko_status
-{
-    uint8_t count;              /**< number of status entries */
-    uint8_t status[MAX_TKO_CONN];   /**< each TCP status */
-};
-
-/** Struct to query FW for current TKO configuation */
-struct whd_tko_connect
-{
-    uint8_t index;            /**< TCP connection index, 0 to max-1 */
-    uint8_t ip_addr_type;     /**< 0 - IPv4, 1 - IPv6 */
-    uint16_t local_port;      /**< local port */
-    uint16_t remote_port;     /**< remote port */
-    uint32_t local_seq;       /**< local sequence number */
-    uint32_t remote_seq;      /**< remote sequence number */
-    uint16_t request_len;     /**< TCP keepalive request packet length */
-    uint16_t response_len;    /**< TCP keepalive response packet length */
-    uint8_t data[1];          /**< variable length field containing local/remote IPv4/IPv6,
-                               * TCP keepalive request packet, TCP keepalive response packet
-                               *	  For IPv4, length is 4 * 2 + request_length + response_length
-                               *		 offset 0 - local IPv4
-                               *		 offset 4 - remote IPv4
-                               *		 offset 8 - TCP keepalive request packet
-                               *		 offset 8+request_length - TCP keepalive response packet
-                               *	  For IPv6, length is 16 * 2 + request_length + response_length
-                               *		 offset 0 - local IPv6
-                               *		 offset 16 - remote IPv6
-                               *		 offset 32 - TCP keepalive request packet
-                               *		 offset 32+request_length - TCP keepalive response packet
-                               */
-};
-
-#ifdef __cplusplus
-} /* extern "C" */
-#endif
-
-#endif
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_ap.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_ap.c
deleted file mode 100644
index 719b88497a..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_ap.c
+++ /dev/null
@@ -1,772 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Provides generic APSTA functionality that chip specific files use
- */
-#include "whd_debug.h"
-#include "whd_ap.h"
-#include "bus_protocols/whd_chip_reg.h"
-#include "whd_chip_constants.h"
-#include "whd_chip.h"
-#include "whd_sdpcm.h"
-#include "whd_thread_internal.h"
-#include "whd_events_int.h"
-#include "whd_int.h"
-#include "whd_utils.h"
-#include "whd_wifi_api.h"
-#include "whd_buffer_api.h"
-#include "whd_wlioctl.h"
-
-/******************************************************
-** @cond               Constants
-*******************************************************/
-
-#define WLC_EVENT_MSG_LINK      (0x01)
-#define RATE_SETTING_11_MBPS    (11000000 / 500000)
-#define AMPDU_AP_DEFAULT_BA_WSIZE   8
-#define AMPDU_STA_DEFAULT_BA_WSIZE  8
-#define AMPDU_STA_DEFAULT_MPDU      4   /* STA default num MPDU per AMPDU */
-#define WEP40_KEY_LENGTH                     5
-#define WEP104_KEY_LENGTH                    13
-#define FORMATTED_ASCII_WEP40_KEY_LENGTH     28 /* For 5  bytes key */
-#define FORMATTED_ASCII_WEP104_KEY_LENGTH    60 /* For 13 bytes key */
-
-/******************************************************
-**                   Enumerations
-*******************************************************/
-typedef enum
-{
-    BSS_AP   = 3,
-    BSS_STA  = 2,
-    BSS_UP   = 1,
-    BSS_DOWN = 0
-} bss_arg_option_t;
-
-typedef enum
-{
-    WEP_OPEN_SYSTEM_AUTHENTICATION  = 0,
-    WEP_SHARED_KEY_AUTHENTICATION   = 1
-} wep_authentication_type_t;
-
-/******************************************************
- *  *               Function Declarations
- *   ******************************************************/
-static void *whd_handle_apsta_event(whd_interface_t ifp, const whd_event_header_t *event_header,
-                                    const uint8_t *event_data, void *handler_user_data);
-
-/******************************************************
- *        Variables Definitions
- *****************************************************/
-static const whd_event_num_t apsta_events[] = { WLC_E_IF, WLC_E_LINK, WLC_E_NONE };
-/******************************************************
-*               Function Definitions
-******************************************************/
-
-void whd_ap_info_init(whd_driver_t whd_driver)
-{
-    whd_driver->ap_info.ap_is_up = WHD_FALSE;
-    whd_driver->ap_info.is_waiting_event = WHD_FALSE;
-}
-
-void whd_wifi_set_ap_is_up(whd_driver_t whd_driver, whd_bool_t new_state)
-{
-    if (whd_driver->ap_info.ap_is_up != new_state)
-    {
-        whd_driver->ap_info.ap_is_up = new_state;
-    }
-}
-
-whd_bool_t whd_wifi_get_ap_is_up(whd_driver_t whd_driver)
-{
-    return whd_driver->ap_info.ap_is_up;
-}
-
-whd_result_t whd_wifi_set_block_ack_window_size_common(whd_interface_t ifp, uint16_t ap_win_size, uint16_t sta_win_size)
-{
-    whd_result_t retval;
-    uint16_t block_ack_window_size = ap_win_size;
-
-    /* If the AP interface is already up then don't change the Block Ack window size */
-    if (ifp->role == WHD_AP_ROLE)
-    {
-        return WHD_SUCCESS;
-    }
-
-    if (ifp->role == WHD_STA_ROLE)
-    {
-        block_ack_window_size = sta_win_size;
-    }
-
-    retval = whd_wifi_set_iovar_value(ifp, IOVAR_STR_AMPDU_BA_WINDOW_SIZE, ( uint32_t )block_ack_window_size);
-
-    whd_assert("set_block_ack_window_size: Failed to set block ack window size\r\n", retval == WHD_SUCCESS);
-
-    return retval;
-}
-
-whd_result_t whd_wifi_set_ampdu_parameters_common(whd_interface_t ifp, uint8_t ba_window_size, int8_t ampdu_mpdu,
-                                                  uint8_t rx_factor)
-{
-    CHECK_RETURN(whd_wifi_set_iovar_value(ifp, IOVAR_STR_AMPDU_BA_WINDOW_SIZE, ba_window_size) );
-
-    /* Set number of MPDUs available for AMPDU */
-    CHECK_RETURN(whd_wifi_set_iovar_value(ifp, IOVAR_STR_AMPDU_MPDU, ( uint32_t )ampdu_mpdu) );
-
-    if (rx_factor != AMPDU_RX_FACTOR_INVALID)
-    {
-        CHECK_RETURN(whd_wifi_set_iovar_value(ifp, IOVAR_STR_AMPDU_RX_FACTOR, rx_factor) );
-    }
-    return WHD_SUCCESS;
-}
-
-/** Sets the chip specific AMPDU parameters for AP and STA
- *  For SDK 3.0, and beyond, each chip will need it's own function for setting AMPDU parameters.
- */
-whd_result_t whd_wifi_set_ampdu_parameters(whd_interface_t ifp)
-{
-    whd_driver_t whd_driver = ifp->whd_driver;
-    /* Get the chip number */
-    uint16_t wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-
-    if ( (wlan_chip_id == 43012) || (wlan_chip_id == 43455) )
-    {
-        return whd_wifi_set_ampdu_parameters_common(ifp, AMPDU_STA_DEFAULT_BA_WSIZE, AMPDU_MPDU_AUTO,
-                                                    AMPDU_RX_FACTOR_64K);
-    }
-    else if (wlan_chip_id == 43909)
-    {
-        return whd_wifi_set_ampdu_parameters_common(ifp, AMPDU_STA_DEFAULT_BA_WSIZE, AMPDU_MPDU_AUTO,
-                                                    AMPDU_RX_FACTOR_INVALID);
-    }
-    else
-    {
-        return whd_wifi_set_ampdu_parameters_common(ifp, AMPDU_STA_DEFAULT_BA_WSIZE, AMPDU_STA_DEFAULT_MPDU,
-                                                    AMPDU_RX_FACTOR_8K);
-    }
-}
-
-/* All chips */
-static void *whd_handle_apsta_event(whd_interface_t ifp, const whd_event_header_t *event_header,
-                                    const uint8_t *event_data, void *handler_user_data)
-{
-    whd_driver_t whd_driver = ifp->whd_driver;
-    whd_ap_int_info_t *ap;
-
-    UNUSED_PARAMETER(event_header);
-    UNUSED_PARAMETER(event_data);
-    UNUSED_PARAMETER(handler_user_data);
-
-    ap = &whd_driver->ap_info;
-
-    if (ap->is_waiting_event == WHD_TRUE)
-    {
-        if ( (event_header->event_type == (whd_event_num_t)WLC_E_LINK) ||
-             (event_header->event_type == WLC_E_IF) )
-        {
-            whd_result_t result;
-            result = cy_rtos_set_semaphore(&ap->whd_wifi_sleep_flag, WHD_FALSE);
-            WPRINT_WHD_DEBUG( ("%s failed to post AP link semaphore at %d\n", __func__, __LINE__) );
-            REFERENCE_DEBUG_ONLY_VARIABLE(result);
-        }
-    }
-    return handler_user_data;
-}
-
-/* All chips */
-uint32_t whd_wifi_init_ap(whd_interface_t ifp, whd_ssid_t *ssid, whd_security_t auth_type,
-                          const uint8_t *security_key, uint8_t key_length, uint8_t channel)
-{
-    whd_driver_t whd_driver;
-    whd_bool_t wait_for_interface = WHD_FALSE;
-    whd_result_t result;
-    whd_buffer_t response;
-    whd_buffer_t buffer;
-    whd_interface_t prim_ifp;
-    whd_ap_int_info_t *ap;
-    uint32_t *data;
-    uint32_t bss_index;
-    uint16_t wlan_chip_id;
-    uint16_t event_entry = (uint16_t)0xFF;
-
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    ap = &whd_driver->ap_info;
-
-    prim_ifp = whd_get_primary_interface(whd_driver);
-    if (prim_ifp == NULL)
-    {
-        WPRINT_WHD_ERROR( ("%s failed at %d \n", __func__, __LINE__) );
-        return WHD_UNKNOWN_INTERFACE;
-    }
-
-    /* Turn off APSTA when creating AP mode on primary interface */
-    if (ifp == prim_ifp)
-    {
-        CHECK_RETURN(whd_wifi_set_ioctl_buffer(prim_ifp, WLC_DOWN, NULL, 0) );
-        data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)4, IOVAR_STR_APSTA);
-        CHECK_IOCTL_BUFFER(data);
-        *data = 0;
-        result = whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0);
-        if ( (result != WHD_SUCCESS) && (result != WHD_WLAN_UNSUPPORTED) )
-        {
-            WPRINT_WHD_ERROR( ("Could not turn off apsta\n") );
-            return result;
-        }
-        CHECK_RETURN(whd_wifi_set_ioctl_buffer(prim_ifp, WLC_UP, NULL, 0) );
-    }
-
-    bss_index = ifp->bsscfgidx;
-    /* Get the Chip Number */
-    wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-
-    /* Configuration need to come from some structure whd_driver */
-#if 0
-    uint32_t *auth;
-    uint16_t length;
-#endif
-
-    ifp->role = WHD_AP_ROLE;
-
-    if (wlan_chip_id == 4334)
-    {
-        if (auth_type == WHD_SECURITY_WEP_PSK)
-        {
-            WPRINT_WHD_ERROR( ("WEP auth type is not allowed , %s failed at line %d \n", __func__, __LINE__) );
-            return WHD_WEP_NOT_ALLOWED;
-        }
-    }
-    if ( ( (auth_type == WHD_SECURITY_WPA_TKIP_PSK) || (auth_type == WHD_SECURITY_WPA2_AES_PSK) ||
-           (auth_type == WHD_SECURITY_WPA2_MIXED_PSK) ) &&
-         ( (key_length < (uint8_t)8) || (key_length > (uint8_t)64) ) )
-    {
-        WPRINT_WHD_INFO( ("Error: WPA security key length must be between 8 and 64\n") );
-        return WHD_WPA_KEYLEN_BAD;
-    }
-
-    /* Need to decide on the wep configuration */
-#if 0
-    else if ( ( (auth_type == WHD_SECURITY_WEP_PSK) || (auth_type == WHD_SECURITY_WEP_SHARED) ) &&
-              ( (key_length != FORMATTED_ASCII_WEP40_KEY_LENGTH) &&
-                (key_length != FORMATTED_ASCII_WEP104_KEY_LENGTH) ) )
-    {
-        WPRINT_WHD_INFO( ("Error: WEP security Key length must be either 5 / 13 bytes\n") );
-        return WHD_WEP_KEYLEN_BAD;
-    }
-#endif
-    if ( (whd_wifi_get_ap_is_up(whd_driver) == WHD_TRUE) )
-    {
-        WPRINT_WHD_INFO( ("Error: Soft AP or Wi-Fi Direct group owner already up\n") );
-        return WHD_AP_ALREADY_UP;
-    }
-
-/*    if (wlan_chip_id == 4334 || wlan_chip_id == 43340 || wlan_chip_id == 43342 )
-    {
-        if ( whd_wifi_set_block_ack_window_size( ifp ) != WHD_SUCCESS )
-        {
-            return WHD_SET_BLOCK_ACK_WINDOW_FAIL;
-        }
-    }*/
-
-    /* Query bss state (does it exist? if so is it UP?) */
-    data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)4, IOVAR_STR_BSS);
-    CHECK_IOCTL_BUFFER(data);
-
-    if ( (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *data = htod32( (uint32_t)CHIP_AP_INTERFACE );
-    }
-    else
-    {
-        *data = htod32( (uint32_t)bss_index );
-    }
-
-    if ( (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        if (whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response) != WHD_SUCCESS)
-        {
-            /* Note: We don't need to release the response packet since the iovar failed */
-            wait_for_interface = WHD_TRUE;
-        }
-        else
-        {
-            /* Check if the BSS is already UP, if so return */
-            uint32_t *data2 = (uint32_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, response);
-            *data2 = dtoh32 (*data2);
-            if (*data2 == (uint32_t)BSS_UP)
-            {
-                CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-                whd_wifi_set_ap_is_up(whd_driver, WHD_TRUE);
-                ap->is_waiting_event = WHD_FALSE;
-                return WHD_SUCCESS;
-            }
-            else
-            {
-                CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-            }
-        }
-    }
-
-    if (whd_cdc_send_iovar(prim_ifp, CDC_GET, buffer, &response) != WHD_SUCCESS)
-    {
-        /* Note: We don't need to release the response packet since the iovar failed */
-        wait_for_interface = WHD_TRUE;
-    }
-    else
-    {
-        /* Check if the BSS is already UP, if so return */
-        uint32_t *data2 = (uint32_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, response);
-        *data2 = dtoh32 (*data2);
-        if (*data2 == (uint32_t)BSS_UP)
-        {
-            CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-            whd_wifi_set_ap_is_up(whd_driver, WHD_TRUE);
-            ap->is_waiting_event = WHD_FALSE;
-            return WHD_SUCCESS;
-        }
-        else
-        {
-            CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-        }
-    }
-
-    CHECK_RETURN(cy_rtos_init_semaphore(&ap->whd_wifi_sleep_flag, 1, 0) );
-
-    ap->is_waiting_event = WHD_TRUE;
-    /* Register for interested events */
-    CHECK_RETURN_WITH_SEMAPHORE(whd_management_set_event_handler(ifp, apsta_events, whd_handle_apsta_event,
-                                                                 NULL, &event_entry), &ap->whd_wifi_sleep_flag);
-    if (event_entry >= WHD_EVENT_HANDLER_LIST_SIZE)
-    {
-        WPRINT_WHD_DEBUG( ("Event handler registration failed for AP events in function %s and line %d\n",
-                           __func__, __LINE__) );
-        return WHD_UNFINISHED;
-    }
-    ifp->event_reg_list[WHD_AP_EVENT_ENTRY] = event_entry;
-
-    if (wait_for_interface == WHD_TRUE)
-    {
-        CHECK_RETURN_WITH_SEMAPHORE(cy_rtos_get_semaphore(&ap->whd_wifi_sleep_flag, (uint32_t)10000,
-                                                          WHD_FALSE), &ap->whd_wifi_sleep_flag);
-    }
-    ap->is_waiting_event = WHD_FALSE;
-
-    if (prim_ifp == ifp)
-    {
-        /* Set AP mode */
-        data = (uint32_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, (uint16_t)4);
-        CHECK_IOCTL_BUFFER_WITH_SEMAPHORE(data, &ap->whd_wifi_sleep_flag);
-        *data = 1; /* Turn on AP */
-        CHECK_RETURN_WITH_SEMAPHORE(whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_AP, buffer, 0),
-                                    &ap->whd_wifi_sleep_flag);
-    }
-#if 0
-    if (whd_wifi_set_block_ack_window_size(ifp) != WHD_SUCCESS)
-    {
-        return WHD_SET_BLOCK_ACK_WINDOW_FAIL;
-    }
-#endif
-
-    if (NULL_MAC(ifp->mac_addr.octet) )
-    {
-        /* Change the AP MAC address to be different from STA MAC */
-        if ( (result = whd_wifi_get_mac_address(prim_ifp, &ifp->mac_addr) ) != WHD_SUCCESS )
-        {
-            WPRINT_WHD_INFO ( (" Get STA MAC address failed result=%" PRIu32 "\n", result) );
-            return result;
-        }
-        else
-        {
-            WPRINT_WHD_INFO ( (" Get STA MAC address success\n") );
-        }
-    }
-
-    if ( (result = whd_wifi_set_mac_address(ifp, ifp->mac_addr) ) != WHD_SUCCESS )
-    {
-        WPRINT_WHD_INFO ( (" Set AP MAC address failed result=%" PRIu32 "\n", result) );
-        return result;
-    }
-
-    /* Set the SSID */
-    data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)40, "bsscfg:" IOVAR_STR_SSID);
-    CHECK_IOCTL_BUFFER_WITH_SEMAPHORE(data, &ap->whd_wifi_sleep_flag);
-    if (wlan_chip_id == 4334)
-    {
-        data[0] = htod32( (uint32_t)CHIP_AP_INTERFACE );  /* Set the bsscfg index */
-    }
-    else
-    {
-        data[0] = htod32(bss_index); /* Set the bsscfg index */
-    }
-    data[1] = htod32(ssid->length); /* Set the ssid length */
-    memcpy(&data[2], (uint8_t *)ssid->value, ssid->length);
-    if ( (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        CHECK_RETURN_WITH_SEMAPHORE(whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0), &ap->whd_wifi_sleep_flag);
-    }
-    else
-    {
-        CHECK_RETURN_WITH_SEMAPHORE(whd_cdc_send_iovar(prim_ifp, CDC_SET, buffer, 0), &ap->whd_wifi_sleep_flag);
-    }
-
-    /* Set the channel */
-    data = (uint32_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, (uint16_t)4);
-    CHECK_IOCTL_BUFFER_WITH_SEMAPHORE(data, &ap->whd_wifi_sleep_flag);
-    *data = htod32(channel);
-    CHECK_RETURN_WITH_SEMAPHORE(whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_CHANNEL, buffer, 0),
-                                &ap->whd_wifi_sleep_flag);
-
-    /* Need to decide on the wep configuration */
-#if 0
-    if ( (auth_type == WHD_SECURITY_WEP_PSK) || (auth_type == WHD_SECURITY_WEP_SHARED) )
-    {
-        for (length = 0; length < key_length; length = (uint16_t)(length + 2 + security_key[1]) )
-        {
-            const whd_wep_key_t *in_key = (const whd_wep_key_t *)&security_key[length];
-            wl_wsec_key_t *out_key = (wl_wsec_key_t *)whd_cdc_get_ioctl_buffer(&buffer, sizeof(wl_wsec_key_t) );
-            CHECK_IOCTL_BUFFER_WITH_SEMAPHORE(out_key, &ap->whd_wifi_sleep_flag);
-            memset(out_key, 0, sizeof(wl_wsec_key_t) );
-            out_key->index = in_key->index;
-            out_key->len = in_key->length;
-            memcpy(out_key->data, in_key->data, in_key->length);
-            switch (in_key->length)
-            {
-                case WEP40_KEY_LENGTH:
-                    out_key->algo = (uint32_t)CRYPTO_ALGO_WEP1;
-                    break;
-                case WEP104_KEY_LENGTH:
-                    out_key->algo = (uint32_t)CRYPTO_ALGO_WEP128;
-                    break;
-                default:
-                    whd_buffer_release(whd_driver, buffer, WHD_NETWORK_TX);
-                    return WHD_INVALID_KEY;
-            }
-            /* Set the first entry as primary key by default */
-
-            if (length == 0)
-            {
-                out_key->flags |= WL_PRIMARY_KEY;
-            }
-            out_key->index = htod32(out_key->index);
-            out_key->len = htod32(out_key->len);
-            out_key->algo = htod32(out_key->algo);
-            out_key->flags = htod32(out_key->flags);
-            CHECK_RETURN_WITH_SEMAPHORE(whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_KEY, buffer,
-                                                           NULL), &ap->whd_wifi_sleep_flag);
-        }
-
-        /* Set authentication type */
-        auth = (uint32_t *)whd_cdc_get_ioctl_buffer(&buffer, (uint16_t)4);
-        CHECK_IOCTL_BUFFER_WITH_SEMAPHORE(auth, &ap->whd_wifi_sleep_flag);
-        if (auth_type == WHD_SECURITY_WEP_SHARED)
-        {
-            *auth = WEP_SHARED_KEY_AUTHENTICATION; /* 1 = Shared Key authentication */
-        }
-        else
-        {
-            *auth = WEP_OPEN_SYSTEM_AUTHENTICATION; /*  0 = Open System authentication */
-        }
-        CHECK_RETURN_WITH_SEMAPHORE(whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_AUTH, buffer,
-                                                       0), &ap->whd_wifi_sleep_flag);
-    }
-#endif
-
-    data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)8, "bsscfg:" IOVAR_STR_WSEC);
-    CHECK_IOCTL_BUFFER_WITH_SEMAPHORE(data, &ap->whd_wifi_sleep_flag);
-    if ( (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        data[0] = htod32( (uint32_t)CHIP_AP_INTERFACE );
-    }
-    else
-    {
-        data[0] = htod32(bss_index);
-    }
-    if ( (auth_type & WPS_ENABLED) != 0 )
-    {
-        data[1] = htod32( (uint32_t)( (auth_type & (~WPS_ENABLED) ) | SES_OW_ENABLED ) );
-    }
-    else
-    {
-        data[1] = htod32( (uint32_t)auth_type );
-    }
-    CHECK_RETURN_WITH_SEMAPHORE(whd_cdc_send_iovar(prim_ifp, CDC_SET, buffer, 0), &ap->whd_wifi_sleep_flag);
-    if (wlan_chip_id == 4334)
-    {
-        if (auth_type != WHD_SECURITY_OPEN)
-        {
-            wsec_pmk_t *psk;
-
-            /* Set the wpa auth */
-            data =
-                (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)8, "bsscfg:" IOVAR_STR_WPA_AUTH);
-            CHECK_IOCTL_BUFFER_WITH_SEMAPHORE(data, &ap->whd_wifi_sleep_flag);
-            data[0] = htod32( (uint32_t)CHIP_AP_INTERFACE );
-            data[1] = htod32( (uint32_t)(auth_type == WHD_SECURITY_WPA_TKIP_PSK) ?
-                              (WPA_AUTH_PSK) : (WPA2_AUTH_PSK | WPA_AUTH_PSK) );
-            CHECK_RETURN_WITH_SEMAPHORE(whd_cdc_send_iovar(prim_ifp, CDC_SET, buffer, 0), &ap->whd_wifi_sleep_flag);
-
-            /* Set the passphrase */
-            psk = (wsec_pmk_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, sizeof(wsec_pmk_t) );
-            CHECK_IOCTL_BUFFER_WITH_SEMAPHORE(psk, &ap->whd_wifi_sleep_flag);
-            memcpy(psk->key, security_key, key_length);
-            psk->key_len = htod16(key_length);
-            psk->flags = htod16( (uint16_t)WSEC_PASSPHRASE );
-            CHECK_RETURN(cy_rtos_delay_milliseconds(1) );
-            /* Delay required to allow radio firmware to be ready to receive PMK and avoid intermittent failure */
-            CHECK_RETURN_WITH_SEMAPHORE(whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_WSEC_PMK, buffer, 0),
-                                        &ap->whd_wifi_sleep_flag);
-        }
-    }
-    else
-    {
-        if ( (auth_type != WHD_SECURITY_OPEN) && (auth_type != WHD_SECURITY_WEP_PSK) &&
-             (auth_type != WHD_SECURITY_WEP_SHARED) )
-        {
-            wsec_pmk_t *psk;
-
-            /* Set the wpa auth */
-            data =
-                (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)8, "bsscfg:" IOVAR_STR_WPA_AUTH);
-            CHECK_IOCTL_BUFFER_WITH_SEMAPHORE(data, &ap->whd_wifi_sleep_flag);
-            if ( (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-            {
-                data[0] = htod32( (uint32_t)CHIP_AP_INTERFACE );
-            }
-            else
-            {
-                data[0] = htod32(bss_index);
-            }
-            data[1] =
-                htod32( (uint32_t)(auth_type ==
-                                   WHD_SECURITY_WPA_TKIP_PSK) ? (WPA_AUTH_PSK) : (WPA2_AUTH_PSK | WPA_AUTH_PSK) );
-            if ( (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-            {
-                CHECK_RETURN_WITH_SEMAPHORE(whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0), &ap->whd_wifi_sleep_flag);
-            }
-            else
-            {
-                CHECK_RETURN_WITH_SEMAPHORE(whd_cdc_send_iovar(prim_ifp, CDC_SET, buffer, 0),
-                                            &ap->whd_wifi_sleep_flag);
-            }
-
-            /* Set the passphrase */
-            psk = (wsec_pmk_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, sizeof(wsec_pmk_t) );
-            CHECK_IOCTL_BUFFER_WITH_SEMAPHORE(psk, &ap->whd_wifi_sleep_flag);
-            memcpy(psk->key, security_key, key_length);
-            psk->key_len = htod16(key_length);
-            psk->flags = htod16( (uint16_t)WSEC_PASSPHRASE );
-            CHECK_RETURN(cy_rtos_delay_milliseconds(1) );
-            /* Delay required to allow radio firmware to be ready to receive PMK and avoid intermittent failure */
-            CHECK_RETURN_WITH_SEMAPHORE(whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_WSEC_PMK, buffer,
-                                                           0), &ap->whd_wifi_sleep_flag);
-        }
-    }
-
-    /* Set the multicast transmission rate to 11 Mbps rather than the default 1 Mbps */
-    data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)4, IOVAR_STR_2G_MULTICAST_RATE);
-    CHECK_IOCTL_BUFFER(data);
-    *data = htod32( (uint32_t)RATE_SETTING_11_MBPS );
-    if ( (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        result = whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL);
-        whd_assert("start_ap: Failed to set multicast transmission rate\r\n", result == WHD_SUCCESS);
-    }
-    else
-    {
-        CHECK_RETURN_WITH_SEMAPHORE(whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL), &ap->whd_wifi_sleep_flag);
-    }
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_start_ap(whd_interface_t ifp)
-{
-    whd_buffer_t buffer;
-    uint32_t *data;
-    uint16_t wlan_chip_id;
-    whd_ap_int_info_t *ap;
-    whd_interface_t prim_ifp;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    prim_ifp = whd_get_primary_interface(whd_driver);
-
-    if (prim_ifp == NULL)
-    {
-        return WHD_UNKNOWN_INTERFACE;
-    }
-
-    ap = &whd_driver->ap_info;
-    /* Get the Chip Number */
-    wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-
-    ap->is_waiting_event = WHD_TRUE;
-    data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)8, IOVAR_STR_BSS);
-    CHECK_IOCTL_BUFFER_WITH_SEMAPHORE(data, &ap->whd_wifi_sleep_flag);
-
-    if ( (wlan_chip_id == 43012) || (wlan_chip_id == 43362) || (wlan_chip_id == 43455) || (wlan_chip_id == 43430) )
-    {
-        data[0] = htod32(ifp->bsscfgidx);
-    }
-    else
-    {
-        data[0] = htod32( (uint32_t)CHIP_AP_INTERFACE );
-    }
-
-    data[1] = htod32( (uint32_t)BSS_UP );
-    CHECK_RETURN_WITH_SEMAPHORE(whd_cdc_send_iovar(prim_ifp, CDC_SET, buffer, 0), &ap->whd_wifi_sleep_flag);
-
-    /* Wait until AP is brought up */
-    CHECK_RETURN_WITH_SEMAPHORE(cy_rtos_get_semaphore(&ap->whd_wifi_sleep_flag, (uint32_t)10000,
-                                                      WHD_FALSE), &ap->whd_wifi_sleep_flag);
-    ap->is_waiting_event = WHD_FALSE;
-
-    whd_wifi_set_ap_is_up(whd_driver, WHD_TRUE);
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_stop_ap(whd_interface_t ifp)
-{
-    uint32_t *data;
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    whd_result_t result;
-    whd_result_t result2;
-    whd_interface_t prim_ifp;
-    whd_driver_t whd_driver;
-    whd_ap_int_info_t *ap;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    ap = &whd_driver->ap_info;
-
-    prim_ifp = whd_get_primary_interface(whd_driver);
-
-    if (prim_ifp == NULL)
-    {
-        return WHD_UNKNOWN_INTERFACE;
-    }
-
-    /* Get Chip Number */
-    uint16_t wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-    if ( (wlan_chip_id == 43012) || (wlan_chip_id == 43362) || (wlan_chip_id == 43455) || (wlan_chip_id == 43430) )
-    {
-        /* Query bss state (does it exist? if so is it UP?) */
-        data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)4, IOVAR_STR_BSS);
-        CHECK_IOCTL_BUFFER(data);
-        *data = ifp->bsscfgidx;
-    }
-    else
-    {
-        /* Query bss state (does it exist? if so is it UP?) */
-        data = whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)4, IOVAR_STR_BSS);
-        CHECK_IOCTL_BUFFER(data);
-        *data = htod32( (uint32_t)CHIP_AP_INTERFACE );
-    }
-    result = whd_cdc_send_iovar(prim_ifp, CDC_GET, buffer, &response);
-    if (result == WHD_WLAN_NOTFOUND)
-    {
-        /* AP interface does not exist - i.e. it is down */
-        whd_wifi_set_ap_is_up(whd_driver, WHD_FALSE);
-        return WHD_SUCCESS;
-    }
-
-    CHECK_RETURN(result);
-
-    *data = dtoh32(*(uint32_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, response) );
-    if (data[0] != (uint32_t)BSS_UP)
-    {
-        /* AP interface indicates it is not up - i.e. it is down */
-        CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-        whd_wifi_set_ap_is_up(whd_driver, WHD_FALSE);
-        return WHD_SUCCESS;
-    }
-
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-
-    ap->is_waiting_event = WHD_TRUE;
-    /* set BSS down */
-    if ( (wlan_chip_id == 43012) || (wlan_chip_id == 43362) || (wlan_chip_id == 43455) || (wlan_chip_id == 43430) )
-    {
-        data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)8, IOVAR_STR_BSS);
-        CHECK_IOCTL_BUFFER(data);
-        data[0] = htod32(ifp->bsscfgidx);
-        data[1] = htod32( (uint32_t)BSS_DOWN );
-        CHECK_RETURN(whd_cdc_send_iovar(prim_ifp, CDC_SET, buffer, 0) );
-    }
-    else
-    {
-        data = whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)8, IOVAR_STR_BSS);
-        CHECK_IOCTL_BUFFER(data);
-        data[0] = htod32( (uint32_t)CHIP_AP_INTERFACE );
-        data[1] = htod32( (uint32_t)BSS_DOWN );
-        CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0) );
-    }
-    if ( (wlan_chip_id != 43430) && (wlan_chip_id != 43455) )
-    {
-        result = cy_rtos_get_semaphore(&ap->whd_wifi_sleep_flag, (uint32_t)10000, WHD_FALSE);
-        if (result != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("Error getting a semaphore, %s failed at %d \n", __func__, __LINE__) );
-            return result;
-        }
-    }
-    /* Disable AP mode only if AP is on primary interface */
-    if (prim_ifp == ifp)
-    {
-        data = (uint32_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, (uint16_t)4);
-        CHECK_IOCTL_BUFFER(data);
-        *data = 0;
-        CHECK_RETURN(whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_AP, buffer, 0) );
-    }
-    /* Wait until AP is brought down */
-    result = cy_rtos_get_semaphore(&ap->whd_wifi_sleep_flag, (uint32_t)10000, WHD_FALSE);
-    ap->is_waiting_event = WHD_FALSE;
-    result2 = cy_rtos_deinit_semaphore(&ap->whd_wifi_sleep_flag);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Error getting a semaphore, %s failed at %d \n", __func__, __LINE__) );
-        return result;
-    }
-    if (result2 != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Error deleting semaphore, %s failed at %d \n", __func__, __LINE__) );
-        return result2;
-    }
-
-    CHECK_RETURN(whd_wifi_deregister_event_handler(ifp, ifp->event_reg_list[WHD_AP_EVENT_ENTRY]) );
-    ifp->event_reg_list[WHD_AP_EVENT_ENTRY] = WHD_EVENT_NOT_REGISTERED;
-    whd_wifi_set_ap_is_up(whd_driver, WHD_FALSE);
-
-    ifp->role = WHD_INVALID_ROLE;
-    return WHD_SUCCESS;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_buffer_api.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_buffer_api.c
deleted file mode 100644
index 966cf51968..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_buffer_api.c
+++ /dev/null
@@ -1,220 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Provides generic APSTA functionality that chip specific files use
- */
-
-#include "whd_debug.h"
-#include "whd_buffer_api.h"
-
-/******************************************************
-** @cond               Constants
-*******************************************************/
-
-/******************************************************
-**                   Enumerations
-*******************************************************/
-
-/******************************************************
-**               Function Declarations
-*******************************************************/
-
-/******************************************************
- *        Variables Definitions
- *****************************************************/
-
-/******************************************************
-*               Function Definitions
-******************************************************/
-/** Allocates a packet buffer
- *
- *  Implemented in the port layer interface which is specific to the
- *  buffering scheme in use.
- *  Attempts to allocate a packet buffer of the size requested. It can do this
- *  by allocating a pre-existing packet from a pool, using a static buffer,
- *  or by dynamically allocating memory. The method of allocation does not
- *  concern WHD, however it must match the way the network stack expects packet
- *  buffers to be allocated.
- *
- *  @param buffer    : A pointer which receives the allocated packet buffer handle
- *  @param direction : Indicates transmit/receive direction that the packet buffer is
- *                    used for. This may be needed if tx/rx pools are separate.
- *  @param size      : The number of bytes to allocate.
- *  @param wait      : Whether to wait for a packet buffer to be available
- *
- *  @return          : WHD_SUCCESS or error code
- *
- */
-whd_result_t whd_host_buffer_get(whd_driver_t whd_driver, whd_buffer_t *buffer, whd_buffer_dir_t direction,
-                                 uint16_t size, uint32_t wait)
-{
-    if (whd_driver->buffer_if->whd_host_buffer_get)
-    {
-        return whd_driver->buffer_if->whd_host_buffer_get(buffer, direction, size, wait);
-    }
-    else
-    {
-        WPRINT_WHD_INFO( ("Function pointers not provided .\n") );
-    }
-
-    return WHD_WLAN_NOFUNCTION;
-}
-
-/** Releases a packet buffer
- *
- *  Implemented in the port layer interface, which will be specific to the
- *  buffering scheme in use.
- *  This function is used by WHD to indicate that it no longer requires
- *  a packet buffer. The buffer can then be released back into a pool for
- *  reuse, or the dynamically allocated memory can be freed, according to
- *  how the packet was allocated.
- *  Returns void since WHD cannot do anything about failures
- *
- *  @param buffer    : The handle of the packet buffer to be released
- *  @param direction : Indicates transmit/receive direction that the packet buffer has
- *                     been used for. This might be needed if tx/rx pools are separate.
- *
- */
-whd_result_t whd_buffer_release(whd_driver_t whd_driver, whd_buffer_t buffer, whd_buffer_dir_t direction)
-{
-    if (whd_driver->buffer_if->whd_buffer_release)
-    {
-        whd_driver->buffer_if->whd_buffer_release(buffer, direction);
-        return WHD_SUCCESS;
-    }
-    else
-    {
-        WPRINT_WHD_INFO( ("Function pointers not provided .\n") );
-    }
-
-    return WHD_WLAN_NOFUNCTION;
-}
-
-/** Retrieves the current pointer of a packet buffer
- *
- *  Implemented in the port layer interface which is specific to the
- *  buffering scheme in use.
- *  Since packet buffers usually need to be created with space at the
- *  front for additional headers, this function allows WHD to get
- *  the current 'front' location pointer.
- *
- *  @param buffer : The handle of the packet buffer whose pointer is to be retrieved
- *
- *  @return       : The packet buffer's current pointer.
- */
-uint8_t *whd_buffer_get_current_piece_data_pointer(whd_driver_t whd_driver, whd_buffer_t buffer)
-{
-    if (whd_driver->buffer_if->whd_buffer_get_current_piece_data_pointer)
-    {
-        return whd_driver->buffer_if->whd_buffer_get_current_piece_data_pointer(buffer);
-    }
-    else
-    {
-        WPRINT_WHD_INFO( ("Function pointers not provided .\n") );
-    }
-
-    return NULL;
-}
-
-/** Retrieves the size of a packet buffer
- *
- *  Implemented in the port layer interface which is specific to the
- *  buffering scheme in use.
- *  Since packet buffers usually need to be created with space at the
- *  front for additional headers, the memory block used to contain a packet buffer
- *  will often be larger than the current size of the packet buffer data.
- *  This function allows WHD to retrieve the current size of a packet buffer's data.
- *
- *  @param buffer : The handle of the packet buffer whose size is to be retrieved
- *
- *  @return       :  The size of the packet buffer.
- */
-uint16_t whd_buffer_get_current_piece_size(whd_driver_t whd_driver, whd_buffer_t buffer)
-{
-    if (whd_driver->buffer_if->whd_buffer_get_current_piece_size)
-    {
-        return whd_driver->buffer_if->whd_buffer_get_current_piece_size(buffer);
-    }
-    else
-    {
-        WPRINT_WHD_INFO( ("Function pointers not provided .\n") );
-    }
-
-    return 0;
-}
-
-/** Sets the current size of a WHD packet
- *
- *
- *  Implemented in the port layer interface which is specific to the
- *  buffering scheme in use.
- *  This function sets the current length of a WHD packet buffer
- *
- *  @param buffer : The packet to be modified
- *  @param size   : The new size of the packet buffer
- *
- *  @return       : WHD_SUCCESS or error code
- */
-whd_result_t whd_buffer_set_size(whd_driver_t whd_driver, whd_buffer_t buffer, uint16_t size)
-{
-    if (whd_driver->buffer_if->whd_buffer_set_size)
-    {
-        return whd_driver->buffer_if->whd_buffer_set_size(buffer, size);
-    }
-    else
-    {
-        WPRINT_WHD_INFO( ("Function pointers not provided .\n") );
-    }
-
-    return WHD_WLAN_NOFUNCTION;
-}
-
-/** Moves the current pointer of a packet buffer
- *
- *  Implemented in the port layer interface which is specific to the buffering scheme in use.
- *
- *  Since packet buffers usually need to be created with space at the front for additional headers,
- *  this function allows WHD to move  the current 'front' location pointer so that it has space to
- *  add headers to transmit packets, and so that the network stack does not see the internal WHD
- *  headers on received packets.
- *
- *  @param buffer            : A pointer to the handle of the current packet buffer for which the
- *                             current pointer will be moved. On return this may contain a pointer
- *                             to a newly allocated packet buffer which has been daisy chained to
- *                             the front of the given one. This would be the case if the given packet
- *                             buffer  didn't have enough space at the front.
- *  @param add_remove_amount : This is the number of bytes to move the current pointer of the packet
- *                             buffer - a negative value increases the space for headers at the front
- *                             of the packet, a positive value decreases the space.
- *
- *  @return                  : WHD_SUCCESS or error code
- */
-whd_result_t whd_buffer_add_remove_at_front(whd_driver_t whd_driver, whd_buffer_t *buffer, int32_t add_remove_amount)
-{
-    if (whd_driver->buffer_if->whd_buffer_add_remove_at_front)
-    {
-        return whd_driver->buffer_if->whd_buffer_add_remove_at_front(buffer, add_remove_amount);
-    }
-    else
-    {
-        WPRINT_WHD_INFO( ("Function pointers not provided .\n") );
-    }
-
-    return WHD_WLAN_NOFUNCTION;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_cdc_bdc.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_cdc_bdc.c
deleted file mode 100644
index 9a4e11b488..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_cdc_bdc.c
+++ /dev/null
@@ -1,723 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <limits.h>
-#include "whd_int.h"
-#include "whd_cdc_bdc.h"
-#include "whd_events_int.h"
-#include "cyabs_rtos.h"
-#include "whd_network_types.h"
-#include "whd_types_int.h"
-#include "whd_wlioctl.h"
-#include "whd_thread_internal.h"
-#include "whd_buffer_api.h"
-#include "whd_network_if.h"
-
-/******************************************************
-*        Constants
-******************************************************/
-
-#define BDC_PROTO_VER                  (2)      /** Version number of BDC header */
-#define BDC_FLAG_VER_SHIFT             (4)      /** Number of bits to shift BDC version number in the flags field */
-#define BDC_FLAG2_IF_MASK           (0x0f)
-
-#define ETHER_TYPE_BRCM           (0x886C)      /** Broadcom Ethertype for identifying event packets - Copied from DHD include/proto/ethernet.h */
-#define BRCM_OUI            "\x00\x10\x18"      /** Broadcom OUI (Organizationally Unique Identifier): Used in the proprietary(221) IE (Information Element) in all Broadcom devices */
-
-/* QoS related definitions (type of service) */
-#define IPV4_DSCP_OFFSET              (15)      /** Offset for finding the DSCP field in an IPv4 header */
-
-#define IOCTL_OFFSET (sizeof(whd_buffer_header_t) + 12 + 16)
-#define WHD_IOCTL_PACKET_TIMEOUT      (0xFFFFFFFF)
-#define WHD_IOCTL_TIMEOUT_MS         (5000)     /** Need to give enough time for coming out of Deep sleep (was 400) */
-#define WHD_IOCTL_MAX_TX_PKT_LEN     (1500)
-
-/******************************************************
-*             Macros
-******************************************************/
-
-/******************************************************
-*             Local Structures
-******************************************************/
-
-/******************************************************
-*             Static Variables
-******************************************************/
-
-static const uint8_t dscp_to_wmm_qos[] =
-{ 0, 0, 0, 0, 0, 0, 0, 0,                                       /* 0  - 7 */
-  1, 1, 1, 1, 1, 1, 1,                                          /* 8  - 14 */
-  1, 1, 1, 1, 1, 1, 1,                                          /* 15 - 21 */
-  1, 1, 0, 0, 0, 0, 0,                                          /* 22 - 28 */
-  0, 0, 0, 5, 5, 5, 5,                                          /* 29 - 35 */
-  5, 5, 5, 5, 5, 5, 5,                                          /* 36 - 42 */
-  5, 5, 5, 5, 5, 7, 7,                                          /* 43 - 49 */
-  7, 7, 7, 7, 7, 7, 7,                                          /* 50 - 56 */
-  7, 7, 7, 7, 7, 7, 7,                                          /* 57 - 63 */
-};
-
-/******************************************************
-*             Static Function Prototypes
-******************************************************/
-
-static uint8_t         whd_map_dscp_to_priority(whd_driver_t whd_driver, uint8_t dscp_val);
-
-/******************************************************
-*             Static Functions
-******************************************************/
-
-/** Map a DSCP value from an IP header to a WMM QoS priority
- *
- * @param dscp_val : DSCP value from IP header
- *
- * @return wmm_qos : WMM priority
- *
- */
-static uint8_t whd_map_dscp_to_priority(whd_driver_t whd_driver, uint8_t val)
-{
-    uint8_t dscp_val = (uint8_t)(val >> 2); /* DSCP field is the high 6 bits of the second byte of an IPv4 header */
-
-    return dscp_to_wmm_qos[dscp_val];
-}
-
-void whd_cdc_bdc_info_deinit(whd_driver_t whd_driver)
-{
-    whd_cdc_bdc_info_t *cdc_bdc_info = &whd_driver->cdc_bdc_info;
-
-    /* Delete the sleep mutex */
-    (void)cy_rtos_deinit_semaphore(&cdc_bdc_info->ioctl_sleep);
-
-    /* Delete the queue mutex.  */
-    (void)cy_rtos_deinit_semaphore(&cdc_bdc_info->ioctl_mutex);
-
-    /* Delete the event list management mutex */
-    (void)cy_rtos_deinit_semaphore(&cdc_bdc_info->event_list_mutex);
-}
-
-whd_result_t whd_cdc_bdc_info_init(whd_driver_t whd_driver)
-{
-    whd_cdc_bdc_info_t *cdc_bdc_info = &whd_driver->cdc_bdc_info;
-
-    /* Create the mutex protecting the packet send queue */
-    if (cy_rtos_init_semaphore(&cdc_bdc_info->ioctl_mutex, 1, 0) != WHD_SUCCESS)
-    {
-        return WHD_SEMAPHORE_ERROR;
-    }
-    if (cy_rtos_set_semaphore(&cdc_bdc_info->ioctl_mutex, WHD_FALSE) != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Error setting semaphore in %s at %d \n", __func__, __LINE__) );
-        return WHD_SEMAPHORE_ERROR;
-    }
-
-    /* Create the event flag which signals the whd thread needs to wake up */
-    if (cy_rtos_init_semaphore(&cdc_bdc_info->ioctl_sleep, 1, 0) != WHD_SUCCESS)
-    {
-        cy_rtos_deinit_semaphore(&cdc_bdc_info->ioctl_mutex);
-        return WHD_SEMAPHORE_ERROR;
-    }
-
-    /* Create semaphore to protect event list management */
-    if (cy_rtos_init_semaphore(&cdc_bdc_info->event_list_mutex, 1, 0) != WHD_SUCCESS)
-    {
-        cy_rtos_deinit_semaphore(&cdc_bdc_info->ioctl_sleep);
-        cy_rtos_deinit_semaphore(&cdc_bdc_info->ioctl_mutex);
-        return WHD_SEMAPHORE_ERROR;
-    }
-    if (cy_rtos_set_semaphore(&cdc_bdc_info->event_list_mutex, WHD_FALSE) != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Error setting semaphore in %s at %d \n", __func__, __LINE__) );
-        return WHD_SEMAPHORE_ERROR;
-    }
-
-    /* Initialise the list of event handler functions */
-    memset(cdc_bdc_info->whd_event_list, 0, sizeof(cdc_bdc_info->whd_event_list) );
-
-    return WHD_SUCCESS;
-}
-
-/** Sends an IOCTL command
- *
- *  Sends a I/O Control command to the Broadcom 802.11 device.
- *  The data which is set or retrieved must be in a format structure which is appropriate for the particular
- *  I/O control being sent. These structures can only be found in the DHD source code such as wl/exe/wlu.c.
- *  The I/O control will always respond with a packet buffer which may contain data in a format specific to
- *  the I/O control being used.
- *
- *  @Note: The caller is responsible for releasing the response buffer.
- *  @Note: The function blocks until the IOCTL has completed
- *  @Note: Only one IOCTL may happen simultaneously.
- *
- *  @param type       : CDC_SET or CDC_GET - indicating whether to set or get the I/O control
- *  @param send_buffer_hnd : A handle for a packet buffer containing the data value to be sent.
- *  @param response_buffer_hnd : A pointer which will receive the handle for the packet buffer
- *                               containing the response data value received.
- *  @param interface : Which interface to send the iovar to (WHD_STA_INTERFACE or WHD_AP_INTERFACE)
- *
- *  @return    WHD result code
- */
-whd_result_t whd_cdc_send_ioctl(whd_interface_t ifp, cdc_command_type_t type, uint32_t command,
-                                whd_buffer_t send_buffer_hnd,
-                                whd_buffer_t *response_buffer_hnd)
-{
-
-    uint32_t data_length;
-    uint32_t flags;
-    uint32_t requested_ioctl_id;
-    whd_result_t retval;
-    control_header_t *send_packet;
-    cdc_header_t *cdc_header;
-    uint32_t bss_index = ifp->bsscfgidx;
-    whd_driver_t whd_driver = ifp->whd_driver;
-    whd_cdc_bdc_info_t *cdc_bdc_info = &whd_driver->cdc_bdc_info;
-
-    /* Validate the command value */
-    if (command > INT_MAX)
-    {
-        WPRINT_WHD_ERROR( ("The ioctl command value is invalid\n") );
-        return WHD_BADARG;
-    }
-
-    /* Acquire mutex which prevents multiple simultaneous IOCTLs */
-    retval = cy_rtos_get_semaphore(&cdc_bdc_info->ioctl_mutex, CY_RTOS_NEVER_TIMEOUT, WHD_FALSE);
-    if (retval != WHD_SUCCESS)
-    {
-        CHECK_RETURN(whd_buffer_release(whd_driver, send_buffer_hnd, WHD_NETWORK_TX) );
-        return retval;
-    }
-
-    /* Count request ioctl ID after acquiring ioctl mutex */
-    requested_ioctl_id = (uint32_t)(++cdc_bdc_info->requested_ioctl_id);
-
-    /* Get the data length and cast packet to a CDC BUS header */
-    data_length =
-        (uint32_t)(whd_buffer_get_current_piece_size(whd_driver,
-                                                     send_buffer_hnd) - sizeof(bus_common_header_t) -
-                   sizeof(cdc_header_t) );
-
-    send_packet = (control_header_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, send_buffer_hnd);
-
-    WHD_IOCTL_LOG_ADD(ifp->whd_driver, command, send_buffer_hnd);
-
-    /* Check if IOCTL is actually IOVAR */
-    if ( (command == WLC_SET_VAR) || (command == WLC_GET_VAR) )
-    {
-        uint8_t *data = (uint8_t *)DATA_AFTER_HEADER(send_packet);
-        uint8_t *ptr = data;
-
-        /* Calculate the offset added to compensate for IOVAR string creating unaligned data section */
-        while (*ptr == 0)
-        {
-            ptr++;
-        }
-        if (data != ptr)
-        {
-            data_length -= (uint32_t)(ptr - data);
-            memmove(data, ptr, data_length);
-            CHECK_RETURN(whd_buffer_set_size(whd_driver, send_buffer_hnd,
-                                             (uint16_t)(data_length + sizeof(bus_common_header_t) +
-                                                        sizeof(cdc_header_t) ) ) );
-        }
-    }
-
-    /* Prepare the CDC header */
-    send_packet->cdc_header.cmd    = htod32(command);
-    send_packet->cdc_header.len    = htod32(data_length);
-
-    send_packet->cdc_header.flags  = ( (requested_ioctl_id << CDCF_IOC_ID_SHIFT)
-                                       & CDCF_IOC_ID_MASK ) | type | bss_index << CDCF_IOC_IF_SHIFT;
-    send_packet->cdc_header.flags = htod32(send_packet->cdc_header.flags);
-
-    send_packet->cdc_header.status = 0;
-
-    /* Manufacturing test can receive big buffers, but sending big buffers causes a wlan firmware error */
-    /* Even though data portion needs to be truncated, cdc_header should have the actual length of the ioctl packet */
-    if (whd_buffer_get_current_piece_size(whd_driver, send_buffer_hnd) > WHD_IOCTL_MAX_TX_PKT_LEN)
-    {
-        CHECK_RETURN(whd_buffer_set_size(whd_driver, send_buffer_hnd, WHD_IOCTL_MAX_TX_PKT_LEN) );
-    }
-
-    /* Store the length of the data and the IO control header and pass "down" */
-    whd_send_to_bus(whd_driver, send_buffer_hnd, CONTROL_HEADER);
-
-
-    /* Wait till response has been received  */
-    retval = cy_rtos_get_semaphore(&cdc_bdc_info->ioctl_sleep, (uint32_t)WHD_IOCTL_TIMEOUT_MS, WHD_FALSE);
-    if (retval != WHD_SUCCESS)
-    {
-        /* Release the mutex since ioctl response will no longer be referenced. */
-        CHECK_RETURN(cy_rtos_set_semaphore(&cdc_bdc_info->ioctl_mutex, WHD_FALSE) );
-        return retval;
-    }
-
-    cdc_header    = (cdc_header_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, cdc_bdc_info->ioctl_response);
-    flags         = dtoh32(cdc_header->flags);
-
-    retval = (whd_result_t)(WLAN_ENUM_OFFSET -  dtoh32(cdc_header->status) );
-
-    /* Check if the caller wants the response */
-    if (response_buffer_hnd != NULL)
-    {
-        *response_buffer_hnd = cdc_bdc_info->ioctl_response;
-        CHECK_RETURN(whd_buffer_add_remove_at_front(whd_driver, response_buffer_hnd, sizeof(cdc_header_t) ) );
-    }
-    else
-    {
-        CHECK_RETURN(whd_buffer_release(whd_driver, cdc_bdc_info->ioctl_response, WHD_NETWORK_RX) );
-    }
-
-    cdc_bdc_info->ioctl_response = NULL;
-
-    /* Release the mutex since ioctl response will no longer be referenced. */
-    CHECK_RETURN(cy_rtos_set_semaphore(&cdc_bdc_info->ioctl_mutex, WHD_FALSE) );
-
-    /* Check whether the IOCTL response indicates it failed. */
-    if ( (flags & CDCF_IOC_ERROR) != 0 )
-    {
-        if (response_buffer_hnd != NULL)
-        {
-            CHECK_RETURN(whd_buffer_release(whd_driver, *response_buffer_hnd, WHD_NETWORK_RX) );
-            *response_buffer_hnd = NULL;
-        }
-        whd_minor_assert("IOCTL failed\n", 0 != 0);
-        return retval;
-    }
-
-    return WHD_SUCCESS;
-}
-
-/** Sets/Gets an I/O Variable (IOVar)
- *
- *  This function either sets or retrieves the value of an I/O variable from the Broadcom 802.11 device.
- *  The data which is set or retrieved must be in a format structure which is appropriate for the particular
- *  I/O variable being accessed. These structures can only be found in the DHD source code such as wl/exe/wlu.c.
- *
- *  @Note: The function blocks until the I/O variable read/write has completed
- *
- * @param type       : CDC_SET or CDC_GET - indicating whether to set or get the I/O variable value
- * @param send_buffer_hnd : A handle for a packet buffer containing the data value to be sent.
- * @param response_buffer_hnd : A pointer which will receive the handle for the packet buffer
- *                              containing the response data value received.
- * @param interface : Which interface to send the iovar to (AP or STA)
- *
- * @return    WHD result code
- */
-whd_result_t whd_cdc_send_iovar(whd_interface_t ifp, cdc_command_type_t type,
-                                whd_buffer_t send_buffer_hnd,
-                                whd_buffer_t *response_buffer_hnd)
-{
-    if (type == CDC_SET)
-    {
-        return whd_cdc_send_ioctl(ifp, CDC_SET, (uint32_t)WLC_SET_VAR, send_buffer_hnd, response_buffer_hnd);
-    }
-    else
-    {
-        return whd_cdc_send_ioctl(ifp, CDC_GET, (uint32_t)WLC_GET_VAR, send_buffer_hnd, response_buffer_hnd);
-    }
-}
-
-/** A helper function to easily acquire and initialise a buffer destined for use as an iovar
- *
- * @param  buffer      : A pointer to a whd_buffer_t object where the created buffer will be stored
- * @param  data_length : The length of space reserved for user data
- * @param  name        : The name of the iovar
- *
- * @return A pointer to the start of user data with data_length space available
- */
-void *whd_cdc_get_iovar_buffer(whd_driver_t whd_driver,
-                               whd_buffer_t *buffer,
-                               uint16_t data_length,
-                               const char *name)
-{
-    uint32_t name_length = (uint32_t)strlen(name) + 1;    /* + 1 for terminating null */
-    uint32_t name_length_alignment_offset = (64 - name_length) % sizeof(uint32_t);
-
-    if (whd_host_buffer_get(whd_driver, buffer, WHD_NETWORK_TX,
-                            (unsigned short)(IOCTL_OFFSET + data_length + name_length + name_length_alignment_offset),
-                            (unsigned long)WHD_IOCTL_PACKET_TIMEOUT) == WHD_SUCCESS)
-    {
-        uint8_t *data = (whd_buffer_get_current_piece_data_pointer(whd_driver, *buffer) + IOCTL_OFFSET);
-        memset(data, 0, name_length_alignment_offset);
-        memcpy(data + name_length_alignment_offset, name, name_length);
-        return (data + name_length + name_length_alignment_offset);
-    }
-    else
-    {
-        WPRINT_WHD_ERROR( ("Error - failed to allocate a packet buffer for IOVAR\n") );
-        return NULL;
-    }
-}
-
-/** Sends a data packet.
- *
- *  This function should be called by the bottom of the network stack in order for it
- *  to send an ethernet frame.
- *  The function prepends a BDC header, before sending to @ref whd_send_to_bus where
- *  the BUS header will be added
- *
- * @param buffer  : The ethernet packet buffer to be sent
- * @param interface : the interface over which to send the packet (AP or STA)
- *
- */
-/* Returns immediately - whd_buffer_tx_completed will be called once the transmission has finished */
-void whd_network_send_ethernet_data(whd_interface_t ifp, whd_buffer_t buffer)
-{
-    data_header_t *packet;
-    whd_result_t result;
-    uint8_t *dscp = NULL;
-    uint8_t priority = 0;
-    uint8_t whd_tos_map[8] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 };
-    whd_driver_t whd_driver = ifp->whd_driver;
-    ethernet_header_t *ethernet_header = (ethernet_header_t *)whd_buffer_get_current_piece_data_pointer(
-        whd_driver, buffer);
-    uint16_t ether_type;
-
-    ether_type = ntoh16(ethernet_header->ethertype);
-    if ( (ether_type == WHD_ETHERTYPE_IPv4) || (ether_type == WHD_ETHERTYPE_DOT1AS) )
-    {
-        dscp = (uint8_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, buffer) + IPV4_DSCP_OFFSET;
-    }
-
-    WPRINT_WHD_DATA_LOG( ("Wcd:> DATA pkt 0x%08lX len %d\n", (unsigned long)buffer,
-                          (int)whd_buffer_get_current_piece_size(whd_driver, buffer) ) );
-
-
-    /* Add link space at front of packet */
-    result = whd_buffer_add_remove_at_front(whd_driver, &buffer, -(int)(sizeof(data_header_t) ) );
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_DEBUG( ("Unable to adjust header space\n") );
-        result = whd_buffer_release(ifp->whd_driver, buffer, WHD_NETWORK_TX);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-        return;
-    }
-
-    packet = (data_header_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, buffer);
-
-    if (ifp->bsscfgidx > WHD_INTERFACE_MAX)
-    {
-        WPRINT_WHD_DEBUG( ("No interface for packet send\n") );
-        result = whd_buffer_release(ifp->whd_driver, buffer, WHD_NETWORK_TX);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-        return;
-    }
-
-    /* Prepare the BDC header */
-    packet->bdc_header.flags    = 0;
-    packet->bdc_header.flags    = (uint8_t)(BDC_PROTO_VER << BDC_FLAG_VER_SHIFT);
-    /* If it's an IPv4 packet set the BDC header priority based on the DSCP field */
-    if ( ( (ether_type == WHD_ETHERTYPE_IPv4) || (ether_type == WHD_ETHERTYPE_DOT1AS) ) && (dscp != NULL) )
-    {
-        if (*dscp != 0) /* If it's equal 0 then it's best effort traffic and nothing needs to be done */
-        {
-            priority = whd_map_dscp_to_priority(whd_driver, *dscp);
-        }
-    }
-
-    /* If STA interface, re-map prio to the prio allowed by the AP, regardless of whether it's an IPv4 packet */
-    if (ifp->role == WHD_STA_ROLE)
-    {
-        packet->bdc_header.priority = whd_tos_map[priority];
-    }
-    else
-    {
-        packet->bdc_header.priority = priority;
-    }
-
-    packet->bdc_header.flags2   = ifp->bsscfgidx;
-    packet->bdc_header.data_offset = 0;
-
-    /* Add the length of the BDC header and pass "down" */
-    whd_send_to_bus(whd_driver, buffer, DATA_HEADER);
-
-}
-
-/** A helper function to easily acquire and initialise a buffer destined for use as an ioctl
- *
- * @param  buffer      : A pointer to a whd_buffer_t object where the created buffer will be stored
- * @param  data_length : The length of space reserved for user data
- *
- * @return A pointer to the start of user data with data_length space available
- */
-void *whd_cdc_get_ioctl_buffer(whd_driver_t whd_driver,
-                               whd_buffer_t *buffer,
-                               uint16_t data_length)
-{
-    if ( (uint32_t)IOCTL_OFFSET + data_length > USHRT_MAX )
-    {
-        WPRINT_WHD_ERROR( ("The reserved ioctl buffer length is over %u\n", USHRT_MAX) );
-        return NULL;
-    }
-    if (whd_host_buffer_get(whd_driver, buffer, WHD_NETWORK_TX, (unsigned short)(IOCTL_OFFSET + data_length),
-                            (unsigned long)WHD_IOCTL_PACKET_TIMEOUT) == WHD_SUCCESS)
-    {
-        return (whd_buffer_get_current_piece_data_pointer(whd_driver, *buffer) + IOCTL_OFFSET);
-    }
-    else
-    {
-        WPRINT_WHD_ERROR( ("Error - failed to allocate a packet buffer for IOCTL\n") );
-        return NULL;
-    }
-}
-
-/** Processes CDC header information received in the RX packet and sets IOCTL response buffer
- *
- * @param  whd_driver : WHD driver instance
- * @param  buffer     : A pointer to a whd_buffer_t object where the created buffer will be stored
- */
-
-void whd_process_cdc(whd_driver_t whd_driver, whd_buffer_t buffer)
-{
-    uint32_t flags;
-    uint16_t id;
-    whd_cdc_bdc_info_t *cdc_bdc_info = &whd_driver->cdc_bdc_info;
-    whd_result_t result;
-    cdc_header_t *cdc_header = (cdc_header_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, buffer);
-    whd_result_t ioctl_mutex_res;
-
-    flags         = dtoh32(cdc_header->flags);
-    id            = (uint16_t)( (flags & CDCF_IOC_ID_MASK) >> CDCF_IOC_ID_SHIFT );
-
-    /* Validate request ioctl ID and check if whd_cdc_send_ioctl is still waiting for response*/
-    if ( ( (ioctl_mutex_res = cy_rtos_get_semaphore(&cdc_bdc_info->ioctl_mutex, 0, WHD_FALSE) ) != WHD_SUCCESS ) &&
-         (id == cdc_bdc_info->requested_ioctl_id) )
-    {
-        /* Save the response packet in a variable */
-        cdc_bdc_info->ioctl_response = buffer;
-
-        WPRINT_WHD_DATA_LOG( ("Wcd:< Procd pkt 0x%08lX: IOCTL Response\n", (unsigned long)buffer) );
-
-        /* Wake the thread which sent the IOCTL/IOVAR so that it will resume */
-        result = cy_rtos_set_semaphore(&cdc_bdc_info->ioctl_sleep, WHD_FALSE);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("Error setting semaphore in %s at %d \n", __func__, __LINE__) );
-
-    }
-    else
-    {
-        WPRINT_WHD_ERROR( ("Received buffer request ID: %d (expectation: %d)\n",
-                           id, cdc_bdc_info->requested_ioctl_id) );
-        if (ioctl_mutex_res == WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("whd_cdc_send_ioctl is already timed out, drop the buffer\n") );
-            result = cy_rtos_set_semaphore(&cdc_bdc_info->ioctl_mutex, WHD_FALSE);
-            if (result != WHD_SUCCESS)
-            {
-                WPRINT_WHD_ERROR( ("Error setting semaphore in %s at %d \n", __func__, __LINE__) );
-            }
-        }
-        else
-        {
-            WPRINT_WHD_ERROR( ("Received a response for a different IOCTL - retry\n") );
-        }
-
-        result = whd_buffer_release(whd_driver, buffer, WHD_NETWORK_RX);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-    }
-}
-
-/** Processes BDC header information received in the RX packet and sends data to network stack
- *
- * @param  whd_driver : WHD driver instance
- * @param  buffer     : A pointer to a whd_buffer_t object where the created buffer will be stored
- */
-
-void whd_process_bdc(whd_driver_t whd_driver, whd_buffer_t buffer)
-{
-    int32_t headers_len_below_payload;
-    uint32_t ip_data_start_add;
-    uint32_t bssid_index;
-    whd_interface_t ifp;
-    whd_result_t result;
-    bdc_header_t *bdc_header = (bdc_header_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, buffer);
-
-    /* Calculate where the payload is */
-    headers_len_below_payload =
-        (int32_t)( (int32_t)BDC_HEADER_LEN + (int32_t)(bdc_header->data_offset << 2) );
-
-    /* Move buffer pointer past gSPI, BUS, BCD headers and padding,
-     * so that the network stack or 802.11 monitor sees only the payload */
-    if (WHD_SUCCESS != whd_buffer_add_remove_at_front(whd_driver, &buffer, headers_len_below_payload) )
-    {
-        WPRINT_WHD_ERROR( ("No space for headers without chaining. this should never happen\n") );
-        result = whd_buffer_release(whd_driver, buffer, WHD_NETWORK_RX);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-
-        return;
-    }
-
-    /* It is preferable to have IP data at address aligned to 4 bytes. IP data startes after ethernet header */
-    ip_data_start_add =
-        (uint32_t )whd_buffer_get_current_piece_data_pointer(whd_driver, buffer) + WHD_ETHERNET_SIZE;
-    if ( ( (ip_data_start_add >> 2) << 2 ) != ip_data_start_add )
-    {
-        WPRINT_WHD_DATA_LOG( ("IP data not aligned to 4 bytes %lx\n", ip_data_start_add) );
-    }
-
-    WPRINT_WHD_DATA_LOG( ("Wcd:< Procd pkt 0x%08lX\n", (unsigned long)buffer) );
-    bssid_index = (uint32_t)(bdc_header->flags2 & BDC_FLAG2_IF_MASK);
-    ifp = whd_driver->iflist[bssid_index];
-
-    /* Send packet to bottom of network stack */
-    result = whd_network_process_ethernet_data(ifp, buffer);
-    if (result != WHD_SUCCESS)
-        WPRINT_WHD_ERROR( ("%s failed at %d \n", __func__, __LINE__) );
-}
-
-/** Processes BDC header information and extracts the event packets
- * Event Packets are decoded to determine which event occurred, and the event handler list is consulted
- * and the appropriate event handler is called
- *
- * @param  whd_driver : WHD driver instance
- * @param  buffer     : A pointer to a whd_buffer_t object where the created buffer will be stored
- * @param  size       : Size of the complete packet received from WLAN device
- */
-void whd_process_bdc_event(whd_driver_t whd_driver, whd_buffer_t buffer, uint16_t size)
-{
-    uint16_t ether_type;
-    whd_event_header_t *whd_event;
-    whd_event_t *event;
-    whd_cdc_bdc_info_t *cdc_bdc_info = &whd_driver->cdc_bdc_info;
-    whd_result_t result;
-    bdc_header_t *bdc_header = (bdc_header_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, buffer);
-    uint16_t i;
-    uint16_t j;
-
-    event = (whd_event_t *)&bdc_header[bdc_header->data_offset + 1];
-
-    ether_type = ntoh16(event->eth.ethertype);
-
-    /* If frame is truly an event, it should have EtherType equal to the Broadcom type. */
-    if (ether_type != (uint16_t)ETHER_TYPE_BRCM)
-    {
-        WPRINT_WHD_DEBUG( ("Error - received a channel 1 packet which was not BRCM ethertype\n") );
-        result = whd_buffer_release(whd_driver, buffer, WHD_NETWORK_RX);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-        return;
-    }
-
-    /* If ethertype is correct, the contents of the ethernet packet
-     * are a structure of type bcm_event_t
-     */
-
-    /* Check that the OUI matches the Broadcom OUI */
-    if (0 != memcmp(BRCM_OUI, &event->eth_evt_hdr.oui[0], (size_t)DOT11_OUI_LEN) )
-    {
-        WPRINT_WHD_DEBUG( ("Event OUI mismatch\n") );
-        result = whd_buffer_release(whd_driver, buffer, WHD_NETWORK_RX);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-        return;
-    }
-
-    whd_event = &event->whd_event;
-
-    /* Search for the event type in the list of event handler functions
-     * event data is stored in network endianness
-     */
-    whd_event->flags      =                        ntoh16(whd_event->flags);
-    whd_event->event_type = (whd_event_num_t)ntoh32(whd_event->event_type);
-    whd_event->status     = (whd_event_status_t)ntoh32(whd_event->status);
-    whd_event->reason     = (whd_event_reason_t)ntoh32(whd_event->reason);
-    whd_event->auth_type  =                        ntoh32(whd_event->auth_type);
-    whd_event->datalen    =                        ntoh32(whd_event->datalen);
-
-    /* Ensure data length is correct */
-    if (whd_event->datalen >
-        (uint32_t)(size - ( (char *)DATA_AFTER_HEADER(event) - (char *)bdc_header ) ) )
-    {
-        WPRINT_WHD_ERROR( (
-                              "Error - (data length received [%d] > expected data length [%d]). Bus header packet size = [%d]. Ignoring the packet\n",
-                              (int)whd_event->datalen,
-                              size - ( (char *)DATA_AFTER_HEADER(event) - (char *)bdc_header ),
-                              size) );
-        result = whd_buffer_release(whd_driver, buffer, WHD_NETWORK_RX);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-
-        return;
-    }
-
-    /* This is necessary because people who defined event statuses and reasons overlapped values. */
-    if (whd_event->event_type == WLC_E_PSK_SUP)
-    {
-        whd_event->status = (whd_event_status_t)( (int)whd_event->status + WLC_SUP_STATUS_OFFSET );
-        whd_event->reason = (whd_event_reason_t)( (int)whd_event->reason + WLC_E_SUP_REASON_OFFSET );
-    }
-    else if (whd_event->event_type == WLC_E_PRUNE)
-    {
-        whd_event->reason = (whd_event_reason_t)( (int)whd_event->reason + WLC_E_PRUNE_REASON_OFFSET );
-    }
-    else if ( (whd_event->event_type == WLC_E_DISASSOC) || (whd_event->event_type == WLC_E_DEAUTH) )
-    {
-        whd_event->status = (whd_event_status_t)( (int)whd_event->status + WLC_DOT11_SC_STATUS_OFFSET );
-        whd_event->reason = (whd_event_reason_t)( (int)whd_event->reason + WLC_E_DOT11_RC_REASON_OFFSET );
-    }
-
-    /* do any needed debug logging of event */
-    WHD_IOCTL_LOG_ADD_EVENT(whd_driver, whd_event->event_type, whd_event->status,
-                            whd_event->reason);
-
-    if (cy_rtos_get_semaphore(&cdc_bdc_info->event_list_mutex, CY_RTOS_NEVER_TIMEOUT, WHD_FALSE) != WHD_SUCCESS)
-    {
-        WPRINT_WHD_DEBUG( ("Failed to obtain mutex for event list access!\n") );
-        result = whd_buffer_release(whd_driver, buffer, WHD_NETWORK_RX);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-        return;
-    }
-
-    for (i = 0; i < (uint16_t)WHD_EVENT_HANDLER_LIST_SIZE; i++)
-    {
-        if (cdc_bdc_info->whd_event_list[i].event_set)
-        {
-            for (j = 0; cdc_bdc_info->whd_event_list[i].events[j] != WLC_E_NONE; ++j)
-            {
-                if ( (cdc_bdc_info->whd_event_list[i].events[j] == whd_event->event_type) &&
-                     (cdc_bdc_info->whd_event_list[i].ifidx == whd_event->ifidx) )
-                {
-                    /* Correct event type has been found - call the handler function and exit loop */
-                    cdc_bdc_info->whd_event_list[i].handler_user_data =
-                        cdc_bdc_info->whd_event_list[i].handler(whd_driver->iflist[whd_event->bsscfgidx],
-                                                                whd_event,
-                                                                (uint8_t *)DATA_AFTER_HEADER(
-                                                                    event),
-                                                                cdc_bdc_info->whd_event_list[i].handler_user_data);
-                    break;
-                }
-            }
-        }
-    }
-
-    result = cy_rtos_set_semaphore(&cdc_bdc_info->event_list_mutex, WHD_FALSE);
-    if (result != WHD_SUCCESS)
-        WPRINT_WHD_ERROR( ("Error setting semaphore in %s at %d \n", __func__, __LINE__) );
-
-    WPRINT_WHD_DATA_LOG( ("Wcd:< Procd pkt 0x%08lX: Evnt %d (%d bytes)\n", (unsigned long)buffer,
-                          (int)whd_event->event_type, size) );
-
-    /* Release the event packet buffer */
-    result = whd_buffer_release(whd_driver, buffer, WHD_NETWORK_RX);
-    if (result != WHD_SUCCESS)
-        WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_chip.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_chip.c
deleted file mode 100644
index 64ffb07e56..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_chip.c
+++ /dev/null
@@ -1,1456 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <stdlib.h>
-#include "bus_protocols/whd_chip_reg.h"
-#include "bus_protocols/whd_sdio.h"
-#include "bus_protocols/whd_bus_common.h"
-#include "bus_protocols/whd_bus_protocol_interface.h"
-#include "whd_chip_constants.h"
-#include "whd_cdc_bdc.h"
-#include "whd_thread_internal.h"
-#include "whd_buffer_api.h"
-#include "whd_debug.h"
-#include "whd_utils.h"
-#include "whd_wifi_api.h"
-#include "whd_chip.h"
-#include "whd.h"
-#include "whd_wlioctl.h"
-
-/******************************************************
-*                      Macros
-******************************************************/
-#define SPINWAIT_POLL_PERIOD    10
-
-#define SPINWAIT(exp, us) { \
-        uint countdown = (us) + (SPINWAIT_POLL_PERIOD - 1); \
-        while ( (exp) && (countdown >= SPINWAIT_POLL_PERIOD) ){ \
-            cy_rtos_delay_milliseconds(SPINWAIT_POLL_PERIOD); \
-            countdown -= SPINWAIT_POLL_PERIOD; \
-        } \
-}
-/******************************************************
-*             Constants
-******************************************************/
-
-#define PLATFORM_WLAN_RAM_BASE      (0x0)
-#define WLAN_BUS_UP_ATTEMPTS        (1000)
-#define HT_AVAIL_WAIT_MS            (1)
-#define KSO_WAIT_MS                 (1)
-#define KSO_WAKE_MS                 (3)
-#define MAX_KSO_ATTEMPTS            (64)
-
-#define AI_IOCTRL_OFFSET            (0x408)
-#define SICF_FGC                    (0x0002)
-#define SICF_CLOCK_EN               (0x0001)
-#define AI_RESETCTRL_OFFSET         (0x800)
-#define AI_RESETSTATUS_OFFSET       (0x804)
-#define AIRC_RESET                  (1)
-#define WRAPPER_REGISTER_OFFSET     (0x100000)
-
-#define WLAN_SHARED_VERSION_MASK    (0x00ff)
-#define WLAN_SHARED_VERSION         (0x0001)
-#define WPRINT_WHD_DEBUG_DS(args) WPRINT_WHD_DEBUG(args)
-
-/******************************************************
-*             Structures
-******************************************************/
-
-/******************************************************
-*             Variables
-******************************************************/
-
-static const uint32_t cm3_core_base_address[] =
-{ ( uint32_t )(WLAN_ARMCM3_BASE_ADDRESS + WRAPPER_REGISTER_OFFSET),
-  ( uint32_t )(SOCSRAM_BASE_ADDRESS + WRAPPER_REGISTER_OFFSET), ( uint32_t )(SDIO_BASE_ADDRESS) };
-
-static const uint32_t cr4_core_base_address[] =
-{ ( uint32_t )(WLAN_ARMCR4_BASE_ADDRESS + WRAPPER_REGISTER_OFFSET),
-  ( uint32_t )(SOCSRAM_BASE_ADDRESS + WRAPPER_REGISTER_OFFSET), ( uint32_t )(SDIO_BASE_ADDRESS) };
-
-/******************************************************
-*             Static Function Declarations
-******************************************************/
-static whd_bool_t whd_is_fw_sr_capable(whd_driver_t whd_driver);
-static whd_result_t whd_kso_enable(whd_driver_t whd_driver, whd_bool_t enable);
-static uint32_t whd_get_core_address(whd_driver_t whd_driver, device_core_t core_id);
-
-static whd_result_t whd_enable_save_restore(whd_driver_t whd_driver);
-
-/******************************************************
-*             Function definitions
-******************************************************/
-void whd_internal_info_init(whd_driver_t whd_driver)
-{
-    whd_internal_info_t *internal_info = &whd_driver->internal_info;
-
-    internal_info->whd_wlan_status.state = WLAN_OFF;
-    internal_info->whd_wlan_status.country_code = WHD_COUNTRY_AUSTRALIA;
-    internal_info->whd_wlan_status.aggregate_code = WHD_COUNTRY_AGGREGATE_XV_0;
-    internal_info->whd_wlan_status.keep_wlan_awake = 0;
-    internal_info->console_addr = 0;
-    internal_info->scan_result_callback = NULL;
-    internal_info->whd_scan_result_ptr = NULL;
-    internal_info->active_join_mutex_initted = WHD_FALSE;
-    internal_info->active_join_semaphore = NULL;
-    internal_info->con_lastpos = 0;
-    internal_info->whd_wifi_p2p_go_is_up = WHD_FALSE;
-}
-
-/*
- * Returns the base address of the core identified by the provided coreId
- */
-uint32_t whd_get_core_address(whd_driver_t whd_driver, device_core_t core_id)
-{
-    uint16_t chip_id = whd_chip_get_chip_id(whd_driver);
-
-    if (chip_id == 43455)
-        return cr4_core_base_address[(int)core_id];
-    else
-        return cm3_core_base_address[(int)core_id];
-}
-
-/*
- * Returns WHD_SUCCESS is the core identified by the provided coreId is up, otherwise WHD result code
- */
-whd_result_t whd_device_core_is_up(whd_driver_t whd_driver, device_core_t core_id)
-{
-    uint8_t regdata;
-    uint32_t base;
-    whd_result_t result;
-
-    base = whd_get_core_address(whd_driver, core_id);
-
-    /* Read the IO control register */
-    result = whd_bus_read_backplane_value(whd_driver, base + AI_IOCTRL_OFFSET, (uint8_t)1, &regdata);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_read_backplane_value failed\n", __FUNCTION__, __LINE__) );
-        return result;
-    }
-
-    /* Verify that the clock is enabled and something else is not on */
-    if ( (regdata & (SICF_FGC | SICF_CLOCK_EN) ) != ( uint8_t )SICF_CLOCK_EN )
-    {
-        return WHD_CORE_CLOCK_NOT_ENABLED;
-    }
-
-    /* Read the reset control and verify it is not in reset */
-    result = whd_bus_read_backplane_value(whd_driver, base + AI_RESETCTRL_OFFSET, (uint8_t)1, &regdata);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_read_backplane_value failed\n", __FUNCTION__, __LINE__) );
-        return result;
-    }
-    if ( (regdata & AIRC_RESET) != 0 )
-    {
-        return WHD_CORE_IN_RESET;
-    }
-
-    return WHD_SUCCESS;
-}
-
-/*
- * Resets the core identified by the provided coreId
- */
-whd_result_t whd_reset_core(whd_driver_t whd_driver, device_core_t core_id, uint32_t bits, uint32_t resetbits)
-{
-    uint32_t base = whd_get_core_address(whd_driver, core_id);
-    whd_result_t result;
-    uint8_t regdata;
-    uint32_t loop_counter = 10;
-
-    /* ensure there are no pending backplane operations */
-    SPINWAIT( ( ( (result = whd_bus_read_backplane_value(whd_driver, base + AI_RESETSTATUS_OFFSET, (uint8_t)1,
-                                                         &regdata) ) == WHD_SUCCESS ) && regdata != 0 ), 300 );
-
-    /* put core into reset state */
-    result = whd_bus_write_backplane_value(whd_driver, base + AI_RESETCTRL_OFFSET, (uint8_t)1, ( uint32_t )AIRC_RESET);
-    (void)cy_rtos_delay_milliseconds( (uint32_t)10 );   /* Ignore return - nothing can be done if it fails */
-
-    /* ensure there are no pending backplane operations */
-    SPINWAIT( ( ( (result = whd_bus_read_backplane_value(whd_driver, base + AI_RESETSTATUS_OFFSET, (uint8_t)1,
-                                                         &regdata) ) == WHD_SUCCESS ) && regdata != 0 ), 300 );
-
-    result = whd_bus_write_backplane_value(whd_driver, base + AI_IOCTRL_OFFSET, (uint8_t)1,
-                                           (bits | resetbits | SICF_FGC | SICF_CLOCK_EN) );
-
-    /* ensure there are no pending backplane operations */
-    SPINWAIT( ( ( (result = whd_bus_read_backplane_value(whd_driver, base + AI_RESETSTATUS_OFFSET, (uint8_t)1,
-                                                         &regdata) ) == WHD_SUCCESS ) && regdata != 0 ), 300 );
-
-    while ( ( (result = whd_bus_read_backplane_value(whd_driver, base + AI_RESETCTRL_OFFSET, (uint8_t)1,
-                                                     &regdata) ) == WHD_SUCCESS ) && regdata != 0 &&
-            --loop_counter != 0 )
-    {
-        /* ensure there are no pending backplane operations */
-        SPINWAIT( ( ( (result = whd_bus_read_backplane_value(whd_driver, base + AI_RESETSTATUS_OFFSET, (uint8_t)1,
-                                                             &regdata) ) == WHD_SUCCESS ) && regdata != 0 ), 300 );
-        /* take core out of reset */
-        result = whd_bus_write_backplane_value(whd_driver, base + AI_RESETCTRL_OFFSET, (uint8_t)1, (uint32_t)0);
-        if (result != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s:%d whd_bus_write_backplane_value failed\n", __FUNCTION__, __LINE__) );
-            return result;
-        }
-
-        /* ensure there are no pending backplane operations */
-        SPINWAIT( ( ( (result = whd_bus_read_backplane_value(whd_driver, base + AI_RESETSTATUS_OFFSET, (uint8_t)1,
-                                                             &regdata) ) == WHD_SUCCESS ) && regdata != 0 ), 300 );
-    }
-
-    result = whd_bus_write_backplane_value(whd_driver, base + AI_IOCTRL_OFFSET, (uint8_t)1, (bits | SICF_CLOCK_EN) );
-
-    (void)cy_rtos_delay_milliseconds( (uint32_t)1 );   /* Ignore return - nothing can be done if it fails */
-
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_write_backplane_value failed\n", __FUNCTION__, __LINE__) );
-        return result;
-    }
-    return WHD_SUCCESS;
-}
-
-/*
- * Disables the core identified by the provided coreId
- */
-whd_result_t whd_disable_device_core(whd_driver_t whd_driver, device_core_t core_id, wlan_core_flag_t core_flag)
-{
-    uint32_t base = whd_get_core_address(whd_driver, core_id);
-    whd_result_t result;
-    uint8_t junk;
-    uint8_t regdata;
-
-    /* Read the reset control */
-    result = whd_bus_read_backplane_value(whd_driver, base + AI_RESETCTRL_OFFSET, (uint8_t)1, &junk);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_read_backplane_value failed\n", __FUNCTION__, __LINE__) );
-        return result;
-    }
-
-    /* Read the reset control and check if it is already in reset */
-    result = whd_bus_read_backplane_value(whd_driver, base + AI_RESETCTRL_OFFSET, (uint8_t)1, &regdata);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_read_backplane_value failed\n", __FUNCTION__, __LINE__) );
-        return result;
-    }
-    if ( (regdata & AIRC_RESET) != 0 )
-    {
-        /* Core already in reset */
-        return WHD_SUCCESS;
-    }
-
-    /* Write 0 to the IO control and read it back */
-    result =
-        whd_bus_write_backplane_value(whd_driver, base + AI_IOCTRL_OFFSET, (uint8_t)1,
-                                      (core_flag == WLAN_CORE_FLAG_CPU_HALT) ? SICF_CPUHALT : 0);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_write_backplane_value failed\n", __FUNCTION__, __LINE__) );
-        return result;
-    }
-
-    result = whd_bus_read_backplane_value(whd_driver, base + AI_IOCTRL_OFFSET, (uint8_t)1, &junk);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_read_backplane_value failed\n", __FUNCTION__, __LINE__) );
-        return result;
-    }
-
-    (void)cy_rtos_delay_milliseconds( (uint32_t)1 );
-
-    result = whd_bus_write_backplane_value(whd_driver, base + AI_RESETCTRL_OFFSET, (uint8_t)1, ( uint32_t )AIRC_RESET);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_write_backplane_value failed\n", __FUNCTION__, __LINE__) );
-        return result;
-    }
-
-    (void)cy_rtos_delay_milliseconds( (uint32_t)1 );
-
-    return result;
-}
-
-/*
- * Resets the core identified by the provided coreId
- */
-whd_result_t whd_reset_device_core(whd_driver_t whd_driver, device_core_t core_id, wlan_core_flag_t core_flag)
-{
-    uint32_t base = whd_get_core_address(whd_driver, core_id);
-    whd_result_t result;
-    uint8_t junk;
-
-    result = whd_disable_device_core(whd_driver, core_id, core_flag);
-    if (result != WHD_SUCCESS)
-    {
-        return result;
-    }
-
-    result =
-        whd_bus_write_backplane_value(whd_driver, base + AI_IOCTRL_OFFSET, (uint8_t)1,
-                                      ( uint32_t )(SICF_FGC | SICF_CLOCK_EN |
-                                                   ( (core_flag == WLAN_CORE_FLAG_CPU_HALT) ? SICF_CPUHALT : 0 ) ) );
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_write_backplane_value failed\n", __FUNCTION__, __LINE__) );
-        return result;
-    }
-
-    result = whd_bus_read_backplane_value(whd_driver, base + AI_IOCTRL_OFFSET, (uint8_t)1, &junk);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_read_backplane_value failed\n", __FUNCTION__, __LINE__) );
-        return result;
-    }
-
-    result = whd_bus_write_backplane_value(whd_driver, base + AI_RESETCTRL_OFFSET, (uint8_t)1, 0);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_write_backplane_value failed\n", __FUNCTION__, __LINE__) );
-        return result;
-    }
-
-    (void)cy_rtos_delay_milliseconds( (uint32_t)1 );
-
-    result =
-        whd_bus_write_backplane_value(whd_driver, base + AI_IOCTRL_OFFSET, (uint8_t)1,
-                                      ( uint32_t )(SICF_CLOCK_EN |
-                                                   ( (core_flag == WLAN_CORE_FLAG_CPU_HALT) ? SICF_CPUHALT : 0 ) ) );
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_write_backplane_value failed\n", __FUNCTION__, __LINE__) );
-        return result;
-    }
-
-    result = whd_bus_read_backplane_value(whd_driver, base + AI_IOCTRL_OFFSET, (uint8_t)1, &junk);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_read_backplane_value failed\n", __FUNCTION__, __LINE__) )
-        return result;
-    }
-
-    (void)cy_rtos_delay_milliseconds( (uint32_t)1 );
-
-    return result;
-}
-
-/*
- * Release ARM core to run instructions
- */
-whd_result_t whd_wlan_armcore_run(whd_driver_t whd_driver, device_core_t core_id, wlan_core_flag_t core_flag)
-{
-    uint32_t base = whd_get_core_address(whd_driver, core_id);
-    whd_result_t result;
-    uint8_t junk;
-
-    /* Only work for WLAN arm core! */
-    if (WLAN_ARM_CORE != core_id)
-    {
-        return WHD_UNSUPPORTED;
-    }
-
-    result =
-        whd_bus_write_backplane_value(whd_driver, base + AI_IOCTRL_OFFSET, (uint8_t)1,
-                                      ( uint32_t )(SICF_FGC | SICF_CLOCK_EN |
-                                                   ( (core_flag == WLAN_CORE_FLAG_CPU_HALT) ? SICF_CPUHALT : 0 ) ) );
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_write_backplane_value failed\n", __FUNCTION__, __LINE__) )
-        return result;
-    }
-
-    result = whd_bus_read_backplane_value(whd_driver, base + AI_IOCTRL_OFFSET, (uint8_t)1, &junk);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_read_backplane_value failed\n", __FUNCTION__, __LINE__) )
-        return result;
-    }
-
-    result = whd_bus_write_backplane_value(whd_driver, base + AI_RESETCTRL_OFFSET, (uint8_t)1, 0);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_write_backplane_value failed\n", __FUNCTION__, __LINE__) )
-        return result;
-    }
-
-    (void)cy_rtos_delay_milliseconds( (uint32_t)1 );
-
-    result =
-        whd_bus_write_backplane_value(whd_driver, base + AI_IOCTRL_OFFSET, (uint8_t)1,
-                                      ( uint32_t )(SICF_CLOCK_EN |
-                                                   ( (core_flag == WLAN_CORE_FLAG_CPU_HALT) ? SICF_CPUHALT : 0 ) ) );
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_write_backplane_value failed\n", __FUNCTION__, __LINE__) );
-        return result;
-    }
-
-    result = whd_bus_read_backplane_value(whd_driver, base + AI_IOCTRL_OFFSET, (uint8_t)1, &junk);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_read_backplane_value failed\n", __FUNCTION__, __LINE__) );
-        return result;
-    }
-
-    (void)cy_rtos_delay_milliseconds( (uint32_t)1 );
-
-    return result;
-}
-
-whd_result_t whd_wifi_read_wlan_log_unsafe(whd_driver_t whd_driver, uint32_t wlan_shared_address, char *buffer,
-                                           uint32_t buffer_size)
-{
-    char ch;
-    uint32_t n;
-    uint32_t index;
-    uint32_t address;
-    whd_result_t result = WHD_WLAN_ERROR;
-    whd_internal_info_t *internal_info = &whd_driver->internal_info;
-    wifi_console_t *c = internal_info->c;
-
-    c = &internal_info->console;
-
-    if (internal_info->console_addr == 0)
-    {
-        uint shared_addr;
-
-        address = wlan_shared_address;
-        result = whd_bus_read_backplane_value(whd_driver, address, 4, (uint8_t *)&shared_addr);
-        if (result != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s:%d whd_bus_read_backplane_value failed\n", __FUNCTION__, __LINE__) );
-            goto done;
-        }
-
-        result = whd_bus_transfer_backplane_bytes(whd_driver, BUS_READ, shared_addr, sizeof(wlan_shared_t),
-                                                  (uint8_t *)&internal_info->sh);
-        if (result != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s:%d whd_bus_transfer_backplane_bytes failed\n", __FUNCTION__, __LINE__) );
-            goto done;
-        }
-
-        internal_info->sh.flags = dtoh32(internal_info->sh.flags);
-        internal_info->sh.trap_addr = dtoh32(internal_info->sh.trap_addr);
-        internal_info->sh.assert_exp_addr = dtoh32(internal_info->sh.assert_exp_addr);
-        internal_info->sh.assert_file_addr = dtoh32(internal_info->sh.assert_file_addr);
-        internal_info->sh.assert_line = dtoh32(internal_info->sh.assert_line);
-        internal_info->sh.console_addr = dtoh32(internal_info->sh.console_addr);
-        internal_info->sh.msgtrace_addr = dtoh32(internal_info->sh.msgtrace_addr);
-
-        if ( (internal_info->sh.flags & WLAN_SHARED_VERSION_MASK) != WLAN_SHARED_VERSION )
-        {
-            WPRINT_WHD_ERROR( ("Readconsole: WLAN shared version is not valid sh.flags %x\n\r",
-                               internal_info->sh.flags) );
-            result = WHD_WLAN_INVALID;
-            goto done;
-        }
-        internal_info->console_addr = internal_info->sh.console_addr;
-    }
-
-    /* Read console log struct */
-    address = internal_info->console_addr + offsetof(hnd_cons_t, log);
-    result = whd_bus_transfer_backplane_bytes(whd_driver, BUS_READ, address, sizeof(c->log), (uint8_t *)&c->log);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_transfer_backplane_bytes failed\n", __FUNCTION__, __LINE__) );
-        goto done;
-    }
-
-    /* Allocate console buffer (one time only) */
-    if (c->buf == NULL)
-    {
-        c->bufsize = dtoh32(c->log.buf_size);
-        c->buf = malloc(c->bufsize);
-        if (c->buf == NULL)
-        {
-            WPRINT_WHD_ERROR( ("%s:%d c->buf IS null \n", __FUNCTION__, __LINE__) );
-            result = WHD_WLAN_NOMEM;
-            goto done;
-        }
-    }
-
-    /* Retrieve last read position */
-    c->last = whd_driver->internal_info.con_lastpos;
-
-    index = dtoh32(c->log.idx);
-
-    /* Protect against corrupt value */
-    if (index > c->bufsize)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d index > c->bufsize \n", __FUNCTION__, __LINE__) );
-        result = WHD_WLAN_BUFTOOSHORT;
-        goto done;
-    }
-
-    /* Skip reading the console buffer if the index pointer has not moved */
-    if (index == c->last)
-    {
-        result = WHD_SUCCESS;
-        goto done;
-    }
-
-    /* Read the console buffer */
-    /* xxx this could optimize and read only the portion of the buffer needed, but
-     * it would also have to handle wrap-around.
-     */
-    address = dtoh32(c->log.buf);
-    result = whd_bus_transfer_backplane_bytes(whd_driver, BUS_READ, address, c->bufsize, (uint8_t *)c->buf);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_transfer_backplane_bytes failed\n", __FUNCTION__, __LINE__) );
-        goto done;
-    }
-
-    while (c->last != index)
-    {
-        for (n = 0; n < buffer_size - 2; n++)
-        {
-            if (c->last == index)
-            {
-                /* This would output a partial line.  Instead, back up
-                 * the buffer pointer and output this line next time around.
-                 */
-                if (c->last >= n)
-                {
-                    c->last -= n;
-                }
-                else
-                {
-                    c->last = c->bufsize - n;
-                }
-                /* Save last read position */
-                whd_driver->internal_info.con_lastpos = c->last;
-
-                result = WHD_SUCCESS;
-                goto done;
-            }
-            ch = c->buf[c->last];
-            c->last = (c->last + 1) % c->bufsize;
-            if (ch == '\n')
-            {
-                break;
-            }
-            buffer[n] = ch;
-        }
-        if (n > 0)
-        {
-            if (buffer[n - 1] == '\r')
-                n--;
-            buffer[n] = 0;
-            WPRINT_MACRO( ("CONSOLE: %s\n", buffer) );
-        }
-    }
-    /* Save last read position */
-    whd_driver->internal_info.con_lastpos = c->last;
-    result = WHD_SUCCESS;
-
-done: return result;
-}
-
-void whd_wifi_peek(whd_driver_t whd_driver, uint32_t address, uint8_t register_length, uint8_t *value)
-{
-    uint8_t status;
-
-    WHD_WLAN_KEEP_AWAKE(whd_driver);
-
-    status = whd_bus_read_backplane_value(whd_driver, address, register_length, value);
-
-    if (status != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s: Error reading interrupt status\n", __FUNCTION__) );
-    }
-
-    WHD_WLAN_LET_SLEEP(whd_driver);
-}
-
-void whd_wifi_poke(whd_driver_t whd_driver, uint32_t address, uint8_t register_length, uint32_t value)
-{
-    uint8_t status;
-
-    WHD_WLAN_KEEP_AWAKE(whd_driver);
-
-    status = whd_bus_write_backplane_value(whd_driver, address, register_length, value);
-
-    if (status != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s: Error clearing the interrupt status\n", __FUNCTION__) );
-    }
-
-    WHD_WLAN_LET_SLEEP(whd_driver);
-}
-
-void whd_ioctl_log_add(whd_driver_t whd_driver, uint32_t cmd, whd_buffer_t buffer)
-{
-    uint8_t *data = (whd_buffer_get_current_piece_data_pointer(whd_driver, buffer) + IOCTL_OFFSET);
-    size_t data_size = whd_buffer_get_current_piece_size(whd_driver, buffer);
-
-    whd_driver->whd_ioctl_log[whd_driver->whd_ioctl_log_index % WHD_IOCTL_LOG_SIZE].ioct_log = cmd;
-    whd_driver->whd_ioctl_log[whd_driver->whd_ioctl_log_index % WHD_IOCTL_LOG_SIZE].is_this_event = 0;
-    whd_driver->whd_ioctl_log[whd_driver->whd_ioctl_log_index % WHD_IOCTL_LOG_SIZE].data_size = MIN_OF(
-        WHD_MAX_DATA_SIZE, data_size);
-    memset(whd_driver->whd_ioctl_log[whd_driver->whd_ioctl_log_index % WHD_IOCTL_LOG_SIZE].data, 0, WHD_MAX_DATA_SIZE);
-    memcpy(whd_driver->whd_ioctl_log[whd_driver->whd_ioctl_log_index % WHD_IOCTL_LOG_SIZE].data, data,
-           whd_driver->whd_ioctl_log[whd_driver->whd_ioctl_log_index % WHD_IOCTL_LOG_SIZE].data_size);
-
-    whd_driver->whd_ioctl_log_index++;
-}
-
-void whd_ioctl_log_add_event(whd_driver_t whd_driver, uint32_t cmd, uint16_t flag, uint32_t reason)
-{
-    whd_driver->whd_ioctl_log[whd_driver->whd_ioctl_log_index % WHD_IOCTL_LOG_SIZE].is_this_event = 1;
-    whd_driver->whd_ioctl_log[whd_driver->whd_ioctl_log_index % WHD_IOCTL_LOG_SIZE].ioct_log = cmd;
-    whd_driver->whd_ioctl_log[whd_driver->whd_ioctl_log_index % WHD_IOCTL_LOG_SIZE].flag = flag;
-    whd_driver->whd_ioctl_log[whd_driver->whd_ioctl_log_index % WHD_IOCTL_LOG_SIZE].reason = reason;
-
-    whd_driver->whd_ioctl_log_index++;
-
-}
-
-whd_result_t whd_ioctl_print(whd_driver_t whd_driver)
-{
-    int i;
-    uint8_t *data = NULL;
-    size_t iovar_string_size = 0;
-
-    for (i = 0; i < WHD_IOCTL_LOG_SIZE; i++)
-    {
-        char iovar[WHD_IOVAR_STRING_SIZE] = {0};
-        data = whd_driver->whd_ioctl_log[i].data;
-
-        if ( (whd_driver->whd_ioctl_log[i].ioct_log == WLC_SET_VAR) ||
-             (whd_driver->whd_ioctl_log[i].ioct_log == WLC_GET_VAR) )
-        {
-            while (!*data)
-            {
-                whd_driver->whd_ioctl_log[i].data_size--;
-                data++;
-            }
-
-            if (strlen( (char *)data ) <= WHD_IOVAR_STRING_SIZE)
-                strncpy(iovar, (char *)data, strlen( (char *)data ) );
-
-            iovar_string_size = strlen( (const char *)data );
-            data += iovar_string_size;
-            whd_driver->whd_ioctl_log[i].data_size -= iovar_string_size;
-        }
-
-        if (whd_driver->whd_ioctl_log[i].is_this_event == 1)
-        {
-            whd_event_info_to_string(whd_driver->whd_ioctl_log[i].ioct_log, whd_driver->whd_ioctl_log[i].flag,
-                                     whd_driver->whd_ioctl_log[i].reason, iovar, sizeof(iovar) - 1);
-            WPRINT_MACRO( ("\n<- E:%" PRIu32 "\t\t\tS:%d\t\t\t\tR:%" PRIu32 "\n%s\n",
-                           whd_driver->whd_ioctl_log[i].ioct_log,
-                           whd_driver->whd_ioctl_log[i].flag, whd_driver->whd_ioctl_log[i].reason, iovar) );
-        }
-        else if (whd_driver->whd_ioctl_log[i].ioct_log == WLC_SET_VAR)
-        {
-            WPRINT_MACRO( ("\n-> %s\n", iovar) );
-            whd_hexdump(data, whd_driver->whd_ioctl_log[i].data_size);
-        }
-        else if (whd_driver->whd_ioctl_log[i].ioct_log == WLC_GET_VAR)
-        {
-            WPRINT_MACRO( ("\n<- %s\n", iovar) );
-            whd_hexdump(data, whd_driver->whd_ioctl_log[i].data_size);
-        }
-        else if (whd_driver->whd_ioctl_log[i].ioct_log != 0)
-        {
-            whd_ioctl_to_string(whd_driver->whd_ioctl_log[i].ioct_log, iovar, sizeof(iovar) - 1);
-            WPRINT_MACRO( ("\n%s:%" PRIu32 "\n", iovar, whd_driver->whd_ioctl_log[i].ioct_log) );
-            whd_hexdump(data, whd_driver->whd_ioctl_log[i].data_size);
-        }
-    }
-
-    memset(whd_driver->whd_ioctl_log, 0, sizeof(whd_driver->whd_ioctl_log) );
-    whd_driver->whd_ioctl_log_index = 0;
-    return WHD_SUCCESS;
-}
-
-void whd_wifi_chip_info_init(whd_driver_t whd_driver)
-{
-    whd_driver->chip_info.save_restore_enable = WHD_FALSE;
-}
-
-whd_result_t whd_wifi_set_custom_country_code(whd_interface_t ifp, const whd_country_info_t *country_code)
-{
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    /* Get chip number */
-    uint16_t wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-    if (wlan_chip_id == 43362)
-    {
-        whd_buffer_t buffer;
-        whd_result_t result;
-        whd_country_info_t *data;
-        data = (whd_country_info_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer,
-                                                              (uint16_t)sizeof(whd_country_info_t) + 10);
-        if (data == NULL)
-        {
-            whd_assert("Could not get buffer for IOCTL", 0 != 0);
-            return WHD_BUFFER_ALLOC_FAIL;
-        }
-        memcpy(data, country_code, sizeof(whd_country_info_t) );
-        result = whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_CUSTOM_COUNTRY, buffer, NULL);
-        return result;
-    }
-    else
-    {
-        UNUSED_PARAMETER(country_code);
-        return WHD_UNSUPPORTED;
-    }
-}
-
-whd_result_t whd_chip_specific_socsram_init(whd_driver_t whd_driver)
-{
-    /* Get chip number */
-    uint16_t wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-    if (wlan_chip_id == 43430)
-    {
-        CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, SOCSRAM_BANKX_INDEX, 4, 0x3) );
-        CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, SOCSRAM_BANKX_PDA, 4, 0) );
-        return WHD_SUCCESS;
-    }
-    else
-    {
-        return WHD_SUCCESS;
-    }
-}
-
-whd_result_t whd_chip_specific_init(whd_driver_t whd_driver)
-{
-    /* Get chip number */
-    uint16_t wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-    if ( (wlan_chip_id == 4334) || (wlan_chip_id == 43362) )
-    {
-        return WHD_SUCCESS;
-    }
-    else
-    {
-        return whd_enable_save_restore(whd_driver);
-    }
-}
-
-whd_result_t whd_allow_wlan_bus_to_sleep(whd_driver_t whd_driver)
-{
-    /* Get chip number */
-    uint16_t wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-    if ( (wlan_chip_id == 4334) || (wlan_chip_id == 43362) )
-    {
-        /* Clear HT clock request */
-        if (whd_bus_is_up(whd_driver) == WHD_TRUE)
-        {
-            whd_bus_set_state(whd_driver, WHD_FALSE);
-            CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_CHIP_CLOCK_CSR,
-                                                      (uint8_t)1, 0) );
-            /* Bus specific sleep routine */
-            return whd_bus_sleep(whd_driver);
-        }
-        else
-        {
-            return WHD_SUCCESS;
-        }
-    }
-    else
-    {
-        /* Clear HT clock request */
-        if (whd_bus_is_up(whd_driver) == WHD_TRUE)
-        {
-            whd_bus_set_state(whd_driver, WHD_FALSE);
-            if (whd_driver->chip_info.save_restore_enable == WHD_FALSE)
-            {
-                return whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_CHIP_CLOCK_CSR,
-                                                    (uint8_t)1, 0);
-            }
-            else
-            {
-                return whd_kso_enable(whd_driver, WHD_FALSE);
-            }
-        }
-        else
-        {
-            return WHD_SUCCESS;
-        }
-    }
-}
-
-whd_result_t whd_wifi_read_wlan_log(whd_driver_t whd_driver, char *buffer, uint32_t buffer_size)
-{
-    whd_result_t result;
-    uint32_t wlan_shared_address;
-    uint16_t wlan_chip_id = 0;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    whd_ioctl_print(whd_driver);
-
-    wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-    if (wlan_chip_id == 43362)
-    {
-        return whd_wifi_read_wlan_log_unsafe(whd_driver, ( (GET_C_VAR(whd_driver, CHIP_RAM_SIZE) +
-                                                            PLATFORM_WLAN_RAM_BASE) - 4 ), buffer, buffer_size);
-    }
-    else if (wlan_chip_id == 43909)
-    {
-        result = whd_ensure_wlan_bus_is_up(whd_driver);
-        if (result != WHD_SUCCESS)
-        {
-            return result;
-        }
-        result = whd_wifi_read_wlan_log_unsafe(whd_driver, ( (GET_C_VAR(whd_driver, CHIP_RAM_SIZE) +
-                                                              PLATFORM_WLAN_RAM_BASE) - 4 ), buffer, buffer_size);
-        whd_thread_notify(whd_driver);
-        return result;
-    }
-    else if ( (wlan_chip_id == 4334) || (wlan_chip_id == 4390) )
-    {
-        return WHD_UNSUPPORTED;
-    }
-    else
-    {
-        /* Backplane access needs HT clock. So, disabling bus sleep */
-        WHD_WLAN_KEEP_AWAKE(whd_driver);
-        /* FW populates the last word of RAM with wlan_shared_t struct address */
-        if (whd_is_fw_sr_capable(whd_driver) == WHD_TRUE)
-        {
-            wlan_shared_address = PLATFORM_WLAN_RAM_BASE + GET_C_VAR(whd_driver, CHIP_RAM_SIZE) -
-                                  GET_C_VAR(whd_driver, SOCRAM_SRMEM_SIZE) - 4;
-        }
-        else
-        {
-            wlan_shared_address = PLATFORM_WLAN_RAM_BASE + GET_C_VAR(whd_driver, CHIP_RAM_SIZE) - 4;
-        }
-        result = whd_wifi_read_wlan_log_unsafe(whd_driver, wlan_shared_address, buffer, buffer_size);
-        WHD_WLAN_LET_SLEEP(whd_driver);
-        return result;
-    }
-
-}
-
-uint32_t whd_wifi_print_whd_log(whd_driver_t whd_driver)
-{
-    whd_result_t result;
-    char *buffer = NULL;
-
-    whd_ioctl_print(whd_driver);
-
-    if ( (buffer = malloc(WLAN_LOG_BUF_LEN) ) == NULL )
-    {
-        WPRINT_WHD_ERROR( ("Memory allocation failed for log buffer in %s \n", __FUNCTION__) );
-        return WHD_MALLOC_FAILURE;
-    }
-
-    result = whd_wifi_read_wlan_log(whd_driver, buffer, WLAN_LOG_BUF_LEN);
-    if (result == WHD_SUCCESS)
-    {
-        whd_print_logbuffer();  // This is not supported yet.
-    }
-    free(buffer);
-    CHECK_RETURN(result);
-    return result;
-}
-
-whd_result_t whd_ensure_wlan_bus_is_up(whd_driver_t whd_driver)
-{
-    uint8_t csr = 0;
-    uint32_t attempts = ( uint32_t )WLAN_BUS_UP_ATTEMPTS;
-    uint16_t wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-
-    /* Ensure HT clock is up */
-    if (whd_bus_is_up(whd_driver) == WHD_TRUE)
-    {
-        return WHD_SUCCESS;
-    }
-
-    if ( (wlan_chip_id == 43362) || (wlan_chip_id == 4334) )
-    {
-        /* Bus specific wakeup routine */
-        CHECK_RETURN(whd_bus_wakeup(whd_driver) );
-        CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_CHIP_CLOCK_CSR,
-                                                  (uint8_t)1, (uint32_t)SBSDIO_HT_AVAIL_REQ) );
-        do
-        {
-            CHECK_RETURN(whd_bus_read_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_CHIP_CLOCK_CSR,
-                                                     (uint8_t)1, &csr) );
-            --attempts;
-        } while ( ( (csr & SBSDIO_HT_AVAIL) == 0 ) && (attempts != 0) &&
-                  (cy_rtos_delay_milliseconds( (uint32_t)1 ), 1 == 1) );
-
-        if (attempts == 0)
-        {
-            WPRINT_WHD_ERROR( ("SDIO bus failed to come up , %s failed at %d \n", __func__, __LINE__) );
-            return WHD_SDIO_BUS_UP_FAIL;
-        }
-        else
-        {
-            whd_bus_set_state(whd_driver, WHD_TRUE);
-            return WHD_SUCCESS;
-        }
-    }
-    else
-    {
-        if (whd_driver->chip_info.save_restore_enable == WHD_FALSE)
-        {
-            CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_CHIP_CLOCK_CSR,
-                                                      (uint8_t)1, (uint32_t)SBSDIO_HT_AVAIL_REQ) );
-            do
-            {
-                CHECK_RETURN(whd_bus_read_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_CHIP_CLOCK_CSR,
-                                                         (uint8_t)sizeof(csr), &csr) );
-                --attempts;
-            } while ( ( (csr & SBSDIO_HT_AVAIL) == 0 ) && (attempts != 0) &&
-                      (cy_rtos_delay_milliseconds( ( uint32_t )HT_AVAIL_WAIT_MS ), 1 == 1) );
-
-            if (attempts == 0)
-            {
-                WPRINT_WHD_ERROR( ("SDIO bus failed to come up , %s failed at %d \n", __func__, __LINE__) );
-                return WHD_SDIO_BUS_UP_FAIL;
-            }
-            else
-            {
-                whd_bus_set_state(whd_driver, WHD_TRUE);
-                return WHD_SUCCESS;
-            }
-        }
-        else
-        {
-            if (whd_kso_enable(whd_driver, WHD_TRUE) == WHD_SUCCESS)
-            {
-                whd_bus_set_state(whd_driver, WHD_TRUE);
-                return WHD_SUCCESS;
-            }
-            else
-            {
-                WPRINT_WHD_ERROR( ("SDIO bus failed to come up , %s failed at %d \n", __func__, __LINE__) );
-                return WHD_SDIO_BUS_UP_FAIL;
-            }
-        }
-    }
-}
-
-static whd_bool_t whd_is_fw_sr_capable(whd_driver_t whd_driver)
-{
-    uint32_t core_capext;
-    uint32_t retention_ctl = 0;
-    uint32_t srctrl = 0;
-    whd_bool_t save_restore_capable = WHD_FALSE;
-    whd_result_t result = WHD_SUCCESS;
-
-    /* Get chip number */
-    uint16_t wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-
-    if (wlan_chip_id == 43430)
-    {
-        /* check if fw initialized sr engine */
-        if (whd_bus_read_backplane_value(whd_driver, (uint32_t)CHIPCOMMON_SR_CONTROL1, (uint8_t)4,
-                                         (uint8_t *)&srctrl) != WHD_SUCCESS)
-        {
-            return WHD_FALSE;
-        }
-        if (srctrl != 0)
-        {
-            return WHD_TRUE;
-        }
-        else
-        {
-            return WHD_FALSE;
-        }
-    }
-    else if ( (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        /* check if fw initialized sr engine */
-        result = whd_bus_read_backplane_value(whd_driver, (uint32_t)CHIPCOMMON_CORE_CAPEXT_ADDR, (uint8_t)4,
-                                              (uint8_t *)&core_capext);
-        if (result != WHD_SUCCESS)
-        {
-            return WHD_FALSE;
-        }
-
-        if ( (core_capext & CHIPCOMMON_CORE_CAPEXT_SR_SUPPORTED) != 0 )
-        {
-            result = whd_bus_read_backplane_value(whd_driver, (uint32_t)CHIPCOMMON_CORE_RETENTION_CTL, (uint8_t)4,
-                                                  (uint8_t *)&retention_ctl);
-            if (result != WHD_SUCCESS)
-            {
-                return WHD_FALSE;
-            }
-            if ( (retention_ctl & (CHIPCOMMON_CORE_RCTL_MACPHY_DISABLE | CHIPCOMMON_CORE_RCTL_LOGIC_DISABLE) ) == 0 )
-            {
-                save_restore_capable = WHD_TRUE;
-            }
-        }
-        return save_restore_capable;
-    }
-    else
-    {
-        /* check if fw initialized sr engine */
-        result = whd_bus_read_backplane_value(whd_driver, (uint32_t)RETENTION_CTL, (uint8_t)sizeof(retention_ctl),
-                                              (uint8_t *)&retention_ctl);
-        if (result != WHD_SUCCESS)
-        {
-            return WHD_FALSE;
-        }
-        if ( (retention_ctl & (RCTL_MACPHY_DISABLE | RCTL_LOGIC_DISABLE) ) == 0 )
-        {
-            save_restore_capable = WHD_TRUE;
-        }
-        return save_restore_capable;
-    }
-}
-
-static whd_result_t whd_enable_save_restore(whd_driver_t whd_driver)
-{
-    uint8_t data;
-    /* Get chip number */
-    uint16_t wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-
-    if (whd_is_fw_sr_capable(whd_driver) == WHD_TRUE)
-    {
-        if ( (wlan_chip_id == 43012) || (wlan_chip_id == 43455) )
-        {
-            /* Configure WakeupCtrl register to set AlpAvail request bit in chipClockCSR register
-             * after the sdiod core is powered on.
-             */
-            CHECK_RETURN(whd_bus_read_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_WAKEUP_CTRL,
-                                                     (uint8_t)sizeof(data), &data) );
-            data |= SBSDIO_WCTRL_WAKE_TILL_ALP_AVAIL;
-            CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_WAKEUP_CTRL,
-                                                      (uint8_t)sizeof(data), data) );
-        }
-        else
-        {
-            /* Configure WakeupCtrl register to set HtAvail request bit in chipClockCSR register
-             * after the sdiod core is powered on.
-             */
-            CHECK_RETURN(whd_bus_read_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_WAKEUP_CTRL,
-                                                     (uint8_t)1, &data) );
-            data |= SBSDIO_WCTRL_WAKE_TILL_HT_AVAIL;
-            CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_WAKEUP_CTRL,
-                                                      (uint8_t)1, data) );
-        }
-
-        /* Set brcmCardCapability to noCmdDecode mode.
-         * It makes sdiod_aos to wakeup host for any activity of cmd line, even though
-         * module won't decode cmd or respond
-         */
-        CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, (uint32_t)SDIOD_CCCR_BRCM_CARDCAP,
-                                                  (uint8_t)1, SDIOD_CCCR_BRCM_CARDCAP_CMD_NODEC) );
-        if ( (wlan_chip_id == 43012) || (wlan_chip_id == 43455) )
-        {
-            CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_CHIP_CLOCK_CSR,
-                                                      (uint8_t)1, SBSDIO_HT_AVAIL_REQ) );
-        }
-        else
-        {
-            CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_CHIP_CLOCK_CSR,
-                                                      (uint8_t)1, (uint32_t)SBSDIO_FORCE_HT) );
-        }
-
-        /* Enable KeepSdioOn (KSO) bit for normal operation */
-        if ( (wlan_chip_id == 43012) || (wlan_chip_id == 43455) )
-        {
-            CHECK_RETURN(whd_bus_read_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_SLEEP_CSR,
-                                                     (uint8_t)sizeof(data), &data) );
-        }
-        else
-        {
-            CHECK_RETURN(whd_bus_read_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_SLEEP_CSR,
-                                                     (uint8_t)1, &data) );
-        }
-        if ( (data & SBSDIO_SLPCSR_KEEP_SDIO_ON) == 0 )
-        {
-            data |= SBSDIO_SLPCSR_KEEP_SDIO_ON;
-            if ( (wlan_chip_id == 43012) || (wlan_chip_id == 43455) )
-            {
-                CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_SLEEP_CSR,
-                                                          (uint8_t)sizeof(data), data) );
-            }
-            else
-            {
-                CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_SLEEP_CSR,
-                                                          (uint8_t)1, data) );
-            }
-        }
-
-        /* SPI bus can be configured for sleep by default.
-         * KSO bit solely controls the wlan chip sleep
-         */
-        CHECK_RETURN(whd_bus_sleep(whd_driver) );
-
-        /* Put SPI interface block to sleep */
-        CHECK_RETURN(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, SDIO_PULL_UP, (uint8_t)1, 0xf) );
-
-        whd_driver->chip_info.save_restore_enable = WHD_TRUE;
-    }
-    else
-    {
-        whd_driver->chip_info.save_restore_enable = WHD_FALSE;
-    }
-
-    return WHD_SUCCESS;
-}
-
-static whd_result_t whd_kso_enable(whd_driver_t whd_driver, whd_bool_t enable)
-{
-    uint8_t write_value = 0;
-    uint8_t read_value = 0;
-    uint8_t compare_value;
-    uint8_t bmask;
-    uint32_t attempts = ( uint32_t )MAX_KSO_ATTEMPTS;
-    whd_result_t result;
-    /* Get chip number */
-
-    uint16_t wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-    if (enable == WHD_TRUE)
-    {
-        write_value |= SBSDIO_SLPCSR_KEEP_SDIO_ON;
-    }
-
-    /* 1st KSO write goes to AOS wake up core if device is asleep  */
-    /* Possibly device might not respond to this cmd. So, don't check return value here */
-    if ( (wlan_chip_id == 43430) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        /* 2 Sequential writes to KSO bit are required for SR module to wakeup, both write can fail */
-        CHECK_RETURN_IGNORE(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_SLEEP_CSR,
-                                                         (uint8_t)1,
-                                                         write_value) );
-        CHECK_RETURN_IGNORE(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_SLEEP_CSR,
-                                                         (uint8_t)1,
-                                                         write_value) );
-        if (enable == WHD_TRUE)
-        {
-            /* device WAKEUP through KSO:
-             * write bit 0 & read back until
-             * both bits 0(kso bit) & 1 (dev on status) are set
-             */
-            compare_value = SBSDIO_SLPCSR_KEEP_SDIO_ON | SBSDIO_SLPCSR_DEVICE_ON;
-            bmask = compare_value;
-        }
-        else
-        {
-            /* Put device to sleep, turn off  KSO  */
-            compare_value = 0;
-            /* Check for bit0 only, bit1(devon status) may not get cleared right away */
-            bmask = SBSDIO_SLPCSR_KEEP_SDIO_ON;
-        }
-    }
-    else
-    {
-        CHECK_RETURN_IGNORE(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_SLEEP_CSR,
-                                                         (uint8_t)1, write_value) );
-
-        /* In case of 43012 chip, the chip could go down immediately after KSO bit is cleared.
-         * So the further reads of KSO register could fail. Thereby just bailing out immediately
-         * after clearing KSO bit, to avoid polling of KSO bit.
-         */
-        if (enable == WHD_FALSE)
-        {
-            return WHD_SUCCESS;
-        }
-
-        /* 2 Sequential writes to KSO bit are required for SR module to wakeup */
-        CHECK_RETURN_IGNORE(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_SLEEP_CSR,
-                                                         (uint8_t)1, write_value) );
-
-        /* device WAKEUP through KSO:
-         * write bit 0 & read back until
-         * both bits 0(kso bit) & 1 (dev on status) are set
-         */
-        compare_value = SBSDIO_SLPCSR_KEEP_SDIO_ON | SBSDIO_SLPCSR_DEVICE_ON;
-        bmask = compare_value;
-    }
-
-    while (attempts != 0)
-    {
-        /* Reliable KSO bit set/clr:
-         * Sdiod sleep write access appears to be in sync with PMU 32khz clk
-         * just one write attempt may fail,(same is with read ?)
-         * in any case, read it back until it matches written value
-         */
-        result = whd_bus_read_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_SLEEP_CSR, (uint8_t)1,
-                                             &read_value);
-        if ( ( (read_value & bmask) == compare_value ) && (result == WHD_SUCCESS) && (read_value != 0xFF) )
-        {
-            break;
-        }
-
-        cy_rtos_delay_milliseconds( ( uint32_t )KSO_WAIT_MS );
-
-        CHECK_RETURN_IGNORE(whd_bus_write_register_value(whd_driver, BACKPLANE_FUNCTION, (uint32_t)SDIO_SLEEP_CSR,
-                                                         (uint8_t)1, write_value) );
-        attempts--;
-    }
-
-    if (attempts == 0)
-    {
-        WPRINT_WHD_ERROR( ("SDIO bus failed to come up , %s failed at %d \n", __func__, __LINE__) );
-        return WHD_SDIO_BUS_UP_FAIL;
-    }
-    else
-    {
-        return WHD_SUCCESS;
-    }
-}
-
-void whd_wlan_wake_from_host(whd_driver_t whd_driver);
-
-void whd_wlan_wake_from_host(whd_driver_t whd_driver)
-{
-    uint32_t val32 = 0;
-    whd_result_t result;
-
-    result = whd_bus_read_backplane_value(whd_driver, D11_MACCONTROL_REG, D11_MACCONTROL_REG_SIZE, (uint8_t *)&val32);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_read_backplane_value failed\n", __FUNCTION__, __LINE__) );
-    }
-    WPRINT_WHD_DEBUG( ("%s: %d:before: maccontrol: 0x%08x\n", __FUNCTION__, __LINE__, (unsigned int)val32) );
-
-    val32 = val32 | D11_MACCONTROL_REG_WAKE;
-    result = whd_bus_write_backplane_value(whd_driver, D11_MACCONTROL_REG, D11_MACCONTROL_REG_SIZE, val32);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_write_backplane_value failed\n", __FUNCTION__, __LINE__) );
-    }
-    result = whd_bus_read_backplane_value(whd_driver, D11_MACCONTROL_REG, D11_MACCONTROL_REG_SIZE, (uint8_t *)&val32);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s:%d whd_bus_read_backplane_value failed\n", __FUNCTION__, __LINE__) )
-    }
-    WPRINT_WHD_DEBUG( ("%s: %d:after: maccontrol: 0x%08x\n", __FUNCTION__, __LINE__, (unsigned int)val32) );
-}
-
-whd_result_t whd_wlan_bus_complete_ds_wake(whd_driver_t whd_driver, whd_bool_t wake_from_firmware,
-                                           uint32_t wake_event_indication_addr, uint32_t wake_indication_addr,
-                                           uint32_t sdio_control_addr)
-{
-    uint32_t val = 0;
-    uint32_t val1 = 0;
-    uint32_t count = 0;
-    int32_t timeout = 0;
-    /* Get chip number */
-
-    uint16_t wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-
-    if (wlan_chip_id == 43012)
-    {
-        WPRINT_WHD_DEBUG_DS( ("%s: enter: wake_fr_fw=%d\n", __func__, (int )wake_from_firmware) );
-
-        /* Need to do for all wake causes */
-        while (WHD_SUCCESS !=
-               whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_IOEN, (uint8_t)1, SDIO_FUNC_ENABLE_1) )
-        {
-            WPRINT_WHD_DEBUG( ("Retry IOEN write\n") );
-            cy_rtos_delay_milliseconds(10);
-        }
-
-        CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11SHM_ADDR(wake_event_indication_addr), 2,
-                                                  (uint8_t *)&val) );
-        CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11SHM_ADDR(wake_indication_addr), 2, (uint8_t *)&val) );
-
-        if (WHD_TRUE == wake_from_firmware)
-        {
-            WPRINT_WHD_DEBUG_DS( ("%s: CCCR written\n", __func__) );
-
-            /* Read DS1 CTRL STATUS SHM to Check whether HOST MAIL BOX interrupt is triggered due to TX/RX
-             * For RX Cases , Value will be DS1_SLEEP
-             * For TX Cases, Value will be MAC ON or RADIO_PHY_ON
-             */
-            CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11SHM_ADDR(M_DS1_CTRL_STATUS), (uint8_t)2,
-                                                      (uint8_t *)&val) );
-            if (val == DS1_SLEEP)
-            {
-                /* HUDI communication to inform D11 to Process and Exit DS1 not required for D11 Wake cases
-                 * Simply update PMU Resource Mask and Re-download firmware for this case
-                 */
-                WPRINT_WHD_DEBUG_DS( ("%s: D11 wake detected\n", __func__) );
-
-                CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, PMU_MINRESMASK, 1,
-                                                           DEFAULT_43012_MIN_RES_MASK) );
-
-                return WHD_SUCCESS;
-            }
-
-            CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, D11SHM_ADDR(M_DS1_CTRL_SDIO), 2,
-                                                       C_DS1_CTRL_SDIO_DS1_EXIT | C_DS1_CTRL_REQ_VALID) );
-            WPRINT_WHD_DEBUG_DS( ("%s: SDIO ctl written\n", __func__) );
-
-            CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11SHM_ADDR(M_DS1_CTRL_SDIO), (uint8_t)2,
-                                                      (uint8_t *)&val) );
-            WPRINT_WHD_DEBUG_DS( ("%s: M_DS1_CTRL_SDIO = [%x]\n", __func__, (int )val) );
-
-            CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11_MACCONTROL_REG, (uint8_t)2, (uint8_t *)&val1) );
-            WPRINT_WHD_DEBUG_DS( ("%s: before setting wake = [%x]\n", __func__, (int )val1) );
-
-            CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, D11_MACCONTROL_REG, 2,
-                                                       val1 | D11_MACCONTROL_REG_WAKE) );
-            WPRINT_WHD_DEBUG_DS( ("%s: After setting wake= [%x]\n", __func__, (int )val1) );
-
-            while (!(val & C_DS1_CTRL_PROC_DONE) )
-            {
-                CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11SHM_ADDR(M_DS1_CTRL_SDIO), (uint8_t)2,
-                                                          (uint8_t *)&val) );
-                count++;
-                if (count == 1000)
-                {
-                    WPRINT_WHD_ERROR( ("%s: sdio timed out! Aborting\n", __func__) );
-                    return WHD_TIMEOUT;
-                }
-            }
-
-            CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11SHM_ADDR(M_DS1_CTRL_SDIO), (uint8_t)2,
-                                                      (uint8_t *)&val) );
-            WPRINT_WHD_DEBUG_DS( ("%s: M_DS1_CTRL_SDIO after poll = [%x]\n", __func__, (int )val) );
-
-            CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11_MACCONTROL_REG, (uint8_t)2, (uint8_t *)&val1) );
-            WPRINT_WHD_DEBUG_DS( ("%s: D11_MACCONTROL_REG before Clear = [%x]\n", __func__, (int )val1) );
-
-            CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, D11_MACCONTROL_REG, 2,
-                                                       val1 & D11_MACCONTROL_CLEAR_WAKE) );
-            WPRINT_WHD_DEBUG_DS( ("%s: D11_MACCONTROL_REG after Clear = [%x]\n", __func__, (int )val1) );
-
-            CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, PMU_MINRESMASK, 1, DEFAULT_43012_MIN_RES_MASK) );
-            CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, PMU_MINRESMASK, (uint8_t)1, (uint8_t *)&val1) );
-
-            WPRINT_WHD_DEBUG_DS( ("%s: PMU_MINRESMASK = [%x]\n", __func__, (int )val1) );
-        }
-        else
-        {
-            while (WHD_SUCCESS != whd_ensure_wlan_bus_is_up(whd_driver) )
-            {
-                WPRINT_WHD_DEBUG_DS( ("Retrying bus is up\n") );
-            }
-
-            WPRINT_WHD_DEBUG_DS( ("write backplane\n") );
-
-            CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11SHM_ADDR(sdio_control_addr), 2, (uint8_t *)&val) );
-
-            while (WHD_SUCCESS !=
-                   whd_bus_write_backplane_value(whd_driver, D11SHM_ADDR(sdio_control_addr), 2,
-                                                 val | C_DS1_CTRL_SDIO_DS1_EXIT | C_DS1_CTRL_REQ_VALID) )
-            {
-                WPRINT_WHD_DEBUG_DS( ("Retrying backplane write; addr=%x\n",
-                                      (unsigned int )D11SHM_ADDR(sdio_control_addr) ) );
-                cy_rtos_delay_milliseconds(100);
-            }
-
-            WPRINT_WHD_DEBUG_DS( ("wake host\n") );
-            whd_wlan_wake_from_host(whd_driver);
-
-            WPRINT_WHD_DEBUG_DS( ("poll for timeout\n") );
-            /* Poll for PROC_DONE to be set by ucode; timeout after a good amount of time */
-            for (timeout = WHD_WLAN_WAKE_TIMEOUT * 10, val = 0; timeout >= 0;
-                 timeout -= WHD_SHARED_MEMORY_POLLING_DELAY)
-            {
-                whd_result_t read_result =
-                    whd_bus_read_backplane_value(whd_driver, D11SHM_ADDR(sdio_control_addr), 2, (uint8_t *)&val);
-
-                if ( (WHD_SUCCESS != read_result) || !( (val) & C_DS1_CTRL_PROC_DONE ) )
-                {
-                    cy_rtos_delay_milliseconds (WHD_SHARED_MEMORY_POLLING_DELAY);
-                }
-                else
-                {
-                    /* success! */
-                    WPRINT_WHD_DEBUG_DS( ("Ucode has posted DONE\n") );
-                    break;
-                }
-            }
-
-            WPRINT_WHD_DEBUG_DS( ("%s: %d: 0x%08x\n", __func__, __LINE__, (unsigned int)val) );
-
-            if ( (timeout < 0) && !(val & C_DS1_CTRL_PROC_DONE) )
-            {
-                WPRINT_WHD_ERROR( ("%s: Failed to enter DS1 Exit state!\n", __func__) );
-                return WHD_TIMEOUT;
-            }
-        }
-        WPRINT_WHD_DEBUG_DS( ("successfully completed DS wake sequence\n") );
-        return WHD_SUCCESS;
-    }
-    else
-    {
-        UNUSED_PARAMETER(wake_from_firmware);
-        UNUSED_PARAMETER(wake_event_indication_addr);
-        UNUSED_PARAMETER(wake_indication_addr);
-        UNUSED_PARAMETER(sdio_control_addr);
-
-        WPRINT_WHD_DEBUG( ("%s: enter\n", __FUNCTION__) );
-
-        CHECK_RETURN(whd_bus_write_register_value(whd_driver, BUS_FUNCTION, SDIOD_CCCR_IOEN, (uint8_t)1,
-                                                  SDIO_FUNC_ENABLE_1) );
-        WPRINT_WHD_DEBUG( ("%s: CCCR written\n", __FUNCTION__) );
-
-        /* Read DS1 CTRL STATUS SHM to Check whether HOST MAIL BOX interrupt is triggered due to TX/RX
-         * For RX Cases , Value will be DS1_SLEEP
-         * For TX Cases, Value will be MAC ON or RADIO_PHY_ON
-         */
-        CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11SHM_ADDR(M_DS1_CTRL_STATUS), (uint8_t)2,
-                                                  (uint8_t *)&val) );
-        if (val == DS1_SLEEP)
-        {
-            /* HUDI communication to inform D11 to Process and Exit DS1 not required for D11 Wake cases
-             * Simply update PMU Resource Mask and Re-download firmware for this case
-             */
-            CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, PMU_MINRESMASK, 1, DEFAULT_43012_MIN_RES_MASK) );
-            return WHD_SUCCESS;
-        }
-        CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, D11SHM_ADDR(M_DS1_CTRL_SDIO), 2,
-                                                   C_DS1_CTRL_SDIO_DS1_EXIT | C_DS1_CTRL_REQ_VALID) );
-        WPRINT_WHD_DEBUG( ("%s: SDIO ctl written\n", __FUNCTION__) );
-
-        CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11SHM_ADDR(
-                                                      M_DS1_CTRL_SDIO), (uint8_t)2, (uint8_t *)&val) );
-        WPRINT_WHD_DEBUG( ("%s: M_DS1_CTRL_SDIO = [%x]\n", __FUNCTION__, (int)val) );
-
-        CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11_MACCONTROL_REG, (uint8_t)2, (uint8_t *)&val1) );
-        WPRINT_WHD_DEBUG( ("%s: before setting wake = [%x]\n", __FUNCTION__, (int)val1) );
-        CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, D11_MACCONTROL_REG, 2,
-                                                   val1 | D11_MACCONTROL_REG_WAKE) );
-        WPRINT_WHD_DEBUG( ("%s: After setting wake= [%x]\n", __FUNCTION__, (int)val1) );
-
-        while (!(val & C_DS1_CTRL_PROC_DONE) )
-        {
-            CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11SHM_ADDR(M_DS1_CTRL_SDIO), (uint8_t)2,
-                                                      (uint8_t *)&val) );
-            count++;
-            if (count == 1000)
-            {
-                WPRINT_WHD_ERROR( ("%s: sdio timed out! Aborting\n", __FUNCTION__) );
-                return WHD_TIMEOUT;
-            }
-        }
-
-        CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11SHM_ADDR(
-                                                      M_DS1_CTRL_SDIO), (uint8_t)2, (uint8_t *)&val) );
-        WPRINT_WHD_DEBUG( ("%s: M_DS1_CTRL_SDIO after poll = [%x]\n", __FUNCTION__, (int)val) );
-
-        CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, D11_MACCONTROL_REG, (uint8_t)2, (uint8_t *)&val1) );
-        WPRINT_WHD_DEBUG( ("%s: D11_MACCONTROL_REG before Clear = [%x]\n", __FUNCTION__, (int)val1) );
-
-        CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, D11_MACCONTROL_REG, 2,
-                                                   val1 & D11_MACCONTROL_CLEAR_WAKE) );
-        WPRINT_WHD_DEBUG( ("%s: D11_MACCONTROL_REG after Clear = [%x]\n", __FUNCTION__, (int)val1) );
-
-        CHECK_RETURN(whd_bus_write_backplane_value(whd_driver, PMU_MINRESMASK, 1, DEFAULT_43012_MIN_RES_MASK) );
-        CHECK_RETURN(whd_bus_read_backplane_value(whd_driver, PMU_MINRESMASK, (uint8_t)1, (uint8_t *)&val1) );
-        WPRINT_WHD_DEBUG( ("%s: PMU_MINRESMASK = [%x]\n", __FUNCTION__, (int)val1) );
-        return WHD_SUCCESS;
-    }
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_chip_constants.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_chip_constants.c
deleted file mode 100644
index a01a29fb0a..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_chip_constants.c
+++ /dev/null
@@ -1,362 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "whd_chip_constants.h"
-#include "whd_wlioctl.h"
-#include "whd_int.h"
-#include "whd_types_int.h"
-
-
-/******************************************************
-*               Function Definitions
-******************************************************/
-
-uint32_t whd_chip_set_chip_id(whd_driver_t whd_driver, uint16_t id)
-{
-    whd_driver->chip_info.chip_id = id;
-
-    return 0;
-}
-
-uint16_t whd_chip_get_chip_id(whd_driver_t whd_driver)
-{
-    return whd_driver->chip_info.chip_id;
-}
-
-uint32_t get_whd_var(whd_driver_t whd_driver, chip_var_t var)
-{
-    uint32_t val = 0;
-
-    uint16_t wlan_chip_id = whd_chip_get_chip_id(whd_driver);
-    switch (var)
-    {
-        case BUS_CREDIT_DIFF:
-            CHECK_RETURN(get_chip_max_bus_data_credit_diff(wlan_chip_id, &val) );
-            break;
-        case CHIP_RAM_SIZE:
-            CHECK_RETURN(get_chip_ram_size(wlan_chip_id, &val) );
-            break;
-        case ATCM_RAM_BASE_ADDRESS:
-            CHECK_RETURN(get_atcm_ram_base_address(wlan_chip_id, &val) );
-            break;
-        case SOCRAM_SRMEM_SIZE:
-            CHECK_RETURN(get_socsram_srmem_size(wlan_chip_id, &val) );
-            break;
-        case CHANSPEC_BAND_MASK:
-            CHECK_RETURN(get_wl_chanspec_band_mask(wlan_chip_id, &val) );
-            break;
-        case CHANSPEC_BAND_2G:
-            CHECK_RETURN(get_wl_chanspec_band_2G(wlan_chip_id, &val) );
-            break;
-        case CHANSPEC_BAND_5G:
-            CHECK_RETURN(get_wl_chanspec_band_5G(wlan_chip_id, &val) );
-            break;
-        case CHANSPEC_BAND_SHIFT:
-            CHECK_RETURN(get_wl_chanspec_band_shift(wlan_chip_id, &val) );
-            break;
-        case CHANSPEC_BW_10:
-            CHECK_RETURN(get_wl_chanspec_bw_10(wlan_chip_id, &val) );
-            break;
-        case CHANSPEC_BW_20:
-            CHECK_RETURN(get_wl_chanspec_bw_20(wlan_chip_id, &val) );
-            break;
-        case CHANSPEC_BW_40:
-            CHECK_RETURN(get_wl_chanspec_bw_40(wlan_chip_id, &val) );
-            break;
-        case CHANSPEC_BW_MASK:
-            CHECK_RETURN(get_wl_chanspec_bw_mask(wlan_chip_id, &val) );
-            break;
-        case CHANSPEC_BW_SHIFT:
-            CHECK_RETURN(get_wl_chanspec_bw_shift(wlan_chip_id, &val) );
-            break;
-        case CHANSPEC_CTL_SB_LOWER:
-            CHECK_RETURN(get_wl_chanspec_ctl_sb_lower(wlan_chip_id, &val) );
-            break;
-        case CHANSPEC_CTL_SB_UPPER:
-            CHECK_RETURN(get_wl_chanspec_ctl_sb_upper(wlan_chip_id, &val) );
-            break;
-        case CHANSPEC_CTL_SB_NONE:
-            CHECK_RETURN(get_wl_chanspec_ctl_sb_none(wlan_chip_id, &val) );
-            break;
-        case CHANSPEC_CTL_SB_MASK:
-            CHECK_RETURN(get_wl_chanspec_ctl_sb_mask(wlan_chip_id, &val) );
-            break;
-        default:
-            break;
-    }
-
-    return val;
-}
-
-whd_result_t get_chip_max_bus_data_credit_diff(uint16_t wlan_chip_id, uint32_t *credit_diff)
-{
-    *credit_diff = 0;
-    if (wlan_chip_id == 43362)
-    {
-        *credit_diff = 7;
-    }
-    else if (wlan_chip_id == 43455)
-    {
-        *credit_diff = 50;
-    }
-    else
-    {
-        *credit_diff = 20;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_chip_ram_size(uint16_t wlan_chip_id, uint32_t *size)
-{
-    *size = 0;
-    if ( (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) || (wlan_chip_id == 43430) )
-    {
-        *size = (512 * 1024);
-    }
-    else if ( (wlan_chip_id == 43362) || (wlan_chip_id == 4390) )
-    {
-        *size = 0x3C000;
-    }
-    else if (wlan_chip_id == 43909)
-    {
-        *size = 0x90000;
-    }
-    else if (wlan_chip_id == 43012)
-    {
-        *size = 0xA0000;
-    }
-    else
-    {
-        *size = 0x80000;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_atcm_ram_base_address(uint16_t wlan_chip_id, uint32_t *size)
-{
-    *size = 0;
-    if (wlan_chip_id == 43455)
-    {
-        *size = 0x198000;
-    }
-    else
-    {
-        *size = 0;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_socsram_srmem_size(uint16_t wlan_chip_id, uint32_t *mem_size)
-{
-    *mem_size = 0;
-    if ( (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *mem_size = (32 * 1024);
-    }
-    else if (wlan_chip_id == 43430)
-    {
-        *mem_size = (64 * 1024);
-    }
-    else
-    {
-        *mem_size = 0;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_wl_chanspec_band_mask(uint16_t wlan_chip_id, uint32_t *band_mask)
-{
-    *band_mask = 0;
-    if ( (wlan_chip_id == 43362) || (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *band_mask = 0xf000;
-    }
-    else
-    {
-        *band_mask = 0xc000;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_wl_chanspec_band_2G(uint16_t wlan_chip_id, uint32_t *band_2g)
-{
-    *band_2g = 0;
-    if ( (wlan_chip_id == 43362) || (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *band_2g = 0x2000;
-    }
-    else
-    {
-        *band_2g = 0x0000;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_wl_chanspec_band_5G(uint16_t wlan_chip_id, uint32_t *band_5g)
-{
-    *band_5g = 0;
-    if ( (wlan_chip_id == 43362) || (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *band_5g = 0x1000;
-    }
-    else
-    {
-        *band_5g = 0xc000;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_wl_chanspec_band_shift(uint16_t wlan_chip_id, uint32_t *band_shift)
-{
-    *band_shift = 0;
-    if ( (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *band_shift = 12;
-    }
-    else
-    {
-        *band_shift = 14;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_wl_chanspec_bw_10(uint16_t wlan_chip_id, uint32_t *bw_10)
-{
-    *bw_10 = 0;
-    if ( (wlan_chip_id == 43362) || (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *bw_10 = 0x0400;
-    }
-    else
-    {
-        *bw_10 = 0x0800;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_wl_chanspec_bw_20(uint16_t wlan_chip_id, uint32_t *bw_20)
-{
-    *bw_20 = 0;
-    if ( (wlan_chip_id == 43362) || (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *bw_20 = 0x0800;
-    }
-    else
-    {
-        *bw_20 = 0x1000;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_wl_chanspec_bw_40(uint16_t wlan_chip_id, uint32_t *bw_40)
-{
-    *bw_40 = 0;
-    if ( (wlan_chip_id == 43362) || (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *bw_40 = 0x0C00;
-    }
-    else
-    {
-        *bw_40 = 0x1800;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_wl_chanspec_bw_mask(uint16_t wlan_chip_id, uint32_t *bw_mask)
-{
-    *bw_mask = 0;
-    if ( (wlan_chip_id == 43362) || (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *bw_mask = 0x0C00;
-    }
-    else
-    {
-        *bw_mask = 0x3800;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_wl_chanspec_bw_shift(uint16_t wlan_chip_id, uint32_t *bw_shift)
-{
-    *bw_shift = 0;
-    if ( (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *bw_shift = 10;
-    }
-    else
-    {
-        *bw_shift = 11;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_wl_chanspec_ctl_sb_lower(uint16_t wlan_chip_id, uint32_t *sb_lower)
-{
-    *sb_lower = 0;
-    if ( (wlan_chip_id == 43362) || (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *sb_lower = 0x0100;
-    }
-    else
-    {
-        *sb_lower = WL_CHANSPEC_CTL_SB_LLL;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_wl_chanspec_ctl_sb_upper(uint16_t wlan_chip_id, uint32_t *sb_upper)
-{
-    *sb_upper = 0;
-    if ( (wlan_chip_id == 43362) || (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *sb_upper = 0x0200;
-    }
-    else
-    {
-        *sb_upper = WL_CHANSPEC_CTL_SB_LLU;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_wl_chanspec_ctl_sb_none(uint16_t wlan_chip_id, uint32_t *sb_none)
-{
-    *sb_none = 0;
-    if ( (wlan_chip_id == 43362) || (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *sb_none = 0x0300;
-    }
-    else
-    {
-        *sb_none = WL_CHANSPEC_CTL_SB_LLL;
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t get_wl_chanspec_ctl_sb_mask(uint16_t wlan_chip_id, uint32_t *sb_mask)
-{
-    *sb_mask = 0;
-    if ( (wlan_chip_id == 43362) || (wlan_chip_id == 4334) || (wlan_chip_id == 43340) || (wlan_chip_id == 43342) )
-    {
-        *sb_mask = 0x0300;
-    }
-    else
-    {
-        *sb_mask = 0x0700;
-    }
-    return WHD_SUCCESS;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_clm.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_clm.c
deleted file mode 100644
index dfeec0ab02..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_clm.c
+++ /dev/null
@@ -1,172 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Provides generic clm blob file download functionality
- */
-
-#include <stdlib.h>
-#include "whd_clm.h"
-#include "whd_wlioctl.h"
-#include "whd_cdc_bdc.h"
-#include "whd_debug.h"
-#include "whd_int.h"
-#include "whd_buffer_api.h"
-#include "whd_resource_if.h"
-#include "whd_resource_api.h"
-#include "whd_types_int.h"
-
-/******************************************************
-* @cond       Constants
-******************************************************/
-
-/*
-   Generic interface for downloading required data onto the dongle
- */
-static int whd_download_wifi_clm_image(whd_interface_t ifp, const char *iovar, uint16_t flag, uint16_t dload_type,
-                                       unsigned char *dload_buf, uint32_t len)
-{
-    wl_dload_data_t *dload_ptr = (wl_dload_data_t *)dload_buf;
-    unsigned int dload_data_offset;
-    whd_buffer_t buffer;
-    uint8_t *iov_data;
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    dload_data_offset = offsetof(wl_dload_data_t, data);
-    dload_ptr->flag = htod16( (DLOAD_HANDLER_VER << DLOAD_FLAG_VER_SHIFT) | flag );
-    dload_ptr->dload_type = htod16(dload_type);
-    dload_ptr->len = htod32(len - dload_data_offset);
-
-    dload_ptr->crc = 0;
-
-    whd_assert("dload buffer too large", len < 0xffffffff - 8);
-    len = len + 8 - (len % 8);
-
-    iov_data = (uint8_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)len, iovar);
-    CHECK_IOCTL_BUFFER(iov_data);
-    memcpy(iov_data, (uint8_t *)dload_ptr, len);
-    CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL) );
-    return WHD_SUCCESS;
-}
-
-whd_result_t whd_process_clm_data(whd_interface_t ifp)
-{
-    whd_result_t ret = WHD_SUCCESS;
-    uint32_t clm_blob_size;
-    unsigned int size2alloc, data_offset;
-    unsigned char *chunk_buf;
-    uint16_t dl_flag = DL_BEGIN;
-    unsigned int chunk_len;
-    uint32_t size_read;
-    uint8_t *image;
-    uint32_t blocks_count = 0;
-    uint16_t datalen = 0;
-    uint32_t i, j, num_buff;
-    unsigned int transfer_progress;
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    /* clm file size is the initial datalen value which is decremented */
-    ret = whd_resource_size(whd_driver, WHD_RESOURCE_WLAN_CLM, &clm_blob_size);
-
-    if (ret != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Fatal error: download_resource doesn't exist\n") );
-        return ret;
-    }
-
-    ret = whd_get_resource_no_of_blocks(whd_driver, WHD_RESOURCE_WLAN_CLM, &blocks_count);
-    if (ret != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Fatal error: download_resource blocks count not know\n") );
-        return ret;
-    }
-
-    data_offset = offsetof(wl_dload_data_t, data);
-    size2alloc = data_offset + BLOCK_SIZE;
-
-
-    if ( (chunk_buf = (unsigned char *)malloc(size2alloc) ) != NULL )
-    {
-        memset(chunk_buf, 0, size2alloc);
-        transfer_progress = 0;
-        for (i = 0; i < blocks_count; i++)
-        {
-            whd_get_resource_block(whd_driver, WHD_RESOURCE_WLAN_CLM, i, (const uint8_t **)&image, &size_read);
-
-            num_buff = (size_read + BLOCK_SIZE - 1) / BLOCK_SIZE;
-            if (blocks_count != 1)
-                transfer_progress = 0;
-
-            for (j = 0; j < num_buff; j++)
-            {
-                if (size_read >= BLOCK_SIZE)
-                    chunk_len = BLOCK_SIZE;
-                else
-                    chunk_len = (int)size_read;
-                memcpy(chunk_buf + data_offset, &image[transfer_progress], chunk_len);
-
-                if (datalen + chunk_len == clm_blob_size)
-                {
-                    dl_flag |= DL_END;
-                }
-
-                ret = whd_download_wifi_clm_image(ifp, IOVAR_STR_CLMLOAD, dl_flag, DL_TYPE_CLM, chunk_buf,
-                                                  data_offset + chunk_len);
-                dl_flag &= (uint16_t) ~DL_BEGIN;
-                transfer_progress += chunk_len;
-                size_read = size_read - chunk_len;
-                datalen += chunk_len;
-            }
-        }
-
-        free(chunk_buf);
-        if (ret != WHD_SUCCESS)
-        {
-            whd_result_t ret_clmload_status;
-            whd_buffer_t buffer;
-            whd_buffer_t response;
-            void *data;
-
-            WPRINT_WHD_DEBUG( ("clmload (%" PRIu32 " byte file) failed with return %" PRIu32 "; ", clm_blob_size,
-                               ret) );
-            data = (int *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, 4, IOVAR_STR_CLMLOAD_STATUS);
-            CHECK_IOCTL_BUFFER(data);
-            ret_clmload_status = whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response);
-            if (ret_clmload_status != WHD_SUCCESS)
-            {
-                WPRINT_WHD_DEBUG( ("clmload_status failed with return %lu\n", ret_clmload_status) );
-            }
-            else
-            {
-                uint8_t *clmload_status = (uint8_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, response);
-                if (clmload_status != NULL)
-                {
-                    WPRINT_WHD_DEBUG( ("clmload_status is %d\n", *clmload_status) );
-                    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-                }
-            }
-        }
-    }
-    else
-    {
-        WPRINT_WHD_ERROR( ("Memory allocation failure, %s failed at %d \n", __func__, __LINE__) );
-        ret = WHD_MALLOC_FAILURE;
-    }
-
-    return ret;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_debug.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_debug.c
deleted file mode 100644
index 577ea86d87..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_debug.c
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "whd_debug.h"
-#include "whd_int.h"
-#include "bus_protocols/whd_bus_protocol_interface.h"
-
-/******************************************************
-*             Constants
-******************************************************/
-
-/******************************************************
-*             Structures
-******************************************************/
-
-/******************************************************
-*             Variables
-******************************************************/
-
-/******************************************************
-*             Function definitions
-******************************************************/
-void whd_init_stats(whd_driver_t whd_driver)
-{
-    memset(&whd_driver->whd_stats, 0, sizeof(whd_driver->whd_stats) );
-}
-
-uint32_t whd_print_stats(whd_driver_t whd_driver, whd_bool_t reset_after_print)
-{
-    CHECK_DRIVER_NULL(whd_driver);
-
-    WPRINT_MACRO( ("WHD Stats.. \n"
-                   "tx_total:%" PRIu32 ", rx_total:%" PRIu32 ", tx_no_mem:%" PRIu32 ", rx_no_mem:%" PRIu32 "\n"
-                   "tx_fail:%" PRIu32 ", no_credit:%" PRIu32 ", flow_control:%" PRIu32 "\n",
-                   whd_driver->whd_stats.tx_total, whd_driver->whd_stats.rx_total,
-                   whd_driver->whd_stats.tx_no_mem, whd_driver->whd_stats.rx_no_mem,
-                   whd_driver->whd_stats.tx_fail, whd_driver->whd_stats.no_credit,
-                   whd_driver->whd_stats.flow_control) );
-
-    if (reset_after_print == WHD_TRUE)
-    {
-        memset(&whd_driver->whd_stats, 0, sizeof(whd_driver->whd_stats) );
-    }
-
-    CHECK_RETURN(whd_bus_print_stats(whd_driver, reset_after_print) );
-    return WHD_SUCCESS;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_events.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_events.c
deleted file mode 100644
index 0d7b764400..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_events.c
+++ /dev/null
@@ -1,475 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "whd_int.h"
-#include "whd_cdc_bdc.h"
-#include "whd_events_int.h"
-#include "cyabs_rtos.h"
-#include "whd_network_types.h"
-#include "whd_types_int.h"
-#include "whd_wlioctl.h"
-#include "whd_thread_internal.h"
-#include "whd_buffer_api.h"
-
-/******************************************************
-*        Constants
-******************************************************/
-/******************************************************
-*             Macros
-******************************************************/
-/* bit map related macros */
-#define  NBBY  8  /* 8 bits per byte */
-#define  setbit(a, i)   ( ( (uint8_t *)a )[(int)(i) / (int)(NBBY)] |= (uint8_t)(1 << ( (i) % NBBY ) ) )
-#define  clrbit(a, i)   ( ( (uint8_t *)a )[(int)(i) / (int)(NBBY)] &= (uint8_t) ~(1 << ( (i) % NBBY ) ) )
-#define  isset(a, i)    ( ( (const uint8_t *)a )[(int)(i) / (int)(NBBY)]& (1 << ( (i) % NBBY ) ) )
-#define  isclr(a, i)    ( ( ( (const uint8_t *)a )[(int)(i) / (int)(NBBY)]& (1 << ( (i) % NBBY ) ) ) == 0 )
-
-/******************************************************
-*             Local Structures
-******************************************************/
-
-/******************************************************
-*             Static Variables
-******************************************************/
-
-/******************************************************
-*             Static Function Prototypes
-******************************************************/
-/* helper function for event messages ext API */
-static uint8_t *whd_management_alloc_event_msgs_buffer(whd_interface_t ifp, whd_buffer_t *buffer);
-static uint8_t whd_find_number_of_events(const whd_event_num_t *event_nums);
-
-/******************************************************
-*             Static Functions
-******************************************************/
-
-static uint8_t whd_find_number_of_events(const whd_event_num_t *event_nums)
-{
-    uint8_t count = 0;
-
-    while (*event_nums != WLC_E_NONE)
-    {
-        count++;
-        event_nums++;
-
-        if (count >= WHD_MAX_EVENT_SUBSCRIPTION)
-            return 0;
-    }
-    return count + 1;
-}
-
-/**
- * Registers locally a handler to receive event callbacks.
- * Does not notify Wi-Fi about event subscription change.
- * Can be used to refresh local callbacks (e.g. after deep-sleep)
- * if Wi-Fi is already notified about them.
- *
- * This function registers a callback handler to be notified when
- * a particular event is received.
- *
- * @note : Currently there is a limit to the number of simultaneously
- *         registered events
- *
- * @param ifp                 Pointer to handle instance of whd interface
- * @param event_nums          An array of event types that is to trigger the handler.
- *                            The array must be terminated with a WLC_E_NONE event
- *                            See @ref whd_event_num_t for available events
- * @param handler_func        A function pointer to the new handler callback,
- *                            or NULL if callbacks are to be disabled for the given event type
- * @param handler_user_data   A pointer value which will be passed to the event handler function
- *                            at the time an event is triggered (NULL is allowed)
- * @param[out] *event_index   entry where the event handler is registered in the list
- *
- * @return WHD result code
- */
-whd_result_t whd_management_set_event_handler_locally(whd_interface_t ifp, const whd_event_num_t *event_nums,
-                                                      whd_event_handler_t handler_func,
-                                                      void *handler_user_data, uint16_t *event_index)
-{
-    uint16_t entry = (uint16_t)0xFF;
-    uint16_t i;
-    whd_driver_t whd_driver = ifp->whd_driver;
-    whd_cdc_bdc_info_t *cdc_bdc_info = &whd_driver->cdc_bdc_info;
-    uint8_t num_of_events;
-    num_of_events = whd_find_number_of_events(event_nums);
-
-    if (num_of_events <= 1)
-    {
-        WPRINT_WHD_ERROR( ("Exceeded the maximum event subscription/no event subscribed\n") );
-        return WHD_UNFINISHED;
-    }
-
-    /* Find an existing matching entry OR the next empty entry */
-    for (i = 0; i < (uint16_t)WHD_EVENT_HANDLER_LIST_SIZE; i++)
-    {
-        /* Find a matching event list OR the first empty event entry */
-        if (!(memcmp(cdc_bdc_info->whd_event_list[i].events, event_nums,
-                     num_of_events * (sizeof(whd_event_num_t) ) ) ) )
-        {
-            /* Check if all the data already matches */
-            if ( (cdc_bdc_info->whd_event_list[i].handler           == handler_func) &&
-                 (cdc_bdc_info->whd_event_list[i].handler_user_data == handler_user_data) &&
-                 (cdc_bdc_info->whd_event_list[i].ifidx == ifp->ifidx) )
-            {
-                /* send back the entry where the handler is added */
-                *event_index = i;
-                return WHD_SUCCESS;
-            }
-        }
-        else if ( (entry == (uint16_t)0xFF) && (cdc_bdc_info->whd_event_list[i].event_set == WHD_FALSE) )
-        {
-            entry = i;
-        }
-    }
-
-    /* Check if handler function was provided */
-    if (handler_func != NULL)
-    {
-        /* Check if an empty entry was not found */
-        if (entry == (uint16_t)0xFF)
-        {
-            WPRINT_WHD_DEBUG( ("Out of space in event handlers table - try increasing WHD_EVENT_HANDLER_LIST_SIZE\n") );
-            return WHD_OUT_OF_EVENT_HANDLER_SPACE;
-        }
-
-        /* Add the new handler in at the free space */
-        memcpy (cdc_bdc_info->whd_event_list[entry].events, event_nums, num_of_events * (sizeof(whd_event_num_t) ) );
-        cdc_bdc_info->whd_event_list[entry].handler           = handler_func;
-        cdc_bdc_info->whd_event_list[entry].handler_user_data = handler_user_data;
-        cdc_bdc_info->whd_event_list[entry].ifidx             = ifp->ifidx;
-        cdc_bdc_info->whd_event_list[entry].event_set         = WHD_TRUE;
-
-        /* send back the entry where the handler is added */
-        *event_index = entry;
-    }
-    else
-    {
-        WPRINT_WHD_ERROR( ("Event handler callback function is NULL/not provided to register\n") );
-        return WHD_BADARG;
-    }
-
-    return WHD_SUCCESS;
-}
-
-/* allocates memory for the needed iovar and returns a pointer to the event mask */
-static uint8_t *whd_management_alloc_event_msgs_buffer(whd_interface_t ifp, whd_buffer_t *buffer)
-{
-    uint16_t i;
-    uint16_t j;
-    whd_bool_t use_extended_evt       = WHD_FALSE;
-    uint32_t max_event                  = 0;
-    eventmsgs_ext_t *eventmsgs_ext_data = NULL;
-    uint32_t *data                      = NULL;
-    whd_driver_t whd_driver = ifp->whd_driver;
-    whd_cdc_bdc_info_t *cdc_bdc_info = &whd_driver->cdc_bdc_info;
-
-    /* Check to see if event that's set requires more than 128 bit */
-    for (i = 0; i < (uint16_t)WHD_EVENT_HANDLER_LIST_SIZE; i++)
-    {
-        if (cdc_bdc_info->whd_event_list[i].event_set)
-        {
-            for (j = 0; cdc_bdc_info->whd_event_list[i].events[j] != WLC_E_NONE; j++)
-            {
-                uint32_t event_value = cdc_bdc_info->whd_event_list[i].events[j];
-                if (event_value > 127)
-                {
-                    use_extended_evt = WHD_TRUE;
-                    if (event_value > max_event)
-                    {
-                        max_event = event_value;
-                    }
-                    /* keep going to get highest value */
-                }
-            }
-        }
-    }
-
-    if (WHD_FALSE == use_extended_evt)
-    {
-        /* use old iovar for backwards compat */
-        data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, buffer, (uint16_t)WL_EVENTING_MASK_LEN + 4,
-                                                    "bsscfg:" IOVAR_STR_EVENT_MSGS);
-
-        if (NULL == data)
-        {
-            return NULL;
-        }
-
-        data[0] = ifp->bsscfgidx;
-
-        return (uint8_t *)&data[1];
-    }
-    else
-    {
-        uint8_t mask_len   = (uint8_t)( (max_event + 8) / 8 );
-        data =
-            (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, buffer,
-                                                 (uint16_t)(sizeof(eventmsgs_ext_t) + mask_len + 4),
-                                                 "bsscfg:" IOVAR_STR_EVENT_MSGS_EXT);
-
-        if (NULL == data)
-        {
-            return NULL;
-        }
-
-        data[0] = ifp->bsscfgidx;
-
-        eventmsgs_ext_data = (eventmsgs_ext_t *)&data[1];
-
-        memset(eventmsgs_ext_data, 0, sizeof(*eventmsgs_ext_data) );
-        eventmsgs_ext_data->ver     = EVENTMSGS_VER;
-        eventmsgs_ext_data->command = EVENTMSGS_SET_MASK;
-        eventmsgs_ext_data->len     = mask_len;
-        return eventmsgs_ext_data->mask;
-    }
-}
-
-/**
- * Registers a handler to receive event callbacks.
- * Subscribe locally and notify Wi-Fi about subscription.
- *
- * This function registers a callback handler to be notified when
- * a particular event is received.
- *
- * @note : Currently there is a limit to the number of simultaneously
- *         registered events
- *
- * @param ifp                 Pointer to handle instance of whd interface
- * @param event_nums          An array of event types that is to trigger the handler.
- *                            The array must be terminated with a WLC_E_NONE event
- *                            See @ref whd_event_num_t for available events
- * @param handler_func        A function pointer to the new handler callback
- * @param handler_user_data   A pointer value which will be passed to the event handler function
- *                            at the time an event is triggered (NULL is allowed)
- * @param[out] *event_index   entry where the event handler is registered in the list
- *
- * @return WHD result code
- */
-whd_result_t whd_management_set_event_handler(whd_interface_t ifp, const whd_event_num_t *event_nums,
-                                              whd_event_handler_t handler_func,
-                                              void *handler_user_data, uint16_t *event_index)
-{
-    whd_buffer_t buffer;
-    uint8_t *event_mask;
-    uint16_t i;
-    uint16_t j;
-    whd_result_t res;
-    whd_driver_t whd_driver;
-    whd_cdc_bdc_info_t *cdc_bdc_info;
-    whd_interface_t prim_ifp;
-
-    if (ifp == NULL)
-    {
-        return WHD_UNKNOWN_INTERFACE;
-    }
-
-    if (!event_nums || !event_index)
-    {
-        WPRINT_WHD_ERROR( ("Event list to be registered is NULL/Event index is NULL") );
-        return WHD_BADARG;
-    }
-
-    whd_driver = ifp->whd_driver;
-    cdc_bdc_info = &whd_driver->cdc_bdc_info;
-    prim_ifp = whd_get_primary_interface(whd_driver);
-
-    if (prim_ifp == NULL)
-    {
-        return WHD_UNKNOWN_INTERFACE;
-    }
-
-    /* Acquire mutex preventing multiple threads accessing the handler at the same time */
-    res = cy_rtos_get_semaphore(&cdc_bdc_info->event_list_mutex, CY_RTOS_NEVER_TIMEOUT, WHD_FALSE);
-    if (res != WHD_SUCCESS)
-    {
-        return res;
-    }
-
-    /* Set event handler locally  */
-    res = whd_management_set_event_handler_locally(ifp, event_nums, handler_func, handler_user_data, event_index);
-    if (res != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Error in setting event handler locally, %s failed at %d \n", __func__, __LINE__) );
-        goto set_event_handler_exit;
-    }
-
-    /* Send the new event mask value to the wifi chip */
-    event_mask = whd_management_alloc_event_msgs_buffer(ifp, &buffer);
-
-    if (NULL == event_mask)
-    {
-        res = WHD_BUFFER_UNAVAILABLE_PERMANENT;
-        WPRINT_WHD_ERROR( ("Buffer unavailable permanently, %s failed at %d \n", __func__, __LINE__) );
-        goto set_event_handler_exit;
-    }
-
-    /* Keep the wlan awake while we set the event_msgs */
-    WHD_WLAN_KEEP_AWAKE(whd_driver);
-
-    /* Set the event bits for each event from every handler */
-    memset(event_mask, 0, (size_t)WL_EVENTING_MASK_LEN);
-    for (i = 0; i < (uint16_t)WHD_EVENT_HANDLER_LIST_SIZE; i++)
-    {
-        if (cdc_bdc_info->whd_event_list[i].event_set)
-        {
-            for (j = 0; cdc_bdc_info->whd_event_list[i].events[j] != WLC_E_NONE; j++)
-            {
-                setbit(event_mask, cdc_bdc_info->whd_event_list[i].events[j]);
-            }
-        }
-    }
-
-    /* set the event_list_mutex from calling thread before sending iovar
-     * as the RX thread also waits on this Mutex when an ASYNC Event received
-     * causing deadlock
-     */
-    CHECK_RETURN(cy_rtos_set_semaphore(&cdc_bdc_info->event_list_mutex, WHD_FALSE) );
-
-    CHECK_RETURN(whd_cdc_send_iovar(prim_ifp, CDC_SET, buffer, 0) );
-
-    /* The wlan chip can sleep from now on */
-    WHD_WLAN_LET_SLEEP(whd_driver);
-    return WHD_SUCCESS;
-
-set_event_handler_exit:
-    CHECK_RETURN(cy_rtos_set_semaphore(&cdc_bdc_info->event_list_mutex, WHD_FALSE) );
-    return res;
-}
-
-whd_result_t whd_wifi_set_event_handler(whd_interface_t ifp, const uint32_t *event_type,
-                                        whd_event_handler_t handler_func,
-                                        void *handler_user_data, uint16_t *event_index)
-{
-    whd_buffer_t buffer;
-    uint8_t *event_mask;
-    uint16_t i;
-    uint16_t j;
-    whd_result_t res;
-    whd_driver_t whd_driver;
-    whd_cdc_bdc_info_t *cdc_bdc_info;
-    whd_interface_t prim_ifp;
-
-    if (ifp == NULL)
-    {
-        return WHD_UNKNOWN_INTERFACE;
-    }
-
-    if (!event_type || !event_index)
-    {
-        WPRINT_WHD_ERROR( ("Event list to be registered is NULL/Event index is NULL") );
-        return WHD_BADARG;
-    }
-
-    whd_driver = ifp->whd_driver;
-    cdc_bdc_info = &whd_driver->cdc_bdc_info;
-    prim_ifp = whd_get_primary_interface(whd_driver);
-
-    if (prim_ifp == NULL)
-    {
-        return WHD_UNKNOWN_INTERFACE;
-    }
-
-    /* Acquire mutex preventing multiple threads accessing the handler at the same time */
-    res = cy_rtos_get_semaphore(&cdc_bdc_info->event_list_mutex, CY_RTOS_NEVER_TIMEOUT, WHD_FALSE);
-    if (res != WHD_SUCCESS)
-    {
-        return res;
-    }
-
-    /* Set event handler locally  */
-    res = whd_management_set_event_handler_locally(ifp, (whd_event_num_t *)event_type, handler_func, handler_user_data,
-                                                   event_index);
-    if (res != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Error in setting event handler locally, %s failed at %d \n", __func__, __LINE__) );
-        goto set_event_handler_exit;
-    }
-
-    /* Send the new event mask value to the wifi chip */
-    event_mask = whd_management_alloc_event_msgs_buffer(ifp, &buffer);
-
-    if (NULL == event_mask)
-    {
-        res = WHD_BUFFER_UNAVAILABLE_PERMANENT;
-        WPRINT_WHD_ERROR( ("Buffer unavailable permanently, %s failed at %d \n", __func__, __LINE__) );
-        goto set_event_handler_exit;
-    }
-
-    /* Keep the wlan awake while we set the event_msgs */
-    WHD_WLAN_KEEP_AWAKE(whd_driver);
-
-    /* Set the event bits for each event from every handler */
-    memset(event_mask, 0, (size_t)WL_EVENTING_MASK_LEN);
-    for (i = 0; i < (uint16_t)WHD_EVENT_HANDLER_LIST_SIZE; i++)
-    {
-        if (cdc_bdc_info->whd_event_list[i].event_set)
-        {
-            for (j = 0; cdc_bdc_info->whd_event_list[i].events[j] != WLC_E_NONE; j++)
-            {
-                setbit(event_mask, cdc_bdc_info->whd_event_list[i].events[j]);
-            }
-        }
-    }
-
-    /* set the event_list_mutex from calling thread before sending iovar
-     * as the RX thread also waits on this Mutex when an ASYNC Event received
-     * causing deadlock
-     */
-    CHECK_RETURN(cy_rtos_set_semaphore(&cdc_bdc_info->event_list_mutex, WHD_FALSE) );
-
-    CHECK_RETURN(whd_cdc_send_iovar(prim_ifp, CDC_SET, buffer, 0) );
-
-    /* The wlan chip can sleep from now on */
-    WHD_WLAN_LET_SLEEP(whd_driver);
-    return WHD_SUCCESS;
-
-set_event_handler_exit:
-    CHECK_RETURN(cy_rtos_set_semaphore(&cdc_bdc_info->event_list_mutex, WHD_FALSE) );
-    return res;
-}
-
-uint32_t whd_wifi_deregister_event_handler(whd_interface_t ifp, uint16_t event_index)
-{
-    whd_driver_t whd_driver;
-    whd_cdc_bdc_info_t *cdc_bdc_info;
-
-    if (ifp == NULL)
-    {
-        return WHD_UNKNOWN_INTERFACE;
-    }
-
-    whd_driver = ifp->whd_driver;
-    cdc_bdc_info = &whd_driver->cdc_bdc_info;
-
-    if (event_index < WHD_EVENT_HANDLER_LIST_SIZE)
-    {
-        memset(cdc_bdc_info->whd_event_list[event_index].events, 0xFF,
-               (sizeof(cdc_bdc_info->whd_event_list[event_index].events) ) );
-        cdc_bdc_info->whd_event_list[event_index].handler = NULL;
-        cdc_bdc_info->whd_event_list[event_index].handler_user_data = NULL;
-        cdc_bdc_info->whd_event_list[event_index].event_set = WHD_FALSE;
-        return WHD_SUCCESS;
-    }
-    if (event_index == 0xFF)
-    {
-        WPRINT_WHD_INFO( ("Event handler not registered \n") );
-        return WHD_SUCCESS;
-    }
-    WPRINT_WHD_DEBUG( ("Invalid event index received to deregister the event handler \n") );
-    return WHD_BADARG;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_logging.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_logging.c
deleted file mode 100644
index 2766f75111..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_logging.c
+++ /dev/null
@@ -1,112 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <stdio.h>
-#include <string.h>
-#include <stdarg.h>
-#include "whd_debug.h"
-
-#ifdef WHD_LOGGING_BUFFER_ENABLE
-
-#ifndef LOGGING_BUFFER_SIZE
-#error LOGGING_BUFFER_SIZE is not defined
-#endif  /* LOGGING_BUFFER_SIZE */
-whd_logging_t logbuf;
-
-int whd_buffer_printf(const char *format, ...)
-{
-    int potential_num_written = 0;
-    va_list args;
-    va_start (args, format);
-
-    potential_num_written = vsnprintf (&(logbuf.buffer[logbuf.buffer_write]),
-                                       (size_t)(LOGGING_BUFFER_SIZE - (logbuf.buffer_write) ) + 1, format, args);
-
-    if (potential_num_written > (int)(LOGGING_BUFFER_SIZE - (logbuf.buffer_write) ) )
-    {
-        /* full print did not fit in buffer - wipe what was just written
-           and reprint at start of buffer
-         */
-        memset(&(logbuf.buffer[logbuf.buffer_write]), 0xf, (size_t)(LOGGING_BUFFER_SIZE - (logbuf.buffer_write) ) );
-
-        logbuf.buffer_write = 0;
-        potential_num_written = vsnprintf (&(logbuf.buffer[logbuf.buffer_write]),
-                                           (size_t)(LOGGING_BUFFER_SIZE - (logbuf.buffer_write) ) + 1, format, args);
-
-        logbuf.buffer_write += (unsigned)potential_num_written;
-        logbuf.buffer_write %= LOGGING_BUFFER_SIZE;
-
-        if (logbuf.roll_over)
-            logbuf.over_write = WHD_TRUE;
-
-        logbuf.roll_over = WHD_TRUE;
-
-        if ( (logbuf.roll_over) && (logbuf.buffer_read < (logbuf.buffer_write) ) )
-        {
-            logbuf.buffer_read = logbuf.buffer_write;
-        }
-        if (logbuf.over_write && (logbuf.buffer_read != (logbuf.buffer_write) ) )
-        {
-            logbuf.buffer_read = (logbuf.buffer_write);
-        }
-    }
-    else
-    {
-        logbuf.buffer_write += (unsigned)potential_num_written;
-
-        if ( (logbuf.buffer_write) >= LOGGING_BUFFER_SIZE )
-        {
-            logbuf.buffer_write %= LOGGING_BUFFER_SIZE;
-
-            if (logbuf.roll_over)
-                logbuf.over_write = WHD_TRUE;
-
-            logbuf.roll_over = WHD_TRUE;
-        }
-
-        if (logbuf.roll_over && (logbuf.buffer_read < logbuf.buffer_write) )
-        {
-            logbuf.buffer_read = logbuf.buffer_write;
-        }
-        if (logbuf.over_write && (logbuf.buffer_read != logbuf.buffer_write) )
-        {
-            logbuf.buffer_read = logbuf.buffer_write;
-        }
-    }
-
-    va_end (args);
-    return potential_num_written;
-}
-
-void whd_print_logbuffer(void)
-{
-    while (logbuf.roll_over || logbuf.over_write || (logbuf.buffer_read != logbuf.buffer_write) )
-    {
-        logbuf.roll_over = logbuf.over_write = WHD_FALSE;
-
-        while (logbuf.buffer[logbuf.buffer_read] == 0xf)
-        {
-            logbuf.buffer_read = (logbuf.buffer_read + 1) % LOGGING_BUFFER_SIZE;
-        }
-
-        putchar(logbuf.buffer[logbuf.buffer_read]);
-        logbuf.buffer_read = (logbuf.buffer_read + 1) % LOGGING_BUFFER_SIZE;
-    }
-}
-
-#endif /* ifdef WHD_LOGGING_BUFFER_ENABLE */
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_management.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_management.c
deleted file mode 100644
index 7530b7b811..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_management.c
+++ /dev/null
@@ -1,478 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Implements initialisation and other management functions for WHD system
- *
- */
-
-#include <stdlib.h>
-#include <string.h>
-#include "bus_protocols/whd_bus_common.h"
-#include "bus_protocols/whd_bus_protocol_interface.h"
-#include "whd_debug.h"
-#include "whd_events_int.h"
-#include "whd_int.h"
-#include "whd_chip.h"
-#include "whd_sdpcm.h"
-#include "whd_wifi_api.h"
-#include "whd_clm.h"
-#include "whd_wlioctl.h"
-#include "whd_types_int.h"
-
-/******************************************************
-*             Constants
-******************************************************/
-
-#define MAX_POST_SET_COUNTRY_RETRY  3
-
-#define MINIMUM_WHD_STACK_SIZE        (1024 + 1200 + 2500)
-
-#define DEFAULT_PM2_SLEEP_RET_TIME  200
-/******************************************************
-*             Static Variables
-******************************************************/
-
-/******************************************************
-*             Function definitions
-******************************************************/
-whd_result_t whd_management_wifi_platform_init(whd_driver_t whd_driver, whd_country_code_t country,
-                                               whd_bool_t resume_after_deep_sleep);
-void whd_wifi_bus_irq_handle(void *handler_arg, uint32_t event);
-
-whd_interface_t whd_get_primary_interface(whd_driver_t whd_driver)
-{
-    if (whd_driver->iflist[0] != NULL)
-    {
-        return whd_driver->iflist[0];
-    }
-    return NULL;
-}
-
-whd_result_t whd_add_interface(whd_driver_t whd_driver, uint8_t bsscfgidx, uint8_t ifidx,
-                               const char *name, whd_mac_t *mac_addr,  whd_interface_t *ifpp)
-{
-    whd_interface_t ifp;
-
-    if (!whd_driver || !ifpp)
-    {
-        WPRINT_WHD_ERROR( ("Invalid param in func %s at line %d \n",
-                           __func__, __LINE__) );
-        return WHD_WLAN_BADARG;
-    }
-
-    if (bsscfgidx < WHD_INTERFACE_MAX)
-    {
-        if (whd_driver->iflist[bsscfgidx] != NULL)
-        {
-            *ifpp = whd_driver->iflist[bsscfgidx];
-            return WHD_SUCCESS;
-        }
-
-        if ( (ifp = (whd_interface_t)malloc(sizeof(struct whd_interface) ) ) != NULL )
-        {
-            memset(ifp, 0, (sizeof(struct whd_interface) ) );
-            *ifpp = ifp;
-            ifp->whd_driver = whd_driver;
-
-            /* Add a interface name */
-            /* strncpy doesn't terminate with null if the src string is long */
-            ifp->if_name[WHD_MSG_IFNAME_MAX - 1] = '\0';
-            strncpy(ifp->if_name, name, sizeof(ifp->if_name) - 1);
-            memset(ifp->event_reg_list, WHD_EVENT_NOT_REGISTERED, sizeof(ifp->event_reg_list) );
-            /* Primary interface takes 0 as default */
-            ifp->ifidx = ifidx;
-            ifp->bsscfgidx = bsscfgidx;
-
-            if (mac_addr != NULL)
-                memcpy(ifp->mac_addr.octet, mac_addr->octet, sizeof(whd_mac_t) );
-            else
-                memset(ifp->mac_addr.octet, 0, sizeof(whd_mac_t) );
-
-            whd_driver->iflist[bsscfgidx] = ifp;
-            whd_driver->if2ifp[ifidx] = bsscfgidx;
-        }
-        else
-        {
-            return WHD_MALLOC_FAILURE;
-        }
-
-        return WHD_SUCCESS;
-    }
-    return WHD_INVALID_INTERFACE;
-}
-
-whd_result_t whd_add_primary_interface(whd_driver_t whd_driver, whd_interface_t *ifpp)
-{
-    return whd_add_interface(whd_driver, 0, 0, "wlan0", NULL, ifpp);
-}
-
-uint32_t whd_add_secondary_interface(whd_driver_t whd_driver, whd_mac_t *mac_addr, whd_interface_t *ifpp)
-{
-    return whd_add_interface(whd_driver, 1, 1, "wlan1", mac_addr, ifpp);
-}
-
-uint32_t whd_init(whd_driver_t *whd_driver_ptr, whd_init_config_t *whd_init_config,
-                  whd_resource_source_t *resource_ops, whd_buffer_funcs_t *buffer_ops,
-                  whd_netif_funcs_t *network_ops)
-{
-    whd_driver_t whd_drv;
-
-    if (!whd_driver_ptr || !buffer_ops || !network_ops || !resource_ops || !whd_init_config)
-    {
-        WPRINT_WHD_ERROR( ("Invalid param in func %s at line %d \n",
-                           __func__, __LINE__) );
-        return WHD_WLAN_BADARG;
-    }
-    if (whd_init_config->thread_stack_size <  MINIMUM_WHD_STACK_SIZE)
-    {
-        WPRINT_WHD_INFO( ("Stack size is less than minimum stack size required.\n") );
-        return WHD_WLAN_BUFTOOSHORT;
-    }
-
-    if ( (whd_drv = (whd_driver_t)malloc(sizeof(struct whd_driver) ) ) != NULL )
-    {
-        memset(whd_drv, 0, sizeof(struct whd_driver) );
-        *whd_driver_ptr = whd_drv;
-        whd_drv->buffer_if = buffer_ops;
-        whd_drv->network_if = network_ops;
-        whd_drv->resource_if = resource_ops;
-        whd_bus_common_info_init(whd_drv);
-        whd_thread_info_init(whd_drv, whd_init_config);
-        whd_cdc_bdc_info_init(whd_drv);
-        whd_internal_info_init(whd_drv);
-        whd_ap_info_init(whd_drv);
-        //whd_wifi_sleep_info_init(whd_drv);
-        whd_wifi_chip_info_init(whd_drv);
-
-        whd_drv->bus_gspi_32bit = WHD_FALSE;
-
-        if (whd_init_config->country == 0)
-            whd_drv->country = WHD_COUNTRY_UNITED_STATES;
-        else
-            whd_drv->country = whd_init_config->country;
-    }
-    else
-    {
-        return WHD_MALLOC_FAILURE;
-    }
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_deinit(whd_interface_t ifp)
-{
-    uint8_t i;
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    if (whd_driver->internal_info.whd_wlan_status.state == WLAN_UP)
-    {
-        CHECK_RETURN(whd_wifi_set_ioctl_buffer(ifp, WLC_DOWN, NULL, 0) );
-        whd_driver->internal_info.whd_wlan_status.state = WLAN_DOWN;
-    }
-    for (i = 0; i < WHD_INTERFACE_MAX; i++)
-    {
-        if (whd_driver->iflist[i] != NULL)
-        {
-            free(whd_driver->iflist[i]);
-            whd_driver->iflist[i] = NULL;
-        }
-    }
-
-    whd_cdc_bdc_info_deinit(whd_driver);
-    whd_bus_common_info_deinit(whd_driver);
-#ifdef WLAN_BUS_TYPE_SDIO
-    whd_bus_sdio_detach(whd_driver);
-#endif
-#ifdef WLAN_BUS_TYPE_SPI
-    whd_bus_spi_detach(whd_driver);
-#endif
-    free(whd_driver);
-
-    return WHD_SUCCESS;
-}
-
-/**
- * Initialize Wi-Fi platform
- *
- * - Initializes the required parts of the hardware platform
- *   i.e. pins for SDIO/SPI, interrupt, reset, power etc.
- *
- * - Initializes the WHD thread which arbitrates access
- *   to the SDIO/SPI bus
- *
- * @return WHD_SUCCESS if initialization is successful, error code otherwise
- */
-
-whd_result_t whd_management_wifi_platform_init(whd_driver_t whd_driver, whd_country_code_t country,
-                                               whd_bool_t resume_after_deep_sleep)
-{
-    whd_result_t retval;
-
-    whd_driver->internal_info.whd_wlan_status.country_code = country;
-
-    if (resume_after_deep_sleep == WHD_TRUE)
-    {
-        retval = ( whd_result_t )whd_bus_resume_after_deep_sleep(whd_driver);
-    }
-    else
-    {
-        whd_bus_init_stats(whd_driver);
-        retval = ( whd_result_t )whd_bus_init(whd_driver);
-    }
-
-    if (retval != WHD_SUCCESS)
-    {
-        /* May have been due to user abort */
-        WPRINT_WHD_INFO( ("Could not initialize bus\n") );
-        return retval;
-    }
-
-    /* WLAN device is now powered up. Change state from OFF to DOWN */
-    whd_driver->internal_info.whd_wlan_status.state = WLAN_DOWN;
-
-
-    retval = whd_thread_init(whd_driver);
-    if (retval != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Could not initialize WHD thread\n") );
-        return retval;
-    }
-
-    return WHD_SUCCESS;
-}
-
-/**
- * Turn on the Wi-Fi device
- *
- * - Initialize Wi-Fi device
- *
- * - Program various WiFi parameters and modes
- *
- * @return WHD_SUCCESS if initialization is successful, error code otherwise
- */
-uint32_t whd_wifi_on(whd_driver_t whd_driver, whd_interface_t *ifpp)
-{
-    wl_country_t *country_struct;
-    uint32_t *ptr;
-    whd_result_t retval;
-    whd_buffer_t buffer;
-    uint8_t *event_mask;
-    uint32_t *data;
-    uint32_t counter;
-    whd_interface_t ifp;
-
-    if (!whd_driver || !ifpp)
-    {
-        WPRINT_WHD_ERROR( ("Invalid param in func %s at line %d \n",
-                           __func__, __LINE__) );
-        return WHD_WLAN_BADARG;
-    }
-
-    if (whd_driver->internal_info.whd_wlan_status.state == WLAN_UP)
-    {
-        return WHD_SUCCESS;
-    }
-
-    whd_init_stats(whd_driver);
-
-
-    retval = whd_management_wifi_platform_init(whd_driver, whd_driver->country, WHD_FALSE);
-    if (retval != WHD_SUCCESS)
-    {
-        WPRINT_WHD_INFO( ("Could not initialize wifi platform\n") );
-        return retval;
-    }
-
-    whd_add_primary_interface(whd_driver, ifpp);
-    ifp = *ifpp;
-
-    /* Download blob file if exists */
-    retval = whd_process_clm_data(ifp);
-    if (retval != WHD_SUCCESS)
-    {
-        WPRINT_MACRO( ("****************************************************\n"
-                       "** ERROR: WLAN: could not download clm_blob file\n"
-                       "** FATAL ERROR: system unusable, CLM blob file not found or corrupted.\n"
-                       "****************************************************\n") );
-        return retval;
-    }
-
-    /* Turn off SDPCM TX Glomming */
-    /* Note: This is only required for later chips.
-     * The 4319 has glomming off by default however the 43362 has it on by default.
-     */
-    data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)4, IOVAR_STR_TX_GLOM);
-    if (data == NULL)
-    {
-        whd_assert("Could not get buffer for IOVAR", 0 != 0);
-        return WHD_BUFFER_ALLOC_FAIL;
-    }
-    *data = 0;
-    retval = whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0);
-    if ( (retval != WHD_SUCCESS) && (retval != WHD_WLAN_UNSUPPORTED) )
-    {
-        /* Note: System may time out here if bus interrupts are not working properly */
-        WPRINT_WHD_ERROR( ("Could not turn off TX glomming\n") );
-        return retval;
-    }
-
-    /* Turn APSTA on */
-    data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)sizeof(*data), IOVAR_STR_APSTA);
-    if (data == NULL)
-    {
-        whd_assert("Could not get buffer for IOVAR", 0 != 0);
-        return WHD_BUFFER_ALLOC_FAIL;
-    }
-    *data = htod32( (uint32_t)1 );
-    /* This will fail on manufacturing test build since it does not have APSTA available */
-    retval = whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0);
-    if (retval == WHD_WLAN_UNSUPPORTED)
-    {
-        WPRINT_WHD_DEBUG( ("Firmware does not support APSTA\n") );
-    }
-    else if (retval != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Could not turn on APSTA\n") );
-        return retval;
-    }
-
-    /* Send set country command */
-    /* This is the first time that the WLAN chip is required to respond
-     * in it's normal run mode.
-     * If you are porting a new system and it stalls here, it could
-     * be one of the following problems:
-     *   - Bus interrupt not triggering properly - the WLAN chip is unable to signal the host that there is data available.
-     *   - Timing problems - if the timeouts on semaphores are not working correctly, then the
-     *                       system might think that the IOCTL has timed out much faster than it should do.
-     *
-     */
-
-    country_struct = (wl_country_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)sizeof(wl_country_t),
-                                                              IOVAR_STR_COUNTRY);
-    if (country_struct == NULL)
-    {
-        whd_assert("Could not get buffer for IOCTL", 0 != 0);
-        return WHD_BUFFER_ALLOC_FAIL;
-    }
-    memset(country_struct, 0, sizeof(wl_country_t) );
-
-    ptr = (uint32_t *)country_struct->ccode;
-    *ptr = (uint32_t)whd_driver->internal_info.whd_wlan_status.country_code & 0x0000ffff;
-    ptr = (uint32_t *)country_struct->country_abbrev;
-    *ptr = (uint32_t)whd_driver->internal_info.whd_wlan_status.country_code & 0x0000ffff;
-    country_struct->rev = (int32_t)( (whd_driver->internal_info.whd_wlan_status.country_code & 0xffff0000) >> 16 );
-
-    /* if regrev is 0 then set regrev to -1 so the FW will use any NVRAM/OTP configured aggregate
-     * to choose the regrev.  If there is no aggregate configured then the FW will try to use regrev 0.
-     */
-    if (country_struct->rev == 0)
-    {
-        country_struct->rev = (int32_t)htod32(-1);
-    }
-    retval = whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0);
-    if (retval != WHD_SUCCESS)
-    {
-        /* Could not set wifi country */
-        WPRINT_WHD_ERROR( ("Could not set Country code\n") );
-        return retval;
-    }
-
-    /* NOTE: The set country command requires time to process on the WLAN firmware and
-    * the following IOCTL may fail on initial attempts therefore we try a few times */
-
-    /* Set the event mask, indicating initially we do not want any asynchronous events */
-    for (counter = 0, retval = WHD_PENDING; retval != WHD_SUCCESS && counter < (uint32_t)MAX_POST_SET_COUNTRY_RETRY;
-         ++counter)
-    {
-        event_mask = (uint8_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)WL_EVENTING_MASK_LEN,
-                                                         IOVAR_STR_EVENT_MSGS);
-        if (event_mask == NULL)
-        {
-            whd_assert("Could not get buffer for IOVAR", 0 != 0);
-            return WHD_BUFFER_ALLOC_FAIL;
-        }
-        memset(event_mask, 0, (size_t)WL_EVENTING_MASK_LEN);
-        retval = whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0);
-    }
-    if (retval != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Could not set Event mask\n") );
-        return retval;
-    }
-
-    /* Send UP command */
-    CHECK_RETURN(whd_wifi_set_up(ifp) );
-
-    whd_wifi_enable_powersave_with_throughput(ifp, DEFAULT_PM2_SLEEP_RET_TIME);
-    /* Set the GMode */
-    data = (uint32_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, (uint16_t)4);
-    if (data == NULL)
-    {
-        whd_assert("Could not get buffer for IOCTL", 0 != 0);
-        return WHD_BUFFER_ALLOC_FAIL;
-    }
-    *data = htod32( (uint32_t)GMODE_AUTO );
-    retval = whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_GMODE, buffer, 0);
-    if (retval != WHD_SUCCESS)
-    {
-        /* Note: System may time out here if bus interrupts are not working properly */
-        WPRINT_WHD_ERROR( ("Error setting gmode\n") );
-        return retval;
-    }
-
-    return WHD_SUCCESS;
-}
-
-/**
- * Turn off the Wi-Fi device
- *
- * - De-Initialises the required parts of the hardware platform
- *   i.e. pins for SDIO/SPI, interrupt, reset, power etc.
- *
- * - De-Initialises the WHD thread which arbitrates access
- *   to the SDIO/SPI bus
- *
- * @return WHD_SUCCESS if deinitialization is successful, error code otherwise
- */
-uint32_t whd_wifi_off(whd_interface_t ifp)
-{
-    whd_result_t retval;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-    if (whd_driver->internal_info.whd_wlan_status.state == WLAN_OFF)
-    {
-        return WHD_SUCCESS;
-    }
-
-    /* Disable SDIO/SPI interrupt */
-    whd_bus_irq_enable(whd_driver, WHD_FALSE);
-    whd_thread_quit(whd_driver);
-
-    retval = whd_bus_deinit(whd_driver);
-    if (retval != WHD_SUCCESS)
-    {
-        WPRINT_WHD_DEBUG( ("Error de-initializing bus\n") );
-        return retval;
-    }
-
-    whd_driver->internal_info.whd_wlan_status.state = WLAN_OFF;
-    return WHD_SUCCESS;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_network_if.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_network_if.c
deleted file mode 100644
index 9877cd26a8..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_network_if.c
+++ /dev/null
@@ -1,85 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Provides generic APSTA functionality that chip specific files use
- */
-
-#include "whd_debug.h"
-#include "whd_network_if.h"
-
-/******************************************************
- *  * @cond               Constants
- *   ******************************************************/
-
-/******************************************************
- *  *                   Enumerations
- *   ******************************************************/
-
-/******************************************************
-**               Function Declarations
-*******************************************************/
-
-/******************************************************
- *        Variables Definitions
- *****************************************************/
-
-/******************************************************
-*               Function Definitions
-******************************************************/
-/** Called by WHD to pass received data to the network stack
- *
- *
- *  Packets received from the Wi-Fi network by WHD are forwarded to by calling function ptr which
- *  must be implemented in the network interface. Ethernet headers
- *  are present at the start of these packet buffers.
- *
- *  This function is called asynchronously in the context of the
- *  WHD thread whenever new data has arrived.
- *  Packet buffers are allocated within WHD, and ownership is transferred
- *  to the network stack. The network stack or application is thus
- *  responsible for releasing the packet buffers.
- *  Most packet buffering systems have a pointer to the 'current point' within
- *  the packet buffer. When this function is called, the pointer points
- *  to the start of the Ethernet header. There is other inconsequential data
- *  before the Ethernet header.
- *
- *  It is preferable that the (whd_network_process_ethernet_data)() function simply puts
- *  the received packet on a queue for processing by another thread. This avoids the
- *  WHD thread being unnecessarily tied up which would delay other packets
- *  being transmitted or received.
- *
- *  @param interface : The interface on which the packet was received.
- *  @param buffer    : Handle of the packet which has just been received. Responsibility for
- *                    releasing this buffer is transferred from WHD at this point.
- *
- */
-whd_result_t whd_network_process_ethernet_data(whd_interface_t ifp, whd_buffer_t buffer)
-{
-    whd_driver_t whd_driver = ifp->whd_driver;
-    if (whd_driver->network_if->whd_network_process_ethernet_data)
-    {
-        whd_driver->network_if->whd_network_process_ethernet_data(ifp, buffer);
-        return WHD_SUCCESS;
-    }
-    else
-    {
-        WPRINT_WHD_INFO( ("Function pointers not provided .\n") );
-    }
-    return WHD_WLAN_NOFUNCTION;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_resource_if.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_resource_if.c
deleted file mode 100644
index b49f586d06..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_resource_if.c
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Provides generic APSTA functionality that chip specific files use
- */
-
-#include "whd_debug.h"
-#include "whd_int.h"
-#include "whd_resource_if.h"
-
-/******************************************************
- *  * @cond               Constants
- *   ******************************************************/
-
-/******************************************************
- *  *                   Enumerations
- *   ******************************************************/
-
-/******************************************************
- *  *               Function Declarations
- *   ******************************************************/
-
-/******************************************************
- *        Variables Definitions
- *****************************************************/
-
-/******************************************************
-*               Function Definitions
-******************************************************/
-uint32_t whd_resource_size(whd_driver_t whd_driver, whd_resource_type_t resource, uint32_t *size_out)
-{
-    if (whd_driver->resource_if->whd_resource_size)
-    {
-        return whd_driver->resource_if->whd_resource_size(whd_driver, resource, size_out);
-    }
-    else
-    {
-        WPRINT_WHD_ERROR( ("Function pointers not provided .\n") );
-    }
-
-    return WHD_WLAN_NOFUNCTION;
-}
-
-uint32_t whd_get_resource_block_size(whd_driver_t whd_driver, whd_resource_type_t type, uint32_t *size_out)
-{
-
-    if (whd_driver->resource_if->whd_get_resource_block_size)
-    {
-        return whd_driver->resource_if->whd_get_resource_block_size(whd_driver, type, size_out);
-    }
-    else
-    {
-        WPRINT_WHD_ERROR( ("Function pointers not provided .\n") );
-    }
-
-    return WHD_WLAN_NOFUNCTION;
-}
-
-uint32_t whd_get_resource_no_of_blocks(whd_driver_t whd_driver, whd_resource_type_t type, uint32_t *block_count)
-{
-    if (whd_driver->resource_if->whd_get_resource_no_of_blocks)
-    {
-        return whd_driver->resource_if->whd_get_resource_no_of_blocks(whd_driver, type, block_count);
-    }
-    else
-    {
-        WPRINT_WHD_ERROR( ("Function pointers not provided .\n") );
-    }
-
-    return WHD_WLAN_NOFUNCTION;
-}
-
-uint32_t whd_get_resource_block(whd_driver_t whd_driver, whd_resource_type_t type,
-                                uint32_t blockno, const uint8_t **data, uint32_t *size_out)
-{
-
-    if (whd_driver->resource_if->whd_get_resource_block)
-    {
-        return whd_driver->resource_if->whd_get_resource_block(whd_driver, type, blockno, data, size_out);
-    }
-    else
-    {
-        WPRINT_WHD_ERROR( ("Function pointers not provided .\n") );
-    }
-
-    return WHD_WLAN_NOFUNCTION;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_sdpcm.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_sdpcm.c
deleted file mode 100644
index 5e392696a2..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_sdpcm.c
+++ /dev/null
@@ -1,618 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Provides an implementation of the Broadcom SDPCM protocol.
- *  The Broadcom SDPCM protocol provides multiplexing of Wireless Data frames,
- *  I/O Control functions (IOCTL), and Asynchronous Event signalling.
- *  It is required when communicating with Broadcom 802.11 devices.
- *
- */
-#include "whd_sdpcm.h"
-#include "bus_protocols/whd_bus_protocol_interface.h"
-#include "whd_endian.h"
-#include "whd_chip_constants.h"
-#include "whd_chip.h"
-#include "whd_thread_internal.h"
-#include "whd_debug.h"
-#include "whd_events_int.h"
-#include "whd_wifi_api.h"
-#include "whd_buffer_api.h"
-#include "whd_network_if.h"
-#include "whd_wlioctl.h"
-#include "whd_types_int.h"
-#include "whd_endian.h"
-
-/******************************************************
-* @cond       Constants
-******************************************************/
-
-#define ETHER_TYPE_BRCM           (0x886C)      /** Broadcom Ethertype for identifying event packets - Copied from DHD include/proto/ethernet.h */
-#define BRCM_OUI            "\x00\x10\x18"      /** Broadcom OUI (Organizationally Unique Identifier): Used in the proprietary(221) IE (Information Element) in all Broadcom devices */
-#define BCM_MSG_IFNAME_MAX            (16)      /** Maximum length of an interface name in a wl_event_msg_t structure*/
-
-#define BDC_FLAG2_IF_MASK           (0x0f)
-
-#define SDPCM_HEADER_LEN              (12)
-
-/* Event flags */
-#define WLC_EVENT_MSG_LINK      (0x01)    /** link is up */
-#define WLC_EVENT_MSG_FLUSHTXQ  (0x02)    /** flush tx queue on MIC error */
-#define WLC_EVENT_MSG_GROUP     (0x04)    /** group MIC error */
-#define WLC_EVENT_MSG_UNKBSS    (0x08)    /** unknown source bsscfg */
-#define WLC_EVENT_MSG_UNKIF     (0x10)    /** unknown source OS i/f */
-
-/******************************************************
-*             Macros
-******************************************************/
-
-/******************************************************
-*             Local Structures
-******************************************************/
-
-#pragma pack(1)
-
-/*TODO: Keep this typedef? (in preference to the defines above */
-#if 0
-typedef struct
-{
-    uint16_t control_id;
-    uint8_t interface_index : 4;
-    uint16_t reserved        : 10;
-    uint8_t set             : 1;
-    uint8_t error           : 1;
-}sdpcm_cdc_flags_t;
-#endif /* if 0 */
-typedef struct
-{
-    uint8_t sequence;
-    uint8_t channel_and_flags;
-    uint8_t next_length;
-    uint8_t header_length;
-    uint8_t wireless_flow_control;
-    uint8_t bus_data_credit;
-    uint8_t _reserved[2];
-} sdpcm_sw_header_t;
-
-/*
- * SDPCM header definitions
- */
-typedef struct
-{
-    uint16_t frametag[2];
-    sdpcm_sw_header_t sw_header;
-} sdpcm_header_t;
-
-typedef struct bcmeth_hdr
-{
-    uint16_t subtype;      /** Vendor specific..32769 */
-    uint16_t length;
-    uint8_t version;       /** Version is 0 */
-    uint8_t oui[3];        /** Broadcom OUI */
-    uint16_t usr_subtype;  /** user specific Data */
-} sdpcm_bcmeth_header_t;
-
-/* these fields are stored in network order */
-typedef struct
-{
-
-    uint16_t version;                         /** Version 1 has fields up to ifname.
-                                               * Version 2 has all fields including ifidx and bss_cfg_idx */
-    uint16_t flags;                           /** see flags */
-    uint32_t event_type;                      /** Message */
-    uint32_t status;                          /** Status code */
-    uint32_t reason;                          /** Reason code (if applicable) */
-    uint32_t auth_type;                       /** WLC_E_AUTH */
-    uint32_t datalen;                         /** data buf */
-    whd_mac_t addr;                         /** Station address (if applicable) */
-    char ifname[BCM_MSG_IFNAME_MAX];          /** name of the packet incoming interface */
-    uint8_t ifidx;                            /** destination OS i/f index */
-    uint8_t bss_cfg_idx;                      /** source bsscfg index */
-} sdpcm_raw_event_header_t;
-
-/* used by driver msgs */
-typedef struct bcm_event
-{
-    ethernet_header_t ether;
-    sdpcm_bcmeth_header_t bcmeth;
-    union
-    {
-        whd_event_header_t whd;
-        sdpcm_raw_event_header_t raw;
-    } event;
-} sdpcm_bcm_event_t;
-
-#pragma pack()
-
-/******************************************************
-*             Static Variables
-******************************************************/
-
-/******************************************************
-*             SDPCM Logging
-*
-* Enable this section to allow logging of SDPCM packets
-* into a buffer for later perusal
-*
-* See sdpcm_log  and  next_sdpcm_log_pos
-*
-******************************************************/
-/** @cond */
-
-#if 0
-
-#define SDPCM_LOG_SIZE 30
-#define SDPCM_LOG_HEADER_SIZE (0x60)
-
-typedef enum { UNUSED, LOG_TX, LOG_RX } sdpcm_log_direction_t;
-typedef enum { IOCTL, DATA, EVENT } sdpcm_log_type_t;
-
-typedef struct SDPCM_log_entry_struct
-{
-    sdpcm_log_direction_t direction;
-    sdpcm_log_type_t type;
-    unsigned long time;
-    unsigned long length;
-    unsigned char header[SDPCM_LOG_HEADER_SIZE];
-}sdpcm_log_entry_t;
-
-static int next_sdpcm_log_pos = 0;
-static sdpcm_log_entry_t sdpcm_log[SDPCM_LOG_SIZE];
-
-static void add_sdpcm_log_entry(sdpcm_log_direction_t dir, sdpcm_log_type_t type, unsigned long length, char *eth_data)
-{
-
-    sdpcm_log[next_sdpcm_log_pos].direction = dir;
-    sdpcm_log[next_sdpcm_log_pos].type = type;
-    cy_rtos_get_time(&sdpcm_log[next_sdpcm_log_pos].time);
-    sdpcm_log[next_sdpcm_log_pos].length = length;
-    memcpy(sdpcm_log[next_sdpcm_log_pos].header, eth_data, SDPCM_LOG_HEADER_SIZE);
-    next_sdpcm_log_pos++;
-    if (next_sdpcm_log_pos >= SDPCM_LOG_SIZE)
-    {
-        next_sdpcm_log_pos = 0;
-    }
-}
-
-#else
-#define add_sdpcm_log_entry(dir, type, length, eth_data)
-#endif
-
-/** @endcond */
-
-/******************************************************
-*             Static Function Prototypes
-******************************************************/
-static whd_buffer_t  whd_sdpcm_get_next_buffer_in_queue(whd_driver_t whd_driver, whd_buffer_t buffer);
-static void            whd_sdpcm_set_next_buffer_in_queue(whd_driver_t whd_driver, whd_buffer_t buffer,
-                                                          whd_buffer_t prev_buffer);
-extern void whd_wifi_log_event(whd_driver_t whd_driver, const whd_event_header_t *event_header,
-                               const uint8_t *event_data);
-/******************************************************
-*             Function definitions
-******************************************************/
-
-/** Initialises the SDPCM protocol handler
- *
- *  Initialises mutex and semaphore flags needed by the SDPCM handler.
- *  Also initialises the list of event handlers. This function is called
- *  from the @ref whd_thread_init function.
- *
- * @return    WHD result code
- */
-
-whd_result_t whd_sdpcm_init(whd_driver_t whd_driver)
-{
-    whd_sdpcm_info_t *sdpcm_info = &whd_driver->sdpcm_info;
-
-    /* Create the sdpcm packet queue semaphore */
-    if (cy_rtos_init_semaphore(&sdpcm_info->send_queue_mutex, 1, 0) != WHD_SUCCESS)
-    {
-        return WHD_SEMAPHORE_ERROR;
-    }
-    if (cy_rtos_set_semaphore(&sdpcm_info->send_queue_mutex, WHD_FALSE) != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Error setting semaphore in %s at %d \n", __func__, __LINE__) );
-        return WHD_SEMAPHORE_ERROR;
-    }
-
-    /* Packet send queue variables */
-    sdpcm_info->send_queue_head   = (whd_buffer_t)NULL;
-    sdpcm_info->send_queue_tail   = (whd_buffer_t)NULL;
-
-    whd_sdpcm_bus_vars_init(whd_driver);
-
-    return WHD_SUCCESS;
-}
-
-/* Re-initialize the bus variables after deep sleep */
-void whd_sdpcm_bus_vars_init(whd_driver_t whd_driver)
-{
-    whd_sdpcm_info_t *sdpcm_info = &whd_driver->sdpcm_info;
-
-    /* Bus data credit variables */
-    sdpcm_info->credit_diff                     = 0;
-    sdpcm_info->largest_credit_diff             = 0;
-
-    sdpcm_info->packet_transmit_sequence_number = 0;
-    sdpcm_info->last_bus_data_credit            = (uint8_t)1;
-}
-
-/** Initialises the SDPCM protocol handler
- *
- *  De-initialises mutex and semaphore flags needed by the SDPCM handler.
- *  This function is called from the @ref whd_thread_func function when it is exiting.
- */
-void whd_sdpcm_quit(whd_driver_t whd_driver)
-{
-    whd_sdpcm_info_t *sdpcm_info = &whd_driver->sdpcm_info;
-    whd_result_t result;
-
-    /* Delete the SDPCM queue mutex */
-    (void)cy_rtos_deinit_semaphore(&sdpcm_info->send_queue_mutex);    /* Ignore return - not much can be done about failure */
-
-    /* Free any left over packets in the queue */
-    while (sdpcm_info->send_queue_head != NULL)
-    {
-        whd_buffer_t buf = whd_sdpcm_get_next_buffer_in_queue(whd_driver, sdpcm_info->send_queue_head);
-        result = whd_buffer_release(whd_driver, sdpcm_info->send_queue_head, WHD_NETWORK_TX);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-        sdpcm_info->send_queue_head = buf;
-    }
-}
-
-void whd_sdpcm_update_credit(whd_driver_t whd_driver, uint8_t *data)
-{
-    sdpcm_sw_header_t *header = (sdpcm_sw_header_t *)(data + 4);
-    whd_sdpcm_info_t *sdpcm_info = &whd_driver->sdpcm_info;
-
-    if ( (header->channel_and_flags & 0x0f) < (uint8_t)3 )
-    {
-        sdpcm_info->credit_diff = (uint8_t)(header->bus_data_credit - sdpcm_info->last_bus_data_credit);
-        WPRINT_WHD_DATA_LOG( ("credit update =%d\n ", header->bus_data_credit) );
-        if (sdpcm_info->credit_diff <= GET_C_VAR(whd_driver, BUS_CREDIT_DIFF) )
-        {
-            sdpcm_info->last_bus_data_credit = header->bus_data_credit;
-        }
-        else
-        {
-            if (sdpcm_info->credit_diff > sdpcm_info->largest_credit_diff)
-            {
-                sdpcm_info->largest_credit_diff = sdpcm_info->credit_diff;
-            }
-        }
-    }
-
-    whd_bus_set_flow_control(whd_driver, header->wireless_flow_control);
-}
-
-/** Processes and directs incoming SDPCM packets
- *
- *  This function receives SDPCM packets from the Broadcom 802.11 device and decodes the SDPCM header
- *  to determine where the packet should be directed.
- *
- *  Control packets (IOCTL/IOVAR) / Data Packets/ Event Packets are passed to CDC/BDC layer
- *  and the appropriate event handler is called.
- *
- * @param buffer  : The SDPCM packet buffer received from the Broadcom 802.11 device
- *
- */
-void whd_sdpcm_process_rx_packet(whd_driver_t whd_driver, whd_buffer_t buffer)
-{
-    bus_common_header_t *packet;
-    uint16_t size;
-    uint16_t size_inv;
-    sdpcm_header_t sdpcm_header;
-    whd_result_t result;
-
-    packet = (bus_common_header_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, buffer);
-
-    memcpy(&sdpcm_header, packet->bus_header, BUS_HEADER_LEN);
-
-    sdpcm_header.frametag[0] = dtoh16(sdpcm_header.frametag[0]);
-    sdpcm_header.frametag[1] = dtoh16(sdpcm_header.frametag[1]);
-
-    /* Extract the total SDPCM packet size from the first two frametag bytes */
-    size = sdpcm_header.frametag[0];
-
-    /* Check that the second two frametag bytes are the binary inverse of the size */
-    size_inv = (uint16_t) ~size;  /* Separate variable due to GCC Bug 38341 */
-    if (sdpcm_header.frametag[1] != size_inv)
-    {
-        WPRINT_WHD_DEBUG( ("Received a packet with a frametag which is wrong\n") );
-        result = whd_buffer_release(whd_driver, buffer, WHD_NETWORK_RX);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-        return;
-    }
-
-    /* Check whether the packet is big enough to contain the SDPCM header (or) it's too big to handle */
-    if ( (size < (uint16_t)SDPCM_HEADER_LEN) || (size > whd_buffer_get_current_piece_size(whd_driver, buffer) ) )
-    {
-        whd_minor_assert("Packet size invalid", 0 == 1);
-        WPRINT_WHD_DEBUG( (
-                              "Received a packet that is too small to contain anything useful (or) too big. Packet Size = [%d]\n",
-                              size) );
-        result = whd_buffer_release(whd_driver, buffer, WHD_NETWORK_RX);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-        return;
-    }
-
-    /* Get address of packet->sdpcm_header.frametag indirectly to avoid IAR's unaligned address warning */
-    whd_sdpcm_update_credit(whd_driver,
-                            (uint8_t *)&sdpcm_header.sw_header - sizeof(sdpcm_header.frametag) );
-
-    if (size == (uint16_t)SDPCM_HEADER_LEN)
-    {
-        /* This is a flow control update packet with no data - release it. */
-        result = whd_buffer_release(whd_driver, buffer, WHD_NETWORK_RX);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-
-        return;
-    }
-
-    /* Check the SDPCM channel to decide what to do with packet. */
-    switch (sdpcm_header.sw_header.channel_and_flags & 0x0f)
-    {
-        case CONTROL_HEADER:  /* IOCTL/IOVAR reply packet */
-        {
-            add_sdpcm_log_entry(LOG_RX, IOCTL, whd_buffer_get_current_piece_size(whd_driver, buffer),
-                                (char *)whd_buffer_get_current_piece_data_pointer(whd_driver, buffer) );
-
-            /* Check that packet size is big enough to contain the CDC header as well as the SDPCM header */
-            if (sdpcm_header.frametag[0] <
-                (sizeof(sdpcm_header.frametag) + sizeof(sdpcm_sw_header_t) + sizeof(cdc_header_t) ) )
-            {
-                /* Received a too-short SDPCM packet! */
-                WPRINT_WHD_DEBUG( ("Received a too-short SDPCM packet!\n") );
-                result = whd_buffer_release(whd_driver, buffer, WHD_NETWORK_RX);
-                if (result != WHD_SUCCESS)
-                    WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-
-                break;
-            }
-
-            /* Move SDPCM header and Buffer header to pass onto next layer */
-            whd_buffer_add_remove_at_front(whd_driver, &buffer,
-                                           (int32_t)(sizeof(whd_buffer_header_t) +
-                                                     sdpcm_header.sw_header.header_length) );
-
-            whd_process_cdc(whd_driver, buffer);
-        }
-
-        break;
-
-        case DATA_HEADER:
-        {
-            /* Check that the packet is big enough to contain SDPCM & BDC headers */
-            if (sdpcm_header.frametag[0] <=
-                (sizeof(sdpcm_header.frametag) + sizeof(sdpcm_sw_header_t) + sizeof(bdc_header_t) ) )
-            {
-                WPRINT_WHD_ERROR( ("Packet too small to contain SDPCM + BDC headers\n") );
-                result = whd_buffer_release(whd_driver, buffer, WHD_NETWORK_RX);
-                if (result != WHD_SUCCESS)
-                    WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-
-                break;
-            }
-
-            /* Move SDPCM header and Buffer header to pass onto next layer */
-            whd_buffer_add_remove_at_front(whd_driver, &buffer,
-                                           (int32_t)(sizeof(whd_buffer_header_t) +
-                                                     sdpcm_header.sw_header.header_length) );
-
-            whd_process_bdc(whd_driver, buffer);
-
-        }
-        break;
-
-        case ASYNCEVENT_HEADER:
-        {
-
-            /* Move SDPCM header and Buffer header to pass onto next layer */
-            whd_buffer_add_remove_at_front(whd_driver, &buffer,
-                                           (int32_t)(sizeof(whd_buffer_header_t) +
-                                                     sdpcm_header.sw_header.header_length) );
-
-            whd_process_bdc_event(whd_driver, buffer, size);
-        }
-        break;
-
-        default:
-            whd_minor_assert("SDPCM packet of unknown channel received - dropping packet", 0 != 0);
-            result = whd_buffer_release(whd_driver, buffer, WHD_NETWORK_RX);
-            if (result != WHD_SUCCESS)
-                WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) );
-            break;
-    }
-}
-
-whd_bool_t whd_sdpcm_has_tx_packet(whd_driver_t whd_driver)
-{
-    if (whd_driver->sdpcm_info.send_queue_head != NULL)
-    {
-        return WHD_TRUE;
-    }
-
-    return WHD_FALSE;
-}
-
-whd_result_t whd_sdpcm_get_packet_to_send(whd_driver_t whd_driver, whd_buffer_t *buffer)
-{
-    bus_common_header_t *packet;
-    sdpcm_header_t sdpcm_header;
-    whd_sdpcm_info_t *sdpcm_info = &whd_driver->sdpcm_info;
-    whd_result_t result;
-
-    if (sdpcm_info->send_queue_head != NULL)
-    {
-        /* Check if we're being flow controlled */
-        if (whd_bus_is_flow_controlled(whd_driver) == WHD_TRUE)
-        {
-            WHD_STATS_INCREMENT_VARIABLE(whd_driver, flow_control);
-            return WHD_FLOW_CONTROLLED;
-        }
-
-        /* Check if we have enough bus data credits spare */
-        if (sdpcm_info->packet_transmit_sequence_number == sdpcm_info->last_bus_data_credit)
-        {
-            WHD_STATS_INCREMENT_VARIABLE(whd_driver, no_credit);
-            return WHD_NO_CREDITS;
-        }
-
-        /* There is a packet waiting to be sent - send it then fix up queue and release packet */
-        if (cy_rtos_get_semaphore(&sdpcm_info->send_queue_mutex, CY_RTOS_NEVER_TIMEOUT, WHD_FALSE) != WHD_SUCCESS)
-        {
-            /* Could not obtain mutex, push back the flow control semaphore */
-            WPRINT_WHD_ERROR( ("Error manipulating a semaphore, %s failed at %d \n", __func__, __LINE__) );
-            return WHD_SEMAPHORE_ERROR;
-        }
-
-        /* Pop the head off and set the new send_queue head */
-        *buffer = sdpcm_info->send_queue_head;
-        sdpcm_info->send_queue_head = whd_sdpcm_get_next_buffer_in_queue(whd_driver, *buffer);
-        if (sdpcm_info->send_queue_head == NULL)
-        {
-            sdpcm_info->send_queue_tail = NULL;
-        }
-        result = cy_rtos_set_semaphore(&sdpcm_info->send_queue_mutex, WHD_FALSE);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("Error setting semaphore in %s at %d \n", __func__, __LINE__) );
-
-
-        /* Set the sequence number */
-        packet = (bus_common_header_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, *buffer);
-        memcpy(&sdpcm_header, packet->bus_header, BUS_HEADER_LEN);
-        sdpcm_header.sw_header.sequence = sdpcm_info->packet_transmit_sequence_number;
-        memcpy(packet->bus_header, &sdpcm_header, BUS_HEADER_LEN);
-        sdpcm_info->packet_transmit_sequence_number++;
-
-        return WHD_SUCCESS;
-    }
-    else
-    {
-        return WHD_NO_PACKET_TO_SEND;
-    }
-}
-
-/** Returns the number of bus credits available
- *
- * @return The number of bus credits available
- */
-uint8_t whd_sdpcm_get_available_credits(whd_driver_t whd_driver)
-{
-    return (uint8_t)(whd_driver->sdpcm_info.last_bus_data_credit -
-                     whd_driver->sdpcm_info.packet_transmit_sequence_number);
-}
-
-/** Writes SDPCM headers and sends packet to WHD Thread
- *
- *  Prepends the given packet with a new SDPCM header,
- *  then passes the packet to the WHD thread via a queue
- *
- *  This function is called by @ref whd_network_send_ethernet_data and @ref whd_cdc_send_ioctl
- *
- *  @param buffer     : The handle of the packet buffer to send
- *  @param header_type  : DATA_HEADER, ASYNCEVENT_HEADER or CONTROL_HEADER - indicating what type of SDPCM packet this is.
- */
-
-void whd_send_to_bus(whd_driver_t whd_driver, whd_buffer_t buffer,
-                     sdpcm_header_type_t header_type)
-{
-    uint16_t size;
-    bus_common_header_t *packet =
-        (bus_common_header_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, buffer);
-    sdpcm_header_t sdpcm_header;
-    whd_sdpcm_info_t *sdpcm_info = &whd_driver->sdpcm_info;
-    whd_result_t result;
-
-    size = whd_buffer_get_current_piece_size(whd_driver, buffer);
-
-    size = (uint16_t)(size - (uint16_t)sizeof(whd_buffer_header_t) );
-
-    /* Prepare the SDPCM header */
-    memset( (uint8_t *)&sdpcm_header, 0, sizeof(sdpcm_header_t) );
-    sdpcm_header.sw_header.channel_and_flags = (uint8_t)header_type;
-    sdpcm_header.sw_header.header_length =
-        (header_type == DATA_HEADER) ? sizeof(sdpcm_header_t) + 2 : sizeof(sdpcm_header_t);
-    sdpcm_header.sw_header.sequence = 0; /* Note: The real sequence will be written later */
-    sdpcm_header.frametag[0] = size;
-    sdpcm_header.frametag[1] = (uint16_t) ~size;
-
-    memcpy(packet->bus_header, &sdpcm_header, BUS_HEADER_LEN);
-
-    add_sdpcm_log_entry(LOG_TX, (header_type == DATA_HEADER) ? DATA : (header_type == CONTROL_HEADER) ? IOCTL : EVENT,
-                        whd_buffer_get_current_piece_size(whd_driver, buffer),
-                        (char *)whd_buffer_get_current_piece_data_pointer(whd_driver, buffer) );
-
-    /* Add the length of the SDPCM header and pass "down" */
-    if (cy_rtos_get_semaphore(&sdpcm_info->send_queue_mutex, CY_RTOS_NEVER_TIMEOUT, WHD_FALSE) != WHD_SUCCESS)
-    {
-        /* Could not obtain mutex */
-        /* Fatal error */
-        result = whd_buffer_release(whd_driver, buffer, WHD_NETWORK_TX);
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("buffer release failed in %s at %d \n", __func__, __LINE__) )
-            return;
-    }
-
-    whd_sdpcm_set_next_buffer_in_queue(whd_driver, NULL, buffer);
-    if (sdpcm_info->send_queue_tail != NULL)
-    {
-        whd_sdpcm_set_next_buffer_in_queue(whd_driver, buffer, sdpcm_info->send_queue_tail);
-    }
-    sdpcm_info->send_queue_tail = buffer;
-    if (sdpcm_info->send_queue_head == NULL)
-    {
-        sdpcm_info->send_queue_head = buffer;
-    }
-    result = cy_rtos_set_semaphore(&sdpcm_info->send_queue_mutex, WHD_FALSE);
-    if (result != WHD_SUCCESS)
-        WPRINT_WHD_ERROR( ("Error setting semaphore in %s at %d \n", __func__, __LINE__) );
-
-    whd_thread_notify(whd_driver);
-}
-
-/******************************************************
-*             Static Functions
-******************************************************/
-
-static whd_buffer_t whd_sdpcm_get_next_buffer_in_queue(whd_driver_t whd_driver, whd_buffer_t buffer)
-{
-    whd_buffer_header_t *packet = (whd_buffer_header_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, buffer);
-    return packet->queue_next;
-}
-
-/** Sets the next buffer in the send queue
- *
- *  The send queue is a linked list of packet buffers where the 'next' pointer
- *  is stored in the first 4 bytes of the buffer content.
- *  This function sets that pointer.
- *
- * @param buffer       : handle of packet in the send queue
- *        prev_buffer  : handle of new packet whose 'next' pointer will point to 'buffer'
- */
-static void whd_sdpcm_set_next_buffer_in_queue(whd_driver_t whd_driver, whd_buffer_t buffer, whd_buffer_t prev_buffer)
-{
-    whd_buffer_header_t *packet =
-        (whd_buffer_header_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, prev_buffer);
-    packet->queue_next = buffer;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_thread.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_thread.c
deleted file mode 100644
index 1ce8cbefe7..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_thread.c
+++ /dev/null
@@ -1,346 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Allows thread safe access to the WHD WiFi Driver (WHD) hardware bus
- *
- *  This file provides functions which allow multiple threads to use the WHD hardware bus (SDIO or SPI)
- *  This is achieved by having a single thread (the "WHD Thread") which queues messages to be sent, sending
- *  them sequentially, as well as receiving messages as they arrive.
- *
- *  Messages to be sent come from the @ref whd_sdpcm_send_common function in whd_sdpcm.c .  The messages already
- *  contain SDPCM headers, but not any bus headers (GSPI), and are passed to the whd_thread_send_data function.
- *  This function can be called from any thread.
- *
- *  Messages are received by way of a callback supplied by in SDPCM.c - whd_sdpcm_process_rx_packet
- *  Received messages are delivered in the context of the WHD Thread, so the callback function needs to avoid blocking.
- *
- *  It is also possible to use these functions without any operating system, by periodically calling the whd_thread_send_one_packet,
- *  @ref whd_thread_receive_one_packet or @ref whd_thread_poll_all functions
- *
- */
-#include "stdlib.h"
-#include "whd_debug.h"
-#include "whd_thread.h"
-#include "bus_protocols/whd_bus_protocol_interface.h"
-#include "cyabs_rtos.h"
-#include "whd_int.h"
-#include "whd_chip.h"
-#include "whd_poll.h"
-#include "whd_sdpcm.h"
-#include "whd_buffer_api.h"
-
-/******************************************************
-*             Static Function Prototypes
-******************************************************/
-static void whd_thread_func(whd_thread_arg_t thread_input);
-
-/******************************************************
-*             Global Functions
-******************************************************/
-void whd_thread_info_init(whd_driver_t whd_driver, whd_init_config_t *whd_init_config)
-{
-    memset(&whd_driver->thread_info, 0, sizeof(whd_driver->thread_info) );
-    whd_driver->thread_info.thread_stack_start = whd_init_config->thread_stack_start;
-    whd_driver->thread_info.thread_stack_size = whd_init_config->thread_stack_size;
-    whd_driver->thread_info.thread_priority = (cy_thread_priority_t)whd_init_config->thread_priority;
-}
-
-/** Initialises the WHD Thread
- *
- * Initialises the WHD thread, and its flags/semaphores,
- * then starts it running
- *
- * @return    WHD_SUCCESS : if initialisation succeeds
- *            otherwise, a result code
- */
-whd_result_t whd_thread_init(whd_driver_t whd_driver)
-{
-    whd_result_t retval;
-
-    retval = whd_sdpcm_init(whd_driver);
-
-    if (retval != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Could not initialize SDPCM codec\n") );
-        /* Lint: Reachable after hitting assert & globals not defined due to error */
-        return retval;
-    }
-
-    /* Create the event flag which signals the WHD thread needs to wake up */
-    retval = cy_rtos_init_semaphore(&whd_driver->thread_info.transceive_semaphore, 1, 0);
-    if (retval != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("Could not initialize WHD thread semaphore\n") );
-        /* Lint: Reachable after hitting assert & globals not defined due to error */
-        return retval;
-    }
-
-    retval = cy_rtos_create_thread(&whd_driver->thread_info.whd_thread, (cy_thread_entry_fn_t)whd_thread_func,
-                                   "WHD", whd_driver->thread_info.thread_stack_start,
-                                   whd_driver->thread_info.thread_stack_size,
-                                   whd_driver->thread_info.thread_priority, (cy_thread_arg_t)whd_driver);
-    if (retval != WHD_SUCCESS)
-    {
-        /* Could not start WHD main thread */
-        WPRINT_WHD_ERROR( ("Could not start WHD thread\n") );
-        return retval;
-    }
-
-    /* Ready now. Indicate it here and in thread, whatever be executed first. */
-    whd_driver->thread_info.whd_inited = WHD_TRUE;
-
-    return WHD_SUCCESS;
-}
-
-/** Sends the first queued packet
- *
- * Checks the queue to determine if there is any packets waiting
- * to be sent. If there are, then it sends the first one.
- *
- * This function is normally used by the WHD Thread, but can be
- * called periodically by systems which have no RTOS to ensure
- * packets get sent.
- *
- * @return    1 : packet was sent
- *            0 : no packet sent
- */
-int8_t whd_thread_send_one_packet(whd_driver_t whd_driver)
-{
-    whd_buffer_t tmp_buf_hnd = NULL;
-    whd_result_t result;
-
-    if (whd_sdpcm_get_packet_to_send(whd_driver, &tmp_buf_hnd) != WHD_SUCCESS)
-    {
-        /* Failed to get a packet */
-        return 0;
-    }
-
-    /* Ensure the wlan backplane bus is up */
-    result = whd_ensure_wlan_bus_is_up(whd_driver);
-    if (result != WHD_SUCCESS)
-    {
-        whd_assert("Could not bring bus back up", 0 != 0);
-        CHECK_RETURN(whd_buffer_release(whd_driver, tmp_buf_hnd, WHD_NETWORK_TX) );
-        return 0;
-    }
-
-    WPRINT_WHD_DATA_LOG( ("Wcd:> Sending pkt 0x%08lX\n", (unsigned long)tmp_buf_hnd) );
-    if (whd_bus_send_buffer(whd_driver, tmp_buf_hnd) != WHD_SUCCESS)
-    {
-        WHD_STATS_INCREMENT_VARIABLE(whd_driver, tx_fail);
-        return 0;
-    }
-
-    WHD_STATS_INCREMENT_VARIABLE(whd_driver, tx_total);
-    return (int8_t)1;
-}
-
-/** Receives a packet if one is waiting
- *
- * Checks the wifi chip fifo to determine if there is any packets waiting
- * to be received. If there are, then it receives the first one, and calls
- * the callback @ref whd_sdpcm_process_rx_packet (in whd_sdpcm.c).
- *
- * This function is normally used by the WHD Thread, but can be
- * called periodically by systems which have no RTOS to ensure
- * packets get received properly.
- *
- * @return    1 : packet was received
- *            0 : no packet waiting
- */
-int8_t whd_thread_receive_one_packet(whd_driver_t whd_driver)
-{
-    /* Check if there is a packet ready to be received */
-    whd_buffer_t recv_buffer;
-    if (whd_bus_read_frame(whd_driver, &recv_buffer) != WHD_SUCCESS)
-    {
-        /* Failed to read a packet */
-        return 0;
-    }
-
-    if (recv_buffer != NULL)    /* Could be null if it was only a credit update */
-    {
-
-        WPRINT_WHD_DATA_LOG( ("Wcd:< Rcvd pkt 0x%08lX\n", (unsigned long)recv_buffer) );
-        WHD_STATS_INCREMENT_VARIABLE(whd_driver, rx_total);
-
-        /* Send received buffer up to SDPCM layer */
-        whd_sdpcm_process_rx_packet(whd_driver, recv_buffer);
-    }
-    return (int8_t)1;
-}
-
-/** Sends and Receives all waiting packets
- *
- * Calls whd_thread_send_one_packet and whd_thread_receive_one_packet
- * once to send and receive packets, until there are no more packets waiting to
- * be transferred.
- *
- * This function is normally used by the WHD Thread, but can be
- * called periodically by systems which have no RTOS to ensure
- * packets get send and received properly.
- *
- * Note: do not loop in here, to avoid overwriting previously rx-ed packets
- */
-int8_t whd_thread_poll_all(whd_driver_t whd_driver)
-{
-    int8_t result = 0;
-    result |= whd_thread_send_one_packet(whd_driver);
-    result |= whd_thread_receive_one_packet(whd_driver);
-    return result;
-}
-
-/** Terminates the WHD Thread
- *
- * Sets a flag then wakes the WHD Thread to force it to terminate.
- *
- */
-void whd_thread_quit(whd_driver_t whd_driver)
-{
-    whd_thread_info_t *thread_info = &whd_driver->thread_info;
-    whd_result_t result;
-
-    /* signal main thread and wake it */
-    thread_info->thread_quit_flag = WHD_TRUE;
-    result = cy_rtos_set_semaphore(&thread_info->transceive_semaphore, WHD_FALSE);
-    if (result == WHD_SUCCESS)
-    {
-        /* Wait for the WHD thread to end */
-        cy_rtos_join_thread(&thread_info->whd_thread);
-    }
-    else
-    {
-        WPRINT_WHD_ERROR( ("Error setting semaphore in %s at %d \n", __func__, __LINE__) );
-    }
-
-    /* Delete the semaphore */
-    /* Ignore return - not much can be done about failure */
-    (void)cy_rtos_deinit_semaphore(&thread_info->transceive_semaphore);
-}
-
-/**
- * Informs WHD of an interrupt
- *
- * This function should be called from the SDIO/SPI interrupt function
- * and usually indicates newly received data is available.
- * It wakes the WHD Thread, forcing it to check the send/receive
- *
- */
-/* ignore failure since there is nothing that can be done about it in a ISR */
-void whd_thread_notify_irq(whd_driver_t whd_driver)
-{
-    whd_driver->thread_info.bus_interrupt = WHD_TRUE;
-
-    /* just wake up the main thread and let it deal with the data */
-    if (whd_driver->thread_info.whd_inited == WHD_TRUE)
-    {
-        (void)cy_rtos_set_semaphore(&whd_driver->thread_info.transceive_semaphore, WHD_TRUE);
-    }
-}
-
-void whd_thread_notify(whd_driver_t whd_driver)
-{
-    /* just wake up the main thread and let it deal with the data */
-    if (whd_driver->thread_info.whd_inited == WHD_TRUE)
-    {
-        /* Ignore return - not much can be done about failure */
-        (void)cy_rtos_set_semaphore(&whd_driver->thread_info.transceive_semaphore, WHD_FALSE);
-    }
-}
-
-/******************************************************
-*             Static Functions
-******************************************************/
-
-/** The WHD Thread function
- *
- *  This is the main loop of the WHD Thread.
- *  It simply calls @ref whd_thread_poll_all to send/receive all waiting packets, then goes
- *  to sleep.  The sleep has a 100ms timeout, causing the send/receive queues to be
- *  checked 10 times per second in case an interrupt is missed.
- *  Once the quit flag has been set, flags/mutexes are cleaned up, and the function exits.
- *
- * @param thread_input  : unused parameter needed to match thread prototype.
- *
- */
-static void whd_thread_func(whd_thread_arg_t thread_input)
-{
-    int8_t rx_status;
-    int8_t tx_status;
-    uint8_t rx_cnt;
-
-    whd_driver_t whd_driver = ( whd_driver_t )thread_input;
-    whd_thread_info_t *thread_info = &whd_driver->thread_info;
-
-    WPRINT_WHD_DATA_LOG( ("Started whd Thread\n") );
-
-    /* Interrupts may be enabled inside thread. To make sure none lost set flag now. */
-    thread_info->whd_inited = WHD_TRUE;
-
-    while (thread_info->thread_quit_flag != WHD_TRUE)
-    {
-        rx_cnt = 0;
-        /* Check if we were woken by interrupt */
-        if ( (thread_info->bus_interrupt == WHD_TRUE) ||
-             (whd_bus_use_status_report_scheme(whd_driver) ) )
-        {
-            thread_info->bus_interrupt = WHD_FALSE;
-
-            /* Check if the interrupt indicated there is a packet to read */
-            if (whd_bus_packet_available_to_read(whd_driver) != 0)
-            {
-                /* Receive all available packets */
-                do
-                {
-                    rx_status = whd_thread_receive_one_packet(whd_driver);
-                    rx_cnt++;
-                } while (rx_status != 0 && rx_cnt < WHD_THREAD_RX_BOUND);
-            }
-        }
-
-        /* Send all queued packets */
-        do
-        {
-            tx_status = whd_thread_send_one_packet(whd_driver);
-        } while (tx_status != 0);
-
-        if (rx_cnt >= WHD_THREAD_RX_BOUND)
-        {
-            thread_info->bus_interrupt = WHD_TRUE;
-            continue;
-        }
-
-        /* Sleep till WLAN do something */
-        whd_bus_wait_for_wlan_event(whd_driver, &thread_info->transceive_semaphore);
-        WPRINT_WHD_DATA_LOG( ("whd Thread: Woke\n") );
-    }
-
-    /* Set flag before releasing objects */
-    thread_info->whd_inited = WHD_FALSE;
-
-    /* Reset the quit flag */
-    thread_info->thread_quit_flag = WHD_FALSE;
-
-    whd_sdpcm_quit(whd_driver);
-
-    WPRINT_WHD_DATA_LOG( ("Stopped whd Thread\n") );
-
-    /* Ignore return - not much can be done about failure */
-    (void)cy_rtos_exit_thread();
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_utils.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_utils.c
deleted file mode 100644
index 1d0c136569..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_utils.c
+++ /dev/null
@@ -1,877 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * @file WHD utilities
- *
- * Utilities to help do specialized (not general purpose) WHD specific things
- */
-#include "whd_debug.h"
-#include "whd_utils.h"
-#include "whd_chip_constants.h"
-#include "whd_endian.h"
-#include "whd_int.h"
-
-#define UNSIGNED_CHAR_TO_CHAR(uch) ( (uch)& 0x7f )
-
-#define RSPEC_KBPS_MASK (0x7f)
-#define RSPEC_500KBPS(rate) ( (rate)&  RSPEC_KBPS_MASK )
-#define RSPEC_TO_KBPS(rate) (RSPEC_500KBPS( (rate) ) * (unsigned int)500)
-
-#define OTP_WORD_SIZE 16    /* Word size in bits */
-#define WPA_OUI_TYPE1                     "\x00\x50\xF2\x01"   /** WPA OUI */
-
-/******************************************************
-*             Static Variables
-******************************************************/
-whd_tlv8_data_t *whd_tlv_find_tlv8(const uint8_t *message, uint32_t message_length, uint8_t type);
-
-whd_tlv8_data_t *whd_tlv_find_tlv8(const uint8_t *message, uint32_t message_length, uint8_t type)
-{
-    while (message_length != 0)
-    {
-        uint8_t current_tlv_type   = message[0];
-        uint16_t current_tlv_length = (uint16_t)(message[1] + 2);
-
-        /* Check if we've overrun the buffer */
-        if (current_tlv_length > message_length)
-        {
-            return NULL;
-        }
-
-        /* Check if we've found the type we are looking for */
-        if (current_tlv_type == type)
-        {
-            return (whd_tlv8_data_t *)message;
-        }
-
-        /* Skip current TLV */
-        message        += current_tlv_length;
-        message_length -= current_tlv_length;
-    }
-    return 0;
-}
-
-inline whd_tlv8_header_t *whd_parse_tlvs(const whd_tlv8_header_t *tlv_buf, uint32_t buflen,
-                                         dot11_ie_id_t key)
-{
-    return (whd_tlv8_header_t *)whd_tlv_find_tlv8( (const uint8_t *)tlv_buf, buflen, key );
-}
-
-whd_bool_t whd_is_wpa_ie(vendor_specific_ie_header_t *wpaie, whd_tlv8_header_t **tlvs, uint32_t *tlvs_len)
-{
-    whd_tlv8_header_t *prev_tlvs = *tlvs;
-    whd_tlv8_header_t *new_tlvs = *tlvs;
-    vendor_specific_ie_header_t *ie = wpaie;
-
-    /* If the contents match the WPA_OUI and type=1 */
-    if ( (ie->tlv_header.length >= (uint8_t)VENDOR_SPECIFIC_IE_MINIMUM_LENGTH) &&
-         (memcmp(ie->oui, WPA_OUI_TYPE1, sizeof(ie->oui) ) == 0) )
-    {
-        /* Found the WPA IE */
-        return WHD_TRUE;
-    }
-
-    /* calculate the next ie address */
-    new_tlvs = (whd_tlv8_header_t *)( ( (uint8_t *)ie ) + ie->tlv_header.length + sizeof(whd_tlv8_header_t) );
-
-    /* check the rest of length of buffer */
-    if (*tlvs_len < (uint32_t)( ( (uint8_t *)new_tlvs ) - ( (uint8_t *)prev_tlvs ) ) )
-    {
-        /* set rest of length to zero to avoid buffer overflow */
-        *tlvs_len = 0;
-    }
-    else
-    {
-        /* point to the next ie */
-        *tlvs = new_tlvs;
-
-        /* tlvs now points to the beginning of next IE pointer, and *ie points to one or more TLV further
-         * down from the *prev_tlvs. So the tlvs_len need to be adjusted by prev_tlvs instead of *ie */
-        *tlvs_len -= (uint32_t)( ( (uint8_t *)*tlvs ) - ( (uint8_t *)prev_tlvs ) );
-    }
-
-    return WHD_FALSE;
-}
-
-whd_tlv8_header_t *whd_parse_dot11_tlvs(const whd_tlv8_header_t *tlv_buf, uint32_t buflen, dot11_ie_id_t key)
-{
-    return (whd_tlv8_header_t *)whd_tlv_find_tlv8( (const uint8_t *)tlv_buf, buflen, key );
-}
-
-#ifdef WPRINT_ENABLE_WHD_DEBUG
-char *whd_ssid_to_string(uint8_t *value, uint8_t length, char *ssid_buf, uint8_t ssid_buf_len)
-{
-    memset(ssid_buf, 0, ssid_buf_len);
-
-    if (ssid_buf_len > 0)
-    {
-        memcpy(ssid_buf, value, ssid_buf_len < length ? ssid_buf_len : length);
-    }
-
-    return ssid_buf;
-}
-
-/* When adding new events, update this switch statement to print correct string */
-#define CASE_RETURN_STRING(value) case value: \
-        return # value;
-
-#define CASE_RETURN(value) case value: \
-        break;
-
-const char *whd_event_to_string(whd_event_num_t value)
-{
-    switch (value)
-    {
-        CASE_RETURN_STRING(WLC_E_ULP)
-        CASE_RETURN(WLC_E_BT_WIFI_HANDOVER_REQ)
-        CASE_RETURN(WLC_E_SPW_TXINHIBIT)
-        CASE_RETURN(WLC_E_FBT_AUTH_REQ_IND)
-        CASE_RETURN(WLC_E_RSSI_LQM)
-        CASE_RETURN(WLC_E_PFN_GSCAN_FULL_RESULT)
-        CASE_RETURN(WLC_E_PFN_SWC)
-        CASE_RETURN(WLC_E_AUTHORIZED)
-        CASE_RETURN(WLC_E_PROBREQ_MSG_RX)
-        CASE_RETURN(WLC_E_RMC_EVENT)
-        CASE_RETURN(WLC_E_DPSTA_INTF_IND)
-        CASE_RETURN_STRING(WLC_E_NONE)
-        CASE_RETURN_STRING(WLC_E_SET_SSID)
-        CASE_RETURN(WLC_E_PFN_BEST_BATCHING)
-        CASE_RETURN(WLC_E_JOIN)
-        CASE_RETURN(WLC_E_START)
-        CASE_RETURN_STRING(WLC_E_AUTH)
-        CASE_RETURN(WLC_E_AUTH_IND)
-        CASE_RETURN(WLC_E_DEAUTH)
-        CASE_RETURN_STRING(WLC_E_DEAUTH_IND)
-        CASE_RETURN(WLC_E_ASSOC)
-        CASE_RETURN(WLC_E_ASSOC_IND)
-        CASE_RETURN(WLC_E_REASSOC)
-        CASE_RETURN(WLC_E_REASSOC_IND)
-        CASE_RETURN(WLC_E_DISASSOC)
-        CASE_RETURN_STRING(WLC_E_DISASSOC_IND)
-        CASE_RETURN(WLC_E_ROAM)
-        CASE_RETURN(WLC_E_ROAM_PREP)
-        CASE_RETURN(WLC_E_ROAM_START)
-        CASE_RETURN(WLC_E_QUIET_START)
-        CASE_RETURN(WLC_E_QUIET_END)
-        CASE_RETURN(WLC_E_BEACON_RX)
-        CASE_RETURN_STRING(WLC_E_LINK)
-        CASE_RETURN_STRING(WLC_E_RRM)
-        CASE_RETURN(WLC_E_MIC_ERROR)
-        CASE_RETURN(WLC_E_NDIS_LINK)
-        CASE_RETURN(WLC_E_TXFAIL)
-        CASE_RETURN(WLC_E_PMKID_CACHE)
-        CASE_RETURN(WLC_E_RETROGRADE_TSF)
-        CASE_RETURN(WLC_E_PRUNE)
-        CASE_RETURN(WLC_E_AUTOAUTH)
-        CASE_RETURN(WLC_E_EAPOL_MSG)
-        CASE_RETURN(WLC_E_SCAN_COMPLETE)
-        CASE_RETURN(WLC_E_ADDTS_IND)
-        CASE_RETURN(WLC_E_DELTS_IND)
-        CASE_RETURN(WLC_E_BCNSENT_IND)
-        CASE_RETURN(WLC_E_BCNRX_MSG)
-        CASE_RETURN(WLC_E_BCNLOST_MSG)
-        CASE_RETURN_STRING(WLC_E_PFN_NET_FOUND)
-        CASE_RETURN(WLC_E_PFN_NET_LOST)
-        CASE_RETURN(WLC_E_RESET_COMPLETE)
-        CASE_RETURN(WLC_E_JOIN_START)
-        CASE_RETURN(WLC_E_ASSOC_START)
-        CASE_RETURN(WLC_E_IBSS_ASSOC)
-        CASE_RETURN(WLC_E_RADIO)
-        CASE_RETURN(WLC_E_PSM_WATCHDOG)
-        CASE_RETURN(WLC_E_CCX_ASSOC_START)
-        CASE_RETURN(WLC_E_CCX_ASSOC_ABORT)
-        CASE_RETURN(WLC_E_PROBREQ_MSG)
-        CASE_RETURN(WLC_E_SCAN_CONFIRM_IND)
-        CASE_RETURN_STRING(WLC_E_PSK_SUP)
-        CASE_RETURN(WLC_E_COUNTRY_CODE_CHANGED)
-        CASE_RETURN(WLC_E_EXCEEDED_MEDIUM_TIME)
-        CASE_RETURN(WLC_E_ICV_ERROR)
-        CASE_RETURN(WLC_E_UNICAST_DECODE_ERROR)
-        CASE_RETURN(WLC_E_MULTICAST_DECODE_ERROR)
-        CASE_RETURN(WLC_E_TRACE)
-        CASE_RETURN(WLC_E_BTA_HCI_EVENT)
-        CASE_RETURN(WLC_E_IF)
-        CASE_RETURN(WLC_E_P2P_DISC_LISTEN_COMPLETE)
-        CASE_RETURN(WLC_E_RSSI)
-        CASE_RETURN_STRING(WLC_E_PFN_SCAN_COMPLETE)
-        CASE_RETURN(WLC_E_EXTLOG_MSG)
-        CASE_RETURN(WLC_E_ACTION_FRAME)
-        CASE_RETURN(WLC_E_ACTION_FRAME_COMPLETE)
-        CASE_RETURN(WLC_E_PRE_ASSOC_IND)
-        CASE_RETURN(WLC_E_PRE_REASSOC_IND)
-        CASE_RETURN(WLC_E_CHANNEL_ADOPTED)
-        CASE_RETURN(WLC_E_AP_STARTED)
-        CASE_RETURN(WLC_E_DFS_AP_STOP)
-        CASE_RETURN(WLC_E_DFS_AP_RESUME)
-        CASE_RETURN(WLC_E_WAI_STA_EVENT)
-        CASE_RETURN(WLC_E_WAI_MSG)
-        CASE_RETURN_STRING(WLC_E_ESCAN_RESULT)
-        CASE_RETURN(WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE)
-        CASE_RETURN(WLC_E_PROBRESP_MSG)
-        CASE_RETURN(WLC_E_P2P_PROBREQ_MSG)
-        CASE_RETURN(WLC_E_DCS_REQUEST)
-        CASE_RETURN(WLC_E_FIFO_CREDIT_MAP)
-        CASE_RETURN(WLC_E_ACTION_FRAME_RX)
-        CASE_RETURN(WLC_E_WAKE_EVENT)
-        CASE_RETURN(WLC_E_RM_COMPLETE)
-        CASE_RETURN(WLC_E_HTSFSYNC)
-        CASE_RETURN(WLC_E_OVERLAY_REQ)
-        CASE_RETURN_STRING(WLC_E_CSA_COMPLETE_IND)
-        CASE_RETURN(WLC_E_EXCESS_PM_WAKE_EVENT)
-        CASE_RETURN(WLC_E_PFN_SCAN_NONE)
-        CASE_RETURN(WLC_E_PFN_SCAN_ALLGONE)
-        CASE_RETURN(WLC_E_GTK_PLUMBED)
-        CASE_RETURN(WLC_E_ASSOC_IND_NDIS)
-        CASE_RETURN(WLC_E_REASSOC_IND_NDIS)
-        CASE_RETURN(WLC_E_ASSOC_REQ_IE)
-        CASE_RETURN(WLC_E_ASSOC_RESP_IE)
-        CASE_RETURN(WLC_E_ASSOC_RECREATED)
-        CASE_RETURN(WLC_E_ACTION_FRAME_RX_NDIS)
-        CASE_RETURN(WLC_E_AUTH_REQ)
-        CASE_RETURN(WLC_E_TDLS_PEER_EVENT)
-        CASE_RETURN(WLC_E_SPEEDY_RECREATE_FAIL)
-        CASE_RETURN(WLC_E_NATIVE)
-        CASE_RETURN(WLC_E_PKTDELAY_IND)
-        CASE_RETURN(WLC_E_AWDL_AW)
-        CASE_RETURN(WLC_E_AWDL_ROLE)
-        CASE_RETURN(WLC_E_AWDL_EVENT)
-        CASE_RETURN(WLC_E_NIC_AF_TXS)
-        CASE_RETURN(WLC_E_NAN)
-        CASE_RETURN(WLC_E_BEACON_FRAME_RX)
-        CASE_RETURN(WLC_E_SERVICE_FOUND)
-        CASE_RETURN(WLC_E_GAS_FRAGMENT_RX)
-        CASE_RETURN(WLC_E_GAS_COMPLETE)
-        CASE_RETURN(WLC_E_P2PO_ADD_DEVICE)
-        CASE_RETURN(WLC_E_P2PO_DEL_DEVICE)
-        CASE_RETURN(WLC_E_WNM_STA_SLEEP)
-        CASE_RETURN(WLC_E_TXFAIL_THRESH)
-        CASE_RETURN(WLC_E_PROXD)
-        CASE_RETURN(WLC_E_IBSS_COALESCE)
-        CASE_RETURN(WLC_E_AWDL_RX_PRB_RESP)
-        CASE_RETURN(WLC_E_AWDL_RX_ACT_FRAME)
-        CASE_RETURN(WLC_E_AWDL_WOWL_NULLPKT)
-        CASE_RETURN(WLC_E_AWDL_PHYCAL_STATUS)
-        CASE_RETURN(WLC_E_AWDL_OOB_AF_STATUS)
-        CASE_RETURN(WLC_E_AWDL_SCAN_STATUS)
-        CASE_RETURN(WLC_E_AWDL_AW_START)
-        CASE_RETURN(WLC_E_AWDL_AW_END)
-        CASE_RETURN(WLC_E_AWDL_AW_EXT)
-        CASE_RETURN(WLC_E_AWDL_PEER_CACHE_CONTROL)
-        CASE_RETURN(WLC_E_CSA_START_IND)
-        CASE_RETURN(WLC_E_CSA_DONE_IND)
-        CASE_RETURN(WLC_E_CSA_FAILURE_IND)
-        CASE_RETURN(WLC_E_CCA_CHAN_QUAL)
-        CASE_RETURN(WLC_E_BSSID)
-        CASE_RETURN(WLC_E_TX_STAT_ERROR)
-        CASE_RETURN(WLC_E_BCMC_CREDIT_SUPPORT)
-        CASE_RETURN(WLC_E_PSTA_PRIMARY_INTF_IND)
-        case WLC_E_LAST:
-        default:
-            return "Unknown";
-
-            break;
-    }
-
-    return "Unknown";
-}
-
-const char *whd_status_to_string(whd_event_status_t status)
-{
-    switch (status)
-    {
-        CASE_RETURN_STRING(WLC_E_STATUS_SUCCESS)
-        CASE_RETURN_STRING(WLC_E_STATUS_FAIL)
-        CASE_RETURN_STRING(WLC_E_STATUS_TIMEOUT)
-        CASE_RETURN_STRING(WLC_E_STATUS_NO_NETWORKS)
-        CASE_RETURN_STRING(WLC_E_STATUS_ABORT)
-        CASE_RETURN_STRING(WLC_E_STATUS_NO_ACK)
-        CASE_RETURN_STRING(WLC_E_STATUS_UNSOLICITED)
-        CASE_RETURN_STRING(WLC_E_STATUS_ATTEMPT)
-        CASE_RETURN_STRING(WLC_E_STATUS_PARTIAL)
-        CASE_RETURN_STRING(WLC_E_STATUS_NEWSCAN)
-        CASE_RETURN_STRING(WLC_E_STATUS_NEWASSOC)
-        CASE_RETURN_STRING(WLC_E_STATUS_11HQUIET)
-        CASE_RETURN_STRING(WLC_E_STATUS_SUPPRESS)
-        CASE_RETURN_STRING(WLC_E_STATUS_NOCHANS)
-        CASE_RETURN_STRING(WLC_E_STATUS_CCXFASTRM)
-        CASE_RETURN_STRING(WLC_E_STATUS_CS_ABORT)
-        CASE_RETURN_STRING(WLC_SUP_DISCONNECTED)
-        CASE_RETURN_STRING(WLC_SUP_CONNECTING)
-        CASE_RETURN_STRING(WLC_SUP_IDREQUIRED)
-        CASE_RETURN_STRING(WLC_SUP_AUTHENTICATING)
-        CASE_RETURN_STRING(WLC_SUP_AUTHENTICATED)
-        CASE_RETURN_STRING(WLC_SUP_KEYXCHANGE)
-        CASE_RETURN_STRING(WLC_SUP_KEYED)
-        CASE_RETURN_STRING(WLC_SUP_TIMEOUT)
-        CASE_RETURN_STRING(WLC_SUP_LAST_BASIC_STATE)
-        CASE_RETURN_STRING(WLC_SUP_KEYXCHANGE_PREP_M4)
-        CASE_RETURN_STRING(WLC_SUP_KEYXCHANGE_WAIT_G1)
-        CASE_RETURN_STRING(WLC_SUP_KEYXCHANGE_PREP_G2)
-        CASE_RETURN_STRING(WLC_DOT11_SC_SUCCESS)
-        CASE_RETURN_STRING(WLC_DOT11_SC_FAILURE)
-        CASE_RETURN_STRING(WLC_DOT11_SC_CAP_MISMATCH)
-        CASE_RETURN_STRING(WLC_DOT11_SC_REASSOC_FAIL)
-        CASE_RETURN_STRING(WLC_DOT11_SC_ASSOC_FAIL)
-        CASE_RETURN_STRING(WLC_DOT11_SC_AUTH_MISMATCH)
-        CASE_RETURN_STRING(WLC_DOT11_SC_AUTH_SEQ)
-        CASE_RETURN_STRING(WLC_DOT11_SC_AUTH_CHALLENGE_FAIL)
-        CASE_RETURN_STRING(WLC_DOT11_SC_AUTH_TIMEOUT)
-        CASE_RETURN_STRING(WLC_DOT11_SC_ASSOC_BUSY_FAIL)
-        CASE_RETURN_STRING(WLC_DOT11_SC_ASSOC_RATE_MISMATCH)
-        CASE_RETURN_STRING(WLC_DOT11_SC_ASSOC_SHORT_REQUIRED)
-        CASE_RETURN_STRING(WLC_DOT11_SC_ASSOC_PBCC_REQUIRED)
-        CASE_RETURN_STRING(WLC_DOT11_SC_ASSOC_AGILITY_REQUIRED)
-        CASE_RETURN_STRING(WLC_DOT11_SC_ASSOC_SPECTRUM_REQUIRED)
-        CASE_RETURN_STRING(WLC_DOT11_SC_ASSOC_BAD_POWER_CAP)
-        CASE_RETURN_STRING(WLC_DOT11_SC_ASSOC_BAD_SUP_CHANNELS)
-        CASE_RETURN_STRING(WLC_DOT11_SC_ASSOC_SHORTSLOT_REQUIRED)
-        CASE_RETURN_STRING(WLC_DOT11_SC_ASSOC_ERPBCC_REQUIRED)
-        CASE_RETURN_STRING(WLC_DOT11_SC_ASSOC_DSSOFDM_REQUIRED)
-        CASE_RETURN_STRING(WLC_DOT11_SC_DECLINED)
-        CASE_RETURN_STRING(WLC_DOT11_SC_INVALID_PARAMS)
-        CASE_RETURN_STRING(WLC_DOT11_SC_INVALID_AKMP)
-        CASE_RETURN_STRING(WLC_DOT11_SC_INVALID_MDID)
-        CASE_RETURN_STRING(WLC_DOT11_SC_INVALID_FTIE)
-        case WLC_E_STATUS_FORCE_32_BIT:
-        default:
-            break;
-    }
-    return "Unknown";
-}
-
-const char *whd_reason_to_string(whd_event_reason_t reason)
-{
-    switch (reason)
-    {
-        CASE_RETURN_STRING(WLC_E_REASON_INITIAL_ASSOC)
-        CASE_RETURN_STRING(WLC_E_REASON_LOW_RSSI)
-        CASE_RETURN_STRING(WLC_E_REASON_DEAUTH)
-        CASE_RETURN_STRING(WLC_E_REASON_DISASSOC)
-        CASE_RETURN_STRING(WLC_E_REASON_BCNS_LOST)
-        CASE_RETURN_STRING(WLC_E_REASON_FAST_ROAM_FAILED)
-        CASE_RETURN_STRING(WLC_E_REASON_DIRECTED_ROAM)
-        CASE_RETURN_STRING(WLC_E_REASON_TSPEC_REJECTED)
-        CASE_RETURN_STRING(WLC_E_REASON_BETTER_AP)
-        CASE_RETURN_STRING(WLC_E_PRUNE_ENCR_MISMATCH)
-        CASE_RETURN_STRING(WLC_E_PRUNE_BCAST_BSSID)
-        CASE_RETURN_STRING(WLC_E_PRUNE_MAC_DENY)
-        CASE_RETURN_STRING(WLC_E_PRUNE_MAC_NA)
-        CASE_RETURN_STRING(WLC_E_PRUNE_REG_PASSV)
-        CASE_RETURN_STRING(WLC_E_PRUNE_SPCT_MGMT)
-        CASE_RETURN_STRING(WLC_E_PRUNE_RADAR)
-        CASE_RETURN_STRING(WLC_E_RSN_MISMATCH)
-        CASE_RETURN_STRING(WLC_E_PRUNE_NO_COMMON_RATES)
-        CASE_RETURN_STRING(WLC_E_PRUNE_BASIC_RATES)
-        CASE_RETURN_STRING(WLC_E_PRUNE_CCXFAST_PREVAP)
-        CASE_RETURN_STRING(WLC_E_PRUNE_CIPHER_NA)
-        CASE_RETURN_STRING(WLC_E_PRUNE_KNOWN_STA)
-        CASE_RETURN_STRING(WLC_E_PRUNE_CCXFAST_DROAM)
-        CASE_RETURN_STRING(WLC_E_PRUNE_WDS_PEER)
-        CASE_RETURN_STRING(WLC_E_PRUNE_QBSS_LOAD)
-        CASE_RETURN_STRING(WLC_E_PRUNE_HOME_AP)
-        CASE_RETURN_STRING(WLC_E_PRUNE_AP_BLOCKED)
-        CASE_RETURN_STRING(WLC_E_PRUNE_NO_DIAG_SUPPORT)
-        CASE_RETURN_STRING(WLC_E_SUP_OTHER)
-        CASE_RETURN_STRING(WLC_E_SUP_DECRYPT_KEY_DATA)
-        CASE_RETURN_STRING(WLC_E_SUP_BAD_UCAST_WEP128)
-        CASE_RETURN_STRING(WLC_E_SUP_BAD_UCAST_WEP40)
-        CASE_RETURN_STRING(WLC_E_SUP_UNSUP_KEY_LEN)
-        CASE_RETURN_STRING(WLC_E_SUP_PW_KEY_CIPHER)
-        CASE_RETURN_STRING(WLC_E_SUP_MSG3_TOO_MANY_IE)
-        CASE_RETURN_STRING(WLC_E_SUP_MSG3_IE_MISMATCH)
-        CASE_RETURN_STRING(WLC_E_SUP_NO_INSTALL_FLAG)
-        CASE_RETURN_STRING(WLC_E_SUP_MSG3_NO_GTK)
-        CASE_RETURN_STRING(WLC_E_SUP_GRP_KEY_CIPHER)
-        CASE_RETURN_STRING(WLC_E_SUP_GRP_MSG1_NO_GTK)
-        CASE_RETURN_STRING(WLC_E_SUP_GTK_DECRYPT_FAIL)
-        CASE_RETURN_STRING(WLC_E_SUP_SEND_FAIL)
-        CASE_RETURN_STRING(WLC_E_SUP_DEAUTH)
-        CASE_RETURN_STRING(WLC_E_SUP_WPA_PSK_TMO)
-        CASE_RETURN_STRING(DOT11_RC_RESERVED)
-        CASE_RETURN_STRING(DOT11_RC_UNSPECIFIED)
-        CASE_RETURN_STRING(DOT11_RC_AUTH_INVAL)
-        CASE_RETURN_STRING(DOT11_RC_DEAUTH_LEAVING)
-        CASE_RETURN_STRING(DOT11_RC_INACTIVITY)
-        CASE_RETURN_STRING(DOT11_RC_BUSY)
-        CASE_RETURN_STRING(DOT11_RC_INVAL_CLASS_2)
-        CASE_RETURN_STRING(DOT11_RC_INVAL_CLASS_3)
-        CASE_RETURN_STRING(DOT11_RC_DISASSOC_LEAVING)
-        CASE_RETURN_STRING(DOT11_RC_NOT_AUTH)
-        CASE_RETURN_STRING(DOT11_RC_BAD_PC)
-        CASE_RETURN_STRING(DOT11_RC_BAD_CHANNELS)
-        CASE_RETURN_STRING(DOT11_RC_UNSPECIFIED_QOS)
-        CASE_RETURN_STRING(DOT11_RC_INSUFFCIENT_BW)
-        CASE_RETURN_STRING(DOT11_RC_EXCESSIVE_FRAMES)
-        CASE_RETURN_STRING(DOT11_RC_TX_OUTSIDE_TXOP)
-        CASE_RETURN_STRING(DOT11_RC_LEAVING_QBSS)
-        CASE_RETURN_STRING(DOT11_RC_BAD_MECHANISM)
-        CASE_RETURN_STRING(DOT11_RC_SETUP_NEEDED)
-        CASE_RETURN_STRING(DOT11_RC_TIMEOUT)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_STATUS_CHG)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_MERGE)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_STOP)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_P2P)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_WINDOW_BEGIN_P2P)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_WINDOW_BEGIN_MESH)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_WINDOW_BEGIN_IBSS)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_WINDOW_BEGIN_RANGING)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_POST_DISC)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_DATA_IF_ADD)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_DATA_PEER_ADD)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_DATA_IND)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_DATA_CONF)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_SDF_RX)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_DATA_END)
-        CASE_RETURN_STRING(WLC_E_NAN_EVENT_BCN_RX)
-        case DOT11_RC_MAX:
-        case WLC_E_REASON_FORCE_32_BIT:
-        default:
-            break;
-    }
-
-    return "Unknown";
-}
-
-char *whd_ether_ntoa(const uint8_t *ea, char *buf, uint8_t buf_len)
-{
-    const char hex[] =
-    {
-        '0', '1', '2', '3', '4', '5', '6', '7',
-        '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
-    };
-    char *output = buf;
-    const uint8_t *octet = ea;
-
-    if (buf_len < WHD_ETHER_ADDR_STR_LEN)
-    {
-        if (buf_len > 0)
-        {
-            /* buffer too short */
-            buf[0] = '\0';
-        }
-        return buf;
-    }
-
-    for (; octet != &ea[WHD_ETHER_ADDR_LEN]; octet++)
-    {
-        *output++ = hex[(*octet >> 4) & 0xf];
-        *output++ = hex[*octet & 0xf];
-        *output++ = ':';
-    }
-
-    *(output - 1) = '\0';
-
-    return buf;
-}
-
-#endif /* WPRINT_ENABLE_WHD_DEBUG */
-
-void whd_convert_security_type_to_string(whd_security_t security, char *out_str, uint16_t out_str_len)
-{
-    if (security == WHD_SECURITY_OPEN)
-    {
-        strncat(out_str, " Open", out_str_len);
-    }
-    if (security & WEP_ENABLED)
-    {
-        strncat(out_str, " WEP", out_str_len);
-    }
-    if (security & WPA3_SECURITY)
-    {
-        strncat(out_str, " WPA3", out_str_len);
-    }
-    if (security & WPA2_SECURITY)
-    {
-        strncat(out_str, " WPA2", out_str_len);
-    }
-    if (security & WPA_SECURITY)
-    {
-        strncat(out_str, " WPA", out_str_len);
-    }
-    if (security & AES_ENABLED)
-    {
-        strncat(out_str, " AES", out_str_len);
-    }
-    if (security & TKIP_ENABLED)
-    {
-        strncat(out_str, " TKIP", out_str_len);
-    }
-    if (security & SHARED_ENABLED)
-    {
-        strncat(out_str, " SHARED", out_str_len);
-    }
-    if (security & ENTERPRISE_ENABLED)
-    {
-        strncat(out_str, " Enterprise", out_str_len);
-    }
-    if (security & WPS_ENABLED)
-    {
-        strncat(out_str, " WPS", out_str_len);
-    }
-    if (security & FBT_ENABLED)
-    {
-        strncat(out_str, " FBT", out_str_len);
-    }
-    if (security & IBSS_ENABLED)
-    {
-        strncat(out_str, " IBSS", out_str_len);
-    }
-    if (security == WHD_SECURITY_UNKNOWN)
-    {
-        strncat(out_str, " Unknown", out_str_len);
-    }
-    if (!(security & ENTERPRISE_ENABLED) && (security != WHD_SECURITY_OPEN) &&
-        (security != WHD_SECURITY_UNKNOWN) )
-    {
-        strncat(out_str, " PSK", out_str_len);
-    }
-}
-
-/*!
- ******************************************************************************
- * Prints partial details of a scan result on a single line
- *
- * @param[in] record  A pointer to the whd_scan_result_t record
- *
- */
-
-void whd_print_scan_result(whd_scan_result_t *record)
-{
-    const char *str = NULL;
-    char sec_type_string[40] = { 0 };
-
-    switch (record->bss_type)
-    {
-        case WHD_BSS_TYPE_ADHOC:
-            str = "Adhoc";
-            break;
-
-        case WHD_BSS_TYPE_INFRASTRUCTURE:
-            str = "Infra";
-            break;
-
-        case WHD_BSS_TYPE_ANY:
-            str = "Any";
-            break;
-
-        case WHD_BSS_TYPE_MESH:
-        case WHD_BSS_TYPE_UNKNOWN:
-            str = "Unknown";
-            break;
-
-        default:
-            str = "?";
-            break;
-    }
-
-    UNUSED_PARAMETER(str);
-    WPRINT_MACRO( ("%5s ", str) );
-    WPRINT_MACRO( ("%02X:%02X:%02X:%02X:%02X:%02X ", record->BSSID.octet[0], record->BSSID.octet[1],
-                   record->BSSID.octet[2], record->BSSID.octet[3], record->BSSID.octet[4],
-                   record->BSSID.octet[5]) );
-
-    if (record->flags & WHD_SCAN_RESULT_FLAG_RSSI_OFF_CHANNEL)
-    {
-        WPRINT_MACRO( ("OFF ") );
-    }
-    else
-    {
-        WPRINT_MACRO( ("%d ", record->signal_strength) );
-    }
-
-    if (record->max_data_rate < 100000)
-    {
-        WPRINT_MACRO( (" %.1f ", (double)(record->max_data_rate / 1000.0) ) );
-    }
-    else
-    {
-        WPRINT_MACRO( ("%.1f ", (double)(record->max_data_rate / 1000.0) ) );
-    }
-    WPRINT_MACRO( (" %3d  ", record->channel) );
-
-    whd_convert_security_type_to_string(record->security, sec_type_string, (sizeof(sec_type_string) - 1) );
-
-    WPRINT_MACRO( ("%-20s ", sec_type_string) );
-    WPRINT_MACRO( (" %-32s ", record->SSID.value) );
-
-    if (record->ccode[0] != '\0')
-    {
-        WPRINT_MACRO( ("%c%c    ", record->ccode[0], record->ccode[1]) );
-    }
-    else
-    {
-        WPRINT_MACRO( ("      ") );
-    }
-
-    if (record->flags & WHD_SCAN_RESULT_FLAG_BEACON)
-    {
-        WPRINT_MACRO( (" %-15s", " BEACON") );
-    }
-    else
-    {
-        WPRINT_MACRO( (" %-15s", " PROBE ") );
-    }
-    WPRINT_MACRO( ("\n") );
-}
-
-void whd_hexdump(uint8_t *data, uint32_t data_len)
-{
-    uint32_t i;
-    uint8_t buff[17] = {0};
-
-    UNUSED_PARAMETER(buff);
-    for (i = 0; i < data_len; i++)
-    {
-        if ( (i % 16) == 0 )
-        {
-            if (i != 0)
-            {
-                WPRINT_MACRO( ("  %s\n", buff) );
-            }
-            WPRINT_MACRO( ("%04" PRIx32 " ", i) );
-        }
-        WPRINT_MACRO( (" %02x", data[i]) );
-
-        if ( (data[i] < 0x20) || (data[i] > 0x7e) )
-        {
-            buff[i % 16] = '.';
-        }
-        else
-        {
-            buff[i % 16] = data[i];
-        }
-        buff[(i % 16) + 1] = '\0';
-    }
-    while ( (i % 16) != 0 )
-    {
-        WPRINT_MACRO( ("   ") );
-        i++;
-    }
-    WPRINT_MACRO( ("  %s\n", buff) );
-}
-
-void whd_ioctl_to_string(uint32_t cmd, char *ioctl_str, uint16_t ioctl_str_len)
-{
-    if (cmd == 2)
-    {
-        strncpy(ioctl_str, "WLC_UP", ioctl_str_len);
-    }
-    else if (cmd == 20)
-    {
-        strncpy(ioctl_str, "WLC_SET_INFRA", ioctl_str_len);
-    }
-    else if (cmd == 22)
-    {
-        strncpy(ioctl_str, "WLC_SET_AUTH", ioctl_str_len);
-    }
-    else if (cmd == 26)
-    {
-        strncpy(ioctl_str, "WLC_SET_SSID", ioctl_str_len);
-    }
-    else if (cmd == 52)
-    {
-        strncpy(ioctl_str, "WLC_DISASSOC", ioctl_str_len);
-    }
-    else if (cmd == 55)
-    {
-        strncpy(ioctl_str, "WLC_SET_ROAM_TRIGGER", ioctl_str_len);
-    }
-    else if (cmd == 57)
-    {
-        strncpy(ioctl_str, "WLC_SET_ROAM_DELTA", ioctl_str_len);
-    }
-    else if (cmd == 59)
-    {
-        strncpy(ioctl_str, "WLC_SET_ROAM_SCAN_PERIOD", ioctl_str_len);
-    }
-    else if (cmd == 110)
-    {
-        strncpy(ioctl_str, "WLC_SET_GMODE", ioctl_str_len);
-    }
-    else if (cmd == 116)
-    {
-        strncpy(ioctl_str, "WLC_SET_SCANSUPPRESS", ioctl_str_len);
-    }
-    else if (cmd == 134)
-    {
-        strncpy(ioctl_str, "WLC_SET_WSEC", ioctl_str_len);
-    }
-    else if (cmd == 165)
-    {
-        strncpy(ioctl_str, "WLC_SET_WPA_AUTH", ioctl_str_len);
-    }
-    else if (cmd == 268)
-    {
-        strncpy(ioctl_str, "WLC_SET_WSEC_PMK", ioctl_str_len);
-    }
-}
-
-void whd_event_info_to_string(uint32_t cmd, uint16_t flag, uint32_t reason, char *ioctl_str, uint16_t ioctl_str_len)
-{
-    if (cmd == 0)
-    {
-        strncpy(ioctl_str, "WLC_E_SET_SSID", ioctl_str_len);
-    }
-    else if (cmd == 3)
-    {
-        strncpy(ioctl_str, "WLC_E_AUTH    ", ioctl_str_len);
-    }
-    else if (cmd == 16)
-    {
-        strncpy(ioctl_str, "WLC_E_LINK    ", ioctl_str_len);
-    }
-    else if (cmd == 46)
-    {
-        strncpy(ioctl_str, "WLC_E_PSK_SUP ", ioctl_str_len);
-    }
-    else if (cmd == 54)
-    {
-        strncpy(ioctl_str, "WLC_E_IF      ", ioctl_str_len);
-    }
-    else if (cmd == 69)
-    {
-        strncpy(ioctl_str, "WLC_E_ESCAN_RESULT", ioctl_str_len);
-    }
-
-    if (flag == 0)
-    {
-        strncat(ioctl_str, "  WLC_E_STATUS_SUCCESS",  ioctl_str_len);
-    }
-    if (flag == 8)
-    {
-        strncat(ioctl_str, "  WLC_E_STATUS_PARTIAL",  ioctl_str_len);
-    }
-    else if (flag == 262)
-    {
-        strncat(ioctl_str, "  WLC_SUP_KEYED       ",  ioctl_str_len);
-    }
-
-    if (reason == 0)
-    {
-        strncat(ioctl_str, "    WLC_E_REASON_INITIAL_ASSOC",  ioctl_str_len);
-    }
-    else if (reason == 512)
-    {
-        strncat(ioctl_str, "    WLC_E_SUP_OTHER",  ioctl_str_len);
-    }
-}
-
-bool whd_str_to_ip(const char *ip4addr, size_t len, void *dest)
-{
-    uint8_t *addr = dest;
-
-    if (len > 16)   // Too long, not possible
-    {
-        return false;
-    }
-
-    uint8_t stringLength = 0, byteCount = 0;
-
-    //Iterate over each component of the IP. The exit condition is in the middle of the loop
-    while (true)
-    {
-
-        //No valid character (IPv4 addresses don't have implicit 0, that is x.y..z being read as x.y.0.z)
-        if ( (stringLength == len) || (ip4addr[stringLength] < '0') || (ip4addr[stringLength] > '9') )
-        {
-            return false;
-        }
-
-        //For each component, we convert it to the raw value
-        uint16_t byte = 0;
-        while (stringLength < len && ip4addr[stringLength] >= '0' && ip4addr[stringLength] <= '9')
-        {
-            byte *= 10;
-            byte += ip4addr[stringLength++] - '0';
-
-            //We go over the maximum value for an IPv4 component
-            if (byte > 0xff)
-            {
-                return false;
-            }
-        }
-
-        //Append the component
-        addr[byteCount++] = (uint8_t)byte;
-
-        //If we're at the end, we leave the loop. It's the only way to reach the `true` output
-        if (byteCount == 4)
-        {
-            break;
-        }
-
-        //If the next character is invalid, we return false
-        if ( (stringLength == len) || (ip4addr[stringLength++] != '.') )
-        {
-            return false;
-        }
-    }
-
-    return stringLength == len || ip4addr[stringLength] == '\0';
-}
-
-static void whd_ipv4_itoa(char *string, uint8_t byte)
-{
-    char *baseString = string;
-
-    //Write the digits to the buffer from the least significant to the most
-    //  This is the incorrect order but we will swap later
-    do
-    {
-        *string++ = '0' + byte % 10;
-        byte /= 10;
-    } while (byte);
-
-    //We put the final \0, then go back one step on the last digit for the swap
-    *string-- = '\0';
-
-    //We now swap the digits
-    while (baseString < string)
-    {
-        uint8_t tmp = *string;
-        *string-- = *baseString;
-        *baseString++ = tmp;
-    }
-}
-
-uint8_t whd_ip4_to_string(const void *ip4addr, char *p)
-{
-    uint8_t outputPos = 0;
-    const uint8_t *byteArray = ip4addr;
-
-    for (uint8_t component = 0; component < 4; ++component)
-    {
-        //Convert the byte to string
-        whd_ipv4_itoa(&p[outputPos], byteArray[component]);
-
-        //Move outputPos to the end of the string
-        while (p[outputPos] != '\0')
-        {
-            outputPos += 1;
-        }
-
-        //Append a dot if this is not the last digit
-        if (component < 3)
-        {
-            p[outputPos++] = '.';
-        }
-    }
-    // Return length of generated string, excluding the terminating null character
-    return outputPos;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_wifi.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_wifi.c
deleted file mode 100644
index 43cc162cbb..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_wifi.c
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *
- * Implements functions called by WHD user APIs, but not directly exposed to user
- *
- * This file provides functions which are not directly exposed to user but, called by end-user functions which allow actions such as
- * seting the MAC address, getting channel info, etc
- */
-
-#include "whd_ap.h"
-#include "whd_chip_constants.h"
-#include "whd_debug.h"
-#include "whd_events_int.h"
-#include "whd_cdc_bdc.h"
-#include "whd_thread_internal.h"
-#include "whd_utils.h"
-#include "whd_wifi_api.h"
-#include "whd_wlioctl.h"
-
-/******************************************************
-* @cond       Constants
-******************************************************/
-#define MAC_ADDRESS_LOCALLY_ADMINISTERED_BIT 0x02
-
-/******************************************************
-*             Local Structures
-******************************************************/
-
-
-
-/******************************************************
-*                   Variables
-******************************************************/
-void (*whd_wifi_link_update_callback)(void) = NULL;
-
-/******************************************************
-*             Function definitions
-******************************************************/
-
-uint32_t whd_wifi_set_mac_address(whd_interface_t ifp, whd_mac_t mac)
-{
-    whd_buffer_t buffer;
-    uint32_t *data;
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    /* AP interface needs to come up with MAC different from STA  */
-#ifdef APOLLO_AUDIO
-
-    /* Work around the issue of asking API to set one address and it sets a different address.
-     * This will cause any comparison of set and get mac address to fail.  TODO: move twiddling this
-     * bit to a higher level.
-     */
-    if (0)
-#else
-    if (ifp->role == WHD_AP_ROLE)
-#endif
-    {
-        whd_mac_t ap_mac_address;
-
-        memcpy(&ap_mac_address, &mac, sizeof(whd_mac_t) );
-        if (ap_mac_address.octet[0] & MAC_ADDRESS_LOCALLY_ADMINISTERED_BIT)
-        {
-            ap_mac_address.octet[0] &= (uint8_t) ~(MAC_ADDRESS_LOCALLY_ADMINISTERED_BIT);
-        }
-        else
-        {
-            ap_mac_address.octet[0] |= MAC_ADDRESS_LOCALLY_ADMINISTERED_BIT;
-        }
-
-        data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, sizeof(whd_mac_t), IOVAR_STR_CUR_ETHERADDR);
-        CHECK_IOCTL_BUFFER(data);
-        memcpy(data, &ap_mac_address, sizeof(whd_mac_t) );
-        CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL) );
-
-        if (memcmp(&mac, &ap_mac_address, sizeof(whd_mac_t) ) != 0)
-        {
-            WPRINT_WHD_INFO( (" STA MAC address : %02x:%02x:%02x:%02x:%02x:%02x \n"
-                              " AP  MAC address : %02x:%02x:%02x:%02x:%02x:%02x \n",
-                              mac.octet[0], mac.octet[1], mac.octet[2],
-                              mac.octet[3], mac.octet[4], mac.octet[3],
-                              ap_mac_address.octet[0], ap_mac_address.octet[1], ap_mac_address.octet[2],
-                              ap_mac_address.octet[3], ap_mac_address.octet[4], ap_mac_address.octet[3]) );
-        }
-    }
-    else
-    {
-        data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, sizeof(whd_mac_t), IOVAR_STR_CUR_ETHERADDR);
-        CHECK_IOCTL_BUFFER(data);
-        memcpy(data, &mac, sizeof(whd_mac_t) );
-        CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL) );
-    }
-
-    return WHD_SUCCESS;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_wifi_api.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_wifi_api.c
deleted file mode 100644
index a570639cdd..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_wifi_api.c
+++ /dev/null
@@ -1,4375 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** @file
- *  Implements user functions for controlling the Wi-Fi system
- *
- *  This file provides end-user functions which allow actions such as scanning for
- *  Wi-Fi networks, joining Wi-Fi networks, getting the MAC address, etc
- *
- */
-
-#include <stdlib.h>
-#include "whd_version.h"
-#include "whd_chip_constants.h"
-#include "whd_cdc_bdc.h"
-#include "whd_thread_internal.h"
-#include "whd_debug.h"
-#include "whd_utils.h"
-#include "whd_wifi_api.h"
-#include "whd_buffer_api.h"
-#include "whd_wlioctl.h"
-#include "whd_types.h"
-#include "whd_types_int.h"
-
-/******************************************************
-*                   Constants
-******************************************************/
-#define WL_CHANSPEC_CHAN_MASK             (0x00ff)
-#define CHSPEC_CHANNEL(chspec)            ( (uint8_t)( (chspec) & WL_CHANSPEC_CHAN_MASK ) )
-#define CH20MHZ_CHSPEC(channel)           (chanspec_t)( (chanspec_t)(channel) | GET_C_VAR(whd_driver, CHANSPEC_BW_20) |                                                           \
-                                                        GET_C_VAR(whd_driver, CHANSPEC_CTL_SB_NONE) | \
-                                                        ( ( (channel) <= CH_MAX_2G_CHANNEL ) ? GET_C_VAR(whd_driver, \
-                                                                                                         CHANSPEC_BAND_2G) \
-                                                          : GET_C_VAR(whd_driver, CHANSPEC_BAND_5G) ) )
-
-#define MAX_SUPPORTED_MCAST_ENTRIES   (10)
-#define WLC_EVENT_MSG_LINK      (0x01)
-
-#define JOIN_ASSOCIATED             (uint32_t)(1 << 0)
-#define JOIN_AUTHENTICATED          (uint32_t)(1 << 1)
-#define JOIN_LINK_READY             (uint32_t)(1 << 2)
-#define JOIN_SECURITY_COMPLETE      (uint32_t)(1 << 3)
-#define JOIN_SSID_SET               (uint32_t)(1 << 4)
-#define JOIN_NO_NETWORKS            (uint32_t)(1 << 5)
-#define JOIN_EAPOL_KEY_M1_TIMEOUT   (uint32_t)(1 << 6)
-#define JOIN_EAPOL_KEY_M3_TIMEOUT   (uint32_t)(1 << 7)
-#define JOIN_EAPOL_KEY_G1_TIMEOUT   (uint32_t)(1 << 8)
-#define JOIN_EAPOL_KEY_FAILURE      (uint32_t)(1 << 9)
-
-#define JOIN_SECURITY_FLAGS_MASK    (JOIN_SECURITY_COMPLETE | JOIN_EAPOL_KEY_M1_TIMEOUT | JOIN_EAPOL_KEY_M3_TIMEOUT | \
-                                     JOIN_EAPOL_KEY_G1_TIMEOUT | JOIN_EAPOL_KEY_FAILURE)
-
-#define DEFAULT_JOIN_ATTEMPT_TIMEOUT     (7000)   /* Overall join attempt timeout in milliseconds. */
-#define DEFAULT_EAPOL_KEY_PACKET_TIMEOUT (2500)   /* Timeout when waiting for EAPOL key packet M1 or M3 in milliseconds.*/
-                                                  /* Some APs may be slow to provide M1 and 1000 ms is not long enough for edge of cell. */
-#ifndef DEFAULT_PM2_SLEEP_RET_TIME
-#define DEFAULT_PM2_SLEEP_RET_TIME   (200)
-#endif
-
-#define PM2_SLEEP_RET_TIME_MIN       (10)     /* Minimum return-to-sleep in milliseconds */
-#define PM2_SLEEP_RET_TIME_MAX       (2000)   /* Maximum return-to-sleep in milliseconds */
-#define NULL_FRAMES_WITH_PM_SET_LIMIT (100)   /* NULL_FRAMES_WITH_PM_SET_LIMIT */
-#define RSPEC_KBPS_MASK (0x7f)
-#define RSPEC_500KBPS(rate) ( (rate) &  RSPEC_KBPS_MASK )
-#define RSPEC_TO_KBPS(rate) (RSPEC_500KBPS( (rate) ) * (unsigned int)500)
-#define UNSIGNED_CHAR_TO_CHAR(uch) ( (uch) & 0x7f )
-
-/******************************************************
-*             Local Structures
-******************************************************/
-
-#pragma pack(1)
-
-typedef struct
-{
-    uint32_t entry_count;
-    whd_mac_t macs[1];
-} mcast_list_t;
-
-typedef struct
-{
-    int32_t rssi;
-    whd_mac_t macs;
-} client_rssi_t;
-
-typedef struct
-{
-    whd_sync_scan_result_t *aps;
-    uint32_t count;
-    uint32_t offset;
-    cy_semaphore_t scan_semaphore;
-} whd_scan_userdata_t;
-
-#pragma pack()
-
-/******************************************************
-*             Static Variables
-******************************************************/
-
-/* LOOK: !!!When adding events below, please modify whd_event_to_string!!! */
-const whd_event_num_t join_events[]  =
-{
-    WLC_E_SET_SSID, WLC_E_LINK, WLC_E_AUTH, WLC_E_DEAUTH_IND, WLC_E_DISASSOC_IND, WLC_E_PSK_SUP, WLC_E_CSA_COMPLETE_IND,
-    WLC_E_NONE
-};
-static const whd_event_num_t scan_events[] = { WLC_E_ESCAN_RESULT, WLC_E_NONE };
-
-/* Values are in 100's of Kbit/sec (1 = 100Kbit/s). Arranged as:
- * [Bit index]
- *    [0] = 20Mhz only
- *       [0] = Long GI
- *       [1] = Short GI
- *    [1] = 40MHz support
- *       [0] = Long GI
- *       [1] = Short GI
- */
-static const uint16_t mcs_data_rate_lookup_table[32][2][2] =
-{
-    [0] =
-    {
-        {   65, 72},
-        {   135, 150}
-    },
-    [1] =
-    {
-        {   130, 144},
-        {   270, 300}
-    },
-    [2] =
-    {
-        {   195, 217},
-        {   405, 450}
-    },
-    [3] =
-    {
-        {   260, 289},
-        {   540, 600}
-    },
-    [4] =
-    {
-        {   390, 433},
-        {   810, 900}
-    },
-    [5] =
-    {
-        {   520, 578},
-        {   1080, 1200}
-    },
-    [6] =
-    {
-        {   585, 650},
-        {   1215, 1350}
-    },
-    [7] =
-    {
-        {   650, 722},
-        {   1350, 1500}
-    },
-    [8] =
-    {
-        {   130, 144},
-        {   270, 300}
-    },
-    [9] =
-    {
-        {   260, 289},
-        {   540, 600}
-    },
-    [10] =
-    {
-        {   390, 433},
-        {   810, 900}
-    },
-    [11] =
-    {
-        {   520, 578},
-        {   1080, 1200}
-    },
-    [12] =
-    {
-        {   780, 867},
-        {   1620, 1800}
-    },
-    [13] =
-    {
-        {   1040, 1156},
-        {   2160, 2400}
-    },
-    [14] =
-    {
-        {   1170, 1300},
-        {   2430, 2700}
-    },
-    [15] =
-    {
-        {   1300, 1444},
-        {   2700, 3000}
-    },
-    [16] =
-    {
-        {   195, 217},
-        {   405, 450}
-    },
-    [17] =
-    {
-        {   390, 433},
-        {   810, 900}
-    },
-    [18] =
-    {
-        {   585, 650},
-        {   1215, 1350}
-    },
-    [19] =
-    {
-        {   780, 867},
-        {   1620, 1800}
-    },
-    [20] =
-    {
-        {   1170, 1300},
-        {   2430, 2700}
-    },
-    [21] =
-    {
-        {   1560, 1733},
-        {   3240, 3600}
-    },
-    [22] =
-    {
-        {   1755, 1950},
-        {   3645, 4050}
-    },
-    [23] =
-    {
-        {   1950, 2167},
-        {   4050, 4500}
-    },
-    [24] =
-    {
-        {   260, 288},
-        {   540, 600}
-    },
-    [25] =
-    {
-        {   520, 576},
-        {   1080, 1200}
-    },
-    [26] =
-    {
-        {   780, 868},
-        {   1620, 1800}
-    },
-    [27] =
-    {
-        {   1040, 1156},
-        {   2160, 2400}
-    },
-    [28] =
-    {
-        {   1560, 1732},
-        {   3240, 3600}
-    },
-    [29] =
-    {
-        {   2080, 2312},
-        {   4320, 4800}
-    },
-    [30] =
-    {
-        {   2340, 2600},
-        {   4860, 5400}
-    },
-    [31] =
-    {
-        {   2600, 2888},
-        {   5400, 6000}
-    },
-};
-
-
-/******************************************************
-*             Static Function prototypes
-******************************************************/
-static void *whd_wifi_join_events_handler(whd_interface_t ifp, const whd_event_header_t *event_header,
-                                          const uint8_t *event_data, void *handler_user_data);
-static void *whd_wifi_scan_events_handler(whd_interface_t ifp, const whd_event_header_t *event_header,
-                                          const uint8_t *event_data,
-                                          void *handler_user_data);
-static uint32_t whd_wifi_prepare_join(whd_interface_t ifp,
-                                      whd_security_t security,
-                                      const uint8_t *security_key,
-                                      uint8_t key_length,
-                                      cy_semaphore_t *semaphore);
-static uint32_t whd_wifi_check_join_status(whd_interface_t ifp);
-static void     whd_wifi_active_join_deinit(whd_interface_t ifp, cy_semaphore_t *stack_semaphore,
-                                            whd_result_t result);
-static uint32_t whd_wifi_active_join_init(whd_interface_t ifp, whd_security_t auth_type,
-                                          const uint8_t *security_key, uint8_t key_length,
-                                          cy_semaphore_t *semaphore);
-
-/** Sets the current EAPOL key timeout for the given interface
- *
- * @param interface         : the interface for which we want to set the EAPOL key timeout
- *        eapol_key_timeout : EAPOL key timeout value
- *
- * @return  WHD_SUCCESS : if success
- *          Error code    : error code to indicate the type of error
- */
-static uint32_t whd_wifi_set_supplicant_key_timeout(whd_interface_t ifp, int32_t eapol_key_timeout);
-
-/******************************************************
-*             Function definitions
-******************************************************/
-inline wl_chanspec_t whd_channel_to_wl_band(whd_driver_t whd_driver, uint32_t channel)
-{
-    return ( ( (channel) <= CH_MAX_2G_CHANNEL ) ? (uint16_t)GET_C_VAR(whd_driver, CHANSPEC_BAND_2G) :
-             (uint16_t)GET_C_VAR(whd_driver, CHANSPEC_BAND_5G) );
-}
-
-uint32_t whd_wifi_set_up(whd_interface_t ifp)
-{
-    whd_mac_t mac;
-    char version[200];
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-    if (whd_driver->internal_info.whd_wlan_status.state == WLAN_UP)
-    {
-        WPRINT_WHD_INFO( ("whd_wifi_set_up: already up.\n") );
-        return WHD_SUCCESS;
-    }
-
-    /* Send UP command */
-    CHECK_RETURN(whd_wifi_set_ioctl_buffer(ifp, WLC_UP, NULL, 0) );
-
-    if (whd_wifi_get_mac_address(ifp, &mac) == WHD_SUCCESS)
-    {
-        WPRINT_MACRO( ("WLAN MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n", mac.octet[0], mac.octet[1], mac.octet[2],
-                       mac.octet[3], mac.octet[4], mac.octet[5]) );
-    }
-
-    if (whd_wifi_get_wifi_version(ifp, version, sizeof(version) ) == WHD_SUCCESS)
-    {
-        WPRINT_MACRO( ("WLAN Firmware    : %s", version) );
-    }
-
-    /* minimize bootloader usage and start time from UART output */
-    if (whd_wifi_get_clm_version(ifp, version, sizeof(version) ) == WHD_SUCCESS)
-    {
-        WPRINT_MACRO( ("WLAN CLM         : %s\n", version) );
-    }
-
-    WPRINT_MACRO( ("WHD VERSION      : " WHD_VERSION) );
-    WPRINT_MACRO( (" : " WHD_BRANCH) );
-#if defined(__ARMCC_VERSION)
-    WPRINT_MACRO( (" : ARM CLANG %u", __ARMCC_VERSION) );
-#elif defined(__ICCARM__)
-    WPRINT_MACRO( (" : IAR %u", __VER__) );
-#elif defined(__GNUC__)
-    WPRINT_MACRO( (" : GCC %u.%u", __GNUC__, __GNUC_MINOR__) );
-#else
-    WPRINT_MACRO( (" : UNKNOWN CC") );
-#endif
-    WPRINT_MACRO( (" : " WHD_DATE "\n") );
-
-    /* Update wlan status */
-    whd_driver->internal_info.whd_wlan_status.state = WLAN_UP;
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_set_down(whd_interface_t ifp)
-{
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    if (whd_driver->internal_info.whd_wlan_status.state != WLAN_UP)
-    {
-        WPRINT_WHD_INFO( ("whd_wifi_set_down: already down.\n") );
-        return WHD_INTERFACE_NOT_UP;
-    }
-
-    /* Send DOWN command */
-    CHECK_RETURN(whd_wifi_set_ioctl_buffer(ifp, WLC_DOWN, NULL, 0) );
-
-    /* Update wlan status */
-    whd_driver->internal_info.whd_wlan_status.state = WLAN_DOWN;
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_set_channel(whd_interface_t ifp, uint32_t channel)
-{
-    whd_buffer_t buffer;
-    uint32_t *data;
-    wl_chan_switch_t *chan_switch;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    /* Map P2P interface to either STA or AP interface depending if it's running as group owner or client */
-    if (ifp->role == WHD_P2P_ROLE)
-    {
-        if (whd_driver->internal_info.whd_wifi_p2p_go_is_up == WHD_TRUE)
-        {
-            ifp->role = WHD_AP_ROLE;
-        }
-        else
-        {
-            ifp->role = WHD_STA_ROLE;
-        }
-    }
-
-    switch (ifp->role)
-    {
-        case WHD_STA_ROLE:
-            data = (uint32_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, sizeof(uint32_t) );
-            CHECK_IOCTL_BUFFER(data);
-            *data = htod32(channel);
-            CHECK_RETURN(whd_cdc_send_ioctl(ifp, CDC_GET, WLC_SET_CHANNEL, buffer, NULL) );
-            break;
-
-        case WHD_AP_ROLE:
-            chan_switch = (wl_chan_switch_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, sizeof(wl_chan_switch_t),
-                                                                       IOVAR_STR_CSA);
-            CHECK_IOCTL_BUFFER(chan_switch);
-            chan_switch->chspec =
-                ( wl_chanspec_t )(GET_C_VAR(whd_driver,
-                                            CHANSPEC_BW_20) | GET_C_VAR(whd_driver, CHANSPEC_CTL_SB_NONE) | channel);
-            chan_switch->chspec |= whd_channel_to_wl_band(whd_driver, channel);
-            chan_switch->chspec = htod16(chan_switch->chspec);
-            chan_switch->count = 1;
-            chan_switch->mode = 1;
-            chan_switch->reg = 0;
-            CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0) );
-            break;
-        case WHD_P2P_ROLE:
-        case WHD_INVALID_ROLE:
-        default:
-            whd_assert("Bad interface", 0 != 0);
-            return WHD_UNKNOWN_INTERFACE;
-    }
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_get_channel(whd_interface_t ifp, uint32_t *channel)
-{
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    channel_info_t *channel_info;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    if (channel == NULL)
-        return WHD_BADARG;
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    CHECK_IOCTL_BUFFER(whd_cdc_get_ioctl_buffer(whd_driver, &buffer, sizeof(channel_info_t) ) );
-
-    CHECK_RETURN(whd_cdc_send_ioctl(ifp,  CDC_GET, WLC_GET_CHANNEL, buffer, &response) );
-
-    channel_info = (channel_info_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, response);
-    *channel = (uint32_t)channel_info->hw_channel;
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_enable_supplicant(whd_interface_t ifp, whd_security_t auth_type)
-{
-    whd_buffer_t buffer;
-    uint32_t *data;
-    uint32_t bss_index = 0;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    /* Map the interface to a BSS index */
-    bss_index = ifp->bsscfgidx;
-
-    /* Set supplicant variable - mfg app doesn't support these iovars, so don't care if return fails */
-    data = whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)8, "bsscfg:" IOVAR_STR_SUP_WPA);
-    CHECK_IOCTL_BUFFER(data);
-    data[0] = bss_index;
-    data[1] = (uint32_t)( ( ( (auth_type & WPA_SECURITY)  != 0 ) ||
-                            ( (auth_type & WPA2_SECURITY) != 0 ) ||
-                            (auth_type & WPA3_SECURITY) != 0 ) ? 1 : 0 );
-    (void)whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0);
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_set_supplicant_key_timeout(whd_interface_t ifp, int32_t eapol_key_timeout)
-{
-    whd_buffer_t buffer;
-    int32_t *data;
-    uint32_t bss_index = 0;
-    whd_driver_t whd_driver = (whd_driver_t)ifp->whd_driver;
-
-    /* Map the interface to a BSS index */
-    bss_index = ifp->bsscfgidx;
-
-    data = whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)8, "bsscfg:" IOVAR_STR_SUP_WPA_TMO);
-    CHECK_IOCTL_BUFFER(data);
-    data[0] = (int32_t)bss_index;
-    data[1] = eapol_key_timeout;
-    CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_set_passphrase(whd_interface_t ifp, const uint8_t *security_key, uint8_t key_length)
-{
-    whd_buffer_t buffer;
-    whd_driver_t whd_driver;
-    wsec_pmk_t *psk;
-
-    if (!ifp || !security_key)
-    {
-        WPRINT_WHD_ERROR( ("Invalid param in func %s at line %d \n",
-                           __func__, __LINE__) );
-        return WHD_WLAN_BADARG;
-    }
-
-    whd_driver = ifp->whd_driver;
-    CHECK_DRIVER_NULL(whd_driver);
-
-    psk = (wsec_pmk_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, sizeof(wsec_pmk_t) );
-    CHECK_IOCTL_BUFFER(psk);
-
-    memset(psk, 0, sizeof(wsec_pmk_t) );
-    memcpy(psk->key, security_key, key_length);
-    psk->key_len = htod16(key_length);
-    psk->flags = htod16( (uint16_t)WSEC_PASSPHRASE );
-
-    /* Delay required to allow radio firmware to be ready to receive PMK and avoid intermittent failure */
-    CHECK_RETURN(cy_rtos_delay_milliseconds(1) );
-
-    CHECK_RETURN(whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_WSEC_PMK, buffer, 0) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_sae_password(whd_interface_t ifp, const uint8_t *security_key, uint8_t key_length)
-{
-    whd_buffer_t buffer;
-    whd_driver_t whd_driver;
-    wsec_sae_password_t *sae_password;
-
-    if (!ifp || !security_key)
-    {
-        WPRINT_WHD_ERROR( ("Invalid param in func %s at line %d \n",
-                           __func__, __LINE__) );
-        return WHD_WLAN_BADARG;
-    }
-
-    whd_driver = ifp->whd_driver;
-    CHECK_DRIVER_NULL(whd_driver);
-
-    sae_password = (wsec_sae_password_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer,
-                                                                   sizeof(wsec_sae_password_t),
-                                                                   IOVAR_STR_SAE_PASSWORD);
-    CHECK_IOCTL_BUFFER(sae_password);
-    memset(sae_password, 0, sizeof(wsec_sae_password_t) );
-    memcpy(sae_password->password, security_key, key_length);
-    sae_password->password_len = htod16(key_length);
-    /* Delay required to allow radio firmware to be ready to receive PMK and avoid intermittent failure */
-    cy_rtos_delay_milliseconds(1);
-    CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_enable_sup_set_passphrase(whd_interface_t ifp, const uint8_t *security_key_psk, uint8_t psk_length,
-                                            whd_security_t auth_type)
-{
-    whd_buffer_t buffer;
-    uint32_t *data;
-    uint32_t bss_index = 0;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    if ( (psk_length > (uint8_t)WSEC_MAX_PSK_LEN) ||
-         (psk_length < (uint8_t)WSEC_MIN_PSK_LEN) )
-    {
-        return WHD_INVALID_KEY;
-    }
-
-    /* Map the interface to a BSS index */
-    bss_index = ifp->bsscfgidx;
-
-    /* Set supplicant variable - mfg app doesn't support these iovars, so don't care if return fails */
-    data = whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)8, "bsscfg:" IOVAR_STR_SUP_WPA);
-    CHECK_IOCTL_BUFFER(data);
-    data[0] = bss_index;
-    data[1] = (uint32_t)( ( ( (auth_type & WPA_SECURITY)  != 0 ) ||
-                            ( (auth_type & WPA2_SECURITY) != 0 ) ||
-                            (auth_type & WPA3_SECURITY) != 0 ) ? 1 : 0 );
-    (void)whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0);
-
-    CHECK_RETURN(whd_wifi_set_passphrase(ifp, security_key_psk, psk_length) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_get_rssi(whd_interface_t ifp, int32_t *rssi)
-{
-    CHECK_IFP_NULL(ifp);
-
-    if (rssi == NULL)
-        return WHD_BADARG;
-    if (ifp->role == WHD_STA_ROLE)
-    {
-        return whd_wifi_get_ioctl_buffer(ifp, WLC_GET_RSSI, (uint8_t *)rssi, sizeof(*rssi) );
-    }
-    return WHD_BADARG;
-}
-
-uint32_t whd_wifi_get_ap_client_rssi(whd_interface_t ifp, int32_t *rssi, const whd_mac_t *client_mac)
-{
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    client_rssi_t *client_rssi;
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    /* WLAN expects buffer size to be 4-byte aligned */
-    client_rssi =
-        (client_rssi_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, ROUND_UP(sizeof(client_rssi_t),
-                                                                                sizeof(uint32_t) ) );
-    CHECK_IOCTL_BUFFER(client_rssi);
-
-    memcpy(&client_rssi->macs, client_mac, sizeof(*client_mac) );
-    client_rssi->rssi = 0;
-
-    CHECK_RETURN_UNSUPPORTED_OK(whd_cdc_send_ioctl(ifp, CDC_GET, WLC_GET_RSSI, buffer, &response) );
-
-    memcpy(rssi, whd_buffer_get_current_piece_data_pointer(whd_driver, response), sizeof(int32_t) );
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-
-    return WHD_SUCCESS;
-}
-
-/** Callback for join events
- *  This is called when the WLC_E_SET_SSID event is received,
- *  indicating that the system has joined successfully.
- *  Wakes the thread which was doing the join, allowing it to resume.
- */
-static void *whd_wifi_join_events_handler(whd_interface_t ifp, const whd_event_header_t *event_header,
-                                          const uint8_t *event_data,
-                                          void *handler_user_data)
-{
-    cy_semaphore_t *semaphore = (cy_semaphore_t *)handler_user_data;
-    whd_bool_t join_attempt_complete = WHD_FALSE;
-    whd_driver_t whd_driver = ifp->whd_driver;
-    whd_result_t result;
-
-    UNUSED_PARAMETER(event_data);
-
-    if (event_header->bsscfgidx >= WHD_INTERFACE_MAX)
-    {
-        WPRINT_WHD_DEBUG( ("%s: event_header: Bad interface\n", __FUNCTION__) );
-        return NULL;
-    }
-
-    switch (event_header->event_type)
-    {
-        case WLC_E_PSK_SUP:
-            /* Ignore WLC_E_PSK_SUP event if link is not up */
-            if ( (whd_driver->internal_info.whd_join_status[event_header->bsscfgidx] & JOIN_LINK_READY) != 0 )
-            {
-                if (event_header->status == WLC_SUP_KEYED)
-                {
-                    /* Successful WPA key exchange */
-                    whd_driver->internal_info.whd_join_status[event_header->bsscfgidx] &= ~JOIN_SECURITY_FLAGS_MASK;
-                    whd_driver->internal_info.whd_join_status[event_header->bsscfgidx] |= JOIN_SECURITY_COMPLETE;
-                }
-                else
-                {
-                    /* join has completed with an error */
-                    join_attempt_complete = WHD_TRUE;
-                    if ( (event_header->status == WLC_SUP_KEYXCHANGE_WAIT_M1) &&
-                         (event_header->reason == WLC_E_SUP_WPA_PSK_TMO) )
-                    {
-                        /* A timeout waiting for M1 may occur at the edge of the cell or if the AP is particularly slow. */
-                        WPRINT_WHD_DEBUG( ("Supplicant M1 timeout event\n") );
-                        whd_driver->internal_info.whd_join_status[event_header->bsscfgidx] |= JOIN_EAPOL_KEY_M1_TIMEOUT;
-                    }
-                    else if ( (event_header->status == WLC_SUP_KEYXCHANGE_WAIT_M3) &&
-                              (event_header->reason == WLC_E_SUP_WPA_PSK_TMO) )
-                    {
-                        /* A timeout waiting for M3 is an indicator that the passphrase may be incorrect. */
-                        WPRINT_WHD_DEBUG( ("Supplicant M3 timeout event\n") );
-                        whd_driver->internal_info.whd_join_status[event_header->bsscfgidx] |= JOIN_EAPOL_KEY_M3_TIMEOUT;
-                    }
-                    else if ( (event_header->status == WLC_SUP_KEYXCHANGE_WAIT_G1) &&
-                              (event_header->reason == WLC_E_SUP_WPA_PSK_TMO) )
-                    {
-                        /* A timeout waiting for G1 (group key) may occur at the edge of the cell. */
-                        WPRINT_WHD_DEBUG( ("Supplicant G1 timeout event\n") );
-                        whd_driver->internal_info.whd_join_status[event_header->bsscfgidx] |= JOIN_EAPOL_KEY_G1_TIMEOUT;
-                    }
-                    else
-                    {
-                        WPRINT_WHD_DEBUG( ("Unsuccessful supplicant event; status=0x%" PRIu32 "\n",
-                                           event_header->status) );
-                        /* Unknown failure during EAPOL key handshake */
-                        whd_driver->internal_info.whd_join_status[event_header->bsscfgidx] |= JOIN_EAPOL_KEY_FAILURE;
-                    }
-                }
-            }
-            break;
-
-        case WLC_E_SET_SSID:
-            if (event_header->status == WLC_E_STATUS_SUCCESS)
-            {
-                /* SSID has been successfully set. */
-                whd_driver->internal_info.whd_join_status[event_header->bsscfgidx] |= JOIN_SSID_SET;
-            }
-            /* We don't bail out on this event or things like WPS won't work if the AP is rebooting after configuration */
-            else if (event_header->status == WLC_E_STATUS_NO_NETWORKS)
-            {
-                whd_driver->internal_info.whd_join_status[event_header->bsscfgidx] |= JOIN_NO_NETWORKS;
-            }
-            else
-            {
-                join_attempt_complete = WHD_TRUE;
-            }
-            break;
-
-        case WLC_E_LINK:
-            if ( (event_header->flags & WLC_EVENT_MSG_LINK) != 0 )
-            {
-                whd_driver->internal_info.whd_join_status[event_header->bsscfgidx] |= JOIN_LINK_READY;
-            }
-            else
-            {
-                whd_driver->internal_info.whd_join_status[event_header->bsscfgidx] &= ~JOIN_LINK_READY;
-            }
-            break;
-
-        case WLC_E_DEAUTH_IND:
-        case WLC_E_DISASSOC_IND:
-            whd_driver->internal_info.whd_join_status[event_header->bsscfgidx] &=
-                ~(JOIN_AUTHENTICATED | JOIN_LINK_READY);
-            break;
-
-        case WLC_E_AUTH:
-            if (event_header->status == WLC_E_STATUS_SUCCESS)
-            {
-                whd_driver->internal_info.whd_join_status[event_header->bsscfgidx] |= JOIN_AUTHENTICATED;
-            }
-            else if (event_header->status == WLC_E_STATUS_UNSOLICITED)
-            {
-                WPRINT_WHD_DEBUG( ("Ignore UNSOLICITED pkt event\n") );
-            }
-            else
-            {
-                /* We cannot authenticate. Perhaps we're blocked or at the edge of a cell. */
-                join_attempt_complete = WHD_TRUE;
-            }
-            break;
-
-        case WLC_E_CSA_COMPLETE_IND:
-            if (event_header->datalen >= sizeof(wl_chan_switch_t) )
-            {
-                wl_chan_switch_t *wl_csa = (wl_chan_switch_t *)event_data;
-                UNUSED_PARAMETER(wl_csa);
-                WPRINT_WHD_INFO( ("CSA event => chan %d\n", (dtoh16(wl_csa->chspec) & 0xff) ) );
-            }
-            break;
-
-        /* Note - These are listed to keep gcc pedantic checking happy */
-        case WLC_E_RRM:
-        case WLC_E_NONE:
-        case WLC_E_ROAM:
-        case WLC_E_JOIN:
-        case WLC_E_START:
-        case WLC_E_AUTH_IND:
-        case WLC_E_DEAUTH:
-        case WLC_E_ASSOC:
-        case WLC_E_ASSOC_IND:
-        case WLC_E_REASSOC:
-        case WLC_E_REASSOC_IND:
-        case WLC_E_DISASSOC:
-        case WLC_E_QUIET_START:
-        case WLC_E_QUIET_END:
-        case WLC_E_BEACON_RX:
-        case WLC_E_MIC_ERROR:
-        case WLC_E_NDIS_LINK:
-        case WLC_E_TXFAIL:
-        case WLC_E_PMKID_CACHE:
-        case WLC_E_RETROGRADE_TSF:
-        case WLC_E_PRUNE:
-        case WLC_E_AUTOAUTH:
-        case WLC_E_EAPOL_MSG:
-        case WLC_E_SCAN_COMPLETE:
-        case WLC_E_ADDTS_IND:
-        case WLC_E_DELTS_IND:
-        case WLC_E_BCNSENT_IND:
-        case WLC_E_BCNRX_MSG:
-        case WLC_E_BCNLOST_MSG:
-        case WLC_E_ROAM_PREP:
-        case WLC_E_PFN_NET_FOUND:
-        case WLC_E_PFN_NET_LOST:
-        case WLC_E_RESET_COMPLETE:
-        case WLC_E_JOIN_START:
-        case WLC_E_ROAM_START:
-        case WLC_E_ASSOC_START:
-        case WLC_E_IBSS_ASSOC:
-        case WLC_E_RADIO:
-        case WLC_E_PSM_WATCHDOG:
-        case WLC_E_CCX_ASSOC_START:
-        case WLC_E_CCX_ASSOC_ABORT:
-        case WLC_E_PROBREQ_MSG:
-        case WLC_E_SCAN_CONFIRM_IND:
-        case WLC_E_COUNTRY_CODE_CHANGED:
-        case WLC_E_EXCEEDED_MEDIUM_TIME:
-        case WLC_E_ICV_ERROR:
-        case WLC_E_UNICAST_DECODE_ERROR:
-        case WLC_E_MULTICAST_DECODE_ERROR:
-        case WLC_E_TRACE:
-        case WLC_E_BTA_HCI_EVENT:
-        case WLC_E_IF:
-        case WLC_E_PFN_BEST_BATCHING:
-        case WLC_E_RSSI:
-        case WLC_E_EXTLOG_MSG:
-        case WLC_E_ACTION_FRAME:
-        case WLC_E_ACTION_FRAME_COMPLETE:
-        case WLC_E_PRE_ASSOC_IND:
-        case WLC_E_PRE_REASSOC_IND:
-        case WLC_E_CHANNEL_ADOPTED:
-        case WLC_E_AP_STARTED:
-        case WLC_E_DFS_AP_STOP:
-        case WLC_E_DFS_AP_RESUME:
-        case WLC_E_WAI_STA_EVENT:
-        case WLC_E_WAI_MSG:
-        case WLC_E_ESCAN_RESULT:
-        case WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE:
-        case WLC_E_PROBRESP_MSG:
-        case WLC_E_P2P_PROBREQ_MSG:
-        case WLC_E_DCS_REQUEST:
-        case WLC_E_FIFO_CREDIT_MAP:
-        case WLC_E_ACTION_FRAME_RX:
-        case WLC_E_WAKE_EVENT:
-        case WLC_E_RM_COMPLETE:
-        case WLC_E_HTSFSYNC:
-        case WLC_E_OVERLAY_REQ:
-        case WLC_E_EXCESS_PM_WAKE_EVENT:
-        case WLC_E_PFN_SCAN_NONE:
-        case WLC_E_PFN_SCAN_ALLGONE:
-        case WLC_E_GTK_PLUMBED:
-        case WLC_E_ASSOC_IND_NDIS:
-        case WLC_E_REASSOC_IND_NDIS:
-        case WLC_E_ASSOC_REQ_IE:
-        case WLC_E_ASSOC_RESP_IE:
-        case WLC_E_ASSOC_RECREATED:
-        case WLC_E_ACTION_FRAME_RX_NDIS:
-        case WLC_E_AUTH_REQ:
-        case WLC_E_TDLS_PEER_EVENT:
-        case WLC_E_SPEEDY_RECREATE_FAIL:
-        case WLC_E_NATIVE:
-        case WLC_E_PKTDELAY_IND:
-        case WLC_E_AWDL_AW:
-        case WLC_E_AWDL_ROLE:
-        case WLC_E_AWDL_EVENT:
-        case WLC_E_NIC_AF_TXS:
-        case WLC_E_NAN:
-        case WLC_E_BEACON_FRAME_RX:
-        case WLC_E_SERVICE_FOUND:
-        case WLC_E_GAS_FRAGMENT_RX:
-        case WLC_E_GAS_COMPLETE:
-        case WLC_E_P2PO_ADD_DEVICE:
-        case WLC_E_P2PO_DEL_DEVICE:
-        case WLC_E_WNM_STA_SLEEP:
-        case WLC_E_TXFAIL_THRESH:
-        case WLC_E_PROXD:
-        case WLC_E_IBSS_COALESCE:
-        case WLC_E_AWDL_RX_PRB_RESP:
-        case WLC_E_AWDL_RX_ACT_FRAME:
-        case WLC_E_AWDL_WOWL_NULLPKT:
-        case WLC_E_AWDL_PHYCAL_STATUS:
-        case WLC_E_AWDL_OOB_AF_STATUS:
-        case WLC_E_AWDL_SCAN_STATUS:
-        case WLC_E_AWDL_AW_START:
-        case WLC_E_AWDL_AW_END:
-        case WLC_E_AWDL_AW_EXT:
-        case WLC_E_AWDL_PEER_CACHE_CONTROL:
-        case WLC_E_CSA_START_IND:
-        case WLC_E_CSA_DONE_IND:
-        case WLC_E_CSA_FAILURE_IND:
-        case WLC_E_CCA_CHAN_QUAL:
-        case WLC_E_BSSID:
-        case WLC_E_TX_STAT_ERROR:
-        case WLC_E_BCMC_CREDIT_SUPPORT:
-        case WLC_E_PSTA_PRIMARY_INTF_IND:
-        case WLC_E_P2P_DISC_LISTEN_COMPLETE:
-        case WLC_E_BT_WIFI_HANDOVER_REQ:
-        case WLC_E_SPW_TXINHIBIT:
-        case WLC_E_FBT_AUTH_REQ_IND:
-        case WLC_E_RSSI_LQM:
-        case WLC_E_PFN_GSCAN_FULL_RESULT:
-        case WLC_E_PFN_SWC:
-        case WLC_E_AUTHORIZED:
-        case WLC_E_PROBREQ_MSG_RX:
-        case WLC_E_PFN_SCAN_COMPLETE:
-        case WLC_E_RMC_EVENT:
-        case WLC_E_DPSTA_INTF_IND:
-        case WLC_E_ULP:
-        case WLC_E_LAST:
-        default:
-            whd_assert("Received event which was not registered\n", 0 != 0);
-            break;
-    }
-
-    if (whd_wifi_is_ready_to_transceive(ifp) == WHD_SUCCESS)
-    {
-        join_attempt_complete = WHD_TRUE;
-    }
-
-    if (join_attempt_complete == WHD_TRUE)
-    {
-        if (semaphore != NULL)
-        {
-            result = cy_rtos_get_semaphore(&whd_driver->internal_info.active_join_mutex, CY_RTOS_NEVER_TIMEOUT,
-                                           WHD_FALSE);
-            if (result != WHD_SUCCESS)
-            {
-                WPRINT_WHD_ERROR( ("Get semaphore failed in %s at %d \n", __func__, __LINE__) );
-            }
-            if (whd_driver->internal_info.active_join_semaphore != NULL)
-            {
-                whd_assert("Unexpected semaphore\n", whd_driver->internal_info.active_join_semaphore == semaphore);
-                result = cy_rtos_set_semaphore(whd_driver->internal_info.active_join_semaphore, WHD_FALSE);
-                if (result != WHD_SUCCESS)
-                {
-                    WPRINT_WHD_ERROR( ("Set semaphore failed in %s at %d \n", __func__, __LINE__) );
-                }
-            }
-            result = cy_rtos_set_semaphore(&whd_driver->internal_info.active_join_mutex, WHD_FALSE);
-            if (result != WHD_SUCCESS)
-            {
-                WPRINT_WHD_ERROR( ("Set semaphore failed in %s at %d \n", __func__, __LINE__) );
-            }
-        }
-        return NULL;
-    }
-    else
-    {
-        return handler_user_data;
-    }
-}
-
-/* Do any needed preparation prior to launching a join */
-static uint32_t whd_wifi_active_join_init(whd_interface_t ifp, whd_security_t auth_type, const uint8_t *security_key,
-                                          uint8_t key_length, cy_semaphore_t *semaphore)
-{
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    if (whd_driver->internal_info.active_join_mutex_initted == WHD_FALSE)
-    {
-        CHECK_RETURN(cy_rtos_init_semaphore(&whd_driver->internal_info.active_join_mutex, 1, 0) );
-        whd_driver->internal_info.active_join_mutex_initted = WHD_TRUE;
-        CHECK_RETURN(cy_rtos_set_semaphore(&whd_driver->internal_info.active_join_mutex, WHD_FALSE) );
-    }
-
-    CHECK_RETURN(cy_rtos_get_semaphore(&whd_driver->internal_info.active_join_mutex, CY_RTOS_NEVER_TIMEOUT,
-                                       WHD_FALSE) );
-    whd_driver->internal_info.active_join_semaphore = semaphore;
-    CHECK_RETURN(cy_rtos_set_semaphore(&whd_driver->internal_info.active_join_mutex, WHD_FALSE) );
-
-    CHECK_RETURN(whd_wifi_prepare_join(ifp, auth_type, security_key, key_length, semaphore) );
-    return WHD_SUCCESS;
-}
-
-static uint32_t whd_wifi_prepare_join(whd_interface_t ifp, whd_security_t auth_type,
-                                      const uint8_t *security_key, uint8_t key_length,
-                                      cy_semaphore_t *semaphore)
-{
-    whd_buffer_t buffer;
-    uint32_t auth_mfp = WL_MFP_NONE;
-    whd_result_t retval = WHD_SUCCESS;
-    whd_result_t check_result = WHD_SUCCESS;
-    uint16_t a;
-    uint32_t *data;
-    uint32_t *wpa_auth;
-    uint32_t bss_index = 0;
-    uint32_t auth;
-    whd_driver_t whd_driver = ifp->whd_driver;
-    uint16_t event_entry = 0xFF;
-
-    (void)bss_index;
-    if ( (auth_type == WHD_SECURITY_WPA2_FBT_ENT) || (auth_type == WHD_SECURITY_IBSS_OPEN) ||
-         (auth_type == WHD_SECURITY_WPA2_FBT_PSK) )
-    {
-        return WHD_UNKNOWN_SECURITY_TYPE;
-    }
-    if ( ( ( (key_length > (uint8_t)WSEC_MAX_PSK_LEN) || (key_length < (uint8_t)WSEC_MIN_PSK_LEN) ) &&
-           ( (auth_type == WHD_SECURITY_WPA_TKIP_PSK) || (auth_type == WHD_SECURITY_WPA_AES_PSK) ||
-             (auth_type == WHD_SECURITY_WPA2_AES_PSK) || (auth_type == WHD_SECURITY_WPA2_TKIP_PSK) ||
-             (auth_type == WHD_SECURITY_WPA2_MIXED_PSK) ) ) ||
-         ( (key_length > (uint8_t)WSEC_MAX_SAE_PASSWORD_LEN) &&
-           ( (auth_type == WHD_SECURITY_WPA3_SAE) || (auth_type == WHD_SECURITY_WPA3_WPA2_PSK) ) ) )
-    {
-        return WHD_INVALID_KEY;
-    }
-
-    (void)auth_type, (void)security_key, (void)key_length, (void)semaphore;
-
-    /* Clear the current join status */
-    whd_driver->internal_info.whd_join_status[ifp->bsscfgidx] = 0;
-
-    /* Setting wsec will overwrite mfp setting in older branches, store value before setting wsec */
-    CHECK_RETURN(whd_wifi_get_iovar_value(ifp, IOVAR_STR_MFP, &auth_mfp) );
-
-    /* Set Wireless Security Type */
-    CHECK_RETURN(whd_wifi_set_ioctl_value(ifp, WLC_SET_WSEC, (uint32_t)(auth_type & 0xFF) ) );
-
-    /* Map the interface to a BSS index */
-    bss_index = ifp->bsscfgidx;
-
-    /* Set supplicant variable - mfg app doesn't support these iovars, so don't care if return fails */
-    data = whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)8, "bsscfg:" IOVAR_STR_SUP_WPA);
-    CHECK_IOCTL_BUFFER(data);
-    data[0] = htod32(bss_index);
-    data[1] =
-        htod32( ( uint32_t )( ( ( (auth_type & WPA_SECURITY) != 0 ) || ( (auth_type & WPA2_SECURITY) != 0 ) ||
-                                (auth_type & WPA3_SECURITY) != 0 ) ? 1 : 0 ) );
-    (void)whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0);
-
-    /* Set the EAPOL version to whatever the AP is using (-1) */
-    data = whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)8, "bsscfg:" IOVAR_STR_SUP_WPA2_EAPVER);
-    CHECK_IOCTL_BUFFER(data);
-    data[0] = htod32(bss_index);
-    data[1] = htod32( ( uint32_t )-1 );
-    (void)whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0);
-
-    /* Send WPA Key */
-    switch (auth_type)
-    {
-        case WHD_SECURITY_OPEN:
-        case WHD_SECURITY_WPS_SECURE:
-            break;
-
-        case WHD_SECURITY_WPA_TKIP_PSK:
-        case WHD_SECURITY_WPA_AES_PSK:
-        case WHD_SECURITY_WPA_MIXED_PSK:
-        case WHD_SECURITY_WPA2_AES_PSK:
-        case WHD_SECURITY_WPA2_TKIP_PSK:
-        case WHD_SECURITY_WPA2_MIXED_PSK:
-        case WHD_SECURITY_WPA2_WPA_AES_PSK:
-        case WHD_SECURITY_WPA2_WPA_MIXED_PSK:
-            /* Set the EAPOL key packet timeout value, otherwise unsuccessful supplicant events aren't reported. If the IOVAR is unsupported then continue. */
-            CHECK_RETURN_UNSUPPORTED_CONTINUE(whd_wifi_set_supplicant_key_timeout(ifp,
-                                                                                  DEFAULT_EAPOL_KEY_PACKET_TIMEOUT) );
-            CHECK_RETURN(whd_wifi_set_passphrase(ifp, security_key, key_length) );
-            break;
-
-        case WHD_SECURITY_WPA3_SAE:
-        case WHD_SECURITY_WPA3_WPA2_PSK:
-            /* Set the EAPOL key packet timeout value, otherwise unsuccessful supplicant events aren't reported. If the IOVAR is unsupported then continue. */
-            CHECK_RETURN_UNSUPPORTED_CONTINUE(whd_wifi_set_supplicant_key_timeout(ifp,
-                                                                                  DEFAULT_EAPOL_KEY_PACKET_TIMEOUT) );
-            CHECK_RETURN(whd_wifi_sae_password(ifp, security_key, key_length) );
-            break;
-
-        case WHD_SECURITY_WPA_TKIP_ENT:
-        case WHD_SECURITY_WPA_AES_ENT:
-        case WHD_SECURITY_WPA_MIXED_ENT:
-        case WHD_SECURITY_WPA2_TKIP_ENT:
-        case WHD_SECURITY_WPA2_AES_ENT:
-        case WHD_SECURITY_WPA2_MIXED_ENT:
-#if 0
-        case WHD_SECURITY_WPA2_FBT_ENT:
-            /* Disable eapol timer by setting to value 0 */
-            CHECK_RETURN_UNSUPPORTED_CONTINUE(whd_wifi_set_supplicant_key_timeout(ifp, 0) );
-            break;
-#endif
-        case WHD_SECURITY_WEP_PSK:
-        case WHD_SECURITY_WEP_SHARED:
-            for (a = 0; a < key_length; a = ( uint16_t )(a + 2 + security_key[1]) )
-            {
-                const whd_wep_key_t *in_key = (const whd_wep_key_t *)&security_key[a];
-                wl_wsec_key_t *out_key =
-                    (wl_wsec_key_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, sizeof(wl_wsec_key_t) );
-                CHECK_IOCTL_BUFFER(out_key);
-                memset(out_key, 0, sizeof(wl_wsec_key_t) );
-                out_key->index = in_key->index;
-                out_key->len = in_key->length;
-                memcpy(out_key->data, in_key->data, in_key->length);
-                switch (in_key->length)
-                {
-                    case 5:
-                        out_key->algo = (uint32_t)CRYPTO_ALGO_WEP1;
-                        break;
-
-                    case 13:
-                        out_key->algo = (uint32_t)CRYPTO_ALGO_WEP128;
-                        break;
-
-                    case 16:
-                        /* default to AES-CCM */
-                        out_key->algo = (uint32_t)CRYPTO_ALGO_AES_CCM;
-                        break;
-
-                    case 32:
-                        out_key->algo = (uint32_t)CRYPTO_ALGO_TKIP;
-                        break;
-
-                    default:
-                        CHECK_RETURN(whd_buffer_release(whd_driver, buffer, WHD_NETWORK_TX) );
-                        return WHD_INVALID_KEY;
-                }
-                /* Set the first entry as primary key by default */
-                if (a == 0)
-                {
-                    out_key->flags |= WL_PRIMARY_KEY;
-                }
-                out_key->index = htod32(out_key->index);
-                out_key->len = htod32(out_key->len);
-                out_key->algo = htod32(out_key->algo);
-                out_key->flags = htod32(out_key->flags);
-                CHECK_RETURN(whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_KEY, buffer, NULL) );
-            }
-            break;
-
-        case WHD_SECURITY_FORCE_32_BIT:
-        case WHD_SECURITY_UNKNOWN:
-        default:
-            whd_assert("whd_wifi_prepare_join: Unsupported security type\n", 0 != 0);
-            break;
-    }
-    /* Set infrastructure mode */
-    CHECK_RETURN(whd_wifi_set_ioctl_value(ifp, WLC_SET_INFRA, ( (auth_type & IBSS_ENABLED) == 0 ) ? 1 : 0) );
-
-    /* Set authentication type */
-    if (auth_type == WHD_SECURITY_WEP_SHARED)
-    {
-        auth = WL_AUTH_SHARED_KEY;
-    }
-    else if ( (auth_type == WHD_SECURITY_WPA3_SAE) || (auth_type == WHD_SECURITY_WPA3_WPA2_PSK) )
-    {
-        auth = WL_AUTH_SAE;
-    }
-    else
-    {
-        auth = WL_AUTH_OPEN_SYSTEM;
-    }
-    CHECK_RETURN(whd_wifi_set_ioctl_value(ifp, WLC_SET_AUTH, auth) );
-
-    /* From PMF cert test plan,
-     * 2.2 Out of Box Requirements
-     * When WPA2 security is enabled on the DUT, then by defaults the DUT shall:
-     * Enable Robust Management Frame Protection Capable (MFPC) functionality
-     */
-    if ( (auth_type == WHD_SECURITY_WPA3_SAE) || (auth_type == WHD_SECURITY_WPA3_WPA2_PSK) ||
-         auth_type & WPA2_SECURITY )
-    {
-        auth_mfp = WL_MFP_CAPABLE;
-    }
-
-    check_result = whd_wifi_set_iovar_value(ifp, IOVAR_STR_MFP, auth_mfp);
-    if (check_result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_DEBUG( ("Older chipsets might not support MFP..Ignore result\n") );
-    }
-
-    /* Set WPA authentication mode */
-    wpa_auth = (uint32_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, (uint16_t)4);
-    CHECK_IOCTL_BUFFER(wpa_auth);
-
-    switch (auth_type)
-    {
-#if 0
-        case WHD_SECURITY_IBSS_OPEN:
-            /* IBSS does not get authenticated onto an AP */
-            whd_driver->internal_info.whd_join_status[ifp->bsscfgidx] |= JOIN_AUTHENTICATED;
-#endif
-        /* intentional fall-thru */
-        /* Disables Eclipse static analysis warning */
-        /* no break */
-        /* Fall-Through */
-        case WHD_SECURITY_OPEN:
-        case WHD_SECURITY_WPS_SECURE:
-            *wpa_auth = WPA_AUTH_DISABLED;
-            /* Open Networks do not have to complete security */
-            whd_driver->internal_info.whd_join_status[ifp->bsscfgidx] |= JOIN_SECURITY_COMPLETE;
-            break;
-
-        case WHD_SECURITY_WPA_TKIP_PSK:
-        case WHD_SECURITY_WPA_AES_PSK:
-        case WHD_SECURITY_WPA_MIXED_PSK:
-            *wpa_auth = (uint32_t)WPA_AUTH_PSK;
-            break;
-
-        case WHD_SECURITY_WPA2_AES_PSK:
-        case WHD_SECURITY_WPA2_TKIP_PSK:
-        case WHD_SECURITY_WPA2_MIXED_PSK:
-        case WHD_SECURITY_WPA2_WPA_AES_PSK:
-        case WHD_SECURITY_WPA2_WPA_MIXED_PSK:
-            *wpa_auth = (uint32_t)WPA2_AUTH_PSK;
-            break;
-
-        case WHD_SECURITY_WPA3_SAE:
-        case WHD_SECURITY_WPA3_WPA2_PSK:
-            *wpa_auth = (uint32_t)WPA3_AUTH_SAE_PSK;
-            break;
-
-        case WHD_SECURITY_WPA_TKIP_ENT:
-        case WHD_SECURITY_WPA_AES_ENT:
-        case WHD_SECURITY_WPA_MIXED_ENT:
-            *wpa_auth = (uint32_t)WPA_AUTH_UNSPECIFIED;
-            break;
-
-        case WHD_SECURITY_WPA2_TKIP_ENT:
-        case WHD_SECURITY_WPA2_AES_ENT:
-        case WHD_SECURITY_WPA2_MIXED_ENT:
-            *wpa_auth = (uint32_t)WPA2_AUTH_UNSPECIFIED;
-            break;
-#if 0
-        case WHD_SECURITY_WPA2_FBT_ENT:
-            *wpa_auth = ( uint32_t )(WPA2_AUTH_UNSPECIFIED | WPA2_AUTH_FT);
-            break;
-#endif
-        case WHD_SECURITY_WEP_PSK:
-        case WHD_SECURITY_WEP_SHARED:
-            *wpa_auth = WPA_AUTH_DISABLED;
-            whd_driver->internal_info.whd_join_status[ifp->bsscfgidx] |= JOIN_SECURITY_COMPLETE;
-            break;
-
-        case WHD_SECURITY_UNKNOWN:
-        case WHD_SECURITY_FORCE_32_BIT:
-        default:
-            WPRINT_WHD_DEBUG( ("Unsupported Security type\n") );
-            *wpa_auth = WPA_AUTH_DISABLED;
-            break;
-    }
-    *wpa_auth = htod32(*wpa_auth);
-    CHECK_RETURN(whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_WPA_AUTH, buffer, 0) );
-
-    if (ifp->event_reg_list[WHD_JOIN_EVENT_ENTRY] != WHD_EVENT_NOT_REGISTERED)
-    {
-        whd_wifi_deregister_event_handler(ifp, ifp->event_reg_list[WHD_JOIN_EVENT_ENTRY]);
-        ifp->event_reg_list[WHD_JOIN_EVENT_ENTRY] = WHD_EVENT_NOT_REGISTERED;
-    }
-
-    CHECK_RETURN(whd_management_set_event_handler(ifp, join_events, whd_wifi_join_events_handler, (void *)semaphore,
-                                                  &event_entry) );
-    if (event_entry >= WHD_EVENT_ENTRY_MAX)
-    {
-        WPRINT_WHD_ERROR( ("Join events registration failed in function %s and line %d", __func__, __LINE__) );
-        return WHD_UNFINISHED;
-    }
-    ifp->event_reg_list[WHD_JOIN_EVENT_ENTRY] = event_entry;
-    whd_assert("Set join Event handler failed\n", retval == WHD_SUCCESS);
-
-    return WHD_SUCCESS;
-}
-
-/* do any needed tear down after join
- * @param stack_semaphore - semaphore used to control execution if client_semaphore is NULL
- * @param client_semaphore - semaphore used to control execution if client passes this in
- */
-static void whd_wifi_active_join_deinit(whd_interface_t ifp, cy_semaphore_t *stack_semaphore, whd_result_t result)
-{
-    whd_driver_t whd_driver = ifp->whd_driver;
-    whd_result_t val;
-    /* deinit join specific variables, with protection from mutex */
-
-    val = cy_rtos_get_semaphore(&whd_driver->internal_info.active_join_mutex, CY_RTOS_NEVER_TIMEOUT, WHD_FALSE);
-    if (val != WHD_SUCCESS)
-        WPRINT_WHD_ERROR( ("Get semaphore failed in %s at %d \n", __func__, __LINE__) );
-
-    whd_driver->internal_info.active_join_semaphore = NULL;
-
-    cy_rtos_deinit_semaphore(stack_semaphore);
-
-    if (WHD_SUCCESS != result)
-    {
-        WPRINT_WHD_INFO( ("Failed join (err %" PRIu32 ")\n", result) );
-        ifp->role = WHD_INVALID_ROLE;
-    }
-
-    val = cy_rtos_set_semaphore(&whd_driver->internal_info.active_join_mutex, WHD_FALSE);
-    if (val != WHD_SUCCESS)
-        WPRINT_WHD_ERROR( ("Get semaphore failed in %s at %d \n", __func__, __LINE__) );
-
-    /* we forced the chip to be up during join, now let it sleep */
-    WHD_WLAN_LET_SLEEP(whd_driver);
-}
-
-static uint32_t whd_wifi_join_wait_for_complete(whd_interface_t ifp, cy_semaphore_t *semaphore)
-{
-    whd_result_t result;
-    uint32_t start_time;
-    uint32_t current_time;
-    whd_bool_t done = WHD_FALSE;
-
-    cy_rtos_get_time(&start_time);
-
-    while (!done)
-    {
-        result = cy_rtos_get_semaphore(semaphore, DEFAULT_JOIN_ATTEMPT_TIMEOUT / 10, WHD_FALSE);
-        whd_assert("Get semaphore failed", (result == CY_RSLT_SUCCESS) || (result == CY_RTOS_TIMEOUT) );
-        REFERENCE_DEBUG_ONLY_VARIABLE(result);
-
-        result = whd_wifi_is_ready_to_transceive(ifp);
-        if (result == WHD_SUCCESS)
-        {
-            break;
-        }
-
-        cy_rtos_get_time(&current_time);
-        done = (whd_bool_t)( (current_time - start_time) >= DEFAULT_JOIN_ATTEMPT_TIMEOUT );
-    }
-
-    if (result != WHD_SUCCESS)
-    {
-        CHECK_RETURN(whd_wifi_leave(ifp) );
-        WPRINT_WHD_INFO( ("%s: not ready to transceive (err %" PRIu32 "); left network\n", __func__, result) );
-    }
-
-    return result;
-}
-
-static uint32_t whd_wifi_check_join_status(whd_interface_t ifp)
-{
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    if ( (uint32_t)ifp->bsscfgidx >= WHD_INTERFACE_MAX )
-    {
-        WPRINT_WHD_ERROR( ("%s: Bad interface %d\n", __FUNCTION__, ifp->bsscfgidx) );
-        return WHD_INVALID_JOIN_STATUS;
-    }
-    switch (whd_driver->internal_info.whd_join_status[ifp->bsscfgidx])
-    {
-        case JOIN_NO_NETWORKS:
-            return WHD_NETWORK_NOT_FOUND;
-
-        case JOIN_AUTHENTICATED | JOIN_LINK_READY | JOIN_EAPOL_KEY_M1_TIMEOUT:
-            return WHD_EAPOL_KEY_PACKET_M1_TIMEOUT;
-
-        case JOIN_AUTHENTICATED | JOIN_LINK_READY | JOIN_EAPOL_KEY_M3_TIMEOUT:
-        case JOIN_AUTHENTICATED | JOIN_LINK_READY | JOIN_SSID_SET | JOIN_EAPOL_KEY_M3_TIMEOUT:
-            return WHD_EAPOL_KEY_PACKET_M3_TIMEOUT;
-
-        case JOIN_AUTHENTICATED | JOIN_LINK_READY | JOIN_EAPOL_KEY_G1_TIMEOUT:
-        case JOIN_AUTHENTICATED | JOIN_LINK_READY | JOIN_SSID_SET | JOIN_EAPOL_KEY_G1_TIMEOUT:
-            return WHD_EAPOL_KEY_PACKET_G1_TIMEOUT;
-
-        case JOIN_AUTHENTICATED | JOIN_LINK_READY | JOIN_EAPOL_KEY_FAILURE:
-        case JOIN_AUTHENTICATED | JOIN_LINK_READY | JOIN_SSID_SET | JOIN_EAPOL_KEY_FAILURE:
-            return WHD_EAPOL_KEY_FAILURE;
-
-        case JOIN_AUTHENTICATED | JOIN_LINK_READY | JOIN_SSID_SET | JOIN_SECURITY_COMPLETE:
-            return WHD_SUCCESS;
-
-        case 0:
-        case JOIN_SECURITY_COMPLETE: /* For open/WEP */
-            return WHD_NOT_AUTHENTICATED;
-
-        case JOIN_AUTHENTICATED | JOIN_LINK_READY | JOIN_SECURITY_COMPLETE:
-            return WHD_JOIN_IN_PROGRESS;
-
-        case JOIN_AUTHENTICATED | JOIN_LINK_READY:
-        case JOIN_AUTHENTICATED | JOIN_LINK_READY | JOIN_SSID_SET:
-            return WHD_NOT_KEYED;
-
-        default:
-            return WHD_INVALID_JOIN_STATUS;
-    }
-}
-
-uint32_t whd_wifi_join_specific(whd_interface_t ifp, const whd_scan_result_t *ap, const uint8_t *security_key,
-                                uint8_t key_length)
-{
-    whd_buffer_t buffer;
-    cy_semaphore_t join_semaphore;
-    whd_result_t result;
-    wl_extjoin_params_t *ext_join_params;
-    wl_join_params_t *join_params;
-    whd_security_t security = ap->security;
-    uint16_t wl_band_for_channel = 0;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    /* Keep WLAN awake while joining */
-    WHD_WLAN_KEEP_AWAKE(whd_driver);
-    ifp->role = WHD_STA_ROLE;
-
-    if (ap->bss_type == WHD_BSS_TYPE_MESH)
-    {
-        return WHD_UNSUPPORTED;
-    }
-
-    if (ap->bss_type == WHD_BSS_TYPE_ADHOC)
-    {
-        security |= IBSS_ENABLED;
-    }
-
-    if (NULL_MAC(ap->BSSID.octet) )
-    {
-        WPRINT_WHD_ERROR( ("NULL address is not allowed/valid\n") );
-        return WHD_BADARG;
-    }
-
-    if (BROADCAST_ID(ap->BSSID.octet) )
-    {
-        WPRINT_WHD_ERROR( ("Broadcast address is not allowed/valid in join with specific BSSID of AP\n") );
-        return WHD_BADARG;
-    }
-
-    if ( (ap->SSID.length == 0) || (ap->SSID.length > (size_t)SSID_NAME_SIZE) )
-    {
-        WPRINT_WHD_ERROR( ("%s: failure: SSID length error\n", __func__) );
-        return WHD_WLAN_BADSSIDLEN;
-    }
-
-    CHECK_RETURN(cy_rtos_init_semaphore(&join_semaphore, 1, 0) );
-    result = whd_wifi_active_join_init(ifp, security, security_key, key_length, &join_semaphore);
-
-    if (result == WHD_SUCCESS)
-    {
-        /* Check if soft AP is running, if so, move its current channel to the the destination AP */
-        if ( (ifp->role == WHD_AP_ROLE) && (whd_wifi_is_ready_to_transceive(ifp) == WHD_SUCCESS) )
-        {
-            uint32_t current_softap_channel = 0;
-            CHECK_RETURN(whd_wifi_get_channel(ifp, &current_softap_channel) );
-            if (current_softap_channel != ap->channel)
-            {
-                CHECK_RETURN(whd_wifi_set_channel(ifp, ap->channel) );
-                WPRINT_WHD_DEBUG( ("WARN: moving soft-AP channel from %" PRIu32 " to %d due to STA join\n",
-                                   current_softap_channel, ap->channel) );
-                cy_rtos_delay_milliseconds(100);
-            }
-        }
-
-        else
-        {
-            if (ap->bss_type == WHD_BSS_TYPE_ADHOC)
-            {
-                CHECK_RETURN(whd_wifi_set_channel(ifp, ap->channel) );
-            }
-        }
-
-        /* Join network */
-        ext_join_params =
-            (wl_extjoin_params_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, sizeof(wl_extjoin_params_t), "join");
-        CHECK_IOCTL_BUFFER(ext_join_params);
-        memset(ext_join_params, 0, sizeof(wl_extjoin_params_t) );
-
-        ext_join_params->ssid.SSID_len = ap->SSID.length;
-        DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-        memcpy(ext_join_params->ssid.SSID, ap->SSID.value, ext_join_params->ssid.SSID_len);
-        ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-        memcpy(&ext_join_params->assoc_params.bssid, &ap->BSSID, sizeof(whd_mac_t) );
-        ext_join_params->scan_params.scan_type = 0;
-        ext_join_params->scan_params.active_time = -1;
-        ext_join_params->scan_params.home_time = -1;
-        ext_join_params->scan_params.nprobes = -1;
-        ext_join_params->scan_params.passive_time = -1;
-        ext_join_params->assoc_params.bssid_cnt = 0;
-        if (ap->channel)
-        {
-            ext_join_params->assoc_params.chanspec_num = (uint32_t)1;
-            ext_join_params->assoc_params.chanspec_list[0] =
-                (wl_chanspec_t)htod16( (ap->channel |
-                                        GET_C_VAR(whd_driver, CHANSPEC_BW_20) | GET_C_VAR(whd_driver,
-                                                                                          CHANSPEC_CTL_SB_NONE) ) );
-
-            /* set band properly */
-            wl_band_for_channel = whd_channel_to_wl_band(whd_driver, ap->channel);
-
-            ext_join_params->assoc_params.chanspec_list[0] |= wl_band_for_channel;
-        }
-        result = whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0);
-
-        WPRINT_WHD_INFO( ("%s: set_ssid result (err %" PRIu32 "); left network\n", __func__, result) );
-
-        /* Some firmware, e.g. for 4390, does not support the join IOVAR, so use the older IOCTL call instead */
-        if (result == WHD_WLAN_UNSUPPORTED)
-        {
-            join_params =
-                (wl_join_params_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, sizeof(wl_join_params_t) );
-            CHECK_IOCTL_BUFFER(join_params);
-            memset(join_params, 0, sizeof(wl_join_params_t) );
-            DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-            memcpy(&join_params->ssid, &ext_join_params->ssid, sizeof(wlc_ssid_t) );
-            ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-            memcpy(&join_params->params.bssid, &ap->BSSID, sizeof(whd_mac_t) );
-            join_params->params.bssid_cnt = 0;
-            if (ap->channel)
-            {
-                join_params->params.chanspec_num = (uint32_t)1;
-                join_params->params.chanspec_list[0] =
-                    (wl_chanspec_t)htod16( (ap->channel |
-                                            GET_C_VAR(whd_driver,
-                                                      CHANSPEC_BW_20) | GET_C_VAR(whd_driver, CHANSPEC_CTL_SB_NONE) ) );
-
-                /* set band properly */
-                join_params->params.chanspec_list[0] |= wl_band_for_channel;
-            }
-            result = whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_SSID, buffer, 0);
-        }
-
-        if (result == WHD_SUCCESS)
-        {
-
-            uint16_t chip_id = whd_chip_get_chip_id(whd_driver);
-
-            result = whd_wifi_join_wait_for_complete(ifp, &join_semaphore);
-
-            if (chip_id == 43455)
-            {
-                /* For 11 AC MAX throughput set the frame burst and MPDU per AMPDU */
-                CHECK_RETURN(whd_wifi_set_iovar_value(ifp, IOVAR_STR_MPDU_PER_AMPDU, 64) );
-            }
-
-        }
-        else
-        {
-            WPRINT_WHD_INFO( ("%s:3 not ready to transceive (err %" PRIu32 "); left network\n", __func__, result) );
-        }
-    }
-    else
-    {
-        WPRINT_WHD_INFO( ("%s: active join init failed: (%" PRIu32 ")\n", __FUNCTION__, result) );
-    }
-    /* clean up from the join attempt */
-    whd_wifi_active_join_deinit(ifp, &join_semaphore, result);
-
-    CHECK_RETURN(result);
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_join(whd_interface_t ifp, const whd_ssid_t *ssid, whd_security_t auth_type,
-                       const uint8_t *security_key, uint8_t key_length)
-{
-    cy_semaphore_t join_sema;
-    whd_result_t result;
-    whd_buffer_t buffer;
-    wlc_ssid_t *ssid_params;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    if (ssid == NULL)
-    {
-        WPRINT_WHD_ERROR( ("%s: failure: ssid is null\n", __func__) );
-        return WHD_BADARG;
-    }
-
-    if ( (ssid->length == 0) || (ssid->length > (size_t)SSID_NAME_SIZE) )
-    {
-        WPRINT_WHD_ERROR( ("%s: failure: SSID length error\n", __func__) );
-        return WHD_WLAN_BADSSIDLEN;
-    }
-
-    /* Keep WLAN awake while joining */
-    WHD_WLAN_KEEP_AWAKE(whd_driver);
-    ifp->role = WHD_STA_ROLE;
-
-    CHECK_RETURN(cy_rtos_init_semaphore(&join_sema, 1, 0) );
-    result = whd_wifi_active_join_init(ifp, auth_type, security_key, key_length, &join_sema);
-
-    if (result == WHD_SUCCESS)
-    {
-        /* Join network */
-        ssid_params = (struct wlc_ssid *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, sizeof(wlc_ssid_t) );
-        CHECK_IOCTL_BUFFER(ssid_params);
-        memset(ssid_params, 0, sizeof(wlc_ssid_t) );
-        ssid_params->SSID_len = htod32(ssid->length);
-        memcpy(ssid_params->SSID, ssid->value, ssid_params->SSID_len);
-        result = whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_SSID, buffer, 0);
-
-        if (result == WHD_SUCCESS)
-        {
-            result = whd_wifi_join_wait_for_complete(ifp, &join_sema);
-        }
-    }
-
-    /* clean up from the join attempt */
-    whd_wifi_active_join_deinit(ifp, &join_sema, result);
-
-    return result;
-}
-
-uint32_t whd_wifi_leave(whd_interface_t ifp)
-{
-    whd_result_t result = WHD_SUCCESS;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    /* If interface is greater than max return error */
-    if (ifp->bsscfgidx >= WHD_INTERFACE_MAX)
-    {
-        WPRINT_WHD_ERROR( ("%s: Bad interface 2\n", __FUNCTION__) );
-        return WHD_BADARG;
-    }
-    if (ifp->event_reg_list[WHD_JOIN_EVENT_ENTRY] != WHD_EVENT_NOT_REGISTERED)
-    {
-        CHECK_RETURN(whd_wifi_deregister_event_handler(ifp, ifp->event_reg_list[WHD_JOIN_EVENT_ENTRY]) );
-        ifp->event_reg_list[WHD_JOIN_EVENT_ENTRY] = WHD_EVENT_NOT_REGISTERED;
-    }
-
-    /* Disassociate from AP */
-    result = whd_wifi_set_ioctl_buffer(ifp, WLC_DISASSOC, NULL, 0);
-
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_DEBUG( ("whd_sdpcm_send_ioctl(WLC_DISASSOC) failed:%" PRIu32 "\r\n", result) );
-    }
-
-    whd_driver->internal_info.whd_join_status[ifp->bsscfgidx] = 0;
-    ifp->role = WHD_INVALID_ROLE;
-    return WHD_SUCCESS;
-}
-
-/** Handles scan result events
- *
- *  This function receives scan record events, and parses them into a better format, then passes the results
- *  to the user application.
- *
- * @param event_header     : The event details
- * @param event_data       : The data for the event which contains the scan result structure
- * @param handler_user_data: data which will be passed to user application
- *
- * @returns : handler_user_data parameter
- *
- */
-static void *whd_wifi_scan_events_handler(whd_interface_t ifp, const whd_event_header_t *event_header,
-                                          const uint8_t *event_data,
-                                          void *handler_user_data)
-{
-    whd_scan_result_t *record;
-    wl_escan_result_t *eresult;
-    wl_bss_info_t *bss_info;
-    uint16_t chanspec;
-    uint32_t version;
-    whd_tlv8_header_t *cp;
-    uint32_t len;
-    uint16_t ie_offset;
-    uint32_t bss_info_length;
-    country_info_ie_fixed_portion_t *country_info_ie;
-    rsn_ie_fixed_portion_t *rsnie;
-    wpa_ie_fixed_portion_t *wpaie = NULL;
-    uint8_t rate_num;
-    ht_capabilities_ie_t *ht_capabilities_ie = NULL;
-    uint32_t count_tmp = 0;
-    uint16_t temp16;
-    uint16_t bss_count;
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    if (whd_driver->internal_info.scan_result_callback == NULL)
-    {
-        return handler_user_data;
-    }
-
-    if (event_header->status == WLC_E_STATUS_SUCCESS)
-    {
-        whd_driver->internal_info.scan_result_callback(NULL, handler_user_data, WHD_SCAN_COMPLETED_SUCCESSFULLY);
-        whd_driver->internal_info.scan_result_callback = NULL;
-        whd_wifi_deregister_event_handler(ifp, ifp->event_reg_list[WHD_SCAN_EVENT_ENTRY]);
-        ifp->event_reg_list[WHD_SCAN_EVENT_ENTRY] = WHD_EVENT_NOT_REGISTERED;
-        return handler_user_data;
-    }
-    if ( (event_header->status == WLC_E_STATUS_NEWSCAN) || (event_header->status == WLC_E_STATUS_NEWASSOC) ||
-         (event_header->status == WLC_E_STATUS_ABORT) )
-    {
-        whd_driver->internal_info.scan_result_callback(NULL, handler_user_data, WHD_SCAN_ABORTED);
-        whd_driver->internal_info.scan_result_callback = NULL;
-        whd_wifi_deregister_event_handler(ifp, ifp->event_reg_list[WHD_SCAN_EVENT_ENTRY]);
-        ifp->event_reg_list[WHD_SCAN_EVENT_ENTRY] = WHD_EVENT_NOT_REGISTERED;
-        return handler_user_data;
-    }
-
-    if (event_header->status != WLC_E_STATUS_PARTIAL)
-    {
-        return handler_user_data;
-    }
-
-    eresult = (wl_escan_result_t *)event_data;
-    bss_info = &eresult->bss_info[0];
-    bss_count = dtoh16(eresult->bss_count);
-
-    version = dtoh32(WHD_READ_32(&bss_info->version) );
-    whd_minor_assert("wl_bss_info_t has wrong version", version == WL_BSS_INFO_VERSION);
-
-    /* PNO bss info doesn't contain the correct bss info version */
-    if (version != WL_BSS_INFO_VERSION)
-    {
-        whd_minor_assert("Invalid bss_info version returned by firmware\n", version != WL_BSS_INFO_VERSION);
-
-        return handler_user_data;
-    }
-
-    whd_minor_assert("More than one result returned by firmware", bss_count == 1);
-    if (bss_count != 1)
-    {
-        return handler_user_data;
-    }
-
-    /*
-     * check the SSID length and bssinfo ie offset for buffer overflow
-     */
-    bss_info->ie_offset = dtoh16(bss_info->ie_offset);
-    bss_info->ie_length = dtoh32(bss_info->ie_length);
-    if ( (bss_info->SSID_len > sizeof(bss_info->SSID) ) || (bss_info->ie_offset < sizeof(wl_bss_info_t) ) ||
-         (bss_info->ie_offset > (sizeof(wl_bss_info_t) + bss_info->ie_length) ) )
-    {
-        WPRINT_WHD_ERROR( ("Invalid bss length check %s: SSID_len:%d,ie_len:%" PRIu32 ",ie_off:%d\n", __FUNCTION__,
-                           bss_info->SSID_len, bss_info->ie_length, bss_info->ie_offset) );
-        whd_minor_assert(" bss length check failed\n", bss_info->SSID_len != sizeof(bss_info->SSID) );
-        return handler_user_data;
-    }
-
-    /* Safe to access *whd_scan_result_ptr, as whd_scan_result_ptr == NULL case is handled above */
-    record = (whd_scan_result_t *)(whd_driver->internal_info.whd_scan_result_ptr);
-
-    /*
-     * Totally ignore off channel results.  This can only happen with DSSS (1 and 2 Mb).  It is better to
-     * totally ignore it when it happens.  It is hard to argue it is "significant" given that it can't
-     * happen in 5G with OFDM (or other 2G modulations).  This is left here so that it could be
-     * passed as a scan result for debugging only.
-     */
-    if (!(bss_info->flags & WL_BSS_FLAGS_RSSI_ONCHANNEL) )
-    {
-        record->flags |= WHD_SCAN_RESULT_FLAG_RSSI_OFF_CHANNEL;
-        /* Comment out this return statement to pass along an off channel result for debugging */
-        return handler_user_data;
-    }
-
-    /* Copy the SSID into the output record structure */
-    record->SSID.length = (uint8_t)MIN_OF(sizeof(record->SSID.value), bss_info->SSID_len);
-    memset(record->SSID.value, 0, sizeof(record->SSID.value) );
-    memcpy(record->SSID.value, bss_info->SSID, record->SSID.length);
-
-    /* Copy the BSSID into the output record structure */
-    memcpy( (void *)record->BSSID.octet, (const void *)bss_info->BSSID.octet, sizeof(bss_info->BSSID.octet) );
-
-    /* Copy the RSSI into the output record structure */
-    record->signal_strength = ( int16_t )dtoh16( (WHD_READ_16(&bss_info->RSSI) ) );
-
-    /* Find maximum data rate and put it in the output record structure */
-    record->max_data_rate = 0;
-    count_tmp = WHD_READ_32(&bss_info->rateset.count);
-    if (count_tmp > 16)
-    {
-        count_tmp = 16;
-    }
-
-#ifdef WPRINT_ENABLE_WHD_DEBUG
-    /* print out scan results info */
-    {
-        char ea_buf[WHD_ETHER_ADDR_STR_LEN];
-        char ssid_buf[SSID_NAME_SIZE + 1];
-
-        WPRINT_WHD_DEBUG( ("Scan result: channel=%d signal=%d ssid=%s bssid=%s\n", record->channel,
-                           record->signal_strength,
-                           whd_ssid_to_string(record->SSID.value, record->SSID.length, ssid_buf,
-                                              (uint8_t)sizeof(ssid_buf) ),
-                           whd_ether_ntoa( (const uint8_t *)bss_info->BSSID.octet, ea_buf, sizeof(ea_buf) ) ) );
-    }
-#endif /* WPRINT_ENABLE_WHD_DEBUG */
-
-    for (rate_num = 0; rate_num < count_tmp; rate_num++)
-    {
-        uint32_t rate = RSPEC_TO_KBPS(bss_info->rateset.rates[rate_num]);
-        if (record->max_data_rate < rate)
-        {
-            record->max_data_rate = rate;
-        }
-    }
-
-    bss_info->capability = dtoh16(bss_info->capability);
-
-    /* Write the BSS type into the output record structure */
-    record->bss_type =
-        ( (bss_info->capability & DOT11_CAP_ESS) !=
-          0 ) ? WHD_BSS_TYPE_INFRASTRUCTURE : ( (bss_info->capability & DOT11_CAP_IBSS) !=
-                                                0 ) ? WHD_BSS_TYPE_ADHOC : WHD_BSS_TYPE_UNKNOWN;
-
-    /* Determine the network security.
-     * Some of this section has been copied from the standard broadcom host driver file wl/exe/wlu.c function wl_dump_wpa_rsn_ies
-     */
-
-    ie_offset = WHD_READ_16(&bss_info->ie_offset);
-    cp = (whd_tlv8_header_t *)( ( (uint8_t *)bss_info ) + ie_offset );
-    len = WHD_READ_32(&bss_info->ie_length);
-    bss_info_length = WHD_READ_32(&bss_info->length);
-
-    record->ie_ptr = (uint8_t *)cp;
-    record->ie_len = len;
-
-    /* Validate the length of the IE section */
-    if ( (ie_offset > bss_info_length) || (len > bss_info_length - ie_offset) )
-    {
-        whd_minor_assert("Invalid ie length", 1 == 0);
-        return handler_user_data;
-    }
-
-    /* Find an RSN IE (Robust-Security-Network Information-Element) */
-    rsnie = (rsn_ie_fixed_portion_t *)whd_parse_dot11_tlvs(cp, len, DOT11_IE_ID_RSN);
-
-    /* Find a WPA IE */
-    if (rsnie == NULL)
-    {
-        whd_tlv8_header_t *parse = cp;
-        uint32_t parse_len = len;
-        while ( (wpaie =
-                     (wpa_ie_fixed_portion_t *)whd_parse_tlvs(parse, parse_len, DOT11_IE_ID_VENDOR_SPECIFIC) ) != 0 )
-        {
-            if (whd_is_wpa_ie( (vendor_specific_ie_header_t *)wpaie, &parse, &parse_len ) != WHD_FALSE)
-            {
-                break;
-            }
-        }
-    }
-
-    temp16 = WHD_READ_16(&bss_info->capability);
-
-    /* Check if AP is configured for RSN */
-    if ( (rsnie != NULL) &&
-         (rsnie->tlv_header.length >= RSN_IE_MINIMUM_LENGTH + rsnie->pairwise_suite_count * sizeof(uint32_t) ) )
-    {
-        uint16_t a;
-        uint32_t group_key_suite;
-        akm_suite_portion_t *akm_suites;
-        DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-        akm_suites = (akm_suite_portion_t *)&(rsnie->pairwise_suite_list[rsnie->pairwise_suite_count]);
-        ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-        for (a = 0; a < akm_suites->akm_suite_count; ++a)
-        {
-            uint32_t akm_suite_list_item = ntoh32(akm_suites->akm_suite_list[a]) & 0xFF;
-            if (akm_suite_list_item == (uint32_t)WHD_AKM_PSK)
-            {
-                record->security |= WPA2_SECURITY;
-            }
-            if (akm_suite_list_item == (uint32_t)WHD_AKM_SAE_SHA256)
-            {
-                record->security |= WPA3_SECURITY;
-            }
-            if (akm_suite_list_item == (uint32_t)WHD_AKM_8021X)
-            {
-                record->security |= ENTERPRISE_ENABLED;
-            }
-            if (akm_suite_list_item == (uint32_t)WHD_AKM_FT_8021X)
-            {
-                record->security |= FBT_ENABLED;
-                record->security |= ENTERPRISE_ENABLED;
-            }
-            if (akm_suite_list_item == (uint32_t)WHD_AKM_FT_PSK)
-            {
-                record->security |= FBT_ENABLED;
-            }
-        }
-
-        group_key_suite = ntoh32(rsnie->group_key_suite) & 0xFF;
-        /* Check the RSN contents to see if there are any references to TKIP cipher (2) in the group key or pairwise keys, */
-        /* If so it must be mixed mode. */
-        if (group_key_suite == (uint32_t)WHD_CIPHER_TKIP)
-        {
-            record->security |= TKIP_ENABLED;
-        }
-        if (group_key_suite == (uint32_t)WHD_CIPHER_CCMP_128)
-        {
-            record->security |= AES_ENABLED;
-        }
-
-        for (a = 0; a < rsnie->pairwise_suite_count; ++a)
-        {
-            uint32_t pairwise_suite_list_item = ntoh32(rsnie->pairwise_suite_list[a]) & 0xFF;
-            if (pairwise_suite_list_item == (uint32_t)WHD_CIPHER_TKIP)
-            {
-                record->security |= TKIP_ENABLED;
-            }
-
-            if (pairwise_suite_list_item == (uint32_t)WHD_CIPHER_CCMP_128)
-            {
-                record->security |= AES_ENABLED;
-            }
-        }
-    }
-    /* Check if AP is configured for WPA */
-    else if ( (wpaie != NULL) &&
-              (wpaie->vendor_specific_header.tlv_header.length >=
-               WPA_IE_MINIMUM_LENGTH + wpaie->unicast_suite_count * sizeof(uint32_t) ) )
-    {
-        uint16_t a;
-        uint32_t group_key_suite;
-        akm_suite_portion_t *akm_suites;
-
-        record->security = (whd_security_t)WPA_SECURITY;
-        group_key_suite = ntoh32(wpaie->multicast_suite) & 0xFF;
-        if (group_key_suite == (uint32_t)WHD_CIPHER_TKIP)
-        {
-            record->security |= TKIP_ENABLED;
-        }
-        if (group_key_suite == (uint32_t)WHD_CIPHER_CCMP_128)
-        {
-            record->security |= AES_ENABLED;
-        }
-
-        akm_suites = (akm_suite_portion_t *)&(wpaie->unicast_suite_list[wpaie->unicast_suite_count]);
-        for (a = 0; a < akm_suites->akm_suite_count; ++a)
-        {
-            uint32_t akm_suite_list_item = ntoh32(akm_suites->akm_suite_list[a]) & 0xFF;
-            if (akm_suite_list_item == (uint32_t)WHD_AKM_8021X)
-            {
-                record->security |= ENTERPRISE_ENABLED;
-            }
-        }
-
-        for (a = 0; a < wpaie->unicast_suite_count; ++a)
-        {
-            if (wpaie->unicast_suite_list[a][3] == (uint32_t)WHD_CIPHER_CCMP_128)
-            {
-                record->security |= AES_ENABLED;
-            }
-        }
-    }
-    /* Check if AP is configured for WEP, that is, if the capabilities field indicates privacy, then security supports WEP */
-    else if ( (temp16 & DOT11_CAP_PRIVACY) != 0 )
-    {
-        record->security = WHD_SECURITY_WEP_PSK;
-    }
-    else
-    {
-        /* Otherwise no security */
-        record->security = WHD_SECURITY_OPEN;
-    }
-
-    /* Update the maximum data rate with 11n rates from the HT Capabilities IE */
-    ht_capabilities_ie = (ht_capabilities_ie_t *)whd_parse_tlvs(cp, len, DOT11_IE_ID_HT_CAPABILITIES);
-    if ( (ht_capabilities_ie != NULL) && (ht_capabilities_ie->tlv_header.length == HT_CAPABILITIES_IE_LENGTH) )
-    {
-        uint8_t a;
-        uint8_t supports_40mhz =
-            (ht_capabilities_ie->ht_capabilities_info & HT_CAPABILITIES_INFO_SUPPORTED_CHANNEL_WIDTH_SET) != 0 ? 1 : 0;
-        uint8_t short_gi[2] =
-        { (ht_capabilities_ie->ht_capabilities_info & HT_CAPABILITIES_INFO_SHORT_GI_FOR_20MHZ) != 0 ? 1 : 0,
-          (ht_capabilities_ie->ht_capabilities_info & HT_CAPABILITIES_INFO_SHORT_GI_FOR_40MHZ) != 0 ? 1 : 0 };
-
-        /* Find highest bit from MCS info */
-        for (a = 31; a != 0xFF; --a)
-        {
-            if ( (ht_capabilities_ie->rx_mcs[a / 8] & (1 << (a % 8) ) ) != 0 )
-            {
-                break;
-            }
-        }
-        if (a != 0xFF)
-        {
-            record->max_data_rate =
-                ( uint32_t )(100UL * mcs_data_rate_lookup_table[a][supports_40mhz][short_gi[supports_40mhz]]);
-        }
-    }
-
-    if (bss_info->flags & WL_BSS_FLAGS_FROM_BEACON)
-    {
-        record->flags |= WHD_SCAN_RESULT_FLAG_BEACON;
-    }
-
-    /* Get the channel for pre-N and control channel for n/HT or later */
-    chanspec = dtoh16(WHD_READ_16(&bss_info->chanspec) );
-    if (bss_info->n_cap)
-    {
-        /* Check control channel first.The channel that chanspec reports is the center frequency which might not be the same as
-         * the 20 MHz channel that the beacons is on (primary or control channel) if it's an 802.11n/AC 40MHz or wider channel.
-         */
-        record->channel = bss_info->ctl_ch;
-    }
-    else
-    {
-        /* 11 a/b/g and 20MHz bandwidth only */
-        record->channel = ( ( uint8_t )(chanspec & WL_CHANSPEC_CHAN_MASK) );
-    }
-
-    /* Find country info IE (Country-Information Information-Element) */
-    country_info_ie = (country_info_ie_fixed_portion_t *)whd_parse_dot11_tlvs(cp, len, DOT11_IE_ID_COUNTRY);
-    if ( (country_info_ie != NULL) && (country_info_ie->tlv_header.length >= COUNTRY_INFO_IE_MINIMUM_LENGTH) )
-    {
-        record->ccode[0] = UNSIGNED_CHAR_TO_CHAR(country_info_ie->ccode[0]);
-        record->ccode[1] = UNSIGNED_CHAR_TO_CHAR(country_info_ie->ccode[1]);
-    }
-    record->band =
-        ( (chanspec &
-           GET_C_VAR(whd_driver,
-                     CHANSPEC_BAND_MASK) ) ==
-          GET_C_VAR(whd_driver, CHANSPEC_BAND_2G) ? WHD_802_11_BAND_2_4GHZ : WHD_802_11_BAND_5GHZ );
-
-    whd_driver->internal_info.scan_result_callback(&whd_driver->internal_info.whd_scan_result_ptr, handler_user_data,
-                                                   WHD_SCAN_INCOMPLETE);
-
-    /* whd_driver->internal_info.scan_result_callback() can make whd_scan_result_ptr to NULL */
-    if (whd_driver->internal_info.whd_scan_result_ptr == NULL)
-    {
-        whd_driver->internal_info.scan_result_callback(NULL, handler_user_data, WHD_SCAN_ABORTED);
-        whd_driver->internal_info.scan_result_callback = NULL;
-        whd_wifi_deregister_event_handler(ifp, ifp->event_reg_list[WHD_SCAN_EVENT_ENTRY]);
-        ifp->event_reg_list[WHD_SCAN_EVENT_ENTRY] = WHD_EVENT_NOT_REGISTERED;
-    }
-
-    return handler_user_data;
-}
-
-static void whd_scan_count_handler(whd_scan_result_t **result_ptr, void *user_data, whd_scan_status_t status)
-{
-    uint32_t result;
-    whd_scan_userdata_t *scan_userdata = (whd_scan_userdata_t *)user_data;
-
-    /* finished scan, either succesfully or through an abort */
-    if (status != WHD_SCAN_INCOMPLETE)
-    {
-        DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-        result = cy_rtos_set_semaphore(&scan_userdata->scan_semaphore, WHD_FALSE);
-        ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("Set semaphore failed in %s at %d \n", __func__, __LINE__) );
-        return;
-    }
-
-    /* just count the available networks */
-    scan_userdata->offset += 1;
-
-    memset(*result_ptr, 0, sizeof(whd_scan_result_t) );
-    return;
-}
-
-static void whd_scan_result_handler(whd_scan_result_t **result_ptr, void *user_data, whd_scan_status_t status)
-{
-    uint32_t result;
-    whd_sync_scan_result_t *record;
-    whd_scan_userdata_t *scan_userdata = (whd_scan_userdata_t *)user_data;
-    whd_scan_result_t *current_result = (whd_scan_result_t *)(*result_ptr);
-
-    /* finished scan, either succesfully or through an abort */
-    if (status != WHD_SCAN_INCOMPLETE)
-    {
-        DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-        result =  cy_rtos_set_semaphore(&scan_userdata->scan_semaphore, WHD_FALSE);
-        ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-        if (result != WHD_SUCCESS)
-            WPRINT_WHD_ERROR( ("Set semaphore failed in %s at %d \n", __func__, __LINE__) );
-        return;
-    }
-
-    /* can't really keep anymore scan results */
-    if (scan_userdata->offset == scan_userdata->count)
-    {
-        /*Offset and the count requested is reached. return with out saving the record details */
-        memset(*result_ptr, 0, sizeof(whd_scan_result_t) );
-        return;
-    }
-
-    DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-    /* Safe to access *whd_scan_result_ptr, as whd_scan_result_ptr == NULL case is handled above */
-    record = (whd_sync_scan_result_t *)(&scan_userdata->aps[scan_userdata->offset]);
-    ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-
-    /* Copy the SSID into the output record structure */
-    record->SSID.length = current_result->SSID.length;
-    memset(record->SSID.value, 0, sizeof(record->SSID.value) );
-    memcpy(record->SSID.value, current_result->SSID.value, record->SSID.length);
-
-    /* Copy the BSSID into the output record structure */
-    memcpy( (void *)record->BSSID.octet, (const void *)current_result->BSSID.octet,
-            sizeof(current_result->BSSID.octet) );
-
-    record->security = current_result->security;
-    record->signal_strength = current_result->signal_strength;
-    record->channel = current_result->channel;
-
-    scan_userdata->offset += 1;
-    memset(*result_ptr, 0, sizeof(whd_scan_result_t) );
-    return;
-}
-
-uint32_t whd_wifi_scan_synch(whd_interface_t ifp,
-                             whd_sync_scan_result_t *scan_result,
-                             uint32_t count
-                             )
-{
-    uint32_t result;
-    whd_scan_result_t *scan_result_ptr;
-    whd_scan_userdata_t scan_userdata;
-    scan_userdata.count = count;
-    scan_userdata.aps = scan_result;
-    scan_userdata.offset = 0;
-
-    if (!ifp || !scan_result)
-    {
-        WPRINT_WHD_ERROR( ("Invalid param in func %s at line %d \n",
-                           __func__, __LINE__) );
-        return WHD_WLAN_BADARG;
-    }
-
-    DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-    CHECK_RETURN(cy_rtos_init_semaphore(&scan_userdata.scan_semaphore, 1, 0) );
-    ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-
-    whd_scan_result_callback_t handler = (count == 0)
-                                         ? whd_scan_count_handler : whd_scan_result_handler;
-
-    scan_result_ptr = (whd_scan_result_t *)malloc(sizeof(whd_scan_result_t) );
-    if (scan_result_ptr == NULL)
-    {
-        goto error;
-    }
-    memset(scan_result_ptr, 0, sizeof(whd_scan_result_t) );
-
-    if (whd_wifi_scan(ifp, WHD_SCAN_TYPE_ACTIVE, WHD_BSS_TYPE_ANY, NULL, NULL, NULL, NULL,
-                      handler, (whd_scan_result_t *)scan_result_ptr, &scan_userdata) != WHD_SUCCESS)
-    {
-        WPRINT_WHD_INFO( ("Failed scan \n") );
-        goto error;
-    }
-
-    DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-    result = cy_rtos_get_semaphore(&scan_userdata.scan_semaphore, CY_RTOS_NEVER_TIMEOUT, WHD_FALSE);
-    ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-    whd_assert("Get semaphore failed", (result == CY_RSLT_SUCCESS) || (result == CY_RTOS_TIMEOUT) );
-
-    DISABLE_COMPILER_WARNING(diag_suppress = Pa039)
-    result = cy_rtos_deinit_semaphore(&scan_userdata.scan_semaphore);
-    ENABLE_COMPILER_WARNING(diag_suppress = Pa039)
-    if (WHD_SUCCESS != result)
-    {
-        WPRINT_WHD_INFO( ("Failed join (err %" PRIu32 ")\n", result) );
-    }
-    if (scan_result_ptr != NULL)
-    {
-        free(scan_result_ptr);
-        scan_result_ptr = NULL;
-    }
-    return scan_userdata.offset;
-
-
-error:
-    if (scan_result_ptr != NULL)
-    {
-        free(scan_result_ptr);
-        scan_result_ptr = NULL;
-    }
-
-    return WHD_MALLOC_FAILURE;
-}
-
-/*
- * NOTE: search references of function wlu_get in wl/exe/wlu.c to find what format the returned IOCTL data is.
- */
-uint32_t whd_wifi_scan(whd_interface_t ifp,
-                       whd_scan_type_t scan_type,
-                       whd_bss_type_t bss_type,
-                       const whd_ssid_t *optional_ssid,
-                       const whd_mac_t *optional_mac,
-                       const uint16_t *optional_channel_list,
-                       const whd_scan_extended_params_t *optional_extended_params,
-                       whd_scan_result_callback_t callback,
-                       whd_scan_result_t *result_ptr,
-                       void *user_data
-                       )
-{
-    whd_buffer_t buffer;
-    wl_escan_params_t *scan_params;
-    uint16_t param_size = offsetof(wl_escan_params_t, params) + WL_SCAN_PARAMS_FIXED_SIZE;
-    uint16_t channel_list_size = 0;
-    whd_driver_t whd_driver = ifp->whd_driver;
-    uint16_t event_entry = 0xFF;
-
-    whd_assert("Bad args", callback != NULL);
-
-    if ( (result_ptr == NULL) || (callback == NULL) )
-    {
-        return WHD_BADARG;
-    }
-
-    if (!( (scan_type == WHD_SCAN_TYPE_ACTIVE) || (scan_type == WHD_SCAN_TYPE_PASSIVE) ||
-           (scan_type == WHD_SCAN_TYPE_PROHIBITED_CHANNELS) || (scan_type == WHD_SCAN_TYPE_NO_BSSID_FILTER) ) )
-        return WHD_BADARG;
-
-    if (!( (bss_type == WHD_BSS_TYPE_INFRASTRUCTURE) || (bss_type == WHD_BSS_TYPE_ADHOC) ||
-           (bss_type == WHD_BSS_TYPE_ANY) ) )
-        return WHD_BADARG;
-
-    /* Determine size of channel_list, and add it to the parameter size so correct sized buffer can be allocated */
-    if (optional_channel_list != NULL)
-    {
-        /* Look for entry with channel number 0, which suggests the end of channel_list */
-        for (channel_list_size = 0; optional_channel_list[channel_list_size] != 0; channel_list_size++)
-        {
-        }
-        param_size = ( uint16_t )(param_size + channel_list_size * sizeof(uint16_t) );
-    }
-
-    if (ifp->event_reg_list[WHD_SCAN_EVENT_ENTRY] != WHD_EVENT_NOT_REGISTERED)
-    {
-        whd_wifi_deregister_event_handler(ifp, ifp->event_reg_list[WHD_SCAN_EVENT_ENTRY]);
-        ifp->event_reg_list[WHD_SCAN_EVENT_ENTRY] = WHD_EVENT_NOT_REGISTERED;
-    }
-    CHECK_RETURN(whd_management_set_event_handler(ifp, scan_events, whd_wifi_scan_events_handler, user_data,
-                                                  &event_entry) );
-    if (event_entry >= WHD_MAX_EVENT_SUBSCRIPTION)
-    {
-        WPRINT_WHD_ERROR( ("scan_events registration failed in function %s and line %d", __func__, __LINE__) );
-        return WHD_UNFINISHED;
-    }
-    ifp->event_reg_list[WHD_SCAN_EVENT_ENTRY] = event_entry;
-    /* Allocate a buffer for the IOCTL message */
-    scan_params = (wl_escan_params_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, param_size, IOVAR_STR_ESCAN);
-    CHECK_IOCTL_BUFFER(scan_params);
-
-    /* Clear the scan parameters structure */
-    memset(scan_params, 0, param_size);
-
-    /* Fill in the appropriate details of the scan parameters structure */
-    scan_params->version = htod32(ESCAN_REQ_VERSION);
-    scan_params->action = htod16(WL_SCAN_ACTION_START);
-    scan_params->params.scan_type = (int8_t)scan_type;
-    scan_params->params.bss_type = (int8_t)bss_type;
-
-    /* Fill out the SSID parameter if provided */
-    if (optional_ssid != NULL)
-    {
-        scan_params->params.ssid.SSID_len = htod32(optional_ssid->length);
-        memcpy(scan_params->params.ssid.SSID, optional_ssid->value, scan_params->params.ssid.SSID_len);
-    }
-
-    /* Fill out the BSSID parameter if provided */
-    if (optional_mac != NULL)
-    {
-        memcpy(scan_params->params.bssid.octet, optional_mac, sizeof(whd_mac_t) );
-    }
-    else
-    {
-        memset(scan_params->params.bssid.octet, 0xff, sizeof(whd_mac_t) );
-    }
-
-    /* Fill out the extended parameters if provided */
-    if (optional_extended_params != NULL)
-    {
-        scan_params->params.nprobes = (int32_t)htod32(optional_extended_params->number_of_probes_per_channel);
-        scan_params->params.active_time =
-            (int32_t)htod32(optional_extended_params->scan_active_dwell_time_per_channel_ms);
-        scan_params->params.passive_time = (int32_t)htod32(
-            optional_extended_params->scan_passive_dwell_time_per_channel_ms);
-        scan_params->params.home_time = (int32_t)htod32(
-            optional_extended_params->scan_home_channel_dwell_time_between_channels_ms);
-    }
-    else
-    {
-        scan_params->params.nprobes = (int32_t)htod32(-1);
-        scan_params->params.active_time = (int32_t)htod32(-1);
-        scan_params->params.passive_time = (int32_t)htod32(-1);
-        scan_params->params.home_time = (int32_t)htod32(-1);
-    }
-
-    /* Copy the channel list parameter if provided */
-    if ( (channel_list_size > 0) && (optional_channel_list != NULL) )
-    {
-        int i;
-
-        for (i = 0; i < channel_list_size; i++)
-        {
-            scan_params->params.channel_list[i] = htod16(CH20MHZ_CHSPEC(optional_channel_list[i]) );
-        }
-        scan_params->params.channel_num = (int32_t)htod32(channel_list_size);
-    }
-
-    whd_driver->internal_info.scan_result_callback = callback;
-    whd_driver->internal_info.whd_scan_result_ptr = result_ptr;
-
-    /* Send the Incremental Scan IOVAR message - blocks until the response is received */
-
-    CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_stop_scan(whd_interface_t ifp)
-{
-    whd_buffer_t buffer;
-    wl_escan_params_t *scan_params;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-    whd_driver = ifp->whd_driver;
-    CHECK_DRIVER_NULL(whd_driver)
-
-    /* Allocate a buffer for the IOCTL message */
-    scan_params = (wl_escan_params_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, sizeof(wl_escan_params_t),
-                                                                IOVAR_STR_ESCAN);
-    CHECK_IOCTL_BUFFER(scan_params);
-    /* Clear the scan parameters structure */
-    memset(scan_params, 0, sizeof(wl_escan_params_t) );
-
-    /* Fill in the appropriate details of the scan parameters structure */
-    scan_params->version = htod32(ESCAN_REQ_VERSION);
-    scan_params->action = htod16(WL_SCAN_ACTION_ABORT);
-
-    /* Send the Scan IOVAR message to abort scan*/
-    CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_SET, buffer, 0) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t  whd_wifi_deauth_sta(whd_interface_t ifp, whd_mac_t *mac, whd_dot11_reason_code_t reason)
-{
-    whd_result_t result;
-    scb_val_t *scb_val;
-    whd_buffer_t buffer1;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    if (mac == NULL)
-    {
-        uint8_t *buffer = NULL;
-        whd_maclist_t *clients = NULL;
-        const whd_mac_t *current;
-        wl_bss_info_t ap_info;
-        whd_security_t sec;
-        uint32_t max_clients = 0;
-        size_t size = 0;
-
-        result = whd_wifi_ap_get_max_assoc(ifp, &max_clients);
-        if (result != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("Failed to get max number of associated clients\n") );
-            max_clients = 5;
-        }
-
-        size = (sizeof(uint32_t) + (max_clients * sizeof(whd_mac_t) ) );
-        buffer = calloc(1, size);
-
-        if (buffer == NULL)
-        {
-            WPRINT_WHD_ERROR( ("Unable to allocate memory for associated clients list, %s failed at line %d \n",
-                               __func__, __LINE__) );
-            return WHD_MALLOC_FAILURE;
-        }
-
-        clients = (whd_maclist_t *)buffer;
-        clients->count = max_clients;
-        memset(&ap_info, 0, sizeof(wl_bss_info_t) );
-
-        result = whd_wifi_get_associated_client_list(ifp, clients, (uint16_t)size);
-        if (result != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("Failed to get client list, %s failed at line %d \n", __func__, __LINE__) );
-            free(buffer);
-            return result;
-        }
-
-        current = &clients->mac_list[0];
-        result = whd_wifi_get_ap_info(ifp, &ap_info, &sec);
-        if (result != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("Function %s failed at line %d \n", __func__, __LINE__) );
-            free(buffer);
-            return result;
-        }
-
-
-        while ( (clients->count > 0) && (!(NULL_MAC(current->octet) ) ) )
-        {
-            if (memcmp(current->octet, &(ap_info.BSSID), sizeof(whd_mac_t) ) != 0)
-            {
-                WPRINT_WHD_INFO( ("Deauthenticating STA MAC: %.2X:%.2X:%.2X:%.2X:%.2X:%.2X\n", current->octet[0],
-                                  current->octet[1], current->octet[2], current->octet[3], current->octet[4],
-                                  current->octet[5]) );
-
-                scb_val = (scb_val_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer1, sizeof(scb_val_t) );
-                if (scb_val == NULL)
-                {
-                    WPRINT_WHD_ERROR( ("Buffer alloc failed in function %s at line %d \n", __func__, __LINE__) );
-                    free(buffer);
-                    return WHD_BUFFER_ALLOC_FAIL;
-                }
-                memset( (char *)scb_val, 0, sizeof(scb_val_t) );
-                memcpy( (char *)&scb_val->ea, (char *)current, sizeof(whd_mac_t) );
-                scb_val->val = (uint32_t)reason;
-                result = whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SCB_DEAUTHENTICATE_FOR_REASON, buffer1, 0);
-
-                if (result != WHD_SUCCESS)
-                {
-                    WPRINT_WHD_ERROR( ("Failed to deauth client\n") );
-                }
-            }
-
-            --clients->count;
-            ++current;
-        }
-
-        free(buffer);
-
-        return WHD_SUCCESS;
-    }
-
-    scb_val = (scb_val_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer1, sizeof(scb_val_t) );
-    CHECK_IOCTL_BUFFER(scb_val);
-    memset( (char *)scb_val, 0, sizeof(scb_val_t) );
-    memcpy( (char *)&scb_val->ea, (char *)mac, sizeof(whd_mac_t) );
-    scb_val->val = (uint32_t)reason;
-    CHECK_RETURN(whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SCB_DEAUTHENTICATE_FOR_REASON, buffer1, 0) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_get_mac_address(whd_interface_t ifp, whd_mac_t *mac)
-{
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    if (mac == NULL)
-        return WHD_BADARG;
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    CHECK_IOCTL_BUFFER(whd_cdc_get_iovar_buffer(whd_driver, &buffer, sizeof(whd_mac_t), IOVAR_STR_CUR_ETHERADDR) );
-
-    CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response) );
-
-    memcpy(mac, whd_buffer_get_current_piece_data_pointer(whd_driver, response), sizeof(whd_mac_t) );
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_get_bssid(whd_interface_t ifp, whd_mac_t *bssid)
-{
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    whd_result_t result;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    if (bssid == NULL)
-        return WHD_BADARG;
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    if ( (ifp->role == WHD_STA_ROLE) || (ifp->role == WHD_AP_ROLE) )
-    {
-        memset(bssid, 0, sizeof(whd_mac_t) );
-        CHECK_IOCTL_BUFFER(whd_cdc_get_ioctl_buffer(whd_driver, &buffer, sizeof(whd_mac_t) ) );
-        if ( (result =
-                  whd_cdc_send_ioctl(ifp, CDC_GET, WLC_GET_BSSID, buffer, &response) ) == WHD_SUCCESS )
-        {
-            memcpy(bssid->octet, whd_buffer_get_current_piece_data_pointer(whd_driver, response), sizeof(whd_mac_t) );
-            CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-        }
-        return result;
-    }
-    else if (ifp->role == WHD_INVALID_ROLE)
-    {
-        WPRINT_WHD_ERROR( ("STA not associated with AP\n") );
-        return WHD_WLAN_NOTASSOCIATED;
-    }
-    else
-    {
-        return WHD_UNSUPPORTED;
-    }
-}
-
-uint32_t whd_wifi_ap_get_max_assoc(whd_interface_t ifp, uint32_t *max_assoc)
-{
-    if (!ifp || !max_assoc)
-    {
-        WPRINT_WHD_ERROR( ("Invalid param in func %s at line %d \n",
-                           __func__, __LINE__) );
-        return WHD_WLAN_BADARG;
-    }
-
-    return whd_wifi_get_iovar_value(ifp, IOVAR_STR_MAX_ASSOC, max_assoc);
-}
-
-uint32_t whd_wifi_get_associated_client_list(whd_interface_t ifp, void *client_list_buffer, uint16_t buffer_length)
-{
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    whd_result_t result;
-    whd_maclist_t *data = NULL;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    /* Check if soft AP interface is up, if not, return a count of 0 as a result */
-    result = whd_wifi_is_ready_to_transceive(ifp);
-    if ( (result == WHD_SUCCESS) && (ifp->role == WHD_AP_ROLE) )
-    {
-        data = (whd_maclist_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, buffer_length);
-        CHECK_IOCTL_BUFFER(data);
-        memset(data, 0, buffer_length);
-        data->count = htod32( ( (whd_maclist_t *)client_list_buffer )->count );
-
-        CHECK_RETURN(whd_cdc_send_ioctl(ifp, CDC_GET, WLC_GET_ASSOCLIST, buffer, &response) );
-
-        memcpy(client_list_buffer, (void *)whd_buffer_get_current_piece_data_pointer(whd_driver,
-                                                                                     response),
-               (size_t)MIN_OF(whd_buffer_get_current_piece_size(whd_driver, response), buffer_length) );
-
-        CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-    }
-    else if (result == WHD_INTERFACE_NOT_UP)
-    {
-        /* not up, so can't have associated clients */
-        ( (whd_maclist_t *)client_list_buffer )->count = 0;
-    }
-    else
-    {
-        WPRINT_WHD_ERROR( ("Invalid Interface\n") );
-        return WHD_INVALID_INTERFACE;
-    }
-    return result;
-}
-
-uint32_t whd_wifi_get_ap_info(whd_interface_t ifp, wl_bss_info_t *ap_info, whd_security_t *security)
-{
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    uint32_t *data;
-    uint32_t security_value; /* hold misc security values */
-    whd_driver_t whd_driver;
-    CHECK_IFP_NULL(ifp);
-
-    if ( (ap_info == NULL) || (security == NULL) )
-        return WHD_BADARG;
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-    /* Read the BSS info */
-    data = (uint32_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, WLC_IOCTL_SMLEN);
-    CHECK_IOCTL_BUFFER(data);
-    *data = WLC_IOCTL_SMLEN;
-    CHECK_RETURN(whd_cdc_send_ioctl(ifp, CDC_GET, WLC_GET_BSS_INFO, buffer, &response) );
-
-    memcpy(ap_info, (void *)(whd_buffer_get_current_piece_data_pointer(whd_driver, response) + 4),
-           sizeof(wl_bss_info_t) );
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-
-    /* Read the WSEC setting */
-    CHECK_RETURN(whd_wifi_get_ioctl_value(ifp, WLC_GET_WSEC, &security_value) );
-    security_value = security_value & SECURITY_MASK;
-    *security = ( whd_security_t )(security_value);
-
-    if (*security == WHD_SECURITY_WEP_PSK)
-    {
-        /* Read the WEP auth setting */
-        CHECK_RETURN(whd_wifi_get_ioctl_value(ifp, WLC_GET_AUTH, &security_value) );
-
-        if (security_value == SHARED_AUTH)
-        {
-            *security |= SHARED_ENABLED;
-        }
-    }
-    else if ( (*security & (TKIP_ENABLED | AES_ENABLED) ) != 0 )
-    {
-        /* Read the WPA auth setting */
-        CHECK_RETURN(whd_wifi_get_ioctl_value(ifp, WLC_GET_WPA_AUTH, &security_value) );
-
-        if (security_value == WPA2_AUTH_PSK)
-        {
-            *security |= WPA2_SECURITY;
-        }
-        else if (security_value == WPA_AUTH_PSK)
-        {
-            *security |= WPA_SECURITY;
-        }
-    }
-    else if (*security != WHD_SECURITY_OPEN)
-    {
-        *security = WHD_SECURITY_UNKNOWN;
-        WPRINT_WHD_ERROR( ("Unknown security type, %s failed at line %d \n", __func__, __LINE__) );
-        return WHD_UNKNOWN_SECURITY_TYPE;
-    }
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_enable_powersave(whd_interface_t ifp)
-{
-    whd_buffer_t buffer;
-    uint32_t *data;
-    whd_driver_t whd_driver;
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    /* Set legacy powersave mode - PM1 */
-    data = (uint32_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, (uint16_t)4);
-    CHECK_IOCTL_BUFFER(data);
-    *data = htod32( (uint32_t)PM1_POWERSAVE_MODE );
-
-    RETURN_WITH_ASSERT(whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_PM, buffer, NULL) );
-}
-
-uint32_t whd_wifi_get_powersave_mode(whd_interface_t ifp, uint32_t *value)
-{
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    if (value == NULL)
-        return WHD_BADARG;
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    return whd_wifi_get_ioctl_value(ifp, WLC_GET_PM, value);
-}
-
-uint32_t whd_wifi_enable_powersave_with_throughput(whd_interface_t ifp, uint16_t return_to_sleep_delay_ms)
-{
-    whd_buffer_t buffer;
-    uint32_t *data;
-    whd_driver_t whd_driver;
-    uint16_t chip_id;
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    if (return_to_sleep_delay_ms < PM2_SLEEP_RET_TIME_MIN)
-    {
-        WPRINT_WHD_ERROR( ("Delay too short, %s failed at line %d \n", __func__, __LINE__) );
-        return WHD_DELAY_TOO_SHORT;
-    }
-    else if (return_to_sleep_delay_ms > PM2_SLEEP_RET_TIME_MAX)
-    {
-        WPRINT_WHD_ERROR( ("Delay too long, %s failed at line %d \n", __func__, __LINE__) );
-        return WHD_DELAY_TOO_LONG;
-    }
-
-    /* Set the maximum time to wait before going back to sleep */
-    CHECK_RETURN(whd_wifi_set_iovar_value(ifp, IOVAR_STR_PM2_SLEEP_RET,
-                                          (uint32_t)(return_to_sleep_delay_ms / 10) * 10) );
-    chip_id = whd_chip_get_chip_id(whd_driver);
-
-    if (chip_id == 43362)
-    {
-        CHECK_RETURN(whd_wifi_set_iovar_value(ifp, IOVAR_STR_PM_LIMIT, NULL_FRAMES_WITH_PM_SET_LIMIT) );
-    }
-
-    /* set PM2 fast return to sleep powersave mode */
-    data = (uint32_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, (uint16_t)4);
-    CHECK_IOCTL_BUFFER(data);
-    *data = htod32( (uint32_t)PM2_POWERSAVE_MODE );
-
-    RETURN_WITH_ASSERT(whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_PM, buffer, NULL) );
-}
-
-uint32_t whd_wifi_disable_powersave(whd_interface_t ifp)
-{
-    whd_buffer_t buffer;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    uint32_t *data = (uint32_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, (uint16_t)4);
-
-    CHECK_IOCTL_BUFFER(data);
-    *data = htod32( (uint32_t)NO_POWERSAVE_MODE );
-    CHECK_RETURN(whd_cdc_send_ioctl(ifp, CDC_SET, WLC_SET_PM, buffer, NULL) );
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_register_multicast_address(whd_interface_t ifp, const whd_mac_t *mac)
-{
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    uint16_t a;
-    mcast_list_t *orig_mcast_list;
-    mcast_list_t *new_mcast_list;
-    whd_driver_t whd_driver;
-
-    if (!ifp || !mac)
-    {
-        WPRINT_WHD_ERROR( ("Invalid param in func %s at line %d \n",
-                           __func__, __LINE__) );
-        return WHD_WLAN_BADARG;
-    }
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    /* Get the current multicast list */
-    CHECK_IOCTL_BUFFER(whd_cdc_get_iovar_buffer(whd_driver, &buffer,
-                                                sizeof(uint32_t) + MAX_SUPPORTED_MCAST_ENTRIES *
-                                                sizeof(whd_mac_t), IOVAR_STR_MCAST_LIST) );
-    CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response) );
-
-    /* Verify address is not currently registered */
-    orig_mcast_list = (mcast_list_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, response);
-    orig_mcast_list->entry_count = dtoh32(orig_mcast_list->entry_count);
-    for (a = 0; a < orig_mcast_list->entry_count; ++a)
-    {
-        /* Check if any address matches */
-        if (0 == memcmp(mac, &orig_mcast_list->macs[a], sizeof(whd_mac_t) ) )
-        {
-            /* A matching address has been found so we can stop now. */
-            CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-            return WHD_SUCCESS;
-        }
-    }
-
-    /* Add the provided address to the list and write the new multicast list */
-    new_mcast_list = (mcast_list_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer,
-                                                              ( uint16_t )(sizeof(uint32_t) +
-                                                                           (orig_mcast_list->entry_count + 1) *
-                                                                           sizeof(whd_mac_t) ), IOVAR_STR_MCAST_LIST);
-    CHECK_IOCTL_BUFFER(new_mcast_list);
-    new_mcast_list->entry_count = orig_mcast_list->entry_count;
-    memcpy(new_mcast_list->macs, orig_mcast_list->macs, orig_mcast_list->entry_count * sizeof(whd_mac_t) );
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-    memcpy(&new_mcast_list->macs[new_mcast_list->entry_count], mac, sizeof(whd_mac_t) );
-    ++new_mcast_list->entry_count;
-    new_mcast_list->entry_count = htod32(new_mcast_list->entry_count);
-    RETURN_WITH_ASSERT(whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL) );
-}
-
-uint32_t whd_wifi_unregister_multicast_address(whd_interface_t ifp, const whd_mac_t *mac)
-{
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    uint16_t a;
-    mcast_list_t *orig_mcast_list;
-    whd_driver_t whd_driver;
-
-    if (!ifp || !mac)
-    {
-        WPRINT_WHD_ERROR( ("Invalid param in func %s at line %d \n",
-                           __func__, __LINE__) );
-        return WHD_WLAN_BADARG;
-    }
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    /* Get the current multicast list */
-    CHECK_IOCTL_BUFFER(whd_cdc_get_iovar_buffer(whd_driver, &buffer,
-                                                sizeof(uint32_t) + MAX_SUPPORTED_MCAST_ENTRIES *
-                                                sizeof(whd_mac_t), IOVAR_STR_MCAST_LIST) );
-    CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response) );
-
-    /* Find the address, assuming it is part of the list */
-    orig_mcast_list = (mcast_list_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, response);
-    orig_mcast_list->entry_count = dtoh32(orig_mcast_list->entry_count);
-    if (orig_mcast_list->entry_count != 0)
-    {
-        mcast_list_t *new_mcast_list = (mcast_list_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer,
-                                                                                ( uint16_t )(sizeof(uint32_t) +
-                                                                                             (orig_mcast_list->
-                                                                                              entry_count - 1) *
-                                                                                             sizeof(whd_mac_t) ),
-                                                                                IOVAR_STR_MCAST_LIST);
-        CHECK_IOCTL_BUFFER(new_mcast_list);
-
-        for (a = 0; a < orig_mcast_list->entry_count; ++a)
-        {
-            WPRINT_WHD_INFO( ("MAC: %.2X:%.2X:%.2X:%.2X:%.2X:%.2X\n", orig_mcast_list->macs[a].octet[0],
-                              orig_mcast_list->macs[a].octet[1], orig_mcast_list->macs[a].octet[2],
-                              orig_mcast_list->macs[a].octet[3], orig_mcast_list->macs[a].octet[4],
-                              orig_mcast_list->macs[a].octet[5]) );
-            if (0 == memcmp(mac, &orig_mcast_list->macs[a], sizeof(whd_mac_t) ) )
-            {
-                /* Copy the existing list up to the matching address */
-                memcpy(new_mcast_list->macs, orig_mcast_list->macs, a * sizeof(whd_mac_t) );
-
-                /* Skip the current address and copy the remaining entries */
-                memcpy(&new_mcast_list->macs[a], &orig_mcast_list->macs[a + 1],
-                       ( size_t )(orig_mcast_list->entry_count - a - 1) * sizeof(whd_mac_t) );
-
-                new_mcast_list->entry_count = orig_mcast_list->entry_count - 1;
-                CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-                new_mcast_list->entry_count = htod32(new_mcast_list->entry_count);
-                RETURN_WITH_ASSERT(whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL) );
-            }
-        }
-        /* There was something in the list, but the request MAC wasn't there */
-        CHECK_RETURN(whd_buffer_release(whd_driver, buffer, WHD_NETWORK_TX) );
-    }
-    /* If we get here than the address wasn't in the list or the list was empty */
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-    WPRINT_WHD_ERROR( ("whd_wifi_unregister_multicast_address address not registered yet \n") );
-    return WHD_DOES_NOT_EXIST;
-}
-
-uint32_t whd_wifi_set_listen_interval(whd_interface_t ifp, uint8_t listen_interval,
-                                      whd_listen_interval_time_unit_t time_unit)
-{
-    uint8_t listen_interval_dtim;
-
-    CHECK_IFP_NULL(ifp);
-
-    switch (time_unit)
-    {
-        case WHD_LISTEN_INTERVAL_TIME_UNIT_DTIM:
-        {
-            listen_interval_dtim = listen_interval;
-            break;
-        }
-        case WHD_LISTEN_INTERVAL_TIME_UNIT_BEACON:
-        {
-            /* If the wake interval measured in DTIMs is set to 0, the wake interval is measured in beacon periods */
-            listen_interval_dtim = 0;
-
-            /* The wake period is measured in beacon periods, set the value as required */
-            CHECK_RETURN(whd_wifi_set_iovar_value(ifp, IOVAR_STR_LISTEN_INTERVAL_BEACON, listen_interval) );
-            break;
-        }
-        default:
-            WPRINT_WHD_ERROR( ("whd_wifi_set_listen_interval: Invalid Time unit specified \n") );
-            return WHD_BADARG;
-    }
-
-    CHECK_RETURN(whd_wifi_set_iovar_value(ifp, IOVAR_STR_LISTEN_INTERVAL_DTIM, listen_interval_dtim) );
-
-    CHECK_RETURN(whd_wifi_set_iovar_value(ifp, IOVAR_STR_LISTEN_INTERVAL_ASSOC, listen_interval) );
-
-    return WHD_SUCCESS;
-
-}
-
-uint32_t whd_wifi_get_listen_interval(whd_interface_t ifp, whd_listen_interval_t *li)
-{
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    int *data;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    if (li == NULL)
-        return WHD_BADARG;
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    data = (int *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, 4, IOVAR_STR_LISTEN_INTERVAL_BEACON);
-    CHECK_IOCTL_BUFFER(data);
-    memset(data, 0, 1);
-    CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response) );
-
-    memcpy( (uint8_t *)&(li->beacon), (char *)whd_buffer_get_current_piece_data_pointer(whd_driver, response), 1 );
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-
-    data = (int *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, 4, IOVAR_STR_LISTEN_INTERVAL_DTIM);
-    CHECK_IOCTL_BUFFER(data);
-    memset(data, 0, 1);
-    CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response) );
-
-    memcpy( (uint8_t *)&(li->dtim), (char *)whd_buffer_get_current_piece_data_pointer(whd_driver, response), 1 );
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-
-    data = (int *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, 4, IOVAR_STR_LISTEN_INTERVAL_ASSOC);
-    CHECK_IOCTL_BUFFER(data);
-    memset(data, 0, 4);
-    CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response) );
-
-    memcpy( (uint16_t *)&(li->assoc), (char *)whd_buffer_get_current_piece_data_pointer(whd_driver, response), 2 );
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_is_ready_to_transceive(whd_interface_t ifp)
-{
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    switch (ifp->role)
-    {
-        case WHD_AP_ROLE:
-            return (whd_wifi_get_ap_is_up(whd_driver) == WHD_TRUE) ? WHD_SUCCESS : WHD_INTERFACE_NOT_UP;
-
-        case WHD_STA_ROLE:
-            return whd_wifi_check_join_status(ifp);
-
-        /* Disables Eclipse static analysis warning */
-        /* No break needed due to returns in all case paths */
-        /* no break */
-        /* Fall Through */
-        case WHD_P2P_ROLE:
-        case WHD_INVALID_ROLE:
-
-        default:
-            return WHD_UNKNOWN_INTERFACE;
-    }
-}
-
-uint32_t whd_wifi_get_acparams(whd_interface_t ifp, edcf_acparam_t *acp)
-{
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    whd_driver_t whd_driver;
-
-    if (!ifp || !acp)
-    {
-        WPRINT_WHD_ERROR( ("Invalid param in func %s at line %d \n",
-                           __func__, __LINE__) );
-        return WHD_WLAN_BADARG;
-    }
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    int *data = (int *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, 64, IOVAR_STR_AC_PARAMS_STA);
-
-    CHECK_IOCTL_BUFFER(data);
-    memset(data, 0, 64);
-    CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response) );
-
-    memcpy( (char *)acp, (char *)whd_buffer_get_current_piece_data_pointer(whd_driver, response),
-            (sizeof(edcf_acparam_t) * 4) );
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_manage_custom_ie(whd_interface_t ifp, whd_custom_ie_action_t action, const uint8_t *oui,
-                                   uint8_t subtype, const void *data, uint16_t length, uint16_t which_packets)
-{
-    whd_buffer_t buffer;
-    vndr_ie_setbuf_t *ie_setbuf;
-    uint32_t *iovar_data;
-    whd_driver_t whd_driver;
-
-    if (!ifp || !oui || !data)
-    {
-        WPRINT_WHD_ERROR( ("Invalid param in func %s at line %d \n",
-                           __func__, __LINE__) );
-        return WHD_WLAN_BADARG;
-    }
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    whd_assert("Bad Args", oui != NULL);
-
-    iovar_data =
-        (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)(sizeof(vndr_ie_setbuf_t) + length + 4),
-                                             "bsscfg:" IOVAR_STR_VENDOR_IE);
-    CHECK_IOCTL_BUFFER(iovar_data);
-    *iovar_data = ifp->bsscfgidx;
-    ie_setbuf = (vndr_ie_setbuf_t *)(iovar_data + 1);
-
-    /* Copy the vndr_ie SET command ("add"/"del") to the buffer */
-    if (action == WHD_ADD_CUSTOM_IE)
-    {
-        memcpy( (char *)ie_setbuf->cmd, "add", 3 );
-    }
-    else
-    {
-        memcpy( (char *)ie_setbuf->cmd, "del", 3 );
-    }
-    ie_setbuf->cmd[3] = 0;
-
-    /* Set the values */
-    ie_setbuf->vndr_ie_buffer.iecount = (int32_t)htod32(1);
-
-    ie_setbuf->vndr_ie_buffer.vndr_ie_list[0].pktflag = htod32(which_packets);
-    ie_setbuf->vndr_ie_buffer.vndr_ie_list[0].vndr_ie_data.id = 0xdd;
-    ie_setbuf->vndr_ie_buffer.vndr_ie_list[0].vndr_ie_data.len =
-        ( uint8_t )(length + sizeof(ie_setbuf->vndr_ie_buffer.vndr_ie_list[0].vndr_ie_data.oui) + 1);                                                              /* +1: one byte for sub type */
-
-    /* Stop lint warning about vndr_ie_list array element not yet being defined */
-    memcpy(ie_setbuf->vndr_ie_buffer.vndr_ie_list[0].vndr_ie_data.oui, oui, (size_t)WIFI_IE_OUI_LENGTH);
-
-    ie_setbuf->vndr_ie_buffer.vndr_ie_list[0].vndr_ie_data.data[0] = subtype;
-
-    memcpy(&ie_setbuf->vndr_ie_buffer.vndr_ie_list[0].vndr_ie_data.data[1], data, length);
-
-    RETURN_WITH_ASSERT(whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL) );
-}
-
-uint32_t whd_wifi_send_action_frame(whd_interface_t ifp, whd_af_params_t *af_params)
-{
-    whd_buffer_t buffer;
-    whd_af_params_t *af_frame;
-    whd_driver_t whd_driver;
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-    af_frame = (whd_af_params_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, WL_WIFI_AF_PARAMS_SIZE,
-                                                           IOVAR_STR_ACTION_FRAME);
-    CHECK_IOCTL_BUFFER (af_frame);
-    memcpy(af_frame, af_params, WL_WIFI_AF_PARAMS_SIZE);
-    RETURN_WITH_ASSERT(whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL) );
-}
-
-uint32_t whd_wifi_set_ioctl_value(whd_interface_t ifp, uint32_t ioctl, uint32_t value)
-{
-    whd_buffer_t buffer;
-    uint32_t *data;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    data = (uint32_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, (uint16_t)sizeof(value) );
-    CHECK_IOCTL_BUFFER(data);
-    *data = htod32(value);
-    CHECK_RETURN(whd_cdc_send_ioctl(ifp, CDC_SET, ioctl, buffer, 0) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_get_ioctl_value(whd_interface_t ifp, uint32_t ioctl, uint32_t *value)
-{
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    CHECK_IOCTL_BUFFER(whd_cdc_get_ioctl_buffer(whd_driver, &buffer, (uint16_t)sizeof(*value) ) );
-    CHECK_RETURN_UNSUPPORTED_OK(whd_cdc_send_ioctl(ifp, CDC_GET, ioctl, buffer, &response) );
-
-    *value = dtoh32(*(uint32_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, response) );
-
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_set_ioctl_buffer(whd_interface_t ifp, uint32_t ioctl, void *in_buffer, uint16_t in_buffer_length)
-{
-    whd_buffer_t buffer;
-    uint32_t *data;
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    data = (uint32_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, in_buffer_length);
-    CHECK_IOCTL_BUFFER(data);
-
-    memcpy(data, in_buffer, in_buffer_length);
-
-    CHECK_RETURN(whd_cdc_send_ioctl(ifp, CDC_SET, ioctl, buffer, NULL) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_get_ioctl_buffer(whd_interface_t ifp, uint32_t ioctl, uint8_t *out_buffer, uint16_t out_length)
-{
-    whd_buffer_t buffer;
-    uint32_t *data;
-    whd_buffer_t response;
-    whd_result_t result;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-    data = (uint32_t *)whd_cdc_get_ioctl_buffer(whd_driver, &buffer, out_length);
-    CHECK_IOCTL_BUFFER(data);
-    memcpy(data, out_buffer, out_length);
-
-    result = whd_cdc_send_ioctl(ifp, CDC_GET, ioctl, buffer, &response);
-
-    /* it worked: copy the result to the output buffer */
-    if (WHD_SUCCESS == result)
-    {
-        data = (uint32_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, response);
-        *data = dtoh32(*data);
-        memcpy(out_buffer, data, out_length);
-        CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-    }
-
-    CHECK_RETURN(result);
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_set_iovar_void(whd_interface_t ifp, const char *iovar)
-{
-    whd_buffer_t buffer;
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)0, iovar);
-
-    return whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL);
-}
-
-uint32_t whd_wifi_set_iovar_value(whd_interface_t ifp, const char *iovar, uint32_t value)
-{
-    whd_buffer_t buffer;
-    uint32_t *data;
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)sizeof(value), iovar);
-    CHECK_IOCTL_BUFFER(data);
-    *data = htod32(value);
-    return whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL);
-}
-
-uint32_t whd_wifi_get_iovar_value(whd_interface_t ifp, const char *iovar, uint32_t *value)
-{
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    CHECK_IOCTL_BUFFER(whd_cdc_get_iovar_buffer(whd_driver, &buffer, 4, iovar) );
-    CHECK_RETURN_UNSUPPORTED_OK(whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response) );
-
-    *value = dtoh32(*(uint32_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, response) );
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_set_iovar_buffer(whd_interface_t ifp, const char *iovar, void *in_buffer, uint16_t in_buffer_length)
-{
-    return whd_wifi_set_iovar_buffers(ifp, iovar, (const void **)&in_buffer, (const uint16_t *)&in_buffer_length, 1);
-}
-
-uint32_t whd_wifi_get_iovar_buffer(whd_interface_t ifp, const char *iovar_name, uint8_t *out_buffer,
-                                   uint16_t out_length)
-{
-    uint32_t *data;
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    whd_result_t result;
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    data = whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)out_length, iovar_name);
-    CHECK_IOCTL_BUFFER(data);
-
-    result = whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response);
-
-    /* it worked: copy the result to the output buffer */
-    if (WHD_SUCCESS == result)
-    {
-        data = (uint32_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, response);
-        *data = dtoh32(*data);
-        memcpy(out_buffer, data, out_length);
-        CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-    }
-
-    return result;
-}
-
-/*
- * format an iovar buffer
- */
-static whd_result_t
-whd_iovar_mkbuf(const char *name, char *data, uint32_t datalen, char *iovar_buf, uint16_t buflen)
-{
-    uint32_t iovar_len;
-
-    iovar_len = strlen(name) + 1;
-
-    /* check for overflow */
-    if ( (iovar_len + datalen) > buflen )
-    {
-        return WHD_BADARG;
-    }
-
-    /* copy data to the buffer past the end of the iovar name string */
-    if (datalen > 0)
-        memmove(&iovar_buf[iovar_len], data, datalen);
-
-    /* copy the name to the beginning of the buffer */
-    strncpy(iovar_buf, name, (iovar_len - 1) );
-
-    return WHD_SUCCESS;
-}
-
-whd_result_t whd_wifi_get_iovar_buffer_with_param(whd_interface_t ifp, const char *iovar_name, void *param,
-                                                  uint32_t paramlen, uint8_t *out_buffer, uint32_t out_length)
-{
-    uint32_t *data;
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    whd_result_t result;
-    whd_driver_t whd_driver;
-
-    if (!ifp || !iovar_name || !param || !out_buffer)
-    {
-        WPRINT_WHD_ERROR( ("Invalid param in func %s at line %d \n",
-                           __func__, __LINE__) );
-        return WHD_WLAN_BADARG;
-    }
-
-    whd_driver = (whd_driver_t)ifp->whd_driver;
-
-    /* Format the input string */
-    result = whd_iovar_mkbuf(iovar_name, param, paramlen, (char *)out_buffer, (uint16_t)out_length);
-    if (result != WHD_SUCCESS)
-        return result;
-
-    data = whd_cdc_get_ioctl_buffer(whd_driver, &buffer, (uint16_t)out_length);
-
-    if (data == NULL)
-        return WHD_WLAN_NOMEM;
-
-    memcpy(data, out_buffer, out_length);
-
-    result = (whd_result_t)whd_cdc_send_ioctl(ifp, CDC_GET, WLC_GET_VAR, buffer, &response);
-
-    if (result == WHD_SUCCESS)
-    {
-        memcpy(out_buffer, whd_buffer_get_current_piece_data_pointer(whd_driver, response),
-               (size_t)MIN_OF(whd_buffer_get_current_piece_size(whd_driver, response), out_length) );
-        CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-    }
-
-    return result;
-}
-
-uint32_t whd_wifi_set_iovar_buffers(whd_interface_t ifp, const char *iovar, const void **in_buffers,
-                                    const uint16_t *lengths, const uint8_t num_buffers)
-{
-    whd_buffer_t buffer;
-    uint32_t *data;
-    int tot_in_buffer_length = 0;
-    uint8_t buffer_num = 0;
-    whd_driver_t whd_driver = ifp->whd_driver;
-
-    /* get total length of all buffers: they will be copied into memory one after the other. */
-    for (; buffer_num < num_buffers; buffer_num++)
-    {
-        tot_in_buffer_length += lengths[buffer_num];
-    }
-
-    /* get a valid buffer */
-    data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)tot_in_buffer_length, iovar);
-    CHECK_IOCTL_BUFFER(data);
-
-    /* copy all data into buffer */
-    for (buffer_num = 0; buffer_num < num_buffers; buffer_num++)
-    {
-        memcpy(data, in_buffers[buffer_num], lengths[buffer_num]);
-        data += lengths[buffer_num];
-    }
-
-    /* send iovar */
-    return whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL);
-}
-
-uint32_t whd_wifi_get_clm_version(whd_interface_t ifp, char *version, uint8_t length)
-{
-    whd_result_t result;
-
-    CHECK_IFP_NULL(ifp);
-
-    if (version == NULL)
-        return WHD_BADARG;
-
-    version[0] = '\0';
-
-    result = whd_wifi_get_iovar_buffer(ifp, IOVAR_STR_CLMVER, (uint8_t *)version, length);
-    if ( (result == WHD_SUCCESS) && version[0] )
-    {
-        uint8_t version_length;
-        char *p;
-
-        version_length = strlen(version);
-
-        /* -2 becase \0 termination needs a char and strlen doesn't include length of \0 */
-        if (version_length > length - 2)
-            version_length = length - 2;
-        version[version_length + 1] = '\0';
-
-        /* Replace all newline/linefeed characters with space character */
-        p = version;
-        while ( (p = strchr(p, '\n') ) != NULL )
-        {
-            *p = ' ';
-        }
-    }
-
-    CHECK_RETURN(result);
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_get_wifi_version(whd_interface_t ifp, char *buf, uint8_t length)
-{
-    whd_result_t result;
-    uint8_t ver_len;
-
-    CHECK_IFP_NULL(ifp);
-
-    if (buf == NULL)
-        return WHD_BADARG;
-
-    result = whd_wifi_get_iovar_buffer(ifp, IOVAR_STR_VERSION, (uint8_t *)buf, length);
-
-    ver_len = strlen(buf);
-
-    if (ver_len > length - 2)
-        ver_len = length - 2;
-
-    if ( (ver_len > 1) && (buf[ver_len + 1] == '\n') )
-    {
-        buf[ver_len + 1] = '\0';
-    }
-
-    CHECK_RETURN(result);
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_network_get_ifidx_from_ifp(whd_interface_t ifp, uint8_t *ifidx)
-{
-    CHECK_IFP_NULL(ifp);
-
-    if (!ifidx)
-        return WHD_BADARG;
-
-    *ifidx = ifp->ifidx;
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_network_get_bsscfgidx_from_ifp(whd_interface_t ifp, uint8_t *bsscfgidx)
-{
-    CHECK_IFP_NULL(ifp);
-
-    if (!bsscfgidx)
-        return WHD_BADARG;
-
-    *bsscfgidx = ifp->bsscfgidx;
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_ap_set_beacon_interval(whd_interface_t ifp, uint16_t interval)
-{
-    CHECK_IFP_NULL(ifp);
-
-    CHECK_RETURN(whd_wifi_set_ioctl_value(ifp, WLC_SET_BCNPRD, interval) );
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_ap_set_dtim_interval(whd_interface_t ifp, uint16_t interval)
-{
-    CHECK_IFP_NULL(ifp);
-
-    CHECK_RETURN(whd_wifi_set_ioctl_value(ifp, WLC_SET_DTIMPRD, interval) );
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_get_bss_info(whd_interface_t ifp, wl_bss_info_t *bi)
-{
-    whd_buffer_t buffer, response;
-    uint32_t result;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    CHECK_DRIVER_NULL(whd_driver);
-
-    if (bi == NULL)
-        return WHD_BADARG;
-
-    if (whd_cdc_get_ioctl_buffer(whd_driver, &buffer, WLC_IOCTL_SMLEN) == NULL)
-    {
-        WPRINT_WHD_INFO( ("%s: Unable to malloc WLC_GET_BSS_INFO buffer\n", __FUNCTION__) );
-        return WHD_SUCCESS;
-    }
-    result = whd_cdc_send_ioctl(ifp, CDC_GET, WLC_GET_BSS_INFO, buffer, &response);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_INFO( ("%s: WLC_GET_BSS_INFO Failed\n", __FUNCTION__) );
-        return result;
-    }
-
-    memcpy(bi, whd_buffer_get_current_piece_data_pointer(whd_driver, response)  + 4, sizeof(wl_bss_info_t) );
-
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-
-    return WHD_SUCCESS;
-}
-
-uint32_t whd_wifi_set_coex_config(whd_interface_t ifp, whd_coex_config_t *coex_config)
-{
-    return whd_wifi_set_iovar_buffer(ifp, IOVAR_STR_BTC_LESCAN_PARAMS, &coex_config->le_scan_params,
-                                     sizeof(whd_btc_lescan_params_t) );
-}
-
-/*
- * ARP Offload version
- *    ARP version in the WLAN Firmware
- *
- * @param[in]    ifp            - whd interface Instance
- * @param[out]    version        - pointer to store version #
- *
- * @return @ref whd_result_t
- */
-whd_result_t whd_arp_version(whd_interface_t ifp, uint32_t *value)
-{
-    CHECK_IFP_NULL(ifp);
-
-    return whd_wifi_get_iovar_value(ifp, IOVAR_STR_ARP_VERSION, value);
-}
-
-whd_result_t whd_arp_peerage_get(whd_interface_t ifp, uint32_t *value)
-{
-    CHECK_IFP_NULL(ifp);
-
-    return whd_wifi_get_iovar_value(ifp, IOVAR_STR_ARP_PEERAGE, value);
-}
-
-whd_result_t whd_arp_peerage_set(whd_interface_t ifp, uint32_t value)
-{
-    CHECK_IFP_NULL(ifp);
-
-    return whd_wifi_set_iovar_value(ifp, IOVAR_STR_ARP_PEERAGE, value);
-}
-
-whd_result_t whd_arp_arpoe_get(whd_interface_t ifp, uint32_t *value)
-{
-    CHECK_IFP_NULL(ifp);
-
-    return whd_wifi_get_iovar_value(ifp, IOVAR_STR_ARPOE, value);
-}
-
-whd_result_t whd_arp_arpoe_set(whd_interface_t ifp, uint32_t value)
-{
-    CHECK_IFP_NULL(ifp);
-
-    return whd_wifi_set_iovar_value(ifp, IOVAR_STR_ARPOE, value);
-}
-
-whd_result_t whd_arp_cache_clear(whd_interface_t ifp)
-{
-    whd_result_t whd_ret;
-    CHECK_IFP_NULL(ifp);
-
-    whd_ret = whd_wifi_set_iovar_void(ifp, IOVAR_STR_ARP_TABLE_CLEAR);
-    return whd_ret;
-}
-
-whd_result_t whd_arp_features_get(whd_interface_t ifp, uint32_t *features)
-{
-    if ( (ifp == NULL) || (features == NULL) )
-    {
-        return WHD_BADARG;
-    }
-
-    if (whd_wifi_get_iovar_buffer(ifp, IOVAR_STR_ARP_OL, (uint8_t *)features, sizeof(uint32_t) ) != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s() failed to get arp_ol for features\n", __func__) );
-        return WHD_IOCTL_FAIL;
-    }
-
-    return WHD_SUCCESS;
-}
-
-whd_result_t whd_arp_features_set(whd_interface_t ifp, uint32_t features)
-{
-    CHECK_IFP_NULL(ifp);
-
-    return whd_wifi_set_iovar_buffer(ifp, IOVAR_STR_ARP_OL, (uint8_t *)&features, sizeof(features) );
-}
-
-whd_result_t whd_arp_features_print(uint32_t features, const char *title)
-{
-    if (title != NULL)
-    {
-        WPRINT_MACRO( ("%s\n", title) );
-    }
-    WPRINT_MACRO( ("            features     : 0x%x\n", (int)features) );
-    WPRINT_MACRO( ("            agent_enabled: (0x%x) %s\n", (int)(features & ARP_OL_AGENT),
-                   (features & ARP_OL_AGENT) ? "Enabled" : "  disabled") );
-    WPRINT_MACRO( ("            snoop_enabled: (0x%x) %s\n", (int)(features & ARP_OL_SNOOP),
-                   (features & ARP_OL_SNOOP) ? "Enabled" : "  disabled") );
-    WPRINT_MACRO( ("  host_auto_reply_enabled: (0x%x) %s\n", (int)(features & ARP_OL_HOST_AUTO_REPLY),
-                   (features & ARP_OL_HOST_AUTO_REPLY) ? "Enabled" : "  disabled") );
-    WPRINT_MACRO( ("  peer_auto_reply_enabled: (0x%x) %s\n", (int)(features & ARP_OL_PEER_AUTO_REPLY),
-                   (features & ARP_OL_PEER_AUTO_REPLY) ? "Enabled" : "  disabled") );
-
-    return WHD_SUCCESS;
-}
-
-whd_result_t whd_arp_hostip_list_add(whd_interface_t ifp, uint32_t *host_ipv4_list, uint32_t count)
-{
-    uint32_t filled = 0;
-    uint32_t current_ipv4_list[ARP_MULTIHOMING_MAX];
-    CHECK_IFP_NULL(ifp);
-
-    whd_result_t whd_ret = WHD_SUCCESS;
-    if (host_ipv4_list == NULL)
-    {
-        WPRINT_WHD_ERROR( ("%s() BAD ARGS ifp:%p host_ipv4_list:%u count %d\n", __func__, ifp, (int)host_ipv4_list,
-                           (int)count) );
-        return WHD_BADARG;
-    }
-    /* check if unique */
-    whd_ret = whd_arp_hostip_list_get(ifp, ARP_MULTIHOMING_MAX, current_ipv4_list, &filled);
-    if ( (whd_ret == WHD_SUCCESS) && (filled > 0) )
-    {
-        uint32_t curr_index;
-        uint32_t new_index;
-
-        for (curr_index = 0; curr_index < filled; curr_index++)
-        {
-            for (new_index = 0; new_index < count; new_index++)
-            {
-                WPRINT_WHD_DEBUG( ("%s() curr:%ld of %ld curr:0x%lx new:%ld of %ld:0x%lx\n", __func__, curr_index,
-                                   filled, current_ipv4_list[curr_index],
-                                   new_index, count, host_ipv4_list[new_index]) );
-                if (current_ipv4_list[curr_index] == host_ipv4_list[new_index])
-                {
-                    /* decrement count */
-                    count--;
-                    if (new_index < count)
-                    {
-                        /* copy next one down */
-                        WPRINT_WHD_DEBUG( ("move %ld (+1) of %ld \n", new_index, count) );
-                        host_ipv4_list[new_index] = host_ipv4_list[new_index + 1];
-
-                    }
-                    break;
-                }
-            }
-        }
-    }
-    else if (whd_ret != WHD_SUCCESS)
-    {
-        WPRINT_WHD_DEBUG( ("%s() whd_arp_hostip_list_get() failed:%d\n", __func__, (int)whd_ret) );
-    }
-
-    if (count > 0)
-    {
-        uint32_t new_index;
-        WPRINT_WHD_DEBUG( ("%s() whd_wifi_set_iovar_buffer( %p, %lx)\n", __func__, host_ipv4_list, count) );
-        for (new_index = 0; new_index < count; new_index++)
-        {
-            WPRINT_WHD_DEBUG( ("  0x%lx\n", host_ipv4_list[new_index]) );
-        }
-        whd_ret = whd_wifi_set_iovar_buffer(ifp, IOVAR_STR_ARP_HOSTIP, host_ipv4_list, (count * sizeof(uint32_t) ) );
-        if (whd_ret != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("Failed to set arp_hostip 0x%x error:%d\n", (int)host_ipv4_list[0], (int)whd_ret) );
-        }
-    }
-    return whd_ret;
-}
-
-whd_result_t whd_arp_hostip_list_add_string(whd_interface_t ifp, const char *ip_addr)
-{
-    /* convert string to uint32_t */
-    uint32_t addr;
-    CHECK_IFP_NULL(ifp);
-
-    whd_str_to_ip(ip_addr, strlen(ip_addr), &addr);
-
-    return whd_arp_hostip_list_add(ifp, &addr, 1);
-}
-
-whd_result_t whd_arp_hostip_list_clear_id(whd_interface_t ifp, uint32_t ipv4_addr)
-{
-    whd_result_t whd_ret;
-    uint32_t filled;
-    uint32_t host_ipv4_list[ARP_MULTIHOMING_MAX];
-    CHECK_IFP_NULL(ifp);
-
-    if (ipv4_addr == 0x00l)
-    {
-        return WHD_BADARG;
-    }
-    memset(host_ipv4_list, 0x00, sizeof(host_ipv4_list) );
-    whd_ret = whd_arp_hostip_list_get(ifp, ARP_MULTIHOMING_MAX, host_ipv4_list, &filled);
-    if ( (whd_ret == WHD_SUCCESS) && (filled > 0) )
-    {
-        uint32_t index;
-
-        /* clear the list in the WLAN processor */
-        whd_ret = whd_wifi_set_iovar_void(ifp, IOVAR_STR_ARP_HOSTIP_CLEAR);
-        if (whd_ret != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%d %s() whd_wifi_set_iovar_void() failed:%d\n", __LINE__, __func__, (int)whd_ret) );
-            return whd_ret;
-        }
-
-        /* remove the one address from the list and re-write arp_hostip list */
-        for (index = 0; index < filled; index++)
-        {
-            WPRINT_WHD_DEBUG( ("%d %s() drop() 0x%lx == 0x%lx ? %s\n", __LINE__, __func__, host_ipv4_list[index],
-                               ipv4_addr, (host_ipv4_list[index] == ipv4_addr) ? "DROP" : "") );
-            if (host_ipv4_list[index] == ipv4_addr)
-            {
-                uint32_t drop;
-                /* drop this one, move rest up */
-                for (drop = index; drop < (filled - 1); drop++)
-                {
-                    host_ipv4_list[drop] = host_ipv4_list[drop + 1];
-                }
-                filled--;
-                /* IP addresses must be added one at a time */
-                for (drop = 0; drop < filled; drop++)
-                {
-                    whd_ret = whd_arp_hostip_list_add(ifp, &host_ipv4_list[drop], sizeof(uint32_t) );
-                }
-                break;
-            }
-        }
-    }
-    else if (whd_ret != WHD_SUCCESS)
-    {
-        WPRINT_WHD_DEBUG( ("%s() whd_arp_hostip_list_get() failed:%d\n", __func__, (int)whd_ret) );
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t whd_arp_hostip_list_clear_id_string(whd_interface_t ifp, const char *ip_addr)
-{
-    /* convert string to uint32_t */
-    uint32_t addr;
-    CHECK_IFP_NULL(ifp);
-
-    whd_str_to_ip(ip_addr, strlen(ip_addr), &addr);
-
-    return whd_arp_hostip_list_clear_id(ifp, addr);
-}
-
-whd_result_t whd_arp_hostip_list_clear(whd_interface_t ifp)
-{
-    CHECK_IFP_NULL(ifp);
-    return whd_wifi_set_iovar_void(ifp, IOVAR_STR_ARP_HOSTIP_CLEAR);
-}
-
-whd_result_t whd_arp_hostip_list_get(whd_interface_t ifp, uint32_t count, uint32_t *host_ipv4_list, uint32_t *filled)
-{
-    whd_result_t whd_ret = WHD_SUCCESS;
-    uint32_t temp[ARP_MULTIHOMING_MAX];
-    arp_ol_stats_t arp_stats;               /* WL struct, not ours! */
-    CHECK_IFP_NULL(ifp);
-
-    if ( (host_ipv4_list == NULL) || (filled == NULL) )
-    {
-        return WHD_BADARG;
-    }
-
-    /* set up the buffer to retrieve the stats data */
-    memset(&arp_stats, 0x00, sizeof(arp_ol_stats_t) );
-    whd_ret = whd_wifi_get_iovar_buffer(ifp, "arp_stats", (uint8_t *)&arp_stats, sizeof(arp_ol_stats_t) );
-    if (whd_ret != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s() failed to get arp_stats\n", __func__) );
-        return WHD_IOCTL_FAIL;
-    }
-
-    *filled = 0;
-    whd_ret =  whd_wifi_get_iovar_buffer(ifp, IOVAR_STR_ARP_HOSTIP, (uint8_t *)&temp, sizeof(temp) );
-    /* transfer the info */
-    if (whd_ret == WHD_SUCCESS)
-    {
-        uint32_t index;
-        for (index = 0; (index < count) && (index < arp_stats.host_ip_entries); index++)
-        {
-            /* only IPv4 !!! */
-            if (htod32(temp[index]) != 0L)
-            {
-                host_ipv4_list[*filled] =  temp[index];
-                *filled = *filled + 1;
-            }
-        }
-    }
-    return whd_ret;
-}
-
-whd_result_t whd_arp_stats_clear(whd_interface_t ifp)
-{
-    whd_result_t whd_ret;
-    CHECK_IFP_NULL(ifp);
-    whd_ret = whd_wifi_set_iovar_void(ifp, IOVAR_STR_ARP_STATS_CLEAR);
-    return whd_ret;
-}
-
-whd_result_t whd_arp_stats_get(whd_interface_t ifp, whd_arp_stats_t *arp_stats)
-{
-    whd_result_t whd_ret;
-    uint32_t filled;
-    static whd_arp_stats_t arp_stats_test;  /* read twice to make sure we match */
-    CHECK_IFP_NULL(ifp);
-
-    if (arp_stats == NULL)
-    {
-        return WHD_BADARG;
-    }
-
-    /* set up the buffer to retreive the data */
-    memcpy(&arp_stats_test, arp_stats, sizeof(whd_arp_stats_t) );
-    memset(arp_stats, 0xFF, sizeof(whd_arp_stats_t) );
-
-    /* read multiple times to make sure we got valid data */
-    do
-    {
-        /* get them until they match */
-        whd_ret =
-            whd_wifi_get_iovar_buffer(ifp, IOVAR_STR_ARP_STATS,   (uint8_t *)&arp_stats->stats,
-                                      sizeof(arp_ol_stats_t) );
-        if (whd_ret != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s() failed to get arp_stats\n", __func__) );
-            return WHD_IOCTL_FAIL;
-        }
-        /* get all feature info in one call */
-        whd_ret =
-            whd_wifi_get_iovar_buffer(ifp, IOVAR_STR_ARP_OL, (uint8_t *)&arp_stats->features_enabled,
-                                      sizeof(arp_stats->features_enabled) );
-        if (whd_ret != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s() failed to get arp_ol\n", __func__) );
-            return WHD_IOCTL_FAIL;
-        }
-        whd_ret = whd_wifi_get_iovar_value(ifp, IOVAR_STR_ARP_VERSION, &(arp_stats->version) );
-        if (whd_ret != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s() failed to get arp_version\n", __func__) );
-            return WHD_IOCTL_FAIL;
-        }
-        whd_ret = whd_wifi_get_iovar_value(ifp, IOVAR_STR_ARP_PEERAGE, &(arp_stats->peerage) );
-        if (whd_ret != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s() failed to get arp_peerage\n", __func__) );
-            return WHD_IOCTL_FAIL;
-        }
-        whd_ret = whd_wifi_get_iovar_value(ifp, IOVAR_STR_ARPOE, &(arp_stats->arpoe) );
-        if (whd_ret != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s() failed to get some settings\n", __func__) );
-            return WHD_IOCTL_FAIL;
-        }
-
-        /* set endian correctly */
-        arp_stats->stats.host_ip_entries     = dtoh32(arp_stats->stats.host_ip_entries);
-        arp_stats->stats.host_ip_overflow     = dtoh32(arp_stats->stats.host_ip_overflow);
-        arp_stats->stats.arp_table_entries     = dtoh32(arp_stats->stats.arp_table_entries);
-        arp_stats->stats.arp_table_overflow = dtoh32(arp_stats->stats.arp_table_overflow);
-        arp_stats->stats.host_request         = dtoh32(arp_stats->stats.host_request);
-        arp_stats->stats.host_reply         = dtoh32(arp_stats->stats.host_reply);
-        arp_stats->stats.host_service         = dtoh32(arp_stats->stats.host_service);
-        arp_stats->stats.peer_request         = dtoh32(arp_stats->stats.peer_request);
-        arp_stats->stats.peer_request_drop     = dtoh32(arp_stats->stats.peer_request_drop);
-        arp_stats->stats.peer_reply         = dtoh32(arp_stats->stats.peer_reply);
-        arp_stats->stats.peer_reply_drop     = dtoh32(arp_stats->stats.peer_reply_drop);
-        arp_stats->stats.peer_service         = dtoh32(arp_stats->stats.peer_service);
-
-        whd_ret = whd_arp_hostip_list_get(ifp, ARP_MULTIHOMING_MAX, arp_stats->host_ip_list, &filled);
-        if (whd_ret != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s() failed to get host_ip_list\n", __func__) );
-            return WHD_IOCTL_FAIL;
-        }
-
-        if (memcmp(&arp_stats_test, arp_stats, sizeof(whd_arp_stats_t) ) == 0)
-        {
-            break;
-        }
-
-        memcpy(&arp_stats_test, arp_stats, sizeof(whd_arp_stats_t) );
-    } while (1);
-
-    return whd_ret;
-}
-
-whd_result_t whd_arp_stats_print(whd_arp_stats_t *arp_stats, const char *title)
-{
-    uint32_t index;
-
-    if (arp_stats == NULL)
-    {
-        return WHD_BADARG;
-    }
-
-    if (title != NULL)
-    {
-        WPRINT_MACRO( ("%s\n", title) );
-    }
-    WPRINT_MACRO( ("                  version: 0x%lx\n", (unsigned long int)arp_stats->version) );
-    WPRINT_MACRO( ("          host_ip_entries: %d\n", (int)arp_stats->stats.host_ip_entries) );
-    WPRINT_MACRO( ("         host_ip_overflow: %d\n", (int)arp_stats->stats.host_ip_overflow) );
-    WPRINT_MACRO( ("        arp_table_entries: %d\n", (int)arp_stats->stats.arp_table_entries) );
-    WPRINT_MACRO( ("       arp_table_overflow: %d\n", (int)arp_stats->stats.arp_table_overflow) );
-    WPRINT_MACRO( ("             host_request: %d\n", (int)arp_stats->stats.host_request) );
-    WPRINT_MACRO( ("               host_reply: %d\n", (int)arp_stats->stats.host_reply) );
-    WPRINT_MACRO( ("             host_service: %d\n", (int)arp_stats->stats.host_service) );
-    WPRINT_MACRO( ("             peer_request: %d\n", (int)arp_stats->stats.peer_request) );
-    WPRINT_MACRO( ("        peer_request_drop: %d\n", (int)arp_stats->stats.peer_request_drop) );
-    WPRINT_MACRO( ("               peer_reply: %d\n", (int)arp_stats->stats.peer_reply) );
-    WPRINT_MACRO( ("          peer_reply_drop: %d\n", (int)arp_stats->stats.peer_reply_drop) );
-    WPRINT_MACRO( ("             peer_service: %d\n", (int)arp_stats->stats.peer_service) );
-    WPRINT_MACRO( ("                  peerage: %d\n", (int)arp_stats->peerage) );
-    WPRINT_MACRO( ("                    arpoe: %d %s\n", (int)arp_stats->arpoe,
-                   (arp_stats->arpoe != 0) ? "Enabled" : "  disabled") );
-
-    whd_arp_features_print(arp_stats->features_enabled, NULL);
-
-    if (arp_stats->stats.host_ip_entries > 0)
-    {
-        WPRINT_MACRO( ("WLAN Device Host IP entries\n") );
-        for (index = 0; index < arp_stats->stats.host_ip_entries; index++)
-        {
-            uint32_t ipv4_addr = arp_stats->host_ip_list[index];
-            char ipv4_string[32];
-            memset(ipv4_string, 0x00, sizeof(ipv4_string) );
-            whd_ip4_to_string(&ipv4_addr, ipv4_string);
-            WPRINT_MACRO( ("  %d of %d IPV4: 0x%x %s\n", (int)index, (int)arp_stats->stats.host_ip_entries,
-                           (int)arp_stats->host_ip_list[index], ipv4_string) );
-        }
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t
-whd_wifi_toggle_packet_filter(whd_interface_t ifp, uint8_t filter_id, whd_bool_t enable)
-{
-    whd_buffer_t buffer;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-    wl_pkt_filter_enable_t *data = (wl_pkt_filter_enable_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer,
-                                                                                      sizeof(wl_pkt_filter_enable_t),
-                                                                                      IOVAR_STR_PKT_FILTER_ENABLE);
-    CHECK_IOCTL_BUFFER(data);
-    data->id     = (uint32_t)filter_id;
-    data->enable = (uint32_t)enable;
-    RETURN_WITH_ASSERT(whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL) );
-}
-
-whd_result_t
-whd_pf_enable_packet_filter(whd_interface_t ifp, uint8_t filter_id)
-{
-    return whd_wifi_toggle_packet_filter(ifp, filter_id, WHD_TRUE);
-}
-
-whd_result_t
-whd_pf_disable_packet_filter(whd_interface_t ifp, uint8_t filter_id)
-{
-    return whd_wifi_toggle_packet_filter(ifp, filter_id, WHD_FALSE);
-}
-
-whd_result_t
-whd_pf_add_packet_filter(whd_interface_t ifp, const whd_packet_filter_t *settings)
-{
-    wl_pkt_filter_t *packet_filter;
-    whd_driver_t whd_driver;
-    whd_buffer_t buffer;
-    uint32_t buffer_length =
-        (uint32_t)( (2 * (uint32_t)settings->mask_size) + WL_PKT_FILTER_FIXED_LEN + WL_PKT_FILTER_PATTERN_FIXED_LEN );
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    packet_filter = (wl_pkt_filter_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)buffer_length,
-                                                                IOVAR_STR_PKT_FILTER_ADD);
-    CHECK_IOCTL_BUFFER(packet_filter);
-
-    /* Copy filter entries */
-    packet_filter->id                   = settings->id;
-    packet_filter->type                 = 0;
-    packet_filter->negate_match         = settings->rule;
-    packet_filter->u.pattern.offset     = (uint32_t)settings->offset;
-    packet_filter->u.pattern.size_bytes = settings->mask_size;
-
-    /* Copy mask */
-    memcpy(packet_filter->u.pattern.mask_and_pattern, settings->mask, settings->mask_size);
-
-    /* Copy filter pattern */
-    memcpy(packet_filter->u.pattern.mask_and_pattern + settings->mask_size, settings->pattern, settings->mask_size);
-
-    RETURN_WITH_ASSERT(whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL) );
-}
-
-whd_result_t
-whd_pf_remove_packet_filter(whd_interface_t ifp, uint8_t filter_id)
-{
-    whd_buffer_t buffer;
-    whd_driver_t whd_driver;
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    uint32_t *data = (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, sizeof(uint32_t),
-                                                          IOVAR_STR_PKT_FILTER_DELETE);
-    CHECK_IOCTL_BUFFER(data);
-    *data = (uint32_t)filter_id;
-    RETURN_WITH_ASSERT(whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL) );
-}
-
-whd_result_t
-whd_pf_get_packet_filter_stats(whd_interface_t ifp, uint8_t filter_id, whd_pkt_filter_stats_t *stats)
-{
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    whd_driver_t whd_driver;
-
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    uint32_t *data =
-        (uint32_t *)whd_cdc_get_iovar_buffer(whd_driver, &buffer, sizeof(uint32_t) + sizeof(wl_pkt_filter_stats_t),
-                                             IOVAR_STR_PKT_FILTER_STATS);
-    CHECK_IOCTL_BUFFER(data);
-
-    memset(data, 0, sizeof(uint32_t) + sizeof(wl_pkt_filter_stats_t) );
-    *data = (uint32_t)filter_id;
-
-    CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response) );
-
-    memcpy( (char *)stats, (char *)whd_buffer_get_current_piece_data_pointer(whd_driver, response),
-            (sizeof(wl_pkt_filter_stats_t) ) );
-
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_TX) );
-
-    return WHD_SUCCESS;
-}
-
-whd_result_t
-whd_wifi_clear_packet_filter_stats(whd_interface_t ifp, uint32_t filter_id)
-{
-    RETURN_WITH_ASSERT(whd_wifi_set_iovar_value(ifp, IOVAR_STR_PKT_FILTER_CLEAR_STATS, (uint32_t)filter_id) );
-}
-
-whd_result_t
-whd_pf_get_packet_filter_mask_and_pattern(whd_interface_t ifp, uint8_t filter_id, uint32_t max_size, uint8_t *mask,
-                                          uint8_t *pattern, uint32_t *size_out)
-{
-    whd_bool_t enabled_list;
-    whd_driver_t whd_driver;
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    for (enabled_list = WHD_FALSE; enabled_list <= WHD_TRUE; enabled_list++)
-    {
-
-        whd_buffer_t buffer;
-        whd_buffer_t response;
-        uint32_t *data;
-        wl_pkt_filter_list_t *filter_list;
-        wl_pkt_filter_t *filter_ptr;
-        uint32_t i;
-        wl_pkt_filter_t *in_filter;
-
-        data = whd_cdc_get_iovar_buffer(whd_driver, &buffer, PACKET_FILTER_LIST_BUFFER_MAX_LEN,
-                                        IOVAR_STR_PKT_FILTER_LIST);
-        CHECK_IOCTL_BUFFER(data);
-        *data = (uint32_t)enabled_list;
-
-        CHECK_RETURN(whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response) );
-
-        filter_list  = (wl_pkt_filter_list_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, response);
-        filter_ptr   = filter_list->filter;
-        for (i = 0; i < filter_list->num; i++)
-        {
-            in_filter  = filter_ptr;
-
-            if (in_filter->id == filter_id)
-            {
-                *size_out = MIN_OF(in_filter->u.pattern.size_bytes, max_size);
-                memcpy (mask,    in_filter->u.pattern.mask_and_pattern, *size_out);
-                memcpy (pattern, in_filter->u.pattern.mask_and_pattern + in_filter->u.pattern.size_bytes, *size_out);
-                CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_RX) );
-                if (*size_out < in_filter->u.pattern.size_bytes)
-                {
-                    return WHD_PARTIAL_RESULTS;
-                }
-                return WHD_SUCCESS;
-            }
-
-            /* Update WL filter pointer */
-            filter_ptr =
-                (wl_pkt_filter_t *)( (char *)filter_ptr +
-                                     (WL_PKT_FILTER_FIXED_LEN + WL_PKT_FILTER_PATTERN_FIXED_LEN + 2 *
-                                      in_filter->u.pattern.size_bytes) );
-
-            /* WLAN returns word-aligned filter list */
-            filter_ptr = (wl_pkt_filter_t *)ROUND_UP( (unsigned long)filter_ptr, 4 );
-        }
-    }
-    return WHD_FILTER_NOT_FOUND;
-}
-
-/* Set/Get TKO retry & interval parameters */
-whd_result_t
-whd_tko_param(whd_interface_t ifp, whd_tko_retry_t *whd_retry, int set)
-{
-    uint32_t len = 0;
-    uint8_t *data = NULL;
-    wl_tko_t *tko = NULL;
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    wl_tko_param_t *wl_param_p = NULL;
-    whd_result_t result = WHD_SUCCESS;
-    whd_driver_t whd_driver;
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    len = (int)(WHD_PAYLOAD_MTU - strlen(IOVAR_STR_TKO) - 1);
-    data = (uint8_t * )whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)len, IOVAR_STR_TKO);
-    if (data == NULL)
-    {
-        WPRINT_WHD_ERROR( ("%s: Failed to get iovar buf\n", __func__) );
-        return WHD_IOCTL_FAIL;
-    }
-
-    tko = (wl_tko_t *)data;
-    tko->subcmd_id = WL_TKO_SUBCMD_PARAM;
-    tko->len = TKO_DATA_OFFSET;
-    wl_param_p = (wl_tko_param_t *)tko->data;
-    tko->len += sizeof(wl_tko_param_t);
-
-    tko->subcmd_id = htod16(tko->subcmd_id);
-    tko->len = htod16(tko->len);
-
-    if (set)
-    {
-        /* SET parameters */
-
-        /* Set defaults if needed */
-        wl_param_p->interval = whd_retry->tko_interval ==
-                               0 ? TCP_KEEPALIVE_OFFLOAD_INTERVAL_SEC : whd_retry->tko_interval;
-        wl_param_p->retry_count = whd_retry->tko_retry_count ==
-                                  0 ? TCP_KEEPALIVE_OFFLOAD_RETRY_COUNT : whd_retry->tko_retry_count;
-        wl_param_p->retry_interval = whd_retry->tko_retry_interval ==
-                                     0 ? TCP_KEEPALIVE_OFFLOAD_RETRY_INTERVAL_SEC : whd_retry->tko_retry_interval;
-
-        result = whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL);
-        if (result != WHD_SUCCESS)
-        {
-            WPRINT_WHD_ERROR( ("%s: Cannot set params\n", __func__) );
-        }
-    }
-    else
-    {
-        /* GET paramters */
-        wl_tko_param_t tko_param_real;
-
-        result = whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response);
-        if (result == WHD_SUCCESS)
-        {
-            wl_param_p = &tko_param_real;
-            memcpy( (char *)wl_param_p,
-                    (char *)whd_buffer_get_current_piece_data_pointer(whd_driver, response) + TKO_DATA_OFFSET,
-                    (sizeof(wl_tko_param_t) ) );
-            CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_TX) );
-
-            /* Copy items from wl level struct to higher level struct */
-            whd_retry->tko_interval = wl_param_p->interval;
-            whd_retry->tko_retry_interval = wl_param_p->retry_interval;
-            whd_retry->tko_retry_count = wl_param_p->retry_count;
-        }
-        else
-        {
-            WPRINT_WHD_ERROR( ("%s: Cannot get params.\n", __func__) );
-        }
-    }
-
-    return result;
-}
-
-/* Query Status */
-whd_result_t
-whd_tko_get_status(whd_interface_t ifp, whd_tko_status_t *whd_status)
-{
-    whd_result_t result = WHD_SUCCESS;
-    uint32_t len = 0;
-    uint8_t *data = NULL;
-    wl_tko_t *tko = NULL;
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    whd_driver_t whd_driver;
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    /* Get a buffer */
-    len = (int)(100 - strlen(IOVAR_STR_TKO) - 1);
-    data = (uint8_t * )whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)len, IOVAR_STR_TKO);
-    CHECK_IOCTL_BUFFER(data);
-
-    /* Fill buffer with request */
-    tko = (wl_tko_t *)data;
-    tko->subcmd_id = WL_TKO_SUBCMD_STATUS;
-    tko->len = TKO_DATA_OFFSET;
-
-    tko->len += sizeof(wl_tko_status_t);
-
-    tko->subcmd_id = htod16(tko->subcmd_id);
-    tko->len = htod16(tko->len);
-
-    /* Make request and get result */
-    result = whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s: send iovar failed\n", __func__) );
-        return result;
-    }
-
-    /* Parse result */
-    tko = (wl_tko_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, response);
-    len = htod16(tko->len);
-
-    if (len >= MAX_TKO_CONN + 1)    /* MAX_TKO status's + 1 for the count */
-    {
-        memcpy(whd_status, tko->data, MAX_TKO_CONN + 1);
-    }
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_TX) );
-    return result;
-}
-
-/* Query FW for number tko max tcp connections */
-whd_result_t
-whd_tko_max_assoc(whd_interface_t ifp, uint8_t *max)
-{
-    uint32_t len = 0;
-    uint8_t *data = NULL;
-    wl_tko_t *tko = NULL;
-    whd_buffer_t buffer;
-    whd_buffer_t response;
-    wl_tko_max_tcp_t *tko_max_tcp = NULL;
-    wl_tko_max_tcp_t tcp_result;
-    whd_driver_t whd_driver;
-    whd_result_t result = WHD_SUCCESS;
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-    len = (int)(100 - strlen(IOVAR_STR_TKO) - 1);
-    data = (uint8_t * )whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)len, IOVAR_STR_TKO);
-    CHECK_IOCTL_BUFFER(data);
-
-    tko = (wl_tko_t *)data;
-
-    tko->subcmd_id = WL_TKO_SUBCMD_MAX_TCP;
-    tko->len = TKO_DATA_OFFSET;
-
-    tko_max_tcp = (wl_tko_max_tcp_t *)tko->data;
-    tko->len += sizeof(wl_tko_max_tcp_t);
-
-    tko->subcmd_id = htod16(tko->subcmd_id);
-    tko->len = htod16(tko->len);
-
-    result = whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s: send iovar failed\n", __func__) );
-        return result;
-    }
-    tko_max_tcp = &tcp_result;
-    memcpy( (char *)tko_max_tcp,
-            (char *)whd_buffer_get_current_piece_data_pointer(whd_driver, response) + TKO_DATA_OFFSET,
-            (sizeof(wl_tko_max_tcp_t) ) );
-    CHECK_RETURN(whd_buffer_release(whd_driver, response, WHD_NETWORK_TX) );
-
-    *max = tko_max_tcp->max;
-    return WHD_SUCCESS;
-}
-
-/* Exercise GET of wl_tko_connect_t IOVAR */
-/* Given a index, return info about that index */
-whd_result_t
-whd_tko_get_FW_connect(whd_interface_t ifp, uint8_t index, whd_tko_connect_t *whd_connect, uint16_t buflen)
-{
-    uint32_t len = 0;
-    uint8_t *data = NULL;
-    wl_tko_t *tko = NULL;
-    wl_tko_connect_t *connect = NULL;
-    whd_result_t result = WHD_SUCCESS;
-    whd_buffer_t response;
-    whd_buffer_t buffer;
-    whd_driver_t whd_driver;
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-    CHECK_DRIVER_NULL(whd_driver);
-
-    len = (int)(WHD_PAYLOAD_MTU - strlen(IOVAR_STR_TKO) - 1);
-    data = (uint8_t * )whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)len, IOVAR_STR_TKO);
-    CHECK_IOCTL_BUFFER(data);
-
-    tko = (wl_tko_t *)data;
-
-    tko->subcmd_id = WL_TKO_SUBCMD_CONNECT;
-    tko->len = offsetof(wl_tko_t, data);
-    connect = (wl_tko_connect_t *)tko->data;
-    connect->index = index;
-
-    tko->subcmd_id = htod16(tko->subcmd_id);
-    tko->len = htod16(tko->len);
-
-    result = whd_cdc_send_iovar(ifp, CDC_GET, buffer, &response);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s: send iovar failed\n", __func__) );
-        return result;
-    }
-    tko = (wl_tko_t *)whd_buffer_get_current_piece_data_pointer(whd_driver, response);
-    tko->subcmd_id = dtoh16(tko->subcmd_id);
-    tko->len = dtoh16(tko->len);
-
-    if (tko->subcmd_id  != WL_TKO_SUBCMD_CONNECT)
-    {
-        WPRINT_WHD_ERROR( ("%s: IOVAR returned garbage!\n", __func__) );
-        return WHD_BADARG;
-    }
-    connect = (wl_tko_connect_t *)tko->data;
-    if (tko->len >= sizeof(*connect) )
-    {
-        connect->local_port = dtoh16(connect->local_port);
-        connect->remote_port = dtoh16(connect->remote_port);
-        connect->local_seq = dtoh32(connect->local_seq);
-        connect->remote_seq = dtoh32(connect->remote_seq);
-        if (connect->ip_addr_type != 0)
-        {
-            WPRINT_WHD_ERROR( ("%s: Address type not IPV4\n", __func__) );
-            return WHD_BADARG;
-        }
-        if (connect->ip_addr_type == 0)
-        {
-            /* IPv4 */
-            uint16_t mylen;
-            mylen = sizeof(wl_tko_connect_t) + (2 * IPV4_ADDR_LEN) + connect->request_len + connect->response_len;
-            if (buflen < mylen)
-            {
-                WPRINT_WHD_ERROR( ("%s: Buf len (%d) too small , need %d\n", __func__, buflen, mylen) );
-                return WHD_BADARG;
-            }
-
-            /*
-             * Assumes whd_tko_connect_t and wl_tko_connect_t are the same.
-             * If/when they become different (due to different FW versions, etc) than
-             * this may have to be copied field by field instead.
-             */
-            memcpy(whd_connect, connect, MIN_OF(mylen, buflen) );
-        }
-    }
-    return WHD_SUCCESS;
-}
-
-whd_result_t
-whd_tko_toggle(whd_interface_t ifp, whd_bool_t enable)
-{
-    uint32_t len = 0;
-    uint8_t *data = NULL;
-    wl_tko_t *tko = NULL;
-    whd_buffer_t buffer;
-    wl_tko_enable_t *tko_enable = NULL;
-    whd_driver_t whd_driver;
-    whd_result_t result;
-    CHECK_IFP_NULL(ifp);
-
-    whd_driver = ifp->whd_driver;
-
-
-
-    len = (int)(WHD_PAYLOAD_MTU - strlen(IOVAR_STR_TKO) - 1);
-    data = (uint8_t * )whd_cdc_get_iovar_buffer(whd_driver, &buffer, (uint16_t)len, IOVAR_STR_TKO);
-    CHECK_IOCTL_BUFFER(data);
-
-    tko = (wl_tko_t *)data;
-
-    tko->subcmd_id = WL_TKO_SUBCMD_ENABLE;
-    tko->len = TKO_DATA_OFFSET;
-
-    tko_enable = (wl_tko_enable_t *)tko->data;
-    tko_enable->enable = enable;
-
-    tko->len += sizeof(wl_tko_enable_t);
-
-    tko->subcmd_id = htod16(tko->subcmd_id);
-    tko->len = htod16(tko->len);
-
-    /* invoke SET iovar */
-    result = whd_cdc_send_iovar(ifp, CDC_SET, buffer, NULL);
-    if (result != WHD_SUCCESS)
-    {
-        WPRINT_WHD_ERROR( ("%s: tko %s FAILED\n", __func__, (enable == WHD_TRUE ? "enable" : "disable") ) );
-        return result;
-    }
-    else
-    {
-        WPRINT_WHD_ERROR( ("%s: Successfully %s\n", __func__, (enable == WHD_TRUE ? "enabled" : "disabled") ) );
-    }
-    return result;
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_wifi_p2p.c b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_wifi_p2p.c
deleted file mode 100644
index 53eea0d341..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/src/whd_wifi_p2p.c
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Copyright 2020 Cypress Semiconductor Corporation
- * SPDX-License-Identifier: Apache-2.0
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "whd_ap.h"
-#include "whd_chip_constants.h"
-#include "whd_debug.h"
-#include "whd_events_int.h"
-#include "whd_sdpcm.h"
-#include "whd_thread_internal.h"
-#include "whd_utils.h"
-#include "whd_wifi_api.h"
-#include "whd_wifi_p2p.h"
-
-
-/******************************************************
-* @cond       Constants
-******************************************************/
-
-whd_bool_t whd_wifi_p2p_is_go_up(whd_driver_t whd_driver)
-{
-    return whd_driver->internal_info.whd_wifi_p2p_go_is_up;
-}
-
-void whd_wifi_p2p_set_go_is_up(whd_driver_t whd_driver, whd_bool_t is_up)
-{
-    if (whd_driver->internal_info.whd_wifi_p2p_go_is_up != is_up)
-    {
-        whd_driver->internal_info.whd_wifi_p2p_go_is_up = is_up;
-    }
-}
-
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/version.txt b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/version.txt
deleted file mode 100644
index 167a59886f..0000000000
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/version.txt
+++ /dev/null
@@ -1 +0,0 @@
-1.91.2.3926
diff --git a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/whd_config.h b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/whd_config.h
index c0e890ac7f..cc442a6e44 100644
--- a/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/whd_config.h
+++ b/targets/TARGET_STM/TARGET_STM32H7/TARGET_STM32H747xI/TARGET_NICLA_VISION/COMPONENT_WHD/whd_config.h
@@ -22,45 +22,40 @@
 #ifndef __WHD_CONFIG__
 #define __WHD_CONFIG__
 
-#include "cyhal_gpio.h"
 #include "whd_types.h"
 #include "stm32h7xx_hal.h"
 #include <stdint.h>
 
-#define WHD_COUNTRY     WHD_COUNTRY_AUSTRALIA
-
-/* Internal thread config    */
-#define WHD_THREAD_STACK_SIZE   5120
-#define WHD_THREAD_PRIORITY     osPriorityHigh
+/* disable WPRINT_MACRO */
+#define WHD_PRINT_DISABLE
 
 /* please define your configuration , either SDIO or SPI */
 #define CY_WHD_CONFIG_USE_SDIO
 //#define CY_WHD_CONFIG_USE_SPI
 
-/* Set Timeout for your platform */
-#define WLAN_POWER_UP_DELAY_MS  		3000
-#define SDIO_ENUMERATION_TIMEOUT_MS     500
-
+/* select resource implementation */
 #define USES_RESOURCE_GENERIC_FILESYSTEM
 
-#define BSP_LED1   	{GPIOK,{.Pin= GPIO_PIN_5 , .Mode = GPIO_MODE_OUTPUT_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_LOW}}
-#define BSP_LED2		{GPIOK,{.Pin= GPIO_PIN_6 , .Mode = GPIO_MODE_OUTPUT_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_LOW}}
-#define BSP_LED3		{GPIOK,{.Pin= GPIO_PIN_7 , .Mode = GPIO_MODE_OUTPUT_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_LOW}}
+/* if not defined default value is 2 */
+#define CY_WIFI_OOB_INTR_PRIORITY 0
 
-/* power pin */
-#define WIFI_WL_REG_ON  	{GPIOJ,{.Pin= GPIO_PIN_1, .Mode = GPIO_MODE_OUTPUT_PP , .Pull = GPIO_PULLUP , .Speed= GPIO_SPEED_FREQ_LOW}}
-//#define WIFI_32K_CLK    	{GPIOA,{.Pin= GPIO_PIN_8, .Mode = GPIO_MODE_AF_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_LOW , .Alternate = GPIO_AF0_MCO}}
+#define CYBSP_WIFI_HOST_WAKE_IRQ_EVENT CYHAL_GPIO_IRQ_FALL
+#define CYBSP_WIFI_HOST_WAKE CYBSP_SDIO_OOB_IRQ
 
-#define WIFI_SDIO_CMD		{GPIOD,{.Pin= GPIO_PIN_7 , .Mode = GPIO_MODE_AF_PP , .Pull = GPIO_PULLUP , .Speed= GPIO_SPEED_FREQ_VERY_HIGH, .Alternate = GPIO_AF11_SDIO2}}
-#define WIFI_SDIO_CLK  		{GPIOC,{.Pin= GPIO_PIN_1 , .Mode = GPIO_MODE_AF_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_VERY_HIGH, .Alternate = GPIO_AF9_SDIO2}}
-#define WIFI_SDIO_D0		{GPIOB,{.Pin= GPIO_PIN_14, .Mode = GPIO_MODE_AF_PP , .Pull = GPIO_PULLUP , .Speed= GPIO_SPEED_FREQ_VERY_HIGH, .Alternate = GPIO_AF9_SDIO2}}
-#define WIFI_SDIO_D1		{GPIOB,{.Pin= GPIO_PIN_15, .Mode = GPIO_MODE_AF_PP , .Pull = GPIO_PULLUP , .Speed= GPIO_SPEED_FREQ_VERY_HIGH, .Alternate = GPIO_AF9_SDIO2}}
-#define WIFI_SDIO_D2		{GPIOG,{.Pin= GPIO_PIN_11, .Mode = GPIO_MODE_AF_PP , .Pull = GPIO_PULLUP , .Speed= GPIO_SPEED_FREQ_VERY_HIGH, .Alternate = GPIO_AF10_SDIO2}}
-#define WIFI_SDIO_D3 		{GPIOB,{.Pin= GPIO_PIN_4 , .Mode = GPIO_MODE_AF_PP , .Pull = GPIO_PULLUP , .Speed= GPIO_SPEED_FREQ_VERY_HIGH, .Alternate = GPIO_AF9_SDIO2}}
-#define WIFI_SDIO_OOB_IRQ 	{GPIOJ,{.Pin= GPIO_PIN_5 , .Mode = GPIO_MODE_IT_FALLING , .Pull = GPIO_PULLUP , .Speed= GPIO_SPEED_FREQ_VERY_HIGH}}
+#define BSP_LED1            {GPIOK,{.Pin= GPIO_PIN_5 , .Mode = GPIO_MODE_OUTPUT_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_LOW}}
+#define BSP_LED2            {GPIOK,{.Pin= GPIO_PIN_6 , .Mode = GPIO_MODE_OUTPUT_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_LOW}}
+#define BSP_LED3            {GPIOK,{.Pin= GPIO_PIN_7 , .Mode = GPIO_MODE_OUTPUT_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_LOW}}
 
-#ifndef CYHAL_NC_PIN_VALUE
-#define CYHAL_NC_PIN_VALUE ( (cyhal_gpio_t)0xFFFFFFFF )
-#endif
+/* power pin */
+#define WIFI_WL_REG_ON      {GPIOJ,{.Pin= GPIO_PIN_1, .Mode = GPIO_MODE_OUTPUT_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_LOW}}
+//#define WIFI_32K_CLK      {GPIOA,{.Pin= GPIO_PIN_8, .Mode = GPIO_MODE_AF_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_LOW , .Alternate = GPIO_AF0_MCO}}
+
+#define WIFI_SDIO_CMD       {GPIOD,{.Pin= GPIO_PIN_2 , .Mode = GPIO_MODE_AF_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_VERY_HIGH, .Alternate = GPIO_AF12_SDIO1}}
+#define WIFI_SDIO_CLK       {GPIOC,{.Pin= GPIO_PIN_12, .Mode = GPIO_MODE_AF_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_VERY_HIGH, .Alternate = GPIO_AF12_SDIO1}}
+#define WIFI_SDIO_D0        {GPIOC,{.Pin= GPIO_PIN_8 , .Mode = GPIO_MODE_AF_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_VERY_HIGH, .Alternate = GPIO_AF12_SDIO1}}
+#define WIFI_SDIO_D1        {GPIOC,{.Pin= GPIO_PIN_9 , .Mode = GPIO_MODE_AF_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_VERY_HIGH, .Alternate = GPIO_AF12_SDIO1}}
+#define WIFI_SDIO_D2        {GPIOC,{.Pin= GPIO_PIN_10, .Mode = GPIO_MODE_AF_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_VERY_HIGH, .Alternate = GPIO_AF12_SDIO1}}
+#define WIFI_SDIO_D3        {GPIOC,{.Pin= GPIO_PIN_11, .Mode = GPIO_MODE_AF_PP , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_VERY_HIGH, .Alternate = GPIO_AF12_SDIO1}}
+#define WIFI_SDIO_OOB_IRQ   {GPIOJ,{.Pin= GPIO_PIN_5,  .Mode = GPIO_MODE_IT_FALLING , .Pull = GPIO_NOPULL , .Speed= GPIO_SPEED_FREQ_VERY_HIGH}}
 
 #endif
-- 
2.25.1

